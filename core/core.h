#pragma once

#ifndef GO_QTCORE_H
#define GO_QTCORE_H

#ifdef __cplusplus
extern "C" {
#endif

int QAbstractAnimation_CurrentLoop(void* ptr);
int QAbstractAnimation_CurrentTime(void* ptr);
int QAbstractAnimation_Direction(void* ptr);
int QAbstractAnimation_LoopCount(void* ptr);
void QAbstractAnimation_SetCurrentTime(void* ptr, int msecs);
void QAbstractAnimation_SetDirection(void* ptr, int direction);
void QAbstractAnimation_SetLoopCount(void* ptr, int loopCount);
int QAbstractAnimation_State(void* ptr);
void QAbstractAnimation_ConnectCurrentLoopChanged(void* ptr);
void QAbstractAnimation_DisconnectCurrentLoopChanged(void* ptr);
void QAbstractAnimation_CurrentLoopChanged(void* ptr, int currentLoop);
int QAbstractAnimation_CurrentLoopTime(void* ptr);
void QAbstractAnimation_ConnectDirectionChanged(void* ptr);
void QAbstractAnimation_DisconnectDirectionChanged(void* ptr);
void QAbstractAnimation_DirectionChanged(void* ptr, int newDirection);
int QAbstractAnimation_Duration(void* ptr);
int QAbstractAnimation_Event(void* ptr, void* event);
int QAbstractAnimation_EventDefault(void* ptr, void* event);
void QAbstractAnimation_ConnectFinished(void* ptr);
void QAbstractAnimation_DisconnectFinished(void* ptr);
void QAbstractAnimation_Finished(void* ptr);
void* QAbstractAnimation_Group(void* ptr);
void QAbstractAnimation_Pause(void* ptr);
void QAbstractAnimation_Resume(void* ptr);
void QAbstractAnimation_SetPaused(void* ptr, int paused);
void QAbstractAnimation_Start(void* ptr, int policy);
void QAbstractAnimation_ConnectStateChanged(void* ptr);
void QAbstractAnimation_DisconnectStateChanged(void* ptr);
void QAbstractAnimation_StateChanged(void* ptr, int newState, int oldState);
void QAbstractAnimation_Stop(void* ptr);
int QAbstractAnimation_TotalDuration(void* ptr);
void QAbstractAnimation_UpdateDirection(void* ptr, int direction);
void QAbstractAnimation_UpdateDirectionDefault(void* ptr, int direction);
void QAbstractAnimation_UpdateState(void* ptr, int newState, int oldState);
void QAbstractAnimation_UpdateStateDefault(void* ptr, int newState, int oldState);
void QAbstractAnimation_DestroyQAbstractAnimation(void* ptr);
void QAbstractAnimation_TimerEvent(void* ptr, void* event);
void QAbstractAnimation_TimerEventDefault(void* ptr, void* event);
void QAbstractAnimation_ChildEvent(void* ptr, void* event);
void QAbstractAnimation_ChildEventDefault(void* ptr, void* event);
void QAbstractAnimation_CustomEvent(void* ptr, void* event);
void QAbstractAnimation_CustomEventDefault(void* ptr, void* event);
void QAbstractEventDispatcher_ConnectAboutToBlock(void* ptr);
void QAbstractEventDispatcher_DisconnectAboutToBlock(void* ptr);
void QAbstractEventDispatcher_AboutToBlock(void* ptr);
void QAbstractEventDispatcher_ConnectAwake(void* ptr);
void QAbstractEventDispatcher_DisconnectAwake(void* ptr);
void QAbstractEventDispatcher_Awake(void* ptr);
void QAbstractEventDispatcher_Flush(void* ptr);
void QAbstractEventDispatcher_InstallNativeEventFilter(void* ptr, void* filterObj);
void* QAbstractEventDispatcher_QAbstractEventDispatcher_Instance(void* thread);
void QAbstractEventDispatcher_Interrupt(void* ptr);
int QAbstractEventDispatcher_ProcessEvents(void* ptr, int flags);
void QAbstractEventDispatcher_RegisterSocketNotifier(void* ptr, void* notifier);
int QAbstractEventDispatcher_RemainingTime(void* ptr, int timerId);
void QAbstractEventDispatcher_RemoveNativeEventFilter(void* ptr, void* filter);
void QAbstractEventDispatcher_UnregisterSocketNotifier(void* ptr, void* notifier);
int QAbstractEventDispatcher_UnregisterTimer(void* ptr, int timerId);
int QAbstractEventDispatcher_UnregisterTimers(void* ptr, void* object);
void QAbstractEventDispatcher_WakeUp(void* ptr);
void QAbstractEventDispatcher_DestroyQAbstractEventDispatcher(void* ptr);
void QAbstractEventDispatcher_TimerEvent(void* ptr, void* event);
void QAbstractEventDispatcher_TimerEventDefault(void* ptr, void* event);
void QAbstractEventDispatcher_ChildEvent(void* ptr, void* event);
void QAbstractEventDispatcher_ChildEventDefault(void* ptr, void* event);
void QAbstractEventDispatcher_CustomEvent(void* ptr, void* event);
void QAbstractEventDispatcher_CustomEventDefault(void* ptr, void* event);
void* QAbstractItemModel_Sibling(void* ptr, int row, int column, void* index);
void* QAbstractItemModel_SiblingDefault(void* ptr, int row, int column, void* index);
void* QAbstractItemModel_Buddy(void* ptr, void* index);
void* QAbstractItemModel_BuddyDefault(void* ptr, void* index);
int QAbstractItemModel_CanDropMimeData(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractItemModel_CanDropMimeDataDefault(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractItemModel_CanFetchMore(void* ptr, void* parent);
int QAbstractItemModel_CanFetchMoreDefault(void* ptr, void* parent);
int QAbstractItemModel_ColumnCount(void* ptr, void* parent);
void QAbstractItemModel_ConnectColumnsAboutToBeInserted(void* ptr);
void QAbstractItemModel_DisconnectColumnsAboutToBeInserted(void* ptr);
void QAbstractItemModel_ConnectColumnsAboutToBeMoved(void* ptr);
void QAbstractItemModel_DisconnectColumnsAboutToBeMoved(void* ptr);
void QAbstractItemModel_ConnectColumnsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_DisconnectColumnsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_ConnectColumnsInserted(void* ptr);
void QAbstractItemModel_DisconnectColumnsInserted(void* ptr);
void QAbstractItemModel_ConnectColumnsMoved(void* ptr);
void QAbstractItemModel_DisconnectColumnsMoved(void* ptr);
void QAbstractItemModel_ConnectColumnsRemoved(void* ptr);
void QAbstractItemModel_DisconnectColumnsRemoved(void* ptr);
void* QAbstractItemModel_Data(void* ptr, void* index, int role);
int QAbstractItemModel_DropMimeData(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractItemModel_DropMimeDataDefault(void* ptr, void* data, int action, int row, int column, void* parent);
void QAbstractItemModel_FetchMore(void* ptr, void* parent);
void QAbstractItemModel_FetchMoreDefault(void* ptr, void* parent);
int QAbstractItemModel_Flags(void* ptr, void* index);
int QAbstractItemModel_FlagsDefault(void* ptr, void* index);
int QAbstractItemModel_HasChildren(void* ptr, void* parent);
int QAbstractItemModel_HasChildrenDefault(void* ptr, void* parent);
int QAbstractItemModel_HasIndex(void* ptr, int row, int column, void* parent);
void* QAbstractItemModel_HeaderData(void* ptr, int section, int orientation, int role);
void* QAbstractItemModel_HeaderDataDefault(void* ptr, int section, int orientation, int role);
void QAbstractItemModel_ConnectHeaderDataChanged(void* ptr);
void QAbstractItemModel_DisconnectHeaderDataChanged(void* ptr);
void QAbstractItemModel_HeaderDataChanged(void* ptr, int orientation, int first, int last);
void* QAbstractItemModel_Index(void* ptr, int row, int column, void* parent);
int QAbstractItemModel_InsertColumn(void* ptr, int column, void* parent);
int QAbstractItemModel_InsertColumns(void* ptr, int column, int count, void* parent);
int QAbstractItemModel_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
int QAbstractItemModel_InsertRow(void* ptr, int row, void* parent);
int QAbstractItemModel_InsertRows(void* ptr, int row, int count, void* parent);
int QAbstractItemModel_InsertRowsDefault(void* ptr, int row, int count, void* parent);
char* QAbstractItemModel_MimeTypes(void* ptr);
char* QAbstractItemModel_MimeTypesDefault(void* ptr);
void QAbstractItemModel_ConnectModelAboutToBeReset(void* ptr);
void QAbstractItemModel_DisconnectModelAboutToBeReset(void* ptr);
void QAbstractItemModel_ConnectModelReset(void* ptr);
void QAbstractItemModel_DisconnectModelReset(void* ptr);
int QAbstractItemModel_MoveColumn(void* ptr, void* sourceParent, int sourceColumn, void* destinationParent, int destinationChild);
int QAbstractItemModel_MoveColumns(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
int QAbstractItemModel_MoveColumnsDefault(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
int QAbstractItemModel_MoveRow(void* ptr, void* sourceParent, int sourceRow, void* destinationParent, int destinationChild);
int QAbstractItemModel_MoveRows(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
int QAbstractItemModel_MoveRowsDefault(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
void* QAbstractItemModel_Parent(void* ptr, void* index);
int QAbstractItemModel_RemoveColumn(void* ptr, int column, void* parent);
int QAbstractItemModel_RemoveColumns(void* ptr, int column, int count, void* parent);
int QAbstractItemModel_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
int QAbstractItemModel_RemoveRow(void* ptr, int row, void* parent);
int QAbstractItemModel_RemoveRows(void* ptr, int row, int count, void* parent);
int QAbstractItemModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
void QAbstractItemModel_Revert(void* ptr);
void QAbstractItemModel_RevertDefault(void* ptr);
int QAbstractItemModel_RowCount(void* ptr, void* parent);
void QAbstractItemModel_ConnectRowsAboutToBeInserted(void* ptr);
void QAbstractItemModel_DisconnectRowsAboutToBeInserted(void* ptr);
void QAbstractItemModel_ConnectRowsAboutToBeMoved(void* ptr);
void QAbstractItemModel_DisconnectRowsAboutToBeMoved(void* ptr);
void QAbstractItemModel_ConnectRowsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_DisconnectRowsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_ConnectRowsInserted(void* ptr);
void QAbstractItemModel_DisconnectRowsInserted(void* ptr);
void QAbstractItemModel_ConnectRowsMoved(void* ptr);
void QAbstractItemModel_DisconnectRowsMoved(void* ptr);
void QAbstractItemModel_ConnectRowsRemoved(void* ptr);
void QAbstractItemModel_DisconnectRowsRemoved(void* ptr);
int QAbstractItemModel_SetData(void* ptr, void* index, void* value, int role);
int QAbstractItemModel_SetDataDefault(void* ptr, void* index, void* value, int role);
int QAbstractItemModel_SetHeaderData(void* ptr, int section, int orientation, void* value, int role);
int QAbstractItemModel_SetHeaderDataDefault(void* ptr, int section, int orientation, void* value, int role);
void QAbstractItemModel_Sort(void* ptr, int column, int order);
void QAbstractItemModel_SortDefault(void* ptr, int column, int order);
void* QAbstractItemModel_Span(void* ptr, void* index);
void* QAbstractItemModel_SpanDefault(void* ptr, void* index);
int QAbstractItemModel_Submit(void* ptr);
int QAbstractItemModel_SubmitDefault(void* ptr);
int QAbstractItemModel_SupportedDragActions(void* ptr);
int QAbstractItemModel_SupportedDragActionsDefault(void* ptr);
int QAbstractItemModel_SupportedDropActions(void* ptr);
int QAbstractItemModel_SupportedDropActionsDefault(void* ptr);
void QAbstractItemModel_DestroyQAbstractItemModel(void* ptr);
void QAbstractItemModel_TimerEvent(void* ptr, void* event);
void QAbstractItemModel_TimerEventDefault(void* ptr, void* event);
void QAbstractItemModel_ChildEvent(void* ptr, void* event);
void QAbstractItemModel_ChildEventDefault(void* ptr, void* event);
void QAbstractItemModel_CustomEvent(void* ptr, void* event);
void QAbstractItemModel_CustomEventDefault(void* ptr, void* event);
void* QAbstractListModel_Index(void* ptr, int row, int column, void* parent);
void* QAbstractListModel_IndexDefault(void* ptr, int row, int column, void* parent);
int QAbstractListModel_DropMimeData(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractListModel_DropMimeDataDefault(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractListModel_Flags(void* ptr, void* index);
int QAbstractListModel_FlagsDefault(void* ptr, void* index);
void* QAbstractListModel_Sibling(void* ptr, int row, int column, void* idx);
void* QAbstractListModel_SiblingDefault(void* ptr, int row, int column, void* idx);
void QAbstractListModel_DestroyQAbstractListModel(void* ptr);
void QAbstractListModel_FetchMore(void* ptr, void* parent);
void QAbstractListModel_FetchMoreDefault(void* ptr, void* parent);
void QAbstractListModel_Revert(void* ptr);
void QAbstractListModel_RevertDefault(void* ptr);
void QAbstractListModel_Sort(void* ptr, int column, int order);
void QAbstractListModel_SortDefault(void* ptr, int column, int order);
void QAbstractListModel_TimerEvent(void* ptr, void* event);
void QAbstractListModel_TimerEventDefault(void* ptr, void* event);
void QAbstractListModel_ChildEvent(void* ptr, void* event);
void QAbstractListModel_ChildEventDefault(void* ptr, void* event);
void QAbstractListModel_CustomEvent(void* ptr, void* event);
void QAbstractListModel_CustomEventDefault(void* ptr, void* event);
void QAbstractNativeEventFilter_DestroyQAbstractNativeEventFilter(void* ptr);
char* QAbstractNativeEventFilter_ObjectNameAbs(void* ptr);
void QAbstractNativeEventFilter_SetObjectNameAbs(void* ptr, char* name);
void* QAbstractProxyModel_Buddy(void* ptr, void* index);
void* QAbstractProxyModel_BuddyDefault(void* ptr, void* index);
int QAbstractProxyModel_CanDropMimeData(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractProxyModel_CanDropMimeDataDefault(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractProxyModel_CanFetchMore(void* ptr, void* parent);
int QAbstractProxyModel_CanFetchMoreDefault(void* ptr, void* parent);
void* QAbstractProxyModel_Data(void* ptr, void* proxyIndex, int role);
void* QAbstractProxyModel_DataDefault(void* ptr, void* proxyIndex, int role);
int QAbstractProxyModel_DropMimeData(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractProxyModel_DropMimeDataDefault(void* ptr, void* data, int action, int row, int column, void* parent);
void QAbstractProxyModel_FetchMore(void* ptr, void* parent);
void QAbstractProxyModel_FetchMoreDefault(void* ptr, void* parent);
int QAbstractProxyModel_Flags(void* ptr, void* index);
int QAbstractProxyModel_FlagsDefault(void* ptr, void* index);
int QAbstractProxyModel_HasChildren(void* ptr, void* parent);
int QAbstractProxyModel_HasChildrenDefault(void* ptr, void* parent);
void* QAbstractProxyModel_HeaderData(void* ptr, int section, int orientation, int role);
void* QAbstractProxyModel_HeaderDataDefault(void* ptr, int section, int orientation, int role);
void* QAbstractProxyModel_MapFromSource(void* ptr, void* sourceIndex);
void* QAbstractProxyModel_MapToSource(void* ptr, void* proxyIndex);
char* QAbstractProxyModel_MimeTypes(void* ptr);
char* QAbstractProxyModel_MimeTypesDefault(void* ptr);
void QAbstractProxyModel_Revert(void* ptr);
void QAbstractProxyModel_RevertDefault(void* ptr);
int QAbstractProxyModel_SetData(void* ptr, void* index, void* value, int role);
int QAbstractProxyModel_SetDataDefault(void* ptr, void* index, void* value, int role);
int QAbstractProxyModel_SetHeaderData(void* ptr, int section, int orientation, void* value, int role);
int QAbstractProxyModel_SetHeaderDataDefault(void* ptr, int section, int orientation, void* value, int role);
void QAbstractProxyModel_SetSourceModel(void* ptr, void* sourceModel);
void QAbstractProxyModel_SetSourceModelDefault(void* ptr, void* sourceModel);
void* QAbstractProxyModel_Sibling(void* ptr, int row, int column, void* idx);
void* QAbstractProxyModel_SiblingDefault(void* ptr, int row, int column, void* idx);
void QAbstractProxyModel_Sort(void* ptr, int column, int order);
void QAbstractProxyModel_SortDefault(void* ptr, int column, int order);
void* QAbstractProxyModel_SourceModel(void* ptr);
void QAbstractProxyModel_ConnectSourceModelChanged(void* ptr);
void QAbstractProxyModel_DisconnectSourceModelChanged(void* ptr);
void* QAbstractProxyModel_Span(void* ptr, void* index);
void* QAbstractProxyModel_SpanDefault(void* ptr, void* index);
int QAbstractProxyModel_Submit(void* ptr);
int QAbstractProxyModel_SubmitDefault(void* ptr);
int QAbstractProxyModel_SupportedDragActions(void* ptr);
int QAbstractProxyModel_SupportedDragActionsDefault(void* ptr);
int QAbstractProxyModel_SupportedDropActions(void* ptr);
int QAbstractProxyModel_SupportedDropActionsDefault(void* ptr);
void QAbstractProxyModel_DestroyQAbstractProxyModel(void* ptr);
void QAbstractProxyModel_TimerEvent(void* ptr, void* event);
void QAbstractProxyModel_TimerEventDefault(void* ptr, void* event);
void QAbstractProxyModel_ChildEvent(void* ptr, void* event);
void QAbstractProxyModel_ChildEventDefault(void* ptr, void* event);
void QAbstractProxyModel_CustomEvent(void* ptr, void* event);
void QAbstractProxyModel_CustomEventDefault(void* ptr, void* event);
int QAbstractState_Active(void* ptr);
void QAbstractState_ConnectActiveChanged(void* ptr);
void QAbstractState_DisconnectActiveChanged(void* ptr);
void QAbstractState_ActiveChanged(void* ptr, int active);
void QAbstractState_ConnectEntered(void* ptr);
void QAbstractState_DisconnectEntered(void* ptr);
int QAbstractState_Event(void* ptr, void* e);
int QAbstractState_EventDefault(void* ptr, void* e);
void QAbstractState_ConnectExited(void* ptr);
void QAbstractState_DisconnectExited(void* ptr);
void* QAbstractState_Machine(void* ptr);
void* QAbstractState_ParentState(void* ptr);
void QAbstractState_DestroyQAbstractState(void* ptr);
void QAbstractState_TimerEvent(void* ptr, void* event);
void QAbstractState_TimerEventDefault(void* ptr, void* event);
void QAbstractState_ChildEvent(void* ptr, void* event);
void QAbstractState_ChildEventDefault(void* ptr, void* event);
void QAbstractState_CustomEvent(void* ptr, void* event);
void QAbstractState_CustomEventDefault(void* ptr, void* event);
void* QAbstractTableModel_Index(void* ptr, int row, int column, void* parent);
void* QAbstractTableModel_IndexDefault(void* ptr, int row, int column, void* parent);
int QAbstractTableModel_DropMimeData(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractTableModel_DropMimeDataDefault(void* ptr, void* data, int action, int row, int column, void* parent);
int QAbstractTableModel_Flags(void* ptr, void* index);
int QAbstractTableModel_FlagsDefault(void* ptr, void* index);
void* QAbstractTableModel_Sibling(void* ptr, int row, int column, void* idx);
void* QAbstractTableModel_SiblingDefault(void* ptr, int row, int column, void* idx);
void QAbstractTableModel_DestroyQAbstractTableModel(void* ptr);
void QAbstractTableModel_FetchMore(void* ptr, void* parent);
void QAbstractTableModel_FetchMoreDefault(void* ptr, void* parent);
void QAbstractTableModel_Revert(void* ptr);
void QAbstractTableModel_RevertDefault(void* ptr);
void QAbstractTableModel_Sort(void* ptr, int column, int order);
void QAbstractTableModel_SortDefault(void* ptr, int column, int order);
void QAbstractTableModel_TimerEvent(void* ptr, void* event);
void QAbstractTableModel_TimerEventDefault(void* ptr, void* event);
void QAbstractTableModel_ChildEvent(void* ptr, void* event);
void QAbstractTableModel_ChildEventDefault(void* ptr, void* event);
void QAbstractTableModel_CustomEvent(void* ptr, void* event);
void QAbstractTableModel_CustomEventDefault(void* ptr, void* event);
void QAbstractTransition_AddAnimation(void* ptr, void* animation);
int QAbstractTransition_Event(void* ptr, void* e);
int QAbstractTransition_EventDefault(void* ptr, void* e);
void* QAbstractTransition_Machine(void* ptr);
void QAbstractTransition_RemoveAnimation(void* ptr, void* animation);
void QAbstractTransition_SetTargetState(void* ptr, void* target);
void QAbstractTransition_SetTransitionType(void* ptr, int ty);
void* QAbstractTransition_SourceState(void* ptr);
void* QAbstractTransition_TargetState(void* ptr);
void QAbstractTransition_ConnectTargetStateChanged(void* ptr);
void QAbstractTransition_DisconnectTargetStateChanged(void* ptr);
void QAbstractTransition_ConnectTargetStatesChanged(void* ptr);
void QAbstractTransition_DisconnectTargetStatesChanged(void* ptr);
int QAbstractTransition_TransitionType(void* ptr);
void QAbstractTransition_ConnectTriggered(void* ptr);
void QAbstractTransition_DisconnectTriggered(void* ptr);
void QAbstractTransition_DestroyQAbstractTransition(void* ptr);
void QAbstractTransition_TimerEvent(void* ptr, void* event);
void QAbstractTransition_TimerEventDefault(void* ptr, void* event);
void QAbstractTransition_ChildEvent(void* ptr, void* event);
void QAbstractTransition_ChildEventDefault(void* ptr, void* event);
void QAbstractTransition_CustomEvent(void* ptr, void* event);
void QAbstractTransition_CustomEventDefault(void* ptr, void* event);
void QAnimationGroup_UpdateDirection(void* ptr, int direction);
void QAnimationGroup_UpdateDirectionDefault(void* ptr, int direction);
void QAnimationGroup_UpdateState(void* ptr, int newState, int oldState);
void QAnimationGroup_UpdateStateDefault(void* ptr, int newState, int oldState);
void QAnimationGroup_TimerEvent(void* ptr, void* event);
void QAnimationGroup_TimerEventDefault(void* ptr, void* event);
void QAnimationGroup_ChildEvent(void* ptr, void* event);
void QAnimationGroup_ChildEventDefault(void* ptr, void* event);
void QAnimationGroup_CustomEvent(void* ptr, void* event);
void QAnimationGroup_CustomEventDefault(void* ptr, void* event);
int QAssociativeIterable_Size(void* ptr);
void* QAssociativeIterable_Value(void* ptr, void* key);
void QBasicTimer_Start(void* ptr, int msec, void* object);
void* QBasicTimer_NewQBasicTimer();
int QBasicTimer_IsActive(void* ptr);
void QBasicTimer_Start2(void* ptr, int msec, int timerType, void* obj);
void QBasicTimer_Stop(void* ptr);
int QBasicTimer_TimerId(void* ptr);
void QBasicTimer_DestroyQBasicTimer(void* ptr);
void* QBitArray_NewQBitArray();
void* QBitArray_NewQBitArray4(void* other);
void* QBitArray_NewQBitArray3(void* other);
void* QBitArray_NewQBitArray2(int size, int value);
int QBitArray_At(void* ptr, int i);
void QBitArray_Clear(void* ptr);
void QBitArray_ClearBit(void* ptr, int i);
int QBitArray_Count(void* ptr);
int QBitArray_Count2(void* ptr, int on);
int QBitArray_Fill(void* ptr, int value, int size);
void QBitArray_Fill2(void* ptr, int value, int begin, int end);
int QBitArray_IsEmpty(void* ptr);
int QBitArray_IsNull(void* ptr);
void QBitArray_Resize(void* ptr, int size);
void QBitArray_SetBit(void* ptr, int i);
void QBitArray_SetBit2(void* ptr, int i, int value);
int QBitArray_Size(void* ptr);
void QBitArray_Swap(void* ptr, void* other);
int QBitArray_TestBit(void* ptr, int i);
int QBitArray_ToggleBit(void* ptr, int i);
void QBitArray_Truncate(void* ptr, int pos);
void* QBuffer_NewQBuffer2(void* byteArray, void* parent);
void* QBuffer_NewQBuffer(void* parent);
int QBuffer_AtEnd(void* ptr);
int QBuffer_AtEndDefault(void* ptr);
void* QBuffer_Buffer(void* ptr);
void* QBuffer_Buffer2(void* ptr);
int QBuffer_CanReadLine(void* ptr);
int QBuffer_CanReadLineDefault(void* ptr);
void QBuffer_Close(void* ptr);
void QBuffer_CloseDefault(void* ptr);
void* QBuffer_Data(void* ptr);
int QBuffer_Open(void* ptr, int flags);
int QBuffer_OpenDefault(void* ptr, int flags);
long long QBuffer_Pos(void* ptr);
long long QBuffer_PosDefault(void* ptr);
long long QBuffer_ReadData(void* ptr, char* data, long long len);
long long QBuffer_ReadDataDefault(void* ptr, char* data, long long len);
int QBuffer_Seek(void* ptr, long long pos);
int QBuffer_SeekDefault(void* ptr, long long pos);
void QBuffer_SetBuffer(void* ptr, void* byteArray);
void QBuffer_SetData(void* ptr, void* data);
void QBuffer_SetData2(void* ptr, char* data, int size);
long long QBuffer_Size(void* ptr);
long long QBuffer_SizeDefault(void* ptr);
long long QBuffer_WriteData(void* ptr, char* data, long long len);
long long QBuffer_WriteDataDefault(void* ptr, char* data, long long len);
void QBuffer_DestroyQBuffer(void* ptr);
void QBuffer_TimerEvent(void* ptr, void* event);
void QBuffer_TimerEventDefault(void* ptr, void* event);
void QBuffer_ChildEvent(void* ptr, void* event);
void QBuffer_ChildEventDefault(void* ptr, void* event);
void QBuffer_CustomEvent(void* ptr, void* event);
void QBuffer_CustomEventDefault(void* ptr, void* event);
void QByteArray_Clear(void* ptr);
int QByteArray_IndexOf3(void* ptr, char* str, int from);
int QByteArray_IsNull(void* ptr);
int QByteArray_LastIndexOf(void* ptr, void* ba, int from);
int QByteArray_LastIndexOf3(void* ptr, char* str, int from);
void* QByteArray_NewQByteArray();
void* QByteArray_NewQByteArray6(void* other);
void* QByteArray_NewQByteArray5(void* other);
void* QByteArray_NewQByteArray2(char* data, int size);
void* QByteArray_NewQByteArray3(int size, char* ch);
void* QByteArray_Append5(void* ptr, char* ch);
void* QByteArray_Append(void* ptr, void* ba);
void* QByteArray_Append2(void* ptr, char* str);
void* QByteArray_Append3(void* ptr, char* str);
void* QByteArray_Append4(void* ptr, char* str, int len);
int QByteArray_Capacity(void* ptr);
void QByteArray_Chop(void* ptr, int n);
int QByteArray_Contains3(void* ptr, char* ch);
int QByteArray_Contains(void* ptr, void* ba);
int QByteArray_Contains2(void* ptr, char* str);
int QByteArray_Count4(void* ptr);
int QByteArray_Count3(void* ptr, char* ch);
int QByteArray_Count(void* ptr, void* ba);
int QByteArray_Count2(void* ptr, char* str);
int QByteArray_EndsWith3(void* ptr, char* ch);
int QByteArray_EndsWith(void* ptr, void* ba);
int QByteArray_EndsWith2(void* ptr, char* str);
void* QByteArray_Fill(void* ptr, char* ch, int size);
void* QByteArray_QByteArray_FromBase64(void* base64);
void* QByteArray_QByteArray_FromBase642(void* base64, int options);
void* QByteArray_QByteArray_FromHex(void* hexEncoded);
void* QByteArray_QByteArray_FromPercentEncoding(void* input, char* percent);
void* QByteArray_QByteArray_FromRawData(char* data, int size);
int QByteArray_IndexOf4(void* ptr, char* ch, int from);
int QByteArray_IndexOf(void* ptr, void* ba, int from);
int QByteArray_IndexOf2(void* ptr, char* str, int from);
int QByteArray_IsEmpty(void* ptr);
int QByteArray_LastIndexOf4(void* ptr, char* ch, int from);
int QByteArray_LastIndexOf2(void* ptr, char* str, int from);
void* QByteArray_Left(void* ptr, int len);
void* QByteArray_LeftJustified(void* ptr, int width, char* fill, int truncate);
int QByteArray_Length(void* ptr);
void* QByteArray_Mid(void* ptr, int pos, int len);
void* QByteArray_QByteArray_Number(int n, int base);
void* QByteArray_Prepend4(void* ptr, char* ch);
void* QByteArray_Prepend(void* ptr, void* ba);
void* QByteArray_Prepend2(void* ptr, char* str);
void* QByteArray_Prepend3(void* ptr, char* str, int len);
void QByteArray_Push_back3(void* ptr, char* ch);
void QByteArray_Push_back(void* ptr, void* other);
void QByteArray_Push_back2(void* ptr, char* str);
void QByteArray_Push_front3(void* ptr, char* ch);
void QByteArray_Push_front(void* ptr, void* other);
void QByteArray_Push_front2(void* ptr, char* str);
void* QByteArray_Repeated(void* ptr, int times);
void QByteArray_Reserve(void* ptr, int size);
void QByteArray_Resize(void* ptr, int size);
void* QByteArray_Right(void* ptr, int len);
void* QByteArray_RightJustified(void* ptr, int width, char* fill, int truncate);
void* QByteArray_SetNum(void* ptr, int n, int base);
int QByteArray_Size(void* ptr);
void QByteArray_Squeeze(void* ptr);
int QByteArray_StartsWith3(void* ptr, char* ch);
int QByteArray_StartsWith(void* ptr, void* ba);
int QByteArray_StartsWith2(void* ptr, char* str);
void QByteArray_Swap(void* ptr, void* other);
void* QByteArray_ToBase64(void* ptr);
void* QByteArray_ToBase642(void* ptr, int options);
void* QByteArray_ToHex(void* ptr);
int QByteArray_ToInt(void* ptr, int ok, int base);
void* QByteArray_ToPercentEncoding(void* ptr, void* exclude, void* include, char* percent);
void QByteArray_Truncate(void* ptr, int pos);
void QByteArray_DestroyQByteArray(void* ptr);
void* QByteArray_Simplified(void* ptr);
void* QByteArray_ToLower(void* ptr);
void* QByteArray_ToUpper(void* ptr);
void* QByteArray_Trimmed(void* ptr);
void* QByteArrayList_Join(void* ptr);
void* QByteArrayList_Join3(void* ptr, char* separator);
void* QByteArrayList_Join2(void* ptr, void* separator);
void* QByteArrayMatcher_NewQByteArrayMatcher();
void* QByteArrayMatcher_NewQByteArrayMatcher2(void* pattern);
void* QByteArrayMatcher_NewQByteArrayMatcher4(void* other);
void* QByteArrayMatcher_NewQByteArrayMatcher3(char* pattern, int length);
int QByteArrayMatcher_IndexIn(void* ptr, void* ba, int from);
int QByteArrayMatcher_IndexIn2(void* ptr, char* str, int len, int from);
void* QByteArrayMatcher_Pattern(void* ptr);
void QByteArrayMatcher_SetPattern(void* ptr, void* pattern);
void QByteArrayMatcher_DestroyQByteArrayMatcher(void* ptr);
void* QChar_NewQChar();
void* QChar_NewQChar8(void* ch);
void* QChar_NewQChar7(int ch);
void* QChar_NewQChar9(char* ch);
void* QChar_NewQChar6(int code);
int QChar_Category(void* ptr);
int QChar_QChar_CurrentUnicodeVersion();
char* QChar_Decomposition(void* ptr);
int QChar_DecompositionTag(void* ptr);
int QChar_DigitValue(void* ptr);
int QChar_Direction(void* ptr);
int QChar_HasMirrored(void* ptr);
int QChar_IsDigit(void* ptr);
int QChar_IsHighSurrogate(void* ptr);
int QChar_IsLetter(void* ptr);
int QChar_IsLetterOrNumber(void* ptr);
int QChar_IsLower(void* ptr);
int QChar_IsLowSurrogate(void* ptr);
int QChar_IsMark(void* ptr);
int QChar_IsNonCharacter(void* ptr);
int QChar_IsNull(void* ptr);
int QChar_IsNumber(void* ptr);
int QChar_IsPrint(void* ptr);
int QChar_IsPunct(void* ptr);
int QChar_IsSpace(void* ptr);
int QChar_IsSurrogate(void* ptr);
int QChar_IsSymbol(void* ptr);
int QChar_IsTitleCase(void* ptr);
int QChar_IsUpper(void* ptr);
int QChar_JoiningType(void* ptr);
int QChar_Script(void* ptr);
int QChar_UnicodeVersion(void* ptr);
void* QChildEvent_NewQChildEvent(int ty, void* child);
int QChildEvent_Added(void* ptr);
void* QChildEvent_Child(void* ptr);
int QChildEvent_Polished(void* ptr);
int QChildEvent_Removed(void* ptr);
int QCollator_CaseSensitivity(void* ptr);
int QCollator_IgnorePunctuation(void* ptr);
int QCollator_NumericMode(void* ptr);
void QCollator_SetCaseSensitivity(void* ptr, int sensitivity);
void QCollator_SetIgnorePunctuation(void* ptr, int on);
void QCollator_SetNumericMode(void* ptr, int on);
void* QCollator_NewQCollator3(void* other);
void* QCollator_NewQCollator2(void* other);
void* QCollator_NewQCollator(void* locale);
void QCollator_SetLocale(void* ptr, void* locale);
void QCollator_Swap(void* ptr, void* other);
void QCollator_DestroyQCollator(void* ptr);
int QCollator_Compare3(void* ptr, void* s1, int len1, void* s2, int len2);
int QCollator_Compare(void* ptr, char* s1, char* s2);
int QCollator_Compare2(void* ptr, void* s1, void* s2);
void* QCollatorSortKey_NewQCollatorSortKey(void* other);
void QCollatorSortKey_Swap(void* ptr, void* other);
void QCollatorSortKey_DestroyQCollatorSortKey(void* ptr);
int QCollatorSortKey_Compare(void* ptr, void* otherKey);
void* QCommandLineOption_NewQCommandLineOption5(void* other);
void* QCommandLineOption_NewQCommandLineOption(char* name);
void* QCommandLineOption_NewQCommandLineOption3(char* name, char* description, char* valueName, char* defaultValue);
void* QCommandLineOption_NewQCommandLineOption2(char* names);
void* QCommandLineOption_NewQCommandLineOption4(char* names, char* description, char* valueName, char* defaultValue);
char* QCommandLineOption_DefaultValues(void* ptr);
char* QCommandLineOption_Description(void* ptr);
char* QCommandLineOption_Names(void* ptr);
void QCommandLineOption_SetDefaultValue(void* ptr, char* defaultValue);
void QCommandLineOption_SetDefaultValues(void* ptr, char* defaultValues);
void QCommandLineOption_SetDescription(void* ptr, char* description);
void QCommandLineOption_SetValueName(void* ptr, char* valueName);
void QCommandLineOption_Swap(void* ptr, void* other);
char* QCommandLineOption_ValueName(void* ptr);
void QCommandLineOption_DestroyQCommandLineOption(void* ptr);
void* QCommandLineParser_NewQCommandLineParser();
void* QCommandLineParser_AddHelpOption(void* ptr);
int QCommandLineParser_AddOption(void* ptr, void* option);
void QCommandLineParser_AddPositionalArgument(void* ptr, char* name, char* description, char* syntax);
void* QCommandLineParser_AddVersionOption(void* ptr);
char* QCommandLineParser_ApplicationDescription(void* ptr);
void QCommandLineParser_ClearPositionalArguments(void* ptr);
char* QCommandLineParser_ErrorText(void* ptr);
char* QCommandLineParser_HelpText(void* ptr);
int QCommandLineParser_IsSet2(void* ptr, void* option);
int QCommandLineParser_IsSet(void* ptr, char* name);
char* QCommandLineParser_OptionNames(void* ptr);
int QCommandLineParser_Parse(void* ptr, char* arguments);
char* QCommandLineParser_PositionalArguments(void* ptr);
void QCommandLineParser_Process2(void* ptr, void* app);
void QCommandLineParser_Process(void* ptr, char* arguments);
void QCommandLineParser_SetApplicationDescription(void* ptr, char* description);
void QCommandLineParser_SetSingleDashWordOptionMode(void* ptr, int singleDashWordOptionMode);
void QCommandLineParser_ShowHelp(void* ptr, int exitCode);
void QCommandLineParser_ShowVersion(void* ptr);
char* QCommandLineParser_UnknownOptionNames(void* ptr);
char* QCommandLineParser_Value2(void* ptr, void* option);
char* QCommandLineParser_Value(void* ptr, char* optionName);
char* QCommandLineParser_Values2(void* ptr, void* option);
char* QCommandLineParser_Values(void* ptr, char* optionName);
void QCommandLineParser_DestroyQCommandLineParser(void* ptr);
char* QCoreApplication_QCoreApplication_ApplicationName();
char* QCoreApplication_QCoreApplication_ApplicationVersion();
char* QCoreApplication_QCoreApplication_OrganizationDomain();
char* QCoreApplication_QCoreApplication_OrganizationName();
void QCoreApplication_QCoreApplication_SetApplicationName(char* application);
void QCoreApplication_QCoreApplication_SetApplicationVersion(char* version);
void QCoreApplication_QCoreApplication_SetOrganizationDomain(char* orgDomain);
void QCoreApplication_QCoreApplication_SetOrganizationName(char* orgName);
void* QCoreApplication_NewQCoreApplication(int argc, char* argv);
void QCoreApplication_ConnectAboutToQuit(void* ptr);
void QCoreApplication_DisconnectAboutToQuit(void* ptr);
void QCoreApplication_QCoreApplication_AddLibraryPath(char* path);
char* QCoreApplication_QCoreApplication_ApplicationDirPath();
char* QCoreApplication_QCoreApplication_ApplicationFilePath();
long long QCoreApplication_QCoreApplication_ApplicationPid();
char* QCoreApplication_QCoreApplication_Arguments();
int QCoreApplication_QCoreApplication_ClosingDown();
int QCoreApplication_Event(void* ptr, void* e);
int QCoreApplication_EventDefault(void* ptr, void* e);
void* QCoreApplication_QCoreApplication_EventDispatcher();
int QCoreApplication_QCoreApplication_Exec();
void QCoreApplication_QCoreApplication_Exit(int returnCode);
void QCoreApplication_QCoreApplication_Flush();
void QCoreApplication_InstallNativeEventFilter(void* ptr, void* filterObj);
int QCoreApplication_QCoreApplication_InstallTranslator(void* translationFile);
void* QCoreApplication_QCoreApplication_Instance();
int QCoreApplication_QCoreApplication_IsQuitLockEnabled();
int QCoreApplication_QCoreApplication_IsSetuidAllowed();
char* QCoreApplication_QCoreApplication_LibraryPaths();
int QCoreApplication_Notify(void* ptr, void* receiver, void* event);
int QCoreApplication_NotifyDefault(void* ptr, void* receiver, void* event);
void QCoreApplication_QCoreApplication_PostEvent(void* receiver, void* event, int priority);
void QCoreApplication_QCoreApplication_ProcessEvents(int flags);
void QCoreApplication_QCoreApplication_ProcessEvents2(int flags, int maxtime);
void QCoreApplication_QCoreApplication_Quit();
void QCoreApplication_QCoreApplication_RemoveLibraryPath(char* path);
void QCoreApplication_RemoveNativeEventFilter(void* ptr, void* filterObject);
void QCoreApplication_QCoreApplication_RemovePostedEvents(void* receiver, int eventType);
int QCoreApplication_QCoreApplication_RemoveTranslator(void* translationFile);
int QCoreApplication_QCoreApplication_SendEvent(void* receiver, void* event);
void QCoreApplication_QCoreApplication_SendPostedEvents(void* receiver, int event_type);
void QCoreApplication_QCoreApplication_SetAttribute(int attribute, int on);
void QCoreApplication_QCoreApplication_SetEventDispatcher(void* eventDispatcher);
void QCoreApplication_QCoreApplication_SetLibraryPaths(char* paths);
void QCoreApplication_QCoreApplication_SetQuitLockEnabled(int enabled);
void QCoreApplication_QCoreApplication_SetSetuidAllowed(int allow);
int QCoreApplication_QCoreApplication_StartingUp();
int QCoreApplication_QCoreApplication_TestAttribute(int attribute);
char* QCoreApplication_QCoreApplication_Translate(char* context, char* sourceText, char* disambiguation, int n);
void QCoreApplication_DestroyQCoreApplication(void* ptr);
void QCoreApplication_TimerEvent(void* ptr, void* event);
void QCoreApplication_TimerEventDefault(void* ptr, void* event);
void QCoreApplication_ChildEvent(void* ptr, void* event);
void QCoreApplication_ChildEventDefault(void* ptr, void* event);
void QCoreApplication_CustomEvent(void* ptr, void* event);
void QCoreApplication_CustomEventDefault(void* ptr, void* event);
void* QCryptographicHash_NewQCryptographicHash(int method);
int QCryptographicHash_AddData2(void* ptr, void* device);
void QCryptographicHash_AddData3(void* ptr, void* data);
void QCryptographicHash_AddData(void* ptr, char* data, int length);
void* QCryptographicHash_QCryptographicHash_Hash(void* data, int method);
void QCryptographicHash_Reset(void* ptr);
void* QCryptographicHash_Result(void* ptr);
void QCryptographicHash_DestroyQCryptographicHash(void* ptr);
void* QDataStream_NewQDataStream3(void* a, int mode);
int QDataStream_AtEnd(void* ptr);
void* QDataStream_NewQDataStream();
void* QDataStream_NewQDataStream2(void* d);
void* QDataStream_NewQDataStream4(void* a);
int QDataStream_ByteOrder(void* ptr);
void* QDataStream_Device(void* ptr);
int QDataStream_FloatingPointPrecision(void* ptr);
int QDataStream_ReadRawData(void* ptr, char* s, int len);
void QDataStream_ResetStatus(void* ptr);
void QDataStream_SetByteOrder(void* ptr, int bo);
void QDataStream_SetDevice(void* ptr, void* d);
void QDataStream_SetFloatingPointPrecision(void* ptr, int precision);
void QDataStream_SetStatus(void* ptr, int status);
void QDataStream_SetVersion(void* ptr, int v);
int QDataStream_SkipRawData(void* ptr, int len);
int QDataStream_Status(void* ptr);
int QDataStream_Version(void* ptr);
int QDataStream_WriteRawData(void* ptr, char* s, int len);
void QDataStream_DestroyQDataStream(void* ptr);
int QDate_QDate_IsLeapYear(int year);
char* QDate_ToString2(void* ptr, int format);
void* QDate_NewQDate();
void* QDate_NewQDate3(int y, int m, int d);
int QDate_Day(void* ptr);
int QDate_DayOfWeek(void* ptr);
int QDate_DayOfYear(void* ptr);
int QDate_DaysInMonth(void* ptr);
int QDate_DaysInYear(void* ptr);
long long QDate_DaysTo(void* ptr, void* d);
void QDate_GetDate(void* ptr, int year, int month, int day);
int QDate_IsNull(void* ptr);
int QDate_QDate_IsValid2(int year, int month, int day);
int QDate_IsValid(void* ptr);
char* QDate_QDate_LongDayName(int weekday, int ty);
char* QDate_QDate_LongMonthName(int month, int ty);
int QDate_Month(void* ptr);
int QDate_SetDate(void* ptr, int year, int month, int day);
char* QDate_QDate_ShortDayName(int weekday, int ty);
char* QDate_QDate_ShortMonthName(int month, int ty);
long long QDate_ToJulianDay(void* ptr);
char* QDate_ToString(void* ptr, char* format);
int QDate_WeekNumber(void* ptr, int yearNumber);
int QDate_Year(void* ptr);
void* QDateTime_QDateTime_CurrentDateTime();
void* QDateTime_QDateTime_CurrentDateTimeUtc();
long long QDateTime_QDateTime_CurrentMSecsSinceEpoch();
void* QDateTime_QDateTime_FromString(char* stri, int format);
void* QDateTime_QDateTime_FromString2(char* stri, char* format);
void* QDateTime_ToOffsetFromUtc(void* ptr, int offsetSeconds);
char* QDateTime_ToString2(void* ptr, int format);
void* QDateTime_ToTimeSpec(void* ptr, int spec);
void* QDateTime_NewQDateTime();
void* QDateTime_NewQDateTime2(void* date);
void* QDateTime_NewQDateTime3(void* date, void* time, int spec);
void* QDateTime_NewQDateTime4(void* date, void* time, int spec, int offsetSeconds);
void* QDateTime_NewQDateTime5(void* date, void* time, void* timeZone);
void* QDateTime_NewQDateTime6(void* other);
void* QDateTime_AddDays(void* ptr, long long ndays);
void* QDateTime_AddMSecs(void* ptr, long long msecs);
void* QDateTime_AddMonths(void* ptr, int nmonths);
void* QDateTime_AddSecs(void* ptr, long long s);
void* QDateTime_AddYears(void* ptr, int nyears);
long long QDateTime_DaysTo(void* ptr, void* other);
void* QDateTime_QDateTime_FromMSecsSinceEpoch(long long msecs);
void* QDateTime_QDateTime_FromMSecsSinceEpoch2(long long msecs, int spec, int offsetSeconds);
void* QDateTime_QDateTime_FromMSecsSinceEpoch3(long long msecs, void* timeZone);
int QDateTime_IsDaylightTime(void* ptr);
int QDateTime_IsNull(void* ptr);
int QDateTime_IsValid(void* ptr);
long long QDateTime_MsecsTo(void* ptr, void* other);
int QDateTime_OffsetFromUtc(void* ptr);
long long QDateTime_SecsTo(void* ptr, void* other);
void QDateTime_SetDate(void* ptr, void* date);
void QDateTime_SetMSecsSinceEpoch(void* ptr, long long msecs);
void QDateTime_SetOffsetFromUtc(void* ptr, int offsetSeconds);
void QDateTime_SetTime(void* ptr, void* time);
void QDateTime_SetTimeSpec(void* ptr, int spec);
void QDateTime_SetTimeZone(void* ptr, void* toZone);
void QDateTime_Swap(void* ptr, void* other);
int QDateTime_TimeSpec(void* ptr);
void* QDateTime_TimeZone(void* ptr);
char* QDateTime_TimeZoneAbbreviation(void* ptr);
void* QDateTime_ToLocalTime(void* ptr);
long long QDateTime_ToMSecsSinceEpoch(void* ptr);
char* QDateTime_ToString(void* ptr, char* format);
void* QDateTime_ToTimeZone(void* ptr, void* timeZone);
void* QDateTime_ToUTC(void* ptr);
void QDateTime_DestroyQDateTime(void* ptr);
void* QDebugStateSaver_NewQDebugStateSaver(void* dbg);
void QDebugStateSaver_DestroyQDebugStateSaver(void* ptr);
void* QDir_NewQDir(void* dir);
void* QDir_NewQDir2(char* path);
void* QDir_NewQDir3(char* path, char* nameFilter, int sort, int filters);
char* QDir_AbsoluteFilePath(void* ptr, char* fileName);
char* QDir_AbsolutePath(void* ptr);
void QDir_QDir_AddSearchPath(char* prefix, char* path);
char* QDir_CanonicalPath(void* ptr);
int QDir_Cd(void* ptr, char* dirName);
int QDir_CdUp(void* ptr);
char* QDir_QDir_CleanPath(char* path);
void* QDir_QDir_Current();
char* QDir_QDir_CurrentPath();
char* QDir_DirName(void* ptr);
char* QDir_EntryList2(void* ptr, int filters, int sort);
char* QDir_EntryList(void* ptr, char* nameFilters, int filters, int sort);
int QDir_Exists2(void* ptr);
int QDir_Exists(void* ptr, char* name);
char* QDir_FilePath(void* ptr, char* fileName);
int QDir_Filter(void* ptr);
char* QDir_QDir_FromNativeSeparators(char* pathName);
void* QDir_QDir_Home();
char* QDir_QDir_HomePath();
int QDir_IsAbsolute(void* ptr);
int QDir_QDir_IsAbsolutePath(char* path);
int QDir_IsReadable(void* ptr);
int QDir_IsRelative(void* ptr);
int QDir_QDir_IsRelativePath(char* path);
int QDir_IsRoot(void* ptr);
int QDir_MakeAbsolute(void* ptr);
int QDir_QDir_Match(char* filter, char* fileName);
int QDir_QDir_Match2(char* filters, char* fileName);
int QDir_Mkdir(void* ptr, char* dirName);
int QDir_Mkpath(void* ptr, char* dirPath);
char* QDir_NameFilters(void* ptr);
char* QDir_Path(void* ptr);
void QDir_Refresh(void* ptr);
char* QDir_RelativeFilePath(void* ptr, char* fileName);
int QDir_RemoveRecursively(void* ptr);
int QDir_Rename(void* ptr, char* oldName, char* newName);
int QDir_Rmdir(void* ptr, char* dirName);
int QDir_Rmpath(void* ptr, char* dirPath);
void* QDir_QDir_Root();
char* QDir_QDir_RootPath();
char* QDir_QDir_SearchPaths(char* prefix);
int QDir_QDir_SetCurrent(char* path);
void QDir_SetFilter(void* ptr, int filters);
void QDir_SetNameFilters(void* ptr, char* nameFilters);
void QDir_SetPath(void* ptr, char* path);
void QDir_QDir_SetSearchPaths(char* prefix, char* searchPaths);
void QDir_SetSorting(void* ptr, int sort);
int QDir_Sorting(void* ptr);
void QDir_Swap(void* ptr, void* other);
void* QDir_QDir_Temp();
char* QDir_QDir_TempPath();
char* QDir_QDir_ToNativeSeparators(char* pathName);
void QDir_DestroyQDir(void* ptr);
void* QDynamicPropertyChangeEvent_NewQDynamicPropertyChangeEvent(void* name);
void* QDynamicPropertyChangeEvent_PropertyName(void* ptr);
void* QEasingCurve_NewQEasingCurve3(void* other);
void* QEasingCurve_NewQEasingCurve(int ty);
void* QEasingCurve_NewQEasingCurve2(void* other);
void QEasingCurve_AddCubicBezierSegment(void* ptr, void* c1, void* c2, void* endPoint);
void QEasingCurve_AddTCBSegment(void* ptr, void* nextPoint, double t, double c, double b);
double QEasingCurve_Amplitude(void* ptr);
double QEasingCurve_Overshoot(void* ptr);
double QEasingCurve_Period(void* ptr);
void QEasingCurve_SetAmplitude(void* ptr, double amplitude);
void QEasingCurve_SetOvershoot(void* ptr, double overshoot);
void QEasingCurve_SetPeriod(void* ptr, double period);
void QEasingCurve_SetType(void* ptr, int ty);
void QEasingCurve_Swap(void* ptr, void* other);
int QEasingCurve_Type(void* ptr);
double QEasingCurve_ValueForProgress(void* ptr, double progress);
void QEasingCurve_DestroyQEasingCurve(void* ptr);
void* QElapsedTimer_NewQElapsedTimer();
int QElapsedTimer_HasExpired(void* ptr, long long timeout);
void QElapsedTimer_Invalidate(void* ptr);
int QElapsedTimer_IsValid(void* ptr);
int QElapsedTimer_QElapsedTimer_ClockType();
long long QElapsedTimer_Elapsed(void* ptr);
int QElapsedTimer_QElapsedTimer_IsMonotonic();
long long QElapsedTimer_MsecsSinceReference(void* ptr);
long long QElapsedTimer_MsecsTo(void* ptr, void* other);
long long QElapsedTimer_NsecsElapsed(void* ptr);
long long QElapsedTimer_Restart(void* ptr);
long long QElapsedTimer_SecsTo(void* ptr, void* other);
void QElapsedTimer_Start(void* ptr);
void* QEvent_NewQEvent(int ty);
void QEvent_Accept(void* ptr);
void QEvent_Ignore(void* ptr);
int QEvent_IsAccepted(void* ptr);
int QEvent_QEvent_RegisterEventType(int hint);
void QEvent_SetAccepted(void* ptr, int accepted);
int QEvent_Spontaneous(void* ptr);
int QEvent_Type(void* ptr);
void QEvent_DestroyQEvent(void* ptr);
char* QEvent_ObjectNameAbs(void* ptr);
void QEvent_SetObjectNameAbs(void* ptr, char* name);
void* QEventLoop_NewQEventLoop(void* parent);
int QEventLoop_Event(void* ptr, void* event);
int QEventLoop_EventDefault(void* ptr, void* event);
int QEventLoop_Exec(void* ptr, int flags);
void QEventLoop_Exit(void* ptr, int returnCode);
int QEventLoop_IsRunning(void* ptr);
int QEventLoop_ProcessEvents(void* ptr, int flags);
void QEventLoop_ProcessEvents2(void* ptr, int flags, int maxTime);
void QEventLoop_Quit(void* ptr);
void QEventLoop_WakeUp(void* ptr);
void QEventLoop_DestroyQEventLoop(void* ptr);
void QEventLoop_TimerEvent(void* ptr, void* event);
void QEventLoop_TimerEventDefault(void* ptr, void* event);
void QEventLoop_ChildEvent(void* ptr, void* event);
void QEventLoop_ChildEventDefault(void* ptr, void* event);
void QEventLoop_CustomEvent(void* ptr, void* event);
void QEventLoop_CustomEventDefault(void* ptr, void* event);
void* QEventLoopLocker_NewQEventLoopLocker();
void* QEventLoopLocker_NewQEventLoopLocker2(void* loop);
void* QEventLoopLocker_NewQEventLoopLocker3(void* thread);
void QEventLoopLocker_DestroyQEventLoopLocker(void* ptr);
void* QEventTransition_NewQEventTransition2(void* object, int ty, void* sourceState);
void* QEventTransition_NewQEventTransition(void* sourceState);
int QEventTransition_Event(void* ptr, void* e);
int QEventTransition_EventDefault(void* ptr, void* e);
void* QEventTransition_EventSource(void* ptr);
int QEventTransition_EventTest(void* ptr, void* event);
int QEventTransition_EventTestDefault(void* ptr, void* event);
int QEventTransition_EventType(void* ptr);
void QEventTransition_OnTransition(void* ptr, void* event);
void QEventTransition_OnTransitionDefault(void* ptr, void* event);
void QEventTransition_SetEventSource(void* ptr, void* object);
void QEventTransition_SetEventType(void* ptr, int ty);
void QEventTransition_DestroyQEventTransition(void* ptr);
void QEventTransition_TimerEvent(void* ptr, void* event);
void QEventTransition_TimerEventDefault(void* ptr, void* event);
void QEventTransition_ChildEvent(void* ptr, void* event);
void QEventTransition_ChildEventDefault(void* ptr, void* event);
void QEventTransition_CustomEvent(void* ptr, void* event);
void QEventTransition_CustomEventDefault(void* ptr, void* event);
void* QFile_NewQFile3(void* parent);
void* QFile_NewQFile(char* name);
void* QFile_NewQFile4(char* name, void* parent);
int QFile_QFile_Copy2(char* fileName, char* newName);
int QFile_Copy(void* ptr, char* newName);
char* QFile_QFile_DecodeName(void* localFileName);
char* QFile_QFile_DecodeName2(char* localFileName);
void* QFile_QFile_EncodeName(char* fileName);
int QFile_QFile_Exists(char* fileName);
int QFile_Exists2(void* ptr);
char* QFile_FileName(void* ptr);
char* QFile_FileNameDefault(void* ptr);
int QFile_QFile_Link2(char* fileName, char* linkName);
int QFile_Link(void* ptr, char* linkName);
int QFile_Open(void* ptr, int mode);
int QFile_OpenDefault(void* ptr, int mode);
int QFile_Open3(void* ptr, int fd, int mode, int handleFlags);
int QFile_QFile_Permissions2(char* fileName);
int QFile_Permissions(void* ptr);
int QFile_PermissionsDefault(void* ptr);
int QFile_Rename(void* ptr, char* newName);
int QFile_QFile_Rename2(char* oldName, char* newName);
int QFile_QFile_Resize2(char* fileName, long long sz);
int QFile_Resize(void* ptr, long long sz);
int QFile_ResizeDefault(void* ptr, long long sz);
void QFile_SetFileName(void* ptr, char* name);
int QFile_SetPermissions(void* ptr, int permissions);
int QFile_SetPermissionsDefault(void* ptr, int permissions);
int QFile_QFile_SetPermissions2(char* fileName, int permissions);
long long QFile_Size(void* ptr);
long long QFile_SizeDefault(void* ptr);
char* QFile_QFile_SymLinkTarget(char* fileName);
char* QFile_SymLinkTarget2(void* ptr);
void QFile_DestroyQFile(void* ptr);
void QFile_Close(void* ptr);
void QFile_CloseDefault(void* ptr);
void QFile_TimerEvent(void* ptr, void* event);
void QFile_TimerEventDefault(void* ptr, void* event);
void QFile_ChildEvent(void* ptr, void* event);
void QFile_ChildEventDefault(void* ptr, void* event);
void QFile_CustomEvent(void* ptr, void* event);
void QFile_CustomEventDefault(void* ptr, void* event);
int QFileDevice_Seek(void* ptr, long long pos);
int QFileDevice_SeekDefault(void* ptr, long long pos);
int QFileDevice_AtEnd(void* ptr);
int QFileDevice_AtEndDefault(void* ptr);
void QFileDevice_Close(void* ptr);
void QFileDevice_CloseDefault(void* ptr);
int QFileDevice_Error(void* ptr);
char* QFileDevice_FileName(void* ptr);
char* QFileDevice_FileNameDefault(void* ptr);
int QFileDevice_Flush(void* ptr);
int QFileDevice_Handle(void* ptr);
int QFileDevice_IsSequential(void* ptr);
int QFileDevice_IsSequentialDefault(void* ptr);
int QFileDevice_Permissions(void* ptr);
int QFileDevice_PermissionsDefault(void* ptr);
long long QFileDevice_Pos(void* ptr);
long long QFileDevice_PosDefault(void* ptr);
long long QFileDevice_ReadData(void* ptr, char* data, long long len);
long long QFileDevice_ReadDataDefault(void* ptr, char* data, long long len);
long long QFileDevice_ReadLineData(void* ptr, char* data, long long maxlen);
long long QFileDevice_ReadLineDataDefault(void* ptr, char* data, long long maxlen);
int QFileDevice_Resize(void* ptr, long long sz);
int QFileDevice_ResizeDefault(void* ptr, long long sz);
int QFileDevice_SetPermissions(void* ptr, int permissions);
int QFileDevice_SetPermissionsDefault(void* ptr, int permissions);
long long QFileDevice_Size(void* ptr);
long long QFileDevice_SizeDefault(void* ptr);
void QFileDevice_UnsetError(void* ptr);
long long QFileDevice_WriteData(void* ptr, char* data, long long len);
long long QFileDevice_WriteDataDefault(void* ptr, char* data, long long len);
void QFileDevice_DestroyQFileDevice(void* ptr);
void QFileDevice_TimerEvent(void* ptr, void* event);
void QFileDevice_TimerEventDefault(void* ptr, void* event);
void QFileDevice_ChildEvent(void* ptr, void* event);
void QFileDevice_ChildEventDefault(void* ptr, void* event);
void QFileDevice_CustomEvent(void* ptr, void* event);
void QFileDevice_CustomEventDefault(void* ptr, void* event);
void* QFileInfo_NewQFileInfo();
void* QFileInfo_NewQFileInfo5(void* dir, char* file);
void* QFileInfo_NewQFileInfo4(void* file);
void* QFileInfo_NewQFileInfo6(void* fileinfo);
void* QFileInfo_NewQFileInfo3(char* file);
void* QFileInfo_AbsoluteDir(void* ptr);
char* QFileInfo_AbsoluteFilePath(void* ptr);
char* QFileInfo_AbsolutePath(void* ptr);
char* QFileInfo_BaseName(void* ptr);
char* QFileInfo_BundleName(void* ptr);
int QFileInfo_Caching(void* ptr);
char* QFileInfo_CanonicalFilePath(void* ptr);
char* QFileInfo_CanonicalPath(void* ptr);
char* QFileInfo_CompleteBaseName(void* ptr);
char* QFileInfo_CompleteSuffix(void* ptr);
void* QFileInfo_Created(void* ptr);
void* QFileInfo_Dir(void* ptr);
int QFileInfo_QFileInfo_Exists2(char* file);
int QFileInfo_Exists(void* ptr);
char* QFileInfo_FileName(void* ptr);
char* QFileInfo_FilePath(void* ptr);
char* QFileInfo_Group(void* ptr);
int QFileInfo_IsAbsolute(void* ptr);
int QFileInfo_IsBundle(void* ptr);
int QFileInfo_IsDir(void* ptr);
int QFileInfo_IsExecutable(void* ptr);
int QFileInfo_IsFile(void* ptr);
int QFileInfo_IsHidden(void* ptr);
int QFileInfo_IsNativePath(void* ptr);
int QFileInfo_IsReadable(void* ptr);
int QFileInfo_IsRelative(void* ptr);
int QFileInfo_IsRoot(void* ptr);
int QFileInfo_IsSymLink(void* ptr);
int QFileInfo_IsWritable(void* ptr);
void* QFileInfo_LastModified(void* ptr);
void* QFileInfo_LastRead(void* ptr);
int QFileInfo_MakeAbsolute(void* ptr);
char* QFileInfo_Owner(void* ptr);
char* QFileInfo_Path(void* ptr);
void QFileInfo_Refresh(void* ptr);
void QFileInfo_SetCaching(void* ptr, int enable);
void QFileInfo_SetFile3(void* ptr, void* dir, char* file);
void QFileInfo_SetFile2(void* ptr, void* file);
void QFileInfo_SetFile(void* ptr, char* file);
long long QFileInfo_Size(void* ptr);
char* QFileInfo_Suffix(void* ptr);
void QFileInfo_Swap(void* ptr, void* other);
char* QFileInfo_SymLinkTarget(void* ptr);
void QFileInfo_DestroyQFileInfo(void* ptr);
void* QFileSelector_NewQFileSelector(void* parent);
char* QFileSelector_AllSelectors(void* ptr);
char* QFileSelector_ExtraSelectors(void* ptr);
char* QFileSelector_Select(void* ptr, char* filePath);
void* QFileSelector_Select2(void* ptr, void* filePath);
void QFileSelector_SetExtraSelectors(void* ptr, char* list);
void QFileSelector_DestroyQFileSelector(void* ptr);
void QFileSelector_TimerEvent(void* ptr, void* event);
void QFileSelector_TimerEventDefault(void* ptr, void* event);
void QFileSelector_ChildEvent(void* ptr, void* event);
void QFileSelector_ChildEventDefault(void* ptr, void* event);
void QFileSelector_CustomEvent(void* ptr, void* event);
void QFileSelector_CustomEventDefault(void* ptr, void* event);
char* QFileSystemWatcher_Directories(void* ptr);
char* QFileSystemWatcher_Files(void* ptr);
void* QFileSystemWatcher_NewQFileSystemWatcher(void* parent);
void* QFileSystemWatcher_NewQFileSystemWatcher2(char* paths, void* parent);
int QFileSystemWatcher_AddPath(void* ptr, char* path);
char* QFileSystemWatcher_AddPaths(void* ptr, char* paths);
void QFileSystemWatcher_ConnectDirectoryChanged(void* ptr);
void QFileSystemWatcher_DisconnectDirectoryChanged(void* ptr);
void QFileSystemWatcher_ConnectFileChanged(void* ptr);
void QFileSystemWatcher_DisconnectFileChanged(void* ptr);
int QFileSystemWatcher_RemovePath(void* ptr, char* path);
char* QFileSystemWatcher_RemovePaths(void* ptr, char* paths);
void QFileSystemWatcher_DestroyQFileSystemWatcher(void* ptr);
void QFileSystemWatcher_TimerEvent(void* ptr, void* event);
void QFileSystemWatcher_TimerEventDefault(void* ptr, void* event);
void QFileSystemWatcher_ChildEvent(void* ptr, void* event);
void QFileSystemWatcher_ChildEventDefault(void* ptr, void* event);
void QFileSystemWatcher_CustomEvent(void* ptr, void* event);
void QFileSystemWatcher_CustomEventDefault(void* ptr, void* event);
void* QFinalState_NewQFinalState(void* parent);
int QFinalState_Event(void* ptr, void* e);
int QFinalState_EventDefault(void* ptr, void* e);
void QFinalState_OnEntry(void* ptr, void* event);
void QFinalState_OnEntryDefault(void* ptr, void* event);
void QFinalState_OnExit(void* ptr, void* event);
void QFinalState_OnExitDefault(void* ptr, void* event);
void QFinalState_DestroyQFinalState(void* ptr);
void QFinalState_TimerEvent(void* ptr, void* event);
void QFinalState_TimerEventDefault(void* ptr, void* event);
void QFinalState_ChildEvent(void* ptr, void* event);
void QFinalState_ChildEventDefault(void* ptr, void* event);
void QFinalState_CustomEvent(void* ptr, void* event);
void QFinalState_CustomEventDefault(void* ptr, void* event);
void* QFlag_NewQFlag(int value);
void QFutureWatcher_TimerEvent(void* ptr, void* event);
void QFutureWatcher_TimerEventDefault(void* ptr, void* event);
void QFutureWatcher_ChildEvent(void* ptr, void* event);
void QFutureWatcher_ChildEventDefault(void* ptr, void* event);
void QFutureWatcher_CustomEvent(void* ptr, void* event);
void QFutureWatcher_CustomEventDefault(void* ptr, void* event);
void* QGenericArgument_NewQGenericArgument(char* name, void* data);
void* QGenericArgument_Data(void* ptr);
void* QGenericReturnArgument_NewQGenericReturnArgument(char* name, void* data);
void* QHistoryState_NewQHistoryState2(int ty, void* parent);
void* QHistoryState_NewQHistoryState(void* parent);
void* QHistoryState_DefaultState(void* ptr);
void QHistoryState_ConnectDefaultStateChanged(void* ptr);
void QHistoryState_DisconnectDefaultStateChanged(void* ptr);
int QHistoryState_Event(void* ptr, void* e);
int QHistoryState_EventDefault(void* ptr, void* e);
int QHistoryState_HistoryType(void* ptr);
void QHistoryState_ConnectHistoryTypeChanged(void* ptr);
void QHistoryState_DisconnectHistoryTypeChanged(void* ptr);
void QHistoryState_OnEntry(void* ptr, void* event);
void QHistoryState_OnEntryDefault(void* ptr, void* event);
void QHistoryState_OnExit(void* ptr, void* event);
void QHistoryState_OnExitDefault(void* ptr, void* event);
void QHistoryState_SetDefaultState(void* ptr, void* state);
void QHistoryState_SetHistoryType(void* ptr, int ty);
void QHistoryState_DestroyQHistoryState(void* ptr);
void QHistoryState_TimerEvent(void* ptr, void* event);
void QHistoryState_TimerEventDefault(void* ptr, void* event);
void QHistoryState_ChildEvent(void* ptr, void* event);
void QHistoryState_ChildEventDefault(void* ptr, void* event);
void QHistoryState_CustomEvent(void* ptr, void* event);
void QHistoryState_CustomEventDefault(void* ptr, void* event);
int QIODevice_GetChar(void* ptr, char* c);
int QIODevice_PutChar(void* ptr, char* c);
void QIODevice_ConnectAboutToClose(void* ptr);
void QIODevice_DisconnectAboutToClose(void* ptr);
void QIODevice_AboutToClose(void* ptr);
int QIODevice_AtEnd(void* ptr);
int QIODevice_AtEndDefault(void* ptr);
long long QIODevice_BytesAvailable(void* ptr);
long long QIODevice_BytesAvailableDefault(void* ptr);
long long QIODevice_BytesToWrite(void* ptr);
long long QIODevice_BytesToWriteDefault(void* ptr);
void QIODevice_ConnectBytesWritten(void* ptr);
void QIODevice_DisconnectBytesWritten(void* ptr);
void QIODevice_BytesWritten(void* ptr, long long bytes);
int QIODevice_CanReadLine(void* ptr);
int QIODevice_CanReadLineDefault(void* ptr);
void QIODevice_Close(void* ptr);
void QIODevice_CloseDefault(void* ptr);
char* QIODevice_ErrorString(void* ptr);
int QIODevice_IsOpen(void* ptr);
int QIODevice_IsReadable(void* ptr);
int QIODevice_IsSequential(void* ptr);
int QIODevice_IsSequentialDefault(void* ptr);
int QIODevice_IsTextModeEnabled(void* ptr);
int QIODevice_IsWritable(void* ptr);
int QIODevice_Open(void* ptr, int mode);
int QIODevice_OpenDefault(void* ptr, int mode);
int QIODevice_OpenMode(void* ptr);
void* QIODevice_Peek2(void* ptr, long long maxSize);
long long QIODevice_Peek(void* ptr, char* data, long long maxSize);
long long QIODevice_Pos(void* ptr);
long long QIODevice_PosDefault(void* ptr);
void* QIODevice_Read2(void* ptr, long long maxSize);
long long QIODevice_Read(void* ptr, char* data, long long maxSize);
void* QIODevice_ReadAll(void* ptr);
void QIODevice_ConnectReadChannelFinished(void* ptr);
void QIODevice_DisconnectReadChannelFinished(void* ptr);
void QIODevice_ReadChannelFinished(void* ptr);
void* QIODevice_ReadLine2(void* ptr, long long maxSize);
long long QIODevice_ReadLine(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadLineData(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadLineDataDefault(void* ptr, char* data, long long maxSize);
void QIODevice_ConnectReadyRead(void* ptr);
void QIODevice_DisconnectReadyRead(void* ptr);
void QIODevice_ReadyRead(void* ptr);
int QIODevice_Reset(void* ptr);
int QIODevice_ResetDefault(void* ptr);
int QIODevice_Seek(void* ptr, long long pos);
int QIODevice_SeekDefault(void* ptr, long long pos);
void QIODevice_SetTextModeEnabled(void* ptr, int enabled);
long long QIODevice_Size(void* ptr);
long long QIODevice_SizeDefault(void* ptr);
void QIODevice_UngetChar(void* ptr, char* c);
int QIODevice_WaitForBytesWritten(void* ptr, int msecs);
int QIODevice_WaitForBytesWrittenDefault(void* ptr, int msecs);
int QIODevice_WaitForReadyRead(void* ptr, int msecs);
int QIODevice_WaitForReadyReadDefault(void* ptr, int msecs);
long long QIODevice_Write3(void* ptr, void* byteArray);
long long QIODevice_Write2(void* ptr, char* data);
long long QIODevice_Write(void* ptr, char* data, long long maxSize);
void QIODevice_DestroyQIODevice(void* ptr);
void QIODevice_TimerEvent(void* ptr, void* event);
void QIODevice_TimerEventDefault(void* ptr, void* event);
void QIODevice_ChildEvent(void* ptr, void* event);
void QIODevice_ChildEventDefault(void* ptr, void* event);
void QIODevice_CustomEvent(void* ptr, void* event);
void QIODevice_CustomEventDefault(void* ptr, void* event);
void* QIdentityProxyModel_NewQIdentityProxyModel(void* parent);
int QIdentityProxyModel_ColumnCount(void* ptr, void* parent);
int QIdentityProxyModel_ColumnCountDefault(void* ptr, void* parent);
int QIdentityProxyModel_DropMimeData(void* ptr, void* data, int action, int row, int column, void* parent);
int QIdentityProxyModel_DropMimeDataDefault(void* ptr, void* data, int action, int row, int column, void* parent);
void* QIdentityProxyModel_HeaderData(void* ptr, int section, int orientation, int role);
void* QIdentityProxyModel_HeaderDataDefault(void* ptr, int section, int orientation, int role);
void* QIdentityProxyModel_Index(void* ptr, int row, int column, void* parent);
void* QIdentityProxyModel_IndexDefault(void* ptr, int row, int column, void* parent);
int QIdentityProxyModel_InsertColumns(void* ptr, int column, int count, void* parent);
int QIdentityProxyModel_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
int QIdentityProxyModel_InsertRows(void* ptr, int row, int count, void* parent);
int QIdentityProxyModel_InsertRowsDefault(void* ptr, int row, int count, void* parent);
void* QIdentityProxyModel_MapFromSource(void* ptr, void* sourceIndex);
void* QIdentityProxyModel_MapFromSourceDefault(void* ptr, void* sourceIndex);
void* QIdentityProxyModel_MapToSource(void* ptr, void* proxyIndex);
void* QIdentityProxyModel_MapToSourceDefault(void* ptr, void* proxyIndex);
void* QIdentityProxyModel_Parent(void* ptr, void* child);
void* QIdentityProxyModel_ParentDefault(void* ptr, void* child);
int QIdentityProxyModel_RemoveColumns(void* ptr, int column, int count, void* parent);
int QIdentityProxyModel_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
int QIdentityProxyModel_RemoveRows(void* ptr, int row, int count, void* parent);
int QIdentityProxyModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
int QIdentityProxyModel_RowCount(void* ptr, void* parent);
int QIdentityProxyModel_RowCountDefault(void* ptr, void* parent);
void QIdentityProxyModel_SetSourceModel(void* ptr, void* newSourceModel);
void QIdentityProxyModel_SetSourceModelDefault(void* ptr, void* newSourceModel);
void* QIdentityProxyModel_Sibling(void* ptr, int row, int column, void* idx);
void* QIdentityProxyModel_SiblingDefault(void* ptr, int row, int column, void* idx);
void QIdentityProxyModel_DestroyQIdentityProxyModel(void* ptr);
void QIdentityProxyModel_FetchMore(void* ptr, void* parent);
void QIdentityProxyModel_FetchMoreDefault(void* ptr, void* parent);
void QIdentityProxyModel_Revert(void* ptr);
void QIdentityProxyModel_RevertDefault(void* ptr);
void QIdentityProxyModel_Sort(void* ptr, int column, int order);
void QIdentityProxyModel_SortDefault(void* ptr, int column, int order);
void QIdentityProxyModel_TimerEvent(void* ptr, void* event);
void QIdentityProxyModel_TimerEventDefault(void* ptr, void* event);
void QIdentityProxyModel_ChildEvent(void* ptr, void* event);
void QIdentityProxyModel_ChildEventDefault(void* ptr, void* event);
void QIdentityProxyModel_CustomEvent(void* ptr, void* event);
void QIdentityProxyModel_CustomEventDefault(void* ptr, void* event);
void* QItemSelection_NewQItemSelection();
void* QItemSelection_NewQItemSelection2(void* topLeft, void* bottomRight);
int QItemSelection_Contains(void* ptr, void* index);
void QItemSelection_Merge(void* ptr, void* other, int command);
void QItemSelection_Select(void* ptr, void* topLeft, void* bottomRight);
void QItemSelection_QItemSelection_Split(void* ran, void* other, void* result);
void* QItemSelectionModel_NewQItemSelectionModel(void* model);
void* QItemSelectionModel_NewQItemSelectionModel2(void* model, void* parent);
void QItemSelectionModel_Clear(void* ptr);
void QItemSelectionModel_ClearDefault(void* ptr);
void QItemSelectionModel_ClearCurrentIndex(void* ptr);
void QItemSelectionModel_ClearCurrentIndexDefault(void* ptr);
void QItemSelectionModel_ClearSelection(void* ptr);
int QItemSelectionModel_ColumnIntersectsSelection(void* ptr, int column, void* parent);
void QItemSelectionModel_ConnectCurrentChanged(void* ptr);
void QItemSelectionModel_DisconnectCurrentChanged(void* ptr);
void QItemSelectionModel_CurrentChanged(void* ptr, void* current, void* previous);
void QItemSelectionModel_ConnectCurrentColumnChanged(void* ptr);
void QItemSelectionModel_DisconnectCurrentColumnChanged(void* ptr);
void QItemSelectionModel_CurrentColumnChanged(void* ptr, void* current, void* previous);
void* QItemSelectionModel_CurrentIndex(void* ptr);
void QItemSelectionModel_ConnectCurrentRowChanged(void* ptr);
void QItemSelectionModel_DisconnectCurrentRowChanged(void* ptr);
void QItemSelectionModel_CurrentRowChanged(void* ptr, void* current, void* previous);
int QItemSelectionModel_HasSelection(void* ptr);
int QItemSelectionModel_IsColumnSelected(void* ptr, int column, void* parent);
int QItemSelectionModel_IsRowSelected(void* ptr, int row, void* parent);
int QItemSelectionModel_IsSelected(void* ptr, void* index);
void* QItemSelectionModel_Model2(void* ptr);
void* QItemSelectionModel_Model(void* ptr);
void QItemSelectionModel_ConnectModelChanged(void* ptr);
void QItemSelectionModel_DisconnectModelChanged(void* ptr);
void QItemSelectionModel_ModelChanged(void* ptr, void* model);
void QItemSelectionModel_Reset(void* ptr);
void QItemSelectionModel_ResetDefault(void* ptr);
int QItemSelectionModel_RowIntersectsSelection(void* ptr, int row, void* parent);
void QItemSelectionModel_Select(void* ptr, void* index, int command);
void QItemSelectionModel_SelectDefault(void* ptr, void* index, int command);
void QItemSelectionModel_SetCurrentIndex(void* ptr, void* index, int command);
void QItemSelectionModel_SetCurrentIndexDefault(void* ptr, void* index, int command);
void QItemSelectionModel_SetModel(void* ptr, void* model);
void QItemSelectionModel_DestroyQItemSelectionModel(void* ptr);
void QItemSelectionModel_TimerEvent(void* ptr, void* event);
void QItemSelectionModel_TimerEventDefault(void* ptr, void* event);
void QItemSelectionModel_ChildEvent(void* ptr, void* event);
void QItemSelectionModel_ChildEventDefault(void* ptr, void* event);
void QItemSelectionModel_CustomEvent(void* ptr, void* event);
void QItemSelectionModel_CustomEventDefault(void* ptr, void* event);
int QItemSelectionRange_Intersects(void* ptr, void* other);
void* QItemSelectionRange_NewQItemSelectionRange();
void* QItemSelectionRange_NewQItemSelectionRange2(void* other);
void* QItemSelectionRange_NewQItemSelectionRange4(void* index);
void* QItemSelectionRange_NewQItemSelectionRange3(void* topLeft, void* bottomRight);
int QItemSelectionRange_Bottom(void* ptr);
int QItemSelectionRange_Contains(void* ptr, void* index);
int QItemSelectionRange_Contains2(void* ptr, int row, int column, void* parentIndex);
int QItemSelectionRange_Height(void* ptr);
int QItemSelectionRange_IsEmpty(void* ptr);
int QItemSelectionRange_IsValid(void* ptr);
int QItemSelectionRange_Left(void* ptr);
void* QItemSelectionRange_Model(void* ptr);
void* QItemSelectionRange_Parent(void* ptr);
int QItemSelectionRange_Right(void* ptr);
int QItemSelectionRange_Top(void* ptr);
int QItemSelectionRange_Width(void* ptr);
void QJsonArray_Append(void* ptr, void* value);
int QJsonArray_Contains(void* ptr, void* value);
int QJsonArray_Count(void* ptr);
int QJsonArray_Empty(void* ptr);
void* QJsonArray_QJsonArray_FromStringList(char* list);
int QJsonArray_IsEmpty(void* ptr);
void QJsonArray_Pop_back(void* ptr);
void QJsonArray_Pop_front(void* ptr);
void QJsonArray_Prepend(void* ptr, void* value);
void QJsonArray_Push_back(void* ptr, void* value);
void QJsonArray_Push_front(void* ptr, void* value);
void QJsonArray_RemoveAt(void* ptr, int i);
void QJsonArray_RemoveFirst(void* ptr);
void QJsonArray_RemoveLast(void* ptr);
int QJsonArray_Size(void* ptr);
void QJsonArray_DestroyQJsonArray(void* ptr);
void* QJsonDocument_NewQJsonDocument();
void* QJsonDocument_NewQJsonDocument3(void* array);
void* QJsonDocument_NewQJsonDocument4(void* other);
void* QJsonDocument_NewQJsonDocument2(void* object);
void* QJsonDocument_Array(void* ptr);
void* QJsonDocument_QJsonDocument_FromBinaryData(void* data, int validation);
void* QJsonDocument_QJsonDocument_FromJson(void* json, void* error);
void* QJsonDocument_QJsonDocument_FromRawData(char* data, int size, int validation);
void* QJsonDocument_QJsonDocument_FromVariant(void* variant);
int QJsonDocument_IsArray(void* ptr);
int QJsonDocument_IsEmpty(void* ptr);
int QJsonDocument_IsNull(void* ptr);
int QJsonDocument_IsObject(void* ptr);
void* QJsonDocument_Object(void* ptr);
void QJsonDocument_SetArray(void* ptr, void* array);
void QJsonDocument_SetObject(void* ptr, void* object);
void* QJsonDocument_ToBinaryData(void* ptr);
void* QJsonDocument_ToJson(void* ptr, int format);
void* QJsonDocument_ToVariant(void* ptr);
void QJsonDocument_DestroyQJsonDocument(void* ptr);
int QJsonObject_Contains(void* ptr, char* key);
int QJsonObject_Count(void* ptr);
int QJsonObject_Empty(void* ptr);
int QJsonObject_IsEmpty(void* ptr);
char* QJsonObject_Keys(void* ptr);
int QJsonObject_Length(void* ptr);
int QJsonObject_Size(void* ptr);
void QJsonObject_DestroyQJsonObject(void* ptr);
char* QJsonParseError_ErrorString(void* ptr);
void* QJsonValue_NewQJsonValue5(void* s);
void* QJsonValue_NewQJsonValue(int ty);
void* QJsonValue_NewQJsonValue2(int b);
void* QJsonValue_NewQJsonValue7(void* a);
void* QJsonValue_NewQJsonValue8(void* o);
void* QJsonValue_NewQJsonValue9(void* other);
void* QJsonValue_NewQJsonValue4(char* s);
void* QJsonValue_NewQJsonValue6(char* s);
void* QJsonValue_NewQJsonValue12(int n);
void* QJsonValue_NewQJsonValue13(long long n);
int QJsonValue_IsArray(void* ptr);
int QJsonValue_IsBool(void* ptr);
int QJsonValue_IsDouble(void* ptr);
int QJsonValue_IsNull(void* ptr);
int QJsonValue_IsObject(void* ptr);
int QJsonValue_IsString(void* ptr);
int QJsonValue_IsUndefined(void* ptr);
void* QJsonValue_ToArray2(void* ptr);
void* QJsonValue_ToArray(void* ptr, void* defaultValue);
int QJsonValue_ToBool(void* ptr, int defaultValue);
int QJsonValue_ToInt(void* ptr, int defaultValue);
void* QJsonValue_ToObject2(void* ptr);
void* QJsonValue_ToObject(void* ptr, void* defaultValue);
char* QJsonValue_ToString(void* ptr, char* defaultValue);
void* QJsonValue_ToVariant(void* ptr);
int QJsonValue_Type(void* ptr);
void QJsonValue_DestroyQJsonValue(void* ptr);
void* QLatin1Char_NewQLatin1Char(char* c);
void* QLatin1String_NewQLatin1String3(void* str);
void* QLatin1String_NewQLatin1String(char* str);
void* QLatin1String_NewQLatin1String2(char* str, int size);
int QLatin1String_Size(void* ptr);
char* QLibrary_FileName(void* ptr);
int QLibrary_LoadHints(void* ptr);
void QLibrary_SetFileName(void* ptr, char* fileName);
void QLibrary_SetFileNameAndVersion(void* ptr, char* fileName, int versionNumber);
void QLibrary_SetLoadHints(void* ptr, int hints);
void* QLibrary_NewQLibrary(void* parent);
void* QLibrary_NewQLibrary2(char* fileName, void* parent);
void* QLibrary_NewQLibrary4(char* fileName, char* version, void* parent);
void* QLibrary_NewQLibrary3(char* fileName, int verNum, void* parent);
char* QLibrary_ErrorString(void* ptr);
int QLibrary_QLibrary_IsLibrary(char* fileName);
int QLibrary_IsLoaded(void* ptr);
int QLibrary_Load(void* ptr);
void QLibrary_SetFileNameAndVersion2(void* ptr, char* fileName, char* version);
int QLibrary_Unload(void* ptr);
void QLibrary_DestroyQLibrary(void* ptr);
void QLibrary_TimerEvent(void* ptr, void* event);
void QLibrary_TimerEventDefault(void* ptr, void* event);
void QLibrary_ChildEvent(void* ptr, void* event);
void QLibrary_ChildEventDefault(void* ptr, void* event);
void QLibrary_CustomEvent(void* ptr, void* event);
void QLibrary_CustomEventDefault(void* ptr, void* event);
int QLibraryInfo_QLibraryInfo_IsDebugBuild();
char* QLibraryInfo_QLibraryInfo_LicensedProducts();
char* QLibraryInfo_QLibraryInfo_Licensee();
char* QLibraryInfo_QLibraryInfo_Location(int loc);
void* QLine_NewQLine();
void* QLine_NewQLine2(void* p1, void* p2);
void* QLine_NewQLine3(int x1, int y1, int x2, int y2);
int QLine_Dx(void* ptr);
int QLine_Dy(void* ptr);
int QLine_IsNull(void* ptr);
void* QLine_P1(void* ptr);
void* QLine_P2(void* ptr);
void QLine_SetLine(void* ptr, int x1, int y1, int x2, int y2);
void QLine_SetP1(void* ptr, void* p1);
void QLine_SetP2(void* ptr, void* p2);
void QLine_SetPoints(void* ptr, void* p1, void* p2);
void QLine_Translate(void* ptr, void* offset);
void QLine_Translate2(void* ptr, int dx, int dy);
int QLine_X1(void* ptr);
int QLine_X2(void* ptr);
int QLine_Y1(void* ptr);
int QLine_Y2(void* ptr);
double QLineF_AngleTo(void* ptr, void* line);
int QLineF_Intersect(void* ptr, void* line, void* intersectionPoint);
void* QLineF_NewQLineF();
void* QLineF_NewQLineF4(void* line);
void* QLineF_NewQLineF2(void* p1, void* p2);
void* QLineF_NewQLineF3(double x1, double y1, double x2, double y2);
double QLineF_Angle(void* ptr);
double QLineF_Dx(void* ptr);
double QLineF_Dy(void* ptr);
int QLineF_IsNull(void* ptr);
double QLineF_Length(void* ptr);
void QLineF_SetAngle(void* ptr, double angle);
void QLineF_SetLength(void* ptr, double length);
void QLineF_SetLine(void* ptr, double x1, double y1, double x2, double y2);
void QLineF_SetP1(void* ptr, void* p1);
void QLineF_SetP2(void* ptr, void* p2);
void QLineF_SetPoints(void* ptr, void* p1, void* p2);
void QLineF_Translate(void* ptr, void* offset);
void QLineF_Translate2(void* ptr, double dx, double dy);
double QLineF_X1(void* ptr);
double QLineF_X2(void* ptr);
double QLineF_Y1(void* ptr);
double QLineF_Y2(void* ptr);
void* QLocale_NewQLocale();
void* QLocale_NewQLocale3(int language, int country);
void* QLocale_NewQLocale4(int language, int script, int country);
void* QLocale_NewQLocale5(void* other);
void* QLocale_NewQLocale2(char* name);
char* QLocale_AmText(void* ptr);
char* QLocale_Bcp47Name(void* ptr);
int QLocale_Country(void* ptr);
char* QLocale_QLocale_CountryToString(int country);
char* QLocale_CreateSeparatedList(void* ptr, char* list);
char* QLocale_CurrencySymbol(void* ptr, int format);
char* QLocale_DateFormat(void* ptr, int format);
char* QLocale_DateTimeFormat(void* ptr, int format);
char* QLocale_DayName(void* ptr, int day, int ty);
int QLocale_FirstDayOfWeek(void* ptr);
int QLocale_Language(void* ptr);
char* QLocale_QLocale_LanguageToString(int language);
int QLocale_MeasurementSystem(void* ptr);
char* QLocale_MonthName(void* ptr, int month, int ty);
char* QLocale_Name(void* ptr);
char* QLocale_NativeCountryName(void* ptr);
char* QLocale_NativeLanguageName(void* ptr);
int QLocale_NumberOptions(void* ptr);
char* QLocale_PmText(void* ptr);
char* QLocale_QuoteString(void* ptr, char* str, int style);
char* QLocale_QuoteString2(void* ptr, void* str, int style);
int QLocale_Script(void* ptr);
char* QLocale_QLocale_ScriptToString(int script);
void QLocale_QLocale_SetDefault(void* locale);
void QLocale_SetNumberOptions(void* ptr, int options);
char* QLocale_StandaloneDayName(void* ptr, int day, int ty);
char* QLocale_StandaloneMonthName(void* ptr, int month, int ty);
int QLocale_TextDirection(void* ptr);
char* QLocale_TimeFormat(void* ptr, int format);
char* QLocale_ToCurrencyString6(void* ptr, int value, char* symbol);
void* QLocale_ToDateTime(void* ptr, char* stri, int format);
void* QLocale_ToDateTime2(void* ptr, char* stri, char* format);
int QLocale_ToInt(void* ptr, char* s, int ok);
int QLocale_ToInt2(void* ptr, void* s, int ok);
char* QLocale_ToLower(void* ptr, char* str);
char* QLocale_ToString3(void* ptr, void* date, int format);
char* QLocale_ToString2(void* ptr, void* date, char* format);
char* QLocale_ToString6(void* ptr, void* dateTime, int format);
char* QLocale_ToString7(void* ptr, void* dateTime, char* format);
char* QLocale_ToString5(void* ptr, void* time, int format);
char* QLocale_ToString4(void* ptr, void* time, char* format);
char* QLocale_ToString12(void* ptr, int i);
char* QLocale_ToUpper(void* ptr, char* str);
char* QLocale_UiLanguages(void* ptr);
void QLocale_DestroyQLocale(void* ptr);
void* QLockFile_NewQLockFile(char* fileName);
int QLockFile_Error(void* ptr);
int QLockFile_IsLocked(void* ptr);
int QLockFile_Lock(void* ptr);
int QLockFile_RemoveStaleLockFile(void* ptr);
void QLockFile_SetStaleLockTime(void* ptr, int staleLockTime);
int QLockFile_StaleLockTime(void* ptr);
int QLockFile_TryLock(void* ptr, int timeout);
void QLockFile_DestroyQLockFile(void* ptr);
void QLockFile_Unlock(void* ptr);
void* QLoggingCategory_NewQLoggingCategory(char* category);
void* QLoggingCategory_QLoggingCategory_DefaultCategory();
int QLoggingCategory_IsCriticalEnabled(void* ptr);
int QLoggingCategory_IsDebugEnabled(void* ptr);
int QLoggingCategory_IsInfoEnabled(void* ptr);
int QLoggingCategory_IsWarningEnabled(void* ptr);
void QLoggingCategory_QLoggingCategory_SetFilterRules(char* rules);
void QLoggingCategory_DestroyQLoggingCategory(void* ptr);
void* QMargins_NewQMargins();
void* QMargins_NewQMargins2(int left, int top, int right, int bottom);
int QMargins_Bottom(void* ptr);
int QMargins_IsNull(void* ptr);
int QMargins_Left(void* ptr);
int QMargins_Right(void* ptr);
void QMargins_SetBottom(void* ptr, int bottom);
void QMargins_SetLeft(void* ptr, int left);
void QMargins_SetRight(void* ptr, int right);
void QMargins_SetTop(void* ptr, int Top);
int QMargins_Top(void* ptr);
void* QMarginsF_NewQMarginsF();
void* QMarginsF_NewQMarginsF3(void* margins);
void* QMarginsF_NewQMarginsF2(double left, double top, double right, double bottom);
double QMarginsF_Bottom(void* ptr);
int QMarginsF_IsNull(void* ptr);
double QMarginsF_Left(void* ptr);
double QMarginsF_Right(void* ptr);
void QMarginsF_SetBottom(void* ptr, double bottom);
void QMarginsF_SetLeft(void* ptr, double left);
void QMarginsF_SetRight(void* ptr, double right);
void QMarginsF_SetTop(void* ptr, double Top);
double QMarginsF_Top(void* ptr);
void* QMessageAuthenticationCode_NewQMessageAuthenticationCode(int method, void* key);
int QMessageAuthenticationCode_AddData2(void* ptr, void* device);
void QMessageAuthenticationCode_AddData3(void* ptr, void* data);
void QMessageAuthenticationCode_AddData(void* ptr, char* data, int length);
void* QMessageAuthenticationCode_QMessageAuthenticationCode_Hash(void* message, void* key, int method);
void QMessageAuthenticationCode_Reset(void* ptr);
void* QMessageAuthenticationCode_Result(void* ptr);
void QMessageAuthenticationCode_SetKey(void* ptr, void* key);
void QMessageAuthenticationCode_DestroyQMessageAuthenticationCode(void* ptr);
void* QMessageLogger_NewQMessageLogger();
void* QMessageLogger_NewQMessageLogger2(char* file, int line, char* function);
void* QMessageLogger_NewQMessageLogger3(char* file, int line, char* function, char* category);
int QMetaEnum_IsFlag(void* ptr);
int QMetaEnum_IsValid(void* ptr);
int QMetaEnum_KeyCount(void* ptr);
int QMetaEnum_KeyToValue(void* ptr, char* key, int ok);
int QMetaEnum_KeysToValue(void* ptr, char* keys, int ok);
int QMetaEnum_Value(void* ptr, int index);
void* QMetaEnum_ValueToKeys(void* ptr, int value);
int QMetaMethod_Access(void* ptr);
int QMetaMethod_Invoke4(void* ptr, void* object, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaMethod_Invoke2(void* ptr, void* object, void* returnValue, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaMethod_Invoke3(void* ptr, void* object, int connectionType, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaMethod_Invoke(void* ptr, void* object, int connectionType, void* returnValue, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaMethod_InvokeOnGadget2(void* ptr, void* gadget, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaMethod_InvokeOnGadget(void* ptr, void* gadget, void* returnValue, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaMethod_IsValid(void* ptr);
int QMetaMethod_MethodIndex(void* ptr);
void* QMetaMethod_MethodSignature(void* ptr);
int QMetaMethod_MethodType(void* ptr);
void* QMetaMethod_Name(void* ptr);
int QMetaMethod_ParameterCount(void* ptr);
int QMetaMethod_ParameterType(void* ptr, int index);
int QMetaMethod_ReturnType(void* ptr);
int QMetaMethod_Revision(void* ptr);
void QMetaObject_QMetaObject_ConnectSlotsByName(void* object);
int QMetaObject_QMetaObject_CheckConnectArgs2(void* signal, void* method);
int QMetaObject_QMetaObject_CheckConnectArgs(char* signal, char* method);
int QMetaObject_ClassInfoCount(void* ptr);
int QMetaObject_ClassInfoOffset(void* ptr);
int QMetaObject_ConstructorCount(void* ptr);
int QMetaObject_EnumeratorCount(void* ptr);
int QMetaObject_EnumeratorOffset(void* ptr);
int QMetaObject_IndexOfClassInfo(void* ptr, char* name);
int QMetaObject_IndexOfConstructor(void* ptr, char* constructor);
int QMetaObject_IndexOfEnumerator(void* ptr, char* name);
int QMetaObject_IndexOfMethod(void* ptr, char* method);
int QMetaObject_IndexOfProperty(void* ptr, char* name);
int QMetaObject_IndexOfSignal(void* ptr, char* signal);
int QMetaObject_IndexOfSlot(void* ptr, char* slot);
int QMetaObject_QMetaObject_InvokeMethod4(void* obj, char* member, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaObject_QMetaObject_InvokeMethod2(void* obj, char* member, void* ret, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaObject_QMetaObject_InvokeMethod3(void* obj, char* member, int ty, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaObject_QMetaObject_InvokeMethod(void* obj, char* member, int ty, void* ret, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
int QMetaObject_MethodCount(void* ptr);
int QMetaObject_MethodOffset(void* ptr);
void* QMetaObject_NewInstance(void* ptr, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
void* QMetaObject_QMetaObject_NormalizedSignature(char* method);
void* QMetaObject_QMetaObject_NormalizedType(char* ty);
int QMetaObject_PropertyCount(void* ptr);
int QMetaObject_PropertyOffset(void* ptr);
void* QMetaObject_SuperClass(void* ptr);
int QMetaProperty_HasNotifySignal(void* ptr);
int QMetaProperty_IsConstant(void* ptr);
int QMetaProperty_IsDesignable(void* ptr, void* object);
int QMetaProperty_IsEnumType(void* ptr);
int QMetaProperty_IsFinal(void* ptr);
int QMetaProperty_IsFlagType(void* ptr);
int QMetaProperty_IsReadable(void* ptr);
int QMetaProperty_IsResettable(void* ptr);
int QMetaProperty_IsScriptable(void* ptr, void* object);
int QMetaProperty_IsStored(void* ptr, void* object);
int QMetaProperty_IsUser(void* ptr, void* object);
int QMetaProperty_IsValid(void* ptr);
int QMetaProperty_IsWritable(void* ptr);
int QMetaProperty_NotifySignalIndex(void* ptr);
int QMetaProperty_PropertyIndex(void* ptr);
void* QMetaProperty_Read(void* ptr, void* object);
void* QMetaProperty_ReadOnGadget(void* ptr, void* gadget);
int QMetaProperty_Reset(void* ptr, void* object);
int QMetaProperty_ResetOnGadget(void* ptr, void* gadget);
int QMetaProperty_Revision(void* ptr);
int QMetaProperty_UserType(void* ptr);
int QMetaProperty_Write(void* ptr, void* object, void* value);
int QMetaProperty_WriteOnGadget(void* ptr, void* gadget, void* value);
void* QMetaType_NewQMetaType(int typeId);
int QMetaType_QMetaType_Compare(void* lhs, void* rhs, int typeId, int result);
void* QMetaType_QMetaType_Construct(int ty, void* where, void* copy);
void* QMetaType_Construct3(void* ptr, void* where, void* copy);
int QMetaType_QMetaType_Convert(void* from, int fromTypeId, void* to, int toTypeId);
void* QMetaType_QMetaType_Create(int ty, void* copy);
void* QMetaType_Create2(void* ptr, void* copy);
int QMetaType_QMetaType_DebugStream(void* dbg, void* rhs, int typeId);
void QMetaType_QMetaType_Destroy(int ty, void* data);
void QMetaType_Destroy2(void* ptr, void* data);
void QMetaType_QMetaType_Destruct(int ty, void* where);
void QMetaType_Destruct2(void* ptr, void* data);
int QMetaType_QMetaType_Equals(void* lhs, void* rhs, int typeId, int result);
int QMetaType_Flags(void* ptr);
int QMetaType_QMetaType_IsRegistered(int ty);
int QMetaType_IsRegistered2(void* ptr);
int QMetaType_IsValid(void* ptr);
int QMetaType_QMetaType_Load(void* stream, int ty, void* data);
void* QMetaType_MetaObject(void* ptr);
void* QMetaType_QMetaType_MetaObjectForType(int ty);
int QMetaType_QMetaType_Save(void* stream, int ty, void* data);
int QMetaType_QMetaType_SizeOf(int ty);
int QMetaType_SizeOf2(void* ptr);
int QMetaType_QMetaType_Type2(void* typeName);
int QMetaType_QMetaType_Type(char* typeName);
int QMetaType_QMetaType_TypeFlags(int ty);
void QMetaType_DestroyQMetaType(void* ptr);
void* QMimeData_NewQMimeData();
void QMimeData_Clear(void* ptr);
void* QMimeData_ColorData(void* ptr);
void* QMimeData_Data(void* ptr, char* mimeType);
char* QMimeData_Formats(void* ptr);
char* QMimeData_FormatsDefault(void* ptr);
int QMimeData_HasColor(void* ptr);
int QMimeData_HasFormat(void* ptr, char* mimeType);
int QMimeData_HasFormatDefault(void* ptr, char* mimeType);
int QMimeData_HasHtml(void* ptr);
int QMimeData_HasImage(void* ptr);
int QMimeData_HasText(void* ptr);
int QMimeData_HasUrls(void* ptr);
char* QMimeData_Html(void* ptr);
void* QMimeData_ImageData(void* ptr);
void QMimeData_RemoveFormat(void* ptr, char* mimeType);
void QMimeData_SetColorData(void* ptr, void* color);
void QMimeData_SetData(void* ptr, char* mimeType, void* data);
void QMimeData_SetHtml(void* ptr, char* html);
void QMimeData_SetImageData(void* ptr, void* image);
void QMimeData_SetText(void* ptr, char* text);
char* QMimeData_Text(void* ptr);
void QMimeData_DestroyQMimeData(void* ptr);
void QMimeData_TimerEvent(void* ptr, void* event);
void QMimeData_TimerEventDefault(void* ptr, void* event);
void QMimeData_ChildEvent(void* ptr, void* event);
void QMimeData_ChildEventDefault(void* ptr, void* event);
void QMimeData_CustomEvent(void* ptr, void* event);
void QMimeData_CustomEventDefault(void* ptr, void* event);
void* QMimeDatabase_NewQMimeDatabase();
void QMimeDatabase_DestroyQMimeDatabase(void* ptr);
char* QMimeDatabase_SuffixForFileName(void* ptr, char* fileName);
void* QMimeType_NewQMimeType();
void* QMimeType_NewQMimeType2(void* other);
char* QMimeType_FilterString(void* ptr);
char* QMimeType_GenericIconName(void* ptr);
char* QMimeType_GlobPatterns(void* ptr);
char* QMimeType_IconName(void* ptr);
int QMimeType_Inherits(void* ptr, char* mimeTypeName);
int QMimeType_IsDefault(void* ptr);
int QMimeType_IsValid(void* ptr);
char* QMimeType_Name(void* ptr);
void QMimeType_DestroyQMimeType(void* ptr);
char* QMimeType_Aliases(void* ptr);
char* QMimeType_AllAncestors(void* ptr);
char* QMimeType_Comment(void* ptr);
char* QMimeType_ParentMimeTypes(void* ptr);
char* QMimeType_PreferredSuffix(void* ptr);
char* QMimeType_Suffixes(void* ptr);
void QMimeType_Swap(void* ptr, void* other);
void* QModelIndex_NewQModelIndex();
void* QModelIndex_Child(void* ptr, int row, int column);
int QModelIndex_Column(void* ptr);
void* QModelIndex_Data(void* ptr, int role);
int QModelIndex_Flags(void* ptr);
void* QModelIndex_InternalPointer(void* ptr);
int QModelIndex_IsValid(void* ptr);
void* QModelIndex_Model(void* ptr);
void* QModelIndex_Parent(void* ptr);
int QModelIndex_Row(void* ptr);
void* QModelIndex_Sibling(void* ptr, int row, int column);
void QMutex_Lock(void* ptr);
int QMutex_TryLock(void* ptr, int timeout);
void QMutex_Unlock(void* ptr);
void* QMutex_NewQMutex(int mode);
int QMutex_IsRecursive(void* ptr);
void* QMutexLocker_NewQMutexLocker(void* mutex);
void* QMutexLocker_Mutex(void* ptr);
void QMutexLocker_Relock(void* ptr);
void QMutexLocker_Unlock(void* ptr);
void QMutexLocker_DestroyQMutexLocker(void* ptr);
void QObject_InstallEventFilter(void* ptr, void* filterObj);
char* QObject_ObjectName(void* ptr);
void QObject_SetObjectName(void* ptr, char* name);
void QObject_TimerEvent(void* ptr, void* event);
void QObject_TimerEventDefault(void* ptr, void* event);
void* QObject_NewQObject(void* parent);
int QObject_BlockSignals(void* ptr, int block);
void QObject_ChildEvent(void* ptr, void* event);
void QObject_ChildEventDefault(void* ptr, void* event);
void QObject_CustomEvent(void* ptr, void* event);
void QObject_CustomEventDefault(void* ptr, void* event);
void QObject_DeleteLater(void* ptr);
void QObject_ConnectDestroyed(void* ptr);
void QObject_DisconnectDestroyed(void* ptr);
void QObject_Destroyed(void* ptr, void* obj);
void QObject_DumpObjectInfo(void* ptr);
void QObject_DumpObjectTree(void* ptr);
int QObject_Event(void* ptr, void* e);
int QObject_EventDefault(void* ptr, void* e);
int QObject_EventFilter(void* ptr, void* watched, void* event);
int QObject_EventFilterDefault(void* ptr, void* watched, void* event);
void* QObject_FindChild(void* ptr, char* name, int options);
int QObject_Inherits(void* ptr, char* className);
int QObject_IsWidgetType(void* ptr);
int QObject_IsWindowType(void* ptr);
void QObject_KillTimer(void* ptr, int id);
void* QObject_MetaObject(void* ptr);
void* QObject_MetaObjectDefault(void* ptr);
void QObject_MoveToThread(void* ptr, void* targetThread);
void QObject_ConnectObjectNameChanged(void* ptr);
void QObject_DisconnectObjectNameChanged(void* ptr);
void* QObject_Parent(void* ptr);
void* QObject_Property(void* ptr, char* name);
void QObject_RemoveEventFilter(void* ptr, void* obj);
void QObject_SetParent(void* ptr, void* parent);
int QObject_SetProperty(void* ptr, char* name, void* value);
int QObject_StartTimer(void* ptr, int interval, int timerType);
int QObject_SignalsBlocked(void* ptr);
void* QObject_Thread(void* ptr);
char* QObject_QObject_Tr(char* sourceText, char* disambiguation, int n);
void QObject_DestroyQObject(void* ptr);
void* QObjectCleanupHandler_NewQObjectCleanupHandler();
void* QObjectCleanupHandler_Add(void* ptr, void* object);
void QObjectCleanupHandler_Clear(void* ptr);
int QObjectCleanupHandler_IsEmpty(void* ptr);
void QObjectCleanupHandler_DestroyQObjectCleanupHandler(void* ptr);
void QObjectCleanupHandler_TimerEvent(void* ptr, void* event);
void QObjectCleanupHandler_TimerEventDefault(void* ptr, void* event);
void QObjectCleanupHandler_ChildEvent(void* ptr, void* event);
void QObjectCleanupHandler_ChildEventDefault(void* ptr, void* event);
void QObjectCleanupHandler_CustomEvent(void* ptr, void* event);
void QObjectCleanupHandler_CustomEventDefault(void* ptr, void* event);
int QParallelAnimationGroup_Duration(void* ptr);
int QParallelAnimationGroup_DurationDefault(void* ptr);
int QParallelAnimationGroup_Event(void* ptr, void* event);
int QParallelAnimationGroup_EventDefault(void* ptr, void* event);
void QParallelAnimationGroup_UpdateCurrentTime(void* ptr, int currentTime);
void QParallelAnimationGroup_UpdateCurrentTimeDefault(void* ptr, int currentTime);
void QParallelAnimationGroup_UpdateDirection(void* ptr, int direction);
void QParallelAnimationGroup_UpdateDirectionDefault(void* ptr, int direction);
void QParallelAnimationGroup_UpdateState(void* ptr, int newState, int oldState);
void QParallelAnimationGroup_UpdateStateDefault(void* ptr, int newState, int oldState);
void QParallelAnimationGroup_DestroyQParallelAnimationGroup(void* ptr);
void QParallelAnimationGroup_TimerEvent(void* ptr, void* event);
void QParallelAnimationGroup_TimerEventDefault(void* ptr, void* event);
void QParallelAnimationGroup_ChildEvent(void* ptr, void* event);
void QParallelAnimationGroup_ChildEventDefault(void* ptr, void* event);
void QParallelAnimationGroup_CustomEvent(void* ptr, void* event);
void QParallelAnimationGroup_CustomEventDefault(void* ptr, void* event);
int QPauseAnimation_Duration(void* ptr);
int QPauseAnimation_DurationDefault(void* ptr);
void QPauseAnimation_SetDuration(void* ptr, int msecs);
void* QPauseAnimation_NewQPauseAnimation(void* parent);
void* QPauseAnimation_NewQPauseAnimation2(int msecs, void* parent);
int QPauseAnimation_Event(void* ptr, void* e);
int QPauseAnimation_EventDefault(void* ptr, void* e);
void QPauseAnimation_UpdateCurrentTime(void* ptr, int v);
void QPauseAnimation_UpdateCurrentTimeDefault(void* ptr, int v);
void QPauseAnimation_DestroyQPauseAnimation(void* ptr);
void QPauseAnimation_UpdateDirection(void* ptr, int direction);
void QPauseAnimation_UpdateDirectionDefault(void* ptr, int direction);
void QPauseAnimation_UpdateState(void* ptr, int newState, int oldState);
void QPauseAnimation_UpdateStateDefault(void* ptr, int newState, int oldState);
void QPauseAnimation_TimerEvent(void* ptr, void* event);
void QPauseAnimation_TimerEventDefault(void* ptr, void* event);
void QPauseAnimation_ChildEvent(void* ptr, void* event);
void QPauseAnimation_ChildEventDefault(void* ptr, void* event);
void QPauseAnimation_CustomEvent(void* ptr, void* event);
void QPauseAnimation_CustomEventDefault(void* ptr, void* event);
void* QPersistentModelIndex_NewQPersistentModelIndex3(void* other);
int QPersistentModelIndex_Column(void* ptr);
int QPersistentModelIndex_IsValid(void* ptr);
int QPersistentModelIndex_Row(void* ptr);
void* QPersistentModelIndex_NewQPersistentModelIndex4(void* other);
void* QPersistentModelIndex_NewQPersistentModelIndex(void* index);
void* QPersistentModelIndex_Child(void* ptr, int row, int column);
void* QPersistentModelIndex_Data(void* ptr, int role);
int QPersistentModelIndex_Flags(void* ptr);
void* QPersistentModelIndex_Model(void* ptr);
void* QPersistentModelIndex_Parent(void* ptr);
void* QPersistentModelIndex_Sibling(void* ptr, int row, int column);
void QPersistentModelIndex_Swap(void* ptr, void* other);
char* QPluginLoader_FileName(void* ptr);
int QPluginLoader_LoadHints(void* ptr);
void QPluginLoader_SetFileName(void* ptr, char* fileName);
void QPluginLoader_SetLoadHints(void* ptr, int loadHints);
void* QPluginLoader_NewQPluginLoader(void* parent);
void* QPluginLoader_NewQPluginLoader2(char* fileName, void* parent);
char* QPluginLoader_ErrorString(void* ptr);
void* QPluginLoader_Instance(void* ptr);
int QPluginLoader_IsLoaded(void* ptr);
int QPluginLoader_Load(void* ptr);
void* QPluginLoader_MetaData(void* ptr);
int QPluginLoader_Unload(void* ptr);
void QPluginLoader_DestroyQPluginLoader(void* ptr);
void QPluginLoader_TimerEvent(void* ptr, void* event);
void QPluginLoader_TimerEventDefault(void* ptr, void* event);
void QPluginLoader_ChildEvent(void* ptr, void* event);
void QPluginLoader_ChildEventDefault(void* ptr, void* event);
void QPluginLoader_CustomEvent(void* ptr, void* event);
void QPluginLoader_CustomEventDefault(void* ptr, void* event);
void* QPoint_NewQPoint();
void* QPoint_NewQPoint2(int xpos, int ypos);
int QPoint_QPoint_DotProduct(void* p1, void* p2);
int QPoint_IsNull(void* ptr);
int QPoint_ManhattanLength(void* ptr);
int QPoint_Rx(void* ptr);
int QPoint_Ry(void* ptr);
void QPoint_SetX(void* ptr, int x);
void QPoint_SetY(void* ptr, int y);
int QPoint_X(void* ptr);
int QPoint_Y(void* ptr);
void* QPointF_NewQPointF();
void* QPointF_NewQPointF2(void* point);
void* QPointF_NewQPointF3(double xpos, double ypos);
double QPointF_QPointF_DotProduct(void* p1, void* p2);
int QPointF_IsNull(void* ptr);
double QPointF_ManhattanLength(void* ptr);
double QPointF_Rx(void* ptr);
double QPointF_Ry(void* ptr);
void QPointF_SetX(void* ptr, double x);
void QPointF_SetY(void* ptr, double y);
void* QPointF_ToPoint(void* ptr);
double QPointF_X(void* ptr);
double QPointF_Y(void* ptr);
void* QProcess_NewQProcess(void* parent);
char* QProcess_Arguments(void* ptr);
int QProcess_AtEnd(void* ptr);
int QProcess_AtEndDefault(void* ptr);
long long QProcess_BytesAvailable(void* ptr);
long long QProcess_BytesAvailableDefault(void* ptr);
long long QProcess_BytesToWrite(void* ptr);
long long QProcess_BytesToWriteDefault(void* ptr);
int QProcess_CanReadLine(void* ptr);
int QProcess_CanReadLineDefault(void* ptr);
void QProcess_Close(void* ptr);
void QProcess_CloseDefault(void* ptr);
void QProcess_CloseReadChannel(void* ptr, int channel);
void QProcess_CloseWriteChannel(void* ptr);
void QProcess_ConnectError2(void* ptr);
void QProcess_DisconnectError2(void* ptr);
void QProcess_Error2(void* ptr, int error);
int QProcess_Error(void* ptr);
int QProcess_QProcess_Execute2(char* command);
int QProcess_QProcess_Execute(char* program, char* arguments);
int QProcess_ExitCode(void* ptr);
int QProcess_ExitStatus(void* ptr);
void QProcess_ConnectFinished(void* ptr);
void QProcess_DisconnectFinished(void* ptr);
void QProcess_Finished(void* ptr, int exitCode, int exitStatus);
int QProcess_InputChannelMode(void* ptr);
int QProcess_IsSequential(void* ptr);
int QProcess_IsSequentialDefault(void* ptr);
void QProcess_Kill(void* ptr);
char* QProcess_QProcess_NullDevice();
int QProcess_Open(void* ptr, int mode);
int QProcess_OpenDefault(void* ptr, int mode);
int QProcess_ProcessChannelMode(void* ptr);
long long QProcess_ProcessId(void* ptr);
char* QProcess_Program(void* ptr);
void* QProcess_ReadAllStandardError(void* ptr);
void* QProcess_ReadAllStandardOutput(void* ptr);
int QProcess_ReadChannel(void* ptr);
long long QProcess_ReadData(void* ptr, char* data, long long maxlen);
long long QProcess_ReadDataDefault(void* ptr, char* data, long long maxlen);
void QProcess_ConnectReadyReadStandardError(void* ptr);
void QProcess_DisconnectReadyReadStandardError(void* ptr);
void QProcess_ConnectReadyReadStandardOutput(void* ptr);
void QProcess_DisconnectReadyReadStandardOutput(void* ptr);
void QProcess_SetArguments(void* ptr, char* arguments);
void QProcess_SetInputChannelMode(void* ptr, int mode);
void QProcess_SetProcessChannelMode(void* ptr, int mode);
void QProcess_SetProcessEnvironment(void* ptr, void* environment);
void QProcess_SetProgram(void* ptr, char* program);
void QProcess_SetReadChannel(void* ptr, int channel);
void QProcess_SetStandardErrorFile(void* ptr, char* fileName, int mode);
void QProcess_SetStandardInputFile(void* ptr, char* fileName);
void QProcess_SetStandardOutputFile(void* ptr, char* fileName, int mode);
void QProcess_SetStandardOutputProcess(void* ptr, void* destination);
void QProcess_SetWorkingDirectory(void* ptr, char* dir);
void QProcess_SetupChildProcess(void* ptr);
void QProcess_SetupChildProcessDefault(void* ptr);
void QProcess_Start2(void* ptr, int mode);
void QProcess_Start3(void* ptr, char* command, int mode);
void QProcess_Start(void* ptr, char* program, char* arguments, int mode);
int QProcess_QProcess_StartDetached2(char* command);
void QProcess_ConnectStarted(void* ptr);
void QProcess_DisconnectStarted(void* ptr);
int QProcess_State(void* ptr);
void QProcess_ConnectStateChanged(void* ptr);
void QProcess_DisconnectStateChanged(void* ptr);
char* QProcess_QProcess_SystemEnvironment();
void QProcess_Terminate(void* ptr);
int QProcess_WaitForBytesWritten(void* ptr, int msecs);
int QProcess_WaitForBytesWrittenDefault(void* ptr, int msecs);
int QProcess_WaitForFinished(void* ptr, int msecs);
int QProcess_WaitForReadyRead(void* ptr, int msecs);
int QProcess_WaitForReadyReadDefault(void* ptr, int msecs);
int QProcess_WaitForStarted(void* ptr, int msecs);
char* QProcess_WorkingDirectory(void* ptr);
long long QProcess_WriteData(void* ptr, char* data, long long len);
long long QProcess_WriteDataDefault(void* ptr, char* data, long long len);
void QProcess_DestroyQProcess(void* ptr);
void QProcess_TimerEvent(void* ptr, void* event);
void QProcess_TimerEventDefault(void* ptr, void* event);
void QProcess_ChildEvent(void* ptr, void* event);
void QProcess_ChildEventDefault(void* ptr, void* event);
void QProcess_CustomEvent(void* ptr, void* event);
void QProcess_CustomEventDefault(void* ptr, void* event);
void* QProcessEnvironment_NewQProcessEnvironment();
void* QProcessEnvironment_NewQProcessEnvironment2(void* other);
void QProcessEnvironment_Clear(void* ptr);
int QProcessEnvironment_Contains(void* ptr, char* name);
int QProcessEnvironment_IsEmpty(void* ptr);
char* QProcessEnvironment_Keys(void* ptr);
void QProcessEnvironment_Swap(void* ptr, void* other);
char* QProcessEnvironment_ToStringList(void* ptr);
char* QProcessEnvironment_Value(void* ptr, char* name, char* defaultValue);
void QProcessEnvironment_DestroyQProcessEnvironment(void* ptr);
void* QPropertyAnimation_PropertyName(void* ptr);
void QPropertyAnimation_SetPropertyName(void* ptr, void* propertyName);
void QPropertyAnimation_SetTargetObject(void* ptr, void* target);
void* QPropertyAnimation_TargetObject(void* ptr);
void* QPropertyAnimation_NewQPropertyAnimation(void* parent);
void* QPropertyAnimation_NewQPropertyAnimation2(void* target, void* propertyName, void* parent);
int QPropertyAnimation_Event(void* ptr, void* event);
int QPropertyAnimation_EventDefault(void* ptr, void* event);
void QPropertyAnimation_UpdateCurrentValue(void* ptr, void* value);
void QPropertyAnimation_UpdateCurrentValueDefault(void* ptr, void* value);
void QPropertyAnimation_UpdateState(void* ptr, int newState, int oldState);
void QPropertyAnimation_UpdateStateDefault(void* ptr, int newState, int oldState);
void QPropertyAnimation_DestroyQPropertyAnimation(void* ptr);
void QPropertyAnimation_UpdateCurrentTime(void* ptr, int v);
void QPropertyAnimation_UpdateCurrentTimeDefault(void* ptr, int v);
void QPropertyAnimation_UpdateDirection(void* ptr, int direction);
void QPropertyAnimation_UpdateDirectionDefault(void* ptr, int direction);
void QPropertyAnimation_TimerEvent(void* ptr, void* event);
void QPropertyAnimation_TimerEventDefault(void* ptr, void* event);
void QPropertyAnimation_ChildEvent(void* ptr, void* event);
void QPropertyAnimation_ChildEventDefault(void* ptr, void* event);
void QPropertyAnimation_CustomEvent(void* ptr, void* event);
void QPropertyAnimation_CustomEventDefault(void* ptr, void* event);
void* QReadLocker_NewQReadLocker(void* lock);
void* QReadLocker_ReadWriteLock(void* ptr);
void QReadLocker_Relock(void* ptr);
void QReadLocker_Unlock(void* ptr);
void QReadLocker_DestroyQReadLocker(void* ptr);
void* QReadWriteLock_NewQReadWriteLock(int recursionMode);
void QReadWriteLock_LockForRead(void* ptr);
void QReadWriteLock_LockForWrite(void* ptr);
int QReadWriteLock_TryLockForRead(void* ptr);
int QReadWriteLock_TryLockForRead2(void* ptr, int timeout);
int QReadWriteLock_TryLockForWrite(void* ptr);
int QReadWriteLock_TryLockForWrite2(void* ptr, int timeout);
void QReadWriteLock_Unlock(void* ptr);
void QReadWriteLock_DestroyQReadWriteLock(void* ptr);
int QRect_Contains(void* ptr, void* point, int proper);
int QRect_Contains4(void* ptr, void* rectangle, int proper);
int QRect_Intersects(void* ptr, void* rectangle);
void* QRect_NewQRect();
void* QRect_NewQRect2(void* topLeft, void* bottomRight);
void* QRect_NewQRect3(void* topLeft, void* size);
void* QRect_NewQRect4(int x, int y, int width, int height);
void QRect_Adjust(void* ptr, int dx1, int dy1, int dx2, int dy2);
void* QRect_Adjusted(void* ptr, int dx1, int dy1, int dx2, int dy2);
int QRect_Bottom(void* ptr);
void* QRect_BottomLeft(void* ptr);
void* QRect_BottomRight(void* ptr);
void* QRect_Center(void* ptr);
int QRect_Contains3(void* ptr, int x, int y);
int QRect_Contains2(void* ptr, int x, int y, int proper);
void QRect_GetCoords(void* ptr, int x1, int y1, int x2, int y2);
void QRect_GetRect(void* ptr, int x, int y, int width, int height);
int QRect_Height(void* ptr);
void* QRect_Intersected(void* ptr, void* rectangle);
int QRect_IsEmpty(void* ptr);
int QRect_IsNull(void* ptr);
int QRect_IsValid(void* ptr);
int QRect_Left(void* ptr);
void* QRect_MarginsAdded(void* ptr, void* margins);
void* QRect_MarginsRemoved(void* ptr, void* margins);
void QRect_MoveBottom(void* ptr, int y);
void QRect_MoveBottomLeft(void* ptr, void* position);
void QRect_MoveBottomRight(void* ptr, void* position);
void QRect_MoveCenter(void* ptr, void* position);
void QRect_MoveLeft(void* ptr, int x);
void QRect_MoveRight(void* ptr, int x);
void QRect_MoveTo2(void* ptr, void* position);
void QRect_MoveTo(void* ptr, int x, int y);
void QRect_MoveTop(void* ptr, int y);
void QRect_MoveTopLeft(void* ptr, void* position);
void QRect_MoveTopRight(void* ptr, void* position);
void* QRect_Normalized(void* ptr);
int QRect_Right(void* ptr);
void QRect_SetBottom(void* ptr, int y);
void QRect_SetBottomLeft(void* ptr, void* position);
void QRect_SetBottomRight(void* ptr, void* position);
void QRect_SetCoords(void* ptr, int x1, int y1, int x2, int y2);
void QRect_SetHeight(void* ptr, int height);
void QRect_SetLeft(void* ptr, int x);
void QRect_SetRect(void* ptr, int x, int y, int width, int height);
void QRect_SetRight(void* ptr, int x);
void QRect_SetSize(void* ptr, void* size);
void QRect_SetTop(void* ptr, int y);
void QRect_SetTopLeft(void* ptr, void* position);
void QRect_SetTopRight(void* ptr, void* position);
void QRect_SetWidth(void* ptr, int width);
void QRect_SetX(void* ptr, int x);
void QRect_SetY(void* ptr, int y);
void* QRect_Size(void* ptr);
int QRect_Top(void* ptr);
void* QRect_TopLeft(void* ptr);
void* QRect_TopRight(void* ptr);
void QRect_Translate2(void* ptr, void* offset);
void QRect_Translate(void* ptr, int dx, int dy);
void* QRect_Translated2(void* ptr, void* offset);
void* QRect_Translated(void* ptr, int dx, int dy);
void* QRect_United(void* ptr, void* rectangle);
int QRect_Width(void* ptr);
int QRect_X(void* ptr);
int QRect_Y(void* ptr);
int QRectF_Contains(void* ptr, void* point);
int QRectF_Contains3(void* ptr, void* rectangle);
int QRectF_Intersects(void* ptr, void* rectangle);
void* QRectF_ToAlignedRect(void* ptr);
void* QRectF_NewQRectF();
void* QRectF_NewQRectF3(void* topLeft, void* bottomRight);
void* QRectF_NewQRectF2(void* topLeft, void* size);
void* QRectF_NewQRectF5(void* rectangle);
void* QRectF_NewQRectF4(double x, double y, double width, double height);
void QRectF_Adjust(void* ptr, double dx1, double dy1, double dx2, double dy2);
double QRectF_Bottom(void* ptr);
int QRectF_Contains2(void* ptr, double x, double y);
double QRectF_Height(void* ptr);
int QRectF_IsEmpty(void* ptr);
int QRectF_IsNull(void* ptr);
int QRectF_IsValid(void* ptr);
double QRectF_Left(void* ptr);
void QRectF_MoveBottom(void* ptr, double y);
void QRectF_MoveBottomLeft(void* ptr, void* position);
void QRectF_MoveBottomRight(void* ptr, void* position);
void QRectF_MoveCenter(void* ptr, void* position);
void QRectF_MoveLeft(void* ptr, double x);
void QRectF_MoveRight(void* ptr, double x);
void QRectF_MoveTo2(void* ptr, void* position);
void QRectF_MoveTo(void* ptr, double x, double y);
void QRectF_MoveTop(void* ptr, double y);
void QRectF_MoveTopLeft(void* ptr, void* position);
void QRectF_MoveTopRight(void* ptr, void* position);
double QRectF_Right(void* ptr);
void QRectF_SetBottom(void* ptr, double y);
void QRectF_SetBottomLeft(void* ptr, void* position);
void QRectF_SetBottomRight(void* ptr, void* position);
void QRectF_SetCoords(void* ptr, double x1, double y1, double x2, double y2);
void QRectF_SetHeight(void* ptr, double height);
void QRectF_SetLeft(void* ptr, double x);
void QRectF_SetRect(void* ptr, double x, double y, double width, double height);
void QRectF_SetRight(void* ptr, double x);
void QRectF_SetSize(void* ptr, void* size);
void QRectF_SetTop(void* ptr, double y);
void QRectF_SetTopLeft(void* ptr, void* position);
void QRectF_SetTopRight(void* ptr, void* position);
void QRectF_SetWidth(void* ptr, double width);
void QRectF_SetX(void* ptr, double x);
void QRectF_SetY(void* ptr, double y);
void* QRectF_ToRect(void* ptr);
double QRectF_Top(void* ptr);
void QRectF_Translate2(void* ptr, void* offset);
void QRectF_Translate(void* ptr, double dx, double dy);
double QRectF_Width(void* ptr);
double QRectF_X(void* ptr);
double QRectF_Y(void* ptr);
void* QRegExp_NewQRegExp();
void* QRegExp_NewQRegExp3(void* rx);
void* QRegExp_NewQRegExp2(char* pattern, int cs, int syntax);
char* QRegExp_Cap(void* ptr, int nth);
char* QRegExp_ErrorString(void* ptr);
int QRegExp_CaptureCount(void* ptr);
char* QRegExp_CapturedTexts(void* ptr);
int QRegExp_CaseSensitivity(void* ptr);
char* QRegExp_QRegExp_Escape(char* str);
int QRegExp_ExactMatch(void* ptr, char* str);
int QRegExp_IndexIn(void* ptr, char* str, int offset, int caretMode);
int QRegExp_IsEmpty(void* ptr);
int QRegExp_IsMinimal(void* ptr);
int QRegExp_IsValid(void* ptr);
int QRegExp_LastIndexIn(void* ptr, char* str, int offset, int caretMode);
int QRegExp_MatchedLength(void* ptr);
char* QRegExp_Pattern(void* ptr);
int QRegExp_PatternSyntax(void* ptr);
int QRegExp_Pos(void* ptr, int nth);
void QRegExp_SetCaseSensitivity(void* ptr, int cs);
void QRegExp_SetMinimal(void* ptr, int minimal);
void QRegExp_SetPattern(void* ptr, char* pattern);
void QRegExp_SetPatternSyntax(void* ptr, int syntax);
void QRegExp_Swap(void* ptr, void* other);
void QRegExp_DestroyQRegExp(void* ptr);
void* QRegularExpression_NewQRegularExpression();
void* QRegularExpression_NewQRegularExpression3(void* re);
void* QRegularExpression_NewQRegularExpression2(char* pattern, int options);
int QRegularExpression_CaptureCount(void* ptr);
char* QRegularExpression_ErrorString(void* ptr);
char* QRegularExpression_QRegularExpression_Escape(char* str);
void* QRegularExpression_GlobalMatch(void* ptr, char* subject, int offset, int matchType, int matchOptions);
void* QRegularExpression_GlobalMatch2(void* ptr, void* subjectRef, int offset, int matchType, int matchOptions);
int QRegularExpression_IsValid(void* ptr);
void* QRegularExpression_Match(void* ptr, char* subject, int offset, int matchType, int matchOptions);
void* QRegularExpression_Match2(void* ptr, void* subjectRef, int offset, int matchType, int matchOptions);
char* QRegularExpression_NamedCaptureGroups(void* ptr);
void QRegularExpression_Optimize(void* ptr);
char* QRegularExpression_Pattern(void* ptr);
int QRegularExpression_PatternErrorOffset(void* ptr);
int QRegularExpression_PatternOptions(void* ptr);
void QRegularExpression_SetPattern(void* ptr, char* pattern);
void QRegularExpression_SetPatternOptions(void* ptr, int options);
void QRegularExpression_Swap(void* ptr, void* other);
void QRegularExpression_DestroyQRegularExpression(void* ptr);
void* QRegularExpressionMatch_NewQRegularExpressionMatch();
void* QRegularExpressionMatch_NewQRegularExpressionMatch2(void* match);
char* QRegularExpressionMatch_Captured2(void* ptr, char* name);
char* QRegularExpressionMatch_Captured(void* ptr, int nth);
int QRegularExpressionMatch_CapturedEnd2(void* ptr, char* name);
int QRegularExpressionMatch_CapturedEnd(void* ptr, int nth);
int QRegularExpressionMatch_CapturedLength2(void* ptr, char* name);
int QRegularExpressionMatch_CapturedLength(void* ptr, int nth);
void* QRegularExpressionMatch_CapturedRef2(void* ptr, char* name);
void* QRegularExpressionMatch_CapturedRef(void* ptr, int nth);
int QRegularExpressionMatch_CapturedStart2(void* ptr, char* name);
int QRegularExpressionMatch_CapturedStart(void* ptr, int nth);
char* QRegularExpressionMatch_CapturedTexts(void* ptr);
int QRegularExpressionMatch_HasMatch(void* ptr);
int QRegularExpressionMatch_HasPartialMatch(void* ptr);
int QRegularExpressionMatch_IsValid(void* ptr);
int QRegularExpressionMatch_LastCapturedIndex(void* ptr);
int QRegularExpressionMatch_MatchOptions(void* ptr);
int QRegularExpressionMatch_MatchType(void* ptr);
void* QRegularExpressionMatch_RegularExpression(void* ptr);
void QRegularExpressionMatch_Swap(void* ptr, void* other);
void QRegularExpressionMatch_DestroyQRegularExpressionMatch(void* ptr);
int QResource_QResource_RegisterResource(char* rccFileName, char* mapRoot);
int QResource_QResource_UnregisterResource(char* rccFileName, char* mapRoot);
void* QResource_NewQResource(char* file, void* locale);
char* QResource_AbsoluteFilePath(void* ptr);
char* QResource_FileName(void* ptr);
int QResource_IsCompressed(void* ptr);
int QResource_IsValid(void* ptr);
void QResource_SetFileName(void* ptr, char* file);
void QResource_SetLocale(void* ptr, void* locale);
long long QResource_Size(void* ptr);
void QResource_DestroyQResource(void* ptr);
int QRunnable_AutoDelete(void* ptr);
void QRunnable_Run(void* ptr);
void QRunnable_SetAutoDelete(void* ptr, int autoDelete);
void QRunnable_DestroyQRunnable(void* ptr);
char* QRunnable_ObjectNameAbs(void* ptr);
void QRunnable_SetObjectNameAbs(void* ptr, char* name);
void* QSaveFile_NewQSaveFile2(void* parent);
void* QSaveFile_NewQSaveFile(char* name);
void* QSaveFile_NewQSaveFile3(char* name, void* parent);
void QSaveFile_CancelWriting(void* ptr);
int QSaveFile_Commit(void* ptr);
int QSaveFile_DirectWriteFallback(void* ptr);
char* QSaveFile_FileName(void* ptr);
char* QSaveFile_FileNameDefault(void* ptr);
int QSaveFile_Open(void* ptr, int mode);
int QSaveFile_OpenDefault(void* ptr, int mode);
void QSaveFile_SetDirectWriteFallback(void* ptr, int enabled);
void QSaveFile_SetFileName(void* ptr, char* name);
long long QSaveFile_WriteData(void* ptr, char* data, long long len);
long long QSaveFile_WriteDataDefault(void* ptr, char* data, long long len);
void QSaveFile_DestroyQSaveFile(void* ptr);
void QSaveFile_TimerEvent(void* ptr, void* event);
void QSaveFile_TimerEventDefault(void* ptr, void* event);
void QSaveFile_ChildEvent(void* ptr, void* event);
void QSaveFile_ChildEventDefault(void* ptr, void* event);
void QSaveFile_CustomEvent(void* ptr, void* event);
void QSaveFile_CustomEventDefault(void* ptr, void* event);
void* QSemaphore_NewQSemaphore(int n);
void QSemaphore_Acquire(void* ptr, int n);
int QSemaphore_Available(void* ptr);
void QSemaphore_Release(void* ptr, int n);
int QSemaphore_TryAcquire(void* ptr, int n);
int QSemaphore_TryAcquire2(void* ptr, int n, int timeout);
void QSemaphore_DestroyQSemaphore(void* ptr);
void* QSequentialAnimationGroup_CurrentAnimation(void* ptr);
void* QSequentialAnimationGroup_AddPause(void* ptr, int msecs);
void QSequentialAnimationGroup_ConnectCurrentAnimationChanged(void* ptr);
void QSequentialAnimationGroup_DisconnectCurrentAnimationChanged(void* ptr);
void QSequentialAnimationGroup_CurrentAnimationChanged(void* ptr, void* current);
int QSequentialAnimationGroup_Duration(void* ptr);
int QSequentialAnimationGroup_DurationDefault(void* ptr);
int QSequentialAnimationGroup_Event(void* ptr, void* event);
int QSequentialAnimationGroup_EventDefault(void* ptr, void* event);
void* QSequentialAnimationGroup_InsertPause(void* ptr, int index, int msecs);
void QSequentialAnimationGroup_UpdateCurrentTime(void* ptr, int currentTime);
void QSequentialAnimationGroup_UpdateCurrentTimeDefault(void* ptr, int currentTime);
void QSequentialAnimationGroup_UpdateDirection(void* ptr, int direction);
void QSequentialAnimationGroup_UpdateDirectionDefault(void* ptr, int direction);
void QSequentialAnimationGroup_UpdateState(void* ptr, int newState, int oldState);
void QSequentialAnimationGroup_UpdateStateDefault(void* ptr, int newState, int oldState);
void QSequentialAnimationGroup_DestroyQSequentialAnimationGroup(void* ptr);
void QSequentialAnimationGroup_TimerEvent(void* ptr, void* event);
void QSequentialAnimationGroup_TimerEventDefault(void* ptr, void* event);
void QSequentialAnimationGroup_ChildEvent(void* ptr, void* event);
void QSequentialAnimationGroup_ChildEventDefault(void* ptr, void* event);
void QSequentialAnimationGroup_CustomEvent(void* ptr, void* event);
void QSequentialAnimationGroup_CustomEventDefault(void* ptr, void* event);
void* QSequentialIterable_At(void* ptr, int idx);
int QSequentialIterable_CanReverseIterate(void* ptr);
int QSequentialIterable_Size(void* ptr);
void* QSettings_NewQSettings3(int format, int scope, char* organization, char* application, void* parent);
void* QSettings_NewQSettings5(void* parent);
void* QSettings_NewQSettings2(int scope, char* organization, char* application, void* parent);
void* QSettings_NewQSettings4(char* fileName, int format, void* parent);
void* QSettings_NewQSettings(char* organization, char* application, void* parent);
char* QSettings_AllKeys(void* ptr);
char* QSettings_ApplicationName(void* ptr);
void QSettings_BeginGroup(void* ptr, char* prefix);
int QSettings_BeginReadArray(void* ptr, char* prefix);
void QSettings_BeginWriteArray(void* ptr, char* prefix, int size);
char* QSettings_ChildGroups(void* ptr);
char* QSettings_ChildKeys(void* ptr);
void QSettings_Clear(void* ptr);
int QSettings_Contains(void* ptr, char* key);
int QSettings_QSettings_DefaultFormat();
void QSettings_EndArray(void* ptr);
void QSettings_EndGroup(void* ptr);
int QSettings_Event(void* ptr, void* event);
int QSettings_EventDefault(void* ptr, void* event);
int QSettings_FallbacksEnabled(void* ptr);
char* QSettings_FileName(void* ptr);
int QSettings_Format(void* ptr);
char* QSettings_Group(void* ptr);
void* QSettings_IniCodec(void* ptr);
int QSettings_IsWritable(void* ptr);
char* QSettings_OrganizationName(void* ptr);
int QSettings_Scope(void* ptr);
void QSettings_SetArrayIndex(void* ptr, int i);
void QSettings_QSettings_SetDefaultFormat(int format);
void QSettings_SetFallbacksEnabled(void* ptr, int b);
void QSettings_SetIniCodec(void* ptr, void* codec);
void QSettings_SetIniCodec2(void* ptr, char* codecName);
void QSettings_QSettings_SetPath(int format, int scope, char* path);
void QSettings_SetValue(void* ptr, char* key, void* value);
int QSettings_Status(void* ptr);
void QSettings_Sync(void* ptr);
void* QSettings_Value(void* ptr, char* key, void* defaultValue);
void QSettings_DestroyQSettings(void* ptr);
void QSettings_TimerEvent(void* ptr, void* event);
void QSettings_TimerEventDefault(void* ptr, void* event);
void QSettings_ChildEvent(void* ptr, void* event);
void QSettings_ChildEventDefault(void* ptr, void* event);
void QSettings_CustomEvent(void* ptr, void* event);
void QSettings_CustomEventDefault(void* ptr, void* event);
void* QSharedData_NewQSharedData();
void* QSharedData_NewQSharedData2(void* other);
void* QSharedMemory_NewQSharedMemory2(void* parent);
void* QSharedMemory_NewQSharedMemory(char* key, void* parent);
int QSharedMemory_Attach(void* ptr, int mode);
void* QSharedMemory_ConstData(void* ptr);
int QSharedMemory_Create(void* ptr, int size, int mode);
void* QSharedMemory_Data(void* ptr);
void* QSharedMemory_Data2(void* ptr);
int QSharedMemory_Detach(void* ptr);
int QSharedMemory_Error(void* ptr);
char* QSharedMemory_ErrorString(void* ptr);
int QSharedMemory_IsAttached(void* ptr);
char* QSharedMemory_Key(void* ptr);
int QSharedMemory_Lock(void* ptr);
char* QSharedMemory_NativeKey(void* ptr);
void QSharedMemory_SetKey(void* ptr, char* key);
void QSharedMemory_SetNativeKey(void* ptr, char* key);
int QSharedMemory_Size(void* ptr);
int QSharedMemory_Unlock(void* ptr);
void QSharedMemory_DestroyQSharedMemory(void* ptr);
void QSharedMemory_TimerEvent(void* ptr, void* event);
void QSharedMemory_TimerEventDefault(void* ptr, void* event);
void QSharedMemory_ChildEvent(void* ptr, void* event);
void QSharedMemory_ChildEventDefault(void* ptr, void* event);
void QSharedMemory_CustomEvent(void* ptr, void* event);
void QSharedMemory_CustomEventDefault(void* ptr, void* event);
void QSignalBlocker_Reblock(void* ptr);
void QSignalBlocker_Unblock(void* ptr);
void QSignalBlocker_DestroyQSignalBlocker(void* ptr);
void* QSignalMapper_NewQSignalMapper(void* parent);
void QSignalMapper_Map(void* ptr);
void QSignalMapper_Map2(void* ptr, void* sender);
void QSignalMapper_ConnectMapped4(void* ptr);
void QSignalMapper_DisconnectMapped4(void* ptr);
void QSignalMapper_Mapped4(void* ptr, void* object);
void QSignalMapper_ConnectMapped3(void* ptr);
void QSignalMapper_DisconnectMapped3(void* ptr);
void QSignalMapper_Mapped3(void* ptr, void* widget);
void QSignalMapper_ConnectMapped2(void* ptr);
void QSignalMapper_DisconnectMapped2(void* ptr);
void QSignalMapper_Mapped2(void* ptr, char* text);
void QSignalMapper_ConnectMapped(void* ptr);
void QSignalMapper_DisconnectMapped(void* ptr);
void QSignalMapper_Mapped(void* ptr, int i);
void* QSignalMapper_Mapping4(void* ptr, void* object);
void* QSignalMapper_Mapping3(void* ptr, void* widget);
void* QSignalMapper_Mapping2(void* ptr, char* id);
void* QSignalMapper_Mapping(void* ptr, int id);
void QSignalMapper_RemoveMappings(void* ptr, void* sender);
void QSignalMapper_SetMapping4(void* ptr, void* sender, void* object);
void QSignalMapper_SetMapping3(void* ptr, void* sender, void* widget);
void QSignalMapper_SetMapping2(void* ptr, void* sender, char* text);
void QSignalMapper_SetMapping(void* ptr, void* sender, int id);
void QSignalMapper_DestroyQSignalMapper(void* ptr);
void QSignalMapper_TimerEvent(void* ptr, void* event);
void QSignalMapper_TimerEventDefault(void* ptr, void* event);
void QSignalMapper_ChildEvent(void* ptr, void* event);
void QSignalMapper_ChildEventDefault(void* ptr, void* event);
void QSignalMapper_CustomEvent(void* ptr, void* event);
void QSignalMapper_CustomEventDefault(void* ptr, void* event);
void* QSignalTransition_NewQSignalTransition(void* sourceState);
void* QSignalTransition_NewQSignalTransition2(void* sender, char* signal, void* sourceState);
int QSignalTransition_Event(void* ptr, void* e);
int QSignalTransition_EventDefault(void* ptr, void* e);
int QSignalTransition_EventTest(void* ptr, void* event);
int QSignalTransition_EventTestDefault(void* ptr, void* event);
void QSignalTransition_OnTransition(void* ptr, void* event);
void QSignalTransition_OnTransitionDefault(void* ptr, void* event);
void* QSignalTransition_SenderObject(void* ptr);
void QSignalTransition_ConnectSenderObjectChanged(void* ptr);
void QSignalTransition_DisconnectSenderObjectChanged(void* ptr);
void QSignalTransition_SetSenderObject(void* ptr, void* sender);
void QSignalTransition_SetSignal(void* ptr, void* signal);
void* QSignalTransition_Signal(void* ptr);
void QSignalTransition_ConnectSignalChanged(void* ptr);
void QSignalTransition_DisconnectSignalChanged(void* ptr);
void QSignalTransition_DestroyQSignalTransition(void* ptr);
void QSignalTransition_TimerEvent(void* ptr, void* event);
void QSignalTransition_TimerEventDefault(void* ptr, void* event);
void QSignalTransition_ChildEvent(void* ptr, void* event);
void QSignalTransition_ChildEventDefault(void* ptr, void* event);
void QSignalTransition_CustomEvent(void* ptr, void* event);
void QSignalTransition_CustomEventDefault(void* ptr, void* event);
void* QSize_NewQSize();
void* QSize_NewQSize2(int width, int height);
void* QSize_BoundedTo(void* ptr, void* otherSize);
void* QSize_ExpandedTo(void* ptr, void* otherSize);
int QSize_Height(void* ptr);
int QSize_IsEmpty(void* ptr);
int QSize_IsNull(void* ptr);
int QSize_IsValid(void* ptr);
int QSize_Rheight(void* ptr);
int QSize_Rwidth(void* ptr);
void QSize_Scale2(void* ptr, void* size, int mode);
void QSize_Scale(void* ptr, int width, int height, int mode);
void* QSize_Scaled2(void* ptr, void* s, int mode);
void* QSize_Scaled(void* ptr, int width, int height, int mode);
void QSize_SetHeight(void* ptr, int height);
void QSize_SetWidth(void* ptr, int width);
void QSize_Transpose(void* ptr);
void* QSize_Transposed(void* ptr);
int QSize_Width(void* ptr);
void* QSizeF_NewQSizeF();
void* QSizeF_NewQSizeF2(void* size);
void* QSizeF_NewQSizeF3(double width, double height);
double QSizeF_Height(void* ptr);
int QSizeF_IsEmpty(void* ptr);
int QSizeF_IsNull(void* ptr);
int QSizeF_IsValid(void* ptr);
double QSizeF_Rheight(void* ptr);
double QSizeF_Rwidth(void* ptr);
void QSizeF_Scale2(void* ptr, void* size, int mode);
void QSizeF_Scale(void* ptr, double width, double height, int mode);
void QSizeF_SetHeight(void* ptr, double height);
void QSizeF_SetWidth(void* ptr, double width);
void* QSizeF_ToSize(void* ptr);
void QSizeF_Transpose(void* ptr);
double QSizeF_Width(void* ptr);
void QSocketNotifier_ConnectActivated(void* ptr);
void QSocketNotifier_DisconnectActivated(void* ptr);
int QSocketNotifier_Event(void* ptr, void* e);
int QSocketNotifier_EventDefault(void* ptr, void* e);
int QSocketNotifier_IsEnabled(void* ptr);
void QSocketNotifier_SetEnabled(void* ptr, int enable);
int QSocketNotifier_Type(void* ptr);
void QSocketNotifier_DestroyQSocketNotifier(void* ptr);
void QSocketNotifier_TimerEvent(void* ptr, void* event);
void QSocketNotifier_TimerEventDefault(void* ptr, void* event);
void QSocketNotifier_ChildEvent(void* ptr, void* event);
void QSocketNotifier_ChildEventDefault(void* ptr, void* event);
void QSocketNotifier_CustomEvent(void* ptr, void* event);
void QSocketNotifier_CustomEventDefault(void* ptr, void* event);
int QSortFilterProxyModel_DynamicSortFilter(void* ptr);
int QSortFilterProxyModel_FilterCaseSensitivity(void* ptr);
int QSortFilterProxyModel_FilterKeyColumn(void* ptr);
void* QSortFilterProxyModel_FilterRegExp(void* ptr);
int QSortFilterProxyModel_FilterRole(void* ptr);
int QSortFilterProxyModel_IsSortLocaleAware(void* ptr);
void QSortFilterProxyModel_SetDynamicSortFilter(void* ptr, int enable);
void QSortFilterProxyModel_SetFilterCaseSensitivity(void* ptr, int cs);
void QSortFilterProxyModel_SetFilterKeyColumn(void* ptr, int column);
void QSortFilterProxyModel_SetFilterRegExp(void* ptr, void* regExp);
void QSortFilterProxyModel_SetFilterRole(void* ptr, int role);
void QSortFilterProxyModel_SetSortCaseSensitivity(void* ptr, int cs);
void QSortFilterProxyModel_SetSortLocaleAware(void* ptr, int on);
void QSortFilterProxyModel_SetSortRole(void* ptr, int role);
int QSortFilterProxyModel_SortCaseSensitivity(void* ptr);
int QSortFilterProxyModel_SortRole(void* ptr);
void* QSortFilterProxyModel_NewQSortFilterProxyModel(void* parent);
void* QSortFilterProxyModel_Buddy(void* ptr, void* index);
void* QSortFilterProxyModel_BuddyDefault(void* ptr, void* index);
int QSortFilterProxyModel_CanFetchMore(void* ptr, void* parent);
int QSortFilterProxyModel_CanFetchMoreDefault(void* ptr, void* parent);
int QSortFilterProxyModel_ColumnCount(void* ptr, void* parent);
int QSortFilterProxyModel_ColumnCountDefault(void* ptr, void* parent);
void* QSortFilterProxyModel_Data(void* ptr, void* index, int role);
void* QSortFilterProxyModel_DataDefault(void* ptr, void* index, int role);
int QSortFilterProxyModel_DropMimeData(void* ptr, void* data, int action, int row, int column, void* parent);
int QSortFilterProxyModel_DropMimeDataDefault(void* ptr, void* data, int action, int row, int column, void* parent);
void QSortFilterProxyModel_FetchMore(void* ptr, void* parent);
void QSortFilterProxyModel_FetchMoreDefault(void* ptr, void* parent);
int QSortFilterProxyModel_FilterAcceptsColumn(void* ptr, int source_column, void* source_parent);
int QSortFilterProxyModel_FilterAcceptsColumnDefault(void* ptr, int source_column, void* source_parent);
int QSortFilterProxyModel_FilterAcceptsRow(void* ptr, int source_row, void* source_parent);
int QSortFilterProxyModel_FilterAcceptsRowDefault(void* ptr, int source_row, void* source_parent);
int QSortFilterProxyModel_Flags(void* ptr, void* index);
int QSortFilterProxyModel_FlagsDefault(void* ptr, void* index);
int QSortFilterProxyModel_HasChildren(void* ptr, void* parent);
int QSortFilterProxyModel_HasChildrenDefault(void* ptr, void* parent);
void* QSortFilterProxyModel_HeaderData(void* ptr, int section, int orientation, int role);
void* QSortFilterProxyModel_HeaderDataDefault(void* ptr, int section, int orientation, int role);
void* QSortFilterProxyModel_Index(void* ptr, int row, int column, void* parent);
void* QSortFilterProxyModel_IndexDefault(void* ptr, int row, int column, void* parent);
int QSortFilterProxyModel_InsertColumns(void* ptr, int column, int count, void* parent);
int QSortFilterProxyModel_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
int QSortFilterProxyModel_InsertRows(void* ptr, int row, int count, void* parent);
int QSortFilterProxyModel_InsertRowsDefault(void* ptr, int row, int count, void* parent);
void QSortFilterProxyModel_Invalidate(void* ptr);
int QSortFilterProxyModel_LessThan(void* ptr, void* source_left, void* source_right);
int QSortFilterProxyModel_LessThanDefault(void* ptr, void* source_left, void* source_right);
void* QSortFilterProxyModel_MapFromSource(void* ptr, void* sourceIndex);
void* QSortFilterProxyModel_MapFromSourceDefault(void* ptr, void* sourceIndex);
void* QSortFilterProxyModel_MapToSource(void* ptr, void* proxyIndex);
void* QSortFilterProxyModel_MapToSourceDefault(void* ptr, void* proxyIndex);
char* QSortFilterProxyModel_MimeTypes(void* ptr);
char* QSortFilterProxyModel_MimeTypesDefault(void* ptr);
void* QSortFilterProxyModel_Parent(void* ptr, void* child);
void* QSortFilterProxyModel_ParentDefault(void* ptr, void* child);
int QSortFilterProxyModel_RemoveColumns(void* ptr, int column, int count, void* parent);
int QSortFilterProxyModel_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
int QSortFilterProxyModel_RemoveRows(void* ptr, int row, int count, void* parent);
int QSortFilterProxyModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
int QSortFilterProxyModel_RowCount(void* ptr, void* parent);
int QSortFilterProxyModel_RowCountDefault(void* ptr, void* parent);
int QSortFilterProxyModel_SetData(void* ptr, void* index, void* value, int role);
int QSortFilterProxyModel_SetDataDefault(void* ptr, void* index, void* value, int role);
void QSortFilterProxyModel_SetFilterFixedString(void* ptr, char* pattern);
void QSortFilterProxyModel_SetFilterRegExp2(void* ptr, char* pattern);
void QSortFilterProxyModel_SetFilterWildcard(void* ptr, char* pattern);
int QSortFilterProxyModel_SetHeaderData(void* ptr, int section, int orientation, void* value, int role);
int QSortFilterProxyModel_SetHeaderDataDefault(void* ptr, int section, int orientation, void* value, int role);
void QSortFilterProxyModel_SetSourceModel(void* ptr, void* sourceModel);
void QSortFilterProxyModel_SetSourceModelDefault(void* ptr, void* sourceModel);
void* QSortFilterProxyModel_Sibling(void* ptr, int row, int column, void* idx);
void* QSortFilterProxyModel_SiblingDefault(void* ptr, int row, int column, void* idx);
void QSortFilterProxyModel_Sort(void* ptr, int column, int order);
void QSortFilterProxyModel_SortDefault(void* ptr, int column, int order);
int QSortFilterProxyModel_SortColumn(void* ptr);
int QSortFilterProxyModel_SortOrder(void* ptr);
void* QSortFilterProxyModel_Span(void* ptr, void* index);
void* QSortFilterProxyModel_SpanDefault(void* ptr, void* index);
int QSortFilterProxyModel_SupportedDropActions(void* ptr);
int QSortFilterProxyModel_SupportedDropActionsDefault(void* ptr);
void QSortFilterProxyModel_DestroyQSortFilterProxyModel(void* ptr);
void QSortFilterProxyModel_Revert(void* ptr);
void QSortFilterProxyModel_RevertDefault(void* ptr);
void QSortFilterProxyModel_TimerEvent(void* ptr, void* event);
void QSortFilterProxyModel_TimerEventDefault(void* ptr, void* event);
void QSortFilterProxyModel_ChildEvent(void* ptr, void* event);
void QSortFilterProxyModel_ChildEventDefault(void* ptr, void* event);
void QSortFilterProxyModel_CustomEvent(void* ptr, void* event);
void QSortFilterProxyModel_CustomEventDefault(void* ptr, void* event);
void QStandardPaths_QStandardPaths_SetTestModeEnabled(int testMode);
char* QStandardPaths_QStandardPaths_FindExecutable(char* executableName, char* paths);
char* QStandardPaths_QStandardPaths_Locate(int ty, char* fileName, int options);
char* QStandardPaths_QStandardPaths_LocateAll(int ty, char* fileName, int options);
char* QStandardPaths_QStandardPaths_DisplayName(int ty);
char* QStandardPaths_QStandardPaths_StandardLocations(int ty);
char* QStandardPaths_QStandardPaths_WritableLocation(int ty);
void* QState_NewQState2(int childMode, void* parent);
void* QState_NewQState(void* parent);
void* QState_AddTransition3(void* ptr, void* target);
void* QState_AddTransition2(void* ptr, void* sender, char* signal, void* target);
void QState_AddTransition(void* ptr, void* transition);
void QState_AssignProperty(void* ptr, void* object, char* name, void* value);
int QState_ChildMode(void* ptr);
void QState_ConnectChildModeChanged(void* ptr);
void QState_DisconnectChildModeChanged(void* ptr);
void* QState_ErrorState(void* ptr);
void QState_ConnectErrorStateChanged(void* ptr);
void QState_DisconnectErrorStateChanged(void* ptr);
int QState_Event(void* ptr, void* e);
int QState_EventDefault(void* ptr, void* e);
void QState_ConnectFinished(void* ptr);
void QState_DisconnectFinished(void* ptr);
void* QState_InitialState(void* ptr);
void QState_ConnectInitialStateChanged(void* ptr);
void QState_DisconnectInitialStateChanged(void* ptr);
void QState_OnEntry(void* ptr, void* event);
void QState_OnEntryDefault(void* ptr, void* event);
void QState_OnExit(void* ptr, void* event);
void QState_OnExitDefault(void* ptr, void* event);
void QState_ConnectPropertiesAssigned(void* ptr);
void QState_DisconnectPropertiesAssigned(void* ptr);
void QState_RemoveTransition(void* ptr, void* transition);
void QState_SetChildMode(void* ptr, int mode);
void QState_SetErrorState(void* ptr, void* state);
void QState_SetInitialState(void* ptr, void* state);
void QState_DestroyQState(void* ptr);
void QState_TimerEvent(void* ptr, void* event);
void QState_TimerEventDefault(void* ptr, void* event);
void QState_ChildEvent(void* ptr, void* event);
void QState_ChildEventDefault(void* ptr, void* event);
void QState_CustomEvent(void* ptr, void* event);
void QState_CustomEventDefault(void* ptr, void* event);
void* QStateMachine_NewQStateMachine(void* parent);
void* QStateMachine_NewQStateMachine2(int childMode, void* parent);
void QStateMachine_AddDefaultAnimation(void* ptr, void* animation);
void QStateMachine_AddState(void* ptr, void* state);
void QStateMachine_ClearError(void* ptr);
int QStateMachine_CancelDelayedEvent(void* ptr, int id);
int QStateMachine_Error(void* ptr);
char* QStateMachine_ErrorString(void* ptr);
int QStateMachine_Event(void* ptr, void* e);
int QStateMachine_EventDefault(void* ptr, void* e);
int QStateMachine_EventFilter(void* ptr, void* watched, void* event);
int QStateMachine_EventFilterDefault(void* ptr, void* watched, void* event);
int QStateMachine_GlobalRestorePolicy(void* ptr);
int QStateMachine_IsAnimated(void* ptr);
int QStateMachine_IsRunning(void* ptr);
void QStateMachine_OnEntry(void* ptr, void* event);
void QStateMachine_OnEntryDefault(void* ptr, void* event);
void QStateMachine_OnExit(void* ptr, void* event);
void QStateMachine_OnExitDefault(void* ptr, void* event);
int QStateMachine_PostDelayedEvent(void* ptr, void* event, int delay);
void QStateMachine_PostEvent(void* ptr, void* event, int priority);
void QStateMachine_RemoveDefaultAnimation(void* ptr, void* animation);
void QStateMachine_RemoveState(void* ptr, void* state);
void QStateMachine_ConnectRunningChanged(void* ptr);
void QStateMachine_DisconnectRunningChanged(void* ptr);
void QStateMachine_RunningChanged(void* ptr, int running);
void QStateMachine_SetAnimated(void* ptr, int enabled);
void QStateMachine_SetGlobalRestorePolicy(void* ptr, int restorePolicy);
void QStateMachine_SetRunning(void* ptr, int running);
void QStateMachine_Start(void* ptr);
void QStateMachine_ConnectStarted(void* ptr);
void QStateMachine_DisconnectStarted(void* ptr);
void QStateMachine_Stop(void* ptr);
void QStateMachine_ConnectStopped(void* ptr);
void QStateMachine_DisconnectStopped(void* ptr);
void QStateMachine_DestroyQStateMachine(void* ptr);
void QStateMachine_TimerEvent(void* ptr, void* event);
void QStateMachine_TimerEventDefault(void* ptr, void* event);
void QStateMachine_ChildEvent(void* ptr, void* event);
void QStateMachine_ChildEventDefault(void* ptr, void* event);
void QStateMachine_CustomEvent(void* ptr, void* event);
void QStateMachine_CustomEventDefault(void* ptr, void* event);
void* QStaticPlugin_Instance(void* ptr);
void* QStaticPlugin_MetaData(void* ptr);
void* QStorageInfo_NewQStorageInfo();
void* QStorageInfo_NewQStorageInfo3(void* dir);
void* QStorageInfo_NewQStorageInfo4(void* other);
void* QStorageInfo_NewQStorageInfo2(char* path);
long long QStorageInfo_BytesAvailable(void* ptr);
long long QStorageInfo_BytesFree(void* ptr);
long long QStorageInfo_BytesTotal(void* ptr);
void* QStorageInfo_Device(void* ptr);
char* QStorageInfo_DisplayName(void* ptr);
void* QStorageInfo_FileSystemType(void* ptr);
int QStorageInfo_IsReadOnly(void* ptr);
int QStorageInfo_IsReady(void* ptr);
int QStorageInfo_IsRoot(void* ptr);
int QStorageInfo_IsValid(void* ptr);
char* QStorageInfo_Name(void* ptr);
void QStorageInfo_Refresh(void* ptr);
char* QStorageInfo_RootPath(void* ptr);
void QStorageInfo_SetPath(void* ptr, char* path);
void QStorageInfo_Swap(void* ptr, void* other);
void QStorageInfo_DestroyQStorageInfo(void* ptr);
void* QStringListModel_Data(void* ptr, void* index, int role);
void* QStringListModel_DataDefault(void* ptr, void* index, int role);
int QStringListModel_Flags(void* ptr, void* index);
int QStringListModel_FlagsDefault(void* ptr, void* index);
int QStringListModel_InsertRows(void* ptr, int row, int count, void* parent);
int QStringListModel_InsertRowsDefault(void* ptr, int row, int count, void* parent);
int QStringListModel_RemoveRows(void* ptr, int row, int count, void* parent);
int QStringListModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
int QStringListModel_RowCount(void* ptr, void* parent);
int QStringListModel_RowCountDefault(void* ptr, void* parent);
int QStringListModel_SetData(void* ptr, void* index, void* value, int role);
int QStringListModel_SetDataDefault(void* ptr, void* index, void* value, int role);
void QStringListModel_SetStringList(void* ptr, char* strin);
void* QStringListModel_Sibling(void* ptr, int row, int column, void* idx);
void* QStringListModel_SiblingDefault(void* ptr, int row, int column, void* idx);
void QStringListModel_Sort(void* ptr, int column, int order);
void QStringListModel_SortDefault(void* ptr, int column, int order);
char* QStringListModel_StringList(void* ptr);
int QStringListModel_SupportedDropActions(void* ptr);
int QStringListModel_SupportedDropActionsDefault(void* ptr);
void QStringListModel_FetchMore(void* ptr, void* parent);
void QStringListModel_FetchMoreDefault(void* ptr, void* parent);
void QStringListModel_Revert(void* ptr);
void QStringListModel_RevertDefault(void* ptr);
void QStringListModel_TimerEvent(void* ptr, void* event);
void QStringListModel_TimerEventDefault(void* ptr, void* event);
void QStringListModel_ChildEvent(void* ptr, void* event);
void QStringListModel_ChildEventDefault(void* ptr, void* event);
void QStringListModel_CustomEvent(void* ptr, void* event);
void QStringListModel_CustomEventDefault(void* ptr, void* event);
void* QStringMatcher_NewQStringMatcher3(void* uc, int length, int cs);
char* QStringMatcher_Pattern(void* ptr);
void* QStringMatcher_NewQStringMatcher();
void* QStringMatcher_NewQStringMatcher2(char* pattern, int cs);
void* QStringMatcher_NewQStringMatcher4(void* other);
int QStringMatcher_CaseSensitivity(void* ptr);
int QStringMatcher_IndexIn2(void* ptr, void* str, int length, int from);
int QStringMatcher_IndexIn(void* ptr, char* str, int from);
void QStringMatcher_SetCaseSensitivity(void* ptr, int cs);
void QStringMatcher_SetPattern(void* ptr, char* pattern);
void QStringMatcher_DestroyQStringMatcher(void* ptr);
void* QStringRef_Left(void* ptr, int n);
void* QStringRef_Mid(void* ptr, int position, int n);
void* QStringRef_Right(void* ptr, int n);
void* QStringRef_AppendTo(void* ptr, char* stri);
void* QStringRef_Begin(void* ptr);
void* QStringRef_Cbegin(void* ptr);
void* QStringRef_Cend(void* ptr);
void QStringRef_Clear(void* ptr);
int QStringRef_QStringRef_Compare3(void* s1, void* s2, int cs);
int QStringRef_QStringRef_Compare(void* s1, char* s2, int cs);
int QStringRef_QStringRef_Compare2(void* s1, void* s2, int cs);
int QStringRef_Compare6(void* ptr, void* other, int cs);
int QStringRef_Compare4(void* ptr, char* other, int cs);
int QStringRef_Compare5(void* ptr, void* other, int cs);
void* QStringRef_ConstData(void* ptr);
int QStringRef_Contains2(void* ptr, void* ch, int cs);
int QStringRef_Contains4(void* ptr, void* str, int cs);
int QStringRef_Contains(void* ptr, char* str, int cs);
int QStringRef_Contains3(void* ptr, void* str, int cs);
int QStringRef_Count(void* ptr);
int QStringRef_Count3(void* ptr, void* ch, int cs);
int QStringRef_Count2(void* ptr, char* str, int cs);
int QStringRef_Count4(void* ptr, void* str, int cs);
void* QStringRef_Data(void* ptr);
void* QStringRef_End(void* ptr);
int QStringRef_EndsWith2(void* ptr, void* ch, int cs);
int QStringRef_EndsWith3(void* ptr, void* str, int cs);
int QStringRef_EndsWith(void* ptr, char* str, int cs);
int QStringRef_EndsWith4(void* ptr, void* str, int cs);
int QStringRef_IndexOf3(void* ptr, void* ch, int from, int cs);
int QStringRef_IndexOf2(void* ptr, void* str, int from, int cs);
int QStringRef_IndexOf(void* ptr, char* str, int from, int cs);
int QStringRef_IndexOf4(void* ptr, void* str, int from, int cs);
int QStringRef_IsEmpty(void* ptr);
int QStringRef_IsNull(void* ptr);
int QStringRef_LastIndexOf2(void* ptr, void* ch, int from, int cs);
int QStringRef_LastIndexOf3(void* ptr, void* str, int from, int cs);
int QStringRef_LastIndexOf(void* ptr, char* str, int from, int cs);
int QStringRef_LastIndexOf4(void* ptr, void* str, int from, int cs);
int QStringRef_Length(void* ptr);
int QStringRef_QStringRef_LocaleAwareCompare(void* s1, char* s2);
int QStringRef_QStringRef_LocaleAwareCompare2(void* s1, void* s2);
int QStringRef_LocaleAwareCompare3(void* ptr, char* other);
int QStringRef_LocaleAwareCompare4(void* ptr, void* other);
int QStringRef_Position(void* ptr);
int QStringRef_Size(void* ptr);
int QStringRef_StartsWith4(void* ptr, void* ch, int cs);
int QStringRef_StartsWith2(void* ptr, void* str, int cs);
int QStringRef_StartsWith(void* ptr, char* str, int cs);
int QStringRef_StartsWith3(void* ptr, void* str, int cs);
char* QStringRef_String(void* ptr);
int QStringRef_ToInt(void* ptr, int ok, int base);
void* QStringRef_ToLatin1(void* ptr);
void* QStringRef_ToLocal8Bit(void* ptr);
char* QStringRef_ToString(void* ptr);
void* QStringRef_ToUtf8(void* ptr);
void* QStringRef_Trimmed(void* ptr);
void* QStringRef_Unicode(void* ptr);
void QStringRef_DestroyQStringRef(void* ptr);
int QSysInfo_ByteOrder_Type();
int QSysInfo_MV_IOS_Type();
int QSysInfo_MV_IOS_4_3_Type();
int QSysInfo_MV_IOS_5_0_Type();
int QSysInfo_MV_IOS_5_1_Type();
int QSysInfo_MV_IOS_6_0_Type();
int QSysInfo_MV_IOS_6_1_Type();
int QSysInfo_MV_IOS_7_0_Type();
int QSysInfo_MV_IOS_7_1_Type();
int QSysInfo_MV_IOS_8_0_Type();
int QSysInfo_MV_IOS_8_1_Type();
int QSysInfo_MV_IOS_8_2_Type();
int QSysInfo_MV_IOS_8_3_Type();
int QSysInfo_MV_IOS_8_4_Type();
int QSysInfo_MV_IOS_9_0_Type();
int QSysInfo_WordSize_Type();
int QSysInfo_QSysInfo_MacVersion();
char* QSysInfo_QSysInfo_BuildAbi();
char* QSysInfo_QSysInfo_BuildCpuArchitecture();
char* QSysInfo_QSysInfo_CurrentCpuArchitecture();
char* QSysInfo_QSysInfo_KernelType();
char* QSysInfo_QSysInfo_KernelVersion();
char* QSysInfo_QSysInfo_PrettyProductName();
char* QSysInfo_QSysInfo_ProductType();
char* QSysInfo_QSysInfo_ProductVersion();
int QSysInfo_QSysInfo_WindowsVersion();
void* QSystemSemaphore_NewQSystemSemaphore(char* key, int initialValue, int mode);
int QSystemSemaphore_Acquire(void* ptr);
int QSystemSemaphore_Error(void* ptr);
char* QSystemSemaphore_ErrorString(void* ptr);
char* QSystemSemaphore_Key(void* ptr);
int QSystemSemaphore_Release(void* ptr, int n);
void QSystemSemaphore_SetKey(void* ptr, char* key, int initialValue, int mode);
void QSystemSemaphore_DestroyQSystemSemaphore(void* ptr);
void* QTemporaryDir_NewQTemporaryDir();
void* QTemporaryDir_NewQTemporaryDir2(char* templatePath);
int QTemporaryDir_AutoRemove(void* ptr);
int QTemporaryDir_IsValid(void* ptr);
char* QTemporaryDir_Path(void* ptr);
void QTemporaryDir_SetAutoRemove(void* ptr, int b);
void QTemporaryDir_DestroyQTemporaryDir(void* ptr);
void* QTemporaryFile_NewQTemporaryFile();
void* QTemporaryFile_NewQTemporaryFile3(void* parent);
void* QTemporaryFile_NewQTemporaryFile2(char* templateName);
void* QTemporaryFile_NewQTemporaryFile4(char* templateName, void* parent);
int QTemporaryFile_AutoRemove(void* ptr);
void* QTemporaryFile_QTemporaryFile_CreateNativeFile(void* file);
void* QTemporaryFile_QTemporaryFile_CreateNativeFile2(char* fileName);
char* QTemporaryFile_FileName(void* ptr);
char* QTemporaryFile_FileNameDefault(void* ptr);
char* QTemporaryFile_FileTemplate(void* ptr);
int QTemporaryFile_Open(void* ptr);
void QTemporaryFile_SetAutoRemove(void* ptr, int b);
void QTemporaryFile_SetFileTemplate(void* ptr, char* name);
void QTemporaryFile_DestroyQTemporaryFile(void* ptr);
void QTemporaryFile_Close(void* ptr);
void QTemporaryFile_CloseDefault(void* ptr);
void QTemporaryFile_TimerEvent(void* ptr, void* event);
void QTemporaryFile_TimerEventDefault(void* ptr, void* event);
void QTemporaryFile_ChildEvent(void* ptr, void* event);
void QTemporaryFile_ChildEventDefault(void* ptr, void* event);
void QTemporaryFile_CustomEvent(void* ptr, void* event);
void QTemporaryFile_CustomEventDefault(void* ptr, void* event);
void* QTextBoundaryFinder_NewQTextBoundaryFinder();
void* QTextBoundaryFinder_NewQTextBoundaryFinder3(int ty, char* stri);
void* QTextBoundaryFinder_NewQTextBoundaryFinder2(void* other);
int QTextBoundaryFinder_BoundaryReasons(void* ptr);
int QTextBoundaryFinder_IsAtBoundary(void* ptr);
int QTextBoundaryFinder_IsValid(void* ptr);
int QTextBoundaryFinder_Position(void* ptr);
void QTextBoundaryFinder_SetPosition(void* ptr, int position);
char* QTextBoundaryFinder_String(void* ptr);
void QTextBoundaryFinder_ToEnd(void* ptr);
int QTextBoundaryFinder_ToNextBoundary(void* ptr);
int QTextBoundaryFinder_ToPreviousBoundary(void* ptr);
void QTextBoundaryFinder_ToStart(void* ptr);
int QTextBoundaryFinder_Type(void* ptr);
void QTextBoundaryFinder_DestroyQTextBoundaryFinder(void* ptr);
int QTextCodec_CanEncode(void* ptr, void* ch);
int QTextCodec_CanEncode2(void* ptr, char* s);
void* QTextCodec_QTextCodec_CodecForHtml2(void* ba);
void* QTextCodec_QTextCodec_CodecForHtml(void* ba, void* defaultCodec);
void* QTextCodec_QTextCodec_CodecForLocale();
void* QTextCodec_QTextCodec_CodecForMib(int mib);
void* QTextCodec_QTextCodec_CodecForName(void* name);
void* QTextCodec_QTextCodec_CodecForName2(char* name);
void* QTextCodec_QTextCodec_CodecForUtfText2(void* ba);
void* QTextCodec_QTextCodec_CodecForUtfText(void* ba, void* defaultCodec);
void* QTextCodec_FromUnicode(void* ptr, char* str);
void* QTextCodec_MakeDecoder(void* ptr, int flags);
void* QTextCodec_MakeEncoder(void* ptr, int flags);
int QTextCodec_MibEnum(void* ptr);
void* QTextCodec_Name(void* ptr);
void QTextCodec_QTextCodec_SetCodecForLocale(void* c);
void QTextCodec_DestroyQTextCodec(void* ptr);
char* QTextCodec_ObjectNameAbs(void* ptr);
void QTextCodec_SetObjectNameAbs(void* ptr, char* name);
void* QTextDecoder_NewQTextDecoder(void* codec);
void* QTextDecoder_NewQTextDecoder2(void* codec, int flags);
void QTextDecoder_DestroyQTextDecoder(void* ptr);
void* QTextEncoder_NewQTextEncoder(void* codec);
void* QTextEncoder_NewQTextEncoder2(void* codec, int flags);
void* QTextEncoder_FromUnicode2(void* ptr, void* uc, int len);
void* QTextEncoder_FromUnicode(void* ptr, char* str);
void QTextEncoder_DestroyQTextEncoder(void* ptr);
int QTextStream_AtEnd(void* ptr);
int QTextStream_AutoDetectUnicode(void* ptr);
void* QTextStream_Codec(void* ptr);
void* QTextStream_Device(void* ptr);
int QTextStream_FieldAlignment(void* ptr);
int QTextStream_FieldWidth(void* ptr);
void QTextStream_Flush(void* ptr);
int QTextStream_GenerateByteOrderMark(void* ptr);
int QTextStream_IntegerBase(void* ptr);
int QTextStream_NumberFlags(void* ptr);
long long QTextStream_Pos(void* ptr);
char* QTextStream_Read(void* ptr, long long maxlen);
char* QTextStream_ReadAll(void* ptr);
char* QTextStream_ReadLine(void* ptr, long long maxlen);
int QTextStream_ReadLineInto(void* ptr, char* line, long long maxlen);
int QTextStream_RealNumberNotation(void* ptr);
int QTextStream_RealNumberPrecision(void* ptr);
void QTextStream_Reset(void* ptr);
void QTextStream_ResetStatus(void* ptr);
int QTextStream_Seek(void* ptr, long long pos);
void QTextStream_SetAutoDetectUnicode(void* ptr, int enabled);
void QTextStream_SetCodec(void* ptr, void* codec);
void QTextStream_SetCodec2(void* ptr, char* codecName);
void QTextStream_SetDevice(void* ptr, void* device);
void QTextStream_SetFieldAlignment(void* ptr, int mode);
void QTextStream_SetFieldWidth(void* ptr, int width);
void QTextStream_SetGenerateByteOrderMark(void* ptr, int generate);
void QTextStream_SetIntegerBase(void* ptr, int base);
void QTextStream_SetLocale(void* ptr, void* locale);
void QTextStream_SetNumberFlags(void* ptr, int flags);
void QTextStream_SetPadChar(void* ptr, void* ch);
void QTextStream_SetRealNumberNotation(void* ptr, int notation);
void QTextStream_SetRealNumberPrecision(void* ptr, int precision);
void QTextStream_SetStatus(void* ptr, int status);
void QTextStream_SetString(void* ptr, char* stri, int openMode);
void QTextStream_SkipWhiteSpace(void* ptr);
int QTextStream_Status(void* ptr);
char* QTextStream_String(void* ptr);
void QTextStream_DestroyQTextStream(void* ptr);
char* QTextStream_ObjectNameAbs(void* ptr);
void QTextStream_SetObjectNameAbs(void* ptr, char* name);
void QThread_SetPriority(void* ptr, int priority);
void* QThread_NewQThread(void* parent);
void* QThread_QThread_CurrentThread();
int QThread_Event(void* ptr, void* event);
int QThread_EventDefault(void* ptr, void* event);
void* QThread_EventDispatcher(void* ptr);
void QThread_Exit(void* ptr, int returnCode);
void QThread_ConnectFinished(void* ptr);
void QThread_DisconnectFinished(void* ptr);
int QThread_IsFinished(void* ptr);
int QThread_IsInterruptionRequested(void* ptr);
int QThread_IsRunning(void* ptr);
int QThread_LoopLevel(void* ptr);
int QThread_Priority(void* ptr);
void QThread_Quit(void* ptr);
void QThread_RequestInterruption(void* ptr);
void QThread_Run(void* ptr);
void QThread_RunDefault(void* ptr);
void QThread_SetEventDispatcher(void* ptr, void* eventDispatcher);
void QThread_ConnectStarted(void* ptr);
void QThread_DisconnectStarted(void* ptr);
void QThread_DestroyQThread(void* ptr);
int QThread_QThread_IdealThreadCount();
void QThread_Start(void* ptr);
void QThread_Terminate(void* ptr);
void QThread_QThread_YieldCurrentThread();
void QThread_TimerEvent(void* ptr, void* event);
void QThread_TimerEventDefault(void* ptr, void* event);
void QThread_ChildEvent(void* ptr, void* event);
void QThread_ChildEventDefault(void* ptr, void* event);
void QThread_CustomEvent(void* ptr, void* event);
void QThread_CustomEventDefault(void* ptr, void* event);
int QThreadPool_ActiveThreadCount(void* ptr);
int QThreadPool_ExpiryTimeout(void* ptr);
int QThreadPool_MaxThreadCount(void* ptr);
void QThreadPool_SetExpiryTimeout(void* ptr, int expiryTimeout);
void QThreadPool_SetMaxThreadCount(void* ptr, int maxThreadCount);
void* QThreadPool_NewQThreadPool(void* parent);
void QThreadPool_Cancel(void* ptr, void* runnable);
void QThreadPool_Clear(void* ptr);
void* QThreadPool_QThreadPool_GlobalInstance();
void QThreadPool_ReleaseThread(void* ptr);
void QThreadPool_ReserveThread(void* ptr);
void QThreadPool_Start(void* ptr, void* runnable, int priority);
int QThreadPool_TryStart(void* ptr, void* runnable);
int QThreadPool_WaitForDone(void* ptr, int msecs);
void QThreadPool_DestroyQThreadPool(void* ptr);
void QThreadPool_TimerEvent(void* ptr, void* event);
void QThreadPool_TimerEventDefault(void* ptr, void* event);
void QThreadPool_ChildEvent(void* ptr, void* event);
void QThreadPool_ChildEventDefault(void* ptr, void* event);
void QThreadPool_CustomEvent(void* ptr, void* event);
void QThreadPool_CustomEventDefault(void* ptr, void* event);
void* QTime_NewQTime();
void* QTime_NewQTime3(int h, int m, int s, int ms);
int QTime_Elapsed(void* ptr);
int QTime_Hour(void* ptr);
int QTime_IsNull(void* ptr);
int QTime_QTime_IsValid2(int h, int m, int s, int ms);
int QTime_IsValid(void* ptr);
int QTime_Minute(void* ptr);
int QTime_Msec(void* ptr);
int QTime_MsecsSinceStartOfDay(void* ptr);
int QTime_MsecsTo(void* ptr, void* t);
int QTime_Restart(void* ptr);
int QTime_Second(void* ptr);
int QTime_SecsTo(void* ptr, void* t);
int QTime_SetHMS(void* ptr, int h, int m, int s, int ms);
void QTime_Start(void* ptr);
char* QTime_ToString2(void* ptr, int format);
char* QTime_ToString(void* ptr, char* format);
int QTimeLine_CurrentTime(void* ptr);
int QTimeLine_CurveShape(void* ptr);
int QTimeLine_Direction(void* ptr);
int QTimeLine_Duration(void* ptr);
void* QTimeLine_EasingCurve(void* ptr);
int QTimeLine_LoopCount(void* ptr);
void QTimeLine_SetCurrentTime(void* ptr, int msec);
void QTimeLine_SetCurveShape(void* ptr, int shape);
void QTimeLine_SetDirection(void* ptr, int direction);
void QTimeLine_SetDuration(void* ptr, int duration);
void QTimeLine_SetEasingCurve(void* ptr, void* curve);
void QTimeLine_SetLoopCount(void* ptr, int count);
void QTimeLine_SetUpdateInterval(void* ptr, int interval);
int QTimeLine_UpdateInterval(void* ptr);
void* QTimeLine_NewQTimeLine(int duration, void* parent);
int QTimeLine_CurrentFrame(void* ptr);
double QTimeLine_CurrentValue(void* ptr);
int QTimeLine_EndFrame(void* ptr);
void QTimeLine_ConnectFinished(void* ptr);
void QTimeLine_DisconnectFinished(void* ptr);
void QTimeLine_ConnectFrameChanged(void* ptr);
void QTimeLine_DisconnectFrameChanged(void* ptr);
int QTimeLine_FrameForTime(void* ptr, int msec);
void QTimeLine_Resume(void* ptr);
void QTimeLine_SetEndFrame(void* ptr, int frame);
void QTimeLine_SetFrameRange(void* ptr, int startFrame, int endFrame);
void QTimeLine_SetPaused(void* ptr, int paused);
void QTimeLine_SetStartFrame(void* ptr, int frame);
void QTimeLine_Start(void* ptr);
int QTimeLine_StartFrame(void* ptr);
int QTimeLine_State(void* ptr);
void QTimeLine_ConnectStateChanged(void* ptr);
void QTimeLine_DisconnectStateChanged(void* ptr);
void QTimeLine_Stop(void* ptr);
void QTimeLine_TimerEvent(void* ptr, void* event);
void QTimeLine_TimerEventDefault(void* ptr, void* event);
void QTimeLine_ToggleDirection(void* ptr);
void QTimeLine_ConnectValueChanged(void* ptr);
void QTimeLine_DisconnectValueChanged(void* ptr);
double QTimeLine_ValueForTime(void* ptr, int msec);
double QTimeLine_ValueForTimeDefault(void* ptr, int msec);
void QTimeLine_DestroyQTimeLine(void* ptr);
void QTimeLine_ChildEvent(void* ptr, void* event);
void QTimeLine_ChildEventDefault(void* ptr, void* event);
void QTimeLine_CustomEvent(void* ptr, void* event);
void QTimeLine_CustomEventDefault(void* ptr, void* event);
void* QTimeZone_NewQTimeZone();
void* QTimeZone_NewQTimeZone2(void* ianaId);
void* QTimeZone_NewQTimeZone4(void* ianaId, int offsetSeconds, char* name, char* abbreviation, int country, char* comment);
void* QTimeZone_NewQTimeZone5(void* other);
void* QTimeZone_NewQTimeZone3(int offsetSeconds);
char* QTimeZone_Abbreviation(void* ptr, void* atDateTime);
char* QTimeZone_Comment(void* ptr);
int QTimeZone_Country(void* ptr);
int QTimeZone_DaylightTimeOffset(void* ptr, void* atDateTime);
char* QTimeZone_DisplayName2(void* ptr, int timeType, int nameType, void* locale);
char* QTimeZone_DisplayName(void* ptr, void* atDateTime, int nameType, void* locale);
int QTimeZone_HasDaylightTime(void* ptr);
int QTimeZone_HasTransitions(void* ptr);
void* QTimeZone_QTimeZone_IanaIdToWindowsId(void* ianaId);
void* QTimeZone_Id(void* ptr);
int QTimeZone_IsDaylightTime(void* ptr, void* atDateTime);
int QTimeZone_QTimeZone_IsTimeZoneIdAvailable(void* ianaId);
int QTimeZone_IsValid(void* ptr);
int QTimeZone_OffsetFromUtc(void* ptr, void* atDateTime);
int QTimeZone_StandardTimeOffset(void* ptr, void* atDateTime);
void QTimeZone_Swap(void* ptr, void* other);
void* QTimeZone_QTimeZone_SystemTimeZone();
void* QTimeZone_QTimeZone_SystemTimeZoneId();
void* QTimeZone_QTimeZone_Utc();
void* QTimeZone_QTimeZone_WindowsIdToDefaultIanaId(void* windowsId);
void* QTimeZone_QTimeZone_WindowsIdToDefaultIanaId2(void* windowsId, int country);
void QTimeZone_DestroyQTimeZone(void* ptr);
int QTimer_RemainingTime(void* ptr);
void QTimer_SetInterval(void* ptr, int msec);
void* QTimer_NewQTimer(void* parent);
int QTimer_Interval(void* ptr);
int QTimer_IsActive(void* ptr);
int QTimer_IsSingleShot(void* ptr);
void QTimer_SetSingleShot(void* ptr, int singleShot);
void QTimer_SetTimerType(void* ptr, int atype);
void QTimer_QTimer_SingleShot2(int msec, int timerType, void* receiver, char* member);
void QTimer_QTimer_SingleShot(int msec, void* receiver, char* member);
void QTimer_Start2(void* ptr);
void QTimer_Start(void* ptr, int msec);
void QTimer_Stop(void* ptr);
void QTimer_ConnectTimeout(void* ptr);
void QTimer_DisconnectTimeout(void* ptr);
void QTimer_TimerEvent(void* ptr, void* e);
void QTimer_TimerEventDefault(void* ptr, void* e);
int QTimer_TimerId(void* ptr);
int QTimer_TimerType(void* ptr);
void QTimer_DestroyQTimer(void* ptr);
void QTimer_ChildEvent(void* ptr, void* event);
void QTimer_ChildEventDefault(void* ptr, void* event);
void QTimer_CustomEvent(void* ptr, void* event);
void QTimer_CustomEventDefault(void* ptr, void* event);
void* QTimerEvent_NewQTimerEvent(int timerId);
int QTimerEvent_TimerId(void* ptr);
void* QTranslator_NewQTranslator(void* parent);
int QTranslator_IsEmpty(void* ptr);
int QTranslator_IsEmptyDefault(void* ptr);
int QTranslator_Load2(void* ptr, void* locale, char* filename, char* prefix, char* directory, char* suffix);
int QTranslator_Load(void* ptr, char* filename, char* directory, char* search_delimiters, char* suffix);
char* QTranslator_Translate(void* ptr, char* context, char* sourceText, char* disambiguation, int n);
char* QTranslator_TranslateDefault(void* ptr, char* context, char* sourceText, char* disambiguation, int n);
void QTranslator_DestroyQTranslator(void* ptr);
void QTranslator_TimerEvent(void* ptr, void* event);
void QTranslator_TimerEventDefault(void* ptr, void* event);
void QTranslator_ChildEvent(void* ptr, void* event);
void QTranslator_ChildEventDefault(void* ptr, void* event);
void QTranslator_CustomEvent(void* ptr, void* event);
void QTranslator_CustomEventDefault(void* ptr, void* event);
void* QUrl_QUrl_FromEncoded(void* input, int parsingMode);
void* QUrl_NewQUrl();
void* QUrl_NewQUrl4(void* other);
void* QUrl_NewQUrl3(char* url, int parsingMode);
void* QUrl_NewQUrl2(void* other);
void* QUrl_Adjusted(void* ptr, int options);
char* QUrl_Authority(void* ptr, int options);
void QUrl_Clear(void* ptr);
char* QUrl_ErrorString(void* ptr);
char* QUrl_FileName(void* ptr, int options);
char* QUrl_Fragment(void* ptr, int options);
char* QUrl_QUrl_FromAce(void* domain);
void* QUrl_QUrl_FromLocalFile(char* localFile);
char* QUrl_QUrl_FromPercentEncoding(void* input);
void* QUrl_QUrl_FromUserInput(char* userInput);
void* QUrl_QUrl_FromUserInput2(char* userInput, char* workingDirectory, int options);
int QUrl_HasFragment(void* ptr);
int QUrl_HasQuery(void* ptr);
char* QUrl_Host(void* ptr, int options);
char* QUrl_QUrl_IdnWhitelist();
int QUrl_IsEmpty(void* ptr);
int QUrl_IsLocalFile(void* ptr);
int QUrl_IsParentOf(void* ptr, void* childUrl);
int QUrl_IsRelative(void* ptr);
int QUrl_IsValid(void* ptr);
int QUrl_Matches(void* ptr, void* url, int options);
char* QUrl_Password(void* ptr, int options);
char* QUrl_Path(void* ptr, int options);
int QUrl_Port(void* ptr, int defaultPort);
char* QUrl_Query(void* ptr, int options);
void* QUrl_Resolved(void* ptr, void* relative);
char* QUrl_Scheme(void* ptr);
void QUrl_SetAuthority(void* ptr, char* authority, int mode);
void QUrl_SetFragment(void* ptr, char* fragment, int mode);
void QUrl_SetHost(void* ptr, char* host, int mode);
void QUrl_QUrl_SetIdnWhitelist(char* list);
void QUrl_SetPassword(void* ptr, char* password, int mode);
void QUrl_SetPath(void* ptr, char* path, int mode);
void QUrl_SetPort(void* ptr, int port);
void QUrl_SetQuery(void* ptr, char* query, int mode);
void QUrl_SetQuery2(void* ptr, void* query);
void QUrl_SetScheme(void* ptr, char* scheme);
void QUrl_SetUrl(void* ptr, char* url, int parsingMode);
void QUrl_SetUserInfo(void* ptr, char* userInfo, int mode);
void QUrl_SetUserName(void* ptr, char* userName, int mode);
void QUrl_Swap(void* ptr, void* other);
void* QUrl_QUrl_ToAce(char* domain);
char* QUrl_ToDisplayString(void* ptr, int options);
void* QUrl_ToEncoded(void* ptr, int options);
char* QUrl_ToLocalFile(void* ptr);
void* QUrl_QUrl_ToPercentEncoding(char* input, void* exclude, void* include);
char* QUrl_ToString(void* ptr, int options);
char* QUrl_TopLevelDomain(void* ptr, int options);
char* QUrl_Url(void* ptr, int options);
char* QUrl_UserInfo(void* ptr, int options);
char* QUrl_UserName(void* ptr, int options);
void QUrl_DestroyQUrl(void* ptr);
void* QUrlQuery_NewQUrlQuery();
void* QUrlQuery_NewQUrlQuery3(char* queryString);
void* QUrlQuery_NewQUrlQuery2(void* url);
void* QUrlQuery_NewQUrlQuery4(void* other);
void QUrlQuery_AddQueryItem(void* ptr, char* key, char* value);
char* QUrlQuery_AllQueryItemValues(void* ptr, char* key, int encoding);
void QUrlQuery_Clear(void* ptr);
int QUrlQuery_IsEmpty(void* ptr);
char* QUrlQuery_Query(void* ptr, int encoding);
void QUrlQuery_RemoveAllQueryItems(void* ptr, char* key);
void QUrlQuery_RemoveQueryItem(void* ptr, char* key);
void QUrlQuery_SetQuery(void* ptr, char* queryString);
void QUrlQuery_SetQueryDelimiters(void* ptr, void* valueDelimiter, void* pairDelimiter);
void QUrlQuery_Swap(void* ptr, void* other);
char* QUrlQuery_ToString(void* ptr, int encoding);
void QUrlQuery_DestroyQUrlQuery(void* ptr);
int QUuid_Variant(void* ptr);
int QUuid_Version(void* ptr);
void* QUuid_NewQUuid();
void* QUuid_NewQUuid5(void* text);
void* QUuid_NewQUuid3(char* text);
int QUuid_IsNull(void* ptr);
void* QUuid_ToByteArray(void* ptr);
void* QUuid_ToRfc4122(void* ptr);
char* QUuid_ToString(void* ptr);
void* QVariant_NewQVariant20(void* c);
void* QVariant_NewQVariant18(void* val);
void* QVariant_NewQVariant11(int val);
void* QVariant_NewQVariant16(void* val);
void* QVariant_NewQVariant15(void* val);
void* QVariant_NewQVariant21(void* val);
void* QVariant_NewQVariant23(void* val);
void* QVariant_NewQVariant39(void* val);
void* QVariant_NewQVariant45(void* val);
void* QVariant_NewQVariant46(void* val);
void* QVariant_NewQVariant44(void* val);
void* QVariant_NewQVariant43(void* val);
void* QVariant_NewQVariant31(void* val);
void* QVariant_NewQVariant32(void* val);
void* QVariant_NewQVariant35(void* l);
void* QVariant_NewQVariant41(void* val);
void* QVariant_NewQVariant42(void* val);
void* QVariant_NewQVariant29(void* val);
void* QVariant_NewQVariant30(void* val);
void* QVariant_NewQVariant33(void* val);
void* QVariant_NewQVariant34(void* val);
void* QVariant_NewQVariant36(void* regExp);
void* QVariant_NewQVariant37(void* re);
void* QVariant_NewQVariant27(void* val);
void* QVariant_NewQVariant28(void* val);
void* QVariant_NewQVariant17(char* val);
void* QVariant_NewQVariant19(char* val);
void* QVariant_NewQVariant22(void* val);
void* QVariant_NewQVariant38(void* val);
void* QVariant_NewQVariant40(void* val);
void* QVariant_NewQVariant5(void* p);
void* QVariant_NewQVariant14(char* val);
void* QVariant_NewQVariant3(int typeId, void* copy);
void* QVariant_NewQVariant7(int val);
void* QVariant_ToByteArray(void* ptr);
void* QVariant_ToDateTime(void* ptr);
void* QVariant_ToEasingCurve(void* ptr);
void* QVariant_ToPoint(void* ptr);
void* QVariant_ToRect(void* ptr);
void* QVariant_ToRegExp(void* ptr);
void* QVariant_ToRegularExpression(void* ptr);
void* QVariant_ToSize(void* ptr);
char* QVariant_ToStringList(void* ptr);
void* QVariant_ToUrl(void* ptr);
void QVariant_DestroyQVariant(void* ptr);
void* QVariant_NewQVariant();
void* QVariant_NewQVariant6(void* s);
void* QVariant_NewQVariant47(void* other);
void QVariant_Clear(void* ptr);
int QVariant_Convert(void* ptr, int targetTypeId);
int QVariant_IsNull(void* ptr);
int QVariant_IsValid(void* ptr);
void QVariant_Swap(void* ptr, void* other);
int QVariant_ToBool(void* ptr);
int QVariant_ToInt(void* ptr, int ok);
void* QVariant_ToJsonArray(void* ptr);
void* QVariant_ToJsonDocument(void* ptr);
void* QVariant_ToJsonObject(void* ptr);
void* QVariant_ToModelIndex(void* ptr);
double QVariant_ToReal(void* ptr, int ok);
char* QVariant_ToString(void* ptr);
int QVariant_UserType(void* ptr);
void* QVariantAnimation_CurrentValue(void* ptr);
int QVariantAnimation_Duration(void* ptr);
int QVariantAnimation_DurationDefault(void* ptr);
void* QVariantAnimation_EasingCurve(void* ptr);
void* QVariantAnimation_EndValue(void* ptr);
void QVariantAnimation_SetDuration(void* ptr, int msecs);
void QVariantAnimation_SetEasingCurve(void* ptr, void* easing);
void QVariantAnimation_SetEndValue(void* ptr, void* value);
void QVariantAnimation_SetStartValue(void* ptr, void* value);
void* QVariantAnimation_StartValue(void* ptr);
void* QVariantAnimation_NewQVariantAnimation(void* parent);
void* QVariantAnimation_KeyValueAt(void* ptr, double step);
int QVariantAnimation_Event(void* ptr, void* event);
int QVariantAnimation_EventDefault(void* ptr, void* event);
void* QVariantAnimation_Interpolated(void* ptr, void* from, void* to, double progress);
void* QVariantAnimation_InterpolatedDefault(void* ptr, void* from, void* to, double progress);
void QVariantAnimation_SetKeyValueAt(void* ptr, double step, void* value);
void QVariantAnimation_UpdateCurrentTime(void* ptr, int v);
void QVariantAnimation_UpdateCurrentTimeDefault(void* ptr, int v);
void QVariantAnimation_UpdateCurrentValue(void* ptr, void* value);
void QVariantAnimation_UpdateCurrentValueDefault(void* ptr, void* value);
void QVariantAnimation_UpdateState(void* ptr, int newState, int oldState);
void QVariantAnimation_UpdateStateDefault(void* ptr, int newState, int oldState);
void QVariantAnimation_ConnectValueChanged(void* ptr);
void QVariantAnimation_DisconnectValueChanged(void* ptr);
void QVariantAnimation_ValueChanged(void* ptr, void* value);
void QVariantAnimation_DestroyQVariantAnimation(void* ptr);
void QVariantAnimation_UpdateDirection(void* ptr, int direction);
void QVariantAnimation_UpdateDirectionDefault(void* ptr, int direction);
void QVariantAnimation_TimerEvent(void* ptr, void* event);
void QVariantAnimation_TimerEventDefault(void* ptr, void* event);
void QVariantAnimation_ChildEvent(void* ptr, void* event);
void QVariantAnimation_ChildEventDefault(void* ptr, void* event);
void QVariantAnimation_CustomEvent(void* ptr, void* event);
void QVariantAnimation_CustomEventDefault(void* ptr, void* event);
void* QWaitCondition_NewQWaitCondition();
void QWaitCondition_WakeAll(void* ptr);
void QWaitCondition_WakeOne(void* ptr);
void QWaitCondition_DestroyQWaitCondition(void* ptr);
void QWinEventNotifier_TimerEvent(void* ptr, void* event);
void QWinEventNotifier_TimerEventDefault(void* ptr, void* event);
void QWinEventNotifier_ChildEvent(void* ptr, void* event);
void QWinEventNotifier_ChildEventDefault(void* ptr, void* event);
void QWinEventNotifier_CustomEvent(void* ptr, void* event);
void QWinEventNotifier_CustomEventDefault(void* ptr, void* event);
void* QWriteLocker_NewQWriteLocker(void* lock);
void* QWriteLocker_ReadWriteLock(void* ptr);
void QWriteLocker_Relock(void* ptr);
void QWriteLocker_Unlock(void* ptr);
void QWriteLocker_DestroyQWriteLocker(void* ptr);
void* QXmlStreamAttribute_NewQXmlStreamAttribute();
void* QXmlStreamAttribute_NewQXmlStreamAttribute3(char* namespaceUri, char* name, char* value);
void* QXmlStreamAttribute_NewQXmlStreamAttribute2(char* qualifiedName, char* value);
void* QXmlStreamAttribute_NewQXmlStreamAttribute4(void* other);
int QXmlStreamAttribute_IsDefault(void* ptr);
void* QXmlStreamAttribute_Name(void* ptr);
void* QXmlStreamAttribute_NamespaceUri(void* ptr);
void* QXmlStreamAttribute_Prefix(void* ptr);
void* QXmlStreamAttribute_QualifiedName(void* ptr);
void* QXmlStreamAttribute_Value(void* ptr);
void QXmlStreamAttribute_DestroyQXmlStreamAttribute(void* ptr);
void* QXmlStreamAttributes_NewQXmlStreamAttributes();
void QXmlStreamAttributes_Append(void* ptr, char* namespaceUri, char* name, char* value);
void QXmlStreamAttributes_Append2(void* ptr, char* qualifiedName, char* value);
int QXmlStreamAttributes_HasAttribute2(void* ptr, void* qualifiedName);
int QXmlStreamAttributes_HasAttribute3(void* ptr, char* namespaceUri, char* name);
int QXmlStreamAttributes_HasAttribute(void* ptr, char* qualifiedName);
void* QXmlStreamAttributes_Value3(void* ptr, void* namespaceUri, void* name);
void* QXmlStreamAttributes_Value5(void* ptr, void* qualifiedName);
void* QXmlStreamAttributes_Value2(void* ptr, char* namespaceUri, void* name);
void* QXmlStreamAttributes_Value(void* ptr, char* namespaceUri, char* name);
void* QXmlStreamAttributes_Value4(void* ptr, char* qualifiedName);
void* QXmlStreamEntityDeclaration_NewQXmlStreamEntityDeclaration();
void* QXmlStreamEntityDeclaration_NewQXmlStreamEntityDeclaration2(void* other);
void* QXmlStreamEntityDeclaration_Name(void* ptr);
void* QXmlStreamEntityDeclaration_NotationName(void* ptr);
void* QXmlStreamEntityDeclaration_PublicId(void* ptr);
void* QXmlStreamEntityDeclaration_SystemId(void* ptr);
void* QXmlStreamEntityDeclaration_Value(void* ptr);
void QXmlStreamEntityDeclaration_DestroyQXmlStreamEntityDeclaration(void* ptr);
char* QXmlStreamEntityResolver_ResolveUndeclaredEntity(void* ptr, char* name);
char* QXmlStreamEntityResolver_ResolveUndeclaredEntityDefault(void* ptr, char* name);
void QXmlStreamEntityResolver_DestroyQXmlStreamEntityResolver(void* ptr);
char* QXmlStreamEntityResolver_ObjectNameAbs(void* ptr);
void QXmlStreamEntityResolver_SetObjectNameAbs(void* ptr, char* name);
void* QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration();
void* QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration3(char* prefix, char* namespaceUri);
void* QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration2(void* other);
void* QXmlStreamNamespaceDeclaration_NamespaceUri(void* ptr);
void* QXmlStreamNamespaceDeclaration_Prefix(void* ptr);
void QXmlStreamNamespaceDeclaration_DestroyQXmlStreamNamespaceDeclaration(void* ptr);
void* QXmlStreamNotationDeclaration_NewQXmlStreamNotationDeclaration();
void* QXmlStreamNotationDeclaration_NewQXmlStreamNotationDeclaration2(void* other);
void* QXmlStreamNotationDeclaration_Name(void* ptr);
void* QXmlStreamNotationDeclaration_PublicId(void* ptr);
void* QXmlStreamNotationDeclaration_SystemId(void* ptr);
void QXmlStreamNotationDeclaration_DestroyQXmlStreamNotationDeclaration(void* ptr);
int QXmlStreamReader_NamespaceProcessing(void* ptr);
void QXmlStreamReader_SetNamespaceProcessing(void* ptr, int v);
void* QXmlStreamReader_NewQXmlStreamReader();
void* QXmlStreamReader_NewQXmlStreamReader2(void* device);
void* QXmlStreamReader_NewQXmlStreamReader3(void* data);
void* QXmlStreamReader_NewQXmlStreamReader4(char* data);
void* QXmlStreamReader_NewQXmlStreamReader5(char* data);
void QXmlStreamReader_AddData(void* ptr, void* data);
void QXmlStreamReader_AddData2(void* ptr, char* data);
void QXmlStreamReader_AddData3(void* ptr, char* data);
void QXmlStreamReader_AddExtraNamespaceDeclaration(void* ptr, void* extraNamespaceDeclaration);
int QXmlStreamReader_AtEnd(void* ptr);
long long QXmlStreamReader_CharacterOffset(void* ptr);
void QXmlStreamReader_Clear(void* ptr);
long long QXmlStreamReader_ColumnNumber(void* ptr);
void* QXmlStreamReader_Device(void* ptr);
void* QXmlStreamReader_DocumentEncoding(void* ptr);
void* QXmlStreamReader_DocumentVersion(void* ptr);
void* QXmlStreamReader_DtdName(void* ptr);
void* QXmlStreamReader_DtdPublicId(void* ptr);
void* QXmlStreamReader_DtdSystemId(void* ptr);
void* QXmlStreamReader_EntityResolver(void* ptr);
int QXmlStreamReader_Error(void* ptr);
char* QXmlStreamReader_ErrorString(void* ptr);
int QXmlStreamReader_HasError(void* ptr);
int QXmlStreamReader_IsCDATA(void* ptr);
int QXmlStreamReader_IsCharacters(void* ptr);
int QXmlStreamReader_IsComment(void* ptr);
int QXmlStreamReader_IsDTD(void* ptr);
int QXmlStreamReader_IsEndDocument(void* ptr);
int QXmlStreamReader_IsEndElement(void* ptr);
int QXmlStreamReader_IsEntityReference(void* ptr);
int QXmlStreamReader_IsProcessingInstruction(void* ptr);
int QXmlStreamReader_IsStandaloneDocument(void* ptr);
int QXmlStreamReader_IsStartDocument(void* ptr);
int QXmlStreamReader_IsStartElement(void* ptr);
int QXmlStreamReader_IsWhitespace(void* ptr);
long long QXmlStreamReader_LineNumber(void* ptr);
void* QXmlStreamReader_Name(void* ptr);
void* QXmlStreamReader_NamespaceUri(void* ptr);
void* QXmlStreamReader_Prefix(void* ptr);
void* QXmlStreamReader_ProcessingInstructionData(void* ptr);
void* QXmlStreamReader_ProcessingInstructionTarget(void* ptr);
void* QXmlStreamReader_QualifiedName(void* ptr);
void QXmlStreamReader_RaiseError(void* ptr, char* message);
char* QXmlStreamReader_ReadElementText(void* ptr, int behaviour);
int QXmlStreamReader_ReadNext(void* ptr);
int QXmlStreamReader_ReadNextStartElement(void* ptr);
void QXmlStreamReader_SetDevice(void* ptr, void* device);
void QXmlStreamReader_SetEntityResolver(void* ptr, void* resolver);
void QXmlStreamReader_SkipCurrentElement(void* ptr);
void* QXmlStreamReader_Text(void* ptr);
char* QXmlStreamReader_TokenString(void* ptr);
int QXmlStreamReader_TokenType(void* ptr);
void QXmlStreamReader_DestroyQXmlStreamReader(void* ptr);
int QXmlStreamWriter_AutoFormattingIndent(void* ptr);
void QXmlStreamWriter_SetAutoFormattingIndent(void* ptr, int spacesOrTabs);
int QXmlStreamWriter_AutoFormatting(void* ptr);
void* QXmlStreamWriter_Codec(void* ptr);
void* QXmlStreamWriter_Device(void* ptr);
int QXmlStreamWriter_HasError(void* ptr);
void QXmlStreamWriter_SetAutoFormatting(void* ptr, int enable);
void QXmlStreamWriter_SetCodec(void* ptr, void* codec);
void QXmlStreamWriter_SetCodec2(void* ptr, char* codecName);
void QXmlStreamWriter_SetDevice(void* ptr, void* device);
void QXmlStreamWriter_WriteAttribute(void* ptr, char* namespaceUri, char* name, char* value);
void QXmlStreamWriter_WriteAttribute2(void* ptr, char* qualifiedName, char* value);
void QXmlStreamWriter_WriteAttribute3(void* ptr, void* attribute);
void QXmlStreamWriter_WriteAttributes(void* ptr, void* attributes);
void QXmlStreamWriter_WriteCDATA(void* ptr, char* text);
void QXmlStreamWriter_WriteCharacters(void* ptr, char* text);
void QXmlStreamWriter_WriteComment(void* ptr, char* text);
void QXmlStreamWriter_WriteCurrentToken(void* ptr, void* reader);
void QXmlStreamWriter_WriteDTD(void* ptr, char* dtd);
void QXmlStreamWriter_WriteDefaultNamespace(void* ptr, char* namespaceUri);
void QXmlStreamWriter_WriteEmptyElement(void* ptr, char* namespaceUri, char* name);
void QXmlStreamWriter_WriteEmptyElement2(void* ptr, char* qualifiedName);
void QXmlStreamWriter_WriteEndDocument(void* ptr);
void QXmlStreamWriter_WriteEndElement(void* ptr);
void QXmlStreamWriter_WriteEntityReference(void* ptr, char* name);
void QXmlStreamWriter_WriteNamespace(void* ptr, char* namespaceUri, char* prefix);
void QXmlStreamWriter_WriteProcessingInstruction(void* ptr, char* target, char* data);
void QXmlStreamWriter_WriteStartDocument3(void* ptr);
void QXmlStreamWriter_WriteStartDocument(void* ptr, char* version);
void QXmlStreamWriter_WriteStartDocument2(void* ptr, char* version, int standalone);
void QXmlStreamWriter_WriteStartElement(void* ptr, char* namespaceUri, char* name);
void QXmlStreamWriter_WriteStartElement2(void* ptr, char* qualifiedName);
void QXmlStreamWriter_WriteTextElement(void* ptr, char* namespaceUri, char* name, char* text);
void QXmlStreamWriter_WriteTextElement2(void* ptr, char* qualifiedName, char* text);
void QXmlStreamWriter_DestroyQXmlStreamWriter(void* ptr);
int Qt_LocaleDate_Type();
int Qt_SystemLocaleShortDate_Type();
int Qt_SystemLocaleLongDate_Type();
int Qt_DefaultLocaleShortDate_Type();
int Qt_DefaultLocaleLongDate_Type();
int Qt_RFC2822Date_Type();
int Qt_LastGestureType_Type();

#ifdef __cplusplus
}
#endif

#endif