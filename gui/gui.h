#pragma once

#ifndef GO_QTGUI_H
#define GO_QTGUI_H

#ifdef __cplusplus
extern "C" {
#endif

char* QAbstractTextDocumentLayout_AnchorAt(void* ptr, void* position);
void* QAbstractTextDocumentLayout_Document(void* ptr);
void* QAbstractTextDocumentLayout_HandlerForObject(void* ptr, int objectType);
int QAbstractTextDocumentLayout_PageCount(void* ptr);
void QAbstractTextDocumentLayout_ConnectPageCountChanged(void* ptr);
void QAbstractTextDocumentLayout_DisconnectPageCountChanged(void* ptr);
void QAbstractTextDocumentLayout_PageCountChanged(void* ptr, int newPages);
void* QAbstractTextDocumentLayout_PaintDevice(void* ptr);
void QAbstractTextDocumentLayout_RegisterHandler(void* ptr, int objectType, void* component);
void QAbstractTextDocumentLayout_SetPaintDevice(void* ptr, void* device);
void QAbstractTextDocumentLayout_UnregisterHandler(void* ptr, int objectType, void* component);
void QAbstractTextDocumentLayout_TimerEvent(void* ptr, void* event);
void QAbstractTextDocumentLayout_TimerEventDefault(void* ptr, void* event);
void QAbstractTextDocumentLayout_ChildEvent(void* ptr, void* event);
void QAbstractTextDocumentLayout_ChildEventDefault(void* ptr, void* event);
void QAbstractTextDocumentLayout_CustomEvent(void* ptr, void* event);
void QAbstractTextDocumentLayout_CustomEventDefault(void* ptr, void* event);
int QAccessible_InvalidEvent_Type();
int QAccessible_QAccessible_IsActive();
void* QAccessible_QAccessible_QueryAccessibleInterface(void* object);
void QAccessible_QAccessible_SetRootObject(void* object);
void QAccessible_QAccessible_UpdateAccessibility(void* event);
char* QAccessibleActionInterface_LocalizedActionDescription(void* ptr, char* actionName);
char* QAccessibleActionInterface_LocalizedActionDescriptionDefault(void* ptr, char* actionName);
char* QAccessibleActionInterface_LocalizedActionName(void* ptr, char* actionName);
char* QAccessibleActionInterface_LocalizedActionNameDefault(void* ptr, char* actionName);
char* QAccessibleActionInterface_ActionNames(void* ptr);
char* QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction();
void QAccessibleActionInterface_DoAction(void* ptr, char* actionName);
char* QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction();
char* QAccessibleActionInterface_KeyBindingsForAction(void* ptr, char* actionName);
char* QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction();
char* QAccessibleActionInterface_QAccessibleActionInterface_PressAction();
char* QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction();
char* QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction();
char* QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction();
char* QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction();
char* QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction();
char* QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction();
char* QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction();
char* QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction();
void QAccessibleActionInterface_DestroyQAccessibleActionInterface(void* ptr);
char* QAccessibleActionInterface_ObjectNameAbs(void* ptr);
void QAccessibleActionInterface_SetObjectNameAbs(void* ptr, char* name);
void QAccessibleEditableTextInterface_DeleteText(void* ptr, int startOffset, int endOffset);
void QAccessibleEditableTextInterface_InsertText(void* ptr, int offset, char* text);
void QAccessibleEditableTextInterface_ReplaceText(void* ptr, int startOffset, int endOffset, char* text);
void QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(void* ptr);
char* QAccessibleEditableTextInterface_ObjectNameAbs(void* ptr);
void QAccessibleEditableTextInterface_SetObjectNameAbs(void* ptr, char* name);
void* QAccessibleEvent_NewQAccessibleEvent2(void* interfa, int ty);
void* QAccessibleEvent_NewQAccessibleEvent(void* object, int ty);
void* QAccessibleEvent_AccessibleInterface(void* ptr);
void* QAccessibleEvent_AccessibleInterfaceDefault(void* ptr);
int QAccessibleEvent_Child(void* ptr);
void* QAccessibleEvent_Object(void* ptr);
void QAccessibleEvent_SetChild(void* ptr, int child);
int QAccessibleEvent_Type(void* ptr);
void QAccessibleEvent_DestroyQAccessibleEvent(void* ptr);
char* QAccessibleEvent_ObjectNameAbs(void* ptr);
void QAccessibleEvent_SetObjectNameAbs(void* ptr, char* name);
void QAccessibleInterface_DestroyQAccessibleInterface(void* ptr);
void* QAccessibleInterface_ActionInterface(void* ptr);
void* QAccessibleInterface_BackgroundColor(void* ptr);
void* QAccessibleInterface_BackgroundColorDefault(void* ptr);
void* QAccessibleInterface_Child(void* ptr, int index);
void* QAccessibleInterface_ChildAt(void* ptr, int x, int y);
int QAccessibleInterface_ChildCount(void* ptr);
void* QAccessibleInterface_FocusChild(void* ptr);
void* QAccessibleInterface_FocusChildDefault(void* ptr);
void* QAccessibleInterface_ForegroundColor(void* ptr);
void* QAccessibleInterface_ForegroundColorDefault(void* ptr);
int QAccessibleInterface_IndexOfChild(void* ptr, void* child);
void* QAccessibleInterface_Interface_cast(void* ptr, int ty);
void* QAccessibleInterface_Interface_castDefault(void* ptr, int ty);
int QAccessibleInterface_IsValid(void* ptr);
void* QAccessibleInterface_Object(void* ptr);
void* QAccessibleInterface_Parent(void* ptr);
void* QAccessibleInterface_Rect(void* ptr);
int QAccessibleInterface_Role(void* ptr);
void QAccessibleInterface_SetText(void* ptr, int t, char* text);
void* QAccessibleInterface_TableCellInterface(void* ptr);
void* QAccessibleInterface_TableInterface(void* ptr);
char* QAccessibleInterface_Text(void* ptr, int t);
void* QAccessibleInterface_TextInterface(void* ptr);
void* QAccessibleInterface_ValueInterface(void* ptr);
void* QAccessibleInterface_Window(void* ptr);
void* QAccessibleInterface_WindowDefault(void* ptr);
char* QAccessibleInterface_ObjectNameAbs(void* ptr);
void QAccessibleInterface_SetObjectNameAbs(void* ptr, char* name);
void* QAccessibleObject_ChildAt(void* ptr, int x, int y);
void* QAccessibleObject_ChildAtDefault(void* ptr, int x, int y);
int QAccessibleObject_IsValid(void* ptr);
int QAccessibleObject_IsValidDefault(void* ptr);
void* QAccessibleObject_Object(void* ptr);
void* QAccessibleObject_ObjectDefault(void* ptr);
void* QAccessibleObject_Rect(void* ptr);
void* QAccessibleObject_RectDefault(void* ptr);
void QAccessibleObject_SetText(void* ptr, int t, char* text);
void QAccessibleObject_SetTextDefault(void* ptr, int t, char* text);
void QAccessibleObject_DestroyQAccessibleObject(void* ptr);
char* QAccessibleObject_ObjectNameAbs(void* ptr);
void QAccessibleObject_SetObjectNameAbs(void* ptr, char* name);
void QAccessiblePlugin_TimerEvent(void* ptr, void* event);
void QAccessiblePlugin_TimerEventDefault(void* ptr, void* event);
void QAccessiblePlugin_ChildEvent(void* ptr, void* event);
void QAccessiblePlugin_ChildEventDefault(void* ptr, void* event);
void QAccessiblePlugin_CustomEvent(void* ptr, void* event);
void QAccessiblePlugin_CustomEventDefault(void* ptr, void* event);
int QAccessibleTableCellInterface_ColumnExtent(void* ptr);
int QAccessibleTableCellInterface_ColumnIndex(void* ptr);
int QAccessibleTableCellInterface_IsSelected(void* ptr);
int QAccessibleTableCellInterface_RowExtent(void* ptr);
int QAccessibleTableCellInterface_RowIndex(void* ptr);
void* QAccessibleTableCellInterface_Table(void* ptr);
void QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(void* ptr);
char* QAccessibleTableCellInterface_ObjectNameAbs(void* ptr);
void QAccessibleTableCellInterface_SetObjectNameAbs(void* ptr, char* name);
void* QAccessibleTableInterface_Caption(void* ptr);
void* QAccessibleTableInterface_CellAt(void* ptr, int row, int column);
int QAccessibleTableInterface_ColumnCount(void* ptr);
char* QAccessibleTableInterface_ColumnDescription(void* ptr, int column);
int QAccessibleTableInterface_IsColumnSelected(void* ptr, int column);
int QAccessibleTableInterface_IsRowSelected(void* ptr, int row);
void QAccessibleTableInterface_ModelChange(void* ptr, void* event);
int QAccessibleTableInterface_RowCount(void* ptr);
char* QAccessibleTableInterface_RowDescription(void* ptr, int row);
int QAccessibleTableInterface_SelectColumn(void* ptr, int column);
int QAccessibleTableInterface_SelectRow(void* ptr, int row);
int QAccessibleTableInterface_SelectedCellCount(void* ptr);
int QAccessibleTableInterface_SelectedColumnCount(void* ptr);
int QAccessibleTableInterface_SelectedRowCount(void* ptr);
void* QAccessibleTableInterface_Summary(void* ptr);
int QAccessibleTableInterface_UnselectColumn(void* ptr, int column);
int QAccessibleTableInterface_UnselectRow(void* ptr, int row);
void QAccessibleTableInterface_DestroyQAccessibleTableInterface(void* ptr);
char* QAccessibleTableInterface_ObjectNameAbs(void* ptr);
void QAccessibleTableInterface_SetObjectNameAbs(void* ptr, char* name);
void* QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent2(void* iface, int changeType);
void* QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent(void* object, int changeType);
int QAccessibleTableModelChangeEvent_FirstColumn(void* ptr);
int QAccessibleTableModelChangeEvent_FirstRow(void* ptr);
int QAccessibleTableModelChangeEvent_LastColumn(void* ptr);
int QAccessibleTableModelChangeEvent_LastRow(void* ptr);
int QAccessibleTableModelChangeEvent_ModelChangeType(void* ptr);
void QAccessibleTableModelChangeEvent_SetFirstColumn(void* ptr, int column);
void QAccessibleTableModelChangeEvent_SetFirstRow(void* ptr, int row);
void QAccessibleTableModelChangeEvent_SetLastColumn(void* ptr, int column);
void QAccessibleTableModelChangeEvent_SetLastRow(void* ptr, int row);
void QAccessibleTableModelChangeEvent_SetModelChangeType(void* ptr, int changeType);
void* QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent2(void* iface, int cursorPos);
void* QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent(void* object, int cursorPos);
int QAccessibleTextCursorEvent_CursorPosition(void* ptr);
void QAccessibleTextCursorEvent_SetCursorPosition(void* ptr, int position);
void* QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent2(void* iface, int position, char* text);
void* QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent(void* object, int position, char* text);
int QAccessibleTextInsertEvent_ChangePosition(void* ptr);
char* QAccessibleTextInsertEvent_TextInserted(void* ptr);
void QAccessibleTextInterface_AddSelection(void* ptr, int startOffset, int endOffset);
char* QAccessibleTextInterface_Attributes(void* ptr, int offset, int startOffset, int endOffset);
int QAccessibleTextInterface_CharacterCount(void* ptr);
void* QAccessibleTextInterface_CharacterRect(void* ptr, int offset);
int QAccessibleTextInterface_CursorPosition(void* ptr);
int QAccessibleTextInterface_OffsetAtPoint(void* ptr, void* point);
void QAccessibleTextInterface_RemoveSelection(void* ptr, int selectionIndex);
void QAccessibleTextInterface_ScrollToSubstring(void* ptr, int startIndex, int endIndex);
void QAccessibleTextInterface_Selection(void* ptr, int selectionIndex, int startOffset, int endOffset);
int QAccessibleTextInterface_SelectionCount(void* ptr);
void QAccessibleTextInterface_SetCursorPosition(void* ptr, int position);
void QAccessibleTextInterface_SetSelection(void* ptr, int selectionIndex, int startOffset, int endOffset);
char* QAccessibleTextInterface_Text(void* ptr, int startOffset, int endOffset);
char* QAccessibleTextInterface_TextAfterOffset(void* ptr, int offset, int boundaryType, int startOffset, int endOffset);
char* QAccessibleTextInterface_TextAfterOffsetDefault(void* ptr, int offset, int boundaryType, int startOffset, int endOffset);
char* QAccessibleTextInterface_TextAtOffset(void* ptr, int offset, int boundaryType, int startOffset, int endOffset);
char* QAccessibleTextInterface_TextAtOffsetDefault(void* ptr, int offset, int boundaryType, int startOffset, int endOffset);
char* QAccessibleTextInterface_TextBeforeOffset(void* ptr, int offset, int boundaryType, int startOffset, int endOffset);
char* QAccessibleTextInterface_TextBeforeOffsetDefault(void* ptr, int offset, int boundaryType, int startOffset, int endOffset);
void QAccessibleTextInterface_DestroyQAccessibleTextInterface(void* ptr);
char* QAccessibleTextInterface_ObjectNameAbs(void* ptr);
void QAccessibleTextInterface_SetObjectNameAbs(void* ptr, char* name);
void* QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent2(void* iface, int position, char* text);
void* QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent(void* object, int position, char* text);
int QAccessibleTextRemoveEvent_ChangePosition(void* ptr);
char* QAccessibleTextRemoveEvent_TextRemoved(void* ptr);
void* QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent2(void* iface, int start, int end);
void* QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent(void* object, int start, int end);
int QAccessibleTextSelectionEvent_SelectionEnd(void* ptr);
int QAccessibleTextSelectionEvent_SelectionStart(void* ptr);
void QAccessibleTextSelectionEvent_SetSelection(void* ptr, int start, int end);
void* QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent2(void* iface, int position, char* oldText, char* text);
void* QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent(void* object, int position, char* oldText, char* text);
int QAccessibleTextUpdateEvent_ChangePosition(void* ptr);
char* QAccessibleTextUpdateEvent_TextInserted(void* ptr);
char* QAccessibleTextUpdateEvent_TextRemoved(void* ptr);
void* QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent2(void* iface, void* val);
void* QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent(void* object, void* value);
void QAccessibleValueChangeEvent_SetValue(void* ptr, void* value);
void* QAccessibleValueChangeEvent_Value(void* ptr);
void* QAccessibleValueInterface_CurrentValue(void* ptr);
void* QAccessibleValueInterface_MaximumValue(void* ptr);
void* QAccessibleValueInterface_MinimumStepSize(void* ptr);
void* QAccessibleValueInterface_MinimumValue(void* ptr);
void QAccessibleValueInterface_SetCurrentValue(void* ptr, void* value);
void QAccessibleValueInterface_DestroyQAccessibleValueInterface(void* ptr);
char* QAccessibleValueInterface_ObjectNameAbs(void* ptr);
void QAccessibleValueInterface_SetObjectNameAbs(void* ptr, char* name);
void* QActionEvent_NewQActionEvent(int ty, void* action, void* before);
void* QActionEvent_Action(void* ptr);
void* QActionEvent_Before(void* ptr);
void* QBackingStore_PaintDevice(void* ptr);
void* QBackingStore_NewQBackingStore(void* window);
void QBackingStore_BeginPaint(void* ptr, void* region);
void QBackingStore_EndPaint(void* ptr);
void QBackingStore_Flush(void* ptr, void* region, void* win, void* offset);
int QBackingStore_HasStaticContents(void* ptr);
void QBackingStore_Resize(void* ptr, void* size);
int QBackingStore_Scroll(void* ptr, void* area, int dx, int dy);
void QBackingStore_SetStaticContents(void* ptr, void* region);
void* QBackingStore_Size(void* ptr);
void* QBackingStore_StaticContents(void* ptr);
void* QBackingStore_Window(void* ptr);
void QBackingStore_DestroyQBackingStore(void* ptr);
void* QBitmap_NewQBitmap3(int width, int height);
void* QBitmap_NewQBitmap();
void* QBitmap_NewQBitmap2(void* pixmap);
void* QBitmap_NewQBitmap4(void* size);
void* QBitmap_NewQBitmap5(char* fileName, char* format);
void QBitmap_Clear(void* ptr);
void QBitmap_Swap(void* ptr, void* other);
void QBitmap_DestroyQBitmap(void* ptr);
void* QBrush_NewQBrush4(int color, int style);
void QBrush_SetColor(void* ptr, void* color);
void* QBrush_NewQBrush();
void* QBrush_NewQBrush2(int style);
void* QBrush_NewQBrush6(int color, void* pixmap);
void* QBrush_NewQBrush9(void* other);
void* QBrush_NewQBrush3(void* color, int style);
void* QBrush_NewQBrush5(void* color, void* pixmap);
void* QBrush_NewQBrush10(void* gradient);
void* QBrush_NewQBrush8(void* image);
void* QBrush_NewQBrush7(void* pixmap);
void* QBrush_Color(void* ptr);
void* QBrush_Gradient(void* ptr);
int QBrush_IsOpaque(void* ptr);
void QBrush_SetColor2(void* ptr, int color);
void QBrush_SetStyle(void* ptr, int style);
void QBrush_SetTexture(void* ptr, void* pixmap);
void QBrush_SetTextureImage(void* ptr, void* image);
void QBrush_SetTransform(void* ptr, void* matrix);
int QBrush_Style(void* ptr);
void QBrush_Swap(void* ptr, void* other);
void QBrush_DestroyQBrush(void* ptr);
void QClipboard_Clear(void* ptr, int mode);
void* QClipboard_MimeData(void* ptr, int mode);
void QClipboard_SetMimeData(void* ptr, void* src, int mode);
void QClipboard_ConnectChanged(void* ptr);
void QClipboard_DisconnectChanged(void* ptr);
void QClipboard_Changed(void* ptr, int mode);
void QClipboard_ConnectDataChanged(void* ptr);
void QClipboard_DisconnectDataChanged(void* ptr);
void QClipboard_DataChanged(void* ptr);
void QClipboard_ConnectFindBufferChanged(void* ptr);
void QClipboard_DisconnectFindBufferChanged(void* ptr);
void QClipboard_FindBufferChanged(void* ptr);
int QClipboard_OwnsClipboard(void* ptr);
int QClipboard_OwnsFindBuffer(void* ptr);
int QClipboard_OwnsSelection(void* ptr);
void QClipboard_ConnectSelectionChanged(void* ptr);
void QClipboard_DisconnectSelectionChanged(void* ptr);
void QClipboard_SelectionChanged(void* ptr);
void QClipboard_SetImage(void* ptr, void* image, int mode);
void QClipboard_SetPixmap(void* ptr, void* pixmap, int mode);
void QClipboard_SetText(void* ptr, char* text, int mode);
int QClipboard_SupportsFindBuffer(void* ptr);
int QClipboard_SupportsSelection(void* ptr);
char* QClipboard_Text(void* ptr, int mode);
void QClipboard_TimerEvent(void* ptr, void* event);
void QClipboard_TimerEventDefault(void* ptr, void* event);
void QClipboard_ChildEvent(void* ptr, void* event);
void QClipboard_ChildEventDefault(void* ptr, void* event);
void QClipboard_CustomEvent(void* ptr, void* event);
void QClipboard_CustomEventDefault(void* ptr, void* event);
void* QCloseEvent_NewQCloseEvent();
void* QColor_ConvertTo(void* ptr, int colorSpec);
void QColor_SetRgbF(void* ptr, double r, double g, double b, double a);
void* QColor_NewQColor();
void* QColor_NewQColor8(int color);
void* QColor_NewQColor6(void* color);
void* QColor_NewQColor4(char* name);
void* QColor_NewQColor5(char* name);
void* QColor_NewQColor2(int r, int g, int b, int a);
int QColor_Alpha(void* ptr);
double QColor_AlphaF(void* ptr);
int QColor_Black(void* ptr);
double QColor_BlackF(void* ptr);
int QColor_Blue(void* ptr);
double QColor_BlueF(void* ptr);
char* QColor_QColor_ColorNames();
int QColor_Cyan(void* ptr);
double QColor_CyanF(void* ptr);
void* QColor_Darker(void* ptr, int factor);
void* QColor_QColor_FromCmyk(int c, int m, int y, int k, int a);
void* QColor_QColor_FromCmykF(double c, double m, double y, double k, double a);
void* QColor_QColor_FromHsl(int h, int s, int l, int a);
void* QColor_QColor_FromHslF(double h, double s, double l, double a);
void* QColor_QColor_FromHsv(int h, int s, int v, int a);
void* QColor_QColor_FromHsvF(double h, double s, double v, double a);
void* QColor_QColor_FromRgb2(int r, int g, int b, int a);
void* QColor_QColor_FromRgbF(double r, double g, double b, double a);
void QColor_GetCmyk(void* ptr, int c, int m, int y, int k, int a);
void QColor_GetHsl(void* ptr, int h, int s, int l, int a);
void QColor_GetHsv(void* ptr, int h, int s, int v, int a);
void QColor_GetRgb(void* ptr, int r, int g, int b, int a);
int QColor_Green(void* ptr);
double QColor_GreenF(void* ptr);
int QColor_HslHue(void* ptr);
double QColor_HslHueF(void* ptr);
int QColor_HslSaturation(void* ptr);
double QColor_HslSaturationF(void* ptr);
int QColor_HsvHue(void* ptr);
double QColor_HsvHueF(void* ptr);
int QColor_HsvSaturation(void* ptr);
double QColor_HsvSaturationF(void* ptr);
int QColor_Hue(void* ptr);
double QColor_HueF(void* ptr);
int QColor_IsValid(void* ptr);
int QColor_QColor_IsValidColor(char* name);
void* QColor_Lighter(void* ptr, int factor);
int QColor_Lightness(void* ptr);
double QColor_LightnessF(void* ptr);
int QColor_Magenta(void* ptr);
double QColor_MagentaF(void* ptr);
char* QColor_Name(void* ptr);
char* QColor_Name2(void* ptr, int format);
int QColor_Red(void* ptr);
double QColor_RedF(void* ptr);
int QColor_Saturation(void* ptr);
double QColor_SaturationF(void* ptr);
void QColor_SetAlpha(void* ptr, int alpha);
void QColor_SetAlphaF(void* ptr, double alpha);
void QColor_SetBlue(void* ptr, int blue);
void QColor_SetBlueF(void* ptr, double blue);
void QColor_SetCmyk(void* ptr, int c, int m, int y, int k, int a);
void QColor_SetCmykF(void* ptr, double c, double m, double y, double k, double a);
void QColor_SetGreen(void* ptr, int green);
void QColor_SetGreenF(void* ptr, double green);
void QColor_SetHsl(void* ptr, int h, int s, int l, int a);
void QColor_SetHslF(void* ptr, double h, double s, double l, double a);
void QColor_SetHsv(void* ptr, int h, int s, int v, int a);
void QColor_SetHsvF(void* ptr, double h, double s, double v, double a);
void QColor_SetNamedColor(void* ptr, char* name);
void QColor_SetRed(void* ptr, int red);
void QColor_SetRedF(void* ptr, double red);
void QColor_SetRgb(void* ptr, int r, int g, int b, int a);
int QColor_Spec(void* ptr);
void* QColor_ToCmyk(void* ptr);
void* QColor_ToHsl(void* ptr);
void* QColor_ToHsv(void* ptr);
void* QColor_ToRgb(void* ptr);
int QColor_Value(void* ptr);
double QColor_ValueF(void* ptr);
int QColor_Yellow(void* ptr);
double QColor_YellowF(void* ptr);
void* QConicalGradient_NewQConicalGradient();
void* QConicalGradient_NewQConicalGradient2(void* center, double angle);
void* QConicalGradient_NewQConicalGradient3(double cx, double cy, double angle);
double QConicalGradient_Angle(void* ptr);
void QConicalGradient_SetAngle(void* ptr, double angle);
void QConicalGradient_SetCenter(void* ptr, void* center);
void QConicalGradient_SetCenter2(void* ptr, double x, double y);
void* QContextMenuEvent_NewQContextMenuEvent3(int reason, void* pos);
void* QContextMenuEvent_NewQContextMenuEvent2(int reason, void* pos, void* globalPos);
void* QContextMenuEvent_NewQContextMenuEvent(int reason, void* pos, void* globalPos, int modifiers);
void* QContextMenuEvent_GlobalPos(void* ptr);
int QContextMenuEvent_GlobalX(void* ptr);
int QContextMenuEvent_GlobalY(void* ptr);
void* QContextMenuEvent_Pos(void* ptr);
int QContextMenuEvent_Reason(void* ptr);
int QContextMenuEvent_X(void* ptr);
int QContextMenuEvent_Y(void* ptr);
void* QCursor_QCursor_Pos();
void* QCursor_QCursor_Pos2(void* screen);
void QCursor_QCursor_SetPos2(void* screen, int x, int y);
void QCursor_QCursor_SetPos(int x, int y);
void* QCursor_NewQCursor();
void* QCursor_NewQCursor6(void* other);
void* QCursor_NewQCursor2(int shape);
void* QCursor_NewQCursor3(void* bitmap, void* mask, int hotX, int hotY);
void* QCursor_NewQCursor5(void* c);
void* QCursor_NewQCursor4(void* pixmap, int hotX, int hotY);
void* QCursor_Bitmap(void* ptr);
void* QCursor_HotSpot(void* ptr);
void* QCursor_Mask(void* ptr);
void QCursor_QCursor_SetPos4(void* screen, void* p);
void QCursor_QCursor_SetPos3(void* p);
void QCursor_SetShape(void* ptr, int shape);
int QCursor_Shape(void* ptr);
void QCursor_DestroyQCursor(void* ptr);
int QDesktopServices_QDesktopServices_OpenUrl(void* url);
void QDesktopServices_QDesktopServices_SetUrlHandler(char* scheme, void* receiver, char* method);
void QDesktopServices_QDesktopServices_UnsetUrlHandler(char* scheme);
int QDoubleValidator_Notation(void* ptr);
void QDoubleValidator_SetDecimals(void* ptr, int v);
void QDoubleValidator_SetNotation(void* ptr, int v);
void* QDoubleValidator_NewQDoubleValidator(void* parent);
int QDoubleValidator_Decimals(void* ptr);
void QDoubleValidator_DestroyQDoubleValidator(void* ptr);
void QDoubleValidator_TimerEvent(void* ptr, void* event);
void QDoubleValidator_TimerEventDefault(void* ptr, void* event);
void QDoubleValidator_ChildEvent(void* ptr, void* event);
void QDoubleValidator_ChildEventDefault(void* ptr, void* event);
void QDoubleValidator_CustomEvent(void* ptr, void* event);
void QDoubleValidator_CustomEventDefault(void* ptr, void* event);
void* QDrag_NewQDrag(void* dragSource);
void QDrag_ConnectActionChanged(void* ptr);
void QDrag_DisconnectActionChanged(void* ptr);
void QDrag_ActionChanged(void* ptr, int action);
int QDrag_Exec(void* ptr, int supportedActions);
int QDrag_Exec2(void* ptr, int supportedActions, int defaultDropAction);
void* QDrag_HotSpot(void* ptr);
void* QDrag_MimeData(void* ptr);
void QDrag_SetDragCursor(void* ptr, void* cursor, int action);
void QDrag_SetHotSpot(void* ptr, void* hotspot);
void QDrag_SetMimeData(void* ptr, void* data);
void QDrag_SetPixmap(void* ptr, void* pixmap);
void* QDrag_Source(void* ptr);
int QDrag_SupportedActions(void* ptr);
void* QDrag_Target(void* ptr);
void QDrag_ConnectTargetChanged(void* ptr);
void QDrag_DisconnectTargetChanged(void* ptr);
void QDrag_TargetChanged(void* ptr, void* newTarget);
void QDrag_DestroyQDrag(void* ptr);
void QDrag_TimerEvent(void* ptr, void* event);
void QDrag_TimerEventDefault(void* ptr, void* event);
void QDrag_ChildEvent(void* ptr, void* event);
void QDrag_ChildEventDefault(void* ptr, void* event);
void QDrag_CustomEvent(void* ptr, void* event);
void QDrag_CustomEventDefault(void* ptr, void* event);
void* QDragEnterEvent_NewQDragEnterEvent(void* point, int actions, void* data, int buttons, int modifiers);
void* QDragLeaveEvent_NewQDragLeaveEvent();
void* QDragMoveEvent_NewQDragMoveEvent(void* pos, int actions, void* data, int buttons, int modifiers, int ty);
void QDragMoveEvent_Accept2(void* ptr);
void QDragMoveEvent_Accept(void* ptr, void* rectangle);
void* QDragMoveEvent_AnswerRect(void* ptr);
void QDragMoveEvent_Ignore2(void* ptr);
void QDragMoveEvent_Ignore(void* ptr, void* rectangle);
void QDragMoveEvent_DestroyQDragMoveEvent(void* ptr);
void QDropEvent_SetDropAction(void* ptr, int action);
void* QDropEvent_NewQDropEvent(void* pos, int actions, void* data, int buttons, int modifiers, int ty);
void QDropEvent_AcceptProposedAction(void* ptr);
int QDropEvent_DropAction(void* ptr);
int QDropEvent_KeyboardModifiers(void* ptr);
void* QDropEvent_MimeData(void* ptr);
int QDropEvent_MouseButtons(void* ptr);
void* QDropEvent_Pos(void* ptr);
int QDropEvent_PossibleActions(void* ptr);
int QDropEvent_ProposedAction(void* ptr);
void* QDropEvent_Source(void* ptr);
void* QEnterEvent_NewQEnterEvent(void* localPos, void* windowPos, void* screenPos);
void* QEnterEvent_GlobalPos(void* ptr);
int QEnterEvent_GlobalX(void* ptr);
int QEnterEvent_GlobalY(void* ptr);
void* QEnterEvent_Pos(void* ptr);
int QEnterEvent_X(void* ptr);
int QEnterEvent_Y(void* ptr);
void* QExposeEvent_NewQExposeEvent(void* exposeRegion);
void* QExposeEvent_Region(void* ptr);
int QFileOpenEvent_OpenFile(void* ptr, void* file, int flags);
char* QFileOpenEvent_File(void* ptr);
void* QFileOpenEvent_Url(void* ptr);
void* QFocusEvent_NewQFocusEvent(int ty, int reason);
int QFocusEvent_GotFocus(void* ptr);
int QFocusEvent_LostFocus(void* ptr);
int QFocusEvent_Reason(void* ptr);
int QFont_Times_Type();
int QFont_Courier_Type();
int QFont_OldEnglish_Type();
int QFont_System_Type();
int QFont_AnyStyle_Type();
int QFont_Cursive_Type();
int QFont_Monospace_Type();
int QFont_Fantasy_Type();
char* QFont_DefaultFamily(void* ptr);
char* QFont_LastResortFamily(void* ptr);
char* QFont_LastResortFont(void* ptr);
void* QFont_NewQFont();
void* QFont_NewQFont4(void* font);
void* QFont_NewQFont3(void* font, void* pd);
void* QFont_NewQFont2(char* family, int pointSize, int weight, int italic);
int QFont_Bold(void* ptr);
int QFont_Capitalization(void* ptr);
int QFont_ExactMatch(void* ptr);
char* QFont_Family(void* ptr);
int QFont_FixedPitch(void* ptr);
int QFont_FromString(void* ptr, char* descrip);
int QFont_HintingPreference(void* ptr);
void QFont_QFont_InsertSubstitution(char* familyName, char* substituteName);
void QFont_QFont_InsertSubstitutions(char* familyName, char* substituteNames);
int QFont_IsCopyOf(void* ptr, void* f);
int QFont_Italic(void* ptr);
int QFont_Kerning(void* ptr);
char* QFont_Key(void* ptr);
double QFont_LetterSpacing(void* ptr);
int QFont_LetterSpacingType(void* ptr);
int QFont_Overline(void* ptr);
int QFont_PixelSize(void* ptr);
int QFont_PointSize(void* ptr);
double QFont_PointSizeF(void* ptr);
void QFont_QFont_RemoveSubstitutions(char* familyName);
void QFont_SetBold(void* ptr, int enable);
void QFont_SetCapitalization(void* ptr, int caps);
void QFont_SetFamily(void* ptr, char* family);
void QFont_SetFixedPitch(void* ptr, int enable);
void QFont_SetHintingPreference(void* ptr, int hintingPreference);
void QFont_SetItalic(void* ptr, int enable);
void QFont_SetKerning(void* ptr, int enable);
void QFont_SetLetterSpacing(void* ptr, int ty, double spacing);
void QFont_SetOverline(void* ptr, int enable);
void QFont_SetPixelSize(void* ptr, int pixelSize);
void QFont_SetPointSize(void* ptr, int pointSize);
void QFont_SetPointSizeF(void* ptr, double pointSize);
void QFont_SetStretch(void* ptr, int factor);
void QFont_SetStrikeOut(void* ptr, int enable);
void QFont_SetStyle(void* ptr, int style);
void QFont_SetStyleHint(void* ptr, int hint, int strategy);
void QFont_SetStyleName(void* ptr, char* styleName);
void QFont_SetStyleStrategy(void* ptr, int s);
void QFont_SetUnderline(void* ptr, int enable);
void QFont_SetWeight(void* ptr, int weight);
void QFont_SetWordSpacing(void* ptr, double spacing);
int QFont_Stretch(void* ptr);
int QFont_StrikeOut(void* ptr);
int QFont_Style(void* ptr);
int QFont_StyleHint(void* ptr);
char* QFont_StyleName(void* ptr);
int QFont_StyleStrategy(void* ptr);
char* QFont_QFont_Substitute(char* familyName);
char* QFont_QFont_Substitutes(char* familyName);
char* QFont_QFont_Substitutions();
void QFont_Swap(void* ptr, void* other);
char* QFont_ToString(void* ptr);
int QFont_Underline(void* ptr);
int QFont_Weight(void* ptr);
double QFont_WordSpacing(void* ptr);
void QFont_DestroyQFont(void* ptr);
int QFontDatabase_Ogham_Type();
int QFontDatabase_Runic_Type();
int QFontDatabase_Nko_Type();
int QFontDatabase_WritingSystemsCount_Type();
int QFontDatabase_QFontDatabase_RemoveAllApplicationFonts();
int QFontDatabase_QFontDatabase_RemoveApplicationFont(int id);
void* QFontDatabase_NewQFontDatabase();
int QFontDatabase_QFontDatabase_AddApplicationFont(char* fileName);
int QFontDatabase_QFontDatabase_AddApplicationFontFromData(void* fontData);
char* QFontDatabase_QFontDatabase_ApplicationFontFamilies(int id);
int QFontDatabase_Bold(void* ptr, char* family, char* style);
char* QFontDatabase_Families(void* ptr, int writingSystem);
int QFontDatabase_IsBitmapScalable(void* ptr, char* family, char* style);
int QFontDatabase_IsFixedPitch(void* ptr, char* family, char* style);
int QFontDatabase_IsPrivateFamily(void* ptr, char* family);
int QFontDatabase_IsScalable(void* ptr, char* family, char* style);
int QFontDatabase_IsSmoothlyScalable(void* ptr, char* family, char* style);
int QFontDatabase_Italic(void* ptr, char* family, char* style);
char* QFontDatabase_StyleString(void* ptr, void* font);
char* QFontDatabase_StyleString2(void* ptr, void* fontInfo);
char* QFontDatabase_Styles(void* ptr, char* family);
int QFontDatabase_Weight(void* ptr, char* family, char* style);
char* QFontDatabase_QFontDatabase_WritingSystemName(int writingSystem);
char* QFontDatabase_QFontDatabase_WritingSystemSample(int writingSystem);
void* QFontInfo_NewQFontInfo(void* font);
void* QFontInfo_NewQFontInfo2(void* fi);
int QFontInfo_Bold(void* ptr);
int QFontInfo_ExactMatch(void* ptr);
char* QFontInfo_Family(void* ptr);
int QFontInfo_FixedPitch(void* ptr);
int QFontInfo_Italic(void* ptr);
int QFontInfo_PixelSize(void* ptr);
int QFontInfo_PointSize(void* ptr);
double QFontInfo_PointSizeF(void* ptr);
int QFontInfo_Style(void* ptr);
char* QFontInfo_StyleName(void* ptr);
void QFontInfo_Swap(void* ptr, void* other);
int QFontInfo_StyleHint(void* ptr);
int QFontInfo_Weight(void* ptr);
void QFontInfo_DestroyQFontInfo(void* ptr);
void* QFontMetrics_NewQFontMetrics(void* font);
void* QFontMetrics_NewQFontMetrics2(void* font, void* paintdevice);
void* QFontMetrics_NewQFontMetrics3(void* fm);
int QFontMetrics_Ascent(void* ptr);
int QFontMetrics_AverageCharWidth(void* ptr);
void* QFontMetrics_BoundingRect(void* ptr, void* ch);
void* QFontMetrics_BoundingRect4(void* ptr, void* rect, int flags, char* text, int tabStops, int tabArray);
void* QFontMetrics_BoundingRect2(void* ptr, char* text);
void* QFontMetrics_BoundingRect3(void* ptr, int x, int y, int width, int height, int flags, char* text, int tabStops, int tabArray);
int QFontMetrics_Descent(void* ptr);
char* QFontMetrics_ElidedText(void* ptr, char* text, int mode, int width, int flags);
int QFontMetrics_Height(void* ptr);
int QFontMetrics_InFont(void* ptr, void* ch);
int QFontMetrics_Leading(void* ptr);
int QFontMetrics_LeftBearing(void* ptr, void* ch);
int QFontMetrics_LineSpacing(void* ptr);
int QFontMetrics_LineWidth(void* ptr);
int QFontMetrics_MaxWidth(void* ptr);
int QFontMetrics_MinLeftBearing(void* ptr);
int QFontMetrics_MinRightBearing(void* ptr);
int QFontMetrics_OverlinePos(void* ptr);
int QFontMetrics_RightBearing(void* ptr, void* ch);
void* QFontMetrics_Size(void* ptr, int flags, char* text, int tabStops, int tabArray);
int QFontMetrics_StrikeOutPos(void* ptr);
void QFontMetrics_Swap(void* ptr, void* other);
void* QFontMetrics_TightBoundingRect(void* ptr, char* text);
int QFontMetrics_UnderlinePos(void* ptr);
int QFontMetrics_Width3(void* ptr, void* ch);
int QFontMetrics_Width(void* ptr, char* text, int len);
int QFontMetrics_XHeight(void* ptr);
void QFontMetrics_DestroyQFontMetrics(void* ptr);
void* QFontMetricsF_NewQFontMetricsF(void* font);
void* QFontMetricsF_NewQFontMetricsF2(void* font, void* paintdevice);
void* QFontMetricsF_NewQFontMetricsF3(void* fontMetrics);
void* QFontMetricsF_NewQFontMetricsF4(void* fm);
double QFontMetricsF_Ascent(void* ptr);
double QFontMetricsF_AverageCharWidth(void* ptr);
double QFontMetricsF_Descent(void* ptr);
char* QFontMetricsF_ElidedText(void* ptr, char* text, int mode, double width, int flags);
double QFontMetricsF_Height(void* ptr);
int QFontMetricsF_InFont(void* ptr, void* ch);
double QFontMetricsF_Leading(void* ptr);
double QFontMetricsF_LeftBearing(void* ptr, void* ch);
double QFontMetricsF_LineSpacing(void* ptr);
double QFontMetricsF_LineWidth(void* ptr);
double QFontMetricsF_MaxWidth(void* ptr);
double QFontMetricsF_MinLeftBearing(void* ptr);
double QFontMetricsF_MinRightBearing(void* ptr);
double QFontMetricsF_OverlinePos(void* ptr);
double QFontMetricsF_RightBearing(void* ptr, void* ch);
double QFontMetricsF_StrikeOutPos(void* ptr);
void QFontMetricsF_Swap(void* ptr, void* other);
double QFontMetricsF_UnderlinePos(void* ptr);
double QFontMetricsF_Width2(void* ptr, void* ch);
double QFontMetricsF_Width(void* ptr, char* text);
double QFontMetricsF_XHeight(void* ptr);
void QFontMetricsF_DestroyQFontMetricsF(void* ptr);
void QGenericPlugin_TimerEvent(void* ptr, void* event);
void QGenericPlugin_TimerEventDefault(void* ptr, void* event);
void QGenericPlugin_ChildEvent(void* ptr, void* event);
void QGenericPlugin_ChildEventDefault(void* ptr, void* event);
void QGenericPlugin_CustomEvent(void* ptr, void* event);
void QGenericPlugin_CustomEventDefault(void* ptr, void* event);
void* QGenericPluginFactory_QGenericPluginFactory_Create(char* key, char* specification);
char* QGenericPluginFactory_QGenericPluginFactory_Keys();
void* QGlyphRun_NewQGlyphRun();
void* QGlyphRun_NewQGlyphRun2(void* other);
void QGlyphRun_Clear(void* ptr);
int QGlyphRun_Flags(void* ptr);
int QGlyphRun_IsEmpty(void* ptr);
int QGlyphRun_IsRightToLeft(void* ptr);
int QGlyphRun_Overline(void* ptr);
void QGlyphRun_SetBoundingRect(void* ptr, void* boundingRect);
void QGlyphRun_SetFlag(void* ptr, int flag, int enabled);
void QGlyphRun_SetFlags(void* ptr, int flags);
void QGlyphRun_SetOverline(void* ptr, int overline);
void QGlyphRun_SetRawFont(void* ptr, void* rawFont);
void QGlyphRun_SetRightToLeft(void* ptr, int rightToLeft);
void QGlyphRun_SetStrikeOut(void* ptr, int strikeOut);
void QGlyphRun_SetUnderline(void* ptr, int underline);
int QGlyphRun_StrikeOut(void* ptr);
void QGlyphRun_Swap(void* ptr, void* other);
int QGlyphRun_Underline(void* ptr);
void QGlyphRun_DestroyQGlyphRun(void* ptr);
void QGradient_SetColorAt(void* ptr, double position, void* color);
int QGradient_CoordinateMode(void* ptr);
void QGradient_SetCoordinateMode(void* ptr, int mode);
void QGradient_SetSpread(void* ptr, int method);
int QGradient_Spread(void* ptr);
int QGradient_Type(void* ptr);
char* QGuiApplication_QGuiApplication_ApplicationDisplayName();
int QGuiApplication_QGuiApplication_ApplicationState();
int QGuiApplication_IsSavingSession(void* ptr);
int QGuiApplication_IsSessionRestored(void* ptr);
int QGuiApplication_QGuiApplication_LayoutDirection();
void* QGuiApplication_QGuiApplication_OverrideCursor();
char* QGuiApplication_QGuiApplication_PlatformName();
int QGuiApplication_QGuiApplication_QueryKeyboardModifiers();
int QGuiApplication_QGuiApplication_QuitOnLastWindowClosed();
void QGuiApplication_QGuiApplication_RestoreOverrideCursor();
char* QGuiApplication_SessionId(void* ptr);
char* QGuiApplication_SessionKey(void* ptr);
void QGuiApplication_QGuiApplication_SetApplicationDisplayName(char* name);
void QGuiApplication_QGuiApplication_SetLayoutDirection(int direction);
void QGuiApplication_QGuiApplication_SetOverrideCursor(void* cursor);
void QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(int quit);
void QGuiApplication_QGuiApplication_SetWindowIcon(void* icon);
void* QGuiApplication_QGuiApplication_WindowIcon();
void* QGuiApplication_NewQGuiApplication(int argc, char* argv);
void QGuiApplication_ConnectApplicationStateChanged(void* ptr);
void QGuiApplication_DisconnectApplicationStateChanged(void* ptr);
void QGuiApplication_ApplicationStateChanged(void* ptr, int state);
void QGuiApplication_QGuiApplication_ChangeOverrideCursor(void* cursor);
void* QGuiApplication_QGuiApplication_Clipboard();
int QGuiApplication_QGuiApplication_DesktopSettingsAware();
double QGuiApplication_DevicePixelRatio(void* ptr);
int QGuiApplication_Event(void* ptr, void* e);
int QGuiApplication_EventDefault(void* ptr, void* e);
int QGuiApplication_QGuiApplication_Exec();
void* QGuiApplication_QGuiApplication_FocusObject();
void QGuiApplication_ConnectFocusObjectChanged(void* ptr);
void QGuiApplication_DisconnectFocusObjectChanged(void* ptr);
void QGuiApplication_FocusObjectChanged(void* ptr, void* focusObject);
void* QGuiApplication_QGuiApplication_FocusWindow();
void QGuiApplication_ConnectFocusWindowChanged(void* ptr);
void QGuiApplication_DisconnectFocusWindowChanged(void* ptr);
void QGuiApplication_FocusWindowChanged(void* ptr, void* focusWindow);
void QGuiApplication_ConnectFontDatabaseChanged(void* ptr);
void QGuiApplication_DisconnectFontDatabaseChanged(void* ptr);
void QGuiApplication_FontDatabaseChanged(void* ptr);
void* QGuiApplication_QGuiApplication_InputMethod();
int QGuiApplication_QGuiApplication_IsLeftToRight();
int QGuiApplication_QGuiApplication_IsRightToLeft();
int QGuiApplication_QGuiApplication_KeyboardModifiers();
void QGuiApplication_ConnectLastWindowClosed(void* ptr);
void QGuiApplication_DisconnectLastWindowClosed(void* ptr);
void QGuiApplication_LastWindowClosed(void* ptr);
void QGuiApplication_ConnectLayoutDirectionChanged(void* ptr);
void QGuiApplication_DisconnectLayoutDirectionChanged(void* ptr);
void QGuiApplication_LayoutDirectionChanged(void* ptr, int direction);
void* QGuiApplication_QGuiApplication_ModalWindow();
int QGuiApplication_QGuiApplication_MouseButtons();
int QGuiApplication_Notify(void* ptr, void* object, void* event);
int QGuiApplication_NotifyDefault(void* ptr, void* object, void* event);
void* QGuiApplication_QGuiApplication_PrimaryScreen();
void QGuiApplication_ConnectScreenAdded(void* ptr);
void QGuiApplication_DisconnectScreenAdded(void* ptr);
void QGuiApplication_ScreenAdded(void* ptr, void* screen);
void QGuiApplication_ConnectScreenRemoved(void* ptr);
void QGuiApplication_DisconnectScreenRemoved(void* ptr);
void QGuiApplication_ScreenRemoved(void* ptr, void* screen);
void QGuiApplication_QGuiApplication_SetDesktopSettingsAware(int on);
void QGuiApplication_QGuiApplication_SetFont(void* font);
void QGuiApplication_QGuiApplication_SetPalette(void* pal);
void* QGuiApplication_QGuiApplication_StyleHints();
void QGuiApplication_QGuiApplication_Sync();
void* QGuiApplication_QGuiApplication_TopLevelAt(void* pos);
void QGuiApplication_DestroyQGuiApplication(void* ptr);
void QGuiApplication_TimerEvent(void* ptr, void* event);
void QGuiApplication_TimerEventDefault(void* ptr, void* event);
void QGuiApplication_ChildEvent(void* ptr, void* event);
void QGuiApplication_ChildEventDefault(void* ptr, void* event);
void QGuiApplication_CustomEvent(void* ptr, void* event);
void QGuiApplication_CustomEventDefault(void* ptr, void* event);
void* QHelpEvent_NewQHelpEvent(int ty, void* pos, void* globalPos);
void* QHelpEvent_GlobalPos(void* ptr);
int QHelpEvent_GlobalX(void* ptr);
int QHelpEvent_GlobalY(void* ptr);
void* QHelpEvent_Pos(void* ptr);
int QHelpEvent_X(void* ptr);
int QHelpEvent_Y(void* ptr);
void* QHideEvent_NewQHideEvent();
void* QHoverEvent_NewQHoverEvent(int ty, void* pos, void* oldPos, int modifiers);
void* QHoverEvent_OldPos(void* ptr);
void* QHoverEvent_Pos(void* ptr);
void* QIcon_NewQIcon();
void* QIcon_NewQIcon4(void* other);
void* QIcon_NewQIcon6(void* engine);
void* QIcon_NewQIcon3(void* other);
void* QIcon_NewQIcon2(void* pixmap);
void* QIcon_NewQIcon5(char* fileName);
void* QIcon_ActualSize2(void* ptr, void* window, void* size, int mode, int state);
void* QIcon_ActualSize(void* ptr, void* size, int mode, int state);
void QIcon_AddFile(void* ptr, char* fileName, void* size, int mode, int state);
void QIcon_AddPixmap(void* ptr, void* pixmap, int mode, int state);
long long QIcon_CacheKey(void* ptr);
void* QIcon_QIcon_FromTheme(char* name, void* fallback);
int QIcon_QIcon_HasThemeIcon(char* name);
int QIcon_IsNull(void* ptr);
char* QIcon_Name(void* ptr);
void QIcon_Paint(void* ptr, void* painter, void* rect, int alignment, int mode, int state);
void QIcon_Paint2(void* ptr, void* painter, int x, int y, int w, int h, int alignment, int mode, int state);
void QIcon_QIcon_SetThemeName(char* name);
void QIcon_QIcon_SetThemeSearchPaths(char* paths);
void QIcon_Swap(void* ptr, void* other);
char* QIcon_QIcon_ThemeName();
char* QIcon_QIcon_ThemeSearchPaths();
void QIcon_DestroyQIcon(void* ptr);
void* QIconDragEvent_NewQIconDragEvent();
void* QIconEngine_ActualSize(void* ptr, void* size, int mode, int state);
void* QIconEngine_ActualSizeDefault(void* ptr, void* size, int mode, int state);
void QIconEngine_AddFile(void* ptr, char* fileName, void* size, int mode, int state);
void QIconEngine_AddFileDefault(void* ptr, char* fileName, void* size, int mode, int state);
void* QIconEngine_Clone(void* ptr);
char* QIconEngine_IconName(void* ptr);
char* QIconEngine_IconNameDefault(void* ptr);
char* QIconEngine_Key(void* ptr);
char* QIconEngine_KeyDefault(void* ptr);
void QIconEngine_Paint(void* ptr, void* painter, void* rect, int mode, int state);
int QIconEngine_Read(void* ptr, void* in);
int QIconEngine_ReadDefault(void* ptr, void* in);
int QIconEngine_Write(void* ptr, void* out);
int QIconEngine_WriteDefault(void* ptr, void* out);
void QIconEngine_DestroyQIconEngine(void* ptr);
char* QIconEngine_ObjectNameAbs(void* ptr);
void QIconEngine_SetObjectNameAbs(void* ptr, char* name);
void QIconEnginePlugin_TimerEvent(void* ptr, void* event);
void QIconEnginePlugin_TimerEventDefault(void* ptr, void* event);
void QIconEnginePlugin_ChildEvent(void* ptr, void* event);
void QIconEnginePlugin_ChildEventDefault(void* ptr, void* event);
void QIconEnginePlugin_CustomEvent(void* ptr, void* event);
void QIconEnginePlugin_CustomEventDefault(void* ptr, void* event);
int QImage_ColorCount(void* ptr);
void QImage_Fill2(void* ptr, int color);
void QImage_Fill3(void* ptr, void* color);
int QImage_Height(void* ptr);
int QImage_IsNull(void* ptr);
void* QImage_Offset(void* ptr);
void* QImage_Rect(void* ptr);
void QImage_SetOffset(void* ptr, void* offset);
void QImage_SetText(void* ptr, char* key, char* text);
void* QImage_Size(void* ptr);
int QImage_Width(void* ptr);
void* QImage_NewQImage();
void* QImage_NewQImage11(void* other);
void* QImage_NewQImage10(void* image);
void* QImage_NewQImage2(void* size, int format);
void* QImage_NewQImage9(char* fileName, char* format);
void* QImage_NewQImage3(int width, int height, int format);
int QImage_AllGray(void* ptr);
int QImage_BitPlaneCount(void* ptr);
int QImage_ByteCount(void* ptr);
int QImage_BytesPerLine(void* ptr);
long long QImage_CacheKey(void* ptr);
int QImage_Depth(void* ptr);
double QImage_DevicePixelRatio(void* ptr);
int QImage_DotsPerMeterX(void* ptr);
int QImage_DotsPerMeterY(void* ptr);
int QImage_Format(void* ptr);
int QImage_HasAlphaChannel(void* ptr);
void QImage_InvertPixels(void* ptr, int mode);
int QImage_IsGrayscale(void* ptr);
int QImage_Load2(void* ptr, void* device, char* format);
int QImage_Load(void* ptr, char* fileName, char* format);
int QImage_LoadFromData2(void* ptr, void* data, char* format);
int QImage_PixelIndex(void* ptr, void* position);
int QImage_PixelIndex2(void* ptr, int x, int y);
int QImage_Save2(void* ptr, void* device, char* format, int quality);
int QImage_Save(void* ptr, char* fileName, char* format, int quality);
void QImage_SetColorCount(void* ptr, int colorCount);
void QImage_SetDevicePixelRatio(void* ptr, double scaleFactor);
void QImage_SetDotsPerMeterX(void* ptr, int x);
void QImage_SetDotsPerMeterY(void* ptr, int y);
void QImage_Swap(void* ptr, void* other);
char* QImage_Text(void* ptr, char* key);
char* QImage_TextKeys(void* ptr);
int QImage_QImage_ToImageFormat(void* format);
int QImage_Valid(void* ptr, void* pos);
int QImage_Valid2(void* ptr, int x, int y);
void QImage_DestroyQImage(void* ptr);
void QImageIOPlugin_TimerEvent(void* ptr, void* event);
void QImageIOPlugin_TimerEventDefault(void* ptr, void* event);
void QImageIOPlugin_ChildEvent(void* ptr, void* event);
void QImageIOPlugin_ChildEventDefault(void* ptr, void* event);
void QImageIOPlugin_CustomEvent(void* ptr, void* event);
void QImageIOPlugin_CustomEventDefault(void* ptr, void* event);
void* QImageReader_NewQImageReader();
void* QImageReader_NewQImageReader2(void* device, void* format);
void* QImageReader_NewQImageReader3(char* fileName, void* format);
int QImageReader_AutoDetectImageFormat(void* ptr);
int QImageReader_AutoTransform(void* ptr);
void* QImageReader_BackgroundColor(void* ptr);
int QImageReader_CanRead(void* ptr);
void* QImageReader_ClipRect(void* ptr);
int QImageReader_CurrentImageNumber(void* ptr);
void* QImageReader_CurrentImageRect(void* ptr);
int QImageReader_DecideFormatFromContent(void* ptr);
void* QImageReader_Device(void* ptr);
int QImageReader_Error(void* ptr);
char* QImageReader_ErrorString(void* ptr);
char* QImageReader_FileName(void* ptr);
void* QImageReader_Format(void* ptr);
int QImageReader_ImageCount(void* ptr);
void* QImageReader_QImageReader_ImageFormat3(void* device);
void* QImageReader_QImageReader_ImageFormat2(char* fileName);
int QImageReader_ImageFormat(void* ptr);
int QImageReader_JumpToImage(void* ptr, int imageNumber);
int QImageReader_JumpToNextImage(void* ptr);
int QImageReader_LoopCount(void* ptr);
int QImageReader_NextImageDelay(void* ptr);
int QImageReader_Quality(void* ptr);
int QImageReader_Read2(void* ptr, void* image);
void* QImageReader_ScaledClipRect(void* ptr);
void* QImageReader_ScaledSize(void* ptr);
void QImageReader_SetAutoDetectImageFormat(void* ptr, int enabled);
void QImageReader_SetAutoTransform(void* ptr, int enabled);
void QImageReader_SetBackgroundColor(void* ptr, void* color);
void QImageReader_SetClipRect(void* ptr, void* rect);
void QImageReader_SetDecideFormatFromContent(void* ptr, int ignored);
void QImageReader_SetDevice(void* ptr, void* device);
void QImageReader_SetFileName(void* ptr, char* fileName);
void QImageReader_SetFormat(void* ptr, void* format);
void QImageReader_SetQuality(void* ptr, int quality);
void QImageReader_SetScaledClipRect(void* ptr, void* rect);
void QImageReader_SetScaledSize(void* ptr, void* size);
void* QImageReader_Size(void* ptr);
void* QImageReader_SubType(void* ptr);
int QImageReader_SupportsAnimation(void* ptr);
int QImageReader_SupportsOption(void* ptr, int option);
char* QImageReader_Text(void* ptr, char* key);
char* QImageReader_TextKeys(void* ptr);
int QImageReader_Transformation(void* ptr);
void QImageReader_DestroyQImageReader(void* ptr);
void* QImageWriter_NewQImageWriter();
void* QImageWriter_NewQImageWriter2(void* device, void* format);
void* QImageWriter_NewQImageWriter3(char* fileName, void* format);
int QImageWriter_CanWrite(void* ptr);
int QImageWriter_Compression(void* ptr);
void* QImageWriter_Device(void* ptr);
int QImageWriter_Error(void* ptr);
char* QImageWriter_ErrorString(void* ptr);
char* QImageWriter_FileName(void* ptr);
void* QImageWriter_Format(void* ptr);
int QImageWriter_OptimizedWrite(void* ptr);
int QImageWriter_ProgressiveScanWrite(void* ptr);
int QImageWriter_Quality(void* ptr);
void QImageWriter_SetCompression(void* ptr, int compression);
void QImageWriter_SetDevice(void* ptr, void* device);
void QImageWriter_SetFileName(void* ptr, char* fileName);
void QImageWriter_SetFormat(void* ptr, void* format);
void QImageWriter_SetOptimizedWrite(void* ptr, int optimize);
void QImageWriter_SetProgressiveScanWrite(void* ptr, int progressive);
void QImageWriter_SetQuality(void* ptr, int quality);
void QImageWriter_SetSubType(void* ptr, void* ty);
void QImageWriter_SetText(void* ptr, char* key, char* text);
void QImageWriter_SetTransformation(void* ptr, int transform);
void* QImageWriter_SubType(void* ptr);
int QImageWriter_SupportsOption(void* ptr, int option);
int QImageWriter_Transformation(void* ptr);
int QImageWriter_Write(void* ptr, void* image);
void QImageWriter_DestroyQImageWriter(void* ptr);
int QInputEvent_Modifiers(void* ptr);
int QInputMethod_InputDirection(void* ptr);
int QInputMethod_IsAnimating(void* ptr);
int QInputMethod_IsVisible(void* ptr);
void QInputMethod_ConnectAnimatingChanged(void* ptr);
void QInputMethod_DisconnectAnimatingChanged(void* ptr);
void QInputMethod_AnimatingChanged(void* ptr);
void QInputMethod_Commit(void* ptr);
void QInputMethod_ConnectCursorRectangleChanged(void* ptr);
void QInputMethod_DisconnectCursorRectangleChanged(void* ptr);
void QInputMethod_CursorRectangleChanged(void* ptr);
void QInputMethod_Hide(void* ptr);
void QInputMethod_ConnectInputDirectionChanged(void* ptr);
void QInputMethod_DisconnectInputDirectionChanged(void* ptr);
void QInputMethod_InputDirectionChanged(void* ptr, int newDirection);
void QInputMethod_InvokeAction(void* ptr, int a, int cursorPosition);
void QInputMethod_ConnectKeyboardRectangleChanged(void* ptr);
void QInputMethod_DisconnectKeyboardRectangleChanged(void* ptr);
void QInputMethod_KeyboardRectangleChanged(void* ptr);
void QInputMethod_ConnectLocaleChanged(void* ptr);
void QInputMethod_DisconnectLocaleChanged(void* ptr);
void QInputMethod_LocaleChanged(void* ptr);
void* QInputMethod_QInputMethod_QueryFocusObject(int query, void* argument);
void QInputMethod_Reset(void* ptr);
void QInputMethod_SetInputItemRectangle(void* ptr, void* rect);
void QInputMethod_SetInputItemTransform(void* ptr, void* transform);
void QInputMethod_SetVisible(void* ptr, int visible);
void QInputMethod_Show(void* ptr);
void QInputMethod_Update(void* ptr, int queries);
void QInputMethod_ConnectVisibleChanged(void* ptr);
void QInputMethod_DisconnectVisibleChanged(void* ptr);
void QInputMethod_VisibleChanged(void* ptr);
void QInputMethod_TimerEvent(void* ptr, void* event);
void QInputMethod_TimerEventDefault(void* ptr, void* event);
void QInputMethod_ChildEvent(void* ptr, void* event);
void QInputMethod_ChildEventDefault(void* ptr, void* event);
void QInputMethod_CustomEvent(void* ptr, void* event);
void QInputMethod_CustomEventDefault(void* ptr, void* event);
void* QInputMethodEvent_NewQInputMethodEvent();
void* QInputMethodEvent_NewQInputMethodEvent3(void* other);
char* QInputMethodEvent_CommitString(void* ptr);
char* QInputMethodEvent_PreeditString(void* ptr);
int QInputMethodEvent_ReplacementLength(void* ptr);
int QInputMethodEvent_ReplacementStart(void* ptr);
void QInputMethodEvent_SetCommitString(void* ptr, char* commitString, int replaceFrom, int replaceLength);
void* QInputMethodQueryEvent_NewQInputMethodQueryEvent(int queries);
int QInputMethodQueryEvent_Queries(void* ptr);
void QInputMethodQueryEvent_SetValue(void* ptr, int query, void* value);
void* QInputMethodQueryEvent_Value(void* ptr, int query);
void QIntValidator_SetBottom(void* ptr, int v);
void QIntValidator_SetTop(void* ptr, int v);
void* QIntValidator_NewQIntValidator(void* parent);
void* QIntValidator_NewQIntValidator2(int minimum, int maximum, void* parent);
int QIntValidator_Bottom(void* ptr);
void QIntValidator_SetRange(void* ptr, int bottom, int top);
void QIntValidator_SetRangeDefault(void* ptr, int bottom, int top);
int QIntValidator_Top(void* ptr);
void QIntValidator_DestroyQIntValidator(void* ptr);
void QIntValidator_TimerEvent(void* ptr, void* event);
void QIntValidator_TimerEventDefault(void* ptr, void* event);
void QIntValidator_ChildEvent(void* ptr, void* event);
void QIntValidator_ChildEventDefault(void* ptr, void* event);
void QIntValidator_CustomEvent(void* ptr, void* event);
void QIntValidator_CustomEventDefault(void* ptr, void* event);
int QKeyEvent_Matches(void* ptr, int key);
int QKeyEvent_Count(void* ptr);
int QKeyEvent_IsAutoRepeat(void* ptr);
int QKeyEvent_Key(void* ptr);
int QKeyEvent_Modifiers(void* ptr);
char* QKeyEvent_Text(void* ptr);
void* QKeySequence_NewQKeySequence();
void* QKeySequence_NewQKeySequence5(int key);
void* QKeySequence_NewQKeySequence4(void* keysequence);
void* QKeySequence_NewQKeySequence2(char* key, int format);
void* QKeySequence_NewQKeySequence3(int k1, int k2, int k3, int k4);
int QKeySequence_Count(void* ptr);
int QKeySequence_IsEmpty(void* ptr);
int QKeySequence_Matches(void* ptr, void* seq);
void QKeySequence_Swap(void* ptr, void* other);
char* QKeySequence_ToString(void* ptr, int format);
void QKeySequence_DestroyQKeySequence(void* ptr);
void* QLinearGradient_NewQLinearGradient3(double x1, double y1, double x2, double y2);
void* QLinearGradient_NewQLinearGradient();
void* QLinearGradient_NewQLinearGradient2(void* start, void* finalStop);
void QLinearGradient_SetFinalStop(void* ptr, void* stop);
void QLinearGradient_SetFinalStop2(void* ptr, double x, double y);
void QLinearGradient_SetStart(void* ptr, void* start);
void QLinearGradient_SetStart2(void* ptr, double x, double y);
void* QMatrix4x4_NewQMatrix4x4();
void* QMatrix4x4_NewQMatrix4x47(void* transform);
int QMatrix4x4_IsAffine(void* ptr);
int QMatrix4x4_IsIdentity(void* ptr);
void QMatrix4x4_LookAt(void* ptr, void* eye, void* center, void* up);
void* QMatrix4x4_Map(void* ptr, void* point);
void* QMatrix4x4_MapRect(void* ptr, void* rect);
void QMatrix4x4_Optimize(void* ptr);
void QMatrix4x4_Ortho2(void* ptr, void* rect);
void QMatrix4x4_Ortho3(void* ptr, void* rect);
void QMatrix4x4_Rotate2(void* ptr, void* quaternion);
void QMatrix4x4_Scale(void* ptr, void* vector);
void QMatrix4x4_SetColumn(void* ptr, int index, void* value);
void QMatrix4x4_SetRow(void* ptr, int index, void* value);
void QMatrix4x4_SetToIdentity(void* ptr);
void QMatrix4x4_Translate(void* ptr, void* vector);
void QMatrix4x4_Viewport2(void* ptr, void* rect);
void* QMouseEvent_NewQMouseEvent(int ty, void* localPos, int button, int buttons, int modifiers);
void* QMouseEvent_NewQMouseEvent2(int ty, void* localPos, void* screenPos, int button, int buttons, int modifiers);
void* QMouseEvent_NewQMouseEvent3(int ty, void* localPos, void* windowPos, void* screenPos, int button, int buttons, int modifiers);
int QMouseEvent_Button(void* ptr);
int QMouseEvent_Buttons(void* ptr);
int QMouseEvent_Flags(void* ptr);
void* QMouseEvent_GlobalPos(void* ptr);
int QMouseEvent_GlobalX(void* ptr);
int QMouseEvent_GlobalY(void* ptr);
void* QMouseEvent_Pos(void* ptr);
int QMouseEvent_Source(void* ptr);
int QMouseEvent_X(void* ptr);
int QMouseEvent_Y(void* ptr);
void* QMoveEvent_NewQMoveEvent(void* pos, void* oldPos);
void* QMoveEvent_OldPos(void* ptr);
void* QMoveEvent_Pos(void* ptr);
int QMovie_CacheMode(void* ptr);
void QMovie_SetCacheMode(void* ptr, int mode);
void QMovie_SetSpeed(void* ptr, int percentSpeed);
int QMovie_Speed(void* ptr);
void* QMovie_NewQMovie2(void* device, void* format, void* parent);
void* QMovie_NewQMovie(void* parent);
void* QMovie_NewQMovie3(char* fileName, void* format, void* parent);
void* QMovie_BackgroundColor(void* ptr);
int QMovie_CurrentFrameNumber(void* ptr);
void* QMovie_Device(void* ptr);
void QMovie_ConnectError(void* ptr);
void QMovie_DisconnectError(void* ptr);
void QMovie_Error(void* ptr, int error);
char* QMovie_FileName(void* ptr);
void QMovie_ConnectFinished(void* ptr);
void QMovie_DisconnectFinished(void* ptr);
void QMovie_Finished(void* ptr);
void* QMovie_Format(void* ptr);
void QMovie_ConnectFrameChanged(void* ptr);
void QMovie_DisconnectFrameChanged(void* ptr);
void QMovie_FrameChanged(void* ptr, int frameNumber);
int QMovie_FrameCount(void* ptr);
void* QMovie_FrameRect(void* ptr);
int QMovie_IsValid(void* ptr);
int QMovie_JumpToFrame(void* ptr, int frameNumber);
int QMovie_JumpToNextFrame(void* ptr);
int QMovie_LoopCount(void* ptr);
int QMovie_NextFrameDelay(void* ptr);
void QMovie_ConnectResized(void* ptr);
void QMovie_DisconnectResized(void* ptr);
void QMovie_Resized(void* ptr, void* size);
void* QMovie_ScaledSize(void* ptr);
void QMovie_SetBackgroundColor(void* ptr, void* color);
void QMovie_SetDevice(void* ptr, void* device);
void QMovie_SetFileName(void* ptr, char* fileName);
void QMovie_SetFormat(void* ptr, void* format);
void QMovie_SetPaused(void* ptr, int paused);
void QMovie_SetScaledSize(void* ptr, void* size);
void QMovie_Start(void* ptr);
void QMovie_ConnectStarted(void* ptr);
void QMovie_DisconnectStarted(void* ptr);
void QMovie_Started(void* ptr);
int QMovie_State(void* ptr);
void QMovie_ConnectStateChanged(void* ptr);
void QMovie_DisconnectStateChanged(void* ptr);
void QMovie_StateChanged(void* ptr, int state);
void QMovie_Stop(void* ptr);
void QMovie_ConnectUpdated(void* ptr);
void QMovie_DisconnectUpdated(void* ptr);
void QMovie_Updated(void* ptr, void* rect);
void QMovie_DestroyQMovie(void* ptr);
void QMovie_TimerEvent(void* ptr, void* event);
void QMovie_TimerEventDefault(void* ptr, void* event);
void QMovie_ChildEvent(void* ptr, void* event);
void QMovie_ChildEventDefault(void* ptr, void* event);
void QMovie_CustomEvent(void* ptr, void* event);
void QMovie_CustomEventDefault(void* ptr, void* event);
int QNativeGestureEvent_GestureType(void* ptr);
void* QNativeGestureEvent_GlobalPos(void* ptr);
void* QNativeGestureEvent_Pos(void* ptr);
double QNativeGestureEvent_Value(void* ptr);
void* QOffscreenSurface_NewQOffscreenSurface(void* targetScreen);
void QOffscreenSurface_Create(void* ptr);
void QOffscreenSurface_Destroy(void* ptr);
int QOffscreenSurface_IsValid(void* ptr);
void* QOffscreenSurface_Screen(void* ptr);
void QOffscreenSurface_ConnectScreenChanged(void* ptr);
void QOffscreenSurface_DisconnectScreenChanged(void* ptr);
void QOffscreenSurface_ScreenChanged(void* ptr, void* screen);
void QOffscreenSurface_SetFormat(void* ptr, void* format);
void QOffscreenSurface_SetScreen(void* ptr, void* newScreen);
void* QOffscreenSurface_Size(void* ptr);
void* QOffscreenSurface_SizeDefault(void* ptr);
int QOffscreenSurface_SurfaceType(void* ptr);
int QOffscreenSurface_SurfaceTypeDefault(void* ptr);
void QOffscreenSurface_DestroyQOffscreenSurface(void* ptr);
void QOffscreenSurface_TimerEvent(void* ptr, void* event);
void QOffscreenSurface_TimerEventDefault(void* ptr, void* event);
void QOffscreenSurface_ChildEvent(void* ptr, void* event);
void QOffscreenSurface_ChildEventDefault(void* ptr, void* event);
void QOffscreenSurface_CustomEvent(void* ptr, void* event);
void QOffscreenSurface_CustomEventDefault(void* ptr, void* event);
void QOpenGLContext_TimerEvent(void* ptr, void* event);
void QOpenGLContext_TimerEventDefault(void* ptr, void* event);
void QOpenGLContext_ChildEvent(void* ptr, void* event);
void QOpenGLContext_ChildEventDefault(void* ptr, void* event);
void QOpenGLContext_CustomEvent(void* ptr, void* event);
void QOpenGLContext_CustomEventDefault(void* ptr, void* event);
void QOpenGLContextGroup_TimerEvent(void* ptr, void* event);
void QOpenGLContextGroup_TimerEventDefault(void* ptr, void* event);
void QOpenGLContextGroup_ChildEvent(void* ptr, void* event);
void QOpenGLContextGroup_ChildEventDefault(void* ptr, void* event);
void QOpenGLContextGroup_CustomEvent(void* ptr, void* event);
void QOpenGLContextGroup_CustomEventDefault(void* ptr, void* event);
void QOpenGLDebugLogger_TimerEvent(void* ptr, void* event);
void QOpenGLDebugLogger_TimerEventDefault(void* ptr, void* event);
void QOpenGLDebugLogger_ChildEvent(void* ptr, void* event);
void QOpenGLDebugLogger_ChildEventDefault(void* ptr, void* event);
void QOpenGLDebugLogger_CustomEvent(void* ptr, void* event);
void QOpenGLDebugLogger_CustomEventDefault(void* ptr, void* event);
void QOpenGLShader_TimerEvent(void* ptr, void* event);
void QOpenGLShader_TimerEventDefault(void* ptr, void* event);
void QOpenGLShader_ChildEvent(void* ptr, void* event);
void QOpenGLShader_ChildEventDefault(void* ptr, void* event);
void QOpenGLShader_CustomEvent(void* ptr, void* event);
void QOpenGLShader_CustomEventDefault(void* ptr, void* event);
void QOpenGLShaderProgram_TimerEvent(void* ptr, void* event);
void QOpenGLShaderProgram_TimerEventDefault(void* ptr, void* event);
void QOpenGLShaderProgram_ChildEvent(void* ptr, void* event);
void QOpenGLShaderProgram_ChildEventDefault(void* ptr, void* event);
void QOpenGLShaderProgram_CustomEvent(void* ptr, void* event);
void QOpenGLShaderProgram_CustomEventDefault(void* ptr, void* event);
void QOpenGLTimeMonitor_TimerEvent(void* ptr, void* event);
void QOpenGLTimeMonitor_TimerEventDefault(void* ptr, void* event);
void QOpenGLTimeMonitor_ChildEvent(void* ptr, void* event);
void QOpenGLTimeMonitor_ChildEventDefault(void* ptr, void* event);
void QOpenGLTimeMonitor_CustomEvent(void* ptr, void* event);
void QOpenGLTimeMonitor_CustomEventDefault(void* ptr, void* event);
void QOpenGLTimerQuery_TimerEvent(void* ptr, void* event);
void QOpenGLTimerQuery_TimerEventDefault(void* ptr, void* event);
void QOpenGLTimerQuery_ChildEvent(void* ptr, void* event);
void QOpenGLTimerQuery_ChildEventDefault(void* ptr, void* event);
void QOpenGLTimerQuery_CustomEvent(void* ptr, void* event);
void QOpenGLTimerQuery_CustomEventDefault(void* ptr, void* event);
void QOpenGLVertexArrayObject_TimerEvent(void* ptr, void* event);
void QOpenGLVertexArrayObject_TimerEventDefault(void* ptr, void* event);
void QOpenGLVertexArrayObject_ChildEvent(void* ptr, void* event);
void QOpenGLVertexArrayObject_ChildEventDefault(void* ptr, void* event);
void QOpenGLVertexArrayObject_CustomEvent(void* ptr, void* event);
void QOpenGLVertexArrayObject_CustomEventDefault(void* ptr, void* event);
void QOpenGLWindow_PaintEvent(void* ptr, void* event);
void QOpenGLWindow_PaintEventDefault(void* ptr, void* event);
void QOpenGLWindow_ExposeEvent(void* ptr, void* ev);
void QOpenGLWindow_ExposeEventDefault(void* ptr, void* ev);
void QOpenGLWindow_FocusInEvent(void* ptr, void* ev);
void QOpenGLWindow_FocusInEventDefault(void* ptr, void* ev);
void QOpenGLWindow_FocusOutEvent(void* ptr, void* ev);
void QOpenGLWindow_FocusOutEventDefault(void* ptr, void* ev);
void QOpenGLWindow_HideEvent(void* ptr, void* ev);
void QOpenGLWindow_HideEventDefault(void* ptr, void* ev);
void QOpenGLWindow_KeyPressEvent(void* ptr, void* ev);
void QOpenGLWindow_KeyPressEventDefault(void* ptr, void* ev);
void QOpenGLWindow_KeyReleaseEvent(void* ptr, void* ev);
void QOpenGLWindow_KeyReleaseEventDefault(void* ptr, void* ev);
void QOpenGLWindow_MouseDoubleClickEvent(void* ptr, void* ev);
void QOpenGLWindow_MouseDoubleClickEventDefault(void* ptr, void* ev);
void QOpenGLWindow_MouseMoveEvent(void* ptr, void* ev);
void QOpenGLWindow_MouseMoveEventDefault(void* ptr, void* ev);
void QOpenGLWindow_MousePressEvent(void* ptr, void* ev);
void QOpenGLWindow_MousePressEventDefault(void* ptr, void* ev);
void QOpenGLWindow_MouseReleaseEvent(void* ptr, void* ev);
void QOpenGLWindow_MouseReleaseEventDefault(void* ptr, void* ev);
void QOpenGLWindow_MoveEvent(void* ptr, void* ev);
void QOpenGLWindow_MoveEventDefault(void* ptr, void* ev);
void QOpenGLWindow_ResizeEvent(void* ptr, void* ev);
void QOpenGLWindow_ResizeEventDefault(void* ptr, void* ev);
void QOpenGLWindow_ShowEvent(void* ptr, void* ev);
void QOpenGLWindow_ShowEventDefault(void* ptr, void* ev);
void QOpenGLWindow_TabletEvent(void* ptr, void* ev);
void QOpenGLWindow_TabletEventDefault(void* ptr, void* ev);
void QOpenGLWindow_TouchEvent(void* ptr, void* ev);
void QOpenGLWindow_TouchEventDefault(void* ptr, void* ev);
void QOpenGLWindow_WheelEvent(void* ptr, void* ev);
void QOpenGLWindow_WheelEventDefault(void* ptr, void* ev);
void QOpenGLWindow_TimerEvent(void* ptr, void* event);
void QOpenGLWindow_TimerEventDefault(void* ptr, void* event);
void QOpenGLWindow_ChildEvent(void* ptr, void* event);
void QOpenGLWindow_ChildEventDefault(void* ptr, void* event);
void QOpenGLWindow_CustomEvent(void* ptr, void* event);
void QOpenGLWindow_CustomEventDefault(void* ptr, void* event);
void* QPageLayout_NewQPageLayout();
void* QPageLayout_NewQPageLayout3(void* other);
void* QPageLayout_NewQPageLayout2(void* pageSize, int orientation, void* margins, int units, void* minMargins);
void* QPageLayout_FullRectPixels(void* ptr, int resolution);
void* QPageLayout_FullRectPoints(void* ptr);
int QPageLayout_IsEquivalentTo(void* ptr, void* other);
int QPageLayout_IsValid(void* ptr);
int QPageLayout_Mode(void* ptr);
int QPageLayout_Orientation(void* ptr);
void* QPageLayout_PaintRectPixels(void* ptr, int resolution);
void* QPageLayout_PaintRectPoints(void* ptr);
int QPageLayout_SetBottomMargin(void* ptr, double bottomMargin);
int QPageLayout_SetLeftMargin(void* ptr, double leftMargin);
int QPageLayout_SetMargins(void* ptr, void* margins);
void QPageLayout_SetMinimumMargins(void* ptr, void* minMargins);
void QPageLayout_SetMode(void* ptr, int mode);
void QPageLayout_SetOrientation(void* ptr, int orientation);
void QPageLayout_SetPageSize(void* ptr, void* pageSize, void* minMargins);
int QPageLayout_SetRightMargin(void* ptr, double rightMargin);
int QPageLayout_SetTopMargin(void* ptr, double topMargin);
void QPageLayout_SetUnits(void* ptr, int units);
void QPageLayout_Swap(void* ptr, void* other);
int QPageLayout_Units(void* ptr);
void QPageLayout_DestroyQPageLayout(void* ptr);
void* QPageSize_NewQPageSize();
void* QPageSize_NewQPageSize2(int pageSize);
void* QPageSize_NewQPageSize5(void* other);
void* QPageSize_NewQPageSize3(void* pointSize, char* name, int matchPolicy);
void* QPageSize_NewQPageSize4(void* size, int units, char* name, int matchPolicy);
int QPageSize_QPageSize_DefinitionUnits2(int pageSizeId);
int QPageSize_DefinitionUnits(void* ptr);
int QPageSize_QPageSize_Id2(void* pointSize, int matchPolicy);
int QPageSize_QPageSize_Id3(void* size, int units, int matchPolicy);
int QPageSize_QPageSize_Id4(int windowsId);
int QPageSize_Id(void* ptr);
int QPageSize_IsEquivalentTo(void* ptr, void* other);
int QPageSize_IsValid(void* ptr);
char* QPageSize_QPageSize_Key2(int pageSizeId);
char* QPageSize_Key(void* ptr);
char* QPageSize_QPageSize_Name2(int pageSizeId);
char* QPageSize_Name(void* ptr);
void* QPageSize_RectPixels(void* ptr, int resolution);
void* QPageSize_RectPoints(void* ptr);
void* QPageSize_QPageSize_SizePixels2(int pageSizeId, int resolution);
void* QPageSize_SizePixels(void* ptr, int resolution);
void* QPageSize_QPageSize_SizePoints2(int pageSizeId);
void* QPageSize_SizePoints(void* ptr);
void QPageSize_Swap(void* ptr, void* other);
int QPageSize_QPageSize_WindowsId2(int pageSizeId);
int QPageSize_WindowsId(void* ptr);
void QPageSize_DestroyQPageSize(void* ptr);
int QPagedPaintDevice_NewPage(void* ptr);
int QPagedPaintDevice_PageSize(void* ptr);
int QPagedPaintDevice_SetPageLayout(void* ptr, void* newPageLayout);
int QPagedPaintDevice_SetPageMargins(void* ptr, void* margins);
int QPagedPaintDevice_SetPageMargins2(void* ptr, void* margins, int units);
int QPagedPaintDevice_SetPageOrientation(void* ptr, int orientation);
int QPagedPaintDevice_SetPageSize(void* ptr, void* pageSize);
void QPagedPaintDevice_DestroyQPagedPaintDevice(void* ptr);
char* QPagedPaintDevice_ObjectNameAbs(void* ptr);
void QPagedPaintDevice_SetObjectNameAbs(void* ptr, char* name);
int QPaintDevice_Metric(void* ptr, int metric);
int QPaintDevice_MetricDefault(void* ptr, int metric);
void QPaintDevice_DestroyQPaintDevice(void* ptr);
int QPaintDevice_ColorCount(void* ptr);
int QPaintDevice_Depth(void* ptr);
int QPaintDevice_DevicePixelRatio(void* ptr);
int QPaintDevice_Height(void* ptr);
int QPaintDevice_HeightMM(void* ptr);
int QPaintDevice_LogicalDpiX(void* ptr);
int QPaintDevice_LogicalDpiY(void* ptr);
void* QPaintDevice_PaintEngine(void* ptr);
int QPaintDevice_PaintingActive(void* ptr);
int QPaintDevice_PhysicalDpiX(void* ptr);
int QPaintDevice_PhysicalDpiY(void* ptr);
int QPaintDevice_Width(void* ptr);
int QPaintDevice_WidthMM(void* ptr);
char* QPaintDevice_ObjectNameAbs(void* ptr);
void QPaintDevice_SetObjectNameAbs(void* ptr, char* name);
void QPaintDeviceWindow_PaintEvent(void* ptr, void* event);
void QPaintDeviceWindow_PaintEventDefault(void* ptr, void* event);
void QPaintDeviceWindow_Update3(void* ptr);
void QPaintDeviceWindow_Update(void* ptr, void* rect);
void QPaintDeviceWindow_Update2(void* ptr, void* region);
void QPaintDeviceWindow_ExposeEvent(void* ptr, void* ev);
void QPaintDeviceWindow_ExposeEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_FocusInEvent(void* ptr, void* ev);
void QPaintDeviceWindow_FocusInEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_FocusOutEvent(void* ptr, void* ev);
void QPaintDeviceWindow_FocusOutEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_HideEvent(void* ptr, void* ev);
void QPaintDeviceWindow_HideEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_KeyPressEvent(void* ptr, void* ev);
void QPaintDeviceWindow_KeyPressEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_KeyReleaseEvent(void* ptr, void* ev);
void QPaintDeviceWindow_KeyReleaseEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_MouseDoubleClickEvent(void* ptr, void* ev);
void QPaintDeviceWindow_MouseDoubleClickEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_MouseMoveEvent(void* ptr, void* ev);
void QPaintDeviceWindow_MouseMoveEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_MousePressEvent(void* ptr, void* ev);
void QPaintDeviceWindow_MousePressEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_MouseReleaseEvent(void* ptr, void* ev);
void QPaintDeviceWindow_MouseReleaseEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_MoveEvent(void* ptr, void* ev);
void QPaintDeviceWindow_MoveEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_ResizeEvent(void* ptr, void* ev);
void QPaintDeviceWindow_ResizeEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_ShowEvent(void* ptr, void* ev);
void QPaintDeviceWindow_ShowEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_TabletEvent(void* ptr, void* ev);
void QPaintDeviceWindow_TabletEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_TouchEvent(void* ptr, void* ev);
void QPaintDeviceWindow_TouchEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_WheelEvent(void* ptr, void* ev);
void QPaintDeviceWindow_WheelEventDefault(void* ptr, void* ev);
void QPaintDeviceWindow_TimerEvent(void* ptr, void* event);
void QPaintDeviceWindow_TimerEventDefault(void* ptr, void* event);
void QPaintDeviceWindow_ChildEvent(void* ptr, void* event);
void QPaintDeviceWindow_ChildEventDefault(void* ptr, void* event);
void QPaintDeviceWindow_CustomEvent(void* ptr, void* event);
void QPaintDeviceWindow_CustomEventDefault(void* ptr, void* event);
void QPaintEngine_DrawPolygon(void* ptr, void* points, int pointCount, int mode);
void QPaintEngine_DrawPolygonDefault(void* ptr, void* points, int pointCount, int mode);
int QPaintEngine_Begin(void* ptr, void* pdev);
void QPaintEngine_DrawLines(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawLinesDefault(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawPixmap(void* ptr, void* r, void* pm, void* sr);
void QPaintEngine_DrawPoints(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawPointsDefault(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawRects(void* ptr, void* rects, int rectCount);
void QPaintEngine_DrawRectsDefault(void* ptr, void* rects, int rectCount);
int QPaintEngine_End(void* ptr);
int QPaintEngine_HasFeature(void* ptr, int feature);
int QPaintEngine_IsActive(void* ptr);
void* QPaintEngine_PaintDevice(void* ptr);
void* QPaintEngine_Painter(void* ptr);
void QPaintEngine_SetActive(void* ptr, int state);
int QPaintEngine_Type(void* ptr);
void QPaintEngine_UpdateState(void* ptr, void* state);
void QPaintEngine_DestroyQPaintEngine(void* ptr);
char* QPaintEngine_ObjectNameAbs(void* ptr);
void QPaintEngine_SetObjectNameAbs(void* ptr, char* name);
void* QPaintEngineState_BackgroundBrush(void* ptr);
int QPaintEngineState_BackgroundMode(void* ptr);
void* QPaintEngineState_Brush(void* ptr);
int QPaintEngineState_BrushNeedsResolving(void* ptr);
int QPaintEngineState_ClipOperation(void* ptr);
void* QPaintEngineState_ClipRegion(void* ptr);
int QPaintEngineState_CompositionMode(void* ptr);
int QPaintEngineState_IsClipEnabled(void* ptr);
double QPaintEngineState_Opacity(void* ptr);
void* QPaintEngineState_Painter(void* ptr);
int QPaintEngineState_PenNeedsResolving(void* ptr);
int QPaintEngineState_RenderHints(void* ptr);
int QPaintEngineState_State(void* ptr);
void* QPaintEvent_NewQPaintEvent2(void* paintRect);
void* QPaintEvent_NewQPaintEvent(void* paintRegion);
void* QPaintEvent_Rect(void* ptr);
void* QPaintEvent_Region(void* ptr);
void* QPainter_NewQPainter2(void* device);
int QPainter_Begin(void* ptr, void* device);
void* QPainter_BoundingRect2(void* ptr, void* rectangle, int flags, char* text);
void QPainter_DrawArc(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawChord(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawConvexPolygon2(void* ptr, void* points, int pointCount);
void QPainter_DrawConvexPolygon(void* ptr, void* points, int pointCount);
void QPainter_DrawEllipse2(void* ptr, void* rectangle);
void QPainter_DrawEllipse(void* ptr, void* rectangle);
void QPainter_DrawGlyphRun(void* ptr, void* position, void* glyphs);
void QPainter_DrawImage3(void* ptr, void* point, void* image);
void QPainter_DrawImage(void* ptr, void* target, void* image, void* source, int flags);
void QPainter_DrawLines2(void* ptr, void* lines, int lineCount);
void QPainter_DrawPicture(void* ptr, void* point, void* picture);
void QPainter_DrawPie(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawPixmap5(void* ptr, void* point, void* pixmap);
void QPainter_DrawPixmap(void* ptr, void* target, void* pixmap, void* source);
void QPainter_DrawRects2(void* ptr, void* rectangles, int rectCount);
void QPainter_DrawRects(void* ptr, void* rectangles, int rectCount);
void QPainter_DrawText(void* ptr, void* position, char* text);
void QPainter_DrawText5(void* ptr, void* rectangle, int flags, char* text, void* boundingRect);
void QPainter_DrawText8(void* ptr, void* rectangle, char* text, void* option);
void QPainter_DrawText4(void* ptr, void* rectangle, int flags, char* text, void* boundingRect);
void QPainter_DrawTiledPixmap(void* ptr, void* rectangle, void* pixmap, void* position);
void QPainter_EraseRect(void* ptr, void* rectangle);
void QPainter_FillRect5(void* ptr, void* rectangle, void* brush);
void QPainter_FillRect6(void* ptr, void* rectangle, void* color);
void QPainter_FillRect(void* ptr, void* rectangle, void* brush);
void QPainter_FillRect7(void* ptr, void* rectangle, void* color);
void QPainter_Rotate(void* ptr, double angle);
void QPainter_SetBackground(void* ptr, void* brush);
void QPainter_SetBrushOrigin(void* ptr, void* position);
void QPainter_SetClipPath(void* ptr, void* path, int operation);
void QPainter_SetClipRect3(void* ptr, void* rectangle, int operation);
void QPainter_SetClipRect(void* ptr, void* rectangle, int operation);
void QPainter_SetClipRegion(void* ptr, void* region, int operation);
void QPainter_SetViewport(void* ptr, void* rectangle);
void QPainter_SetWindow(void* ptr, void* rectangle);
void* QPainter_NewQPainter();
void* QPainter_Background(void* ptr);
int QPainter_BackgroundMode(void* ptr);
void QPainter_BeginNativePainting(void* ptr);
void* QPainter_BoundingRect3(void* ptr, int x, int y, int w, int h, int flags, char* text);
void* QPainter_Brush(void* ptr);
void* QPainter_BrushOrigin(void* ptr);
void* QPainter_ClipRegion(void* ptr);
int QPainter_CompositionMode(void* ptr);
void* QPainter_Device(void* ptr);
void QPainter_DrawArc2(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawArc3(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter_DrawChord2(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawChord3(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter_DrawConvexPolygon4(void* ptr, void* polygon);
void QPainter_DrawConvexPolygon3(void* ptr, void* polygon);
void QPainter_DrawEllipse5(void* ptr, void* center, int rx, int ry);
void QPainter_DrawEllipse4(void* ptr, void* center, double rx, double ry);
void QPainter_DrawEllipse3(void* ptr, int x, int y, int width, int height);
void QPainter_DrawImage4(void* ptr, void* point, void* image);
void QPainter_DrawImage6(void* ptr, void* point, void* image, void* source, int flags);
void QPainter_DrawImage5(void* ptr, void* point, void* image, void* source, int flags);
void QPainter_DrawImage8(void* ptr, void* rectangle, void* image);
void QPainter_DrawImage2(void* ptr, void* target, void* image, void* source, int flags);
void QPainter_DrawImage7(void* ptr, void* rectangle, void* image);
void QPainter_DrawImage9(void* ptr, int x, int y, void* image, int sx, int sy, int sw, int sh, int flags);
void QPainter_DrawLine2(void* ptr, void* line);
void QPainter_DrawLine(void* ptr, void* line);
void QPainter_DrawLine3(void* ptr, void* p1, void* p2);
void QPainter_DrawLine4(void* ptr, void* p1, void* p2);
void QPainter_DrawLine5(void* ptr, int x1, int y1, int x2, int y2);
void QPainter_DrawLines(void* ptr, void* lines, int lineCount);
void QPainter_DrawLines4(void* ptr, void* pointPairs, int lineCount);
void QPainter_DrawLines3(void* ptr, void* pointPairs, int lineCount);
void QPainter_DrawPath(void* ptr, void* path);
void QPainter_DrawPicture2(void* ptr, void* point, void* picture);
void QPainter_DrawPicture3(void* ptr, int x, int y, void* picture);
void QPainter_DrawPie2(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawPie3(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter_DrawPixmap6(void* ptr, void* point, void* pixmap);
void QPainter_DrawPixmap4(void* ptr, void* point, void* pixmap, void* source);
void QPainter_DrawPixmap3(void* ptr, void* point, void* pixmap, void* source);
void QPainter_DrawPixmap8(void* ptr, void* rectangle, void* pixmap);
void QPainter_DrawPixmap2(void* ptr, void* target, void* pixmap, void* source);
void QPainter_DrawPixmap7(void* ptr, int x, int y, void* pixmap);
void QPainter_DrawPixmap11(void* ptr, int x, int y, void* pixmap, int sx, int sy, int sw, int sh);
void QPainter_DrawPixmap10(void* ptr, int x, int y, int w, int h, void* pixmap, int sx, int sy, int sw, int sh);
void QPainter_DrawPixmap9(void* ptr, int x, int y, int width, int height, void* pixmap);
void QPainter_DrawPoint2(void* ptr, void* position);
void QPainter_DrawPoint(void* ptr, void* position);
void QPainter_DrawPoint3(void* ptr, int x, int y);
void QPainter_DrawPoints2(void* ptr, void* points, int pointCount);
void QPainter_DrawPoints(void* ptr, void* points, int pointCount);
void QPainter_DrawPoints4(void* ptr, void* points);
void QPainter_DrawPoints3(void* ptr, void* points);
void QPainter_DrawPolygon2(void* ptr, void* points, int pointCount, int fillRule);
void QPainter_DrawPolygon(void* ptr, void* points, int pointCount, int fillRule);
void QPainter_DrawPolygon4(void* ptr, void* points, int fillRule);
void QPainter_DrawPolygon3(void* ptr, void* points, int fillRule);
void QPainter_DrawPolyline2(void* ptr, void* points, int pointCount);
void QPainter_DrawPolyline(void* ptr, void* points, int pointCount);
void QPainter_DrawPolyline4(void* ptr, void* points);
void QPainter_DrawPolyline3(void* ptr, void* points);
void QPainter_DrawRect2(void* ptr, void* rectangle);
void QPainter_DrawRect(void* ptr, void* rectangle);
void QPainter_DrawRect3(void* ptr, int x, int y, int width, int height);
void QPainter_DrawRoundedRect2(void* ptr, void* rect, double xRadius, double yRadius, int mode);
void QPainter_DrawRoundedRect(void* ptr, void* rect, double xRadius, double yRadius, int mode);
void QPainter_DrawRoundedRect3(void* ptr, int x, int y, int w, int h, double xRadius, double yRadius, int mode);
void QPainter_DrawStaticText2(void* ptr, void* topLeftPosition, void* staticText);
void QPainter_DrawStaticText(void* ptr, void* topLeftPosition, void* staticText);
void QPainter_DrawStaticText3(void* ptr, int left, int top, void* staticText);
void QPainter_DrawText3(void* ptr, void* position, char* text);
void QPainter_DrawText6(void* ptr, int x, int y, char* text);
void QPainter_DrawText7(void* ptr, int x, int y, int width, int height, int flags, char* text, void* boundingRect);
void QPainter_DrawTiledPixmap2(void* ptr, void* rectangle, void* pixmap, void* position);
void QPainter_DrawTiledPixmap3(void* ptr, int x, int y, int width, int height, void* pixmap, int sx, int sy);
int QPainter_End(void* ptr);
void QPainter_EndNativePainting(void* ptr);
void QPainter_EraseRect2(void* ptr, void* rectangle);
void QPainter_EraseRect3(void* ptr, int x, int y, int width, int height);
void QPainter_FillPath(void* ptr, void* path, void* brush);
void QPainter_FillRect3(void* ptr, void* rectangle, int style);
void QPainter_FillRect11(void* ptr, void* rectangle, int color);
void QPainter_FillRect4(void* ptr, void* rectangle, int style);
void QPainter_FillRect12(void* ptr, void* rectangle, int color);
void QPainter_FillRect2(void* ptr, int x, int y, int width, int height, int style);
void QPainter_FillRect10(void* ptr, int x, int y, int width, int height, int color);
void QPainter_FillRect8(void* ptr, int x, int y, int width, int height, void* brush);
void QPainter_FillRect9(void* ptr, int x, int y, int width, int height, void* color);
int QPainter_HasClipping(void* ptr);
int QPainter_IsActive(void* ptr);
int QPainter_LayoutDirection(void* ptr);
double QPainter_Opacity(void* ptr);
void* QPainter_PaintEngine(void* ptr);
int QPainter_RenderHints(void* ptr);
void QPainter_ResetTransform(void* ptr);
void QPainter_Restore(void* ptr);
void QPainter_Save(void* ptr);
void QPainter_Scale(void* ptr, double sx, double sy);
void QPainter_SetBackgroundMode(void* ptr, int mode);
void QPainter_SetBrush2(void* ptr, int style);
void QPainter_SetBrush(void* ptr, void* brush);
void QPainter_SetBrushOrigin2(void* ptr, void* position);
void QPainter_SetBrushOrigin3(void* ptr, int x, int y);
void QPainter_SetClipRect2(void* ptr, int x, int y, int width, int height, int operation);
void QPainter_SetClipping(void* ptr, int enable);
void QPainter_SetCompositionMode(void* ptr, int mode);
void QPainter_SetFont(void* ptr, void* font);
void QPainter_SetLayoutDirection(void* ptr, int direction);
void QPainter_SetOpacity(void* ptr, double opacity);
void QPainter_SetPen3(void* ptr, int style);
void QPainter_SetPen2(void* ptr, void* color);
void QPainter_SetPen(void* ptr, void* pen);
void QPainter_SetRenderHint(void* ptr, int hint, int on);
void QPainter_SetRenderHints(void* ptr, int hints, int on);
void QPainter_SetTransform(void* ptr, void* transform, int combine);
void QPainter_SetViewTransformEnabled(void* ptr, int enable);
void QPainter_SetViewport2(void* ptr, int x, int y, int width, int height);
void QPainter_SetWindow2(void* ptr, int x, int y, int width, int height);
void QPainter_SetWorldMatrixEnabled(void* ptr, int enable);
void QPainter_SetWorldTransform(void* ptr, void* matrix, int combine);
void QPainter_Shear(void* ptr, double sh, double sv);
void QPainter_StrokePath(void* ptr, void* path, void* pen);
int QPainter_TestRenderHint(void* ptr, int hint);
void QPainter_Translate2(void* ptr, void* offset);
void QPainter_Translate(void* ptr, void* offset);
void QPainter_Translate3(void* ptr, double dx, double dy);
int QPainter_ViewTransformEnabled(void* ptr);
void* QPainter_Viewport(void* ptr);
void* QPainter_Window(void* ptr);
int QPainter_WorldMatrixEnabled(void* ptr);
void QPainter_DestroyQPainter(void* ptr);
void* QPainterPath_NewQPainterPath3(void* path);
void QPainterPath_AddEllipse(void* ptr, void* boundingRectangle);
void QPainterPath_AddPath(void* ptr, void* path);
void QPainterPath_AddRect(void* ptr, void* rectangle);
void QPainterPath_AddText(void* ptr, void* point, void* font, char* text);
void QPainterPath_ArcMoveTo(void* ptr, void* rectangle, double angle);
void QPainterPath_ArcTo(void* ptr, void* rectangle, double startAngle, double sweepLength);
void QPainterPath_ConnectPath(void* ptr, void* path);
int QPainterPath_Contains(void* ptr, void* point);
int QPainterPath_Contains2(void* ptr, void* rectangle);
void QPainterPath_CubicTo(void* ptr, void* c1, void* c2, void* endPoint);
int QPainterPath_ElementCount(void* ptr);
int QPainterPath_Intersects(void* ptr, void* rectangle);
int QPainterPath_IsEmpty(void* ptr);
void QPainterPath_LineTo(void* ptr, void* endPoint);
void QPainterPath_MoveTo(void* ptr, void* point);
void QPainterPath_QuadTo(void* ptr, void* c, void* endPoint);
void QPainterPath_SetElementPositionAt(void* ptr, int index, double x, double y);
void QPainterPath_SetFillRule(void* ptr, int fillRule);
void* QPainterPath_NewQPainterPath();
void* QPainterPath_NewQPainterPath2(void* startPoint);
void QPainterPath_AddEllipse3(void* ptr, void* center, double rx, double ry);
void QPainterPath_AddEllipse2(void* ptr, double x, double y, double width, double height);
void QPainterPath_AddPolygon(void* ptr, void* polygon);
void QPainterPath_AddRect2(void* ptr, double x, double y, double width, double height);
void QPainterPath_AddRegion(void* ptr, void* region);
void QPainterPath_AddRoundedRect(void* ptr, void* rect, double xRadius, double yRadius, int mode);
void QPainterPath_AddRoundedRect2(void* ptr, double x, double y, double w, double h, double xRadius, double yRadius, int mode);
void QPainterPath_AddText2(void* ptr, double x, double y, void* font, char* text);
double QPainterPath_AngleAtPercent(void* ptr, double t);
void QPainterPath_ArcMoveTo2(void* ptr, double x, double y, double width, double height, double angle);
void QPainterPath_ArcTo2(void* ptr, double x, double y, double width, double height, double startAngle, double sweepLength);
void QPainterPath_CloseSubpath(void* ptr);
int QPainterPath_Contains3(void* ptr, void* p);
void QPainterPath_CubicTo2(void* ptr, double c1X, double c1Y, double c2X, double c2Y, double endPointX, double endPointY);
int QPainterPath_FillRule(void* ptr);
int QPainterPath_Intersects2(void* ptr, void* p);
double QPainterPath_Length(void* ptr);
void QPainterPath_LineTo2(void* ptr, double x, double y);
void QPainterPath_MoveTo2(void* ptr, double x, double y);
double QPainterPath_PercentAtLength(void* ptr, double len);
void QPainterPath_QuadTo2(void* ptr, double cx, double cy, double endPointX, double endPointY);
double QPainterPath_SlopeAtPercent(void* ptr, double t);
void QPainterPath_Swap(void* ptr, void* other);
void QPainterPath_Translate2(void* ptr, void* offset);
void QPainterPath_Translate(void* ptr, double dx, double dy);
void QPainterPath_DestroyQPainterPath(void* ptr);
void* QPainterPathStroker_NewQPainterPathStroker();
void* QPainterPathStroker_NewQPainterPathStroker2(void* pen);
int QPainterPathStroker_CapStyle(void* ptr);
double QPainterPathStroker_CurveThreshold(void* ptr);
double QPainterPathStroker_DashOffset(void* ptr);
int QPainterPathStroker_JoinStyle(void* ptr);
double QPainterPathStroker_MiterLimit(void* ptr);
void QPainterPathStroker_SetCapStyle(void* ptr, int style);
void QPainterPathStroker_SetCurveThreshold(void* ptr, double threshold);
void QPainterPathStroker_SetDashOffset(void* ptr, double offset);
void QPainterPathStroker_SetDashPattern(void* ptr, int style);
void QPainterPathStroker_SetJoinStyle(void* ptr, int style);
void QPainterPathStroker_SetMiterLimit(void* ptr, double limit);
void QPainterPathStroker_SetWidth(void* ptr, double width);
double QPainterPathStroker_Width(void* ptr);
void QPainterPathStroker_DestroyQPainterPathStroker(void* ptr);
int QPalette_NColorRoles_Type();
void* QPalette_Brush(void* ptr, int group, int role);
int QPalette_IsEqual(void* ptr, int cg1, int cg2);
void QPalette_SetBrush2(void* ptr, int group, int role, void* brush);
void* QPalette_NewQPalette();
void* QPalette_NewQPalette8(void* other);
void* QPalette_NewQPalette3(int button);
void* QPalette_NewQPalette5(void* windowText, void* button, void* light, void* dark, void* mid, void* text, void* bright_text, void* base, void* window);
void* QPalette_NewQPalette2(void* button);
void* QPalette_NewQPalette4(void* button, void* window);
void* QPalette_NewQPalette7(void* p);
void* QPalette_AlternateBase(void* ptr);
void* QPalette_Base(void* ptr);
void* QPalette_BrightText(void* ptr);
void* QPalette_Brush2(void* ptr, int role);
void* QPalette_Button(void* ptr);
void* QPalette_ButtonText(void* ptr);
long long QPalette_CacheKey(void* ptr);
void* QPalette_Color(void* ptr, int group, int role);
void* QPalette_Color2(void* ptr, int role);
int QPalette_CurrentColorGroup(void* ptr);
void* QPalette_Dark(void* ptr);
void* QPalette_Highlight(void* ptr);
void* QPalette_HighlightedText(void* ptr);
int QPalette_IsBrushSet(void* ptr, int cg, int cr);
int QPalette_IsCopyOf(void* ptr, void* p);
void* QPalette_Light(void* ptr);
void* QPalette_Link(void* ptr);
void* QPalette_LinkVisited(void* ptr);
void* QPalette_Mid(void* ptr);
void* QPalette_Midlight(void* ptr);
void QPalette_SetBrush(void* ptr, int role, void* brush);
void QPalette_SetColor(void* ptr, int group, int role, void* color);
void QPalette_SetColor2(void* ptr, int role, void* color);
void QPalette_SetColorGroup(void* ptr, int cg, void* windowText, void* button, void* light, void* dark, void* mid, void* text, void* bright_text, void* base, void* window);
void QPalette_SetCurrentColorGroup(void* ptr, int cg);
void* QPalette_Shadow(void* ptr);
void QPalette_Swap(void* ptr, void* other);
void* QPalette_Text(void* ptr);
void* QPalette_ToolTipBase(void* ptr);
void* QPalette_ToolTipText(void* ptr);
void* QPalette_Window(void* ptr);
void* QPalette_WindowText(void* ptr);
void QPalette_DestroyQPalette(void* ptr);
void* QPdfWriter_NewQPdfWriter2(void* device);
void* QPdfWriter_NewQPdfWriter(char* filename);
char* QPdfWriter_Creator(void* ptr);
int QPdfWriter_NewPage(void* ptr);
int QPdfWriter_NewPageDefault(void* ptr);
void* QPdfWriter_PaintEngine(void* ptr);
void* QPdfWriter_PaintEngineDefault(void* ptr);
int QPdfWriter_Resolution(void* ptr);
void QPdfWriter_SetCreator(void* ptr, char* creator);
int QPdfWriter_SetPageLayout(void* ptr, void* newPageLayout);
int QPdfWriter_SetPageMargins(void* ptr, void* margins);
int QPdfWriter_SetPageMargins2(void* ptr, void* margins, int units);
int QPdfWriter_SetPageOrientation(void* ptr, int orientation);
int QPdfWriter_SetPageSize(void* ptr, void* pageSize);
void QPdfWriter_SetResolution(void* ptr, int resolution);
void QPdfWriter_SetTitle(void* ptr, char* title);
char* QPdfWriter_Title(void* ptr);
void QPdfWriter_DestroyQPdfWriter(void* ptr);
void QPdfWriter_TimerEvent(void* ptr, void* event);
void QPdfWriter_TimerEventDefault(void* ptr, void* event);
void QPdfWriter_ChildEvent(void* ptr, void* event);
void QPdfWriter_ChildEventDefault(void* ptr, void* event);
void QPdfWriter_CustomEvent(void* ptr, void* event);
void QPdfWriter_CustomEventDefault(void* ptr, void* event);
void* QPen_NewQPen4(void* brush, double width, int style, int cap, int join);
void* QPen_NewQPen5(void* pen);
void* QPen_Color(void* ptr);
void QPen_SetCapStyle(void* ptr, int style);
void QPen_SetColor(void* ptr, void* color);
void QPen_SetJoinStyle(void* ptr, int style);
void QPen_SetStyle(void* ptr, int style);
void QPen_SetWidth(void* ptr, int width);
int QPen_Style(void* ptr);
int QPen_Width(void* ptr);
double QPen_WidthF(void* ptr);
void* QPen_NewQPen();
void* QPen_NewQPen6(void* pen);
void* QPen_NewQPen2(int style);
void* QPen_NewQPen3(void* color);
void* QPen_Brush(void* ptr);
int QPen_CapStyle(void* ptr);
double QPen_DashOffset(void* ptr);
int QPen_IsCosmetic(void* ptr);
int QPen_IsSolid(void* ptr);
int QPen_JoinStyle(void* ptr);
double QPen_MiterLimit(void* ptr);
void QPen_SetBrush(void* ptr, void* brush);
void QPen_SetCosmetic(void* ptr, int cosmetic);
void QPen_SetDashOffset(void* ptr, double offset);
void QPen_SetMiterLimit(void* ptr, double limit);
void QPen_SetWidthF(void* ptr, double width);
void QPen_Swap(void* ptr, void* other);
void QPen_DestroyQPen(void* ptr);
int QPicture_IsNull(void* ptr);
void* QPicture_NewQPicture2(void* pic);
void* QPicture_NewQPicture(int formatVersion);
void* QPicture_BoundingRect(void* ptr);
int QPicture_Load2(void* ptr, void* dev, char* format);
int QPicture_Load(void* ptr, char* fileName, char* format);
int QPicture_Play(void* ptr, void* painter);
int QPicture_Save2(void* ptr, void* dev, char* format);
int QPicture_Save(void* ptr, char* fileName, char* format);
void QPicture_SetBoundingRect(void* ptr, void* r);
void QPicture_Swap(void* ptr, void* other);
void QPicture_DestroyQPicture(void* ptr);
char* QPicture_ObjectNameAbs(void* ptr);
void QPicture_SetObjectNameAbs(void* ptr, char* name);
void* QPixelFormat_NewQPixelFormat();
int QPixelFormat_AlphaPosition(void* ptr);
int QPixelFormat_AlphaUsage(void* ptr);
int QPixelFormat_ByteOrder(void* ptr);
int QPixelFormat_ColorModel(void* ptr);
int QPixelFormat_Premultiplied(void* ptr);
int QPixelFormat_TypeInterpretation(void* ptr);
int QPixelFormat_YuvLayout(void* ptr);
void* QPixmap_NewQPixmap3(int width, int height);
int QPixmap_Depth(void* ptr);
int QPixmap_Height(void* ptr);
int QPixmap_IsNull(void* ptr);
int QPixmap_IsQBitmap(void* ptr);
void* QPixmap_Rect(void* ptr);
void* QPixmap_Size(void* ptr);
int QPixmap_Width(void* ptr);
void* QPixmap_NewQPixmap();
void* QPixmap_NewQPixmap6(void* pixmap);
void* QPixmap_NewQPixmap8(void* size);
void* QPixmap_NewQPixmap4(char* fileName, char* format, int flags);
long long QPixmap_CacheKey(void* ptr);
int QPixmap_ConvertFromImage(void* ptr, void* image, int flags);
int QPixmap_QPixmap_DefaultDepth();
void QPixmap_Detach(void* ptr);
double QPixmap_DevicePixelRatio(void* ptr);
void QPixmap_Fill(void* ptr, void* color);
int QPixmap_HasAlpha(void* ptr);
int QPixmap_HasAlphaChannel(void* ptr);
int QPixmap_Load(void* ptr, char* fileName, char* format, int flags);
int QPixmap_LoadFromData2(void* ptr, void* data, char* format, int flags);
int QPixmap_Save2(void* ptr, void* device, char* format, int quality);
int QPixmap_Save(void* ptr, char* fileName, char* format, int quality);
void QPixmap_Scroll2(void* ptr, int dx, int dy, void* rect, void* exposed);
void QPixmap_Scroll(void* ptr, int dx, int dy, int x, int y, int width, int height, void* exposed);
void QPixmap_SetDevicePixelRatio(void* ptr, double scaleFactor);
void QPixmap_SetMask(void* ptr, void* mask);
void QPixmap_Swap(void* ptr, void* other);
void QPixmap_DestroyQPixmap(void* ptr);
int QPixmapCache_QPixmapCache_CacheLimit();
void QPixmapCache_QPixmapCache_Clear();
void QPixmapCache_QPixmapCache_SetCacheLimit(int n);
void QPlatformGraphicsBuffer_TimerEvent(void* ptr, void* event);
void QPlatformGraphicsBuffer_TimerEventDefault(void* ptr, void* event);
void QPlatformGraphicsBuffer_ChildEvent(void* ptr, void* event);
void QPlatformGraphicsBuffer_ChildEventDefault(void* ptr, void* event);
void QPlatformGraphicsBuffer_CustomEvent(void* ptr, void* event);
void QPlatformGraphicsBuffer_CustomEventDefault(void* ptr, void* event);
void* QPlatformSurfaceEvent_NewQPlatformSurfaceEvent(int surfaceEventType);
int QPlatformSurfaceEvent_SurfaceEventType(void* ptr);
void QPlatformSystemTrayIcon_TimerEvent(void* ptr, void* event);
void QPlatformSystemTrayIcon_TimerEventDefault(void* ptr, void* event);
void QPlatformSystemTrayIcon_ChildEvent(void* ptr, void* event);
void QPlatformSystemTrayIcon_ChildEventDefault(void* ptr, void* event);
void QPlatformSystemTrayIcon_CustomEvent(void* ptr, void* event);
void QPlatformSystemTrayIcon_CustomEventDefault(void* ptr, void* event);
void* QPolygon_NewQPolygon5(void* rectangle, int closed);
int QPolygon_ContainsPoint(void* ptr, void* point, int fillRule);
void QPolygon_PutPoints3(void* ptr, int index, int nPoints, void* fromPolygon, int fromIndex);
void* QPolygon_NewQPolygon();
void* QPolygon_NewQPolygon3(void* polygon);
void* QPolygon_NewQPolygon2(int size);
void* QPolygon_BoundingRect(void* ptr);
void* QPolygon_Point2(void* ptr, int index);
void QPolygon_Point(void* ptr, int index, int x, int y);
void QPolygon_SetPoint2(void* ptr, int index, void* point);
void QPolygon_SetPoint(void* ptr, int index, int x, int y);
void QPolygon_SetPoints(void* ptr, int nPoints, int points);
void QPolygon_Swap(void* ptr, void* other);
void QPolygon_Translate2(void* ptr, void* offset);
void QPolygon_Translate(void* ptr, int dx, int dy);
void QPolygon_DestroyQPolygon(void* ptr);
void* QPolygonF_NewQPolygonF6(void* polygon);
void* QPolygonF_NewQPolygonF5(void* rectangle);
int QPolygonF_ContainsPoint(void* ptr, void* point, int fillRule);
void* QPolygonF_NewQPolygonF();
void* QPolygonF_NewQPolygonF3(void* polygon);
void* QPolygonF_NewQPolygonF2(int size);
int QPolygonF_IsClosed(void* ptr);
void QPolygonF_Swap(void* ptr, void* other);
void QPolygonF_Translate(void* ptr, void* offset);
void QPolygonF_Translate2(void* ptr, double dx, double dy);
void QPolygonF_DestroyQPolygonF(void* ptr);
void* QQuaternion_NewQQuaternion();
void* QQuaternion_NewQQuaternion5(void* vector);
void QQuaternion_GetAxes(void* ptr, void* xAxis, void* yAxis, void* zAxis);
int QQuaternion_IsIdentity(void* ptr);
int QQuaternion_IsNull(void* ptr);
void QQuaternion_Normalize(void* ptr);
void QQuaternion_SetVector(void* ptr, void* vector);
void* QRadialGradient_NewQRadialGradient();
void* QRadialGradient_NewQRadialGradient6(void* center, double centerRadius, void* focalPoint, double focalRadius);
void* QRadialGradient_NewQRadialGradient4(void* center, double radius);
void* QRadialGradient_NewQRadialGradient2(void* center, double radius, void* focalPoint);
void* QRadialGradient_NewQRadialGradient7(double cx, double cy, double centerRadius, double fx, double fy, double focalRadius);
void* QRadialGradient_NewQRadialGradient5(double cx, double cy, double radius);
void* QRadialGradient_NewQRadialGradient3(double cx, double cy, double radius, double fx, double fy);
double QRadialGradient_CenterRadius(void* ptr);
double QRadialGradient_FocalRadius(void* ptr);
double QRadialGradient_Radius(void* ptr);
void QRadialGradient_SetCenter(void* ptr, void* center);
void QRadialGradient_SetCenter2(void* ptr, double x, double y);
void QRadialGradient_SetCenterRadius(void* ptr, double radius);
void QRadialGradient_SetFocalPoint(void* ptr, void* focalPoint);
void QRadialGradient_SetFocalPoint2(void* ptr, double x, double y);
void QRadialGradient_SetFocalRadius(void* ptr, double radius);
void QRadialGradient_SetRadius(void* ptr, double radius);
void QRasterPaintEngine_DrawPolygon(void* ptr, void* points, int pointCount, int mode);
void QRasterPaintEngine_DrawPolygonDefault(void* ptr, void* points, int pointCount, int mode);
void QRasterPaintEngine_DrawLines(void* ptr, void* lines, int lineCount);
void QRasterPaintEngine_DrawLinesDefault(void* ptr, void* lines, int lineCount);
void QRasterPaintEngine_DrawPoints(void* ptr, void* points, int pointCount);
void QRasterPaintEngine_DrawPointsDefault(void* ptr, void* points, int pointCount);
void QRasterPaintEngine_DrawRects(void* ptr, void* rects, int rectCount);
void QRasterPaintEngine_DrawRectsDefault(void* ptr, void* rects, int rectCount);
void* QRasterWindow_NewQRasterWindow(void* parent);
void QRasterWindow_PaintEvent(void* ptr, void* event);
void QRasterWindow_PaintEventDefault(void* ptr, void* event);
void QRasterWindow_ExposeEvent(void* ptr, void* ev);
void QRasterWindow_ExposeEventDefault(void* ptr, void* ev);
void QRasterWindow_FocusInEvent(void* ptr, void* ev);
void QRasterWindow_FocusInEventDefault(void* ptr, void* ev);
void QRasterWindow_FocusOutEvent(void* ptr, void* ev);
void QRasterWindow_FocusOutEventDefault(void* ptr, void* ev);
void QRasterWindow_HideEvent(void* ptr, void* ev);
void QRasterWindow_HideEventDefault(void* ptr, void* ev);
void QRasterWindow_KeyPressEvent(void* ptr, void* ev);
void QRasterWindow_KeyPressEventDefault(void* ptr, void* ev);
void QRasterWindow_KeyReleaseEvent(void* ptr, void* ev);
void QRasterWindow_KeyReleaseEventDefault(void* ptr, void* ev);
void QRasterWindow_MouseDoubleClickEvent(void* ptr, void* ev);
void QRasterWindow_MouseDoubleClickEventDefault(void* ptr, void* ev);
void QRasterWindow_MouseMoveEvent(void* ptr, void* ev);
void QRasterWindow_MouseMoveEventDefault(void* ptr, void* ev);
void QRasterWindow_MousePressEvent(void* ptr, void* ev);
void QRasterWindow_MousePressEventDefault(void* ptr, void* ev);
void QRasterWindow_MouseReleaseEvent(void* ptr, void* ev);
void QRasterWindow_MouseReleaseEventDefault(void* ptr, void* ev);
void QRasterWindow_MoveEvent(void* ptr, void* ev);
void QRasterWindow_MoveEventDefault(void* ptr, void* ev);
void QRasterWindow_ResizeEvent(void* ptr, void* ev);
void QRasterWindow_ResizeEventDefault(void* ptr, void* ev);
void QRasterWindow_ShowEvent(void* ptr, void* ev);
void QRasterWindow_ShowEventDefault(void* ptr, void* ev);
void QRasterWindow_TabletEvent(void* ptr, void* ev);
void QRasterWindow_TabletEventDefault(void* ptr, void* ev);
void QRasterWindow_TouchEvent(void* ptr, void* ev);
void QRasterWindow_TouchEventDefault(void* ptr, void* ev);
void QRasterWindow_WheelEvent(void* ptr, void* ev);
void QRasterWindow_WheelEventDefault(void* ptr, void* ev);
void QRasterWindow_TimerEvent(void* ptr, void* event);
void QRasterWindow_TimerEventDefault(void* ptr, void* event);
void QRasterWindow_ChildEvent(void* ptr, void* event);
void QRasterWindow_ChildEventDefault(void* ptr, void* event);
void QRasterWindow_CustomEvent(void* ptr, void* event);
void QRasterWindow_CustomEventDefault(void* ptr, void* event);
void* QRawFont_NewQRawFont();
void* QRawFont_NewQRawFont3(void* fontData, double pixelSize, int hintingPreference);
void* QRawFont_NewQRawFont4(void* other);
void* QRawFont_NewQRawFont2(char* fileName, double pixelSize, int hintingPreference);
double QRawFont_Ascent(void* ptr);
double QRawFont_AverageCharWidth(void* ptr);
double QRawFont_Descent(void* ptr);
char* QRawFont_FamilyName(void* ptr);
void* QRawFont_FontTable(void* ptr, char* tagName);
int QRawFont_HintingPreference(void* ptr);
int QRawFont_IsValid(void* ptr);
double QRawFont_Leading(void* ptr);
double QRawFont_LineThickness(void* ptr);
void QRawFont_LoadFromData(void* ptr, void* fontData, double pixelSize, int hintingPreference);
void QRawFont_LoadFromFile(void* ptr, char* fileName, double pixelSize, int hintingPreference);
double QRawFont_MaxCharWidth(void* ptr);
double QRawFont_PixelSize(void* ptr);
void QRawFont_SetPixelSize(void* ptr, double pixelSize);
int QRawFont_Style(void* ptr);
char* QRawFont_StyleName(void* ptr);
int QRawFont_SupportsCharacter(void* ptr, void* character);
void QRawFont_Swap(void* ptr, void* other);
double QRawFont_UnderlinePosition(void* ptr);
double QRawFont_UnitsPerEm(void* ptr);
int QRawFont_Weight(void* ptr);
double QRawFont_XHeight(void* ptr);
void QRawFont_DestroyQRawFont(void* ptr);
void QRegExpValidator_SetRegExp(void* ptr, void* rx);
void* QRegExpValidator_NewQRegExpValidator(void* parent);
void* QRegExpValidator_NewQRegExpValidator2(void* rx, void* parent);
void* QRegExpValidator_RegExp(void* ptr);
void QRegExpValidator_DestroyQRegExpValidator(void* ptr);
void QRegExpValidator_TimerEvent(void* ptr, void* event);
void QRegExpValidator_TimerEventDefault(void* ptr, void* event);
void QRegExpValidator_ChildEvent(void* ptr, void* event);
void QRegExpValidator_ChildEventDefault(void* ptr, void* event);
void QRegExpValidator_CustomEvent(void* ptr, void* event);
void QRegExpValidator_CustomEventDefault(void* ptr, void* event);
void* QRegion_NewQRegion();
void* QRegion_NewQRegion5(void* bm);
void* QRegion_NewQRegion3(void* a, int fillRule);
void* QRegion_NewQRegion6(void* r, int t);
void* QRegion_NewQRegion4(void* r);
void* QRegion_BoundingRect(void* ptr);
int QRegion_Contains(void* ptr, void* p);
int QRegion_Contains2(void* ptr, void* r);
void* QRegion_Intersected2(void* ptr, void* rect);
void* QRegion_Intersected(void* ptr, void* r);
int QRegion_Intersects2(void* ptr, void* rect);
int QRegion_IsEmpty(void* ptr);
int QRegion_IsNull(void* ptr);
int QRegion_RectCount(void* ptr);
void QRegion_SetRects(void* ptr, void* rects, int number);
void* QRegion_Subtracted(void* ptr, void* r);
void QRegion_Translate(void* ptr, int dx, int dy);
void* QRegion_United2(void* ptr, void* rect);
void* QRegion_United(void* ptr, void* r);
void* QRegion_Xored(void* ptr, void* r);
void* QRegion_NewQRegion2(int x, int y, int w, int h, int t);
int QRegion_Intersects(void* ptr, void* region);
void QRegion_Swap(void* ptr, void* other);
void QRegion_Translate2(void* ptr, void* point);
void* QRegion_Translated2(void* ptr, void* p);
void* QRegion_Translated(void* ptr, int dx, int dy);
void* QRegularExpressionValidator_RegularExpression(void* ptr);
void QRegularExpressionValidator_SetRegularExpression(void* ptr, void* re);
void* QRegularExpressionValidator_NewQRegularExpressionValidator(void* parent);
void* QRegularExpressionValidator_NewQRegularExpressionValidator2(void* re, void* parent);
void QRegularExpressionValidator_ConnectRegularExpressionChanged(void* ptr);
void QRegularExpressionValidator_DisconnectRegularExpressionChanged(void* ptr);
void QRegularExpressionValidator_RegularExpressionChanged(void* ptr, void* re);
void QRegularExpressionValidator_DestroyQRegularExpressionValidator(void* ptr);
void QRegularExpressionValidator_TimerEvent(void* ptr, void* event);
void QRegularExpressionValidator_TimerEventDefault(void* ptr, void* event);
void QRegularExpressionValidator_ChildEvent(void* ptr, void* event);
void QRegularExpressionValidator_ChildEventDefault(void* ptr, void* event);
void QRegularExpressionValidator_CustomEvent(void* ptr, void* event);
void QRegularExpressionValidator_CustomEventDefault(void* ptr, void* event);
void* QResizeEvent_NewQResizeEvent(void* size, void* oldSize);
void* QResizeEvent_OldSize(void* ptr);
void* QResizeEvent_Size(void* ptr);
void* QScreen_AvailableGeometry(void* ptr);
void* QScreen_AvailableSize(void* ptr);
void* QScreen_AvailableVirtualGeometry(void* ptr);
void* QScreen_AvailableVirtualSize(void* ptr);
int QScreen_Depth(void* ptr);
double QScreen_DevicePixelRatio(void* ptr);
void* QScreen_Geometry(void* ptr);
double QScreen_LogicalDotsPerInch(void* ptr);
double QScreen_LogicalDotsPerInchX(void* ptr);
double QScreen_LogicalDotsPerInchY(void* ptr);
char* QScreen_Name(void* ptr);
int QScreen_NativeOrientation(void* ptr);
int QScreen_Orientation(void* ptr);
double QScreen_PhysicalDotsPerInch(void* ptr);
double QScreen_PhysicalDotsPerInchX(void* ptr);
double QScreen_PhysicalDotsPerInchY(void* ptr);
int QScreen_PrimaryOrientation(void* ptr);
double QScreen_RefreshRate(void* ptr);
void* QScreen_Size(void* ptr);
void* QScreen_VirtualGeometry(void* ptr);
void* QScreen_VirtualSize(void* ptr);
int QScreen_AngleBetween(void* ptr, int a, int b);
void QScreen_ConnectAvailableGeometryChanged(void* ptr);
void QScreen_DisconnectAvailableGeometryChanged(void* ptr);
void QScreen_AvailableGeometryChanged(void* ptr, void* geometry);
void QScreen_ConnectGeometryChanged(void* ptr);
void QScreen_DisconnectGeometryChanged(void* ptr);
void QScreen_GeometryChanged(void* ptr, void* geometry);
int QScreen_IsLandscape(void* ptr, int o);
int QScreen_IsPortrait(void* ptr, int o);
void QScreen_ConnectLogicalDotsPerInchChanged(void* ptr);
void QScreen_DisconnectLogicalDotsPerInchChanged(void* ptr);
void QScreen_LogicalDotsPerInchChanged(void* ptr, double dpi);
void* QScreen_MapBetween(void* ptr, int a, int b, void* rect);
void QScreen_ConnectOrientationChanged(void* ptr);
void QScreen_DisconnectOrientationChanged(void* ptr);
void QScreen_OrientationChanged(void* ptr, int orientation);
int QScreen_OrientationUpdateMask(void* ptr);
void QScreen_ConnectPhysicalDotsPerInchChanged(void* ptr);
void QScreen_DisconnectPhysicalDotsPerInchChanged(void* ptr);
void QScreen_PhysicalDotsPerInchChanged(void* ptr, double dpi);
void QScreen_ConnectPrimaryOrientationChanged(void* ptr);
void QScreen_DisconnectPrimaryOrientationChanged(void* ptr);
void QScreen_PrimaryOrientationChanged(void* ptr, int orientation);
void QScreen_ConnectRefreshRateChanged(void* ptr);
void QScreen_DisconnectRefreshRateChanged(void* ptr);
void QScreen_RefreshRateChanged(void* ptr, double refreshRate);
void QScreen_SetOrientationUpdateMask(void* ptr, int mask);
void QScreen_ConnectVirtualGeometryChanged(void* ptr);
void QScreen_DisconnectVirtualGeometryChanged(void* ptr);
void QScreen_VirtualGeometryChanged(void* ptr, void* rect);
void QScreen_DestroyQScreen(void* ptr);
void QScreen_TimerEvent(void* ptr, void* event);
void QScreen_TimerEventDefault(void* ptr, void* event);
void QScreen_ChildEvent(void* ptr, void* event);
void QScreen_ChildEventDefault(void* ptr, void* event);
void QScreen_CustomEvent(void* ptr, void* event);
void QScreen_CustomEventDefault(void* ptr, void* event);
void* QScrollEvent_NewQScrollEvent(void* contentPos, void* overshootDistance, int scrollState);
int QScrollEvent_ScrollState(void* ptr);
void QScrollEvent_DestroyQScrollEvent(void* ptr);
void* QScrollPrepareEvent_NewQScrollPrepareEvent(void* startPos);
void QScrollPrepareEvent_SetContentPos(void* ptr, void* pos);
void QScrollPrepareEvent_SetContentPosRange(void* ptr, void* rect);
void QScrollPrepareEvent_SetViewportSize(void* ptr, void* size);
void QScrollPrepareEvent_DestroyQScrollPrepareEvent(void* ptr);
int QSessionManager_RestartHint(void* ptr);
char* QSessionManager_SessionKey(void* ptr);
int QSessionManager_AllowsErrorInteraction(void* ptr);
int QSessionManager_AllowsInteraction(void* ptr);
void QSessionManager_Cancel(void* ptr);
char* QSessionManager_DiscardCommand(void* ptr);
int QSessionManager_IsPhase2(void* ptr);
void QSessionManager_Release(void* ptr);
void QSessionManager_RequestPhase2(void* ptr);
char* QSessionManager_RestartCommand(void* ptr);
char* QSessionManager_SessionId(void* ptr);
void QSessionManager_SetDiscardCommand(void* ptr, char* command);
void QSessionManager_SetManagerProperty2(void* ptr, char* name, char* value);
void QSessionManager_SetManagerProperty(void* ptr, char* name, char* value);
void QSessionManager_SetRestartCommand(void* ptr, char* command);
void QSessionManager_SetRestartHint(void* ptr, int hint);
void QSessionManager_TimerEvent(void* ptr, void* event);
void QSessionManager_TimerEventDefault(void* ptr, void* event);
void QSessionManager_ChildEvent(void* ptr, void* event);
void QSessionManager_ChildEventDefault(void* ptr, void* event);
void QSessionManager_CustomEvent(void* ptr, void* event);
void QSessionManager_CustomEventDefault(void* ptr, void* event);
void* QShortcutEvent_NewQShortcutEvent(void* key, int id, int ambiguous);
int QShortcutEvent_IsAmbiguous(void* ptr);
int QShortcutEvent_ShortcutId(void* ptr);
void QShortcutEvent_DestroyQShortcutEvent(void* ptr);
void* QShowEvent_NewQShowEvent();
void* QStandardItem_NewQStandardItem();
void* QStandardItem_NewQStandardItem3(void* icon, char* text);
void* QStandardItem_NewQStandardItem2(char* text);
void* QStandardItem_NewQStandardItem4(int rows, int columns);
char* QStandardItem_AccessibleDescription(void* ptr);
char* QStandardItem_AccessibleText(void* ptr);
void QStandardItem_AppendRow2(void* ptr, void* item);
void* QStandardItem_Background(void* ptr);
int QStandardItem_CheckState(void* ptr);
void* QStandardItem_Child(void* ptr, int row, int column);
void* QStandardItem_Clone(void* ptr);
void* QStandardItem_CloneDefault(void* ptr);
int QStandardItem_Column(void* ptr);
int QStandardItem_ColumnCount(void* ptr);
void* QStandardItem_Data(void* ptr, int role);
void* QStandardItem_DataDefault(void* ptr, int role);
int QStandardItem_Flags(void* ptr);
void* QStandardItem_Foreground(void* ptr);
int QStandardItem_HasChildren(void* ptr);
void* QStandardItem_Icon(void* ptr);
void* QStandardItem_Index(void* ptr);
void QStandardItem_InsertColumns(void* ptr, int column, int count);
void QStandardItem_InsertRow2(void* ptr, int row, void* item);
void QStandardItem_InsertRows2(void* ptr, int row, int count);
int QStandardItem_IsCheckable(void* ptr);
int QStandardItem_IsDragEnabled(void* ptr);
int QStandardItem_IsDropEnabled(void* ptr);
int QStandardItem_IsEditable(void* ptr);
int QStandardItem_IsEnabled(void* ptr);
int QStandardItem_IsSelectable(void* ptr);
int QStandardItem_IsTristate(void* ptr);
void* QStandardItem_Model(void* ptr);
void* QStandardItem_Parent(void* ptr);
void QStandardItem_RemoveColumn(void* ptr, int column);
void QStandardItem_RemoveColumns(void* ptr, int column, int count);
void QStandardItem_RemoveRow(void* ptr, int row);
void QStandardItem_RemoveRows(void* ptr, int row, int count);
int QStandardItem_Row(void* ptr);
int QStandardItem_RowCount(void* ptr);
void QStandardItem_SetAccessibleDescription(void* ptr, char* accessibleDescription);
void QStandardItem_SetAccessibleText(void* ptr, char* accessibleText);
void QStandardItem_SetBackground(void* ptr, void* brush);
void QStandardItem_SetCheckState(void* ptr, int state);
void QStandardItem_SetCheckable(void* ptr, int checkable);
void QStandardItem_SetChild2(void* ptr, int row, void* item);
void QStandardItem_SetChild(void* ptr, int row, int column, void* item);
void QStandardItem_SetColumnCount(void* ptr, int columns);
void QStandardItem_SetData(void* ptr, void* value, int role);
void QStandardItem_SetDataDefault(void* ptr, void* value, int role);
void QStandardItem_SetDragEnabled(void* ptr, int dragEnabled);
void QStandardItem_SetDropEnabled(void* ptr, int dropEnabled);
void QStandardItem_SetEditable(void* ptr, int editable);
void QStandardItem_SetEnabled(void* ptr, int enabled);
void QStandardItem_SetFlags(void* ptr, int flags);
void QStandardItem_SetFont(void* ptr, void* font);
void QStandardItem_SetForeground(void* ptr, void* brush);
void QStandardItem_SetIcon(void* ptr, void* icon);
void QStandardItem_SetRowCount(void* ptr, int rows);
void QStandardItem_SetSelectable(void* ptr, int selectable);
void QStandardItem_SetSizeHint(void* ptr, void* size);
void QStandardItem_SetStatusTip(void* ptr, char* statusTip);
void QStandardItem_SetText(void* ptr, char* text);
void QStandardItem_SetTextAlignment(void* ptr, int alignment);
void QStandardItem_SetToolTip(void* ptr, char* toolTip);
void QStandardItem_SetTristate(void* ptr, int tristate);
void QStandardItem_SetWhatsThis(void* ptr, char* whatsThis);
void* QStandardItem_SizeHint(void* ptr);
void QStandardItem_SortChildren(void* ptr, int column, int order);
char* QStandardItem_StatusTip(void* ptr);
void* QStandardItem_TakeChild(void* ptr, int row, int column);
char* QStandardItem_Text(void* ptr);
int QStandardItem_TextAlignment(void* ptr);
char* QStandardItem_ToolTip(void* ptr);
int QStandardItem_Type(void* ptr);
int QStandardItem_TypeDefault(void* ptr);
char* QStandardItem_WhatsThis(void* ptr);
void QStandardItem_DestroyQStandardItem(void* ptr);
char* QStandardItem_ObjectNameAbs(void* ptr);
void QStandardItem_SetObjectNameAbs(void* ptr, char* name);
void QStandardItemModel_SetSortRole(void* ptr, int role);
int QStandardItemModel_SortRole(void* ptr);
void* QStandardItemModel_NewQStandardItemModel(void* parent);
void* QStandardItemModel_NewQStandardItemModel2(int rows, int columns, void* parent);
void QStandardItemModel_AppendRow2(void* ptr, void* item);
void QStandardItemModel_Clear(void* ptr);
int QStandardItemModel_ColumnCount(void* ptr, void* parent);
int QStandardItemModel_ColumnCountDefault(void* ptr, void* parent);
void* QStandardItemModel_Data(void* ptr, void* index, int role);
void* QStandardItemModel_DataDefault(void* ptr, void* index, int role);
int QStandardItemModel_DropMimeData(void* ptr, void* data, int action, int row, int column, void* parent);
int QStandardItemModel_DropMimeDataDefault(void* ptr, void* data, int action, int row, int column, void* parent);
int QStandardItemModel_Flags(void* ptr, void* index);
int QStandardItemModel_FlagsDefault(void* ptr, void* index);
int QStandardItemModel_HasChildren(void* ptr, void* parent);
int QStandardItemModel_HasChildrenDefault(void* ptr, void* parent);
void* QStandardItemModel_HeaderData(void* ptr, int section, int orientation, int role);
void* QStandardItemModel_HeaderDataDefault(void* ptr, int section, int orientation, int role);
void* QStandardItemModel_HorizontalHeaderItem(void* ptr, int column);
void* QStandardItemModel_Index(void* ptr, int row, int column, void* parent);
void* QStandardItemModel_IndexDefault(void* ptr, int row, int column, void* parent);
void* QStandardItemModel_IndexFromItem(void* ptr, void* item);
int QStandardItemModel_InsertColumn2(void* ptr, int column, void* parent);
int QStandardItemModel_InsertColumns(void* ptr, int column, int count, void* parent);
int QStandardItemModel_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
int QStandardItemModel_InsertRow2(void* ptr, int row, void* parent);
void QStandardItemModel_InsertRow3(void* ptr, int row, void* item);
int QStandardItemModel_InsertRows(void* ptr, int row, int count, void* parent);
int QStandardItemModel_InsertRowsDefault(void* ptr, int row, int count, void* parent);
void* QStandardItemModel_InvisibleRootItem(void* ptr);
void* QStandardItemModel_Item(void* ptr, int row, int column);
void QStandardItemModel_ConnectItemChanged(void* ptr);
void QStandardItemModel_DisconnectItemChanged(void* ptr);
void QStandardItemModel_ItemChanged(void* ptr, void* item);
void* QStandardItemModel_ItemFromIndex(void* ptr, void* index);
void* QStandardItemModel_ItemPrototype(void* ptr);
char* QStandardItemModel_MimeTypes(void* ptr);
char* QStandardItemModel_MimeTypesDefault(void* ptr);
void* QStandardItemModel_Parent(void* ptr, void* child);
void* QStandardItemModel_ParentDefault(void* ptr, void* child);
int QStandardItemModel_RemoveColumns(void* ptr, int column, int count, void* parent);
int QStandardItemModel_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
int QStandardItemModel_RemoveRows(void* ptr, int row, int count, void* parent);
int QStandardItemModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
int QStandardItemModel_RowCount(void* ptr, void* parent);
int QStandardItemModel_RowCountDefault(void* ptr, void* parent);
void QStandardItemModel_SetColumnCount(void* ptr, int columns);
int QStandardItemModel_SetData(void* ptr, void* index, void* value, int role);
int QStandardItemModel_SetDataDefault(void* ptr, void* index, void* value, int role);
int QStandardItemModel_SetHeaderData(void* ptr, int section, int orientation, void* value, int role);
int QStandardItemModel_SetHeaderDataDefault(void* ptr, int section, int orientation, void* value, int role);
void QStandardItemModel_SetHorizontalHeaderItem(void* ptr, int column, void* item);
void QStandardItemModel_SetHorizontalHeaderLabels(void* ptr, char* labels);
void QStandardItemModel_SetItem2(void* ptr, int row, void* item);
void QStandardItemModel_SetItem(void* ptr, int row, int column, void* item);
void QStandardItemModel_SetItemPrototype(void* ptr, void* item);
void QStandardItemModel_SetRowCount(void* ptr, int rows);
void QStandardItemModel_SetVerticalHeaderItem(void* ptr, int row, void* item);
void QStandardItemModel_SetVerticalHeaderLabels(void* ptr, char* labels);
void* QStandardItemModel_Sibling(void* ptr, int row, int column, void* idx);
void* QStandardItemModel_SiblingDefault(void* ptr, int row, int column, void* idx);
void QStandardItemModel_Sort(void* ptr, int column, int order);
void QStandardItemModel_SortDefault(void* ptr, int column, int order);
int QStandardItemModel_SupportedDropActions(void* ptr);
int QStandardItemModel_SupportedDropActionsDefault(void* ptr);
void* QStandardItemModel_TakeHorizontalHeaderItem(void* ptr, int column);
void* QStandardItemModel_TakeItem(void* ptr, int row, int column);
void* QStandardItemModel_TakeVerticalHeaderItem(void* ptr, int row);
void* QStandardItemModel_VerticalHeaderItem(void* ptr, int row);
void QStandardItemModel_DestroyQStandardItemModel(void* ptr);
void QStandardItemModel_FetchMore(void* ptr, void* parent);
void QStandardItemModel_FetchMoreDefault(void* ptr, void* parent);
void QStandardItemModel_Revert(void* ptr);
void QStandardItemModel_RevertDefault(void* ptr);
void QStandardItemModel_TimerEvent(void* ptr, void* event);
void QStandardItemModel_TimerEventDefault(void* ptr, void* event);
void QStandardItemModel_ChildEvent(void* ptr, void* event);
void QStandardItemModel_ChildEventDefault(void* ptr, void* event);
void QStandardItemModel_CustomEvent(void* ptr, void* event);
void QStandardItemModel_CustomEventDefault(void* ptr, void* event);
void* QStaticText_NewQStaticText();
void* QStaticText_NewQStaticText3(void* other);
void* QStaticText_NewQStaticText2(char* text);
int QStaticText_PerformanceHint(void* ptr);
void QStaticText_Prepare(void* ptr, void* matrix, void* font);
void QStaticText_SetPerformanceHint(void* ptr, int performanceHint);
void QStaticText_SetText(void* ptr, char* text);
void QStaticText_SetTextFormat(void* ptr, int textFormat);
void QStaticText_SetTextOption(void* ptr, void* textOption);
void QStaticText_SetTextWidth(void* ptr, double textWidth);
void QStaticText_Swap(void* ptr, void* other);
char* QStaticText_Text(void* ptr);
int QStaticText_TextFormat(void* ptr);
double QStaticText_TextWidth(void* ptr);
void QStaticText_DestroyQStaticText(void* ptr);
void* QStatusTipEvent_NewQStatusTipEvent(char* tip);
char* QStatusTipEvent_Tip(void* ptr);
int QStyleHints_CursorFlashTime(void* ptr);
double QStyleHints_FontSmoothingGamma(void* ptr);
int QStyleHints_KeyboardAutoRepeatRate(void* ptr);
int QStyleHints_KeyboardInputInterval(void* ptr);
int QStyleHints_MouseDoubleClickInterval(void* ptr);
int QStyleHints_MousePressAndHoldInterval(void* ptr);
int QStyleHints_PasswordMaskDelay(void* ptr);
int QStyleHints_SetFocusOnTouchRelease(void* ptr);
int QStyleHints_ShowIsFullScreen(void* ptr);
int QStyleHints_SingleClickActivation(void* ptr);
int QStyleHints_StartDragDistance(void* ptr);
int QStyleHints_StartDragTime(void* ptr);
int QStyleHints_StartDragVelocity(void* ptr);
int QStyleHints_TabFocusBehavior(void* ptr);
int QStyleHints_UseRtlExtensions(void* ptr);
void QStyleHints_ConnectCursorFlashTimeChanged(void* ptr);
void QStyleHints_DisconnectCursorFlashTimeChanged(void* ptr);
void QStyleHints_CursorFlashTimeChanged(void* ptr, int cursorFlashTime);
void QStyleHints_ConnectKeyboardInputIntervalChanged(void* ptr);
void QStyleHints_DisconnectKeyboardInputIntervalChanged(void* ptr);
void QStyleHints_KeyboardInputIntervalChanged(void* ptr, int keyboardInputInterval);
void QStyleHints_ConnectMouseDoubleClickIntervalChanged(void* ptr);
void QStyleHints_DisconnectMouseDoubleClickIntervalChanged(void* ptr);
void QStyleHints_MouseDoubleClickIntervalChanged(void* ptr, int mouseDoubleClickInterval);
void QStyleHints_ConnectStartDragDistanceChanged(void* ptr);
void QStyleHints_DisconnectStartDragDistanceChanged(void* ptr);
void QStyleHints_StartDragDistanceChanged(void* ptr, int startDragDistance);
void QStyleHints_ConnectStartDragTimeChanged(void* ptr);
void QStyleHints_DisconnectStartDragTimeChanged(void* ptr);
void QStyleHints_StartDragTimeChanged(void* ptr, int startDragTime);
void QStyleHints_TimerEvent(void* ptr, void* event);
void QStyleHints_TimerEventDefault(void* ptr, void* event);
void QStyleHints_ChildEvent(void* ptr, void* event);
void QStyleHints_ChildEventDefault(void* ptr, void* event);
void QStyleHints_CustomEvent(void* ptr, void* event);
void QStyleHints_CustomEventDefault(void* ptr, void* event);
void* QSurface_Size(void* ptr);
int QSurface_SupportsOpenGL(void* ptr);
int QSurface_SurfaceClass(void* ptr);
int QSurface_SurfaceType(void* ptr);
void QSurface_DestroyQSurface(void* ptr);
char* QSurface_ObjectNameAbs(void* ptr);
void QSurface_SetObjectNameAbs(void* ptr, char* name);
void* QSurfaceFormat_NewQSurfaceFormat();
void* QSurfaceFormat_NewQSurfaceFormat2(int options);
void* QSurfaceFormat_NewQSurfaceFormat3(void* other);
int QSurfaceFormat_AlphaBufferSize(void* ptr);
int QSurfaceFormat_BlueBufferSize(void* ptr);
int QSurfaceFormat_DepthBufferSize(void* ptr);
int QSurfaceFormat_GreenBufferSize(void* ptr);
int QSurfaceFormat_HasAlpha(void* ptr);
int QSurfaceFormat_MajorVersion(void* ptr);
int QSurfaceFormat_MinorVersion(void* ptr);
int QSurfaceFormat_Options(void* ptr);
int QSurfaceFormat_Profile(void* ptr);
int QSurfaceFormat_RedBufferSize(void* ptr);
int QSurfaceFormat_RenderableType(void* ptr);
int QSurfaceFormat_Samples(void* ptr);
void QSurfaceFormat_SetAlphaBufferSize(void* ptr, int size);
void QSurfaceFormat_SetBlueBufferSize(void* ptr, int size);
void QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(void* format);
void QSurfaceFormat_SetDepthBufferSize(void* ptr, int size);
void QSurfaceFormat_SetGreenBufferSize(void* ptr, int size);
void QSurfaceFormat_SetMajorVersion(void* ptr, int major);
void QSurfaceFormat_SetMinorVersion(void* ptr, int minor);
void QSurfaceFormat_SetOption(void* ptr, int option, int on);
void QSurfaceFormat_SetOptions(void* ptr, int options);
void QSurfaceFormat_SetProfile(void* ptr, int profile);
void QSurfaceFormat_SetRedBufferSize(void* ptr, int size);
void QSurfaceFormat_SetRenderableType(void* ptr, int ty);
void QSurfaceFormat_SetSamples(void* ptr, int numSamples);
void QSurfaceFormat_SetStencilBufferSize(void* ptr, int size);
void QSurfaceFormat_SetStereo(void* ptr, int enable);
void QSurfaceFormat_SetSwapBehavior(void* ptr, int behavior);
void QSurfaceFormat_SetSwapInterval(void* ptr, int interval);
void QSurfaceFormat_SetVersion(void* ptr, int major, int minor);
int QSurfaceFormat_StencilBufferSize(void* ptr);
int QSurfaceFormat_Stereo(void* ptr);
int QSurfaceFormat_SwapBehavior(void* ptr);
int QSurfaceFormat_SwapInterval(void* ptr);
int QSurfaceFormat_TestOption(void* ptr, int option);
void QSurfaceFormat_DestroyQSurfaceFormat(void* ptr);
void* QSyntaxHighlighter_Document(void* ptr);
void QSyntaxHighlighter_Rehighlight(void* ptr);
void QSyntaxHighlighter_RehighlightBlock(void* ptr, void* block);
void QSyntaxHighlighter_SetDocument(void* ptr, void* doc);
void QSyntaxHighlighter_DestroyQSyntaxHighlighter(void* ptr);
void QSyntaxHighlighter_TimerEvent(void* ptr, void* event);
void QSyntaxHighlighter_TimerEventDefault(void* ptr, void* event);
void QSyntaxHighlighter_ChildEvent(void* ptr, void* event);
void QSyntaxHighlighter_ChildEventDefault(void* ptr, void* event);
void QSyntaxHighlighter_CustomEvent(void* ptr, void* event);
void QSyntaxHighlighter_CustomEventDefault(void* ptr, void* event);
void* QTabletEvent_NewQTabletEvent(int ty, void* pos, void* globalPos, int device, int pointerType, double pressure, int xTilt, int yTilt, double tangentialPressure, double rotation, int z, int keyState, long long uniqueID, int button, int buttons);
int QTabletEvent_Button(void* ptr);
int QTabletEvent_Buttons(void* ptr);
int QTabletEvent_Device(void* ptr);
void* QTabletEvent_GlobalPos(void* ptr);
int QTabletEvent_GlobalX(void* ptr);
int QTabletEvent_GlobalY(void* ptr);
double QTabletEvent_HiResGlobalX(void* ptr);
double QTabletEvent_HiResGlobalY(void* ptr);
int QTabletEvent_PointerType(void* ptr);
void* QTabletEvent_Pos(void* ptr);
double QTabletEvent_Pressure(void* ptr);
double QTabletEvent_Rotation(void* ptr);
double QTabletEvent_TangentialPressure(void* ptr);
long long QTabletEvent_UniqueId(void* ptr);
int QTabletEvent_X(void* ptr);
int QTabletEvent_XTilt(void* ptr);
int QTabletEvent_Y(void* ptr);
int QTabletEvent_YTilt(void* ptr);
int QTabletEvent_Z(void* ptr);
int QTextBlock_IsValid(void* ptr);
void* QTextBlock_NewQTextBlock(void* other);
int QTextBlock_BlockFormatIndex(void* ptr);
int QTextBlock_CharFormatIndex(void* ptr);
void QTextBlock_ClearLayout(void* ptr);
int QTextBlock_Contains(void* ptr, int position);
int QTextBlock_BlockNumber(void* ptr);
void* QTextBlock_Document(void* ptr);
int QTextBlock_FirstLineNumber(void* ptr);
int QTextBlock_IsVisible(void* ptr);
void* QTextBlock_Layout(void* ptr);
int QTextBlock_Length(void* ptr);
int QTextBlock_LineCount(void* ptr);
int QTextBlock_Position(void* ptr);
int QTextBlock_Revision(void* ptr);
void QTextBlock_SetLineCount(void* ptr, int count);
void QTextBlock_SetRevision(void* ptr, int rev);
void QTextBlock_SetUserData(void* ptr, void* data);
void QTextBlock_SetUserState(void* ptr, int state);
void QTextBlock_SetVisible(void* ptr, int visible);
char* QTextBlock_Text(void* ptr);
int QTextBlock_TextDirection(void* ptr);
void* QTextBlock_TextList(void* ptr);
void* QTextBlock_UserData(void* ptr);
int QTextBlock_UserState(void* ptr);
void* QTextBlockFormat_NewQTextBlockFormat();
int QTextBlockFormat_Alignment(void* ptr);
double QTextBlockFormat_BottomMargin(void* ptr);
int QTextBlockFormat_Indent(void* ptr);
int QTextBlockFormat_IsValid(void* ptr);
double QTextBlockFormat_LeftMargin(void* ptr);
double QTextBlockFormat_LineHeight2(void* ptr);
double QTextBlockFormat_LineHeight(void* ptr, double scriptLineHeight, double scaling);
int QTextBlockFormat_LineHeightType(void* ptr);
int QTextBlockFormat_NonBreakableLines(void* ptr);
int QTextBlockFormat_PageBreakPolicy(void* ptr);
double QTextBlockFormat_RightMargin(void* ptr);
void QTextBlockFormat_SetAlignment(void* ptr, int alignment);
void QTextBlockFormat_SetBottomMargin(void* ptr, double margin);
void QTextBlockFormat_SetIndent(void* ptr, int indentation);
void QTextBlockFormat_SetLeftMargin(void* ptr, double margin);
void QTextBlockFormat_SetLineHeight(void* ptr, double height, int heightType);
void QTextBlockFormat_SetNonBreakableLines(void* ptr, int b);
void QTextBlockFormat_SetPageBreakPolicy(void* ptr, int policy);
void QTextBlockFormat_SetRightMargin(void* ptr, double margin);
void QTextBlockFormat_SetTextIndent(void* ptr, double indent);
void QTextBlockFormat_SetTopMargin(void* ptr, double margin);
double QTextBlockFormat_TextIndent(void* ptr);
double QTextBlockFormat_TopMargin(void* ptr);
void QTextBlockGroup_TimerEvent(void* ptr, void* event);
void QTextBlockGroup_TimerEventDefault(void* ptr, void* event);
void QTextBlockGroup_ChildEvent(void* ptr, void* event);
void QTextBlockGroup_ChildEventDefault(void* ptr, void* event);
void QTextBlockGroup_CustomEvent(void* ptr, void* event);
void QTextBlockGroup_CustomEventDefault(void* ptr, void* event);
void QTextBlockUserData_DestroyQTextBlockUserData(void* ptr);
char* QTextBlockUserData_ObjectNameAbs(void* ptr);
void QTextBlockUserData_SetObjectNameAbs(void* ptr, char* name);
void* QTextCharFormat_NewQTextCharFormat();
char* QTextCharFormat_AnchorNames(void* ptr);
int QTextCharFormat_FontUnderline(void* ptr);
void QTextCharFormat_SetUnderlineStyle(void* ptr, int style);
char* QTextCharFormat_AnchorHref(void* ptr);
int QTextCharFormat_FontCapitalization(void* ptr);
char* QTextCharFormat_FontFamily(void* ptr);
int QTextCharFormat_FontFixedPitch(void* ptr);
int QTextCharFormat_FontHintingPreference(void* ptr);
int QTextCharFormat_FontItalic(void* ptr);
int QTextCharFormat_FontKerning(void* ptr);
double QTextCharFormat_FontLetterSpacing(void* ptr);
int QTextCharFormat_FontLetterSpacingType(void* ptr);
int QTextCharFormat_FontOverline(void* ptr);
double QTextCharFormat_FontPointSize(void* ptr);
int QTextCharFormat_FontStretch(void* ptr);
int QTextCharFormat_FontStrikeOut(void* ptr);
int QTextCharFormat_FontStyleHint(void* ptr);
int QTextCharFormat_FontStyleStrategy(void* ptr);
int QTextCharFormat_FontWeight(void* ptr);
double QTextCharFormat_FontWordSpacing(void* ptr);
int QTextCharFormat_IsAnchor(void* ptr);
int QTextCharFormat_IsValid(void* ptr);
void QTextCharFormat_SetAnchor(void* ptr, int anchor);
void QTextCharFormat_SetAnchorHref(void* ptr, char* value);
void QTextCharFormat_SetAnchorNames(void* ptr, char* names);
void QTextCharFormat_SetFont2(void* ptr, void* font);
void QTextCharFormat_SetFont(void* ptr, void* font, int behavior);
void QTextCharFormat_SetFontCapitalization(void* ptr, int capitalization);
void QTextCharFormat_SetFontFamily(void* ptr, char* family);
void QTextCharFormat_SetFontFixedPitch(void* ptr, int fixedPitch);
void QTextCharFormat_SetFontHintingPreference(void* ptr, int hintingPreference);
void QTextCharFormat_SetFontItalic(void* ptr, int italic);
void QTextCharFormat_SetFontKerning(void* ptr, int enable);
void QTextCharFormat_SetFontLetterSpacing(void* ptr, double spacing);
void QTextCharFormat_SetFontLetterSpacingType(void* ptr, int letterSpacingType);
void QTextCharFormat_SetFontOverline(void* ptr, int overline);
void QTextCharFormat_SetFontPointSize(void* ptr, double size);
void QTextCharFormat_SetFontStretch(void* ptr, int factor);
void QTextCharFormat_SetFontStrikeOut(void* ptr, int strikeOut);
void QTextCharFormat_SetFontStyleHint(void* ptr, int hint, int strategy);
void QTextCharFormat_SetFontStyleStrategy(void* ptr, int strategy);
void QTextCharFormat_SetFontUnderline(void* ptr, int underline);
void QTextCharFormat_SetFontWeight(void* ptr, int weight);
void QTextCharFormat_SetFontWordSpacing(void* ptr, double spacing);
void QTextCharFormat_SetTextOutline(void* ptr, void* pen);
void QTextCharFormat_SetToolTip(void* ptr, char* text);
void QTextCharFormat_SetUnderlineColor(void* ptr, void* color);
void QTextCharFormat_SetVerticalAlignment(void* ptr, int alignment);
char* QTextCharFormat_ToolTip(void* ptr);
void* QTextCharFormat_UnderlineColor(void* ptr);
int QTextCharFormat_UnderlineStyle(void* ptr);
int QTextCharFormat_VerticalAlignment(void* ptr);
void QTextCursor_InsertBlock3(void* ptr, void* format, void* charFormat);
void* QTextCursor_InsertTable2(void* ptr, int rows, int columns);
void* QTextCursor_InsertTable(void* ptr, int rows, int columns, void* format);
void QTextCursor_InsertText2(void* ptr, char* text, void* format);
int QTextCursor_MovePosition(void* ptr, int operation, int mode, int n);
void* QTextCursor_NewQTextCursor();
void* QTextCursor_NewQTextCursor2(void* document);
void* QTextCursor_NewQTextCursor4(void* frame);
void* QTextCursor_NewQTextCursor5(void* block);
void* QTextCursor_NewQTextCursor7(void* cursor);
int QTextCursor_Anchor(void* ptr);
int QTextCursor_AtBlockEnd(void* ptr);
int QTextCursor_AtBlockStart(void* ptr);
int QTextCursor_AtEnd(void* ptr);
int QTextCursor_AtStart(void* ptr);
void QTextCursor_BeginEditBlock(void* ptr);
int QTextCursor_BlockNumber(void* ptr);
void QTextCursor_ClearSelection(void* ptr);
int QTextCursor_ColumnNumber(void* ptr);
void* QTextCursor_CreateList2(void* ptr, int style);
void* QTextCursor_CreateList(void* ptr, void* format);
void* QTextCursor_CurrentFrame(void* ptr);
void* QTextCursor_CurrentList(void* ptr);
void* QTextCursor_CurrentTable(void* ptr);
void QTextCursor_DeleteChar(void* ptr);
void QTextCursor_DeletePreviousChar(void* ptr);
void* QTextCursor_Document(void* ptr);
void QTextCursor_EndEditBlock(void* ptr);
int QTextCursor_HasComplexSelection(void* ptr);
int QTextCursor_HasSelection(void* ptr);
void QTextCursor_InsertBlock(void* ptr);
void QTextCursor_InsertBlock2(void* ptr, void* format);
void QTextCursor_InsertFragment(void* ptr, void* fragment);
void* QTextCursor_InsertFrame(void* ptr, void* format);
void QTextCursor_InsertHtml(void* ptr, char* html);
void QTextCursor_InsertImage4(void* ptr, void* image, char* name);
void QTextCursor_InsertImage3(void* ptr, char* name);
void QTextCursor_InsertImage(void* ptr, void* format);
void QTextCursor_InsertImage2(void* ptr, void* format, int alignment);
void* QTextCursor_InsertList2(void* ptr, int style);
void* QTextCursor_InsertList(void* ptr, void* format);
void QTextCursor_InsertText(void* ptr, char* text);
int QTextCursor_IsCopyOf(void* ptr, void* other);
int QTextCursor_IsNull(void* ptr);
void QTextCursor_JoinPreviousEditBlock(void* ptr);
int QTextCursor_KeepPositionOnInsert(void* ptr);
void QTextCursor_MergeBlockCharFormat(void* ptr, void* modifier);
void QTextCursor_MergeBlockFormat(void* ptr, void* modifier);
void QTextCursor_MergeCharFormat(void* ptr, void* modifier);
int QTextCursor_Position(void* ptr);
int QTextCursor_PositionInBlock(void* ptr);
void QTextCursor_RemoveSelectedText(void* ptr);
void QTextCursor_Select(void* ptr, int selection);
void QTextCursor_SelectedTableCells(void* ptr, int firstRow, int numRows, int firstColumn, int numColumns);
char* QTextCursor_SelectedText(void* ptr);
int QTextCursor_SelectionEnd(void* ptr);
int QTextCursor_SelectionStart(void* ptr);
void QTextCursor_SetBlockCharFormat(void* ptr, void* format);
void QTextCursor_SetBlockFormat(void* ptr, void* format);
void QTextCursor_SetCharFormat(void* ptr, void* format);
void QTextCursor_SetKeepPositionOnInsert(void* ptr, int b);
void QTextCursor_SetPosition(void* ptr, int pos, int m);
void QTextCursor_SetVerticalMovementX(void* ptr, int x);
void QTextCursor_SetVisualNavigation(void* ptr, int b);
void QTextCursor_Swap(void* ptr, void* other);
int QTextCursor_VerticalMovementX(void* ptr);
int QTextCursor_VisualNavigation(void* ptr);
void QTextCursor_DestroyQTextCursor(void* ptr);
void* QTextDocument_BaseUrl(void* ptr);
int QTextDocument_BlockCount(void* ptr);
void* QTextDocument_CreateObject(void* ptr, void* format);
void* QTextDocument_CreateObjectDefault(void* ptr, void* format);
char* QTextDocument_DefaultStyleSheet(void* ptr);
double QTextDocument_DocumentMargin(void* ptr);
double QTextDocument_IndentWidth(void* ptr);
int QTextDocument_IsModified(void* ptr);
int QTextDocument_IsUndoRedoEnabled(void* ptr);
void QTextDocument_MarkContentsDirty(void* ptr, int position, int length);
int QTextDocument_MaximumBlockCount(void* ptr);
void QTextDocument_SetBaseUrl(void* ptr, void* url);
void QTextDocument_SetDefaultStyleSheet(void* ptr, char* sheet);
void QTextDocument_SetDocumentMargin(void* ptr, double margin);
void QTextDocument_SetMaximumBlockCount(void* ptr, int maximum);
void QTextDocument_SetModified(void* ptr, int m);
void QTextDocument_SetPageSize(void* ptr, void* size);
void QTextDocument_SetTextWidth(void* ptr, double width);
void QTextDocument_SetUndoRedoEnabled(void* ptr, int enable);
void QTextDocument_SetUseDesignMetrics(void* ptr, int b);
double QTextDocument_TextWidth(void* ptr);
int QTextDocument_UseDesignMetrics(void* ptr);
void* QTextDocument_NewQTextDocument(void* parent);
void* QTextDocument_NewQTextDocument2(char* text, void* parent);
void QTextDocument_AddResource(void* ptr, int ty, void* name, void* resource);
void QTextDocument_AdjustSize(void* ptr);
int QTextDocument_AvailableRedoSteps(void* ptr);
int QTextDocument_AvailableUndoSteps(void* ptr);
void QTextDocument_ConnectBaseUrlChanged(void* ptr);
void QTextDocument_DisconnectBaseUrlChanged(void* ptr);
void QTextDocument_BaseUrlChanged(void* ptr, void* url);
void QTextDocument_ConnectBlockCountChanged(void* ptr);
void QTextDocument_DisconnectBlockCountChanged(void* ptr);
void QTextDocument_BlockCountChanged(void* ptr, int newBlockCount);
int QTextDocument_CharacterCount(void* ptr);
void QTextDocument_Clear(void* ptr);
void QTextDocument_ClearDefault(void* ptr);
void QTextDocument_ClearUndoRedoStacks(void* ptr, int stacksToClear);
void* QTextDocument_Clone(void* ptr, void* parent);
void QTextDocument_ConnectContentsChange(void* ptr);
void QTextDocument_DisconnectContentsChange(void* ptr);
void QTextDocument_ContentsChange(void* ptr, int position, int charsRemoved, int charsAdded);
void QTextDocument_ConnectContentsChanged(void* ptr);
void QTextDocument_DisconnectContentsChanged(void* ptr);
void QTextDocument_ContentsChanged(void* ptr);
int QTextDocument_DefaultCursorMoveStyle(void* ptr);
void* QTextDocument_DocumentLayout(void* ptr);
void QTextDocument_ConnectDocumentLayoutChanged(void* ptr);
void QTextDocument_DisconnectDocumentLayoutChanged(void* ptr);
void QTextDocument_DocumentLayoutChanged(void* ptr);
void QTextDocument_DrawContents(void* ptr, void* p, void* rect);
double QTextDocument_IdealWidth(void* ptr);
int QTextDocument_IsEmpty(void* ptr);
int QTextDocument_IsRedoAvailable(void* ptr);
int QTextDocument_IsUndoAvailable(void* ptr);
int QTextDocument_LineCount(void* ptr);
void* QTextDocument_LoadResource(void* ptr, int ty, void* name);
void* QTextDocument_LoadResourceDefault(void* ptr, int ty, void* name);
char* QTextDocument_MetaInformation(void* ptr, int info);
void QTextDocument_ConnectModificationChanged(void* ptr);
void QTextDocument_DisconnectModificationChanged(void* ptr);
void QTextDocument_ModificationChanged(void* ptr, int changed);
void* QTextDocument_Object(void* ptr, int objectIndex);
void* QTextDocument_ObjectForFormat(void* ptr, void* f);
int QTextDocument_PageCount(void* ptr);
void QTextDocument_Print(void* ptr, void* printer);
void QTextDocument_Redo2(void* ptr);
void QTextDocument_Redo(void* ptr, void* cursor);
void QTextDocument_ConnectRedoAvailable(void* ptr);
void QTextDocument_DisconnectRedoAvailable(void* ptr);
void QTextDocument_RedoAvailable(void* ptr, int available);
void* QTextDocument_Resource(void* ptr, int ty, void* name);
int QTextDocument_Revision(void* ptr);
void* QTextDocument_RootFrame(void* ptr);
void QTextDocument_SetDefaultCursorMoveStyle(void* ptr, int style);
void QTextDocument_SetDefaultFont(void* ptr, void* font);
void QTextDocument_SetDefaultTextOption(void* ptr, void* option);
void QTextDocument_SetDocumentLayout(void* ptr, void* layout);
void QTextDocument_SetHtml(void* ptr, char* html);
void QTextDocument_SetIndentWidth(void* ptr, double width);
void QTextDocument_SetMetaInformation(void* ptr, int info, char* stri);
void QTextDocument_SetPlainText(void* ptr, char* text);
char* QTextDocument_ToHtml(void* ptr, void* encoding);
char* QTextDocument_ToPlainText(void* ptr);
void QTextDocument_Undo2(void* ptr);
void QTextDocument_Undo(void* ptr, void* cursor);
void QTextDocument_ConnectUndoAvailable(void* ptr);
void QTextDocument_DisconnectUndoAvailable(void* ptr);
void QTextDocument_UndoAvailable(void* ptr, int available);
void QTextDocument_ConnectUndoCommandAdded(void* ptr);
void QTextDocument_DisconnectUndoCommandAdded(void* ptr);
void QTextDocument_UndoCommandAdded(void* ptr);
void QTextDocument_DestroyQTextDocument(void* ptr);
void QTextDocument_TimerEvent(void* ptr, void* event);
void QTextDocument_TimerEventDefault(void* ptr, void* event);
void QTextDocument_ChildEvent(void* ptr, void* event);
void QTextDocument_ChildEventDefault(void* ptr, void* event);
void QTextDocument_CustomEvent(void* ptr, void* event);
void QTextDocument_CustomEventDefault(void* ptr, void* event);
void* QTextDocumentFragment_NewQTextDocumentFragment4(void* other);
void* QTextDocumentFragment_NewQTextDocumentFragment();
void* QTextDocumentFragment_NewQTextDocumentFragment3(void* cursor);
void* QTextDocumentFragment_NewQTextDocumentFragment2(void* document);
int QTextDocumentFragment_IsEmpty(void* ptr);
char* QTextDocumentFragment_ToHtml(void* ptr, void* encoding);
char* QTextDocumentFragment_ToPlainText(void* ptr);
void QTextDocumentFragment_DestroyQTextDocumentFragment(void* ptr);
void* QTextDocumentWriter_NewQTextDocumentWriter();
void* QTextDocumentWriter_NewQTextDocumentWriter2(void* device, void* format);
void* QTextDocumentWriter_NewQTextDocumentWriter3(char* fileName, void* format);
void* QTextDocumentWriter_Codec(void* ptr);
void* QTextDocumentWriter_Device(void* ptr);
char* QTextDocumentWriter_FileName(void* ptr);
void* QTextDocumentWriter_Format(void* ptr);
void QTextDocumentWriter_SetCodec(void* ptr, void* codec);
void QTextDocumentWriter_SetDevice(void* ptr, void* device);
void QTextDocumentWriter_SetFileName(void* ptr, char* fileName);
void QTextDocumentWriter_SetFormat(void* ptr, void* format);
int QTextDocumentWriter_Write(void* ptr, void* document);
int QTextDocumentWriter_Write2(void* ptr, void* fragment);
void QTextDocumentWriter_DestroyQTextDocumentWriter(void* ptr);
void* QTextFormat_NewQTextFormat3(void* other);
void QTextFormat_SetObjectIndex(void* ptr, int index);
void* QTextFormat_NewQTextFormat();
void* QTextFormat_NewQTextFormat2(int ty);
void* QTextFormat_Background(void* ptr);
int QTextFormat_BoolProperty(void* ptr, int propertyId);
void* QTextFormat_BrushProperty(void* ptr, int propertyId);
void QTextFormat_ClearBackground(void* ptr);
void QTextFormat_ClearForeground(void* ptr);
void QTextFormat_ClearProperty(void* ptr, int propertyId);
void* QTextFormat_ColorProperty(void* ptr, int propertyId);
double QTextFormat_DoubleProperty(void* ptr, int propertyId);
void* QTextFormat_Foreground(void* ptr);
int QTextFormat_HasProperty(void* ptr, int propertyId);
int QTextFormat_IntProperty(void* ptr, int propertyId);
int QTextFormat_IsBlockFormat(void* ptr);
int QTextFormat_IsCharFormat(void* ptr);
int QTextFormat_IsEmpty(void* ptr);
int QTextFormat_IsFrameFormat(void* ptr);
int QTextFormat_IsImageFormat(void* ptr);
int QTextFormat_IsListFormat(void* ptr);
int QTextFormat_IsTableCellFormat(void* ptr);
int QTextFormat_IsTableFormat(void* ptr);
int QTextFormat_IsValid(void* ptr);
int QTextFormat_LayoutDirection(void* ptr);
void QTextFormat_Merge(void* ptr, void* other);
int QTextFormat_ObjectIndex(void* ptr);
int QTextFormat_ObjectType(void* ptr);
void* QTextFormat_Property(void* ptr, int propertyId);
int QTextFormat_PropertyCount(void* ptr);
void QTextFormat_SetBackground(void* ptr, void* brush);
void QTextFormat_SetForeground(void* ptr, void* brush);
void QTextFormat_SetLayoutDirection(void* ptr, int direction);
void QTextFormat_SetObjectType(void* ptr, int ty);
void QTextFormat_SetProperty(void* ptr, int propertyId, void* value);
char* QTextFormat_StringProperty(void* ptr, int propertyId);
void QTextFormat_Swap(void* ptr, void* other);
int QTextFormat_Type(void* ptr);
void QTextFormat_DestroyQTextFormat(void* ptr);
void* QTextFragment_NewQTextFragment();
void* QTextFragment_NewQTextFragment3(void* other);
int QTextFragment_CharFormatIndex(void* ptr);
int QTextFragment_Contains(void* ptr, int position);
int QTextFragment_IsValid(void* ptr);
int QTextFragment_Length(void* ptr);
int QTextFragment_Position(void* ptr);
char* QTextFragment_Text(void* ptr);
void* QTextFrame_NewQTextFrame(void* document);
int QTextFrame_FirstPosition(void* ptr);
int QTextFrame_LastPosition(void* ptr);
void* QTextFrame_ParentFrame(void* ptr);
void QTextFrame_SetFrameFormat(void* ptr, void* format);
void QTextFrame_DestroyQTextFrame(void* ptr);
void QTextFrame_TimerEvent(void* ptr, void* event);
void QTextFrame_TimerEventDefault(void* ptr, void* event);
void QTextFrame_ChildEvent(void* ptr, void* event);
void QTextFrame_ChildEventDefault(void* ptr, void* event);
void QTextFrame_CustomEvent(void* ptr, void* event);
void QTextFrame_CustomEventDefault(void* ptr, void* event);
void* QTextFrameFormat_NewQTextFrameFormat();
double QTextFrameFormat_BottomMargin(void* ptr);
double QTextFrameFormat_LeftMargin(void* ptr);
double QTextFrameFormat_RightMargin(void* ptr);
void QTextFrameFormat_SetMargin(void* ptr, double margin);
double QTextFrameFormat_TopMargin(void* ptr);
double QTextFrameFormat_Border(void* ptr);
void* QTextFrameFormat_BorderBrush(void* ptr);
int QTextFrameFormat_BorderStyle(void* ptr);
int QTextFrameFormat_IsValid(void* ptr);
double QTextFrameFormat_Margin(void* ptr);
double QTextFrameFormat_Padding(void* ptr);
int QTextFrameFormat_PageBreakPolicy(void* ptr);
int QTextFrameFormat_Position(void* ptr);
void QTextFrameFormat_SetBorder(void* ptr, double width);
void QTextFrameFormat_SetBorderBrush(void* ptr, void* brush);
void QTextFrameFormat_SetBorderStyle(void* ptr, int style);
void QTextFrameFormat_SetBottomMargin(void* ptr, double margin);
void QTextFrameFormat_SetHeight(void* ptr, void* height);
void QTextFrameFormat_SetHeight2(void* ptr, double height);
void QTextFrameFormat_SetLeftMargin(void* ptr, double margin);
void QTextFrameFormat_SetPadding(void* ptr, double width);
void QTextFrameFormat_SetPageBreakPolicy(void* ptr, int policy);
void QTextFrameFormat_SetPosition(void* ptr, int policy);
void QTextFrameFormat_SetRightMargin(void* ptr, double margin);
void QTextFrameFormat_SetTopMargin(void* ptr, double margin);
void QTextFrameFormat_SetWidth(void* ptr, void* width);
void QTextFrameFormat_SetWidth2(void* ptr, double width);
void* QTextImageFormat_NewQTextImageFormat();
double QTextImageFormat_Height(void* ptr);
int QTextImageFormat_IsValid(void* ptr);
char* QTextImageFormat_Name(void* ptr);
void QTextImageFormat_SetHeight(void* ptr, double height);
void QTextImageFormat_SetName(void* ptr, char* name);
void QTextImageFormat_SetWidth(void* ptr, double width);
double QTextImageFormat_Width(void* ptr);
double QTextInlineObject_Ascent(void* ptr);
double QTextInlineObject_Descent(void* ptr);
int QTextInlineObject_FormatIndex(void* ptr);
double QTextInlineObject_Height(void* ptr);
int QTextInlineObject_IsValid(void* ptr);
void QTextInlineObject_SetAscent(void* ptr, double a);
void QTextInlineObject_SetDescent(void* ptr, double d);
void QTextInlineObject_SetWidth(void* ptr, double w);
int QTextInlineObject_TextDirection(void* ptr);
int QTextInlineObject_TextPosition(void* ptr);
double QTextInlineObject_Width(void* ptr);
double QTextItem_Ascent(void* ptr);
double QTextItem_Descent(void* ptr);
int QTextItem_RenderFlags(void* ptr);
char* QTextItem_Text(void* ptr);
double QTextItem_Width(void* ptr);
void QTextLayout_DrawCursor2(void* ptr, void* painter, void* position, int cursorPosition);
void QTextLayout_DrawCursor(void* ptr, void* painter, void* position, int cursorPosition, int width);
void* QTextLayout_NewQTextLayout();
void* QTextLayout_NewQTextLayout2(char* text);
void* QTextLayout_NewQTextLayout3(char* text, void* font, void* paintdevice);
void QTextLayout_BeginLayout(void* ptr);
int QTextLayout_CacheEnabled(void* ptr);
void QTextLayout_ClearAdditionalFormats(void* ptr);
void QTextLayout_ClearLayout(void* ptr);
int QTextLayout_CursorMoveStyle(void* ptr);
void QTextLayout_EndLayout(void* ptr);
int QTextLayout_IsValidCursorPosition(void* ptr, int pos);
int QTextLayout_LeftCursorPosition(void* ptr, int oldPos);
int QTextLayout_LineCount(void* ptr);
double QTextLayout_MaximumWidth(void* ptr);
double QTextLayout_MinimumWidth(void* ptr);
int QTextLayout_NextCursorPosition(void* ptr, int oldPos, int mode);
int QTextLayout_PreeditAreaPosition(void* ptr);
char* QTextLayout_PreeditAreaText(void* ptr);
int QTextLayout_PreviousCursorPosition(void* ptr, int oldPos, int mode);
int QTextLayout_RightCursorPosition(void* ptr, int oldPos);
void QTextLayout_SetCacheEnabled(void* ptr, int enable);
void QTextLayout_SetCursorMoveStyle(void* ptr, int style);
void QTextLayout_SetFont(void* ptr, void* font);
void QTextLayout_SetPosition(void* ptr, void* p);
void QTextLayout_SetPreeditArea(void* ptr, int position, char* text);
void QTextLayout_SetText(void* ptr, char* stri);
void QTextLayout_SetTextOption(void* ptr, void* option);
char* QTextLayout_Text(void* ptr);
void QTextLayout_DestroyQTextLayout(void* ptr);
void* QTextLength_NewQTextLength();
void* QTextLength_NewQTextLength2(int ty, double value);
double QTextLength_RawValue(void* ptr);
int QTextLength_Type(void* ptr);
double QTextLength_Value(void* ptr, double maximumLength);
int QTextLine_XToCursor(void* ptr, double x, int cpos);
void* QTextLine_NewQTextLine();
double QTextLine_Ascent(void* ptr);
double QTextLine_CursorToX(void* ptr, int cursorPos, int edge);
double QTextLine_CursorToX2(void* ptr, int cursorPos, int edge);
double QTextLine_Descent(void* ptr);
double QTextLine_Height(void* ptr);
double QTextLine_HorizontalAdvance(void* ptr);
int QTextLine_IsValid(void* ptr);
double QTextLine_Leading(void* ptr);
int QTextLine_LeadingIncluded(void* ptr);
int QTextLine_LineNumber(void* ptr);
double QTextLine_NaturalTextWidth(void* ptr);
void QTextLine_SetLeadingIncluded(void* ptr, int included);
void QTextLine_SetLineWidth(void* ptr, double width);
void QTextLine_SetNumColumns(void* ptr, int numColumns);
void QTextLine_SetNumColumns2(void* ptr, int numColumns, double alignmentWidth);
void QTextLine_SetPosition(void* ptr, void* pos);
int QTextLine_TextLength(void* ptr);
int QTextLine_TextStart(void* ptr);
double QTextLine_Width(void* ptr);
double QTextLine_X(void* ptr);
double QTextLine_Y(void* ptr);
int QTextList_ItemNumber(void* ptr, void* block);
char* QTextList_ItemText(void* ptr, void* block);
void QTextList_Add(void* ptr, void* block);
int QTextList_Count(void* ptr);
void QTextList_RemoveItem(void* ptr, int i);
void QTextList_SetFormat(void* ptr, void* format);
void QTextList_TimerEvent(void* ptr, void* event);
void QTextList_TimerEventDefault(void* ptr, void* event);
void QTextList_ChildEvent(void* ptr, void* event);
void QTextList_ChildEventDefault(void* ptr, void* event);
void QTextList_CustomEvent(void* ptr, void* event);
void QTextList_CustomEventDefault(void* ptr, void* event);
void* QTextListFormat_NewQTextListFormat();
int QTextListFormat_Indent(void* ptr);
int QTextListFormat_IsValid(void* ptr);
char* QTextListFormat_NumberPrefix(void* ptr);
char* QTextListFormat_NumberSuffix(void* ptr);
void QTextListFormat_SetIndent(void* ptr, int indentation);
void QTextListFormat_SetNumberPrefix(void* ptr, char* numberPrefix);
void QTextListFormat_SetNumberSuffix(void* ptr, char* numberSuffix);
void QTextListFormat_SetStyle(void* ptr, int style);
int QTextListFormat_Style(void* ptr);
void* QTextObject_Document(void* ptr);
int QTextObject_FormatIndex(void* ptr);
int QTextObject_ObjectIndex(void* ptr);
void QTextObject_TimerEvent(void* ptr, void* event);
void QTextObject_TimerEventDefault(void* ptr, void* event);
void QTextObject_ChildEvent(void* ptr, void* event);
void QTextObject_ChildEventDefault(void* ptr, void* event);
void QTextObject_CustomEvent(void* ptr, void* event);
void QTextObject_CustomEventDefault(void* ptr, void* event);
void QTextObjectInterface_DrawObject(void* ptr, void* painter, void* rect, void* doc, int posInDocument, void* format);
void QTextObjectInterface_DestroyQTextObjectInterface(void* ptr);
char* QTextObjectInterface_ObjectNameAbs(void* ptr);
void QTextObjectInterface_SetObjectNameAbs(void* ptr, char* name);
void* QTextOption_NewQTextOption3(void* other);
void* QTextOption_NewQTextOption();
void* QTextOption_NewQTextOption2(int alignment);
int QTextOption_Alignment(void* ptr);
int QTextOption_Flags(void* ptr);
void QTextOption_SetAlignment(void* ptr, int alignment);
void QTextOption_SetFlags(void* ptr, int flags);
void QTextOption_SetTabStop(void* ptr, double tabStop);
void QTextOption_SetTextDirection(void* ptr, int direction);
void QTextOption_SetUseDesignMetrics(void* ptr, int enable);
void QTextOption_SetWrapMode(void* ptr, int mode);
double QTextOption_TabStop(void* ptr);
int QTextOption_TextDirection(void* ptr);
int QTextOption_UseDesignMetrics(void* ptr);
int QTextOption_WrapMode(void* ptr);
void QTextOption_DestroyQTextOption(void* ptr);
void QTextTable_InsertColumns(void* ptr, int index, int columns);
void QTextTable_InsertRows(void* ptr, int index, int rows);
void QTextTable_RemoveColumns(void* ptr, int index, int columns);
void QTextTable_RemoveRows(void* ptr, int index, int rows);
void QTextTable_Resize(void* ptr, int rows, int columns);
void QTextTable_SetFormat(void* ptr, void* format);
void QTextTable_AppendColumns(void* ptr, int count);
void QTextTable_AppendRows(void* ptr, int count);
int QTextTable_Columns(void* ptr);
void QTextTable_MergeCells2(void* ptr, void* cursor);
void QTextTable_MergeCells(void* ptr, int row, int column, int numRows, int numCols);
int QTextTable_Rows(void* ptr);
void QTextTable_SplitCell(void* ptr, int row, int column, int numRows, int numCols);
void QTextTable_TimerEvent(void* ptr, void* event);
void QTextTable_TimerEventDefault(void* ptr, void* event);
void QTextTable_ChildEvent(void* ptr, void* event);
void QTextTable_ChildEventDefault(void* ptr, void* event);
void QTextTable_CustomEvent(void* ptr, void* event);
void QTextTable_CustomEventDefault(void* ptr, void* event);
void* QTextTableCell_NewQTextTableCell();
void* QTextTableCell_NewQTextTableCell2(void* other);
int QTextTableCell_Column(void* ptr);
int QTextTableCell_ColumnSpan(void* ptr);
int QTextTableCell_IsValid(void* ptr);
int QTextTableCell_Row(void* ptr);
int QTextTableCell_RowSpan(void* ptr);
void QTextTableCell_SetFormat(void* ptr, void* format);
int QTextTableCell_TableCellFormatIndex(void* ptr);
void QTextTableCell_DestroyQTextTableCell(void* ptr);
void* QTextTableCellFormat_NewQTextTableCellFormat();
double QTextTableCellFormat_BottomPadding(void* ptr);
int QTextTableCellFormat_IsValid(void* ptr);
double QTextTableCellFormat_LeftPadding(void* ptr);
double QTextTableCellFormat_RightPadding(void* ptr);
void QTextTableCellFormat_SetBottomPadding(void* ptr, double padding);
void QTextTableCellFormat_SetLeftPadding(void* ptr, double padding);
void QTextTableCellFormat_SetPadding(void* ptr, double padding);
void QTextTableCellFormat_SetRightPadding(void* ptr, double padding);
void QTextTableCellFormat_SetTopPadding(void* ptr, double padding);
double QTextTableCellFormat_TopPadding(void* ptr);
void* QTextTableFormat_NewQTextTableFormat();
int QTextTableFormat_Alignment(void* ptr);
double QTextTableFormat_CellPadding(void* ptr);
double QTextTableFormat_CellSpacing(void* ptr);
void QTextTableFormat_ClearColumnWidthConstraints(void* ptr);
int QTextTableFormat_Columns(void* ptr);
int QTextTableFormat_HeaderRowCount(void* ptr);
int QTextTableFormat_IsValid(void* ptr);
void QTextTableFormat_SetAlignment(void* ptr, int alignment);
void QTextTableFormat_SetCellPadding(void* ptr, double padding);
void QTextTableFormat_SetCellSpacing(void* ptr, double spacing);
void QTextTableFormat_SetHeaderRowCount(void* ptr, int count);
void* QTouchDevice_NewQTouchDevice();
int QTouchDevice_Capabilities(void* ptr);
int QTouchDevice_MaximumTouchPoints(void* ptr);
char* QTouchDevice_Name(void* ptr);
void QTouchDevice_SetCapabilities(void* ptr, int caps);
void QTouchDevice_SetMaximumTouchPoints(void* ptr, int max);
void QTouchDevice_SetName(void* ptr, char* name);
void QTouchDevice_SetType(void* ptr, int devType);
int QTouchDevice_Type(void* ptr);
void QTouchDevice_DestroyQTouchDevice(void* ptr);
void* QTouchEvent_Device(void* ptr);
void* QTouchEvent_Target(void* ptr);
int QTouchEvent_TouchPointStates(void* ptr);
void* QTouchEvent_Window(void* ptr);
void QTouchEvent_DestroyQTouchEvent(void* ptr);
void* QTransform_NewQTransform3(double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33);
void* QTransform_NewQTransform4(double m11, double m12, double m21, double m22, double dx, double dy);
void* QTransform_Map3(void* ptr, void* point);
void* QTransform_Map8(void* ptr, void* region);
void* QTransform_MapRect2(void* ptr, void* rectangle);
int QTransform_QTransform_QuadToSquare(void* quad, void* trans);
void* QTransform_NewQTransform();
double QTransform_Determinant(void* ptr);
double QTransform_Dx(void* ptr);
double QTransform_Dy(void* ptr);
int QTransform_IsAffine(void* ptr);
int QTransform_IsIdentity(void* ptr);
int QTransform_IsInvertible(void* ptr);
int QTransform_IsRotating(void* ptr);
int QTransform_IsScaling(void* ptr);
int QTransform_IsTranslating(void* ptr);
double QTransform_M11(void* ptr);
double QTransform_M12(void* ptr);
double QTransform_M13(void* ptr);
double QTransform_M21(void* ptr);
double QTransform_M22(void* ptr);
double QTransform_M23(void* ptr);
double QTransform_M31(void* ptr);
double QTransform_M32(void* ptr);
double QTransform_M33(void* ptr);
void QTransform_Map10(void* ptr, int x, int y, int tx, int ty);
int QTransform_QTransform_QuadToQuad(void* one, void* two, void* trans);
void QTransform_Reset(void* ptr);
void QTransform_SetMatrix(void* ptr, double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33);
int QTransform_QTransform_SquareToQuad(void* quad, void* trans);
int QTransform_Type(void* ptr);
void QValidator_ConnectChanged(void* ptr);
void QValidator_DisconnectChanged(void* ptr);
void QValidator_Changed(void* ptr);
void QValidator_SetLocale(void* ptr, void* locale);
void QValidator_DestroyQValidator(void* ptr);
void QValidator_TimerEvent(void* ptr, void* event);
void QValidator_TimerEventDefault(void* ptr, void* event);
void QValidator_ChildEvent(void* ptr, void* event);
void QValidator_ChildEventDefault(void* ptr, void* event);
void QValidator_CustomEvent(void* ptr, void* event);
void QValidator_CustomEventDefault(void* ptr, void* event);
void* QVector2D_NewQVector2D();
void* QVector2D_NewQVector2D4(void* point);
void* QVector2D_NewQVector2D5(void* point);
void* QVector2D_NewQVector2D6(void* vector);
void* QVector2D_NewQVector2D7(void* vector);
int QVector2D_IsNull(void* ptr);
void QVector2D_Normalize(void* ptr);
void* QVector2D_ToPoint(void* ptr);
void* QVector3D_NewQVector3D();
void* QVector3D_NewQVector3D4(void* point);
void* QVector3D_NewQVector3D5(void* point);
void* QVector3D_NewQVector3D6(void* vector);
void* QVector3D_NewQVector3D8(void* vector);
int QVector3D_IsNull(void* ptr);
void QVector3D_Normalize(void* ptr);
void* QVector3D_ToPoint(void* ptr);
void* QVector4D_NewQVector4D();
void* QVector4D_NewQVector4D4(void* point);
void* QVector4D_NewQVector4D5(void* point);
void* QVector4D_NewQVector4D6(void* vector);
void* QVector4D_NewQVector4D8(void* vector);
int QVector4D_IsNull(void* ptr);
void QVector4D_Normalize(void* ptr);
void* QVector4D_ToPoint(void* ptr);
void* QWhatsThisClickedEvent_NewQWhatsThisClickedEvent(char* href);
char* QWhatsThisClickedEvent_Href(void* ptr);
void* QWheelEvent_NewQWheelEvent(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int qt4Delta, int qt4Orientation, int buttons, int modifiers);
void* QWheelEvent_NewQWheelEvent4(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int qt4Delta, int qt4Orientation, int buttons, int modifiers, int phase);
void* QWheelEvent_NewQWheelEvent5(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int qt4Delta, int qt4Orientation, int buttons, int modifiers, int phase, int source);
void* QWheelEvent_AngleDelta(void* ptr);
int QWheelEvent_Buttons(void* ptr);
void* QWheelEvent_GlobalPos(void* ptr);
int QWheelEvent_GlobalX(void* ptr);
int QWheelEvent_GlobalY(void* ptr);
int QWheelEvent_Phase(void* ptr);
void* QWheelEvent_PixelDelta(void* ptr);
void* QWheelEvent_Pos(void* ptr);
int QWheelEvent_Source(void* ptr);
int QWheelEvent_X(void* ptr);
int QWheelEvent_Y(void* ptr);
int QWindow_ContentOrientation(void* ptr);
int QWindow_Flags(void* ptr);
int QWindow_IsVisible(void* ptr);
void* QWindow_MapFromGlobal(void* ptr, void* pos);
void* QWindow_MapToGlobal(void* ptr, void* pos);
int QWindow_Modality(void* ptr);
double QWindow_Opacity(void* ptr);
void QWindow_ReportContentOrientationChange(void* ptr, int orientation);
void QWindow_SetFlags(void* ptr, int flags);
void QWindow_SetHeight(void* ptr, int arg);
void QWindow_SetMaximumHeight(void* ptr, int h);
void QWindow_SetMaximumWidth(void* ptr, int w);
void QWindow_SetMinimumHeight(void* ptr, int h);
void QWindow_SetMinimumWidth(void* ptr, int w);
void QWindow_SetModality(void* ptr, int modality);
void QWindow_SetOpacity(void* ptr, double level);
void QWindow_SetTitle(void* ptr, char* v);
void QWindow_SetVisibility(void* ptr, int v);
void QWindow_SetVisible(void* ptr, int visible);
void QWindow_SetWidth(void* ptr, int arg);
void QWindow_SetX(void* ptr, int arg);
void QWindow_SetY(void* ptr, int arg);
char* QWindow_Title(void* ptr);
int QWindow_Visibility(void* ptr);
void* QWindow_NewQWindow(void* targetScreen);
void* QWindow_NewQWindow2(void* parent);
void QWindow_ConnectActiveChanged(void* ptr);
void QWindow_DisconnectActiveChanged(void* ptr);
void QWindow_ActiveChanged(void* ptr);
void QWindow_Alert(void* ptr, int msec);
void* QWindow_BaseSize(void* ptr);
int QWindow_Close(void* ptr);
void QWindow_ConnectContentOrientationChanged(void* ptr);
void QWindow_DisconnectContentOrientationChanged(void* ptr);
void QWindow_ContentOrientationChanged(void* ptr, int orientation);
void QWindow_Create(void* ptr);
void QWindow_Destroy(void* ptr);
double QWindow_DevicePixelRatio(void* ptr);
int QWindow_Event(void* ptr, void* ev);
int QWindow_EventDefault(void* ptr, void* ev);
void QWindow_ExposeEvent(void* ptr, void* ev);
void QWindow_ExposeEventDefault(void* ptr, void* ev);
char* QWindow_FilePath(void* ptr);
void QWindow_FocusInEvent(void* ptr, void* ev);
void QWindow_FocusInEventDefault(void* ptr, void* ev);
void* QWindow_FocusObject(void* ptr);
void* QWindow_FocusObjectDefault(void* ptr);
void QWindow_ConnectFocusObjectChanged(void* ptr);
void QWindow_DisconnectFocusObjectChanged(void* ptr);
void QWindow_FocusObjectChanged(void* ptr, void* object);
void QWindow_FocusOutEvent(void* ptr, void* ev);
void QWindow_FocusOutEventDefault(void* ptr, void* ev);
void* QWindow_FrameGeometry(void* ptr);
void* QWindow_FramePosition(void* ptr);
void* QWindow_QWindow_FromWinId(unsigned long long id);
void* QWindow_Geometry(void* ptr);
int QWindow_Height(void* ptr);
void QWindow_ConnectHeightChanged(void* ptr);
void QWindow_DisconnectHeightChanged(void* ptr);
void QWindow_HeightChanged(void* ptr, int arg);
void QWindow_Hide(void* ptr);
void QWindow_HideEvent(void* ptr, void* ev);
void QWindow_HideEventDefault(void* ptr, void* ev);
void* QWindow_Icon(void* ptr);
int QWindow_IsActive(void* ptr);
int QWindow_IsAncestorOf(void* ptr, void* child, int mode);
int QWindow_IsExposed(void* ptr);
int QWindow_IsModal(void* ptr);
int QWindow_IsTopLevel(void* ptr);
void QWindow_KeyPressEvent(void* ptr, void* ev);
void QWindow_KeyPressEventDefault(void* ptr, void* ev);
void QWindow_KeyReleaseEvent(void* ptr, void* ev);
void QWindow_KeyReleaseEventDefault(void* ptr, void* ev);
void QWindow_Lower(void* ptr);
void* QWindow_Mask(void* ptr);
int QWindow_MaximumHeight(void* ptr);
void QWindow_ConnectMaximumHeightChanged(void* ptr);
void QWindow_DisconnectMaximumHeightChanged(void* ptr);
void QWindow_MaximumHeightChanged(void* ptr, int arg);
void* QWindow_MaximumSize(void* ptr);
int QWindow_MaximumWidth(void* ptr);
void QWindow_ConnectMaximumWidthChanged(void* ptr);
void QWindow_DisconnectMaximumWidthChanged(void* ptr);
void QWindow_MaximumWidthChanged(void* ptr, int arg);
int QWindow_MinimumHeight(void* ptr);
void QWindow_ConnectMinimumHeightChanged(void* ptr);
void QWindow_DisconnectMinimumHeightChanged(void* ptr);
void QWindow_MinimumHeightChanged(void* ptr, int arg);
void* QWindow_MinimumSize(void* ptr);
int QWindow_MinimumWidth(void* ptr);
void QWindow_ConnectMinimumWidthChanged(void* ptr);
void QWindow_DisconnectMinimumWidthChanged(void* ptr);
void QWindow_MinimumWidthChanged(void* ptr, int arg);
void QWindow_ConnectModalityChanged(void* ptr);
void QWindow_DisconnectModalityChanged(void* ptr);
void QWindow_ModalityChanged(void* ptr, int modality);
void QWindow_MouseDoubleClickEvent(void* ptr, void* ev);
void QWindow_MouseDoubleClickEventDefault(void* ptr, void* ev);
void QWindow_MouseMoveEvent(void* ptr, void* ev);
void QWindow_MouseMoveEventDefault(void* ptr, void* ev);
void QWindow_MousePressEvent(void* ptr, void* ev);
void QWindow_MousePressEventDefault(void* ptr, void* ev);
void QWindow_MouseReleaseEvent(void* ptr, void* ev);
void QWindow_MouseReleaseEventDefault(void* ptr, void* ev);
void QWindow_MoveEvent(void* ptr, void* ev);
void QWindow_MoveEventDefault(void* ptr, void* ev);
void QWindow_ConnectOpacityChanged(void* ptr);
void QWindow_DisconnectOpacityChanged(void* ptr);
void QWindow_OpacityChanged(void* ptr, double opacity);
void* QWindow_Parent(void* ptr);
void* QWindow_Position(void* ptr);
void QWindow_Raise(void* ptr);
void QWindow_RequestActivate(void* ptr);
void QWindow_RequestUpdate(void* ptr);
void QWindow_Resize(void* ptr, void* newSize);
void QWindow_Resize2(void* ptr, int w, int h);
void QWindow_ResizeEvent(void* ptr, void* ev);
void QWindow_ResizeEventDefault(void* ptr, void* ev);
void* QWindow_Screen(void* ptr);
void QWindow_ConnectScreenChanged(void* ptr);
void QWindow_DisconnectScreenChanged(void* ptr);
void QWindow_ScreenChanged(void* ptr, void* screen);
void QWindow_SetBaseSize(void* ptr, void* size);
void QWindow_SetCursor(void* ptr, void* cursor);
void QWindow_SetFilePath(void* ptr, char* filePath);
void QWindow_SetFormat(void* ptr, void* format);
void QWindow_SetFramePosition(void* ptr, void* point);
void QWindow_SetGeometry2(void* ptr, void* rect);
void QWindow_SetGeometry(void* ptr, int posx, int posy, int w, int h);
void QWindow_SetIcon(void* ptr, void* icon);
int QWindow_SetKeyboardGrabEnabled(void* ptr, int grab);
void QWindow_SetMask(void* ptr, void* region);
void QWindow_SetMaximumSize(void* ptr, void* size);
void QWindow_SetMinimumSize(void* ptr, void* size);
int QWindow_SetMouseGrabEnabled(void* ptr, int grab);
void QWindow_SetParent(void* ptr, void* parent);
void QWindow_SetPosition(void* ptr, void* pt);
void QWindow_SetPosition2(void* ptr, int posx, int posy);
void QWindow_SetScreen(void* ptr, void* newScreen);
void QWindow_SetSizeIncrement(void* ptr, void* size);
void QWindow_SetSurfaceType(void* ptr, int surfaceType);
void QWindow_SetTransientParent(void* ptr, void* parent);
void QWindow_SetWindowState(void* ptr, int state);
void QWindow_Show(void* ptr);
void QWindow_ShowEvent(void* ptr, void* ev);
void QWindow_ShowEventDefault(void* ptr, void* ev);
void QWindow_ShowFullScreen(void* ptr);
void QWindow_ShowMaximized(void* ptr);
void QWindow_ShowMinimized(void* ptr);
void QWindow_ShowNormal(void* ptr);
void* QWindow_Size(void* ptr);
void* QWindow_SizeDefault(void* ptr);
void* QWindow_SizeIncrement(void* ptr);
int QWindow_SurfaceType(void* ptr);
int QWindow_SurfaceTypeDefault(void* ptr);
void QWindow_TabletEvent(void* ptr, void* ev);
void QWindow_TabletEventDefault(void* ptr, void* ev);
void QWindow_TouchEvent(void* ptr, void* ev);
void QWindow_TouchEventDefault(void* ptr, void* ev);
void* QWindow_TransientParent(void* ptr);
int QWindow_Type(void* ptr);
void QWindow_UnsetCursor(void* ptr);
void QWindow_ConnectVisibilityChanged(void* ptr);
void QWindow_DisconnectVisibilityChanged(void* ptr);
void QWindow_VisibilityChanged(void* ptr, int visibility);
void QWindow_ConnectVisibleChanged(void* ptr);
void QWindow_DisconnectVisibleChanged(void* ptr);
void QWindow_VisibleChanged(void* ptr, int arg);
void QWindow_WheelEvent(void* ptr, void* ev);
void QWindow_WheelEventDefault(void* ptr, void* ev);
int QWindow_Width(void* ptr);
void QWindow_ConnectWidthChanged(void* ptr);
void QWindow_DisconnectWidthChanged(void* ptr);
void QWindow_WidthChanged(void* ptr, int arg);
unsigned long long QWindow_WinId(void* ptr);
int QWindow_WindowState(void* ptr);
void QWindow_ConnectWindowStateChanged(void* ptr);
void QWindow_DisconnectWindowStateChanged(void* ptr);
void QWindow_WindowStateChanged(void* ptr, int windowState);
void QWindow_ConnectWindowTitleChanged(void* ptr);
void QWindow_DisconnectWindowTitleChanged(void* ptr);
void QWindow_WindowTitleChanged(void* ptr, char* title);
int QWindow_X(void* ptr);
void QWindow_ConnectXChanged(void* ptr);
void QWindow_DisconnectXChanged(void* ptr);
void QWindow_XChanged(void* ptr, int arg);
int QWindow_Y(void* ptr);
void QWindow_ConnectYChanged(void* ptr);
void QWindow_DisconnectYChanged(void* ptr);
void QWindow_YChanged(void* ptr, int arg);
void QWindow_DestroyQWindow(void* ptr);
void QWindow_TimerEvent(void* ptr, void* event);
void QWindow_TimerEventDefault(void* ptr, void* event);
void QWindow_ChildEvent(void* ptr, void* event);
void QWindow_ChildEventDefault(void* ptr, void* event);
void QWindow_CustomEvent(void* ptr, void* event);
void QWindow_CustomEventDefault(void* ptr, void* event);
int QWindowStateChangeEvent_OldState(void* ptr);

#ifdef __cplusplus
}
#endif

#endif