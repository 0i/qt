package gui

//#include "gui.h"
import "C"
import (
	"github.com/therecipe/qt"
	"github.com/therecipe/qt/core"
	"strings"
	"unsafe"
)

type QAbstractOpenGLFunctions struct {
	ptr unsafe.Pointer
}

type QAbstractOpenGLFunctions_ITF interface {
	QAbstractOpenGLFunctions_PTR() *QAbstractOpenGLFunctions
}

func (p *QAbstractOpenGLFunctions) QAbstractOpenGLFunctions_PTR() *QAbstractOpenGLFunctions {
	return p
}

func (p *QAbstractOpenGLFunctions) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAbstractOpenGLFunctions) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAbstractOpenGLFunctions(ptr QAbstractOpenGLFunctions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func NewQAbstractOpenGLFunctionsFromPointer(ptr unsafe.Pointer) *QAbstractOpenGLFunctions {
	var n = new(QAbstractOpenGLFunctions)
	n.SetPointer(ptr)
	return n
}

func newQAbstractOpenGLFunctionsFromPointer(ptr unsafe.Pointer) *QAbstractOpenGLFunctions {
	var n = NewQAbstractOpenGLFunctionsFromPointer(ptr)
	return n
}

type QAbstractTextDocumentLayout struct {
	core.QObject
}

type QAbstractTextDocumentLayout_ITF interface {
	core.QObject_ITF
	QAbstractTextDocumentLayout_PTR() *QAbstractTextDocumentLayout
}

func (p *QAbstractTextDocumentLayout) QAbstractTextDocumentLayout_PTR() *QAbstractTextDocumentLayout {
	return p
}

func (p *QAbstractTextDocumentLayout) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractTextDocumentLayout) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractTextDocumentLayout(ptr QAbstractTextDocumentLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractTextDocumentLayout_PTR().Pointer()
	}
	return nil
}

func NewQAbstractTextDocumentLayoutFromPointer(ptr unsafe.Pointer) *QAbstractTextDocumentLayout {
	var n = new(QAbstractTextDocumentLayout)
	n.SetPointer(ptr)
	return n
}

func newQAbstractTextDocumentLayoutFromPointer(ptr unsafe.Pointer) *QAbstractTextDocumentLayout {
	var n = NewQAbstractTextDocumentLayoutFromPointer(ptr)
	for len(n.ObjectName()) < len("QAbstractTextDocumentLayout_") {
		n.SetObjectName("QAbstractTextDocumentLayout_" + qt.Identifier())
	}
	return n
}

func (ptr *QAbstractTextDocumentLayout) AnchorAt(position core.QPointF_ITF) string {
	defer qt.Recovering("QAbstractTextDocumentLayout::anchorAt")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAbstractTextDocumentLayout_AnchorAt(ptr.Pointer(), core.PointerFromQPointF(position)))
	}
	return ""
}

//export callbackQAbstractTextDocumentLayout_BlockBoundingRect
func callbackQAbstractTextDocumentLayout_BlockBoundingRect(ptr unsafe.Pointer, ptrName *C.char, block unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::blockBoundingRect")

	if signal := qt.GetSignal(C.GoString(ptrName), "blockBoundingRect"); signal != nil {
		return core.PointerFromQRectF(signal.(func(*QTextBlock) *core.QRectF)(NewQTextBlockFromPointer(block)))
	}

	return core.PointerFromQRectF(nil)
}

func (ptr *QAbstractTextDocumentLayout) ConnectBlockBoundingRect(f func(block *QTextBlock) *core.QRectF) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::blockBoundingRect")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "blockBoundingRect", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectBlockBoundingRect(block QTextBlock_ITF) {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::blockBoundingRect")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "blockBoundingRect")
	}
}

func (ptr *QAbstractTextDocumentLayout) BlockBoundingRect(block QTextBlock_ITF) *core.QRectF {
	defer qt.Recovering("QAbstractTextDocumentLayout::blockBoundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QAbstractTextDocumentLayout_BlockBoundingRect(ptr.Pointer(), PointerFromQTextBlock(block)))
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) Document() *QTextDocument {
	defer qt.Recovering("QAbstractTextDocumentLayout::document")

	if ptr.Pointer() != nil {
		return NewQTextDocumentFromPointer(C.QAbstractTextDocumentLayout_Document(ptr.Pointer()))
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_DocumentChanged
func callbackQAbstractTextDocumentLayout_DocumentChanged(ptr unsafe.Pointer, ptrName *C.char, position C.int, charsRemoved C.int, charsAdded C.int) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::documentChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "documentChanged"); signal != nil {
		signal.(func(int, int, int))(int(position), int(charsRemoved), int(charsAdded))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectDocumentChanged(f func(position int, charsRemoved int, charsAdded int)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::documentChanged")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "documentChanged", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDocumentChanged(position int, charsRemoved int, charsAdded int) {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::documentChanged")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "documentChanged")
	}
}

func (ptr *QAbstractTextDocumentLayout) DocumentChanged(position int, charsRemoved int, charsAdded int) {
	defer qt.Recovering("QAbstractTextDocumentLayout::documentChanged")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DocumentChanged(ptr.Pointer(), C.int(position), C.int(charsRemoved), C.int(charsAdded))
	}
}

//export callbackQAbstractTextDocumentLayout_DocumentSize
func callbackQAbstractTextDocumentLayout_DocumentSize(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::documentSize")

	if signal := qt.GetSignal(C.GoString(ptrName), "documentSize"); signal != nil {
		return core.PointerFromQSizeF(signal.(func() *core.QSizeF)())
	}

	return core.PointerFromQSizeF(nil)
}

func (ptr *QAbstractTextDocumentLayout) ConnectDocumentSize(f func() *core.QSizeF) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::documentSize")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "documentSize", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDocumentSize() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::documentSize")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "documentSize")
	}
}

func (ptr *QAbstractTextDocumentLayout) DocumentSize() *core.QSizeF {
	defer qt.Recovering("QAbstractTextDocumentLayout::documentSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QAbstractTextDocumentLayout_DocumentSize(ptr.Pointer()))
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_DocumentSizeChanged
func callbackQAbstractTextDocumentLayout_DocumentSizeChanged(ptr unsafe.Pointer, ptrName *C.char, newSize unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::documentSizeChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "documentSizeChanged"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(newSize))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectDocumentSizeChanged(f func(newSize *core.QSizeF)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::documentSizeChanged")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectDocumentSizeChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "documentSizeChanged", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDocumentSizeChanged() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::documentSizeChanged")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectDocumentSizeChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "documentSizeChanged")
	}
}

func (ptr *QAbstractTextDocumentLayout) DocumentSizeChanged(newSize core.QSizeF_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::documentSizeChanged")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DocumentSizeChanged(ptr.Pointer(), core.PointerFromQSizeF(newSize))
	}
}

//export callbackQAbstractTextDocumentLayout_FrameBoundingRect
func callbackQAbstractTextDocumentLayout_FrameBoundingRect(ptr unsafe.Pointer, ptrName *C.char, frame unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::frameBoundingRect")

	if signal := qt.GetSignal(C.GoString(ptrName), "frameBoundingRect"); signal != nil {
		return core.PointerFromQRectF(signal.(func(*QTextFrame) *core.QRectF)(NewQTextFrameFromPointer(frame)))
	}

	return core.PointerFromQRectF(nil)
}

func (ptr *QAbstractTextDocumentLayout) ConnectFrameBoundingRect(f func(frame *QTextFrame) *core.QRectF) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::frameBoundingRect")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "frameBoundingRect", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectFrameBoundingRect(frame QTextFrame_ITF) {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::frameBoundingRect")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "frameBoundingRect")
	}
}

func (ptr *QAbstractTextDocumentLayout) FrameBoundingRect(frame QTextFrame_ITF) *core.QRectF {
	defer qt.Recovering("QAbstractTextDocumentLayout::frameBoundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QAbstractTextDocumentLayout_FrameBoundingRect(ptr.Pointer(), PointerFromQTextFrame(frame)))
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) HandlerForObject(objectType int) *QTextObjectInterface {
	defer qt.Recovering("QAbstractTextDocumentLayout::handlerForObject")

	if ptr.Pointer() != nil {
		return NewQTextObjectInterfaceFromPointer(C.QAbstractTextDocumentLayout_HandlerForObject(ptr.Pointer(), C.int(objectType)))
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_HitTest
func callbackQAbstractTextDocumentLayout_HitTest(ptr unsafe.Pointer, ptrName *C.char, point unsafe.Pointer, accuracy C.int) C.int {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::hitTest")

	if signal := qt.GetSignal(C.GoString(ptrName), "hitTest"); signal != nil {
		return C.int(signal.(func(*core.QPointF, core.Qt__HitTestAccuracy) int)(core.NewQPointFFromPointer(point), core.Qt__HitTestAccuracy(accuracy)))
	}

	return C.int(0)
}

func (ptr *QAbstractTextDocumentLayout) ConnectHitTest(f func(point *core.QPointF, accuracy core.Qt__HitTestAccuracy) int) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::hitTest")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "hitTest", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectHitTest(point core.QPointF_ITF, accuracy core.Qt__HitTestAccuracy) {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::hitTest")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "hitTest")
	}
}

func (ptr *QAbstractTextDocumentLayout) HitTest(point core.QPointF_ITF, accuracy core.Qt__HitTestAccuracy) int {
	defer qt.Recovering("QAbstractTextDocumentLayout::hitTest")

	if ptr.Pointer() != nil {
		return int(C.QAbstractTextDocumentLayout_HitTest(ptr.Pointer(), core.PointerFromQPointF(point), C.int(accuracy)))
	}
	return 0
}

//export callbackQAbstractTextDocumentLayout_PageCount
func callbackQAbstractTextDocumentLayout_PageCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::pageCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "pageCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAbstractTextDocumentLayout) ConnectPageCount(f func() int) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::pageCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "pageCount", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectPageCount() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::pageCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "pageCount")
	}
}

func (ptr *QAbstractTextDocumentLayout) PageCount() int {
	defer qt.Recovering("QAbstractTextDocumentLayout::pageCount")

	if ptr.Pointer() != nil {
		return int(C.QAbstractTextDocumentLayout_PageCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractTextDocumentLayout_PageCountChanged
func callbackQAbstractTextDocumentLayout_PageCountChanged(ptr unsafe.Pointer, ptrName *C.char, newPages C.int) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::pageCountChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "pageCountChanged"); signal != nil {
		signal.(func(int))(int(newPages))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectPageCountChanged(f func(newPages int)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::pageCountChanged")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectPageCountChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "pageCountChanged", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectPageCountChanged() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::pageCountChanged")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectPageCountChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "pageCountChanged")
	}
}

func (ptr *QAbstractTextDocumentLayout) PageCountChanged(newPages int) {
	defer qt.Recovering("QAbstractTextDocumentLayout::pageCountChanged")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_PageCountChanged(ptr.Pointer(), C.int(newPages))
	}
}

func (ptr *QAbstractTextDocumentLayout) PaintDevice() *QPaintDevice {
	defer qt.Recovering("QAbstractTextDocumentLayout::paintDevice")

	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QAbstractTextDocumentLayout_PaintDevice(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) RegisterHandler(objectType int, component core.QObject_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::registerHandler")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_RegisterHandler(ptr.Pointer(), C.int(objectType), core.PointerFromQObject(component))
	}
}

func (ptr *QAbstractTextDocumentLayout) SetPaintDevice(device QPaintDevice_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::setPaintDevice")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_SetPaintDevice(ptr.Pointer(), PointerFromQPaintDevice(device))
	}
}

func (ptr *QAbstractTextDocumentLayout) UnregisterHandler(objectType int, component core.QObject_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::unregisterHandler")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_UnregisterHandler(ptr.Pointer(), C.int(objectType), core.PointerFromQObject(component))
	}
}

//export callbackQAbstractTextDocumentLayout_Update
func callbackQAbstractTextDocumentLayout_Update(ptr unsafe.Pointer, ptrName *C.char, rect unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::update")

	if signal := qt.GetSignal(C.GoString(ptrName), "update"); signal != nil {
		signal.(func(*core.QRectF))(core.NewQRectFFromPointer(rect))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectUpdate(f func(rect *core.QRectF)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::update")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectUpdate(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "update", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectUpdate() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::update")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectUpdate(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "update")
	}
}

func (ptr *QAbstractTextDocumentLayout) Update(rect core.QRectF_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::update")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_Update(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

//export callbackQAbstractTextDocumentLayout_UpdateBlock
func callbackQAbstractTextDocumentLayout_UpdateBlock(ptr unsafe.Pointer, ptrName *C.char, block unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::updateBlock")

	if signal := qt.GetSignal(C.GoString(ptrName), "updateBlock"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectUpdateBlock(f func(block *QTextBlock)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::updateBlock")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectUpdateBlock(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "updateBlock", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectUpdateBlock() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::updateBlock")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectUpdateBlock(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "updateBlock")
	}
}

func (ptr *QAbstractTextDocumentLayout) UpdateBlock(block QTextBlock_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::updateBlock")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_UpdateBlock(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQAbstractTextDocumentLayout_TimerEvent
func callbackQAbstractTextDocumentLayout_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QAbstractTextDocumentLayout) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::timerEvent")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::timerEvent")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractTextDocumentLayout_ChildEvent
func callbackQAbstractTextDocumentLayout_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QAbstractTextDocumentLayout) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::childEvent")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::childEvent")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractTextDocumentLayout_ConnectNotify
func callbackQAbstractTextDocumentLayout_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::connectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::connectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTextDocumentLayout_CustomEvent
func callbackQAbstractTextDocumentLayout_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QAbstractTextDocumentLayout) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::customEvent")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::customEvent")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAbstractTextDocumentLayout_DeleteLater
func callbackQAbstractTextDocumentLayout_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QAbstractTextDocumentLayout) DeleteLater() {
	defer qt.Recovering("QAbstractTextDocumentLayout::deleteLater")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractTextDocumentLayout_DisconnectNotify
func callbackQAbstractTextDocumentLayout_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractTextDocumentLayout::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTextDocumentLayout_Event
func callbackQAbstractTextDocumentLayout_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQAbstractTextDocumentLayoutFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QAbstractTextDocumentLayout) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectEvent() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QAbstractTextDocumentLayout) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractTextDocumentLayout::event")

	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractTextDocumentLayout) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractTextDocumentLayout::event")

	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractTextDocumentLayout_EventFilter
func callbackQAbstractTextDocumentLayout_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQAbstractTextDocumentLayoutFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QAbstractTextDocumentLayout) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QAbstractTextDocumentLayout) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractTextDocumentLayout::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractTextDocumentLayout) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractTextDocumentLayout::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractTextDocumentLayout_MetaObject
func callbackQAbstractTextDocumentLayout_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractTextDocumentLayout::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAbstractTextDocumentLayoutFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractTextDocumentLayout) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAbstractTextDocumentLayout::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAbstractTextDocumentLayout::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QAbstractTextDocumentLayout) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAbstractTextDocumentLayout::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAbstractTextDocumentLayout_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAbstractTextDocumentLayout::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAbstractTextDocumentLayout_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QAccessible::Event
type QAccessible__Event int64

var (
	QAccessible__SoundPlayed                     = QAccessible__Event(0x0001)
	QAccessible__Alert                           = QAccessible__Event(0x0002)
	QAccessible__ForegroundChanged               = QAccessible__Event(0x0003)
	QAccessible__MenuStart                       = QAccessible__Event(0x0004)
	QAccessible__MenuEnd                         = QAccessible__Event(0x0005)
	QAccessible__PopupMenuStart                  = QAccessible__Event(0x0006)
	QAccessible__PopupMenuEnd                    = QAccessible__Event(0x0007)
	QAccessible__ContextHelpStart                = QAccessible__Event(0x000C)
	QAccessible__ContextHelpEnd                  = QAccessible__Event(0x000D)
	QAccessible__DragDropStart                   = QAccessible__Event(0x000E)
	QAccessible__DragDropEnd                     = QAccessible__Event(0x000F)
	QAccessible__DialogStart                     = QAccessible__Event(0x0010)
	QAccessible__DialogEnd                       = QAccessible__Event(0x0011)
	QAccessible__ScrollingStart                  = QAccessible__Event(0x0012)
	QAccessible__ScrollingEnd                    = QAccessible__Event(0x0013)
	QAccessible__MenuCommand                     = QAccessible__Event(0x0018)
	QAccessible__ActionChanged                   = QAccessible__Event(0x0101)
	QAccessible__ActiveDescendantChanged         = QAccessible__Event(0x0102)
	QAccessible__AttributeChanged                = QAccessible__Event(0x0103)
	QAccessible__DocumentContentChanged          = QAccessible__Event(0x0104)
	QAccessible__DocumentLoadComplete            = QAccessible__Event(0x0105)
	QAccessible__DocumentLoadStopped             = QAccessible__Event(0x0106)
	QAccessible__DocumentReload                  = QAccessible__Event(0x0107)
	QAccessible__HyperlinkEndIndexChanged        = QAccessible__Event(0x0108)
	QAccessible__HyperlinkNumberOfAnchorsChanged = QAccessible__Event(0x0109)
	QAccessible__HyperlinkSelectedLinkChanged    = QAccessible__Event(0x010A)
	QAccessible__HypertextLinkActivated          = QAccessible__Event(0x010B)
	QAccessible__HypertextLinkSelected           = QAccessible__Event(0x010C)
	QAccessible__HyperlinkStartIndexChanged      = QAccessible__Event(0x010D)
	QAccessible__HypertextChanged                = QAccessible__Event(0x010E)
	QAccessible__HypertextNLinksChanged          = QAccessible__Event(0x010F)
	QAccessible__ObjectAttributeChanged          = QAccessible__Event(0x0110)
	QAccessible__PageChanged                     = QAccessible__Event(0x0111)
	QAccessible__SectionChanged                  = QAccessible__Event(0x0112)
	QAccessible__TableCaptionChanged             = QAccessible__Event(0x0113)
	QAccessible__TableColumnDescriptionChanged   = QAccessible__Event(0x0114)
	QAccessible__TableColumnHeaderChanged        = QAccessible__Event(0x0115)
	QAccessible__TableModelChanged               = QAccessible__Event(0x0116)
	QAccessible__TableRowDescriptionChanged      = QAccessible__Event(0x0117)
	QAccessible__TableRowHeaderChanged           = QAccessible__Event(0x0118)
	QAccessible__TableSummaryChanged             = QAccessible__Event(0x0119)
	QAccessible__TextAttributeChanged            = QAccessible__Event(0x011A)
	QAccessible__TextCaretMoved                  = QAccessible__Event(0x011B)
	QAccessible__TextColumnChanged               = QAccessible__Event(0x011D)
	QAccessible__TextInserted                    = QAccessible__Event(0x011E)
	QAccessible__TextRemoved                     = QAccessible__Event(0x011F)
	QAccessible__TextUpdated                     = QAccessible__Event(0x0120)
	QAccessible__TextSelectionChanged            = QAccessible__Event(0x0121)
	QAccessible__VisibleDataChanged              = QAccessible__Event(0x0122)
	QAccessible__ObjectCreated                   = QAccessible__Event(0x8000)
	QAccessible__ObjectDestroyed                 = QAccessible__Event(0x8001)
	QAccessible__ObjectShow                      = QAccessible__Event(0x8002)
	QAccessible__ObjectHide                      = QAccessible__Event(0x8003)
	QAccessible__ObjectReorder                   = QAccessible__Event(0x8004)
	QAccessible__Focus                           = QAccessible__Event(0x8005)
	QAccessible__Selection                       = QAccessible__Event(0x8006)
	QAccessible__SelectionAdd                    = QAccessible__Event(0x8007)
	QAccessible__SelectionRemove                 = QAccessible__Event(0x8008)
	QAccessible__SelectionWithin                 = QAccessible__Event(0x8009)
	QAccessible__StateChanged                    = QAccessible__Event(0x800A)
	QAccessible__LocationChanged                 = QAccessible__Event(0x800B)
	QAccessible__NameChanged                     = QAccessible__Event(0x800C)
	QAccessible__DescriptionChanged              = QAccessible__Event(0x800D)
	QAccessible__ValueChanged                    = QAccessible__Event(0x800E)
	QAccessible__ParentChanged                   = QAccessible__Event(0x800F)
	QAccessible__HelpChanged                     = QAccessible__Event(0x80A0)
	QAccessible__DefaultActionChanged            = QAccessible__Event(0x80B0)
	QAccessible__AcceleratorChanged              = QAccessible__Event(0x80C0)
	QAccessible__InvalidEvent                    = QAccessible__Event(C.QAccessible_InvalidEvent_Type())
)

//QAccessible::InterfaceType
type QAccessible__InterfaceType int64

const (
	QAccessible__TextInterface         = QAccessible__InterfaceType(0)
	QAccessible__EditableTextInterface = QAccessible__InterfaceType(1)
	QAccessible__ValueInterface        = QAccessible__InterfaceType(2)
	QAccessible__ActionInterface       = QAccessible__InterfaceType(3)
	QAccessible__ImageInterface        = QAccessible__InterfaceType(4)
	QAccessible__TableInterface        = QAccessible__InterfaceType(5)
	QAccessible__TableCellInterface    = QAccessible__InterfaceType(6)
)

//QAccessible::RelationFlag
type QAccessible__RelationFlag int64

const (
	QAccessible__Label        = QAccessible__RelationFlag(0x00000001)
	QAccessible__Labelled     = QAccessible__RelationFlag(0x00000002)
	QAccessible__Controller   = QAccessible__RelationFlag(0x00000004)
	QAccessible__Controlled   = QAccessible__RelationFlag(0x00000008)
	QAccessible__AllRelations = QAccessible__RelationFlag(0xffffffff)
)

//QAccessible::Role
type QAccessible__Role int64

const (
	QAccessible__NoRole               = QAccessible__Role(0x00000000)
	QAccessible__TitleBar             = QAccessible__Role(0x00000001)
	QAccessible__MenuBar              = QAccessible__Role(0x00000002)
	QAccessible__ScrollBar            = QAccessible__Role(0x00000003)
	QAccessible__Grip                 = QAccessible__Role(0x00000004)
	QAccessible__Sound                = QAccessible__Role(0x00000005)
	QAccessible__Cursor               = QAccessible__Role(0x00000006)
	QAccessible__Caret                = QAccessible__Role(0x00000007)
	QAccessible__AlertMessage         = QAccessible__Role(0x00000008)
	QAccessible__Window               = QAccessible__Role(0x00000009)
	QAccessible__Client               = QAccessible__Role(0x0000000A)
	QAccessible__PopupMenu            = QAccessible__Role(0x0000000B)
	QAccessible__MenuItem             = QAccessible__Role(0x0000000C)
	QAccessible__ToolTip              = QAccessible__Role(0x0000000D)
	QAccessible__Application          = QAccessible__Role(0x0000000E)
	QAccessible__Document             = QAccessible__Role(0x0000000F)
	QAccessible__Pane                 = QAccessible__Role(0x00000010)
	QAccessible__Chart                = QAccessible__Role(0x00000011)
	QAccessible__Dialog               = QAccessible__Role(0x00000012)
	QAccessible__Border               = QAccessible__Role(0x00000013)
	QAccessible__Grouping             = QAccessible__Role(0x00000014)
	QAccessible__Separator            = QAccessible__Role(0x00000015)
	QAccessible__ToolBar              = QAccessible__Role(0x00000016)
	QAccessible__StatusBar            = QAccessible__Role(0x00000017)
	QAccessible__Table                = QAccessible__Role(0x00000018)
	QAccessible__ColumnHeader         = QAccessible__Role(0x00000019)
	QAccessible__RowHeader            = QAccessible__Role(0x0000001A)
	QAccessible__Column               = QAccessible__Role(0x0000001B)
	QAccessible__Row                  = QAccessible__Role(0x0000001C)
	QAccessible__Cell                 = QAccessible__Role(0x0000001D)
	QAccessible__Link                 = QAccessible__Role(0x0000001E)
	QAccessible__HelpBalloon          = QAccessible__Role(0x0000001F)
	QAccessible__Assistant            = QAccessible__Role(0x00000020)
	QAccessible__List                 = QAccessible__Role(0x00000021)
	QAccessible__ListItem             = QAccessible__Role(0x00000022)
	QAccessible__Tree                 = QAccessible__Role(0x00000023)
	QAccessible__TreeItem             = QAccessible__Role(0x00000024)
	QAccessible__PageTab              = QAccessible__Role(0x00000025)
	QAccessible__PropertyPage         = QAccessible__Role(0x00000026)
	QAccessible__Indicator            = QAccessible__Role(0x00000027)
	QAccessible__Graphic              = QAccessible__Role(0x00000028)
	QAccessible__StaticText           = QAccessible__Role(0x00000029)
	QAccessible__EditableText         = QAccessible__Role(0x0000002A)
	QAccessible__Button               = QAccessible__Role(0x0000002B)
	QAccessible__CheckBox             = QAccessible__Role(0x0000002C)
	QAccessible__RadioButton          = QAccessible__Role(0x0000002D)
	QAccessible__ComboBox             = QAccessible__Role(0x0000002E)
	QAccessible__ProgressBar          = QAccessible__Role(0x00000030)
	QAccessible__Dial                 = QAccessible__Role(0x00000031)
	QAccessible__HotkeyField          = QAccessible__Role(0x00000032)
	QAccessible__Slider               = QAccessible__Role(0x00000033)
	QAccessible__SpinBox              = QAccessible__Role(0x00000034)
	QAccessible__Canvas               = QAccessible__Role(0x00000035)
	QAccessible__Animation            = QAccessible__Role(0x00000036)
	QAccessible__Equation             = QAccessible__Role(0x00000037)
	QAccessible__ButtonDropDown       = QAccessible__Role(0x00000038)
	QAccessible__ButtonMenu           = QAccessible__Role(0x00000039)
	QAccessible__ButtonDropGrid       = QAccessible__Role(0x0000003A)
	QAccessible__Whitespace           = QAccessible__Role(0x0000003B)
	QAccessible__PageTabList          = QAccessible__Role(0x0000003C)
	QAccessible__Clock                = QAccessible__Role(0x0000003D)
	QAccessible__Splitter             = QAccessible__Role(0x0000003E)
	QAccessible__LayeredPane          = QAccessible__Role(0x00000080)
	QAccessible__Terminal             = QAccessible__Role(0x00000081)
	QAccessible__Desktop              = QAccessible__Role(0x00000082)
	QAccessible__Paragraph            = QAccessible__Role(0x00000083)
	QAccessible__WebDocument          = QAccessible__Role(0x00000084)
	QAccessible__Section              = QAccessible__Role(0x00000085)
	QAccessible__ColorChooser         = QAccessible__Role(0x404)
	QAccessible__Footer               = QAccessible__Role(0x40E)
	QAccessible__Form                 = QAccessible__Role(0x410)
	QAccessible__Heading              = QAccessible__Role(0x414)
	QAccessible__Note                 = QAccessible__Role(0x41B)
	QAccessible__ComplementaryContent = QAccessible__Role(0x42C)
	QAccessible__UserRole             = QAccessible__Role(0x0000ffff)
)

//QAccessible::Text
type QAccessible__Text int64

const (
	QAccessible__Name             = QAccessible__Text(0)
	QAccessible__Description      = QAccessible__Text(1)
	QAccessible__Value            = QAccessible__Text(2)
	QAccessible__Help             = QAccessible__Text(3)
	QAccessible__Accelerator      = QAccessible__Text(4)
	QAccessible__DebugDescription = QAccessible__Text(5)
	QAccessible__UserText         = QAccessible__Text(0x0000ffff)
)

//QAccessible::TextBoundaryType
type QAccessible__TextBoundaryType int64

const (
	QAccessible__CharBoundary      = QAccessible__TextBoundaryType(0)
	QAccessible__WordBoundary      = QAccessible__TextBoundaryType(1)
	QAccessible__SentenceBoundary  = QAccessible__TextBoundaryType(2)
	QAccessible__ParagraphBoundary = QAccessible__TextBoundaryType(3)
	QAccessible__LineBoundary      = QAccessible__TextBoundaryType(4)
	QAccessible__NoBoundary        = QAccessible__TextBoundaryType(5)
)

type QAccessible struct {
	ptr unsafe.Pointer
}

type QAccessible_ITF interface {
	QAccessible_PTR() *QAccessible
}

func (p *QAccessible) QAccessible_PTR() *QAccessible {
	return p
}

func (p *QAccessible) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessible) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessible(ptr QAccessible_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessible_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleFromPointer(ptr unsafe.Pointer) *QAccessible {
	var n = new(QAccessible)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleFromPointer(ptr unsafe.Pointer) *QAccessible {
	var n = NewQAccessibleFromPointer(ptr)
	return n
}

func QAccessible_IsActive() bool {
	defer qt.Recovering("QAccessible::isActive")

	return C.QAccessible_QAccessible_IsActive() != 0
}

func (ptr *QAccessible) IsActive() bool {
	defer qt.Recovering("QAccessible::isActive")

	return C.QAccessible_QAccessible_IsActive() != 0
}

func QAccessible_QueryAccessibleInterface(object core.QObject_ITF) *QAccessibleInterface {
	defer qt.Recovering("QAccessible::queryAccessibleInterface")

	return NewQAccessibleInterfaceFromPointer(C.QAccessible_QAccessible_QueryAccessibleInterface(core.PointerFromQObject(object)))
}

func (ptr *QAccessible) QueryAccessibleInterface(object core.QObject_ITF) *QAccessibleInterface {
	defer qt.Recovering("QAccessible::queryAccessibleInterface")

	return NewQAccessibleInterfaceFromPointer(C.QAccessible_QAccessible_QueryAccessibleInterface(core.PointerFromQObject(object)))
}

func QAccessible_SetRootObject(object core.QObject_ITF) {
	defer qt.Recovering("QAccessible::setRootObject")

	C.QAccessible_QAccessible_SetRootObject(core.PointerFromQObject(object))
}

func (ptr *QAccessible) SetRootObject(object core.QObject_ITF) {
	defer qt.Recovering("QAccessible::setRootObject")

	C.QAccessible_QAccessible_SetRootObject(core.PointerFromQObject(object))
}

func QAccessible_UpdateAccessibility(event QAccessibleEvent_ITF) {
	defer qt.Recovering("QAccessible::updateAccessibility")

	C.QAccessible_QAccessible_UpdateAccessibility(PointerFromQAccessibleEvent(event))
}

func (ptr *QAccessible) UpdateAccessibility(event QAccessibleEvent_ITF) {
	defer qt.Recovering("QAccessible::updateAccessibility")

	C.QAccessible_QAccessible_UpdateAccessibility(PointerFromQAccessibleEvent(event))
}

type QAccessibleActionInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleActionInterface_ITF interface {
	QAccessibleActionInterface_PTR() *QAccessibleActionInterface
}

func (p *QAccessibleActionInterface) QAccessibleActionInterface_PTR() *QAccessibleActionInterface {
	return p
}

func (p *QAccessibleActionInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleActionInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleActionInterface(ptr QAccessibleActionInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleActionInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleActionInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleActionInterface {
	var n = new(QAccessibleActionInterface)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleActionInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleActionInterface {
	var n = NewQAccessibleActionInterfaceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QAccessibleActionInterface_") {
		n.SetObjectNameAbs("QAccessibleActionInterface_" + qt.Identifier())
	}
	return n
}

//export callbackQAccessibleActionInterface_LocalizedActionDescription
func callbackQAccessibleActionInterface_LocalizedActionDescription(ptr unsafe.Pointer, ptrName *C.char, actionName *C.char) *C.char {
	defer qt.Recovering("callback QAccessibleActionInterface::localizedActionDescription")

	if signal := qt.GetSignal(C.GoString(ptrName), "localizedActionDescription"); signal != nil {
		return C.CString(signal.(func(string) string)(C.GoString(actionName)))
	}

	return C.CString(NewQAccessibleActionInterfaceFromPointer(ptr).LocalizedActionDescriptionDefault(C.GoString(actionName)))
}

func (ptr *QAccessibleActionInterface) ConnectLocalizedActionDescription(f func(actionName string) string) {
	defer qt.Recovering("connect QAccessibleActionInterface::localizedActionDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "localizedActionDescription", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectLocalizedActionDescription() {
	defer qt.Recovering("disconnect QAccessibleActionInterface::localizedActionDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "localizedActionDescription")
	}
}

func (ptr *QAccessibleActionInterface) LocalizedActionDescription(actionName string) string {
	defer qt.Recovering("QAccessibleActionInterface::localizedActionDescription")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleActionInterface_LocalizedActionDescription(ptr.Pointer(), C.CString(actionName)))
	}
	return ""
}

func (ptr *QAccessibleActionInterface) LocalizedActionDescriptionDefault(actionName string) string {
	defer qt.Recovering("QAccessibleActionInterface::localizedActionDescription")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleActionInterface_LocalizedActionDescriptionDefault(ptr.Pointer(), C.CString(actionName)))
	}
	return ""
}

//export callbackQAccessibleActionInterface_LocalizedActionName
func callbackQAccessibleActionInterface_LocalizedActionName(ptr unsafe.Pointer, ptrName *C.char, actionName *C.char) *C.char {
	defer qt.Recovering("callback QAccessibleActionInterface::localizedActionName")

	if signal := qt.GetSignal(C.GoString(ptrName), "localizedActionName"); signal != nil {
		return C.CString(signal.(func(string) string)(C.GoString(actionName)))
	}

	return C.CString(NewQAccessibleActionInterfaceFromPointer(ptr).LocalizedActionNameDefault(C.GoString(actionName)))
}

func (ptr *QAccessibleActionInterface) ConnectLocalizedActionName(f func(actionName string) string) {
	defer qt.Recovering("connect QAccessibleActionInterface::localizedActionName")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "localizedActionName", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectLocalizedActionName() {
	defer qt.Recovering("disconnect QAccessibleActionInterface::localizedActionName")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "localizedActionName")
	}
}

func (ptr *QAccessibleActionInterface) LocalizedActionName(actionName string) string {
	defer qt.Recovering("QAccessibleActionInterface::localizedActionName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleActionInterface_LocalizedActionName(ptr.Pointer(), C.CString(actionName)))
	}
	return ""
}

func (ptr *QAccessibleActionInterface) LocalizedActionNameDefault(actionName string) string {
	defer qt.Recovering("QAccessibleActionInterface::localizedActionName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleActionInterface_LocalizedActionNameDefault(ptr.Pointer(), C.CString(actionName)))
	}
	return ""
}

//export callbackQAccessibleActionInterface_ActionNames
func callbackQAccessibleActionInterface_ActionNames(ptr unsafe.Pointer, ptrName *C.char) *C.char {
	defer qt.Recovering("callback QAccessibleActionInterface::actionNames")

	if signal := qt.GetSignal(C.GoString(ptrName), "actionNames"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QAccessibleActionInterface) ConnectActionNames(f func() []string) {
	defer qt.Recovering("connect QAccessibleActionInterface::actionNames")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "actionNames", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectActionNames() {
	defer qt.Recovering("disconnect QAccessibleActionInterface::actionNames")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "actionNames")
	}
}

func (ptr *QAccessibleActionInterface) ActionNames() []string {
	defer qt.Recovering("QAccessibleActionInterface::actionNames")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QAccessibleActionInterface_ActionNames(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func QAccessibleActionInterface_DecreaseAction() string {
	defer qt.Recovering("QAccessibleActionInterface::decreaseAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction())
}

func (ptr *QAccessibleActionInterface) DecreaseAction() string {
	defer qt.Recovering("QAccessibleActionInterface::decreaseAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction())
}

//export callbackQAccessibleActionInterface_DoAction
func callbackQAccessibleActionInterface_DoAction(ptr unsafe.Pointer, ptrName *C.char, actionName *C.char) {
	defer qt.Recovering("callback QAccessibleActionInterface::doAction")

	if signal := qt.GetSignal(C.GoString(ptrName), "doAction"); signal != nil {
		signal.(func(string))(C.GoString(actionName))
	}

}

func (ptr *QAccessibleActionInterface) ConnectDoAction(f func(actionName string)) {
	defer qt.Recovering("connect QAccessibleActionInterface::doAction")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "doAction", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectDoAction(actionName string) {
	defer qt.Recovering("disconnect QAccessibleActionInterface::doAction")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "doAction")
	}
}

func (ptr *QAccessibleActionInterface) DoAction(actionName string) {
	defer qt.Recovering("QAccessibleActionInterface::doAction")

	if ptr.Pointer() != nil {
		C.QAccessibleActionInterface_DoAction(ptr.Pointer(), C.CString(actionName))
	}
}

func QAccessibleActionInterface_IncreaseAction() string {
	defer qt.Recovering("QAccessibleActionInterface::increaseAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction())
}

func (ptr *QAccessibleActionInterface) IncreaseAction() string {
	defer qt.Recovering("QAccessibleActionInterface::increaseAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction())
}

//export callbackQAccessibleActionInterface_KeyBindingsForAction
func callbackQAccessibleActionInterface_KeyBindingsForAction(ptr unsafe.Pointer, ptrName *C.char, actionName *C.char) *C.char {
	defer qt.Recovering("callback QAccessibleActionInterface::keyBindingsForAction")

	if signal := qt.GetSignal(C.GoString(ptrName), "keyBindingsForAction"); signal != nil {
		return C.CString(strings.Join(signal.(func(string) []string)(C.GoString(actionName)), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QAccessibleActionInterface) ConnectKeyBindingsForAction(f func(actionName string) []string) {
	defer qt.Recovering("connect QAccessibleActionInterface::keyBindingsForAction")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "keyBindingsForAction", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectKeyBindingsForAction(actionName string) {
	defer qt.Recovering("disconnect QAccessibleActionInterface::keyBindingsForAction")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "keyBindingsForAction")
	}
}

func (ptr *QAccessibleActionInterface) KeyBindingsForAction(actionName string) []string {
	defer qt.Recovering("QAccessibleActionInterface::keyBindingsForAction")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QAccessibleActionInterface_KeyBindingsForAction(ptr.Pointer(), C.CString(actionName))), "|")
	}
	return make([]string, 0)
}

func QAccessibleActionInterface_NextPageAction() string {
	defer qt.Recovering("QAccessibleActionInterface::nextPageAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction())
}

func (ptr *QAccessibleActionInterface) NextPageAction() string {
	defer qt.Recovering("QAccessibleActionInterface::nextPageAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction())
}

func QAccessibleActionInterface_PressAction() string {
	defer qt.Recovering("QAccessibleActionInterface::pressAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_PressAction())
}

func (ptr *QAccessibleActionInterface) PressAction() string {
	defer qt.Recovering("QAccessibleActionInterface::pressAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_PressAction())
}

func QAccessibleActionInterface_PreviousPageAction() string {
	defer qt.Recovering("QAccessibleActionInterface::previousPageAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction())
}

func (ptr *QAccessibleActionInterface) PreviousPageAction() string {
	defer qt.Recovering("QAccessibleActionInterface::previousPageAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction())
}

func QAccessibleActionInterface_ScrollDownAction() string {
	defer qt.Recovering("QAccessibleActionInterface::scrollDownAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction())
}

func (ptr *QAccessibleActionInterface) ScrollDownAction() string {
	defer qt.Recovering("QAccessibleActionInterface::scrollDownAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction())
}

func QAccessibleActionInterface_ScrollLeftAction() string {
	defer qt.Recovering("QAccessibleActionInterface::scrollLeftAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction())
}

func (ptr *QAccessibleActionInterface) ScrollLeftAction() string {
	defer qt.Recovering("QAccessibleActionInterface::scrollLeftAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction())
}

func QAccessibleActionInterface_ScrollRightAction() string {
	defer qt.Recovering("QAccessibleActionInterface::scrollRightAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction())
}

func (ptr *QAccessibleActionInterface) ScrollRightAction() string {
	defer qt.Recovering("QAccessibleActionInterface::scrollRightAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction())
}

func QAccessibleActionInterface_ScrollUpAction() string {
	defer qt.Recovering("QAccessibleActionInterface::scrollUpAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction())
}

func (ptr *QAccessibleActionInterface) ScrollUpAction() string {
	defer qt.Recovering("QAccessibleActionInterface::scrollUpAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction())
}

func QAccessibleActionInterface_SetFocusAction() string {
	defer qt.Recovering("QAccessibleActionInterface::setFocusAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction())
}

func (ptr *QAccessibleActionInterface) SetFocusAction() string {
	defer qt.Recovering("QAccessibleActionInterface::setFocusAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction())
}

func QAccessibleActionInterface_ShowMenuAction() string {
	defer qt.Recovering("QAccessibleActionInterface::showMenuAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction())
}

func (ptr *QAccessibleActionInterface) ShowMenuAction() string {
	defer qt.Recovering("QAccessibleActionInterface::showMenuAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction())
}

func QAccessibleActionInterface_ToggleAction() string {
	defer qt.Recovering("QAccessibleActionInterface::toggleAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction())
}

func (ptr *QAccessibleActionInterface) ToggleAction() string {
	defer qt.Recovering("QAccessibleActionInterface::toggleAction")

	return C.GoString(C.QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction())
}

func (ptr *QAccessibleActionInterface) DestroyQAccessibleActionInterface() {
	defer qt.Recovering("QAccessibleActionInterface::~QAccessibleActionInterface")

	if ptr.Pointer() != nil {
		C.QAccessibleActionInterface_DestroyQAccessibleActionInterface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleActionInterface) ObjectNameAbs() string {
	defer qt.Recovering("QAccessibleActionInterface::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleActionInterface_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleActionInterface) SetObjectNameAbs(name string) {
	defer qt.Recovering("QAccessibleActionInterface::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QAccessibleActionInterface_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QAccessibleEditableTextInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleEditableTextInterface_ITF interface {
	QAccessibleEditableTextInterface_PTR() *QAccessibleEditableTextInterface
}

func (p *QAccessibleEditableTextInterface) QAccessibleEditableTextInterface_PTR() *QAccessibleEditableTextInterface {
	return p
}

func (p *QAccessibleEditableTextInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleEditableTextInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleEditableTextInterface(ptr QAccessibleEditableTextInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEditableTextInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleEditableTextInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleEditableTextInterface {
	var n = new(QAccessibleEditableTextInterface)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleEditableTextInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleEditableTextInterface {
	var n = NewQAccessibleEditableTextInterfaceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QAccessibleEditableTextInterface_") {
		n.SetObjectNameAbs("QAccessibleEditableTextInterface_" + qt.Identifier())
	}
	return n
}

//export callbackQAccessibleEditableTextInterface_DeleteText
func callbackQAccessibleEditableTextInterface_DeleteText(ptr unsafe.Pointer, ptrName *C.char, startOffset C.int, endOffset C.int) {
	defer qt.Recovering("callback QAccessibleEditableTextInterface::deleteText")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteText"); signal != nil {
		signal.(func(int, int))(int(startOffset), int(endOffset))
	}

}

func (ptr *QAccessibleEditableTextInterface) ConnectDeleteText(f func(startOffset int, endOffset int)) {
	defer qt.Recovering("connect QAccessibleEditableTextInterface::deleteText")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "deleteText", f)
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectDeleteText(startOffset int, endOffset int) {
	defer qt.Recovering("disconnect QAccessibleEditableTextInterface::deleteText")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "deleteText")
	}
}

func (ptr *QAccessibleEditableTextInterface) DeleteText(startOffset int, endOffset int) {
	defer qt.Recovering("QAccessibleEditableTextInterface::deleteText")

	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_DeleteText(ptr.Pointer(), C.int(startOffset), C.int(endOffset))
	}
}

//export callbackQAccessibleEditableTextInterface_InsertText
func callbackQAccessibleEditableTextInterface_InsertText(ptr unsafe.Pointer, ptrName *C.char, offset C.int, text *C.char) {
	defer qt.Recovering("callback QAccessibleEditableTextInterface::insertText")

	if signal := qt.GetSignal(C.GoString(ptrName), "insertText"); signal != nil {
		signal.(func(int, string))(int(offset), C.GoString(text))
	}

}

func (ptr *QAccessibleEditableTextInterface) ConnectInsertText(f func(offset int, text string)) {
	defer qt.Recovering("connect QAccessibleEditableTextInterface::insertText")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "insertText", f)
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectInsertText(offset int, text string) {
	defer qt.Recovering("disconnect QAccessibleEditableTextInterface::insertText")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "insertText")
	}
}

func (ptr *QAccessibleEditableTextInterface) InsertText(offset int, text string) {
	defer qt.Recovering("QAccessibleEditableTextInterface::insertText")

	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_InsertText(ptr.Pointer(), C.int(offset), C.CString(text))
	}
}

//export callbackQAccessibleEditableTextInterface_ReplaceText
func callbackQAccessibleEditableTextInterface_ReplaceText(ptr unsafe.Pointer, ptrName *C.char, startOffset C.int, endOffset C.int, text *C.char) {
	defer qt.Recovering("callback QAccessibleEditableTextInterface::replaceText")

	if signal := qt.GetSignal(C.GoString(ptrName), "replaceText"); signal != nil {
		signal.(func(int, int, string))(int(startOffset), int(endOffset), C.GoString(text))
	}

}

func (ptr *QAccessibleEditableTextInterface) ConnectReplaceText(f func(startOffset int, endOffset int, text string)) {
	defer qt.Recovering("connect QAccessibleEditableTextInterface::replaceText")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "replaceText", f)
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectReplaceText(startOffset int, endOffset int, text string) {
	defer qt.Recovering("disconnect QAccessibleEditableTextInterface::replaceText")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "replaceText")
	}
}

func (ptr *QAccessibleEditableTextInterface) ReplaceText(startOffset int, endOffset int, text string) {
	defer qt.Recovering("QAccessibleEditableTextInterface::replaceText")

	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_ReplaceText(ptr.Pointer(), C.int(startOffset), C.int(endOffset), C.CString(text))
	}
}

func (ptr *QAccessibleEditableTextInterface) DestroyQAccessibleEditableTextInterface() {
	defer qt.Recovering("QAccessibleEditableTextInterface::~QAccessibleEditableTextInterface")

	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleEditableTextInterface) ObjectNameAbs() string {
	defer qt.Recovering("QAccessibleEditableTextInterface::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleEditableTextInterface_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleEditableTextInterface) SetObjectNameAbs(name string) {
	defer qt.Recovering("QAccessibleEditableTextInterface::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QAccessibleEvent struct {
	ptr unsafe.Pointer
}

type QAccessibleEvent_ITF interface {
	QAccessibleEvent_PTR() *QAccessibleEvent
}

func (p *QAccessibleEvent) QAccessibleEvent_PTR() *QAccessibleEvent {
	return p
}

func (p *QAccessibleEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleEvent(ptr QAccessibleEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleEventFromPointer(ptr unsafe.Pointer) *QAccessibleEvent {
	var n = new(QAccessibleEvent)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleEventFromPointer(ptr unsafe.Pointer) *QAccessibleEvent {
	var n = NewQAccessibleEventFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QAccessibleEvent_") {
		n.SetObjectNameAbs("QAccessibleEvent_" + qt.Identifier())
	}
	return n
}

func NewQAccessibleEvent2(interfa QAccessibleInterface_ITF, ty QAccessible__Event) *QAccessibleEvent {
	defer qt.Recovering("QAccessibleEvent::QAccessibleEvent")

	return newQAccessibleEventFromPointer(C.QAccessibleEvent_NewQAccessibleEvent2(PointerFromQAccessibleInterface(interfa), C.int(ty)))
}

func NewQAccessibleEvent(object core.QObject_ITF, ty QAccessible__Event) *QAccessibleEvent {
	defer qt.Recovering("QAccessibleEvent::QAccessibleEvent")

	return newQAccessibleEventFromPointer(C.QAccessibleEvent_NewQAccessibleEvent(core.PointerFromQObject(object), C.int(ty)))
}

//export callbackQAccessibleEvent_AccessibleInterface
func callbackQAccessibleEvent_AccessibleInterface(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleEvent::accessibleInterface")

	if signal := qt.GetSignal(C.GoString(ptrName), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "accessibleInterface", f)
	}
}

func (ptr *QAccessibleEvent) DisconnectAccessibleInterface() {
	defer qt.Recovering("disconnect QAccessibleEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "accessibleInterface")
	}
}

func (ptr *QAccessibleEvent) AccessibleInterface() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleEvent) Child() int {
	defer qt.Recovering("QAccessibleEvent::child")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleEvent_Child(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleEvent) Object() *core.QObject {
	defer qt.Recovering("QAccessibleEvent::object")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QAccessibleEvent_Object(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleEvent) SetChild(child int) {
	defer qt.Recovering("QAccessibleEvent::setChild")

	if ptr.Pointer() != nil {
		C.QAccessibleEvent_SetChild(ptr.Pointer(), C.int(child))
	}
}

func (ptr *QAccessibleEvent) Type() QAccessible__Event {
	defer qt.Recovering("QAccessibleEvent::type")

	if ptr.Pointer() != nil {
		return QAccessible__Event(C.QAccessibleEvent_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleEvent) DestroyQAccessibleEvent() {
	defer qt.Recovering("QAccessibleEvent::~QAccessibleEvent")

	if ptr.Pointer() != nil {
		C.QAccessibleEvent_DestroyQAccessibleEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleEvent) ObjectNameAbs() string {
	defer qt.Recovering("QAccessibleEvent::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleEvent_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleEvent) SetObjectNameAbs(name string) {
	defer qt.Recovering("QAccessibleEvent::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QAccessibleEvent_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QAccessibleInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleInterface_ITF interface {
	QAccessibleInterface_PTR() *QAccessibleInterface
}

func (p *QAccessibleInterface) QAccessibleInterface_PTR() *QAccessibleInterface {
	return p
}

func (p *QAccessibleInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleInterface(ptr QAccessibleInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleInterface {
	var n = new(QAccessibleInterface)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleInterface {
	var n = NewQAccessibleInterfaceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QAccessibleInterface_") {
		n.SetObjectNameAbs("QAccessibleInterface_" + qt.Identifier())
	}
	return n
}

func (ptr *QAccessibleInterface) DestroyQAccessibleInterface() {
	defer qt.Recovering("QAccessibleInterface::~QAccessibleInterface")

	if ptr.Pointer() != nil {
		C.QAccessibleInterface_DestroyQAccessibleInterface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleInterface) ActionInterface() *QAccessibleActionInterface {
	defer qt.Recovering("QAccessibleInterface::actionInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleActionInterfaceFromPointer(C.QAccessibleInterface_ActionInterface(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_BackgroundColor
func callbackQAccessibleInterface_BackgroundColor(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::backgroundColor")

	if signal := qt.GetSignal(C.GoString(ptrName), "backgroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleInterfaceFromPointer(ptr).BackgroundColorDefault())
}

func (ptr *QAccessibleInterface) ConnectBackgroundColor(f func() *QColor) {
	defer qt.Recovering("connect QAccessibleInterface::backgroundColor")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "backgroundColor", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectBackgroundColor() {
	defer qt.Recovering("disconnect QAccessibleInterface::backgroundColor")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "backgroundColor")
	}
}

func (ptr *QAccessibleInterface) BackgroundColor() *QColor {
	defer qt.Recovering("QAccessibleInterface::backgroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QAccessibleInterface_BackgroundColor(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) BackgroundColorDefault() *QColor {
	defer qt.Recovering("QAccessibleInterface::backgroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QAccessibleInterface_BackgroundColorDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Child
func callbackQAccessibleInterface_Child(ptr unsafe.Pointer, ptrName *C.char, index C.int) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::child")

	if signal := qt.GetSignal(C.GoString(ptrName), "child"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int) *QAccessibleInterface)(int(index)))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleInterface) ConnectChild(f func(index int) *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleInterface::child")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "child", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectChild(index int) {
	defer qt.Recovering("disconnect QAccessibleInterface::child")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "child")
	}
}

func (ptr *QAccessibleInterface) Child(index int) *QAccessibleInterface {
	defer qt.Recovering("QAccessibleInterface::child")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_Child(ptr.Pointer(), C.int(index)))
	}
	return nil
}

//export callbackQAccessibleInterface_ChildAt
func callbackQAccessibleInterface_ChildAt(ptr unsafe.Pointer, ptrName *C.char, x C.int, y C.int) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::childAt")

	if signal := qt.GetSignal(C.GoString(ptrName), "childAt"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int, int) *QAccessibleInterface)(int(x), int(y)))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleInterface) ConnectChildAt(f func(x int, y int) *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleInterface::childAt")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "childAt", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectChildAt(x int, y int) {
	defer qt.Recovering("disconnect QAccessibleInterface::childAt")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "childAt")
	}
}

func (ptr *QAccessibleInterface) ChildAt(x int, y int) *QAccessibleInterface {
	defer qt.Recovering("QAccessibleInterface::childAt")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_ChildAt(ptr.Pointer(), C.int(x), C.int(y)))
	}
	return nil
}

//export callbackQAccessibleInterface_ChildCount
func callbackQAccessibleInterface_ChildCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleInterface::childCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "childCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleInterface) ConnectChildCount(f func() int) {
	defer qt.Recovering("connect QAccessibleInterface::childCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "childCount", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectChildCount() {
	defer qt.Recovering("disconnect QAccessibleInterface::childCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "childCount")
	}
}

func (ptr *QAccessibleInterface) ChildCount() int {
	defer qt.Recovering("QAccessibleInterface::childCount")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleInterface_ChildCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleInterface_FocusChild
func callbackQAccessibleInterface_FocusChild(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::focusChild")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusChild"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleInterfaceFromPointer(ptr).FocusChildDefault())
}

func (ptr *QAccessibleInterface) ConnectFocusChild(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleInterface::focusChild")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "focusChild", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectFocusChild() {
	defer qt.Recovering("disconnect QAccessibleInterface::focusChild")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "focusChild")
	}
}

func (ptr *QAccessibleInterface) FocusChild() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleInterface::focusChild")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_FocusChild(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) FocusChildDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleInterface::focusChild")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_FocusChildDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_ForegroundColor
func callbackQAccessibleInterface_ForegroundColor(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::foregroundColor")

	if signal := qt.GetSignal(C.GoString(ptrName), "foregroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleInterfaceFromPointer(ptr).ForegroundColorDefault())
}

func (ptr *QAccessibleInterface) ConnectForegroundColor(f func() *QColor) {
	defer qt.Recovering("connect QAccessibleInterface::foregroundColor")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "foregroundColor", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectForegroundColor() {
	defer qt.Recovering("disconnect QAccessibleInterface::foregroundColor")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "foregroundColor")
	}
}

func (ptr *QAccessibleInterface) ForegroundColor() *QColor {
	defer qt.Recovering("QAccessibleInterface::foregroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QAccessibleInterface_ForegroundColor(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) ForegroundColorDefault() *QColor {
	defer qt.Recovering("QAccessibleInterface::foregroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QAccessibleInterface_ForegroundColorDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_IndexOfChild
func callbackQAccessibleInterface_IndexOfChild(ptr unsafe.Pointer, ptrName *C.char, child unsafe.Pointer) C.int {
	defer qt.Recovering("callback QAccessibleInterface::indexOfChild")

	if signal := qt.GetSignal(C.GoString(ptrName), "indexOfChild"); signal != nil {
		return C.int(signal.(func(*QAccessibleInterface) int)(NewQAccessibleInterfaceFromPointer(child)))
	}

	return C.int(0)
}

func (ptr *QAccessibleInterface) ConnectIndexOfChild(f func(child *QAccessibleInterface) int) {
	defer qt.Recovering("connect QAccessibleInterface::indexOfChild")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "indexOfChild", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectIndexOfChild(child QAccessibleInterface_ITF) {
	defer qt.Recovering("disconnect QAccessibleInterface::indexOfChild")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "indexOfChild")
	}
}

func (ptr *QAccessibleInterface) IndexOfChild(child QAccessibleInterface_ITF) int {
	defer qt.Recovering("QAccessibleInterface::indexOfChild")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleInterface_IndexOfChild(ptr.Pointer(), PointerFromQAccessibleInterface(child)))
	}
	return 0
}

//export callbackQAccessibleInterface_Interface_cast
func callbackQAccessibleInterface_Interface_cast(ptr unsafe.Pointer, ptrName *C.char, ty C.int) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::interface_cast")

	if signal := qt.GetSignal(C.GoString(ptrName), "interface_cast"); signal != nil {
		return signal.(func(QAccessible__InterfaceType) unsafe.Pointer)(QAccessible__InterfaceType(ty))
	}

	return NewQAccessibleInterfaceFromPointer(ptr).Interface_castDefault(QAccessible__InterfaceType(ty))
}

func (ptr *QAccessibleInterface) ConnectInterface_cast(f func(ty QAccessible__InterfaceType) unsafe.Pointer) {
	defer qt.Recovering("connect QAccessibleInterface::interface_cast")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "interface_cast", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectInterface_cast() {
	defer qt.Recovering("disconnect QAccessibleInterface::interface_cast")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "interface_cast")
	}
}

func (ptr *QAccessibleInterface) Interface_cast(ty QAccessible__InterfaceType) unsafe.Pointer {
	defer qt.Recovering("QAccessibleInterface::interface_cast")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleInterface_Interface_cast(ptr.Pointer(), C.int(ty)))
	}
	return nil
}

func (ptr *QAccessibleInterface) Interface_castDefault(ty QAccessible__InterfaceType) unsafe.Pointer {
	defer qt.Recovering("QAccessibleInterface::interface_cast")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleInterface_Interface_castDefault(ptr.Pointer(), C.int(ty)))
	}
	return nil
}

//export callbackQAccessibleInterface_IsValid
func callbackQAccessibleInterface_IsValid(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleInterface::isValid")

	if signal := qt.GetSignal(C.GoString(ptrName), "isValid"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QAccessibleInterface) ConnectIsValid(f func() bool) {
	defer qt.Recovering("connect QAccessibleInterface::isValid")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "isValid", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectIsValid() {
	defer qt.Recovering("disconnect QAccessibleInterface::isValid")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "isValid")
	}
}

func (ptr *QAccessibleInterface) IsValid() bool {
	defer qt.Recovering("QAccessibleInterface::isValid")

	if ptr.Pointer() != nil {
		return C.QAccessibleInterface_IsValid(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAccessibleInterface_Object
func callbackQAccessibleInterface_Object(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::object")

	if signal := qt.GetSignal(C.GoString(ptrName), "object"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(nil)
}

func (ptr *QAccessibleInterface) ConnectObject(f func() *core.QObject) {
	defer qt.Recovering("connect QAccessibleInterface::object")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "object", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectObject() {
	defer qt.Recovering("disconnect QAccessibleInterface::object")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "object")
	}
}

func (ptr *QAccessibleInterface) Object() *core.QObject {
	defer qt.Recovering("QAccessibleInterface::object")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QAccessibleInterface_Object(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Parent
func callbackQAccessibleInterface_Parent(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::parent")

	if signal := qt.GetSignal(C.GoString(ptrName), "parent"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleInterface) ConnectParent(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleInterface::parent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "parent", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectParent() {
	defer qt.Recovering("disconnect QAccessibleInterface::parent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "parent")
	}
}

func (ptr *QAccessibleInterface) Parent() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleInterface::parent")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_Parent(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Rect
func callbackQAccessibleInterface_Rect(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::rect")

	if signal := qt.GetSignal(C.GoString(ptrName), "rect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(nil)
}

func (ptr *QAccessibleInterface) ConnectRect(f func() *core.QRect) {
	defer qt.Recovering("connect QAccessibleInterface::rect")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "rect", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectRect() {
	defer qt.Recovering("disconnect QAccessibleInterface::rect")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "rect")
	}
}

func (ptr *QAccessibleInterface) Rect() *core.QRect {
	defer qt.Recovering("QAccessibleInterface::rect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QAccessibleInterface_Rect(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Role
func callbackQAccessibleInterface_Role(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleInterface::role")

	if signal := qt.GetSignal(C.GoString(ptrName), "role"); signal != nil {
		return C.int(signal.(func() QAccessible__Role)())
	}

	return C.int(0)
}

func (ptr *QAccessibleInterface) ConnectRole(f func() QAccessible__Role) {
	defer qt.Recovering("connect QAccessibleInterface::role")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "role", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectRole() {
	defer qt.Recovering("disconnect QAccessibleInterface::role")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "role")
	}
}

func (ptr *QAccessibleInterface) Role() QAccessible__Role {
	defer qt.Recovering("QAccessibleInterface::role")

	if ptr.Pointer() != nil {
		return QAccessible__Role(C.QAccessibleInterface_Role(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleInterface_SetText
func callbackQAccessibleInterface_SetText(ptr unsafe.Pointer, ptrName *C.char, t C.int, text *C.char) {
	defer qt.Recovering("callback QAccessibleInterface::setText")

	if signal := qt.GetSignal(C.GoString(ptrName), "setText"); signal != nil {
		signal.(func(QAccessible__Text, string))(QAccessible__Text(t), C.GoString(text))
	}

}

func (ptr *QAccessibleInterface) ConnectSetText(f func(t QAccessible__Text, text string)) {
	defer qt.Recovering("connect QAccessibleInterface::setText")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "setText", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectSetText(t QAccessible__Text, text string) {
	defer qt.Recovering("disconnect QAccessibleInterface::setText")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "setText")
	}
}

func (ptr *QAccessibleInterface) SetText(t QAccessible__Text, text string) {
	defer qt.Recovering("QAccessibleInterface::setText")

	if ptr.Pointer() != nil {
		C.QAccessibleInterface_SetText(ptr.Pointer(), C.int(t), C.CString(text))
	}
}

func (ptr *QAccessibleInterface) TableCellInterface() *QAccessibleTableCellInterface {
	defer qt.Recovering("QAccessibleInterface::tableCellInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleTableCellInterfaceFromPointer(C.QAccessibleInterface_TableCellInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) TableInterface() *QAccessibleTableInterface {
	defer qt.Recovering("QAccessibleInterface::tableInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleTableInterfaceFromPointer(C.QAccessibleInterface_TableInterface(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Text
func callbackQAccessibleInterface_Text(ptr unsafe.Pointer, ptrName *C.char, t C.int) *C.char {
	defer qt.Recovering("callback QAccessibleInterface::text")

	if signal := qt.GetSignal(C.GoString(ptrName), "text"); signal != nil {
		return C.CString(signal.(func(QAccessible__Text) string)(QAccessible__Text(t)))
	}

	return C.CString("")
}

func (ptr *QAccessibleInterface) ConnectText(f func(t QAccessible__Text) string) {
	defer qt.Recovering("connect QAccessibleInterface::text")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "text", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectText(t QAccessible__Text) {
	defer qt.Recovering("disconnect QAccessibleInterface::text")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "text")
	}
}

func (ptr *QAccessibleInterface) Text(t QAccessible__Text) string {
	defer qt.Recovering("QAccessibleInterface::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleInterface_Text(ptr.Pointer(), C.int(t)))
	}
	return ""
}

func (ptr *QAccessibleInterface) TextInterface() *QAccessibleTextInterface {
	defer qt.Recovering("QAccessibleInterface::textInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleTextInterfaceFromPointer(C.QAccessibleInterface_TextInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) ValueInterface() *QAccessibleValueInterface {
	defer qt.Recovering("QAccessibleInterface::valueInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleValueInterfaceFromPointer(C.QAccessibleInterface_ValueInterface(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Window
func callbackQAccessibleInterface_Window(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleInterface::window")

	if signal := qt.GetSignal(C.GoString(ptrName), "window"); signal != nil {
		return PointerFromQWindow(signal.(func() *QWindow)())
	}

	return PointerFromQWindow(NewQAccessibleInterfaceFromPointer(ptr).WindowDefault())
}

func (ptr *QAccessibleInterface) ConnectWindow(f func() *QWindow) {
	defer qt.Recovering("connect QAccessibleInterface::window")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "window", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectWindow() {
	defer qt.Recovering("disconnect QAccessibleInterface::window")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "window")
	}
}

func (ptr *QAccessibleInterface) Window() *QWindow {
	defer qt.Recovering("QAccessibleInterface::window")

	if ptr.Pointer() != nil {
		return NewQWindowFromPointer(C.QAccessibleInterface_Window(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) WindowDefault() *QWindow {
	defer qt.Recovering("QAccessibleInterface::window")

	if ptr.Pointer() != nil {
		return NewQWindowFromPointer(C.QAccessibleInterface_WindowDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) ObjectNameAbs() string {
	defer qt.Recovering("QAccessibleInterface::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleInterface_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleInterface) SetObjectNameAbs(name string) {
	defer qt.Recovering("QAccessibleInterface::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QAccessibleInterface_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QAccessibleObject struct {
	QAccessibleInterface
}

type QAccessibleObject_ITF interface {
	QAccessibleInterface_ITF
	QAccessibleObject_PTR() *QAccessibleObject
}

func (p *QAccessibleObject) QAccessibleObject_PTR() *QAccessibleObject {
	return p
}

func (p *QAccessibleObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleInterface_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleInterface_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleObject(ptr QAccessibleObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleObject_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleObjectFromPointer(ptr unsafe.Pointer) *QAccessibleObject {
	var n = new(QAccessibleObject)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleObjectFromPointer(ptr unsafe.Pointer) *QAccessibleObject {
	var n = NewQAccessibleObjectFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QAccessibleObject_") {
		n.SetObjectNameAbs("QAccessibleObject_" + qt.Identifier())
	}
	return n
}

//export callbackQAccessibleObject_ChildAt
func callbackQAccessibleObject_ChildAt(ptr unsafe.Pointer, ptrName *C.char, x C.int, y C.int) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::childAt")

	if signal := qt.GetSignal(C.GoString(ptrName), "childAt"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int, int) *QAccessibleInterface)(int(x), int(y)))
	}

	return PointerFromQAccessibleInterface(NewQAccessibleObjectFromPointer(ptr).ChildAtDefault(int(x), int(y)))
}

func (ptr *QAccessibleObject) ConnectChildAt(f func(x int, y int) *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleObject::childAt")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "childAt", f)
	}
}

func (ptr *QAccessibleObject) DisconnectChildAt() {
	defer qt.Recovering("disconnect QAccessibleObject::childAt")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "childAt")
	}
}

func (ptr *QAccessibleObject) ChildAt(x int, y int) *QAccessibleInterface {
	defer qt.Recovering("QAccessibleObject::childAt")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_ChildAt(ptr.Pointer(), C.int(x), C.int(y)))
	}
	return nil
}

func (ptr *QAccessibleObject) ChildAtDefault(x int, y int) *QAccessibleInterface {
	defer qt.Recovering("QAccessibleObject::childAt")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_ChildAtDefault(ptr.Pointer(), C.int(x), C.int(y)))
	}
	return nil
}

//export callbackQAccessibleObject_IsValid
func callbackQAccessibleObject_IsValid(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleObject::isValid")

	if signal := qt.GetSignal(C.GoString(ptrName), "isValid"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(NewQAccessibleObjectFromPointer(ptr).IsValidDefault()))
}

func (ptr *QAccessibleObject) ConnectIsValid(f func() bool) {
	defer qt.Recovering("connect QAccessibleObject::isValid")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "isValid", f)
	}
}

func (ptr *QAccessibleObject) DisconnectIsValid() {
	defer qt.Recovering("disconnect QAccessibleObject::isValid")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "isValid")
	}
}

func (ptr *QAccessibleObject) IsValid() bool {
	defer qt.Recovering("QAccessibleObject::isValid")

	if ptr.Pointer() != nil {
		return C.QAccessibleObject_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAccessibleObject) IsValidDefault() bool {
	defer qt.Recovering("QAccessibleObject::isValid")

	if ptr.Pointer() != nil {
		return C.QAccessibleObject_IsValidDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAccessibleObject_Object
func callbackQAccessibleObject_Object(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::object")

	if signal := qt.GetSignal(C.GoString(ptrName), "object"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQAccessibleObjectFromPointer(ptr).ObjectDefault())
}

func (ptr *QAccessibleObject) ConnectObject(f func() *core.QObject) {
	defer qt.Recovering("connect QAccessibleObject::object")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "object", f)
	}
}

func (ptr *QAccessibleObject) DisconnectObject() {
	defer qt.Recovering("disconnect QAccessibleObject::object")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "object")
	}
}

func (ptr *QAccessibleObject) Object() *core.QObject {
	defer qt.Recovering("QAccessibleObject::object")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QAccessibleObject_Object(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleObject) ObjectDefault() *core.QObject {
	defer qt.Recovering("QAccessibleObject::object")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QAccessibleObject_ObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleObject_Rect
func callbackQAccessibleObject_Rect(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::rect")

	if signal := qt.GetSignal(C.GoString(ptrName), "rect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(NewQAccessibleObjectFromPointer(ptr).RectDefault())
}

func (ptr *QAccessibleObject) ConnectRect(f func() *core.QRect) {
	defer qt.Recovering("connect QAccessibleObject::rect")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "rect", f)
	}
}

func (ptr *QAccessibleObject) DisconnectRect() {
	defer qt.Recovering("disconnect QAccessibleObject::rect")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "rect")
	}
}

func (ptr *QAccessibleObject) Rect() *core.QRect {
	defer qt.Recovering("QAccessibleObject::rect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QAccessibleObject_Rect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleObject) RectDefault() *core.QRect {
	defer qt.Recovering("QAccessibleObject::rect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QAccessibleObject_RectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleObject_SetText
func callbackQAccessibleObject_SetText(ptr unsafe.Pointer, ptrName *C.char, t C.int, text *C.char) {
	defer qt.Recovering("callback QAccessibleObject::setText")

	if signal := qt.GetSignal(C.GoString(ptrName), "setText"); signal != nil {
		signal.(func(QAccessible__Text, string))(QAccessible__Text(t), C.GoString(text))
	} else {
		NewQAccessibleObjectFromPointer(ptr).SetTextDefault(QAccessible__Text(t), C.GoString(text))
	}
}

func (ptr *QAccessibleObject) ConnectSetText(f func(t QAccessible__Text, text string)) {
	defer qt.Recovering("connect QAccessibleObject::setText")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "setText", f)
	}
}

func (ptr *QAccessibleObject) DisconnectSetText() {
	defer qt.Recovering("disconnect QAccessibleObject::setText")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "setText")
	}
}

func (ptr *QAccessibleObject) SetText(t QAccessible__Text, text string) {
	defer qt.Recovering("QAccessibleObject::setText")

	if ptr.Pointer() != nil {
		C.QAccessibleObject_SetText(ptr.Pointer(), C.int(t), C.CString(text))
	}
}

func (ptr *QAccessibleObject) SetTextDefault(t QAccessible__Text, text string) {
	defer qt.Recovering("QAccessibleObject::setText")

	if ptr.Pointer() != nil {
		C.QAccessibleObject_SetTextDefault(ptr.Pointer(), C.int(t), C.CString(text))
	}
}

func (ptr *QAccessibleObject) DestroyQAccessibleObject() {
	defer qt.Recovering("QAccessibleObject::~QAccessibleObject")

	if ptr.Pointer() != nil {
		C.QAccessibleObject_DestroyQAccessibleObject(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleObject) ObjectNameAbs() string {
	defer qt.Recovering("QAccessibleObject::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleObject_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleObject) SetObjectNameAbs(name string) {
	defer qt.Recovering("QAccessibleObject::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QAccessibleObject_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

//export callbackQAccessibleObject_BackgroundColor
func callbackQAccessibleObject_BackgroundColor(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::backgroundColor")

	if signal := qt.GetSignal(C.GoString(ptrName), "backgroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleObjectFromPointer(ptr).BackgroundColorDefault())
}

func (ptr *QAccessibleObject) ConnectBackgroundColor(f func() *QColor) {
	defer qt.Recovering("connect QAccessibleObject::backgroundColor")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "backgroundColor", f)
	}
}

func (ptr *QAccessibleObject) DisconnectBackgroundColor() {
	defer qt.Recovering("disconnect QAccessibleObject::backgroundColor")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "backgroundColor")
	}
}

func (ptr *QAccessibleObject) BackgroundColor() *QColor {
	defer qt.Recovering("QAccessibleObject::backgroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QAccessibleObject_BackgroundColor(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleObject) BackgroundColorDefault() *QColor {
	defer qt.Recovering("QAccessibleObject::backgroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QAccessibleObject_BackgroundColorDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleObject_Child
func callbackQAccessibleObject_Child(ptr unsafe.Pointer, ptrName *C.char, index C.int) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::child")

	if signal := qt.GetSignal(C.GoString(ptrName), "child"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int) *QAccessibleInterface)(int(index)))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleObject) ConnectChild(f func(index int) *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleObject::child")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "child", f)
	}
}

func (ptr *QAccessibleObject) DisconnectChild(index int) {
	defer qt.Recovering("disconnect QAccessibleObject::child")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "child")
	}
}

func (ptr *QAccessibleObject) Child(index int) *QAccessibleInterface {
	defer qt.Recovering("QAccessibleObject::child")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_Child(ptr.Pointer(), C.int(index)))
	}
	return nil
}

//export callbackQAccessibleObject_ChildCount
func callbackQAccessibleObject_ChildCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleObject::childCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "childCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleObject) ConnectChildCount(f func() int) {
	defer qt.Recovering("connect QAccessibleObject::childCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "childCount", f)
	}
}

func (ptr *QAccessibleObject) DisconnectChildCount() {
	defer qt.Recovering("disconnect QAccessibleObject::childCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "childCount")
	}
}

func (ptr *QAccessibleObject) ChildCount() int {
	defer qt.Recovering("QAccessibleObject::childCount")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleObject_ChildCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleObject_FocusChild
func callbackQAccessibleObject_FocusChild(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::focusChild")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusChild"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleObjectFromPointer(ptr).FocusChildDefault())
}

func (ptr *QAccessibleObject) ConnectFocusChild(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleObject::focusChild")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "focusChild", f)
	}
}

func (ptr *QAccessibleObject) DisconnectFocusChild() {
	defer qt.Recovering("disconnect QAccessibleObject::focusChild")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "focusChild")
	}
}

func (ptr *QAccessibleObject) FocusChild() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleObject::focusChild")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_FocusChild(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleObject) FocusChildDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleObject::focusChild")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_FocusChildDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleObject_ForegroundColor
func callbackQAccessibleObject_ForegroundColor(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::foregroundColor")

	if signal := qt.GetSignal(C.GoString(ptrName), "foregroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleObjectFromPointer(ptr).ForegroundColorDefault())
}

func (ptr *QAccessibleObject) ConnectForegroundColor(f func() *QColor) {
	defer qt.Recovering("connect QAccessibleObject::foregroundColor")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "foregroundColor", f)
	}
}

func (ptr *QAccessibleObject) DisconnectForegroundColor() {
	defer qt.Recovering("disconnect QAccessibleObject::foregroundColor")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "foregroundColor")
	}
}

func (ptr *QAccessibleObject) ForegroundColor() *QColor {
	defer qt.Recovering("QAccessibleObject::foregroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QAccessibleObject_ForegroundColor(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleObject) ForegroundColorDefault() *QColor {
	defer qt.Recovering("QAccessibleObject::foregroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QAccessibleObject_ForegroundColorDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleObject_IndexOfChild
func callbackQAccessibleObject_IndexOfChild(ptr unsafe.Pointer, ptrName *C.char, child unsafe.Pointer) C.int {
	defer qt.Recovering("callback QAccessibleObject::indexOfChild")

	if signal := qt.GetSignal(C.GoString(ptrName), "indexOfChild"); signal != nil {
		return C.int(signal.(func(*QAccessibleInterface) int)(NewQAccessibleInterfaceFromPointer(child)))
	}

	return C.int(0)
}

func (ptr *QAccessibleObject) ConnectIndexOfChild(f func(child *QAccessibleInterface) int) {
	defer qt.Recovering("connect QAccessibleObject::indexOfChild")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "indexOfChild", f)
	}
}

func (ptr *QAccessibleObject) DisconnectIndexOfChild(child QAccessibleInterface_ITF) {
	defer qt.Recovering("disconnect QAccessibleObject::indexOfChild")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "indexOfChild")
	}
}

func (ptr *QAccessibleObject) IndexOfChild(child QAccessibleInterface_ITF) int {
	defer qt.Recovering("QAccessibleObject::indexOfChild")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleObject_IndexOfChild(ptr.Pointer(), PointerFromQAccessibleInterface(child)))
	}
	return 0
}

//export callbackQAccessibleObject_Interface_cast
func callbackQAccessibleObject_Interface_cast(ptr unsafe.Pointer, ptrName *C.char, ty C.int) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::interface_cast")

	if signal := qt.GetSignal(C.GoString(ptrName), "interface_cast"); signal != nil {
		return signal.(func(QAccessible__InterfaceType) unsafe.Pointer)(QAccessible__InterfaceType(ty))
	}

	return NewQAccessibleObjectFromPointer(ptr).Interface_castDefault(QAccessible__InterfaceType(ty))
}

func (ptr *QAccessibleObject) ConnectInterface_cast(f func(ty QAccessible__InterfaceType) unsafe.Pointer) {
	defer qt.Recovering("connect QAccessibleObject::interface_cast")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "interface_cast", f)
	}
}

func (ptr *QAccessibleObject) DisconnectInterface_cast() {
	defer qt.Recovering("disconnect QAccessibleObject::interface_cast")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "interface_cast")
	}
}

func (ptr *QAccessibleObject) Interface_cast(ty QAccessible__InterfaceType) unsafe.Pointer {
	defer qt.Recovering("QAccessibleObject::interface_cast")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleObject_Interface_cast(ptr.Pointer(), C.int(ty)))
	}
	return nil
}

func (ptr *QAccessibleObject) Interface_castDefault(ty QAccessible__InterfaceType) unsafe.Pointer {
	defer qt.Recovering("QAccessibleObject::interface_cast")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleObject_Interface_castDefault(ptr.Pointer(), C.int(ty)))
	}
	return nil
}

//export callbackQAccessibleObject_Parent
func callbackQAccessibleObject_Parent(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::parent")

	if signal := qt.GetSignal(C.GoString(ptrName), "parent"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleObject) ConnectParent(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleObject::parent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "parent", f)
	}
}

func (ptr *QAccessibleObject) DisconnectParent() {
	defer qt.Recovering("disconnect QAccessibleObject::parent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "parent")
	}
}

func (ptr *QAccessibleObject) Parent() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleObject::parent")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_Parent(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleObject_Role
func callbackQAccessibleObject_Role(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleObject::role")

	if signal := qt.GetSignal(C.GoString(ptrName), "role"); signal != nil {
		return C.int(signal.(func() QAccessible__Role)())
	}

	return C.int(0)
}

func (ptr *QAccessibleObject) ConnectRole(f func() QAccessible__Role) {
	defer qt.Recovering("connect QAccessibleObject::role")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "role", f)
	}
}

func (ptr *QAccessibleObject) DisconnectRole() {
	defer qt.Recovering("disconnect QAccessibleObject::role")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "role")
	}
}

func (ptr *QAccessibleObject) Role() QAccessible__Role {
	defer qt.Recovering("QAccessibleObject::role")

	if ptr.Pointer() != nil {
		return QAccessible__Role(C.QAccessibleObject_Role(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleObject_Text
func callbackQAccessibleObject_Text(ptr unsafe.Pointer, ptrName *C.char, t C.int) *C.char {
	defer qt.Recovering("callback QAccessibleObject::text")

	if signal := qt.GetSignal(C.GoString(ptrName), "text"); signal != nil {
		return C.CString(signal.(func(QAccessible__Text) string)(QAccessible__Text(t)))
	}

	return C.CString("")
}

func (ptr *QAccessibleObject) ConnectText(f func(t QAccessible__Text) string) {
	defer qt.Recovering("connect QAccessibleObject::text")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "text", f)
	}
}

func (ptr *QAccessibleObject) DisconnectText(t QAccessible__Text) {
	defer qt.Recovering("disconnect QAccessibleObject::text")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "text")
	}
}

func (ptr *QAccessibleObject) Text(t QAccessible__Text) string {
	defer qt.Recovering("QAccessibleObject::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleObject_Text(ptr.Pointer(), C.int(t)))
	}
	return ""
}

//export callbackQAccessibleObject_Window
func callbackQAccessibleObject_Window(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleObject::window")

	if signal := qt.GetSignal(C.GoString(ptrName), "window"); signal != nil {
		return PointerFromQWindow(signal.(func() *QWindow)())
	}

	return PointerFromQWindow(NewQAccessibleObjectFromPointer(ptr).WindowDefault())
}

func (ptr *QAccessibleObject) ConnectWindow(f func() *QWindow) {
	defer qt.Recovering("connect QAccessibleObject::window")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "window", f)
	}
}

func (ptr *QAccessibleObject) DisconnectWindow() {
	defer qt.Recovering("disconnect QAccessibleObject::window")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "window")
	}
}

func (ptr *QAccessibleObject) Window() *QWindow {
	defer qt.Recovering("QAccessibleObject::window")

	if ptr.Pointer() != nil {
		return NewQWindowFromPointer(C.QAccessibleObject_Window(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleObject) WindowDefault() *QWindow {
	defer qt.Recovering("QAccessibleObject::window")

	if ptr.Pointer() != nil {
		return NewQWindowFromPointer(C.QAccessibleObject_WindowDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessiblePlugin struct {
	core.QObject
}

type QAccessiblePlugin_ITF interface {
	core.QObject_ITF
	QAccessiblePlugin_PTR() *QAccessiblePlugin
}

func (p *QAccessiblePlugin) QAccessiblePlugin_PTR() *QAccessiblePlugin {
	return p
}

func (p *QAccessiblePlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAccessiblePlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessiblePlugin(ptr QAccessiblePlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessiblePlugin_PTR().Pointer()
	}
	return nil
}

func NewQAccessiblePluginFromPointer(ptr unsafe.Pointer) *QAccessiblePlugin {
	var n = new(QAccessiblePlugin)
	n.SetPointer(ptr)
	return n
}

func newQAccessiblePluginFromPointer(ptr unsafe.Pointer) *QAccessiblePlugin {
	var n = NewQAccessiblePluginFromPointer(ptr)
	for len(n.ObjectName()) < len("QAccessiblePlugin_") {
		n.SetObjectName("QAccessiblePlugin_" + qt.Identifier())
	}
	return n
}

func NewQAccessiblePlugin(parent core.QObject_ITF) *QAccessiblePlugin {
	defer qt.Recovering("QAccessiblePlugin::QAccessiblePlugin")

	return newQAccessiblePluginFromPointer(C.QAccessiblePlugin_NewQAccessiblePlugin(core.PointerFromQObject(parent)))
}

//export callbackQAccessiblePlugin_Create
func callbackQAccessiblePlugin_Create(ptr unsafe.Pointer, ptrName *C.char, key *C.char, object unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAccessiblePlugin::create")

	if signal := qt.GetSignal(C.GoString(ptrName), "create"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(string, *core.QObject) *QAccessibleInterface)(C.GoString(key), core.NewQObjectFromPointer(object)))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessiblePlugin) ConnectCreate(f func(key string, object *core.QObject) *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessiblePlugin::create")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "create", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectCreate(key string, object core.QObject_ITF) {
	defer qt.Recovering("disconnect QAccessiblePlugin::create")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "create")
	}
}

func (ptr *QAccessiblePlugin) Create(key string, object core.QObject_ITF) *QAccessibleInterface {
	defer qt.Recovering("QAccessiblePlugin::create")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessiblePlugin_Create(ptr.Pointer(), C.CString(key), core.PointerFromQObject(object)))
	}
	return nil
}

func (ptr *QAccessiblePlugin) DestroyQAccessiblePlugin() {
	defer qt.Recovering("QAccessiblePlugin::~QAccessiblePlugin")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DestroyQAccessiblePlugin(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessiblePlugin_TimerEvent
func callbackQAccessiblePlugin_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QAccessiblePlugin::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAccessiblePluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAccessiblePlugin) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAccessiblePlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAccessiblePlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QAccessiblePlugin) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAccessiblePlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAccessiblePlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAccessiblePlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAccessiblePlugin_ChildEvent
func callbackQAccessiblePlugin_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QAccessiblePlugin::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAccessiblePluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAccessiblePlugin) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAccessiblePlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAccessiblePlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QAccessiblePlugin) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAccessiblePlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAccessiblePlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAccessiblePlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAccessiblePlugin_ConnectNotify
func callbackQAccessiblePlugin_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAccessiblePlugin::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAccessiblePluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAccessiblePlugin) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAccessiblePlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAccessiblePlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QAccessiblePlugin) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAccessiblePlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAccessiblePlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAccessiblePlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAccessiblePlugin_CustomEvent
func callbackQAccessiblePlugin_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QAccessiblePlugin::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAccessiblePluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAccessiblePlugin) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAccessiblePlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAccessiblePlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QAccessiblePlugin) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAccessiblePlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAccessiblePlugin) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAccessiblePlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAccessiblePlugin_DeleteLater
func callbackQAccessiblePlugin_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QAccessiblePlugin::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAccessiblePlugin) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAccessiblePlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAccessiblePlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QAccessiblePlugin) DeleteLater() {
	defer qt.Recovering("QAccessiblePlugin::deleteLater")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessiblePlugin_DisconnectNotify
func callbackQAccessiblePlugin_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAccessiblePlugin::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAccessiblePluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAccessiblePlugin) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAccessiblePlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAccessiblePlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QAccessiblePlugin) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAccessiblePlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAccessiblePlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAccessiblePlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAccessiblePlugin_Event
func callbackQAccessiblePlugin_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QAccessiblePlugin::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQAccessiblePluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QAccessiblePlugin) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAccessiblePlugin::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectEvent() {
	defer qt.Recovering("disconnect QAccessiblePlugin::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QAccessiblePlugin) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAccessiblePlugin::event")

	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAccessiblePlugin) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAccessiblePlugin::event")

	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAccessiblePlugin_EventFilter
func callbackQAccessiblePlugin_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QAccessiblePlugin::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQAccessiblePluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QAccessiblePlugin) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAccessiblePlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAccessiblePlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QAccessiblePlugin) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAccessiblePlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAccessiblePlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAccessiblePlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAccessiblePlugin_MetaObject
func callbackQAccessiblePlugin_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessiblePlugin::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAccessiblePluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAccessiblePlugin) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAccessiblePlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAccessiblePlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QAccessiblePlugin) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAccessiblePlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAccessiblePlugin_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessiblePlugin) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAccessiblePlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAccessiblePlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleStateChangeEvent struct {
	QAccessibleEvent
}

type QAccessibleStateChangeEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleStateChangeEvent_PTR() *QAccessibleStateChangeEvent
}

func (p *QAccessibleStateChangeEvent) QAccessibleStateChangeEvent_PTR() *QAccessibleStateChangeEvent {
	return p
}

func (p *QAccessibleStateChangeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleStateChangeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleStateChangeEvent(ptr QAccessibleStateChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleStateChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleStateChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleStateChangeEvent {
	var n = new(QAccessibleStateChangeEvent)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleStateChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleStateChangeEvent {
	var n = NewQAccessibleStateChangeEventFromPointer(ptr)
	return n
}

//export callbackQAccessibleStateChangeEvent_AccessibleInterface
func callbackQAccessibleStateChangeEvent_AccessibleInterface(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleStateChangeEvent::accessibleInterface")

	if signal := qt.GetSignal(C.GoString(ptrName), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleStateChangeEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleStateChangeEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleStateChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "accessibleInterface", f)
	}
}

func (ptr *QAccessibleStateChangeEvent) DisconnectAccessibleInterface() {
	defer qt.Recovering("disconnect QAccessibleStateChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "accessibleInterface")
	}
}

func (ptr *QAccessibleStateChangeEvent) AccessibleInterface() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleStateChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleStateChangeEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleStateChangeEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleStateChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleStateChangeEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTableCellInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleTableCellInterface_ITF interface {
	QAccessibleTableCellInterface_PTR() *QAccessibleTableCellInterface
}

func (p *QAccessibleTableCellInterface) QAccessibleTableCellInterface_PTR() *QAccessibleTableCellInterface {
	return p
}

func (p *QAccessibleTableCellInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleTableCellInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleTableCellInterface(ptr QAccessibleTableCellInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTableCellInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTableCellInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTableCellInterface {
	var n = new(QAccessibleTableCellInterface)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleTableCellInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTableCellInterface {
	var n = NewQAccessibleTableCellInterfaceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QAccessibleTableCellInterface_") {
		n.SetObjectNameAbs("QAccessibleTableCellInterface_" + qt.Identifier())
	}
	return n
}

//export callbackQAccessibleTableCellInterface_ColumnExtent
func callbackQAccessibleTableCellInterface_ColumnExtent(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableCellInterface::columnExtent")

	if signal := qt.GetSignal(C.GoString(ptrName), "columnExtent"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTableCellInterface) ConnectColumnExtent(f func() int) {
	defer qt.Recovering("connect QAccessibleTableCellInterface::columnExtent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "columnExtent", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectColumnExtent() {
	defer qt.Recovering("disconnect QAccessibleTableCellInterface::columnExtent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "columnExtent")
	}
}

func (ptr *QAccessibleTableCellInterface) ColumnExtent() int {
	defer qt.Recovering("QAccessibleTableCellInterface::columnExtent")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableCellInterface_ColumnExtent(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_ColumnIndex
func callbackQAccessibleTableCellInterface_ColumnIndex(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableCellInterface::columnIndex")

	if signal := qt.GetSignal(C.GoString(ptrName), "columnIndex"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTableCellInterface) ConnectColumnIndex(f func() int) {
	defer qt.Recovering("connect QAccessibleTableCellInterface::columnIndex")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "columnIndex", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectColumnIndex() {
	defer qt.Recovering("disconnect QAccessibleTableCellInterface::columnIndex")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "columnIndex")
	}
}

func (ptr *QAccessibleTableCellInterface) ColumnIndex() int {
	defer qt.Recovering("QAccessibleTableCellInterface::columnIndex")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableCellInterface_ColumnIndex(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_IsSelected
func callbackQAccessibleTableCellInterface_IsSelected(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableCellInterface::isSelected")

	if signal := qt.GetSignal(C.GoString(ptrName), "isSelected"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QAccessibleTableCellInterface) ConnectIsSelected(f func() bool) {
	defer qt.Recovering("connect QAccessibleTableCellInterface::isSelected")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "isSelected", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectIsSelected() {
	defer qt.Recovering("disconnect QAccessibleTableCellInterface::isSelected")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "isSelected")
	}
}

func (ptr *QAccessibleTableCellInterface) IsSelected() bool {
	defer qt.Recovering("QAccessibleTableCellInterface::isSelected")

	if ptr.Pointer() != nil {
		return C.QAccessibleTableCellInterface_IsSelected(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAccessibleTableCellInterface_RowExtent
func callbackQAccessibleTableCellInterface_RowExtent(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableCellInterface::rowExtent")

	if signal := qt.GetSignal(C.GoString(ptrName), "rowExtent"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTableCellInterface) ConnectRowExtent(f func() int) {
	defer qt.Recovering("connect QAccessibleTableCellInterface::rowExtent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "rowExtent", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectRowExtent() {
	defer qt.Recovering("disconnect QAccessibleTableCellInterface::rowExtent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "rowExtent")
	}
}

func (ptr *QAccessibleTableCellInterface) RowExtent() int {
	defer qt.Recovering("QAccessibleTableCellInterface::rowExtent")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableCellInterface_RowExtent(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_RowIndex
func callbackQAccessibleTableCellInterface_RowIndex(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableCellInterface::rowIndex")

	if signal := qt.GetSignal(C.GoString(ptrName), "rowIndex"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTableCellInterface) ConnectRowIndex(f func() int) {
	defer qt.Recovering("connect QAccessibleTableCellInterface::rowIndex")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "rowIndex", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectRowIndex() {
	defer qt.Recovering("disconnect QAccessibleTableCellInterface::rowIndex")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "rowIndex")
	}
}

func (ptr *QAccessibleTableCellInterface) RowIndex() int {
	defer qt.Recovering("QAccessibleTableCellInterface::rowIndex")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableCellInterface_RowIndex(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_Table
func callbackQAccessibleTableCellInterface_Table(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTableCellInterface::table")

	if signal := qt.GetSignal(C.GoString(ptrName), "table"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableCellInterface) ConnectTable(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTableCellInterface::table")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "table", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectTable() {
	defer qt.Recovering("disconnect QAccessibleTableCellInterface::table")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "table")
	}
}

func (ptr *QAccessibleTableCellInterface) Table() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTableCellInterface::table")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableCellInterface_Table(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTableCellInterface) DestroyQAccessibleTableCellInterface() {
	defer qt.Recovering("QAccessibleTableCellInterface::~QAccessibleTableCellInterface")

	if ptr.Pointer() != nil {
		C.QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTableCellInterface) ObjectNameAbs() string {
	defer qt.Recovering("QAccessibleTableCellInterface::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTableCellInterface_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTableCellInterface) SetObjectNameAbs(name string) {
	defer qt.Recovering("QAccessibleTableCellInterface::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QAccessibleTableCellInterface_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QAccessibleTableInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleTableInterface_ITF interface {
	QAccessibleTableInterface_PTR() *QAccessibleTableInterface
}

func (p *QAccessibleTableInterface) QAccessibleTableInterface_PTR() *QAccessibleTableInterface {
	return p
}

func (p *QAccessibleTableInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleTableInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleTableInterface(ptr QAccessibleTableInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTableInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTableInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTableInterface {
	var n = new(QAccessibleTableInterface)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleTableInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTableInterface {
	var n = NewQAccessibleTableInterfaceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QAccessibleTableInterface_") {
		n.SetObjectNameAbs("QAccessibleTableInterface_" + qt.Identifier())
	}
	return n
}

//export callbackQAccessibleTableInterface_Caption
func callbackQAccessibleTableInterface_Caption(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTableInterface::caption")

	if signal := qt.GetSignal(C.GoString(ptrName), "caption"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableInterface) ConnectCaption(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTableInterface::caption")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "caption", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectCaption() {
	defer qt.Recovering("disconnect QAccessibleTableInterface::caption")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "caption")
	}
}

func (ptr *QAccessibleTableInterface) Caption() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTableInterface::caption")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_Caption(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleTableInterface_CellAt
func callbackQAccessibleTableInterface_CellAt(ptr unsafe.Pointer, ptrName *C.char, row C.int, column C.int) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTableInterface::cellAt")

	if signal := qt.GetSignal(C.GoString(ptrName), "cellAt"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int, int) *QAccessibleInterface)(int(row), int(column)))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableInterface) ConnectCellAt(f func(row int, column int) *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTableInterface::cellAt")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "cellAt", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectCellAt(row int, column int) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::cellAt")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "cellAt")
	}
}

func (ptr *QAccessibleTableInterface) CellAt(row int, column int) *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTableInterface::cellAt")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_CellAt(ptr.Pointer(), C.int(row), C.int(column)))
	}
	return nil
}

//export callbackQAccessibleTableInterface_ColumnCount
func callbackQAccessibleTableInterface_ColumnCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::columnCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "columnCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTableInterface) ConnectColumnCount(f func() int) {
	defer qt.Recovering("connect QAccessibleTableInterface::columnCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "columnCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectColumnCount() {
	defer qt.Recovering("disconnect QAccessibleTableInterface::columnCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "columnCount")
	}
}

func (ptr *QAccessibleTableInterface) ColumnCount() int {
	defer qt.Recovering("QAccessibleTableInterface::columnCount")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableInterface_ColumnCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTableInterface_ColumnDescription
func callbackQAccessibleTableInterface_ColumnDescription(ptr unsafe.Pointer, ptrName *C.char, column C.int) *C.char {
	defer qt.Recovering("callback QAccessibleTableInterface::columnDescription")

	if signal := qt.GetSignal(C.GoString(ptrName), "columnDescription"); signal != nil {
		return C.CString(signal.(func(int) string)(int(column)))
	}

	return C.CString("")
}

func (ptr *QAccessibleTableInterface) ConnectColumnDescription(f func(column int) string) {
	defer qt.Recovering("connect QAccessibleTableInterface::columnDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "columnDescription", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectColumnDescription(column int) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::columnDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "columnDescription")
	}
}

func (ptr *QAccessibleTableInterface) ColumnDescription(column int) string {
	defer qt.Recovering("QAccessibleTableInterface::columnDescription")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTableInterface_ColumnDescription(ptr.Pointer(), C.int(column)))
	}
	return ""
}

//export callbackQAccessibleTableInterface_IsColumnSelected
func callbackQAccessibleTableInterface_IsColumnSelected(ptr unsafe.Pointer, ptrName *C.char, column C.int) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::isColumnSelected")

	if signal := qt.GetSignal(C.GoString(ptrName), "isColumnSelected"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int) bool)(int(column))))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QAccessibleTableInterface) ConnectIsColumnSelected(f func(column int) bool) {
	defer qt.Recovering("connect QAccessibleTableInterface::isColumnSelected")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "isColumnSelected", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectIsColumnSelected(column int) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::isColumnSelected")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "isColumnSelected")
	}
}

func (ptr *QAccessibleTableInterface) IsColumnSelected(column int) bool {
	defer qt.Recovering("QAccessibleTableInterface::isColumnSelected")

	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_IsColumnSelected(ptr.Pointer(), C.int(column)) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_IsRowSelected
func callbackQAccessibleTableInterface_IsRowSelected(ptr unsafe.Pointer, ptrName *C.char, row C.int) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::isRowSelected")

	if signal := qt.GetSignal(C.GoString(ptrName), "isRowSelected"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int) bool)(int(row))))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QAccessibleTableInterface) ConnectIsRowSelected(f func(row int) bool) {
	defer qt.Recovering("connect QAccessibleTableInterface::isRowSelected")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "isRowSelected", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectIsRowSelected(row int) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::isRowSelected")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "isRowSelected")
	}
}

func (ptr *QAccessibleTableInterface) IsRowSelected(row int) bool {
	defer qt.Recovering("QAccessibleTableInterface::isRowSelected")

	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_IsRowSelected(ptr.Pointer(), C.int(row)) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_ModelChange
func callbackQAccessibleTableInterface_ModelChange(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QAccessibleTableInterface::modelChange")

	if signal := qt.GetSignal(C.GoString(ptrName), "modelChange"); signal != nil {
		signal.(func(*QAccessibleTableModelChangeEvent))(NewQAccessibleTableModelChangeEventFromPointer(event))
	}

}

func (ptr *QAccessibleTableInterface) ConnectModelChange(f func(event *QAccessibleTableModelChangeEvent)) {
	defer qt.Recovering("connect QAccessibleTableInterface::modelChange")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "modelChange", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectModelChange(event QAccessibleTableModelChangeEvent_ITF) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::modelChange")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "modelChange")
	}
}

func (ptr *QAccessibleTableInterface) ModelChange(event QAccessibleTableModelChangeEvent_ITF) {
	defer qt.Recovering("QAccessibleTableInterface::modelChange")

	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface_ModelChange(ptr.Pointer(), PointerFromQAccessibleTableModelChangeEvent(event))
	}
}

//export callbackQAccessibleTableInterface_RowCount
func callbackQAccessibleTableInterface_RowCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::rowCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "rowCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTableInterface) ConnectRowCount(f func() int) {
	defer qt.Recovering("connect QAccessibleTableInterface::rowCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "rowCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectRowCount() {
	defer qt.Recovering("disconnect QAccessibleTableInterface::rowCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "rowCount")
	}
}

func (ptr *QAccessibleTableInterface) RowCount() int {
	defer qt.Recovering("QAccessibleTableInterface::rowCount")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableInterface_RowCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTableInterface_RowDescription
func callbackQAccessibleTableInterface_RowDescription(ptr unsafe.Pointer, ptrName *C.char, row C.int) *C.char {
	defer qt.Recovering("callback QAccessibleTableInterface::rowDescription")

	if signal := qt.GetSignal(C.GoString(ptrName), "rowDescription"); signal != nil {
		return C.CString(signal.(func(int) string)(int(row)))
	}

	return C.CString("")
}

func (ptr *QAccessibleTableInterface) ConnectRowDescription(f func(row int) string) {
	defer qt.Recovering("connect QAccessibleTableInterface::rowDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "rowDescription", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectRowDescription(row int) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::rowDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "rowDescription")
	}
}

func (ptr *QAccessibleTableInterface) RowDescription(row int) string {
	defer qt.Recovering("QAccessibleTableInterface::rowDescription")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTableInterface_RowDescription(ptr.Pointer(), C.int(row)))
	}
	return ""
}

//export callbackQAccessibleTableInterface_SelectColumn
func callbackQAccessibleTableInterface_SelectColumn(ptr unsafe.Pointer, ptrName *C.char, column C.int) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::selectColumn")

	if signal := qt.GetSignal(C.GoString(ptrName), "selectColumn"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int) bool)(int(column))))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QAccessibleTableInterface) ConnectSelectColumn(f func(column int) bool) {
	defer qt.Recovering("connect QAccessibleTableInterface::selectColumn")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "selectColumn", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectColumn(column int) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::selectColumn")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "selectColumn")
	}
}

func (ptr *QAccessibleTableInterface) SelectColumn(column int) bool {
	defer qt.Recovering("QAccessibleTableInterface::selectColumn")

	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_SelectColumn(ptr.Pointer(), C.int(column)) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_SelectRow
func callbackQAccessibleTableInterface_SelectRow(ptr unsafe.Pointer, ptrName *C.char, row C.int) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::selectRow")

	if signal := qt.GetSignal(C.GoString(ptrName), "selectRow"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int) bool)(int(row))))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QAccessibleTableInterface) ConnectSelectRow(f func(row int) bool) {
	defer qt.Recovering("connect QAccessibleTableInterface::selectRow")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "selectRow", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectRow(row int) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::selectRow")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "selectRow")
	}
}

func (ptr *QAccessibleTableInterface) SelectRow(row int) bool {
	defer qt.Recovering("QAccessibleTableInterface::selectRow")

	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_SelectRow(ptr.Pointer(), C.int(row)) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_SelectedCellCount
func callbackQAccessibleTableInterface_SelectedCellCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::selectedCellCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "selectedCellCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTableInterface) ConnectSelectedCellCount(f func() int) {
	defer qt.Recovering("connect QAccessibleTableInterface::selectedCellCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "selectedCellCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedCellCount() {
	defer qt.Recovering("disconnect QAccessibleTableInterface::selectedCellCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "selectedCellCount")
	}
}

func (ptr *QAccessibleTableInterface) SelectedCellCount() int {
	defer qt.Recovering("QAccessibleTableInterface::selectedCellCount")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableInterface_SelectedCellCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTableInterface_SelectedColumnCount
func callbackQAccessibleTableInterface_SelectedColumnCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::selectedColumnCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "selectedColumnCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTableInterface) ConnectSelectedColumnCount(f func() int) {
	defer qt.Recovering("connect QAccessibleTableInterface::selectedColumnCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "selectedColumnCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedColumnCount() {
	defer qt.Recovering("disconnect QAccessibleTableInterface::selectedColumnCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "selectedColumnCount")
	}
}

func (ptr *QAccessibleTableInterface) SelectedColumnCount() int {
	defer qt.Recovering("QAccessibleTableInterface::selectedColumnCount")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableInterface_SelectedColumnCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTableInterface_SelectedRowCount
func callbackQAccessibleTableInterface_SelectedRowCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::selectedRowCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "selectedRowCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTableInterface) ConnectSelectedRowCount(f func() int) {
	defer qt.Recovering("connect QAccessibleTableInterface::selectedRowCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "selectedRowCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedRowCount() {
	defer qt.Recovering("disconnect QAccessibleTableInterface::selectedRowCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "selectedRowCount")
	}
}

func (ptr *QAccessibleTableInterface) SelectedRowCount() int {
	defer qt.Recovering("QAccessibleTableInterface::selectedRowCount")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableInterface_SelectedRowCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTableInterface_Summary
func callbackQAccessibleTableInterface_Summary(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTableInterface::summary")

	if signal := qt.GetSignal(C.GoString(ptrName), "summary"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableInterface) ConnectSummary(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTableInterface::summary")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "summary", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSummary() {
	defer qt.Recovering("disconnect QAccessibleTableInterface::summary")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "summary")
	}
}

func (ptr *QAccessibleTableInterface) Summary() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTableInterface::summary")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_Summary(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleTableInterface_UnselectColumn
func callbackQAccessibleTableInterface_UnselectColumn(ptr unsafe.Pointer, ptrName *C.char, column C.int) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::unselectColumn")

	if signal := qt.GetSignal(C.GoString(ptrName), "unselectColumn"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int) bool)(int(column))))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QAccessibleTableInterface) ConnectUnselectColumn(f func(column int) bool) {
	defer qt.Recovering("connect QAccessibleTableInterface::unselectColumn")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "unselectColumn", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectUnselectColumn(column int) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::unselectColumn")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "unselectColumn")
	}
}

func (ptr *QAccessibleTableInterface) UnselectColumn(column int) bool {
	defer qt.Recovering("QAccessibleTableInterface::unselectColumn")

	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_UnselectColumn(ptr.Pointer(), C.int(column)) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_UnselectRow
func callbackQAccessibleTableInterface_UnselectRow(ptr unsafe.Pointer, ptrName *C.char, row C.int) C.int {
	defer qt.Recovering("callback QAccessibleTableInterface::unselectRow")

	if signal := qt.GetSignal(C.GoString(ptrName), "unselectRow"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int) bool)(int(row))))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QAccessibleTableInterface) ConnectUnselectRow(f func(row int) bool) {
	defer qt.Recovering("connect QAccessibleTableInterface::unselectRow")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "unselectRow", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectUnselectRow(row int) {
	defer qt.Recovering("disconnect QAccessibleTableInterface::unselectRow")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "unselectRow")
	}
}

func (ptr *QAccessibleTableInterface) UnselectRow(row int) bool {
	defer qt.Recovering("QAccessibleTableInterface::unselectRow")

	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_UnselectRow(ptr.Pointer(), C.int(row)) != 0
	}
	return false
}

func (ptr *QAccessibleTableInterface) DestroyQAccessibleTableInterface() {
	defer qt.Recovering("QAccessibleTableInterface::~QAccessibleTableInterface")

	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface_DestroyQAccessibleTableInterface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTableInterface) ObjectNameAbs() string {
	defer qt.Recovering("QAccessibleTableInterface::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTableInterface_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTableInterface) SetObjectNameAbs(name string) {
	defer qt.Recovering("QAccessibleTableInterface::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

//QAccessibleTableModelChangeEvent::ModelChangeType
type QAccessibleTableModelChangeEvent__ModelChangeType int64

const (
	QAccessibleTableModelChangeEvent__ModelReset      = QAccessibleTableModelChangeEvent__ModelChangeType(0)
	QAccessibleTableModelChangeEvent__DataChanged     = QAccessibleTableModelChangeEvent__ModelChangeType(1)
	QAccessibleTableModelChangeEvent__RowsInserted    = QAccessibleTableModelChangeEvent__ModelChangeType(2)
	QAccessibleTableModelChangeEvent__ColumnsInserted = QAccessibleTableModelChangeEvent__ModelChangeType(3)
	QAccessibleTableModelChangeEvent__RowsRemoved     = QAccessibleTableModelChangeEvent__ModelChangeType(4)
	QAccessibleTableModelChangeEvent__ColumnsRemoved  = QAccessibleTableModelChangeEvent__ModelChangeType(5)
)

type QAccessibleTableModelChangeEvent struct {
	QAccessibleEvent
}

type QAccessibleTableModelChangeEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleTableModelChangeEvent_PTR() *QAccessibleTableModelChangeEvent
}

func (p *QAccessibleTableModelChangeEvent) QAccessibleTableModelChangeEvent_PTR() *QAccessibleTableModelChangeEvent {
	return p
}

func (p *QAccessibleTableModelChangeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTableModelChangeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTableModelChangeEvent(ptr QAccessibleTableModelChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTableModelChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTableModelChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleTableModelChangeEvent {
	var n = new(QAccessibleTableModelChangeEvent)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleTableModelChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleTableModelChangeEvent {
	var n = NewQAccessibleTableModelChangeEventFromPointer(ptr)
	return n
}

func NewQAccessibleTableModelChangeEvent2(iface QAccessibleInterface_ITF, changeType QAccessibleTableModelChangeEvent__ModelChangeType) *QAccessibleTableModelChangeEvent {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::QAccessibleTableModelChangeEvent")

	return newQAccessibleTableModelChangeEventFromPointer(C.QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent2(PointerFromQAccessibleInterface(iface), C.int(changeType)))
}

func NewQAccessibleTableModelChangeEvent(object core.QObject_ITF, changeType QAccessibleTableModelChangeEvent__ModelChangeType) *QAccessibleTableModelChangeEvent {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::QAccessibleTableModelChangeEvent")

	return newQAccessibleTableModelChangeEventFromPointer(C.QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent(core.PointerFromQObject(object), C.int(changeType)))
}

func (ptr *QAccessibleTableModelChangeEvent) FirstColumn() int {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::firstColumn")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableModelChangeEvent_FirstColumn(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) FirstRow() int {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::firstRow")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableModelChangeEvent_FirstRow(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) LastColumn() int {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::lastColumn")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableModelChangeEvent_LastColumn(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) LastRow() int {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::lastRow")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTableModelChangeEvent_LastRow(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) ModelChangeType() QAccessibleTableModelChangeEvent__ModelChangeType {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::modelChangeType")

	if ptr.Pointer() != nil {
		return QAccessibleTableModelChangeEvent__ModelChangeType(C.QAccessibleTableModelChangeEvent_ModelChangeType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetFirstColumn(column int) {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::setFirstColumn")

	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetFirstColumn(ptr.Pointer(), C.int(column))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetFirstRow(row int) {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::setFirstRow")

	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetFirstRow(ptr.Pointer(), C.int(row))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetLastColumn(column int) {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::setLastColumn")

	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetLastColumn(ptr.Pointer(), C.int(column))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetLastRow(row int) {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::setLastRow")

	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetLastRow(ptr.Pointer(), C.int(row))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetModelChangeType(changeType QAccessibleTableModelChangeEvent__ModelChangeType) {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::setModelChangeType")

	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetModelChangeType(ptr.Pointer(), C.int(changeType))
	}
}

//export callbackQAccessibleTableModelChangeEvent_AccessibleInterface
func callbackQAccessibleTableModelChangeEvent_AccessibleInterface(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTableModelChangeEvent::accessibleInterface")

	if signal := qt.GetSignal(C.GoString(ptrName), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTableModelChangeEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTableModelChangeEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTableModelChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "accessibleInterface", f)
	}
}

func (ptr *QAccessibleTableModelChangeEvent) DisconnectAccessibleInterface() {
	defer qt.Recovering("disconnect QAccessibleTableModelChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "accessibleInterface")
	}
}

func (ptr *QAccessibleTableModelChangeEvent) AccessibleInterface() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableModelChangeEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTableModelChangeEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTableModelChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableModelChangeEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextCursorEvent struct {
	QAccessibleEvent
}

type QAccessibleTextCursorEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleTextCursorEvent_PTR() *QAccessibleTextCursorEvent
}

func (p *QAccessibleTextCursorEvent) QAccessibleTextCursorEvent_PTR() *QAccessibleTextCursorEvent {
	return p
}

func (p *QAccessibleTextCursorEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextCursorEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextCursorEvent(ptr QAccessibleTextCursorEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextCursorEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextCursorEvent {
	var n = new(QAccessibleTextCursorEvent)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleTextCursorEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextCursorEvent {
	var n = NewQAccessibleTextCursorEventFromPointer(ptr)
	return n
}

func NewQAccessibleTextCursorEvent2(iface QAccessibleInterface_ITF, cursorPos int) *QAccessibleTextCursorEvent {
	defer qt.Recovering("QAccessibleTextCursorEvent::QAccessibleTextCursorEvent")

	return newQAccessibleTextCursorEventFromPointer(C.QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent2(PointerFromQAccessibleInterface(iface), C.int(cursorPos)))
}

func NewQAccessibleTextCursorEvent(object core.QObject_ITF, cursorPos int) *QAccessibleTextCursorEvent {
	defer qt.Recovering("QAccessibleTextCursorEvent::QAccessibleTextCursorEvent")

	return newQAccessibleTextCursorEventFromPointer(C.QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent(core.PointerFromQObject(object), C.int(cursorPos)))
}

func (ptr *QAccessibleTextCursorEvent) CursorPosition() int {
	defer qt.Recovering("QAccessibleTextCursorEvent::cursorPosition")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextCursorEvent_CursorPosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTextCursorEvent) SetCursorPosition(position int) {
	defer qt.Recovering("QAccessibleTextCursorEvent::setCursorPosition")

	if ptr.Pointer() != nil {
		C.QAccessibleTextCursorEvent_SetCursorPosition(ptr.Pointer(), C.int(position))
	}
}

//export callbackQAccessibleTextCursorEvent_AccessibleInterface
func callbackQAccessibleTextCursorEvent_AccessibleInterface(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTextCursorEvent::accessibleInterface")

	if signal := qt.GetSignal(C.GoString(ptrName), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextCursorEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextCursorEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTextCursorEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextCursorEvent) DisconnectAccessibleInterface() {
	defer qt.Recovering("disconnect QAccessibleTextCursorEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "accessibleInterface")
	}
}

func (ptr *QAccessibleTextCursorEvent) AccessibleInterface() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextCursorEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextCursorEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextCursorEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextCursorEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextCursorEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextInsertEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextInsertEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextInsertEvent_PTR() *QAccessibleTextInsertEvent
}

func (p *QAccessibleTextInsertEvent) QAccessibleTextInsertEvent_PTR() *QAccessibleTextInsertEvent {
	return p
}

func (p *QAccessibleTextInsertEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextInsertEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleTextCursorEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextInsertEvent(ptr QAccessibleTextInsertEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextInsertEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextInsertEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextInsertEvent {
	var n = new(QAccessibleTextInsertEvent)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleTextInsertEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextInsertEvent {
	var n = NewQAccessibleTextInsertEventFromPointer(ptr)
	return n
}

func NewQAccessibleTextInsertEvent2(iface QAccessibleInterface_ITF, position int, text string) *QAccessibleTextInsertEvent {
	defer qt.Recovering("QAccessibleTextInsertEvent::QAccessibleTextInsertEvent")

	return newQAccessibleTextInsertEventFromPointer(C.QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent2(PointerFromQAccessibleInterface(iface), C.int(position), C.CString(text)))
}

func NewQAccessibleTextInsertEvent(object core.QObject_ITF, position int, text string) *QAccessibleTextInsertEvent {
	defer qt.Recovering("QAccessibleTextInsertEvent::QAccessibleTextInsertEvent")

	return newQAccessibleTextInsertEventFromPointer(C.QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent(core.PointerFromQObject(object), C.int(position), C.CString(text)))
}

func (ptr *QAccessibleTextInsertEvent) ChangePosition() int {
	defer qt.Recovering("QAccessibleTextInsertEvent::changePosition")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextInsertEvent_ChangePosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTextInsertEvent) TextInserted() string {
	defer qt.Recovering("QAccessibleTextInsertEvent::textInserted")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInsertEvent_TextInserted(ptr.Pointer()))
	}
	return ""
}

//export callbackQAccessibleTextInsertEvent_AccessibleInterface
func callbackQAccessibleTextInsertEvent_AccessibleInterface(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTextInsertEvent::accessibleInterface")

	if signal := qt.GetSignal(C.GoString(ptrName), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextInsertEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextInsertEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTextInsertEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextInsertEvent) DisconnectAccessibleInterface() {
	defer qt.Recovering("disconnect QAccessibleTextInsertEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "accessibleInterface")
	}
}

func (ptr *QAccessibleTextInsertEvent) AccessibleInterface() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextInsertEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextInsertEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextInsertEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextInsertEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextInsertEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleTextInterface_ITF interface {
	QAccessibleTextInterface_PTR() *QAccessibleTextInterface
}

func (p *QAccessibleTextInterface) QAccessibleTextInterface_PTR() *QAccessibleTextInterface {
	return p
}

func (p *QAccessibleTextInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleTextInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleTextInterface(ptr QAccessibleTextInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTextInterface {
	var n = new(QAccessibleTextInterface)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleTextInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTextInterface {
	var n = NewQAccessibleTextInterfaceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QAccessibleTextInterface_") {
		n.SetObjectNameAbs("QAccessibleTextInterface_" + qt.Identifier())
	}
	return n
}

//export callbackQAccessibleTextInterface_AddSelection
func callbackQAccessibleTextInterface_AddSelection(ptr unsafe.Pointer, ptrName *C.char, startOffset C.int, endOffset C.int) {
	defer qt.Recovering("callback QAccessibleTextInterface::addSelection")

	if signal := qt.GetSignal(C.GoString(ptrName), "addSelection"); signal != nil {
		signal.(func(int, int))(int(startOffset), int(endOffset))
	}

}

func (ptr *QAccessibleTextInterface) ConnectAddSelection(f func(startOffset int, endOffset int)) {
	defer qt.Recovering("connect QAccessibleTextInterface::addSelection")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "addSelection", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectAddSelection(startOffset int, endOffset int) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::addSelection")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "addSelection")
	}
}

func (ptr *QAccessibleTextInterface) AddSelection(startOffset int, endOffset int) {
	defer qt.Recovering("QAccessibleTextInterface::addSelection")

	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_AddSelection(ptr.Pointer(), C.int(startOffset), C.int(endOffset))
	}
}

//export callbackQAccessibleTextInterface_Attributes
func callbackQAccessibleTextInterface_Attributes(ptr unsafe.Pointer, ptrName *C.char, offset C.int, startOffset C.int, endOffset C.int) *C.char {
	defer qt.Recovering("callback QAccessibleTextInterface::attributes")

	if signal := qt.GetSignal(C.GoString(ptrName), "attributes"); signal != nil {
		return C.CString(signal.(func(int, int, int) string)(int(offset), int(startOffset), int(endOffset)))
	}

	return C.CString("")
}

func (ptr *QAccessibleTextInterface) ConnectAttributes(f func(offset int, startOffset int, endOffset int) string) {
	defer qt.Recovering("connect QAccessibleTextInterface::attributes")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "attributes", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectAttributes(offset int, startOffset int, endOffset int) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::attributes")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "attributes")
	}
}

func (ptr *QAccessibleTextInterface) Attributes(offset int, startOffset int, endOffset int) string {
	defer qt.Recovering("QAccessibleTextInterface::attributes")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInterface_Attributes(ptr.Pointer(), C.int(offset), C.int(startOffset), C.int(endOffset)))
	}
	return ""
}

//export callbackQAccessibleTextInterface_CharacterCount
func callbackQAccessibleTextInterface_CharacterCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTextInterface::characterCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "characterCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTextInterface) ConnectCharacterCount(f func() int) {
	defer qt.Recovering("connect QAccessibleTextInterface::characterCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "characterCount", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectCharacterCount() {
	defer qt.Recovering("disconnect QAccessibleTextInterface::characterCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "characterCount")
	}
}

func (ptr *QAccessibleTextInterface) CharacterCount() int {
	defer qt.Recovering("QAccessibleTextInterface::characterCount")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextInterface_CharacterCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTextInterface_CharacterRect
func callbackQAccessibleTextInterface_CharacterRect(ptr unsafe.Pointer, ptrName *C.char, offset C.int) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTextInterface::characterRect")

	if signal := qt.GetSignal(C.GoString(ptrName), "characterRect"); signal != nil {
		return core.PointerFromQRect(signal.(func(int) *core.QRect)(int(offset)))
	}

	return core.PointerFromQRect(nil)
}

func (ptr *QAccessibleTextInterface) ConnectCharacterRect(f func(offset int) *core.QRect) {
	defer qt.Recovering("connect QAccessibleTextInterface::characterRect")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "characterRect", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectCharacterRect(offset int) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::characterRect")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "characterRect")
	}
}

func (ptr *QAccessibleTextInterface) CharacterRect(offset int) *core.QRect {
	defer qt.Recovering("QAccessibleTextInterface::characterRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QAccessibleTextInterface_CharacterRect(ptr.Pointer(), C.int(offset)))
	}
	return nil
}

//export callbackQAccessibleTextInterface_CursorPosition
func callbackQAccessibleTextInterface_CursorPosition(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTextInterface::cursorPosition")

	if signal := qt.GetSignal(C.GoString(ptrName), "cursorPosition"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTextInterface) ConnectCursorPosition(f func() int) {
	defer qt.Recovering("connect QAccessibleTextInterface::cursorPosition")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "cursorPosition", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectCursorPosition() {
	defer qt.Recovering("disconnect QAccessibleTextInterface::cursorPosition")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "cursorPosition")
	}
}

func (ptr *QAccessibleTextInterface) CursorPosition() int {
	defer qt.Recovering("QAccessibleTextInterface::cursorPosition")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextInterface_CursorPosition(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTextInterface_OffsetAtPoint
func callbackQAccessibleTextInterface_OffsetAtPoint(ptr unsafe.Pointer, ptrName *C.char, point unsafe.Pointer) C.int {
	defer qt.Recovering("callback QAccessibleTextInterface::offsetAtPoint")

	if signal := qt.GetSignal(C.GoString(ptrName), "offsetAtPoint"); signal != nil {
		return C.int(signal.(func(*core.QPoint) int)(core.NewQPointFromPointer(point)))
	}

	return C.int(0)
}

func (ptr *QAccessibleTextInterface) ConnectOffsetAtPoint(f func(point *core.QPoint) int) {
	defer qt.Recovering("connect QAccessibleTextInterface::offsetAtPoint")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "offsetAtPoint", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectOffsetAtPoint(point core.QPoint_ITF) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::offsetAtPoint")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "offsetAtPoint")
	}
}

func (ptr *QAccessibleTextInterface) OffsetAtPoint(point core.QPoint_ITF) int {
	defer qt.Recovering("QAccessibleTextInterface::offsetAtPoint")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextInterface_OffsetAtPoint(ptr.Pointer(), core.PointerFromQPoint(point)))
	}
	return 0
}

//export callbackQAccessibleTextInterface_RemoveSelection
func callbackQAccessibleTextInterface_RemoveSelection(ptr unsafe.Pointer, ptrName *C.char, selectionIndex C.int) {
	defer qt.Recovering("callback QAccessibleTextInterface::removeSelection")

	if signal := qt.GetSignal(C.GoString(ptrName), "removeSelection"); signal != nil {
		signal.(func(int))(int(selectionIndex))
	}

}

func (ptr *QAccessibleTextInterface) ConnectRemoveSelection(f func(selectionIndex int)) {
	defer qt.Recovering("connect QAccessibleTextInterface::removeSelection")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "removeSelection", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectRemoveSelection(selectionIndex int) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::removeSelection")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "removeSelection")
	}
}

func (ptr *QAccessibleTextInterface) RemoveSelection(selectionIndex int) {
	defer qt.Recovering("QAccessibleTextInterface::removeSelection")

	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_RemoveSelection(ptr.Pointer(), C.int(selectionIndex))
	}
}

//export callbackQAccessibleTextInterface_ScrollToSubstring
func callbackQAccessibleTextInterface_ScrollToSubstring(ptr unsafe.Pointer, ptrName *C.char, startIndex C.int, endIndex C.int) {
	defer qt.Recovering("callback QAccessibleTextInterface::scrollToSubstring")

	if signal := qt.GetSignal(C.GoString(ptrName), "scrollToSubstring"); signal != nil {
		signal.(func(int, int))(int(startIndex), int(endIndex))
	}

}

func (ptr *QAccessibleTextInterface) ConnectScrollToSubstring(f func(startIndex int, endIndex int)) {
	defer qt.Recovering("connect QAccessibleTextInterface::scrollToSubstring")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "scrollToSubstring", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectScrollToSubstring(startIndex int, endIndex int) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::scrollToSubstring")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "scrollToSubstring")
	}
}

func (ptr *QAccessibleTextInterface) ScrollToSubstring(startIndex int, endIndex int) {
	defer qt.Recovering("QAccessibleTextInterface::scrollToSubstring")

	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_ScrollToSubstring(ptr.Pointer(), C.int(startIndex), C.int(endIndex))
	}
}

//export callbackQAccessibleTextInterface_Selection
func callbackQAccessibleTextInterface_Selection(ptr unsafe.Pointer, ptrName *C.char, selectionIndex C.int, startOffset C.int, endOffset C.int) {
	defer qt.Recovering("callback QAccessibleTextInterface::selection")

	if signal := qt.GetSignal(C.GoString(ptrName), "selection"); signal != nil {
		signal.(func(int, int, int))(int(selectionIndex), int(startOffset), int(endOffset))
	}

}

func (ptr *QAccessibleTextInterface) ConnectSelection(f func(selectionIndex int, startOffset int, endOffset int)) {
	defer qt.Recovering("connect QAccessibleTextInterface::selection")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "selection", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSelection(selectionIndex int, startOffset int, endOffset int) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::selection")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "selection")
	}
}

func (ptr *QAccessibleTextInterface) Selection(selectionIndex int, startOffset int, endOffset int) {
	defer qt.Recovering("QAccessibleTextInterface::selection")

	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_Selection(ptr.Pointer(), C.int(selectionIndex), C.int(startOffset), C.int(endOffset))
	}
}

//export callbackQAccessibleTextInterface_SelectionCount
func callbackQAccessibleTextInterface_SelectionCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QAccessibleTextInterface::selectionCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "selectionCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(0)
}

func (ptr *QAccessibleTextInterface) ConnectSelectionCount(f func() int) {
	defer qt.Recovering("connect QAccessibleTextInterface::selectionCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "selectionCount", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSelectionCount() {
	defer qt.Recovering("disconnect QAccessibleTextInterface::selectionCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "selectionCount")
	}
}

func (ptr *QAccessibleTextInterface) SelectionCount() int {
	defer qt.Recovering("QAccessibleTextInterface::selectionCount")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextInterface_SelectionCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleTextInterface_SetCursorPosition
func callbackQAccessibleTextInterface_SetCursorPosition(ptr unsafe.Pointer, ptrName *C.char, position C.int) {
	defer qt.Recovering("callback QAccessibleTextInterface::setCursorPosition")

	if signal := qt.GetSignal(C.GoString(ptrName), "setCursorPosition"); signal != nil {
		signal.(func(int))(int(position))
	}

}

func (ptr *QAccessibleTextInterface) ConnectSetCursorPosition(f func(position int)) {
	defer qt.Recovering("connect QAccessibleTextInterface::setCursorPosition")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "setCursorPosition", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSetCursorPosition(position int) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::setCursorPosition")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "setCursorPosition")
	}
}

func (ptr *QAccessibleTextInterface) SetCursorPosition(position int) {
	defer qt.Recovering("QAccessibleTextInterface::setCursorPosition")

	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_SetCursorPosition(ptr.Pointer(), C.int(position))
	}
}

//export callbackQAccessibleTextInterface_SetSelection
func callbackQAccessibleTextInterface_SetSelection(ptr unsafe.Pointer, ptrName *C.char, selectionIndex C.int, startOffset C.int, endOffset C.int) {
	defer qt.Recovering("callback QAccessibleTextInterface::setSelection")

	if signal := qt.GetSignal(C.GoString(ptrName), "setSelection"); signal != nil {
		signal.(func(int, int, int))(int(selectionIndex), int(startOffset), int(endOffset))
	}

}

func (ptr *QAccessibleTextInterface) ConnectSetSelection(f func(selectionIndex int, startOffset int, endOffset int)) {
	defer qt.Recovering("connect QAccessibleTextInterface::setSelection")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "setSelection", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSetSelection(selectionIndex int, startOffset int, endOffset int) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::setSelection")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "setSelection")
	}
}

func (ptr *QAccessibleTextInterface) SetSelection(selectionIndex int, startOffset int, endOffset int) {
	defer qt.Recovering("QAccessibleTextInterface::setSelection")

	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_SetSelection(ptr.Pointer(), C.int(selectionIndex), C.int(startOffset), C.int(endOffset))
	}
}

//export callbackQAccessibleTextInterface_Text
func callbackQAccessibleTextInterface_Text(ptr unsafe.Pointer, ptrName *C.char, startOffset C.int, endOffset C.int) *C.char {
	defer qt.Recovering("callback QAccessibleTextInterface::text")

	if signal := qt.GetSignal(C.GoString(ptrName), "text"); signal != nil {
		return C.CString(signal.(func(int, int) string)(int(startOffset), int(endOffset)))
	}

	return C.CString("")
}

func (ptr *QAccessibleTextInterface) ConnectText(f func(startOffset int, endOffset int) string) {
	defer qt.Recovering("connect QAccessibleTextInterface::text")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "text", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectText(startOffset int, endOffset int) {
	defer qt.Recovering("disconnect QAccessibleTextInterface::text")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "text")
	}
}

func (ptr *QAccessibleTextInterface) Text(startOffset int, endOffset int) string {
	defer qt.Recovering("QAccessibleTextInterface::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInterface_Text(ptr.Pointer(), C.int(startOffset), C.int(endOffset)))
	}
	return ""
}

//export callbackQAccessibleTextInterface_TextAfterOffset
func callbackQAccessibleTextInterface_TextAfterOffset(ptr unsafe.Pointer, ptrName *C.char, offset C.int, boundaryType C.int, startOffset C.int, endOffset C.int) *C.char {
	defer qt.Recovering("callback QAccessibleTextInterface::textAfterOffset")

	if signal := qt.GetSignal(C.GoString(ptrName), "textAfterOffset"); signal != nil {
		return C.CString(signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(int(offset), QAccessible__TextBoundaryType(boundaryType), int(startOffset), int(endOffset)))
	}

	return C.CString(NewQAccessibleTextInterfaceFromPointer(ptr).TextAfterOffsetDefault(int(offset), QAccessible__TextBoundaryType(boundaryType), int(startOffset), int(endOffset)))
}

func (ptr *QAccessibleTextInterface) ConnectTextAfterOffset(f func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string) {
	defer qt.Recovering("connect QAccessibleTextInterface::textAfterOffset")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "textAfterOffset", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectTextAfterOffset() {
	defer qt.Recovering("disconnect QAccessibleTextInterface::textAfterOffset")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "textAfterOffset")
	}
}

func (ptr *QAccessibleTextInterface) TextAfterOffset(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	defer qt.Recovering("QAccessibleTextInterface::textAfterOffset")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInterface_TextAfterOffset(ptr.Pointer(), C.int(offset), C.int(boundaryType), C.int(startOffset), C.int(endOffset)))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) TextAfterOffsetDefault(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	defer qt.Recovering("QAccessibleTextInterface::textAfterOffset")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInterface_TextAfterOffsetDefault(ptr.Pointer(), C.int(offset), C.int(boundaryType), C.int(startOffset), C.int(endOffset)))
	}
	return ""
}

//export callbackQAccessibleTextInterface_TextAtOffset
func callbackQAccessibleTextInterface_TextAtOffset(ptr unsafe.Pointer, ptrName *C.char, offset C.int, boundaryType C.int, startOffset C.int, endOffset C.int) *C.char {
	defer qt.Recovering("callback QAccessibleTextInterface::textAtOffset")

	if signal := qt.GetSignal(C.GoString(ptrName), "textAtOffset"); signal != nil {
		return C.CString(signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(int(offset), QAccessible__TextBoundaryType(boundaryType), int(startOffset), int(endOffset)))
	}

	return C.CString(NewQAccessibleTextInterfaceFromPointer(ptr).TextAtOffsetDefault(int(offset), QAccessible__TextBoundaryType(boundaryType), int(startOffset), int(endOffset)))
}

func (ptr *QAccessibleTextInterface) ConnectTextAtOffset(f func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string) {
	defer qt.Recovering("connect QAccessibleTextInterface::textAtOffset")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "textAtOffset", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectTextAtOffset() {
	defer qt.Recovering("disconnect QAccessibleTextInterface::textAtOffset")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "textAtOffset")
	}
}

func (ptr *QAccessibleTextInterface) TextAtOffset(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	defer qt.Recovering("QAccessibleTextInterface::textAtOffset")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInterface_TextAtOffset(ptr.Pointer(), C.int(offset), C.int(boundaryType), C.int(startOffset), C.int(endOffset)))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) TextAtOffsetDefault(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	defer qt.Recovering("QAccessibleTextInterface::textAtOffset")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInterface_TextAtOffsetDefault(ptr.Pointer(), C.int(offset), C.int(boundaryType), C.int(startOffset), C.int(endOffset)))
	}
	return ""
}

//export callbackQAccessibleTextInterface_TextBeforeOffset
func callbackQAccessibleTextInterface_TextBeforeOffset(ptr unsafe.Pointer, ptrName *C.char, offset C.int, boundaryType C.int, startOffset C.int, endOffset C.int) *C.char {
	defer qt.Recovering("callback QAccessibleTextInterface::textBeforeOffset")

	if signal := qt.GetSignal(C.GoString(ptrName), "textBeforeOffset"); signal != nil {
		return C.CString(signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(int(offset), QAccessible__TextBoundaryType(boundaryType), int(startOffset), int(endOffset)))
	}

	return C.CString(NewQAccessibleTextInterfaceFromPointer(ptr).TextBeforeOffsetDefault(int(offset), QAccessible__TextBoundaryType(boundaryType), int(startOffset), int(endOffset)))
}

func (ptr *QAccessibleTextInterface) ConnectTextBeforeOffset(f func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string) {
	defer qt.Recovering("connect QAccessibleTextInterface::textBeforeOffset")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "textBeforeOffset", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectTextBeforeOffset() {
	defer qt.Recovering("disconnect QAccessibleTextInterface::textBeforeOffset")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "textBeforeOffset")
	}
}

func (ptr *QAccessibleTextInterface) TextBeforeOffset(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	defer qt.Recovering("QAccessibleTextInterface::textBeforeOffset")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInterface_TextBeforeOffset(ptr.Pointer(), C.int(offset), C.int(boundaryType), C.int(startOffset), C.int(endOffset)))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) TextBeforeOffsetDefault(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	defer qt.Recovering("QAccessibleTextInterface::textBeforeOffset")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInterface_TextBeforeOffsetDefault(ptr.Pointer(), C.int(offset), C.int(boundaryType), C.int(startOffset), C.int(endOffset)))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) DestroyQAccessibleTextInterface() {
	defer qt.Recovering("QAccessibleTextInterface::~QAccessibleTextInterface")

	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_DestroyQAccessibleTextInterface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTextInterface) ObjectNameAbs() string {
	defer qt.Recovering("QAccessibleTextInterface::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextInterface_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) SetObjectNameAbs(name string) {
	defer qt.Recovering("QAccessibleTextInterface::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QAccessibleTextRemoveEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextRemoveEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextRemoveEvent_PTR() *QAccessibleTextRemoveEvent
}

func (p *QAccessibleTextRemoveEvent) QAccessibleTextRemoveEvent_PTR() *QAccessibleTextRemoveEvent {
	return p
}

func (p *QAccessibleTextRemoveEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextRemoveEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleTextCursorEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextRemoveEvent(ptr QAccessibleTextRemoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextRemoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextRemoveEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextRemoveEvent {
	var n = new(QAccessibleTextRemoveEvent)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleTextRemoveEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextRemoveEvent {
	var n = NewQAccessibleTextRemoveEventFromPointer(ptr)
	return n
}

func NewQAccessibleTextRemoveEvent2(iface QAccessibleInterface_ITF, position int, text string) *QAccessibleTextRemoveEvent {
	defer qt.Recovering("QAccessibleTextRemoveEvent::QAccessibleTextRemoveEvent")

	return newQAccessibleTextRemoveEventFromPointer(C.QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent2(PointerFromQAccessibleInterface(iface), C.int(position), C.CString(text)))
}

func NewQAccessibleTextRemoveEvent(object core.QObject_ITF, position int, text string) *QAccessibleTextRemoveEvent {
	defer qt.Recovering("QAccessibleTextRemoveEvent::QAccessibleTextRemoveEvent")

	return newQAccessibleTextRemoveEventFromPointer(C.QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent(core.PointerFromQObject(object), C.int(position), C.CString(text)))
}

func (ptr *QAccessibleTextRemoveEvent) ChangePosition() int {
	defer qt.Recovering("QAccessibleTextRemoveEvent::changePosition")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextRemoveEvent_ChangePosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTextRemoveEvent) TextRemoved() string {
	defer qt.Recovering("QAccessibleTextRemoveEvent::textRemoved")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextRemoveEvent_TextRemoved(ptr.Pointer()))
	}
	return ""
}

//export callbackQAccessibleTextRemoveEvent_AccessibleInterface
func callbackQAccessibleTextRemoveEvent_AccessibleInterface(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTextRemoveEvent::accessibleInterface")

	if signal := qt.GetSignal(C.GoString(ptrName), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextRemoveEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextRemoveEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTextRemoveEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextRemoveEvent) DisconnectAccessibleInterface() {
	defer qt.Recovering("disconnect QAccessibleTextRemoveEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "accessibleInterface")
	}
}

func (ptr *QAccessibleTextRemoveEvent) AccessibleInterface() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextRemoveEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextRemoveEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextRemoveEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextRemoveEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextRemoveEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextSelectionEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextSelectionEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextSelectionEvent_PTR() *QAccessibleTextSelectionEvent
}

func (p *QAccessibleTextSelectionEvent) QAccessibleTextSelectionEvent_PTR() *QAccessibleTextSelectionEvent {
	return p
}

func (p *QAccessibleTextSelectionEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextSelectionEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleTextCursorEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextSelectionEvent(ptr QAccessibleTextSelectionEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextSelectionEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextSelectionEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextSelectionEvent {
	var n = new(QAccessibleTextSelectionEvent)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleTextSelectionEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextSelectionEvent {
	var n = NewQAccessibleTextSelectionEventFromPointer(ptr)
	return n
}

func NewQAccessibleTextSelectionEvent2(iface QAccessibleInterface_ITF, start int, end int) *QAccessibleTextSelectionEvent {
	defer qt.Recovering("QAccessibleTextSelectionEvent::QAccessibleTextSelectionEvent")

	return newQAccessibleTextSelectionEventFromPointer(C.QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent2(PointerFromQAccessibleInterface(iface), C.int(start), C.int(end)))
}

func NewQAccessibleTextSelectionEvent(object core.QObject_ITF, start int, end int) *QAccessibleTextSelectionEvent {
	defer qt.Recovering("QAccessibleTextSelectionEvent::QAccessibleTextSelectionEvent")

	return newQAccessibleTextSelectionEventFromPointer(C.QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent(core.PointerFromQObject(object), C.int(start), C.int(end)))
}

func (ptr *QAccessibleTextSelectionEvent) SelectionEnd() int {
	defer qt.Recovering("QAccessibleTextSelectionEvent::selectionEnd")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextSelectionEvent_SelectionEnd(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) SelectionStart() int {
	defer qt.Recovering("QAccessibleTextSelectionEvent::selectionStart")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextSelectionEvent_SelectionStart(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) SetSelection(start int, end int) {
	defer qt.Recovering("QAccessibleTextSelectionEvent::setSelection")

	if ptr.Pointer() != nil {
		C.QAccessibleTextSelectionEvent_SetSelection(ptr.Pointer(), C.int(start), C.int(end))
	}
}

//export callbackQAccessibleTextSelectionEvent_AccessibleInterface
func callbackQAccessibleTextSelectionEvent_AccessibleInterface(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTextSelectionEvent::accessibleInterface")

	if signal := qt.GetSignal(C.GoString(ptrName), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextSelectionEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextSelectionEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTextSelectionEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextSelectionEvent) DisconnectAccessibleInterface() {
	defer qt.Recovering("disconnect QAccessibleTextSelectionEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "accessibleInterface")
	}
}

func (ptr *QAccessibleTextSelectionEvent) AccessibleInterface() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextSelectionEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextSelectionEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextSelectionEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextSelectionEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextSelectionEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextUpdateEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextUpdateEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextUpdateEvent_PTR() *QAccessibleTextUpdateEvent
}

func (p *QAccessibleTextUpdateEvent) QAccessibleTextUpdateEvent_PTR() *QAccessibleTextUpdateEvent {
	return p
}

func (p *QAccessibleTextUpdateEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextUpdateEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleTextCursorEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextUpdateEvent(ptr QAccessibleTextUpdateEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextUpdateEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextUpdateEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextUpdateEvent {
	var n = new(QAccessibleTextUpdateEvent)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleTextUpdateEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextUpdateEvent {
	var n = NewQAccessibleTextUpdateEventFromPointer(ptr)
	return n
}

func NewQAccessibleTextUpdateEvent2(iface QAccessibleInterface_ITF, position int, oldText string, text string) *QAccessibleTextUpdateEvent {
	defer qt.Recovering("QAccessibleTextUpdateEvent::QAccessibleTextUpdateEvent")

	return newQAccessibleTextUpdateEventFromPointer(C.QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent2(PointerFromQAccessibleInterface(iface), C.int(position), C.CString(oldText), C.CString(text)))
}

func NewQAccessibleTextUpdateEvent(object core.QObject_ITF, position int, oldText string, text string) *QAccessibleTextUpdateEvent {
	defer qt.Recovering("QAccessibleTextUpdateEvent::QAccessibleTextUpdateEvent")

	return newQAccessibleTextUpdateEventFromPointer(C.QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent(core.PointerFromQObject(object), C.int(position), C.CString(oldText), C.CString(text)))
}

func (ptr *QAccessibleTextUpdateEvent) ChangePosition() int {
	defer qt.Recovering("QAccessibleTextUpdateEvent::changePosition")

	if ptr.Pointer() != nil {
		return int(C.QAccessibleTextUpdateEvent_ChangePosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTextUpdateEvent) TextInserted() string {
	defer qt.Recovering("QAccessibleTextUpdateEvent::textInserted")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextUpdateEvent_TextInserted(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextUpdateEvent) TextRemoved() string {
	defer qt.Recovering("QAccessibleTextUpdateEvent::textRemoved")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleTextUpdateEvent_TextRemoved(ptr.Pointer()))
	}
	return ""
}

//export callbackQAccessibleTextUpdateEvent_AccessibleInterface
func callbackQAccessibleTextUpdateEvent_AccessibleInterface(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleTextUpdateEvent::accessibleInterface")

	if signal := qt.GetSignal(C.GoString(ptrName), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextUpdateEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextUpdateEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleTextUpdateEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextUpdateEvent) DisconnectAccessibleInterface() {
	defer qt.Recovering("disconnect QAccessibleTextUpdateEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "accessibleInterface")
	}
}

func (ptr *QAccessibleTextUpdateEvent) AccessibleInterface() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextUpdateEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextUpdateEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextUpdateEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleTextUpdateEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextUpdateEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleValueChangeEvent struct {
	QAccessibleEvent
}

type QAccessibleValueChangeEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleValueChangeEvent_PTR() *QAccessibleValueChangeEvent
}

func (p *QAccessibleValueChangeEvent) QAccessibleValueChangeEvent_PTR() *QAccessibleValueChangeEvent {
	return p
}

func (p *QAccessibleValueChangeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleValueChangeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleValueChangeEvent(ptr QAccessibleValueChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleValueChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleValueChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleValueChangeEvent {
	var n = new(QAccessibleValueChangeEvent)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleValueChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleValueChangeEvent {
	var n = NewQAccessibleValueChangeEventFromPointer(ptr)
	return n
}

func NewQAccessibleValueChangeEvent2(iface QAccessibleInterface_ITF, val core.QVariant_ITF) *QAccessibleValueChangeEvent {
	defer qt.Recovering("QAccessibleValueChangeEvent::QAccessibleValueChangeEvent")

	return newQAccessibleValueChangeEventFromPointer(C.QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent2(PointerFromQAccessibleInterface(iface), core.PointerFromQVariant(val)))
}

func NewQAccessibleValueChangeEvent(object core.QObject_ITF, value core.QVariant_ITF) *QAccessibleValueChangeEvent {
	defer qt.Recovering("QAccessibleValueChangeEvent::QAccessibleValueChangeEvent")

	return newQAccessibleValueChangeEventFromPointer(C.QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent(core.PointerFromQObject(object), core.PointerFromQVariant(value)))
}

func (ptr *QAccessibleValueChangeEvent) SetValue(value core.QVariant_ITF) {
	defer qt.Recovering("QAccessibleValueChangeEvent::setValue")

	if ptr.Pointer() != nil {
		C.QAccessibleValueChangeEvent_SetValue(ptr.Pointer(), core.PointerFromQVariant(value))
	}
}

func (ptr *QAccessibleValueChangeEvent) Value() *core.QVariant {
	defer qt.Recovering("QAccessibleValueChangeEvent::value")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QAccessibleValueChangeEvent_Value(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleValueChangeEvent_AccessibleInterface
func callbackQAccessibleValueChangeEvent_AccessibleInterface(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleValueChangeEvent::accessibleInterface")

	if signal := qt.GetSignal(C.GoString(ptrName), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleValueChangeEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleValueChangeEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	defer qt.Recovering("connect QAccessibleValueChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "accessibleInterface", f)
	}
}

func (ptr *QAccessibleValueChangeEvent) DisconnectAccessibleInterface() {
	defer qt.Recovering("disconnect QAccessibleValueChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "accessibleInterface")
	}
}

func (ptr *QAccessibleValueChangeEvent) AccessibleInterface() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleValueChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleValueChangeEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleValueChangeEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	defer qt.Recovering("QAccessibleValueChangeEvent::accessibleInterface")

	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleValueChangeEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleValueInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleValueInterface_ITF interface {
	QAccessibleValueInterface_PTR() *QAccessibleValueInterface
}

func (p *QAccessibleValueInterface) QAccessibleValueInterface_PTR() *QAccessibleValueInterface {
	return p
}

func (p *QAccessibleValueInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleValueInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleValueInterface(ptr QAccessibleValueInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleValueInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleValueInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleValueInterface {
	var n = new(QAccessibleValueInterface)
	n.SetPointer(ptr)
	return n
}

func newQAccessibleValueInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleValueInterface {
	var n = NewQAccessibleValueInterfaceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QAccessibleValueInterface_") {
		n.SetObjectNameAbs("QAccessibleValueInterface_" + qt.Identifier())
	}
	return n
}

//export callbackQAccessibleValueInterface_CurrentValue
func callbackQAccessibleValueInterface_CurrentValue(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleValueInterface::currentValue")

	if signal := qt.GetSignal(C.GoString(ptrName), "currentValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QAccessibleValueInterface) ConnectCurrentValue(f func() *core.QVariant) {
	defer qt.Recovering("connect QAccessibleValueInterface::currentValue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "currentValue", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectCurrentValue() {
	defer qt.Recovering("disconnect QAccessibleValueInterface::currentValue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "currentValue")
	}
}

func (ptr *QAccessibleValueInterface) CurrentValue() *core.QVariant {
	defer qt.Recovering("QAccessibleValueInterface::currentValue")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QAccessibleValueInterface_CurrentValue(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleValueInterface_MaximumValue
func callbackQAccessibleValueInterface_MaximumValue(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleValueInterface::maximumValue")

	if signal := qt.GetSignal(C.GoString(ptrName), "maximumValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QAccessibleValueInterface) ConnectMaximumValue(f func() *core.QVariant) {
	defer qt.Recovering("connect QAccessibleValueInterface::maximumValue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "maximumValue", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectMaximumValue() {
	defer qt.Recovering("disconnect QAccessibleValueInterface::maximumValue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "maximumValue")
	}
}

func (ptr *QAccessibleValueInterface) MaximumValue() *core.QVariant {
	defer qt.Recovering("QAccessibleValueInterface::maximumValue")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QAccessibleValueInterface_MaximumValue(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleValueInterface_MinimumStepSize
func callbackQAccessibleValueInterface_MinimumStepSize(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleValueInterface::minimumStepSize")

	if signal := qt.GetSignal(C.GoString(ptrName), "minimumStepSize"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QAccessibleValueInterface) ConnectMinimumStepSize(f func() *core.QVariant) {
	defer qt.Recovering("connect QAccessibleValueInterface::minimumStepSize")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "minimumStepSize", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectMinimumStepSize() {
	defer qt.Recovering("disconnect QAccessibleValueInterface::minimumStepSize")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "minimumStepSize")
	}
}

func (ptr *QAccessibleValueInterface) MinimumStepSize() *core.QVariant {
	defer qt.Recovering("QAccessibleValueInterface::minimumStepSize")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QAccessibleValueInterface_MinimumStepSize(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleValueInterface_MinimumValue
func callbackQAccessibleValueInterface_MinimumValue(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QAccessibleValueInterface::minimumValue")

	if signal := qt.GetSignal(C.GoString(ptrName), "minimumValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QAccessibleValueInterface) ConnectMinimumValue(f func() *core.QVariant) {
	defer qt.Recovering("connect QAccessibleValueInterface::minimumValue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "minimumValue", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectMinimumValue() {
	defer qt.Recovering("disconnect QAccessibleValueInterface::minimumValue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "minimumValue")
	}
}

func (ptr *QAccessibleValueInterface) MinimumValue() *core.QVariant {
	defer qt.Recovering("QAccessibleValueInterface::minimumValue")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QAccessibleValueInterface_MinimumValue(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleValueInterface_SetCurrentValue
func callbackQAccessibleValueInterface_SetCurrentValue(ptr unsafe.Pointer, ptrName *C.char, value unsafe.Pointer) {
	defer qt.Recovering("callback QAccessibleValueInterface::setCurrentValue")

	if signal := qt.GetSignal(C.GoString(ptrName), "setCurrentValue"); signal != nil {
		signal.(func(*core.QVariant))(core.NewQVariantFromPointer(value))
	}

}

func (ptr *QAccessibleValueInterface) ConnectSetCurrentValue(f func(value *core.QVariant)) {
	defer qt.Recovering("connect QAccessibleValueInterface::setCurrentValue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "setCurrentValue", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectSetCurrentValue(value core.QVariant_ITF) {
	defer qt.Recovering("disconnect QAccessibleValueInterface::setCurrentValue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "setCurrentValue")
	}
}

func (ptr *QAccessibleValueInterface) SetCurrentValue(value core.QVariant_ITF) {
	defer qt.Recovering("QAccessibleValueInterface::setCurrentValue")

	if ptr.Pointer() != nil {
		C.QAccessibleValueInterface_SetCurrentValue(ptr.Pointer(), core.PointerFromQVariant(value))
	}
}

func (ptr *QAccessibleValueInterface) DestroyQAccessibleValueInterface() {
	defer qt.Recovering("QAccessibleValueInterface::~QAccessibleValueInterface")

	if ptr.Pointer() != nil {
		C.QAccessibleValueInterface_DestroyQAccessibleValueInterface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleValueInterface) ObjectNameAbs() string {
	defer qt.Recovering("QAccessibleValueInterface::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAccessibleValueInterface_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleValueInterface) SetObjectNameAbs(name string) {
	defer qt.Recovering("QAccessibleValueInterface::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QAccessibleValueInterface_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QActionEvent struct {
	core.QEvent
}

type QActionEvent_ITF interface {
	core.QEvent_ITF
	QActionEvent_PTR() *QActionEvent
}

func (p *QActionEvent) QActionEvent_PTR() *QActionEvent {
	return p
}

func (p *QActionEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QActionEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQActionEvent(ptr QActionEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QActionEvent_PTR().Pointer()
	}
	return nil
}

func NewQActionEventFromPointer(ptr unsafe.Pointer) *QActionEvent {
	var n = new(QActionEvent)
	n.SetPointer(ptr)
	return n
}

func newQActionEventFromPointer(ptr unsafe.Pointer) *QActionEvent {
	var n = NewQActionEventFromPointer(ptr)
	return n
}

func NewQActionEvent(ty int, action unsafe.Pointer, before unsafe.Pointer) *QActionEvent {
	defer qt.Recovering("QActionEvent::QActionEvent")

	return newQActionEventFromPointer(C.QActionEvent_NewQActionEvent(C.int(ty), action, before))
}

func (ptr *QActionEvent) Action() unsafe.Pointer {
	defer qt.Recovering("QActionEvent::action")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QActionEvent_Action(ptr.Pointer()))
	}
	return nil
}

func (ptr *QActionEvent) Before() unsafe.Pointer {
	defer qt.Recovering("QActionEvent::before")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QActionEvent_Before(ptr.Pointer()))
	}
	return nil
}

type QBackingStore struct {
	ptr unsafe.Pointer
}

type QBackingStore_ITF interface {
	QBackingStore_PTR() *QBackingStore
}

func (p *QBackingStore) QBackingStore_PTR() *QBackingStore {
	return p
}

func (p *QBackingStore) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QBackingStore) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQBackingStore(ptr QBackingStore_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBackingStore_PTR().Pointer()
	}
	return nil
}

func NewQBackingStoreFromPointer(ptr unsafe.Pointer) *QBackingStore {
	var n = new(QBackingStore)
	n.SetPointer(ptr)
	return n
}

func newQBackingStoreFromPointer(ptr unsafe.Pointer) *QBackingStore {
	var n = NewQBackingStoreFromPointer(ptr)
	return n
}

func (ptr *QBackingStore) PaintDevice() *QPaintDevice {
	defer qt.Recovering("QBackingStore::paintDevice")

	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QBackingStore_PaintDevice(ptr.Pointer()))
	}
	return nil
}

func NewQBackingStore(window QWindow_ITF) *QBackingStore {
	defer qt.Recovering("QBackingStore::QBackingStore")

	return newQBackingStoreFromPointer(C.QBackingStore_NewQBackingStore(PointerFromQWindow(window)))
}

func (ptr *QBackingStore) BeginPaint(region QRegion_ITF) {
	defer qt.Recovering("QBackingStore::beginPaint")

	if ptr.Pointer() != nil {
		C.QBackingStore_BeginPaint(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QBackingStore) EndPaint() {
	defer qt.Recovering("QBackingStore::endPaint")

	if ptr.Pointer() != nil {
		C.QBackingStore_EndPaint(ptr.Pointer())
	}
}

func (ptr *QBackingStore) Flush(region QRegion_ITF, win QWindow_ITF, offset core.QPoint_ITF) {
	defer qt.Recovering("QBackingStore::flush")

	if ptr.Pointer() != nil {
		C.QBackingStore_Flush(ptr.Pointer(), PointerFromQRegion(region), PointerFromQWindow(win), core.PointerFromQPoint(offset))
	}
}

func (ptr *QBackingStore) HasStaticContents() bool {
	defer qt.Recovering("QBackingStore::hasStaticContents")

	if ptr.Pointer() != nil {
		return C.QBackingStore_HasStaticContents(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBackingStore) Resize(size core.QSize_ITF) {
	defer qt.Recovering("QBackingStore::resize")

	if ptr.Pointer() != nil {
		C.QBackingStore_Resize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QBackingStore) Scroll(area QRegion_ITF, dx int, dy int) bool {
	defer qt.Recovering("QBackingStore::scroll")

	if ptr.Pointer() != nil {
		return C.QBackingStore_Scroll(ptr.Pointer(), PointerFromQRegion(area), C.int(dx), C.int(dy)) != 0
	}
	return false
}

func (ptr *QBackingStore) SetStaticContents(region QRegion_ITF) {
	defer qt.Recovering("QBackingStore::setStaticContents")

	if ptr.Pointer() != nil {
		C.QBackingStore_SetStaticContents(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QBackingStore) Size() *core.QSize {
	defer qt.Recovering("QBackingStore::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QBackingStore_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBackingStore) StaticContents() *QRegion {
	defer qt.Recovering("QBackingStore::staticContents")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QBackingStore_StaticContents(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBackingStore) Window() *QWindow {
	defer qt.Recovering("QBackingStore::window")

	if ptr.Pointer() != nil {
		return NewQWindowFromPointer(C.QBackingStore_Window(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBackingStore) DestroyQBackingStore() {
	defer qt.Recovering("QBackingStore::~QBackingStore")

	if ptr.Pointer() != nil {
		C.QBackingStore_DestroyQBackingStore(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QBitmap struct {
	QPixmap
}

type QBitmap_ITF interface {
	QPixmap_ITF
	QBitmap_PTR() *QBitmap
}

func (p *QBitmap) QBitmap_PTR() *QBitmap {
	return p
}

func (p *QBitmap) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPixmap_PTR().Pointer()
	}
	return nil
}

func (p *QBitmap) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPixmap_PTR().SetPointer(ptr)
	}
}

func PointerFromQBitmap(ptr QBitmap_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBitmap_PTR().Pointer()
	}
	return nil
}

func NewQBitmapFromPointer(ptr unsafe.Pointer) *QBitmap {
	var n = new(QBitmap)
	n.SetPointer(ptr)
	return n
}

func newQBitmapFromPointer(ptr unsafe.Pointer) *QBitmap {
	var n = NewQBitmapFromPointer(ptr)
	return n
}

func NewQBitmap3(width int, height int) *QBitmap {
	defer qt.Recovering("QBitmap::QBitmap")

	return newQBitmapFromPointer(C.QBitmap_NewQBitmap3(C.int(width), C.int(height)))
}

func NewQBitmap() *QBitmap {
	defer qt.Recovering("QBitmap::QBitmap")

	return newQBitmapFromPointer(C.QBitmap_NewQBitmap())
}

func NewQBitmap2(pixmap QPixmap_ITF) *QBitmap {
	defer qt.Recovering("QBitmap::QBitmap")

	return newQBitmapFromPointer(C.QBitmap_NewQBitmap2(PointerFromQPixmap(pixmap)))
}

func NewQBitmap4(size core.QSize_ITF) *QBitmap {
	defer qt.Recovering("QBitmap::QBitmap")

	return newQBitmapFromPointer(C.QBitmap_NewQBitmap4(core.PointerFromQSize(size)))
}

func NewQBitmap5(fileName string, format string) *QBitmap {
	defer qt.Recovering("QBitmap::QBitmap")

	return newQBitmapFromPointer(C.QBitmap_NewQBitmap5(C.CString(fileName), C.CString(format)))
}

func (ptr *QBitmap) Clear() {
	defer qt.Recovering("QBitmap::clear")

	if ptr.Pointer() != nil {
		C.QBitmap_Clear(ptr.Pointer())
	}
}

func (ptr *QBitmap) Swap(other QBitmap_ITF) {
	defer qt.Recovering("QBitmap::swap")

	if ptr.Pointer() != nil {
		C.QBitmap_Swap(ptr.Pointer(), PointerFromQBitmap(other))
	}
}

func (ptr *QBitmap) DestroyQBitmap() {
	defer qt.Recovering("QBitmap::~QBitmap")

	if ptr.Pointer() != nil {
		C.QBitmap_DestroyQBitmap(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQBitmap_Metric
func callbackQBitmap_Metric(ptr unsafe.Pointer, ptrName *C.char, metric C.int) C.int {
	defer qt.Recovering("callback QBitmap::metric")

	if signal := qt.GetSignal(C.GoString(ptrName), "metric"); signal != nil {
		return C.int(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric)))
	}

	return C.int(NewQBitmapFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric)))
}

func (ptr *QBitmap) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	defer qt.Recovering("connect QBitmap::metric")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "metric", f)
	}
}

func (ptr *QBitmap) DisconnectMetric() {
	defer qt.Recovering("disconnect QBitmap::metric")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "metric")
	}
}

func (ptr *QBitmap) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QBitmap::metric")

	if ptr.Pointer() != nil {
		return int(C.QBitmap_Metric(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QBitmap) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QBitmap::metric")

	if ptr.Pointer() != nil {
		return int(C.QBitmap_MetricDefault(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

//export callbackQBitmap_PaintEngine
func callbackQBitmap_PaintEngine(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QBitmap::paintEngine")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QBitmap) ConnectPaintEngine(f func() *QPaintEngine) {
	defer qt.Recovering("connect QBitmap::paintEngine")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "paintEngine", f)
	}
}

func (ptr *QBitmap) DisconnectPaintEngine() {
	defer qt.Recovering("disconnect QBitmap::paintEngine")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "paintEngine")
	}
}

func (ptr *QBitmap) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QBitmap::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QBitmap_PaintEngine(ptr.Pointer()))
	}
	return nil
}

type QBrush struct {
	ptr unsafe.Pointer
}

type QBrush_ITF interface {
	QBrush_PTR() *QBrush
}

func (p *QBrush) QBrush_PTR() *QBrush {
	return p
}

func (p *QBrush) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QBrush) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQBrush(ptr QBrush_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBrush_PTR().Pointer()
	}
	return nil
}

func NewQBrushFromPointer(ptr unsafe.Pointer) *QBrush {
	var n = new(QBrush)
	n.SetPointer(ptr)
	return n
}

func newQBrushFromPointer(ptr unsafe.Pointer) *QBrush {
	var n = NewQBrushFromPointer(ptr)
	return n
}

func NewQBrush4(color core.Qt__GlobalColor, style core.Qt__BrushStyle) *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush4(C.int(color), C.int(style)))
}

func (ptr *QBrush) SetColor(color QColor_ITF) {
	defer qt.Recovering("QBrush::setColor")

	if ptr.Pointer() != nil {
		C.QBrush_SetColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QBrush) Texture() *QPixmap {
	defer qt.Recovering("QBrush::texture")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QBrush_Texture(ptr.Pointer()))
	}
	return nil
}

func NewQBrush() *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush())
}

func NewQBrush2(style core.Qt__BrushStyle) *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush2(C.int(style)))
}

func NewQBrush6(color core.Qt__GlobalColor, pixmap QPixmap_ITF) *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush6(C.int(color), PointerFromQPixmap(pixmap)))
}

func NewQBrush9(other QBrush_ITF) *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush9(PointerFromQBrush(other)))
}

func NewQBrush3(color QColor_ITF, style core.Qt__BrushStyle) *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush3(PointerFromQColor(color), C.int(style)))
}

func NewQBrush5(color QColor_ITF, pixmap QPixmap_ITF) *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush5(PointerFromQColor(color), PointerFromQPixmap(pixmap)))
}

func NewQBrush10(gradient QGradient_ITF) *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush10(PointerFromQGradient(gradient)))
}

func NewQBrush8(image QImage_ITF) *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush8(PointerFromQImage(image)))
}

func NewQBrush7(pixmap QPixmap_ITF) *QBrush {
	defer qt.Recovering("QBrush::QBrush")

	return newQBrushFromPointer(C.QBrush_NewQBrush7(PointerFromQPixmap(pixmap)))
}

func (ptr *QBrush) Color() *QColor {
	defer qt.Recovering("QBrush::color")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QBrush_Color(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBrush) Gradient() *QGradient {
	defer qt.Recovering("QBrush::gradient")

	if ptr.Pointer() != nil {
		return NewQGradientFromPointer(C.QBrush_Gradient(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBrush) IsOpaque() bool {
	defer qt.Recovering("QBrush::isOpaque")

	if ptr.Pointer() != nil {
		return C.QBrush_IsOpaque(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBrush) SetColor2(color core.Qt__GlobalColor) {
	defer qt.Recovering("QBrush::setColor")

	if ptr.Pointer() != nil {
		C.QBrush_SetColor2(ptr.Pointer(), C.int(color))
	}
}

func (ptr *QBrush) SetStyle(style core.Qt__BrushStyle) {
	defer qt.Recovering("QBrush::setStyle")

	if ptr.Pointer() != nil {
		C.QBrush_SetStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QBrush) SetTexture(pixmap QPixmap_ITF) {
	defer qt.Recovering("QBrush::setTexture")

	if ptr.Pointer() != nil {
		C.QBrush_SetTexture(ptr.Pointer(), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QBrush) SetTextureImage(image QImage_ITF) {
	defer qt.Recovering("QBrush::setTextureImage")

	if ptr.Pointer() != nil {
		C.QBrush_SetTextureImage(ptr.Pointer(), PointerFromQImage(image))
	}
}

func (ptr *QBrush) SetTransform(matrix QTransform_ITF) {
	defer qt.Recovering("QBrush::setTransform")

	if ptr.Pointer() != nil {
		C.QBrush_SetTransform(ptr.Pointer(), PointerFromQTransform(matrix))
	}
}

func (ptr *QBrush) Style() core.Qt__BrushStyle {
	defer qt.Recovering("QBrush::style")

	if ptr.Pointer() != nil {
		return core.Qt__BrushStyle(C.QBrush_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QBrush) Swap(other QBrush_ITF) {
	defer qt.Recovering("QBrush::swap")

	if ptr.Pointer() != nil {
		C.QBrush_Swap(ptr.Pointer(), PointerFromQBrush(other))
	}
}

func (ptr *QBrush) TextureImage() *QImage {
	defer qt.Recovering("QBrush::textureImage")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QBrush_TextureImage(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBrush) DestroyQBrush() {
	defer qt.Recovering("QBrush::~QBrush")

	if ptr.Pointer() != nil {
		C.QBrush_DestroyQBrush(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QClipboard::Mode
type QClipboard__Mode int64

const (
	QClipboard__Clipboard  = QClipboard__Mode(0)
	QClipboard__Selection  = QClipboard__Mode(1)
	QClipboard__FindBuffer = QClipboard__Mode(2)
	QClipboard__LastMode   = QClipboard__Mode(QClipboard__FindBuffer)
)

type QClipboard struct {
	core.QObject
}

type QClipboard_ITF interface {
	core.QObject_ITF
	QClipboard_PTR() *QClipboard
}

func (p *QClipboard) QClipboard_PTR() *QClipboard {
	return p
}

func (p *QClipboard) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QClipboard) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQClipboard(ptr QClipboard_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QClipboard_PTR().Pointer()
	}
	return nil
}

func NewQClipboardFromPointer(ptr unsafe.Pointer) *QClipboard {
	var n = new(QClipboard)
	n.SetPointer(ptr)
	return n
}

func newQClipboardFromPointer(ptr unsafe.Pointer) *QClipboard {
	var n = NewQClipboardFromPointer(ptr)
	for len(n.ObjectName()) < len("QClipboard_") {
		n.SetObjectName("QClipboard_" + qt.Identifier())
	}
	return n
}

func (ptr *QClipboard) Clear(mode QClipboard__Mode) {
	defer qt.Recovering("QClipboard::clear")

	if ptr.Pointer() != nil {
		C.QClipboard_Clear(ptr.Pointer(), C.int(mode))
	}
}

func (ptr *QClipboard) MimeData(mode QClipboard__Mode) *core.QMimeData {
	defer qt.Recovering("QClipboard::mimeData")

	if ptr.Pointer() != nil {
		return core.NewQMimeDataFromPointer(C.QClipboard_MimeData(ptr.Pointer(), C.int(mode)))
	}
	return nil
}

func (ptr *QClipboard) SetMimeData(src core.QMimeData_ITF, mode QClipboard__Mode) {
	defer qt.Recovering("QClipboard::setMimeData")

	if ptr.Pointer() != nil {
		C.QClipboard_SetMimeData(ptr.Pointer(), core.PointerFromQMimeData(src), C.int(mode))
	}
}

//export callbackQClipboard_Changed
func callbackQClipboard_Changed(ptr unsafe.Pointer, ptrName *C.char, mode C.int) {
	defer qt.Recovering("callback QClipboard::changed")

	if signal := qt.GetSignal(C.GoString(ptrName), "changed"); signal != nil {
		signal.(func(QClipboard__Mode))(QClipboard__Mode(mode))
	}

}

func (ptr *QClipboard) ConnectChanged(f func(mode QClipboard__Mode)) {
	defer qt.Recovering("connect QClipboard::changed")

	if ptr.Pointer() != nil {
		C.QClipboard_ConnectChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "changed", f)
	}
}

func (ptr *QClipboard) DisconnectChanged() {
	defer qt.Recovering("disconnect QClipboard::changed")

	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "changed")
	}
}

func (ptr *QClipboard) Changed(mode QClipboard__Mode) {
	defer qt.Recovering("QClipboard::changed")

	if ptr.Pointer() != nil {
		C.QClipboard_Changed(ptr.Pointer(), C.int(mode))
	}
}

//export callbackQClipboard_DataChanged
func callbackQClipboard_DataChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QClipboard::dataChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "dataChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectDataChanged(f func()) {
	defer qt.Recovering("connect QClipboard::dataChanged")

	if ptr.Pointer() != nil {
		C.QClipboard_ConnectDataChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "dataChanged", f)
	}
}

func (ptr *QClipboard) DisconnectDataChanged() {
	defer qt.Recovering("disconnect QClipboard::dataChanged")

	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectDataChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "dataChanged")
	}
}

func (ptr *QClipboard) DataChanged() {
	defer qt.Recovering("QClipboard::dataChanged")

	if ptr.Pointer() != nil {
		C.QClipboard_DataChanged(ptr.Pointer())
	}
}

//export callbackQClipboard_FindBufferChanged
func callbackQClipboard_FindBufferChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QClipboard::findBufferChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "findBufferChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectFindBufferChanged(f func()) {
	defer qt.Recovering("connect QClipboard::findBufferChanged")

	if ptr.Pointer() != nil {
		C.QClipboard_ConnectFindBufferChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "findBufferChanged", f)
	}
}

func (ptr *QClipboard) DisconnectFindBufferChanged() {
	defer qt.Recovering("disconnect QClipboard::findBufferChanged")

	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectFindBufferChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "findBufferChanged")
	}
}

func (ptr *QClipboard) FindBufferChanged() {
	defer qt.Recovering("QClipboard::findBufferChanged")

	if ptr.Pointer() != nil {
		C.QClipboard_FindBufferChanged(ptr.Pointer())
	}
}

func (ptr *QClipboard) Image(mode QClipboard__Mode) *QImage {
	defer qt.Recovering("QClipboard::image")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QClipboard_Image(ptr.Pointer(), C.int(mode)))
	}
	return nil
}

func (ptr *QClipboard) OwnsClipboard() bool {
	defer qt.Recovering("QClipboard::ownsClipboard")

	if ptr.Pointer() != nil {
		return C.QClipboard_OwnsClipboard(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) OwnsFindBuffer() bool {
	defer qt.Recovering("QClipboard::ownsFindBuffer")

	if ptr.Pointer() != nil {
		return C.QClipboard_OwnsFindBuffer(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) OwnsSelection() bool {
	defer qt.Recovering("QClipboard::ownsSelection")

	if ptr.Pointer() != nil {
		return C.QClipboard_OwnsSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) Pixmap(mode QClipboard__Mode) *QPixmap {
	defer qt.Recovering("QClipboard::pixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QClipboard_Pixmap(ptr.Pointer(), C.int(mode)))
	}
	return nil
}

//export callbackQClipboard_SelectionChanged
func callbackQClipboard_SelectionChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QClipboard::selectionChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "selectionChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectSelectionChanged(f func()) {
	defer qt.Recovering("connect QClipboard::selectionChanged")

	if ptr.Pointer() != nil {
		C.QClipboard_ConnectSelectionChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "selectionChanged", f)
	}
}

func (ptr *QClipboard) DisconnectSelectionChanged() {
	defer qt.Recovering("disconnect QClipboard::selectionChanged")

	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectSelectionChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "selectionChanged")
	}
}

func (ptr *QClipboard) SelectionChanged() {
	defer qt.Recovering("QClipboard::selectionChanged")

	if ptr.Pointer() != nil {
		C.QClipboard_SelectionChanged(ptr.Pointer())
	}
}

func (ptr *QClipboard) SetImage(image QImage_ITF, mode QClipboard__Mode) {
	defer qt.Recovering("QClipboard::setImage")

	if ptr.Pointer() != nil {
		C.QClipboard_SetImage(ptr.Pointer(), PointerFromQImage(image), C.int(mode))
	}
}

func (ptr *QClipboard) SetPixmap(pixmap QPixmap_ITF, mode QClipboard__Mode) {
	defer qt.Recovering("QClipboard::setPixmap")

	if ptr.Pointer() != nil {
		C.QClipboard_SetPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap), C.int(mode))
	}
}

func (ptr *QClipboard) SetText(text string, mode QClipboard__Mode) {
	defer qt.Recovering("QClipboard::setText")

	if ptr.Pointer() != nil {
		C.QClipboard_SetText(ptr.Pointer(), C.CString(text), C.int(mode))
	}
}

func (ptr *QClipboard) SupportsFindBuffer() bool {
	defer qt.Recovering("QClipboard::supportsFindBuffer")

	if ptr.Pointer() != nil {
		return C.QClipboard_SupportsFindBuffer(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) SupportsSelection() bool {
	defer qt.Recovering("QClipboard::supportsSelection")

	if ptr.Pointer() != nil {
		return C.QClipboard_SupportsSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) Text(mode QClipboard__Mode) string {
	defer qt.Recovering("QClipboard::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QClipboard_Text(ptr.Pointer(), C.int(mode)))
	}
	return ""
}

//export callbackQClipboard_TimerEvent
func callbackQClipboard_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QClipboard::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQClipboardFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QClipboard) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QClipboard::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QClipboard) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QClipboard::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QClipboard) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QClipboard::timerEvent")

	if ptr.Pointer() != nil {
		C.QClipboard_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QClipboard) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QClipboard::timerEvent")

	if ptr.Pointer() != nil {
		C.QClipboard_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQClipboard_ChildEvent
func callbackQClipboard_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QClipboard::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQClipboardFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QClipboard) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QClipboard::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QClipboard) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QClipboard::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QClipboard) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QClipboard::childEvent")

	if ptr.Pointer() != nil {
		C.QClipboard_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QClipboard) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QClipboard::childEvent")

	if ptr.Pointer() != nil {
		C.QClipboard_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQClipboard_ConnectNotify
func callbackQClipboard_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QClipboard::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQClipboardFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QClipboard) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QClipboard::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QClipboard) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QClipboard::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QClipboard) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QClipboard::connectNotify")

	if ptr.Pointer() != nil {
		C.QClipboard_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QClipboard) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QClipboard::connectNotify")

	if ptr.Pointer() != nil {
		C.QClipboard_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQClipboard_CustomEvent
func callbackQClipboard_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QClipboard::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQClipboardFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QClipboard) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QClipboard::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QClipboard) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QClipboard::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QClipboard) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QClipboard::customEvent")

	if ptr.Pointer() != nil {
		C.QClipboard_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QClipboard) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QClipboard::customEvent")

	if ptr.Pointer() != nil {
		C.QClipboard_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQClipboard_DeleteLater
func callbackQClipboard_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QClipboard::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QClipboard::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QClipboard) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QClipboard::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QClipboard) DeleteLater() {
	defer qt.Recovering("QClipboard::deleteLater")

	if ptr.Pointer() != nil {
		C.QClipboard_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQClipboard_DisconnectNotify
func callbackQClipboard_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QClipboard::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQClipboardFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QClipboard) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QClipboard::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QClipboard) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QClipboard::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QClipboard) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QClipboard::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QClipboard) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QClipboard::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQClipboard_Event
func callbackQClipboard_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QClipboard::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQClipboardFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QClipboard) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QClipboard::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QClipboard) DisconnectEvent() {
	defer qt.Recovering("disconnect QClipboard::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QClipboard) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QClipboard::event")

	if ptr.Pointer() != nil {
		return C.QClipboard_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QClipboard) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QClipboard::event")

	if ptr.Pointer() != nil {
		return C.QClipboard_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQClipboard_EventFilter
func callbackQClipboard_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QClipboard::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQClipboardFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QClipboard) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QClipboard::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QClipboard) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QClipboard::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QClipboard) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QClipboard::eventFilter")

	if ptr.Pointer() != nil {
		return C.QClipboard_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QClipboard) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QClipboard::eventFilter")

	if ptr.Pointer() != nil {
		return C.QClipboard_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQClipboard_MetaObject
func callbackQClipboard_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QClipboard::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQClipboardFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QClipboard) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QClipboard::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QClipboard) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QClipboard::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QClipboard) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QClipboard::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QClipboard_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QClipboard) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QClipboard::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QClipboard_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCloseEvent struct {
	core.QEvent
}

type QCloseEvent_ITF interface {
	core.QEvent_ITF
	QCloseEvent_PTR() *QCloseEvent
}

func (p *QCloseEvent) QCloseEvent_PTR() *QCloseEvent {
	return p
}

func (p *QCloseEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QCloseEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQCloseEvent(ptr QCloseEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCloseEvent_PTR().Pointer()
	}
	return nil
}

func NewQCloseEventFromPointer(ptr unsafe.Pointer) *QCloseEvent {
	var n = new(QCloseEvent)
	n.SetPointer(ptr)
	return n
}

func newQCloseEventFromPointer(ptr unsafe.Pointer) *QCloseEvent {
	var n = NewQCloseEventFromPointer(ptr)
	return n
}

func NewQCloseEvent() *QCloseEvent {
	defer qt.Recovering("QCloseEvent::QCloseEvent")

	return newQCloseEventFromPointer(C.QCloseEvent_NewQCloseEvent())
}

//QColor::NameFormat
type QColor__NameFormat int64

const (
	QColor__HexRgb  = QColor__NameFormat(0)
	QColor__HexArgb = QColor__NameFormat(1)
)

//QColor::Spec
type QColor__Spec int64

const (
	QColor__Invalid = QColor__Spec(0)
	QColor__Rgb     = QColor__Spec(1)
	QColor__Hsv     = QColor__Spec(2)
	QColor__Cmyk    = QColor__Spec(3)
	QColor__Hsl     = QColor__Spec(4)
)

type QColor struct {
	ptr unsafe.Pointer
}

type QColor_ITF interface {
	QColor_PTR() *QColor
}

func (p *QColor) QColor_PTR() *QColor {
	return p
}

func (p *QColor) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QColor) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQColor(ptr QColor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QColor_PTR().Pointer()
	}
	return nil
}

func NewQColorFromPointer(ptr unsafe.Pointer) *QColor {
	var n = new(QColor)
	n.SetPointer(ptr)
	return n
}

func newQColorFromPointer(ptr unsafe.Pointer) *QColor {
	var n = NewQColorFromPointer(ptr)
	return n
}

func (ptr *QColor) ConvertTo(colorSpec QColor__Spec) *QColor {
	defer qt.Recovering("QColor::convertTo")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QColor_ConvertTo(ptr.Pointer(), C.int(colorSpec)))
	}
	return nil
}

func (ptr *QColor) SetRgbF(r float64, g float64, b float64, a float64) {
	defer qt.Recovering("QColor::setRgbF")

	if ptr.Pointer() != nil {
		C.QColor_SetRgbF(ptr.Pointer(), C.double(r), C.double(g), C.double(b), C.double(a))
	}
}

func NewQColor() *QColor {
	defer qt.Recovering("QColor::QColor")

	return newQColorFromPointer(C.QColor_NewQColor())
}

func NewQColor8(color core.Qt__GlobalColor) *QColor {
	defer qt.Recovering("QColor::QColor")

	return newQColorFromPointer(C.QColor_NewQColor8(C.int(color)))
}

func NewQColor6(color QColor_ITF) *QColor {
	defer qt.Recovering("QColor::QColor")

	return newQColorFromPointer(C.QColor_NewQColor6(PointerFromQColor(color)))
}

func NewQColor4(name string) *QColor {
	defer qt.Recovering("QColor::QColor")

	return newQColorFromPointer(C.QColor_NewQColor4(C.CString(name)))
}

func NewQColor5(name string) *QColor {
	defer qt.Recovering("QColor::QColor")

	return newQColorFromPointer(C.QColor_NewQColor5(C.CString(name)))
}

func NewQColor2(r int, g int, b int, a int) *QColor {
	defer qt.Recovering("QColor::QColor")

	return newQColorFromPointer(C.QColor_NewQColor2(C.int(r), C.int(g), C.int(b), C.int(a)))
}

func (ptr *QColor) Alpha() int {
	defer qt.Recovering("QColor::alpha")

	if ptr.Pointer() != nil {
		return int(C.QColor_Alpha(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) AlphaF() float64 {
	defer qt.Recovering("QColor::alphaF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_AlphaF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Black() int {
	defer qt.Recovering("QColor::black")

	if ptr.Pointer() != nil {
		return int(C.QColor_Black(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) BlackF() float64 {
	defer qt.Recovering("QColor::blackF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_BlackF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Blue() int {
	defer qt.Recovering("QColor::blue")

	if ptr.Pointer() != nil {
		return int(C.QColor_Blue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) BlueF() float64 {
	defer qt.Recovering("QColor::blueF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_BlueF(ptr.Pointer()))
	}
	return 0
}

func QColor_ColorNames() []string {
	defer qt.Recovering("QColor::colorNames")

	return strings.Split(C.GoString(C.QColor_QColor_ColorNames()), "|")
}

func (ptr *QColor) ColorNames() []string {
	defer qt.Recovering("QColor::colorNames")

	return strings.Split(C.GoString(C.QColor_QColor_ColorNames()), "|")
}

func (ptr *QColor) Cyan() int {
	defer qt.Recovering("QColor::cyan")

	if ptr.Pointer() != nil {
		return int(C.QColor_Cyan(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) CyanF() float64 {
	defer qt.Recovering("QColor::cyanF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_CyanF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Darker(factor int) *QColor {
	defer qt.Recovering("QColor::darker")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QColor_Darker(ptr.Pointer(), C.int(factor)))
	}
	return nil
}

func QColor_FromCmyk(c int, m int, y int, k int, a int) *QColor {
	defer qt.Recovering("QColor::fromCmyk")

	return NewQColorFromPointer(C.QColor_QColor_FromCmyk(C.int(c), C.int(m), C.int(y), C.int(k), C.int(a)))
}

func (ptr *QColor) FromCmyk(c int, m int, y int, k int, a int) *QColor {
	defer qt.Recovering("QColor::fromCmyk")

	return NewQColorFromPointer(C.QColor_QColor_FromCmyk(C.int(c), C.int(m), C.int(y), C.int(k), C.int(a)))
}

func QColor_FromCmykF(c float64, m float64, y float64, k float64, a float64) *QColor {
	defer qt.Recovering("QColor::fromCmykF")

	return NewQColorFromPointer(C.QColor_QColor_FromCmykF(C.double(c), C.double(m), C.double(y), C.double(k), C.double(a)))
}

func (ptr *QColor) FromCmykF(c float64, m float64, y float64, k float64, a float64) *QColor {
	defer qt.Recovering("QColor::fromCmykF")

	return NewQColorFromPointer(C.QColor_QColor_FromCmykF(C.double(c), C.double(m), C.double(y), C.double(k), C.double(a)))
}

func QColor_FromHsl(h int, s int, l int, a int) *QColor {
	defer qt.Recovering("QColor::fromHsl")

	return NewQColorFromPointer(C.QColor_QColor_FromHsl(C.int(h), C.int(s), C.int(l), C.int(a)))
}

func (ptr *QColor) FromHsl(h int, s int, l int, a int) *QColor {
	defer qt.Recovering("QColor::fromHsl")

	return NewQColorFromPointer(C.QColor_QColor_FromHsl(C.int(h), C.int(s), C.int(l), C.int(a)))
}

func QColor_FromHslF(h float64, s float64, l float64, a float64) *QColor {
	defer qt.Recovering("QColor::fromHslF")

	return NewQColorFromPointer(C.QColor_QColor_FromHslF(C.double(h), C.double(s), C.double(l), C.double(a)))
}

func (ptr *QColor) FromHslF(h float64, s float64, l float64, a float64) *QColor {
	defer qt.Recovering("QColor::fromHslF")

	return NewQColorFromPointer(C.QColor_QColor_FromHslF(C.double(h), C.double(s), C.double(l), C.double(a)))
}

func QColor_FromHsv(h int, s int, v int, a int) *QColor {
	defer qt.Recovering("QColor::fromHsv")

	return NewQColorFromPointer(C.QColor_QColor_FromHsv(C.int(h), C.int(s), C.int(v), C.int(a)))
}

func (ptr *QColor) FromHsv(h int, s int, v int, a int) *QColor {
	defer qt.Recovering("QColor::fromHsv")

	return NewQColorFromPointer(C.QColor_QColor_FromHsv(C.int(h), C.int(s), C.int(v), C.int(a)))
}

func QColor_FromHsvF(h float64, s float64, v float64, a float64) *QColor {
	defer qt.Recovering("QColor::fromHsvF")

	return NewQColorFromPointer(C.QColor_QColor_FromHsvF(C.double(h), C.double(s), C.double(v), C.double(a)))
}

func (ptr *QColor) FromHsvF(h float64, s float64, v float64, a float64) *QColor {
	defer qt.Recovering("QColor::fromHsvF")

	return NewQColorFromPointer(C.QColor_QColor_FromHsvF(C.double(h), C.double(s), C.double(v), C.double(a)))
}

func QColor_FromRgb2(r int, g int, b int, a int) *QColor {
	defer qt.Recovering("QColor::fromRgb")

	return NewQColorFromPointer(C.QColor_QColor_FromRgb2(C.int(r), C.int(g), C.int(b), C.int(a)))
}

func (ptr *QColor) FromRgb2(r int, g int, b int, a int) *QColor {
	defer qt.Recovering("QColor::fromRgb")

	return NewQColorFromPointer(C.QColor_QColor_FromRgb2(C.int(r), C.int(g), C.int(b), C.int(a)))
}

func QColor_FromRgbF(r float64, g float64, b float64, a float64) *QColor {
	defer qt.Recovering("QColor::fromRgbF")

	return NewQColorFromPointer(C.QColor_QColor_FromRgbF(C.double(r), C.double(g), C.double(b), C.double(a)))
}

func (ptr *QColor) FromRgbF(r float64, g float64, b float64, a float64) *QColor {
	defer qt.Recovering("QColor::fromRgbF")

	return NewQColorFromPointer(C.QColor_QColor_FromRgbF(C.double(r), C.double(g), C.double(b), C.double(a)))
}

func (ptr *QColor) GetCmyk(c int, m int, y int, k int, a int) {
	defer qt.Recovering("QColor::getCmyk")

	if ptr.Pointer() != nil {
		C.QColor_GetCmyk(ptr.Pointer(), C.int(c), C.int(m), C.int(y), C.int(k), C.int(a))
	}
}

func (ptr *QColor) GetHsl(h int, s int, l int, a int) {
	defer qt.Recovering("QColor::getHsl")

	if ptr.Pointer() != nil {
		C.QColor_GetHsl(ptr.Pointer(), C.int(h), C.int(s), C.int(l), C.int(a))
	}
}

func (ptr *QColor) GetHsv(h int, s int, v int, a int) {
	defer qt.Recovering("QColor::getHsv")

	if ptr.Pointer() != nil {
		C.QColor_GetHsv(ptr.Pointer(), C.int(h), C.int(s), C.int(v), C.int(a))
	}
}

func (ptr *QColor) GetRgb(r int, g int, b int, a int) {
	defer qt.Recovering("QColor::getRgb")

	if ptr.Pointer() != nil {
		C.QColor_GetRgb(ptr.Pointer(), C.int(r), C.int(g), C.int(b), C.int(a))
	}
}

func (ptr *QColor) Green() int {
	defer qt.Recovering("QColor::green")

	if ptr.Pointer() != nil {
		return int(C.QColor_Green(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) GreenF() float64 {
	defer qt.Recovering("QColor::greenF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_GreenF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HslHue() int {
	defer qt.Recovering("QColor::hslHue")

	if ptr.Pointer() != nil {
		return int(C.QColor_HslHue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HslHueF() float64 {
	defer qt.Recovering("QColor::hslHueF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_HslHueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HslSaturation() int {
	defer qt.Recovering("QColor::hslSaturation")

	if ptr.Pointer() != nil {
		return int(C.QColor_HslSaturation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HslSaturationF() float64 {
	defer qt.Recovering("QColor::hslSaturationF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_HslSaturationF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HsvHue() int {
	defer qt.Recovering("QColor::hsvHue")

	if ptr.Pointer() != nil {
		return int(C.QColor_HsvHue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HsvHueF() float64 {
	defer qt.Recovering("QColor::hsvHueF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_HsvHueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HsvSaturation() int {
	defer qt.Recovering("QColor::hsvSaturation")

	if ptr.Pointer() != nil {
		return int(C.QColor_HsvSaturation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HsvSaturationF() float64 {
	defer qt.Recovering("QColor::hsvSaturationF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_HsvSaturationF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Hue() int {
	defer qt.Recovering("QColor::hue")

	if ptr.Pointer() != nil {
		return int(C.QColor_Hue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HueF() float64 {
	defer qt.Recovering("QColor::hueF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_HueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) IsValid() bool {
	defer qt.Recovering("QColor::isValid")

	if ptr.Pointer() != nil {
		return C.QColor_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func QColor_IsValidColor(name string) bool {
	defer qt.Recovering("QColor::isValidColor")

	return C.QColor_QColor_IsValidColor(C.CString(name)) != 0
}

func (ptr *QColor) IsValidColor(name string) bool {
	defer qt.Recovering("QColor::isValidColor")

	return C.QColor_QColor_IsValidColor(C.CString(name)) != 0
}

func (ptr *QColor) Lighter(factor int) *QColor {
	defer qt.Recovering("QColor::lighter")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QColor_Lighter(ptr.Pointer(), C.int(factor)))
	}
	return nil
}

func (ptr *QColor) Lightness() int {
	defer qt.Recovering("QColor::lightness")

	if ptr.Pointer() != nil {
		return int(C.QColor_Lightness(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) LightnessF() float64 {
	defer qt.Recovering("QColor::lightnessF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_LightnessF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Magenta() int {
	defer qt.Recovering("QColor::magenta")

	if ptr.Pointer() != nil {
		return int(C.QColor_Magenta(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) MagentaF() float64 {
	defer qt.Recovering("QColor::magentaF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_MagentaF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Name() string {
	defer qt.Recovering("QColor::name")

	if ptr.Pointer() != nil {
		return C.GoString(C.QColor_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QColor) Name2(format QColor__NameFormat) string {
	defer qt.Recovering("QColor::name")

	if ptr.Pointer() != nil {
		return C.GoString(C.QColor_Name2(ptr.Pointer(), C.int(format)))
	}
	return ""
}

func (ptr *QColor) Red() int {
	defer qt.Recovering("QColor::red")

	if ptr.Pointer() != nil {
		return int(C.QColor_Red(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) RedF() float64 {
	defer qt.Recovering("QColor::redF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_RedF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Saturation() int {
	defer qt.Recovering("QColor::saturation")

	if ptr.Pointer() != nil {
		return int(C.QColor_Saturation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) SaturationF() float64 {
	defer qt.Recovering("QColor::saturationF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_SaturationF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) SetAlpha(alpha int) {
	defer qt.Recovering("QColor::setAlpha")

	if ptr.Pointer() != nil {
		C.QColor_SetAlpha(ptr.Pointer(), C.int(alpha))
	}
}

func (ptr *QColor) SetAlphaF(alpha float64) {
	defer qt.Recovering("QColor::setAlphaF")

	if ptr.Pointer() != nil {
		C.QColor_SetAlphaF(ptr.Pointer(), C.double(alpha))
	}
}

func (ptr *QColor) SetBlue(blue int) {
	defer qt.Recovering("QColor::setBlue")

	if ptr.Pointer() != nil {
		C.QColor_SetBlue(ptr.Pointer(), C.int(blue))
	}
}

func (ptr *QColor) SetBlueF(blue float64) {
	defer qt.Recovering("QColor::setBlueF")

	if ptr.Pointer() != nil {
		C.QColor_SetBlueF(ptr.Pointer(), C.double(blue))
	}
}

func (ptr *QColor) SetCmyk(c int, m int, y int, k int, a int) {
	defer qt.Recovering("QColor::setCmyk")

	if ptr.Pointer() != nil {
		C.QColor_SetCmyk(ptr.Pointer(), C.int(c), C.int(m), C.int(y), C.int(k), C.int(a))
	}
}

func (ptr *QColor) SetCmykF(c float64, m float64, y float64, k float64, a float64) {
	defer qt.Recovering("QColor::setCmykF")

	if ptr.Pointer() != nil {
		C.QColor_SetCmykF(ptr.Pointer(), C.double(c), C.double(m), C.double(y), C.double(k), C.double(a))
	}
}

func (ptr *QColor) SetGreen(green int) {
	defer qt.Recovering("QColor::setGreen")

	if ptr.Pointer() != nil {
		C.QColor_SetGreen(ptr.Pointer(), C.int(green))
	}
}

func (ptr *QColor) SetGreenF(green float64) {
	defer qt.Recovering("QColor::setGreenF")

	if ptr.Pointer() != nil {
		C.QColor_SetGreenF(ptr.Pointer(), C.double(green))
	}
}

func (ptr *QColor) SetHsl(h int, s int, l int, a int) {
	defer qt.Recovering("QColor::setHsl")

	if ptr.Pointer() != nil {
		C.QColor_SetHsl(ptr.Pointer(), C.int(h), C.int(s), C.int(l), C.int(a))
	}
}

func (ptr *QColor) SetHslF(h float64, s float64, l float64, a float64) {
	defer qt.Recovering("QColor::setHslF")

	if ptr.Pointer() != nil {
		C.QColor_SetHslF(ptr.Pointer(), C.double(h), C.double(s), C.double(l), C.double(a))
	}
}

func (ptr *QColor) SetHsv(h int, s int, v int, a int) {
	defer qt.Recovering("QColor::setHsv")

	if ptr.Pointer() != nil {
		C.QColor_SetHsv(ptr.Pointer(), C.int(h), C.int(s), C.int(v), C.int(a))
	}
}

func (ptr *QColor) SetHsvF(h float64, s float64, v float64, a float64) {
	defer qt.Recovering("QColor::setHsvF")

	if ptr.Pointer() != nil {
		C.QColor_SetHsvF(ptr.Pointer(), C.double(h), C.double(s), C.double(v), C.double(a))
	}
}

func (ptr *QColor) SetNamedColor(name string) {
	defer qt.Recovering("QColor::setNamedColor")

	if ptr.Pointer() != nil {
		C.QColor_SetNamedColor(ptr.Pointer(), C.CString(name))
	}
}

func (ptr *QColor) SetRed(red int) {
	defer qt.Recovering("QColor::setRed")

	if ptr.Pointer() != nil {
		C.QColor_SetRed(ptr.Pointer(), C.int(red))
	}
}

func (ptr *QColor) SetRedF(red float64) {
	defer qt.Recovering("QColor::setRedF")

	if ptr.Pointer() != nil {
		C.QColor_SetRedF(ptr.Pointer(), C.double(red))
	}
}

func (ptr *QColor) SetRgb(r int, g int, b int, a int) {
	defer qt.Recovering("QColor::setRgb")

	if ptr.Pointer() != nil {
		C.QColor_SetRgb(ptr.Pointer(), C.int(r), C.int(g), C.int(b), C.int(a))
	}
}

func (ptr *QColor) Spec() QColor__Spec {
	defer qt.Recovering("QColor::spec")

	if ptr.Pointer() != nil {
		return QColor__Spec(C.QColor_Spec(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) ToCmyk() *QColor {
	defer qt.Recovering("QColor::toCmyk")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QColor_ToCmyk(ptr.Pointer()))
	}
	return nil
}

func (ptr *QColor) ToHsl() *QColor {
	defer qt.Recovering("QColor::toHsl")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QColor_ToHsl(ptr.Pointer()))
	}
	return nil
}

func (ptr *QColor) ToHsv() *QColor {
	defer qt.Recovering("QColor::toHsv")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QColor_ToHsv(ptr.Pointer()))
	}
	return nil
}

func (ptr *QColor) ToRgb() *QColor {
	defer qt.Recovering("QColor::toRgb")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QColor_ToRgb(ptr.Pointer()))
	}
	return nil
}

func (ptr *QColor) Value() int {
	defer qt.Recovering("QColor::value")

	if ptr.Pointer() != nil {
		return int(C.QColor_Value(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) ValueF() float64 {
	defer qt.Recovering("QColor::valueF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_ValueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Yellow() int {
	defer qt.Recovering("QColor::yellow")

	if ptr.Pointer() != nil {
		return int(C.QColor_Yellow(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) YellowF() float64 {
	defer qt.Recovering("QColor::yellowF")

	if ptr.Pointer() != nil {
		return float64(C.QColor_YellowF(ptr.Pointer()))
	}
	return 0
}

type QConicalGradient struct {
	QGradient
}

type QConicalGradient_ITF interface {
	QGradient_ITF
	QConicalGradient_PTR() *QConicalGradient
}

func (p *QConicalGradient) QConicalGradient_PTR() *QConicalGradient {
	return p
}

func (p *QConicalGradient) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QGradient_PTR().Pointer()
	}
	return nil
}

func (p *QConicalGradient) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QGradient_PTR().SetPointer(ptr)
	}
}

func PointerFromQConicalGradient(ptr QConicalGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QConicalGradient_PTR().Pointer()
	}
	return nil
}

func NewQConicalGradientFromPointer(ptr unsafe.Pointer) *QConicalGradient {
	var n = new(QConicalGradient)
	n.SetPointer(ptr)
	return n
}

func newQConicalGradientFromPointer(ptr unsafe.Pointer) *QConicalGradient {
	var n = NewQConicalGradientFromPointer(ptr)
	return n
}

func NewQConicalGradient() *QConicalGradient {
	defer qt.Recovering("QConicalGradient::QConicalGradient")

	return newQConicalGradientFromPointer(C.QConicalGradient_NewQConicalGradient())
}

func NewQConicalGradient2(center core.QPointF_ITF, angle float64) *QConicalGradient {
	defer qt.Recovering("QConicalGradient::QConicalGradient")

	return newQConicalGradientFromPointer(C.QConicalGradient_NewQConicalGradient2(core.PointerFromQPointF(center), C.double(angle)))
}

func NewQConicalGradient3(cx float64, cy float64, angle float64) *QConicalGradient {
	defer qt.Recovering("QConicalGradient::QConicalGradient")

	return newQConicalGradientFromPointer(C.QConicalGradient_NewQConicalGradient3(C.double(cx), C.double(cy), C.double(angle)))
}

func (ptr *QConicalGradient) Angle() float64 {
	defer qt.Recovering("QConicalGradient::angle")

	if ptr.Pointer() != nil {
		return float64(C.QConicalGradient_Angle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QConicalGradient) Center() *core.QPointF {
	defer qt.Recovering("QConicalGradient::center")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QConicalGradient_Center(ptr.Pointer()))
	}
	return nil
}

func (ptr *QConicalGradient) SetAngle(angle float64) {
	defer qt.Recovering("QConicalGradient::setAngle")

	if ptr.Pointer() != nil {
		C.QConicalGradient_SetAngle(ptr.Pointer(), C.double(angle))
	}
}

func (ptr *QConicalGradient) SetCenter(center core.QPointF_ITF) {
	defer qt.Recovering("QConicalGradient::setCenter")

	if ptr.Pointer() != nil {
		C.QConicalGradient_SetCenter(ptr.Pointer(), core.PointerFromQPointF(center))
	}
}

func (ptr *QConicalGradient) SetCenter2(x float64, y float64) {
	defer qt.Recovering("QConicalGradient::setCenter")

	if ptr.Pointer() != nil {
		C.QConicalGradient_SetCenter2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

//QContextMenuEvent::Reason
type QContextMenuEvent__Reason int64

const (
	QContextMenuEvent__Mouse    = QContextMenuEvent__Reason(0)
	QContextMenuEvent__Keyboard = QContextMenuEvent__Reason(1)
	QContextMenuEvent__Other    = QContextMenuEvent__Reason(2)
)

type QContextMenuEvent struct {
	QInputEvent
}

type QContextMenuEvent_ITF interface {
	QInputEvent_ITF
	QContextMenuEvent_PTR() *QContextMenuEvent
}

func (p *QContextMenuEvent) QContextMenuEvent_PTR() *QContextMenuEvent {
	return p
}

func (p *QContextMenuEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QContextMenuEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQContextMenuEvent(ptr QContextMenuEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QContextMenuEvent_PTR().Pointer()
	}
	return nil
}

func NewQContextMenuEventFromPointer(ptr unsafe.Pointer) *QContextMenuEvent {
	var n = new(QContextMenuEvent)
	n.SetPointer(ptr)
	return n
}

func newQContextMenuEventFromPointer(ptr unsafe.Pointer) *QContextMenuEvent {
	var n = NewQContextMenuEventFromPointer(ptr)
	return n
}

func NewQContextMenuEvent3(reason QContextMenuEvent__Reason, pos core.QPoint_ITF) *QContextMenuEvent {
	defer qt.Recovering("QContextMenuEvent::QContextMenuEvent")

	return newQContextMenuEventFromPointer(C.QContextMenuEvent_NewQContextMenuEvent3(C.int(reason), core.PointerFromQPoint(pos)))
}

func NewQContextMenuEvent2(reason QContextMenuEvent__Reason, pos core.QPoint_ITF, globalPos core.QPoint_ITF) *QContextMenuEvent {
	defer qt.Recovering("QContextMenuEvent::QContextMenuEvent")

	return newQContextMenuEventFromPointer(C.QContextMenuEvent_NewQContextMenuEvent2(C.int(reason), core.PointerFromQPoint(pos), core.PointerFromQPoint(globalPos)))
}

func NewQContextMenuEvent(reason QContextMenuEvent__Reason, pos core.QPoint_ITF, globalPos core.QPoint_ITF, modifiers core.Qt__KeyboardModifier) *QContextMenuEvent {
	defer qt.Recovering("QContextMenuEvent::QContextMenuEvent")

	return newQContextMenuEventFromPointer(C.QContextMenuEvent_NewQContextMenuEvent(C.int(reason), core.PointerFromQPoint(pos), core.PointerFromQPoint(globalPos), C.int(modifiers)))
}

func (ptr *QContextMenuEvent) GlobalPos() *core.QPoint {
	defer qt.Recovering("QContextMenuEvent::globalPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QContextMenuEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QContextMenuEvent) GlobalX() int {
	defer qt.Recovering("QContextMenuEvent::globalX")

	if ptr.Pointer() != nil {
		return int(C.QContextMenuEvent_GlobalX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QContextMenuEvent) GlobalY() int {
	defer qt.Recovering("QContextMenuEvent::globalY")

	if ptr.Pointer() != nil {
		return int(C.QContextMenuEvent_GlobalY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QContextMenuEvent) Pos() *core.QPoint {
	defer qt.Recovering("QContextMenuEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QContextMenuEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QContextMenuEvent) Reason() QContextMenuEvent__Reason {
	defer qt.Recovering("QContextMenuEvent::reason")

	if ptr.Pointer() != nil {
		return QContextMenuEvent__Reason(C.QContextMenuEvent_Reason(ptr.Pointer()))
	}
	return 0
}

func (ptr *QContextMenuEvent) X() int {
	defer qt.Recovering("QContextMenuEvent::x")

	if ptr.Pointer() != nil {
		return int(C.QContextMenuEvent_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QContextMenuEvent) Y() int {
	defer qt.Recovering("QContextMenuEvent::y")

	if ptr.Pointer() != nil {
		return int(C.QContextMenuEvent_Y(ptr.Pointer()))
	}
	return 0
}

type QCursor struct {
	ptr unsafe.Pointer
}

type QCursor_ITF interface {
	QCursor_PTR() *QCursor
}

func (p *QCursor) QCursor_PTR() *QCursor {
	return p
}

func (p *QCursor) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCursor) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCursor(ptr QCursor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCursor_PTR().Pointer()
	}
	return nil
}

func NewQCursorFromPointer(ptr unsafe.Pointer) *QCursor {
	var n = new(QCursor)
	n.SetPointer(ptr)
	return n
}

func newQCursorFromPointer(ptr unsafe.Pointer) *QCursor {
	var n = NewQCursorFromPointer(ptr)
	return n
}

func QCursor_Pos() *core.QPoint {
	defer qt.Recovering("QCursor::pos")

	return core.NewQPointFromPointer(C.QCursor_QCursor_Pos())
}

func (ptr *QCursor) Pos() *core.QPoint {
	defer qt.Recovering("QCursor::pos")

	return core.NewQPointFromPointer(C.QCursor_QCursor_Pos())
}

func QCursor_Pos2(screen QScreen_ITF) *core.QPoint {
	defer qt.Recovering("QCursor::pos")

	return core.NewQPointFromPointer(C.QCursor_QCursor_Pos2(PointerFromQScreen(screen)))
}

func (ptr *QCursor) Pos2(screen QScreen_ITF) *core.QPoint {
	defer qt.Recovering("QCursor::pos")

	return core.NewQPointFromPointer(C.QCursor_QCursor_Pos2(PointerFromQScreen(screen)))
}

func QCursor_SetPos2(screen QScreen_ITF, x int, y int) {
	defer qt.Recovering("QCursor::setPos")

	C.QCursor_QCursor_SetPos2(PointerFromQScreen(screen), C.int(x), C.int(y))
}

func (ptr *QCursor) SetPos2(screen QScreen_ITF, x int, y int) {
	defer qt.Recovering("QCursor::setPos")

	C.QCursor_QCursor_SetPos2(PointerFromQScreen(screen), C.int(x), C.int(y))
}

func QCursor_SetPos(x int, y int) {
	defer qt.Recovering("QCursor::setPos")

	C.QCursor_QCursor_SetPos(C.int(x), C.int(y))
}

func (ptr *QCursor) SetPos(x int, y int) {
	defer qt.Recovering("QCursor::setPos")

	C.QCursor_QCursor_SetPos(C.int(x), C.int(y))
}

func NewQCursor() *QCursor {
	defer qt.Recovering("QCursor::QCursor")

	return newQCursorFromPointer(C.QCursor_NewQCursor())
}

func NewQCursor6(other QCursor_ITF) *QCursor {
	defer qt.Recovering("QCursor::QCursor")

	return newQCursorFromPointer(C.QCursor_NewQCursor6(PointerFromQCursor(other)))
}

func NewQCursor2(shape core.Qt__CursorShape) *QCursor {
	defer qt.Recovering("QCursor::QCursor")

	return newQCursorFromPointer(C.QCursor_NewQCursor2(C.int(shape)))
}

func NewQCursor3(bitmap QBitmap_ITF, mask QBitmap_ITF, hotX int, hotY int) *QCursor {
	defer qt.Recovering("QCursor::QCursor")

	return newQCursorFromPointer(C.QCursor_NewQCursor3(PointerFromQBitmap(bitmap), PointerFromQBitmap(mask), C.int(hotX), C.int(hotY)))
}

func NewQCursor5(c QCursor_ITF) *QCursor {
	defer qt.Recovering("QCursor::QCursor")

	return newQCursorFromPointer(C.QCursor_NewQCursor5(PointerFromQCursor(c)))
}

func NewQCursor4(pixmap QPixmap_ITF, hotX int, hotY int) *QCursor {
	defer qt.Recovering("QCursor::QCursor")

	return newQCursorFromPointer(C.QCursor_NewQCursor4(PointerFromQPixmap(pixmap), C.int(hotX), C.int(hotY)))
}

func (ptr *QCursor) Bitmap() *QBitmap {
	defer qt.Recovering("QCursor::bitmap")

	if ptr.Pointer() != nil {
		return NewQBitmapFromPointer(C.QCursor_Bitmap(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCursor) HotSpot() *core.QPoint {
	defer qt.Recovering("QCursor::hotSpot")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QCursor_HotSpot(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCursor) Mask() *QBitmap {
	defer qt.Recovering("QCursor::mask")

	if ptr.Pointer() != nil {
		return NewQBitmapFromPointer(C.QCursor_Mask(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCursor) Pixmap() *QPixmap {
	defer qt.Recovering("QCursor::pixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QCursor_Pixmap(ptr.Pointer()))
	}
	return nil
}

func QCursor_SetPos4(screen QScreen_ITF, p core.QPoint_ITF) {
	defer qt.Recovering("QCursor::setPos")

	C.QCursor_QCursor_SetPos4(PointerFromQScreen(screen), core.PointerFromQPoint(p))
}

func (ptr *QCursor) SetPos4(screen QScreen_ITF, p core.QPoint_ITF) {
	defer qt.Recovering("QCursor::setPos")

	C.QCursor_QCursor_SetPos4(PointerFromQScreen(screen), core.PointerFromQPoint(p))
}

func QCursor_SetPos3(p core.QPoint_ITF) {
	defer qt.Recovering("QCursor::setPos")

	C.QCursor_QCursor_SetPos3(core.PointerFromQPoint(p))
}

func (ptr *QCursor) SetPos3(p core.QPoint_ITF) {
	defer qt.Recovering("QCursor::setPos")

	C.QCursor_QCursor_SetPos3(core.PointerFromQPoint(p))
}

func (ptr *QCursor) SetShape(shape core.Qt__CursorShape) {
	defer qt.Recovering("QCursor::setShape")

	if ptr.Pointer() != nil {
		C.QCursor_SetShape(ptr.Pointer(), C.int(shape))
	}
}

func (ptr *QCursor) Shape() core.Qt__CursorShape {
	defer qt.Recovering("QCursor::shape")

	if ptr.Pointer() != nil {
		return core.Qt__CursorShape(C.QCursor_Shape(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCursor) DestroyQCursor() {
	defer qt.Recovering("QCursor::~QCursor")

	if ptr.Pointer() != nil {
		C.QCursor_DestroyQCursor(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QDesktopServices struct {
	ptr unsafe.Pointer
}

type QDesktopServices_ITF interface {
	QDesktopServices_PTR() *QDesktopServices
}

func (p *QDesktopServices) QDesktopServices_PTR() *QDesktopServices {
	return p
}

func (p *QDesktopServices) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QDesktopServices) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQDesktopServices(ptr QDesktopServices_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDesktopServices_PTR().Pointer()
	}
	return nil
}

func NewQDesktopServicesFromPointer(ptr unsafe.Pointer) *QDesktopServices {
	var n = new(QDesktopServices)
	n.SetPointer(ptr)
	return n
}

func newQDesktopServicesFromPointer(ptr unsafe.Pointer) *QDesktopServices {
	var n = NewQDesktopServicesFromPointer(ptr)
	return n
}

func QDesktopServices_OpenUrl(url core.QUrl_ITF) bool {
	defer qt.Recovering("QDesktopServices::openUrl")

	return C.QDesktopServices_QDesktopServices_OpenUrl(core.PointerFromQUrl(url)) != 0
}

func (ptr *QDesktopServices) OpenUrl(url core.QUrl_ITF) bool {
	defer qt.Recovering("QDesktopServices::openUrl")

	return C.QDesktopServices_QDesktopServices_OpenUrl(core.PointerFromQUrl(url)) != 0
}

func QDesktopServices_SetUrlHandler(scheme string, receiver core.QObject_ITF, method string) {
	defer qt.Recovering("QDesktopServices::setUrlHandler")

	C.QDesktopServices_QDesktopServices_SetUrlHandler(C.CString(scheme), core.PointerFromQObject(receiver), C.CString(method))
}

func (ptr *QDesktopServices) SetUrlHandler(scheme string, receiver core.QObject_ITF, method string) {
	defer qt.Recovering("QDesktopServices::setUrlHandler")

	C.QDesktopServices_QDesktopServices_SetUrlHandler(C.CString(scheme), core.PointerFromQObject(receiver), C.CString(method))
}

func QDesktopServices_UnsetUrlHandler(scheme string) {
	defer qt.Recovering("QDesktopServices::unsetUrlHandler")

	C.QDesktopServices_QDesktopServices_UnsetUrlHandler(C.CString(scheme))
}

func (ptr *QDesktopServices) UnsetUrlHandler(scheme string) {
	defer qt.Recovering("QDesktopServices::unsetUrlHandler")

	C.QDesktopServices_QDesktopServices_UnsetUrlHandler(C.CString(scheme))
}

//QDoubleValidator::Notation
type QDoubleValidator__Notation int64

const (
	QDoubleValidator__StandardNotation   = QDoubleValidator__Notation(0)
	QDoubleValidator__ScientificNotation = QDoubleValidator__Notation(1)
)

type QDoubleValidator struct {
	QValidator
}

type QDoubleValidator_ITF interface {
	QValidator_ITF
	QDoubleValidator_PTR() *QDoubleValidator
}

func (p *QDoubleValidator) QDoubleValidator_PTR() *QDoubleValidator {
	return p
}

func (p *QDoubleValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QValidator_PTR().Pointer()
	}
	return nil
}

func (p *QDoubleValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QValidator_PTR().SetPointer(ptr)
	}
}

func PointerFromQDoubleValidator(ptr QDoubleValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDoubleValidator_PTR().Pointer()
	}
	return nil
}

func NewQDoubleValidatorFromPointer(ptr unsafe.Pointer) *QDoubleValidator {
	var n = new(QDoubleValidator)
	n.SetPointer(ptr)
	return n
}

func newQDoubleValidatorFromPointer(ptr unsafe.Pointer) *QDoubleValidator {
	var n = NewQDoubleValidatorFromPointer(ptr)
	for len(n.ObjectName()) < len("QDoubleValidator_") {
		n.SetObjectName("QDoubleValidator_" + qt.Identifier())
	}
	return n
}

func (ptr *QDoubleValidator) Notation() QDoubleValidator__Notation {
	defer qt.Recovering("QDoubleValidator::notation")

	if ptr.Pointer() != nil {
		return QDoubleValidator__Notation(C.QDoubleValidator_Notation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDoubleValidator) SetDecimals(vin int) {
	defer qt.Recovering("QDoubleValidator::setDecimals")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetDecimals(ptr.Pointer(), C.int(vin))
	}
}

func (ptr *QDoubleValidator) SetNotation(vno QDoubleValidator__Notation) {
	defer qt.Recovering("QDoubleValidator::setNotation")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetNotation(ptr.Pointer(), C.int(vno))
	}
}

//export callbackQDoubleValidator_Validate
func callbackQDoubleValidator_Validate(ptr unsafe.Pointer, ptrName *C.char, input *C.char, pos C.int) C.int {
	defer qt.Recovering("callback QDoubleValidator::validate")

	if signal := qt.GetSignal(C.GoString(ptrName), "validate"); signal != nil {
		return C.int(signal.(func(string, int) QValidator__State)(C.GoString(input), int(pos)))
	}

	return C.int(NewQDoubleValidatorFromPointer(ptr).ValidateDefault(C.GoString(input), int(pos)))
}

func (ptr *QDoubleValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	defer qt.Recovering("connect QDoubleValidator::validate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "validate", f)
	}
}

func (ptr *QDoubleValidator) DisconnectValidate() {
	defer qt.Recovering("disconnect QDoubleValidator::validate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "validate")
	}
}

func (ptr *QDoubleValidator) Validate(input string, pos int) QValidator__State {
	defer qt.Recovering("QDoubleValidator::validate")

	if ptr.Pointer() != nil {

	}
	return 0
}

func (ptr *QDoubleValidator) ValidateDefault(input string, pos int) QValidator__State {
	defer qt.Recovering("QDoubleValidator::validate")

	if ptr.Pointer() != nil {

	}
	return 0
}

func NewQDoubleValidator(parent core.QObject_ITF) *QDoubleValidator {
	defer qt.Recovering("QDoubleValidator::QDoubleValidator")

	return newQDoubleValidatorFromPointer(C.QDoubleValidator_NewQDoubleValidator(core.PointerFromQObject(parent)))
}

func (ptr *QDoubleValidator) Decimals() int {
	defer qt.Recovering("QDoubleValidator::decimals")

	if ptr.Pointer() != nil {
		return int(C.QDoubleValidator_Decimals(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDoubleValidator) DestroyQDoubleValidator() {
	defer qt.Recovering("QDoubleValidator::~QDoubleValidator")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_DestroyQDoubleValidator(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQDoubleValidator_Fixup
func callbackQDoubleValidator_Fixup(ptr unsafe.Pointer, ptrName *C.char, input *C.char) {
	defer qt.Recovering("callback QDoubleValidator::fixup")

	if signal := qt.GetSignal(C.GoString(ptrName), "fixup"); signal != nil {
		signal.(func(string))(C.GoString(input))
	} else {
		NewQDoubleValidatorFromPointer(ptr).FixupDefault(C.GoString(input))
	}
}

func (ptr *QDoubleValidator) ConnectFixup(f func(input string)) {
	defer qt.Recovering("connect QDoubleValidator::fixup")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "fixup", f)
	}
}

func (ptr *QDoubleValidator) DisconnectFixup() {
	defer qt.Recovering("disconnect QDoubleValidator::fixup")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "fixup")
	}
}

func (ptr *QDoubleValidator) Fixup(input string) {
	defer qt.Recovering("QDoubleValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

func (ptr *QDoubleValidator) FixupDefault(input string) {
	defer qt.Recovering("QDoubleValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

//export callbackQDoubleValidator_TimerEvent
func callbackQDoubleValidator_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QDoubleValidator::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQDoubleValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QDoubleValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QDoubleValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QDoubleValidator) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QDoubleValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QDoubleValidator) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QDoubleValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QDoubleValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QDoubleValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQDoubleValidator_ChildEvent
func callbackQDoubleValidator_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QDoubleValidator::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQDoubleValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QDoubleValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QDoubleValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QDoubleValidator) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QDoubleValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QDoubleValidator) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QDoubleValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QDoubleValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QDoubleValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQDoubleValidator_ConnectNotify
func callbackQDoubleValidator_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QDoubleValidator::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDoubleValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDoubleValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QDoubleValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QDoubleValidator) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QDoubleValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QDoubleValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QDoubleValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QDoubleValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QDoubleValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDoubleValidator_CustomEvent
func callbackQDoubleValidator_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QDoubleValidator::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQDoubleValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QDoubleValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QDoubleValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QDoubleValidator) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QDoubleValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QDoubleValidator) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QDoubleValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QDoubleValidator) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QDoubleValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQDoubleValidator_DeleteLater
func callbackQDoubleValidator_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QDoubleValidator::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QDoubleValidator) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QDoubleValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QDoubleValidator) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QDoubleValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QDoubleValidator) DeleteLater() {
	defer qt.Recovering("QDoubleValidator::deleteLater")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQDoubleValidator_DisconnectNotify
func callbackQDoubleValidator_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QDoubleValidator::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDoubleValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDoubleValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QDoubleValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QDoubleValidator) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QDoubleValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QDoubleValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QDoubleValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QDoubleValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QDoubleValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QDoubleValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDoubleValidator_Event
func callbackQDoubleValidator_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QDoubleValidator::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQDoubleValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QDoubleValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QDoubleValidator::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QDoubleValidator) DisconnectEvent() {
	defer qt.Recovering("disconnect QDoubleValidator::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QDoubleValidator) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QDoubleValidator::event")

	if ptr.Pointer() != nil {
		return C.QDoubleValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QDoubleValidator) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QDoubleValidator::event")

	if ptr.Pointer() != nil {
		return C.QDoubleValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQDoubleValidator_EventFilter
func callbackQDoubleValidator_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QDoubleValidator::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQDoubleValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QDoubleValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QDoubleValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QDoubleValidator) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QDoubleValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QDoubleValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QDoubleValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QDoubleValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QDoubleValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QDoubleValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QDoubleValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQDoubleValidator_MetaObject
func callbackQDoubleValidator_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QDoubleValidator::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQDoubleValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QDoubleValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QDoubleValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QDoubleValidator) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QDoubleValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QDoubleValidator) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QDoubleValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QDoubleValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDoubleValidator) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QDoubleValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QDoubleValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QDrag struct {
	core.QObject
}

type QDrag_ITF interface {
	core.QObject_ITF
	QDrag_PTR() *QDrag
}

func (p *QDrag) QDrag_PTR() *QDrag {
	return p
}

func (p *QDrag) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QDrag) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQDrag(ptr QDrag_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDrag_PTR().Pointer()
	}
	return nil
}

func NewQDragFromPointer(ptr unsafe.Pointer) *QDrag {
	var n = new(QDrag)
	n.SetPointer(ptr)
	return n
}

func newQDragFromPointer(ptr unsafe.Pointer) *QDrag {
	var n = NewQDragFromPointer(ptr)
	for len(n.ObjectName()) < len("QDrag_") {
		n.SetObjectName("QDrag_" + qt.Identifier())
	}
	return n
}

func NewQDrag(dragSource core.QObject_ITF) *QDrag {
	defer qt.Recovering("QDrag::QDrag")

	return newQDragFromPointer(C.QDrag_NewQDrag(core.PointerFromQObject(dragSource)))
}

//export callbackQDrag_ActionChanged
func callbackQDrag_ActionChanged(ptr unsafe.Pointer, ptrName *C.char, action C.int) {
	defer qt.Recovering("callback QDrag::actionChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "actionChanged"); signal != nil {
		signal.(func(core.Qt__DropAction))(core.Qt__DropAction(action))
	}

}

func (ptr *QDrag) ConnectActionChanged(f func(action core.Qt__DropAction)) {
	defer qt.Recovering("connect QDrag::actionChanged")

	if ptr.Pointer() != nil {
		C.QDrag_ConnectActionChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "actionChanged", f)
	}
}

func (ptr *QDrag) DisconnectActionChanged() {
	defer qt.Recovering("disconnect QDrag::actionChanged")

	if ptr.Pointer() != nil {
		C.QDrag_DisconnectActionChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "actionChanged")
	}
}

func (ptr *QDrag) ActionChanged(action core.Qt__DropAction) {
	defer qt.Recovering("QDrag::actionChanged")

	if ptr.Pointer() != nil {
		C.QDrag_ActionChanged(ptr.Pointer(), C.int(action))
	}
}

func (ptr *QDrag) DefaultAction() core.Qt__DropAction {
	defer qt.Recovering("QDrag::defaultAction")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_DefaultAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDrag) DragCursor(action core.Qt__DropAction) *QPixmap {
	defer qt.Recovering("QDrag::dragCursor")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QDrag_DragCursor(ptr.Pointer(), C.int(action)))
	}
	return nil
}

func (ptr *QDrag) Exec(supportedActions core.Qt__DropAction) core.Qt__DropAction {
	defer qt.Recovering("QDrag::exec")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_Exec(ptr.Pointer(), C.int(supportedActions)))
	}
	return 0
}

func (ptr *QDrag) Exec2(supportedActions core.Qt__DropAction, defaultDropAction core.Qt__DropAction) core.Qt__DropAction {
	defer qt.Recovering("QDrag::exec")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_Exec2(ptr.Pointer(), C.int(supportedActions), C.int(defaultDropAction)))
	}
	return 0
}

func (ptr *QDrag) HotSpot() *core.QPoint {
	defer qt.Recovering("QDrag::hotSpot")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QDrag_HotSpot(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDrag) MimeData() *core.QMimeData {
	defer qt.Recovering("QDrag::mimeData")

	if ptr.Pointer() != nil {
		return core.NewQMimeDataFromPointer(C.QDrag_MimeData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDrag) Pixmap() *QPixmap {
	defer qt.Recovering("QDrag::pixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QDrag_Pixmap(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDrag) SetDragCursor(cursor QPixmap_ITF, action core.Qt__DropAction) {
	defer qt.Recovering("QDrag::setDragCursor")

	if ptr.Pointer() != nil {
		C.QDrag_SetDragCursor(ptr.Pointer(), PointerFromQPixmap(cursor), C.int(action))
	}
}

func (ptr *QDrag) SetHotSpot(hotspot core.QPoint_ITF) {
	defer qt.Recovering("QDrag::setHotSpot")

	if ptr.Pointer() != nil {
		C.QDrag_SetHotSpot(ptr.Pointer(), core.PointerFromQPoint(hotspot))
	}
}

func (ptr *QDrag) SetMimeData(data core.QMimeData_ITF) {
	defer qt.Recovering("QDrag::setMimeData")

	if ptr.Pointer() != nil {
		C.QDrag_SetMimeData(ptr.Pointer(), core.PointerFromQMimeData(data))
	}
}

func (ptr *QDrag) SetPixmap(pixmap QPixmap_ITF) {
	defer qt.Recovering("QDrag::setPixmap")

	if ptr.Pointer() != nil {
		C.QDrag_SetPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QDrag) Source() *core.QObject {
	defer qt.Recovering("QDrag::source")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QDrag_Source(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDrag) SupportedActions() core.Qt__DropAction {
	defer qt.Recovering("QDrag::supportedActions")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_SupportedActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDrag) Target() *core.QObject {
	defer qt.Recovering("QDrag::target")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QDrag_Target(ptr.Pointer()))
	}
	return nil
}

//export callbackQDrag_TargetChanged
func callbackQDrag_TargetChanged(ptr unsafe.Pointer, ptrName *C.char, newTarget unsafe.Pointer) {
	defer qt.Recovering("callback QDrag::targetChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "targetChanged"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(newTarget))
	}

}

func (ptr *QDrag) ConnectTargetChanged(f func(newTarget *core.QObject)) {
	defer qt.Recovering("connect QDrag::targetChanged")

	if ptr.Pointer() != nil {
		C.QDrag_ConnectTargetChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "targetChanged", f)
	}
}

func (ptr *QDrag) DisconnectTargetChanged() {
	defer qt.Recovering("disconnect QDrag::targetChanged")

	if ptr.Pointer() != nil {
		C.QDrag_DisconnectTargetChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "targetChanged")
	}
}

func (ptr *QDrag) TargetChanged(newTarget core.QObject_ITF) {
	defer qt.Recovering("QDrag::targetChanged")

	if ptr.Pointer() != nil {
		C.QDrag_TargetChanged(ptr.Pointer(), core.PointerFromQObject(newTarget))
	}
}

func (ptr *QDrag) DestroyQDrag() {
	defer qt.Recovering("QDrag::~QDrag")

	if ptr.Pointer() != nil {
		C.QDrag_DestroyQDrag(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQDrag_TimerEvent
func callbackQDrag_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QDrag::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQDragFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QDrag) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QDrag::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QDrag) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QDrag::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QDrag) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QDrag::timerEvent")

	if ptr.Pointer() != nil {
		C.QDrag_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QDrag) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QDrag::timerEvent")

	if ptr.Pointer() != nil {
		C.QDrag_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQDrag_ChildEvent
func callbackQDrag_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QDrag::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQDragFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QDrag) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QDrag::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QDrag) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QDrag::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QDrag) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QDrag::childEvent")

	if ptr.Pointer() != nil {
		C.QDrag_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QDrag) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QDrag::childEvent")

	if ptr.Pointer() != nil {
		C.QDrag_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQDrag_ConnectNotify
func callbackQDrag_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QDrag::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDragFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDrag) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QDrag::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QDrag) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QDrag::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QDrag) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QDrag::connectNotify")

	if ptr.Pointer() != nil {
		C.QDrag_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QDrag) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QDrag::connectNotify")

	if ptr.Pointer() != nil {
		C.QDrag_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDrag_CustomEvent
func callbackQDrag_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QDrag::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQDragFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QDrag) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QDrag::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QDrag) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QDrag::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QDrag) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QDrag::customEvent")

	if ptr.Pointer() != nil {
		C.QDrag_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QDrag) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QDrag::customEvent")

	if ptr.Pointer() != nil {
		C.QDrag_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQDrag_DeleteLater
func callbackQDrag_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QDrag::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QDrag) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QDrag::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QDrag) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QDrag::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QDrag) DeleteLater() {
	defer qt.Recovering("QDrag::deleteLater")

	if ptr.Pointer() != nil {
		C.QDrag_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQDrag_DisconnectNotify
func callbackQDrag_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QDrag::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDragFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDrag) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QDrag::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QDrag) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QDrag::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QDrag) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QDrag::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QDrag_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QDrag) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QDrag::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QDrag_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDrag_Event
func callbackQDrag_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QDrag::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQDragFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QDrag) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QDrag::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QDrag) DisconnectEvent() {
	defer qt.Recovering("disconnect QDrag::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QDrag) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QDrag::event")

	if ptr.Pointer() != nil {
		return C.QDrag_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QDrag) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QDrag::event")

	if ptr.Pointer() != nil {
		return C.QDrag_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQDrag_EventFilter
func callbackQDrag_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QDrag::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQDragFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QDrag) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QDrag::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QDrag) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QDrag::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QDrag) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QDrag::eventFilter")

	if ptr.Pointer() != nil {
		return C.QDrag_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QDrag) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QDrag::eventFilter")

	if ptr.Pointer() != nil {
		return C.QDrag_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQDrag_MetaObject
func callbackQDrag_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QDrag::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQDragFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QDrag) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QDrag::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QDrag) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QDrag::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QDrag) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QDrag::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QDrag_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDrag) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QDrag::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QDrag_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QDragEnterEvent struct {
	QDragMoveEvent
}

type QDragEnterEvent_ITF interface {
	QDragMoveEvent_ITF
	QDragEnterEvent_PTR() *QDragEnterEvent
}

func (p *QDragEnterEvent) QDragEnterEvent_PTR() *QDragEnterEvent {
	return p
}

func (p *QDragEnterEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QDragMoveEvent_PTR().Pointer()
	}
	return nil
}

func (p *QDragEnterEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QDragMoveEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQDragEnterEvent(ptr QDragEnterEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragEnterEvent_PTR().Pointer()
	}
	return nil
}

func NewQDragEnterEventFromPointer(ptr unsafe.Pointer) *QDragEnterEvent {
	var n = new(QDragEnterEvent)
	n.SetPointer(ptr)
	return n
}

func newQDragEnterEventFromPointer(ptr unsafe.Pointer) *QDragEnterEvent {
	var n = NewQDragEnterEventFromPointer(ptr)
	return n
}

func NewQDragEnterEvent(point core.QPoint_ITF, actions core.Qt__DropAction, data core.QMimeData_ITF, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QDragEnterEvent {
	defer qt.Recovering("QDragEnterEvent::QDragEnterEvent")

	return newQDragEnterEventFromPointer(C.QDragEnterEvent_NewQDragEnterEvent(core.PointerFromQPoint(point), C.int(actions), core.PointerFromQMimeData(data), C.int(buttons), C.int(modifiers)))
}

type QDragLeaveEvent struct {
	core.QEvent
}

type QDragLeaveEvent_ITF interface {
	core.QEvent_ITF
	QDragLeaveEvent_PTR() *QDragLeaveEvent
}

func (p *QDragLeaveEvent) QDragLeaveEvent_PTR() *QDragLeaveEvent {
	return p
}

func (p *QDragLeaveEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QDragLeaveEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQDragLeaveEvent(ptr QDragLeaveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragLeaveEvent_PTR().Pointer()
	}
	return nil
}

func NewQDragLeaveEventFromPointer(ptr unsafe.Pointer) *QDragLeaveEvent {
	var n = new(QDragLeaveEvent)
	n.SetPointer(ptr)
	return n
}

func newQDragLeaveEventFromPointer(ptr unsafe.Pointer) *QDragLeaveEvent {
	var n = NewQDragLeaveEventFromPointer(ptr)
	return n
}

func NewQDragLeaveEvent() *QDragLeaveEvent {
	defer qt.Recovering("QDragLeaveEvent::QDragLeaveEvent")

	return newQDragLeaveEventFromPointer(C.QDragLeaveEvent_NewQDragLeaveEvent())
}

type QDragMoveEvent struct {
	QDropEvent
}

type QDragMoveEvent_ITF interface {
	QDropEvent_ITF
	QDragMoveEvent_PTR() *QDragMoveEvent
}

func (p *QDragMoveEvent) QDragMoveEvent_PTR() *QDragMoveEvent {
	return p
}

func (p *QDragMoveEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QDropEvent_PTR().Pointer()
	}
	return nil
}

func (p *QDragMoveEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QDropEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQDragMoveEvent(ptr QDragMoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragMoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQDragMoveEventFromPointer(ptr unsafe.Pointer) *QDragMoveEvent {
	var n = new(QDragMoveEvent)
	n.SetPointer(ptr)
	return n
}

func newQDragMoveEventFromPointer(ptr unsafe.Pointer) *QDragMoveEvent {
	var n = NewQDragMoveEventFromPointer(ptr)
	return n
}

func NewQDragMoveEvent(pos core.QPoint_ITF, actions core.Qt__DropAction, data core.QMimeData_ITF, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, ty core.QEvent__Type) *QDragMoveEvent {
	defer qt.Recovering("QDragMoveEvent::QDragMoveEvent")

	return newQDragMoveEventFromPointer(C.QDragMoveEvent_NewQDragMoveEvent(core.PointerFromQPoint(pos), C.int(actions), core.PointerFromQMimeData(data), C.int(buttons), C.int(modifiers), C.int(ty)))
}

func (ptr *QDragMoveEvent) Accept2() {
	defer qt.Recovering("QDragMoveEvent::accept")

	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Accept2(ptr.Pointer())
	}
}

func (ptr *QDragMoveEvent) Accept(rectangle core.QRect_ITF) {
	defer qt.Recovering("QDragMoveEvent::accept")

	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Accept(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QDragMoveEvent) AnswerRect() *core.QRect {
	defer qt.Recovering("QDragMoveEvent::answerRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QDragMoveEvent_AnswerRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDragMoveEvent) Ignore2() {
	defer qt.Recovering("QDragMoveEvent::ignore")

	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Ignore2(ptr.Pointer())
	}
}

func (ptr *QDragMoveEvent) Ignore(rectangle core.QRect_ITF) {
	defer qt.Recovering("QDragMoveEvent::ignore")

	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Ignore(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QDragMoveEvent) DestroyQDragMoveEvent() {
	defer qt.Recovering("QDragMoveEvent::~QDragMoveEvent")

	if ptr.Pointer() != nil {
		C.QDragMoveEvent_DestroyQDragMoveEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QDropEvent struct {
	core.QEvent
}

type QDropEvent_ITF interface {
	core.QEvent_ITF
	QDropEvent_PTR() *QDropEvent
}

func (p *QDropEvent) QDropEvent_PTR() *QDropEvent {
	return p
}

func (p *QDropEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QDropEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQDropEvent(ptr QDropEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDropEvent_PTR().Pointer()
	}
	return nil
}

func NewQDropEventFromPointer(ptr unsafe.Pointer) *QDropEvent {
	var n = new(QDropEvent)
	n.SetPointer(ptr)
	return n
}

func newQDropEventFromPointer(ptr unsafe.Pointer) *QDropEvent {
	var n = NewQDropEventFromPointer(ptr)
	return n
}

func (ptr *QDropEvent) SetDropAction(action core.Qt__DropAction) {
	defer qt.Recovering("QDropEvent::setDropAction")

	if ptr.Pointer() != nil {
		C.QDropEvent_SetDropAction(ptr.Pointer(), C.int(action))
	}
}

func NewQDropEvent(pos core.QPointF_ITF, actions core.Qt__DropAction, data core.QMimeData_ITF, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, ty core.QEvent__Type) *QDropEvent {
	defer qt.Recovering("QDropEvent::QDropEvent")

	return newQDropEventFromPointer(C.QDropEvent_NewQDropEvent(core.PointerFromQPointF(pos), C.int(actions), core.PointerFromQMimeData(data), C.int(buttons), C.int(modifiers), C.int(ty)))
}

func (ptr *QDropEvent) AcceptProposedAction() {
	defer qt.Recovering("QDropEvent::acceptProposedAction")

	if ptr.Pointer() != nil {
		C.QDropEvent_AcceptProposedAction(ptr.Pointer())
	}
}

func (ptr *QDropEvent) DropAction() core.Qt__DropAction {
	defer qt.Recovering("QDropEvent::dropAction")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_DropAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) KeyboardModifiers() core.Qt__KeyboardModifier {
	defer qt.Recovering("QDropEvent::keyboardModifiers")

	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QDropEvent_KeyboardModifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) MimeData() *core.QMimeData {
	defer qt.Recovering("QDropEvent::mimeData")

	if ptr.Pointer() != nil {
		return core.NewQMimeDataFromPointer(C.QDropEvent_MimeData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDropEvent) MouseButtons() core.Qt__MouseButton {
	defer qt.Recovering("QDropEvent::mouseButtons")

	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QDropEvent_MouseButtons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) Pos() *core.QPoint {
	defer qt.Recovering("QDropEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QDropEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDropEvent) PosF() *core.QPointF {
	defer qt.Recovering("QDropEvent::posF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QDropEvent_PosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDropEvent) PossibleActions() core.Qt__DropAction {
	defer qt.Recovering("QDropEvent::possibleActions")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_PossibleActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) ProposedAction() core.Qt__DropAction {
	defer qt.Recovering("QDropEvent::proposedAction")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_ProposedAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) Source() *core.QObject {
	defer qt.Recovering("QDropEvent::source")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QDropEvent_Source(ptr.Pointer()))
	}
	return nil
}

type QEnterEvent struct {
	core.QEvent
}

type QEnterEvent_ITF interface {
	core.QEvent_ITF
	QEnterEvent_PTR() *QEnterEvent
}

func (p *QEnterEvent) QEnterEvent_PTR() *QEnterEvent {
	return p
}

func (p *QEnterEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QEnterEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQEnterEvent(ptr QEnterEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QEnterEvent_PTR().Pointer()
	}
	return nil
}

func NewQEnterEventFromPointer(ptr unsafe.Pointer) *QEnterEvent {
	var n = new(QEnterEvent)
	n.SetPointer(ptr)
	return n
}

func newQEnterEventFromPointer(ptr unsafe.Pointer) *QEnterEvent {
	var n = NewQEnterEventFromPointer(ptr)
	return n
}

func NewQEnterEvent(localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF) *QEnterEvent {
	defer qt.Recovering("QEnterEvent::QEnterEvent")

	return newQEnterEventFromPointer(C.QEnterEvent_NewQEnterEvent(core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos)))
}

func (ptr *QEnterEvent) GlobalPos() *core.QPoint {
	defer qt.Recovering("QEnterEvent::globalPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QEnterEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) GlobalX() int {
	defer qt.Recovering("QEnterEvent::globalX")

	if ptr.Pointer() != nil {
		return int(C.QEnterEvent_GlobalX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QEnterEvent) GlobalY() int {
	defer qt.Recovering("QEnterEvent::globalY")

	if ptr.Pointer() != nil {
		return int(C.QEnterEvent_GlobalY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QEnterEvent) LocalPos() *core.QPointF {
	defer qt.Recovering("QEnterEvent::localPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QEnterEvent_LocalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) Pos() *core.QPoint {
	defer qt.Recovering("QEnterEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QEnterEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) ScreenPos() *core.QPointF {
	defer qt.Recovering("QEnterEvent::screenPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QEnterEvent_ScreenPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) WindowPos() *core.QPointF {
	defer qt.Recovering("QEnterEvent::windowPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QEnterEvent_WindowPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) X() int {
	defer qt.Recovering("QEnterEvent::x")

	if ptr.Pointer() != nil {
		return int(C.QEnterEvent_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QEnterEvent) Y() int {
	defer qt.Recovering("QEnterEvent::y")

	if ptr.Pointer() != nil {
		return int(C.QEnterEvent_Y(ptr.Pointer()))
	}
	return 0
}

type QExposeEvent struct {
	core.QEvent
}

type QExposeEvent_ITF interface {
	core.QEvent_ITF
	QExposeEvent_PTR() *QExposeEvent
}

func (p *QExposeEvent) QExposeEvent_PTR() *QExposeEvent {
	return p
}

func (p *QExposeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QExposeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQExposeEvent(ptr QExposeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QExposeEvent_PTR().Pointer()
	}
	return nil
}

func NewQExposeEventFromPointer(ptr unsafe.Pointer) *QExposeEvent {
	var n = new(QExposeEvent)
	n.SetPointer(ptr)
	return n
}

func newQExposeEventFromPointer(ptr unsafe.Pointer) *QExposeEvent {
	var n = NewQExposeEventFromPointer(ptr)
	return n
}

func NewQExposeEvent(exposeRegion QRegion_ITF) *QExposeEvent {
	defer qt.Recovering("QExposeEvent::QExposeEvent")

	return newQExposeEventFromPointer(C.QExposeEvent_NewQExposeEvent(PointerFromQRegion(exposeRegion)))
}

func (ptr *QExposeEvent) Region() *QRegion {
	defer qt.Recovering("QExposeEvent::region")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QExposeEvent_Region(ptr.Pointer()))
	}
	return nil
}

type QFileOpenEvent struct {
	core.QEvent
}

type QFileOpenEvent_ITF interface {
	core.QEvent_ITF
	QFileOpenEvent_PTR() *QFileOpenEvent
}

func (p *QFileOpenEvent) QFileOpenEvent_PTR() *QFileOpenEvent {
	return p
}

func (p *QFileOpenEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QFileOpenEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQFileOpenEvent(ptr QFileOpenEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFileOpenEvent_PTR().Pointer()
	}
	return nil
}

func NewQFileOpenEventFromPointer(ptr unsafe.Pointer) *QFileOpenEvent {
	var n = new(QFileOpenEvent)
	n.SetPointer(ptr)
	return n
}

func newQFileOpenEventFromPointer(ptr unsafe.Pointer) *QFileOpenEvent {
	var n = NewQFileOpenEventFromPointer(ptr)
	return n
}

func (ptr *QFileOpenEvent) OpenFile(file core.QFile_ITF, flags core.QIODevice__OpenModeFlag) bool {
	defer qt.Recovering("QFileOpenEvent::openFile")

	if ptr.Pointer() != nil {
		return C.QFileOpenEvent_OpenFile(ptr.Pointer(), core.PointerFromQFile(file), C.int(flags)) != 0
	}
	return false
}

func (ptr *QFileOpenEvent) File() string {
	defer qt.Recovering("QFileOpenEvent::file")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFileOpenEvent_File(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileOpenEvent) Url() *core.QUrl {
	defer qt.Recovering("QFileOpenEvent::url")

	if ptr.Pointer() != nil {
		return core.NewQUrlFromPointer(C.QFileOpenEvent_Url(ptr.Pointer()))
	}
	return nil
}

type QFocusEvent struct {
	core.QEvent
}

type QFocusEvent_ITF interface {
	core.QEvent_ITF
	QFocusEvent_PTR() *QFocusEvent
}

func (p *QFocusEvent) QFocusEvent_PTR() *QFocusEvent {
	return p
}

func (p *QFocusEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QFocusEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQFocusEvent(ptr QFocusEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFocusEvent_PTR().Pointer()
	}
	return nil
}

func NewQFocusEventFromPointer(ptr unsafe.Pointer) *QFocusEvent {
	var n = new(QFocusEvent)
	n.SetPointer(ptr)
	return n
}

func newQFocusEventFromPointer(ptr unsafe.Pointer) *QFocusEvent {
	var n = NewQFocusEventFromPointer(ptr)
	return n
}

func NewQFocusEvent(ty core.QEvent__Type, reason core.Qt__FocusReason) *QFocusEvent {
	defer qt.Recovering("QFocusEvent::QFocusEvent")

	return newQFocusEventFromPointer(C.QFocusEvent_NewQFocusEvent(C.int(ty), C.int(reason)))
}

func (ptr *QFocusEvent) GotFocus() bool {
	defer qt.Recovering("QFocusEvent::gotFocus")

	if ptr.Pointer() != nil {
		return C.QFocusEvent_GotFocus(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFocusEvent) LostFocus() bool {
	defer qt.Recovering("QFocusEvent::lostFocus")

	if ptr.Pointer() != nil {
		return C.QFocusEvent_LostFocus(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFocusEvent) Reason() core.Qt__FocusReason {
	defer qt.Recovering("QFocusEvent::reason")

	if ptr.Pointer() != nil {
		return core.Qt__FocusReason(C.QFocusEvent_Reason(ptr.Pointer()))
	}
	return 0
}

//QFont::Capitalization
type QFont__Capitalization int64

const (
	QFont__MixedCase    = QFont__Capitalization(0)
	QFont__AllUppercase = QFont__Capitalization(1)
	QFont__AllLowercase = QFont__Capitalization(2)
	QFont__SmallCaps    = QFont__Capitalization(3)
	QFont__Capitalize   = QFont__Capitalization(4)
)

//QFont::HintingPreference
type QFont__HintingPreference int64

const (
	QFont__PreferDefaultHinting  = QFont__HintingPreference(0)
	QFont__PreferNoHinting       = QFont__HintingPreference(1)
	QFont__PreferVerticalHinting = QFont__HintingPreference(2)
	QFont__PreferFullHinting     = QFont__HintingPreference(3)
)

//QFont::SpacingType
type QFont__SpacingType int64

const (
	QFont__PercentageSpacing = QFont__SpacingType(0)
	QFont__AbsoluteSpacing   = QFont__SpacingType(1)
)

//QFont::Stretch
type QFont__Stretch int64

const (
	QFont__UltraCondensed = QFont__Stretch(50)
	QFont__ExtraCondensed = QFont__Stretch(62)
	QFont__Condensed      = QFont__Stretch(75)
	QFont__SemiCondensed  = QFont__Stretch(87)
	QFont__Unstretched    = QFont__Stretch(100)
	QFont__SemiExpanded   = QFont__Stretch(112)
	QFont__Expanded       = QFont__Stretch(125)
	QFont__ExtraExpanded  = QFont__Stretch(150)
	QFont__UltraExpanded  = QFont__Stretch(200)
)

//QFont::Style
type QFont__Style int64

var (
	QFont__StyleNormal  = QFont__Style(0)
	QFont__StyleItalic  = QFont__Style(1)
	QFont__StyleOblique = QFont__Style(2)
)

//QFont::StyleHint
type QFont__StyleHint int64

var (
	QFont__Helvetica  = QFont__StyleHint(0)
	QFont__SansSerif  = QFont__StyleHint(QFont__Helvetica)
	QFont__Times      = QFont__StyleHint(C.QFont_Times_Type())
	QFont__Serif      = QFont__StyleHint(QFont__Times)
	QFont__Courier    = QFont__StyleHint(C.QFont_Courier_Type())
	QFont__TypeWriter = QFont__StyleHint(QFont__Courier)
	QFont__OldEnglish = QFont__StyleHint(C.QFont_OldEnglish_Type())
	QFont__Decorative = QFont__StyleHint(QFont__OldEnglish)
	QFont__System     = QFont__StyleHint(C.QFont_System_Type())
	QFont__AnyStyle   = QFont__StyleHint(C.QFont_AnyStyle_Type())
	QFont__Cursive    = QFont__StyleHint(C.QFont_Cursive_Type())
	QFont__Monospace  = QFont__StyleHint(C.QFont_Monospace_Type())
	QFont__Fantasy    = QFont__StyleHint(C.QFont_Fantasy_Type())
)

//QFont::StyleStrategy
type QFont__StyleStrategy int64

var (
	QFont__PreferDefault       = QFont__StyleStrategy(0x0001)
	QFont__PreferBitmap        = QFont__StyleStrategy(0x0002)
	QFont__PreferDevice        = QFont__StyleStrategy(0x0004)
	QFont__PreferOutline       = QFont__StyleStrategy(0x0008)
	QFont__ForceOutline        = QFont__StyleStrategy(0x0010)
	QFont__PreferMatch         = QFont__StyleStrategy(0x0020)
	QFont__PreferQuality       = QFont__StyleStrategy(0x0040)
	QFont__PreferAntialias     = QFont__StyleStrategy(0x0080)
	QFont__NoAntialias         = QFont__StyleStrategy(0x0100)
	QFont__OpenGLCompatible    = QFont__StyleStrategy(0x0200)
	QFont__ForceIntegerMetrics = QFont__StyleStrategy(0x0400)
	QFont__NoSubpixelAntialias = QFont__StyleStrategy(0x0800)
	QFont__NoFontMerging       = QFont__StyleStrategy(0x8000)
)

//QFont::Weight
type QFont__Weight int64

const (
	QFont__Thin       = QFont__Weight(0)
	QFont__ExtraLight = QFont__Weight(12)
	QFont__Light      = QFont__Weight(25)
	QFont__Normal     = QFont__Weight(50)
	QFont__Medium     = QFont__Weight(57)
	QFont__DemiBold   = QFont__Weight(63)
	QFont__Bold       = QFont__Weight(75)
	QFont__ExtraBold  = QFont__Weight(81)
	QFont__Black      = QFont__Weight(87)
)

type QFont struct {
	ptr unsafe.Pointer
}

type QFont_ITF interface {
	QFont_PTR() *QFont
}

func (p *QFont) QFont_PTR() *QFont {
	return p
}

func (p *QFont) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFont) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFont(ptr QFont_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFont_PTR().Pointer()
	}
	return nil
}

func NewQFontFromPointer(ptr unsafe.Pointer) *QFont {
	var n = new(QFont)
	n.SetPointer(ptr)
	return n
}

func newQFontFromPointer(ptr unsafe.Pointer) *QFont {
	var n = NewQFontFromPointer(ptr)
	return n
}

func (ptr *QFont) DefaultFamily() string {
	defer qt.Recovering("QFont::defaultFamily")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFont_DefaultFamily(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) LastResortFamily() string {
	defer qt.Recovering("QFont::lastResortFamily")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFont_LastResortFamily(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) LastResortFont() string {
	defer qt.Recovering("QFont::lastResortFont")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFont_LastResortFont(ptr.Pointer()))
	}
	return ""
}

func NewQFont() *QFont {
	defer qt.Recovering("QFont::QFont")

	return newQFontFromPointer(C.QFont_NewQFont())
}

func NewQFont4(font QFont_ITF) *QFont {
	defer qt.Recovering("QFont::QFont")

	return newQFontFromPointer(C.QFont_NewQFont4(PointerFromQFont(font)))
}

func NewQFont3(font QFont_ITF, pd QPaintDevice_ITF) *QFont {
	defer qt.Recovering("QFont::QFont")

	return newQFontFromPointer(C.QFont_NewQFont3(PointerFromQFont(font), PointerFromQPaintDevice(pd)))
}

func NewQFont2(family string, pointSize int, weight int, italic bool) *QFont {
	defer qt.Recovering("QFont::QFont")

	return newQFontFromPointer(C.QFont_NewQFont2(C.CString(family), C.int(pointSize), C.int(weight), C.int(qt.GoBoolToInt(italic))))
}

func (ptr *QFont) Bold() bool {
	defer qt.Recovering("QFont::bold")

	if ptr.Pointer() != nil {
		return C.QFont_Bold(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Capitalization() QFont__Capitalization {
	defer qt.Recovering("QFont::capitalization")

	if ptr.Pointer() != nil {
		return QFont__Capitalization(C.QFont_Capitalization(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) ExactMatch() bool {
	defer qt.Recovering("QFont::exactMatch")

	if ptr.Pointer() != nil {
		return C.QFont_ExactMatch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Family() string {
	defer qt.Recovering("QFont::family")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFont_Family(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) FixedPitch() bool {
	defer qt.Recovering("QFont::fixedPitch")

	if ptr.Pointer() != nil {
		return C.QFont_FixedPitch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) FromString(descrip string) bool {
	defer qt.Recovering("QFont::fromString")

	if ptr.Pointer() != nil {
		return C.QFont_FromString(ptr.Pointer(), C.CString(descrip)) != 0
	}
	return false
}

func (ptr *QFont) HintingPreference() QFont__HintingPreference {
	defer qt.Recovering("QFont::hintingPreference")

	if ptr.Pointer() != nil {
		return QFont__HintingPreference(C.QFont_HintingPreference(ptr.Pointer()))
	}
	return 0
}

func QFont_InsertSubstitution(familyName string, substituteName string) {
	defer qt.Recovering("QFont::insertSubstitution")

	C.QFont_QFont_InsertSubstitution(C.CString(familyName), C.CString(substituteName))
}

func (ptr *QFont) InsertSubstitution(familyName string, substituteName string) {
	defer qt.Recovering("QFont::insertSubstitution")

	C.QFont_QFont_InsertSubstitution(C.CString(familyName), C.CString(substituteName))
}

func QFont_InsertSubstitutions(familyName string, substituteNames []string) {
	defer qt.Recovering("QFont::insertSubstitutions")

	C.QFont_QFont_InsertSubstitutions(C.CString(familyName), C.CString(strings.Join(substituteNames, "|")))
}

func (ptr *QFont) InsertSubstitutions(familyName string, substituteNames []string) {
	defer qt.Recovering("QFont::insertSubstitutions")

	C.QFont_QFont_InsertSubstitutions(C.CString(familyName), C.CString(strings.Join(substituteNames, "|")))
}

func (ptr *QFont) IsCopyOf(f QFont_ITF) bool {
	defer qt.Recovering("QFont::isCopyOf")

	if ptr.Pointer() != nil {
		return C.QFont_IsCopyOf(ptr.Pointer(), PointerFromQFont(f)) != 0
	}
	return false
}

func (ptr *QFont) Italic() bool {
	defer qt.Recovering("QFont::italic")

	if ptr.Pointer() != nil {
		return C.QFont_Italic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Kerning() bool {
	defer qt.Recovering("QFont::kerning")

	if ptr.Pointer() != nil {
		return C.QFont_Kerning(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Key() string {
	defer qt.Recovering("QFont::key")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFont_Key(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) LetterSpacing() float64 {
	defer qt.Recovering("QFont::letterSpacing")

	if ptr.Pointer() != nil {
		return float64(C.QFont_LetterSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) LetterSpacingType() QFont__SpacingType {
	defer qt.Recovering("QFont::letterSpacingType")

	if ptr.Pointer() != nil {
		return QFont__SpacingType(C.QFont_LetterSpacingType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) Overline() bool {
	defer qt.Recovering("QFont::overline")

	if ptr.Pointer() != nil {
		return C.QFont_Overline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) PixelSize() int {
	defer qt.Recovering("QFont::pixelSize")

	if ptr.Pointer() != nil {
		return int(C.QFont_PixelSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) PointSize() int {
	defer qt.Recovering("QFont::pointSize")

	if ptr.Pointer() != nil {
		return int(C.QFont_PointSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) PointSizeF() float64 {
	defer qt.Recovering("QFont::pointSizeF")

	if ptr.Pointer() != nil {
		return float64(C.QFont_PointSizeF(ptr.Pointer()))
	}
	return 0
}

func QFont_RemoveSubstitutions(familyName string) {
	defer qt.Recovering("QFont::removeSubstitutions")

	C.QFont_QFont_RemoveSubstitutions(C.CString(familyName))
}

func (ptr *QFont) RemoveSubstitutions(familyName string) {
	defer qt.Recovering("QFont::removeSubstitutions")

	C.QFont_QFont_RemoveSubstitutions(C.CString(familyName))
}

func (ptr *QFont) Resolve(other QFont_ITF) *QFont {
	defer qt.Recovering("QFont::resolve")

	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QFont_Resolve(ptr.Pointer(), PointerFromQFont(other)))
	}
	return nil
}

func (ptr *QFont) SetBold(enable bool) {
	defer qt.Recovering("QFont::setBold")

	if ptr.Pointer() != nil {
		C.QFont_SetBold(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QFont) SetCapitalization(caps QFont__Capitalization) {
	defer qt.Recovering("QFont::setCapitalization")

	if ptr.Pointer() != nil {
		C.QFont_SetCapitalization(ptr.Pointer(), C.int(caps))
	}
}

func (ptr *QFont) SetFamily(family string) {
	defer qt.Recovering("QFont::setFamily")

	if ptr.Pointer() != nil {
		C.QFont_SetFamily(ptr.Pointer(), C.CString(family))
	}
}

func (ptr *QFont) SetFixedPitch(enable bool) {
	defer qt.Recovering("QFont::setFixedPitch")

	if ptr.Pointer() != nil {
		C.QFont_SetFixedPitch(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QFont) SetHintingPreference(hintingPreference QFont__HintingPreference) {
	defer qt.Recovering("QFont::setHintingPreference")

	if ptr.Pointer() != nil {
		C.QFont_SetHintingPreference(ptr.Pointer(), C.int(hintingPreference))
	}
}

func (ptr *QFont) SetItalic(enable bool) {
	defer qt.Recovering("QFont::setItalic")

	if ptr.Pointer() != nil {
		C.QFont_SetItalic(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QFont) SetKerning(enable bool) {
	defer qt.Recovering("QFont::setKerning")

	if ptr.Pointer() != nil {
		C.QFont_SetKerning(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QFont) SetLetterSpacing(ty QFont__SpacingType, spacing float64) {
	defer qt.Recovering("QFont::setLetterSpacing")

	if ptr.Pointer() != nil {
		C.QFont_SetLetterSpacing(ptr.Pointer(), C.int(ty), C.double(spacing))
	}
}

func (ptr *QFont) SetOverline(enable bool) {
	defer qt.Recovering("QFont::setOverline")

	if ptr.Pointer() != nil {
		C.QFont_SetOverline(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QFont) SetPixelSize(pixelSize int) {
	defer qt.Recovering("QFont::setPixelSize")

	if ptr.Pointer() != nil {
		C.QFont_SetPixelSize(ptr.Pointer(), C.int(pixelSize))
	}
}

func (ptr *QFont) SetPointSize(pointSize int) {
	defer qt.Recovering("QFont::setPointSize")

	if ptr.Pointer() != nil {
		C.QFont_SetPointSize(ptr.Pointer(), C.int(pointSize))
	}
}

func (ptr *QFont) SetPointSizeF(pointSize float64) {
	defer qt.Recovering("QFont::setPointSizeF")

	if ptr.Pointer() != nil {
		C.QFont_SetPointSizeF(ptr.Pointer(), C.double(pointSize))
	}
}

func (ptr *QFont) SetStretch(factor int) {
	defer qt.Recovering("QFont::setStretch")

	if ptr.Pointer() != nil {
		C.QFont_SetStretch(ptr.Pointer(), C.int(factor))
	}
}

func (ptr *QFont) SetStrikeOut(enable bool) {
	defer qt.Recovering("QFont::setStrikeOut")

	if ptr.Pointer() != nil {
		C.QFont_SetStrikeOut(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QFont) SetStyle(style QFont__Style) {
	defer qt.Recovering("QFont::setStyle")

	if ptr.Pointer() != nil {
		C.QFont_SetStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QFont) SetStyleHint(hint QFont__StyleHint, strategy QFont__StyleStrategy) {
	defer qt.Recovering("QFont::setStyleHint")

	if ptr.Pointer() != nil {
		C.QFont_SetStyleHint(ptr.Pointer(), C.int(hint), C.int(strategy))
	}
}

func (ptr *QFont) SetStyleName(styleName string) {
	defer qt.Recovering("QFont::setStyleName")

	if ptr.Pointer() != nil {
		C.QFont_SetStyleName(ptr.Pointer(), C.CString(styleName))
	}
}

func (ptr *QFont) SetStyleStrategy(s QFont__StyleStrategy) {
	defer qt.Recovering("QFont::setStyleStrategy")

	if ptr.Pointer() != nil {
		C.QFont_SetStyleStrategy(ptr.Pointer(), C.int(s))
	}
}

func (ptr *QFont) SetUnderline(enable bool) {
	defer qt.Recovering("QFont::setUnderline")

	if ptr.Pointer() != nil {
		C.QFont_SetUnderline(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QFont) SetWeight(weight int) {
	defer qt.Recovering("QFont::setWeight")

	if ptr.Pointer() != nil {
		C.QFont_SetWeight(ptr.Pointer(), C.int(weight))
	}
}

func (ptr *QFont) SetWordSpacing(spacing float64) {
	defer qt.Recovering("QFont::setWordSpacing")

	if ptr.Pointer() != nil {
		C.QFont_SetWordSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QFont) Stretch() int {
	defer qt.Recovering("QFont::stretch")

	if ptr.Pointer() != nil {
		return int(C.QFont_Stretch(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) StrikeOut() bool {
	defer qt.Recovering("QFont::strikeOut")

	if ptr.Pointer() != nil {
		return C.QFont_StrikeOut(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Style() QFont__Style {
	defer qt.Recovering("QFont::style")

	if ptr.Pointer() != nil {
		return QFont__Style(C.QFont_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) StyleHint() QFont__StyleHint {
	defer qt.Recovering("QFont::styleHint")

	if ptr.Pointer() != nil {
		return QFont__StyleHint(C.QFont_StyleHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) StyleName() string {
	defer qt.Recovering("QFont::styleName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFont_StyleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) StyleStrategy() QFont__StyleStrategy {
	defer qt.Recovering("QFont::styleStrategy")

	if ptr.Pointer() != nil {
		return QFont__StyleStrategy(C.QFont_StyleStrategy(ptr.Pointer()))
	}
	return 0
}

func QFont_Substitute(familyName string) string {
	defer qt.Recovering("QFont::substitute")

	return C.GoString(C.QFont_QFont_Substitute(C.CString(familyName)))
}

func (ptr *QFont) Substitute(familyName string) string {
	defer qt.Recovering("QFont::substitute")

	return C.GoString(C.QFont_QFont_Substitute(C.CString(familyName)))
}

func QFont_Substitutes(familyName string) []string {
	defer qt.Recovering("QFont::substitutes")

	return strings.Split(C.GoString(C.QFont_QFont_Substitutes(C.CString(familyName))), "|")
}

func (ptr *QFont) Substitutes(familyName string) []string {
	defer qt.Recovering("QFont::substitutes")

	return strings.Split(C.GoString(C.QFont_QFont_Substitutes(C.CString(familyName))), "|")
}

func QFont_Substitutions() []string {
	defer qt.Recovering("QFont::substitutions")

	return strings.Split(C.GoString(C.QFont_QFont_Substitutions()), "|")
}

func (ptr *QFont) Substitutions() []string {
	defer qt.Recovering("QFont::substitutions")

	return strings.Split(C.GoString(C.QFont_QFont_Substitutions()), "|")
}

func (ptr *QFont) Swap(other QFont_ITF) {
	defer qt.Recovering("QFont::swap")

	if ptr.Pointer() != nil {
		C.QFont_Swap(ptr.Pointer(), PointerFromQFont(other))
	}
}

func (ptr *QFont) ToString() string {
	defer qt.Recovering("QFont::toString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFont_ToString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) Underline() bool {
	defer qt.Recovering("QFont::underline")

	if ptr.Pointer() != nil {
		return C.QFont_Underline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Weight() int {
	defer qt.Recovering("QFont::weight")

	if ptr.Pointer() != nil {
		return int(C.QFont_Weight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) WordSpacing() float64 {
	defer qt.Recovering("QFont::wordSpacing")

	if ptr.Pointer() != nil {
		return float64(C.QFont_WordSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) DestroyQFont() {
	defer qt.Recovering("QFont::~QFont")

	if ptr.Pointer() != nil {
		C.QFont_DestroyQFont(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QFontDatabase::SystemFont
type QFontDatabase__SystemFont int64

const (
	QFontDatabase__GeneralFont          = QFontDatabase__SystemFont(0)
	QFontDatabase__FixedFont            = QFontDatabase__SystemFont(1)
	QFontDatabase__TitleFont            = QFontDatabase__SystemFont(2)
	QFontDatabase__SmallestReadableFont = QFontDatabase__SystemFont(3)
)

//QFontDatabase::WritingSystem
type QFontDatabase__WritingSystem int64

var (
	QFontDatabase__Any                 = QFontDatabase__WritingSystem(0)
	QFontDatabase__Latin               = QFontDatabase__WritingSystem(1)
	QFontDatabase__Greek               = QFontDatabase__WritingSystem(2)
	QFontDatabase__Cyrillic            = QFontDatabase__WritingSystem(3)
	QFontDatabase__Armenian            = QFontDatabase__WritingSystem(4)
	QFontDatabase__Hebrew              = QFontDatabase__WritingSystem(5)
	QFontDatabase__Arabic              = QFontDatabase__WritingSystem(6)
	QFontDatabase__Syriac              = QFontDatabase__WritingSystem(7)
	QFontDatabase__Thaana              = QFontDatabase__WritingSystem(8)
	QFontDatabase__Devanagari          = QFontDatabase__WritingSystem(9)
	QFontDatabase__Bengali             = QFontDatabase__WritingSystem(10)
	QFontDatabase__Gurmukhi            = QFontDatabase__WritingSystem(11)
	QFontDatabase__Gujarati            = QFontDatabase__WritingSystem(12)
	QFontDatabase__Oriya               = QFontDatabase__WritingSystem(13)
	QFontDatabase__Tamil               = QFontDatabase__WritingSystem(14)
	QFontDatabase__Telugu              = QFontDatabase__WritingSystem(15)
	QFontDatabase__Kannada             = QFontDatabase__WritingSystem(16)
	QFontDatabase__Malayalam           = QFontDatabase__WritingSystem(17)
	QFontDatabase__Sinhala             = QFontDatabase__WritingSystem(18)
	QFontDatabase__Thai                = QFontDatabase__WritingSystem(19)
	QFontDatabase__Lao                 = QFontDatabase__WritingSystem(20)
	QFontDatabase__Tibetan             = QFontDatabase__WritingSystem(21)
	QFontDatabase__Myanmar             = QFontDatabase__WritingSystem(22)
	QFontDatabase__Georgian            = QFontDatabase__WritingSystem(23)
	QFontDatabase__Khmer               = QFontDatabase__WritingSystem(24)
	QFontDatabase__SimplifiedChinese   = QFontDatabase__WritingSystem(25)
	QFontDatabase__TraditionalChinese  = QFontDatabase__WritingSystem(26)
	QFontDatabase__Japanese            = QFontDatabase__WritingSystem(27)
	QFontDatabase__Korean              = QFontDatabase__WritingSystem(28)
	QFontDatabase__Vietnamese          = QFontDatabase__WritingSystem(29)
	QFontDatabase__Symbol              = QFontDatabase__WritingSystem(30)
	QFontDatabase__Other               = QFontDatabase__WritingSystem(QFontDatabase__Symbol)
	QFontDatabase__Ogham               = QFontDatabase__WritingSystem(C.QFontDatabase_Ogham_Type())
	QFontDatabase__Runic               = QFontDatabase__WritingSystem(C.QFontDatabase_Runic_Type())
	QFontDatabase__Nko                 = QFontDatabase__WritingSystem(C.QFontDatabase_Nko_Type())
	QFontDatabase__WritingSystemsCount = QFontDatabase__WritingSystem(C.QFontDatabase_WritingSystemsCount_Type())
)

type QFontDatabase struct {
	ptr unsafe.Pointer
}

type QFontDatabase_ITF interface {
	QFontDatabase_PTR() *QFontDatabase
}

func (p *QFontDatabase) QFontDatabase_PTR() *QFontDatabase {
	return p
}

func (p *QFontDatabase) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFontDatabase) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFontDatabase(ptr QFontDatabase_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontDatabase_PTR().Pointer()
	}
	return nil
}

func NewQFontDatabaseFromPointer(ptr unsafe.Pointer) *QFontDatabase {
	var n = new(QFontDatabase)
	n.SetPointer(ptr)
	return n
}

func newQFontDatabaseFromPointer(ptr unsafe.Pointer) *QFontDatabase {
	var n = NewQFontDatabaseFromPointer(ptr)
	return n
}

func QFontDatabase_RemoveAllApplicationFonts() bool {
	defer qt.Recovering("QFontDatabase::removeAllApplicationFonts")

	return C.QFontDatabase_QFontDatabase_RemoveAllApplicationFonts() != 0
}

func (ptr *QFontDatabase) RemoveAllApplicationFonts() bool {
	defer qt.Recovering("QFontDatabase::removeAllApplicationFonts")

	return C.QFontDatabase_QFontDatabase_RemoveAllApplicationFonts() != 0
}

func QFontDatabase_RemoveApplicationFont(id int) bool {
	defer qt.Recovering("QFontDatabase::removeApplicationFont")

	return C.QFontDatabase_QFontDatabase_RemoveApplicationFont(C.int(id)) != 0
}

func (ptr *QFontDatabase) RemoveApplicationFont(id int) bool {
	defer qt.Recovering("QFontDatabase::removeApplicationFont")

	return C.QFontDatabase_QFontDatabase_RemoveApplicationFont(C.int(id)) != 0
}

func NewQFontDatabase() *QFontDatabase {
	defer qt.Recovering("QFontDatabase::QFontDatabase")

	return newQFontDatabaseFromPointer(C.QFontDatabase_NewQFontDatabase())
}

func QFontDatabase_AddApplicationFont(fileName string) int {
	defer qt.Recovering("QFontDatabase::addApplicationFont")

	return int(C.QFontDatabase_QFontDatabase_AddApplicationFont(C.CString(fileName)))
}

func (ptr *QFontDatabase) AddApplicationFont(fileName string) int {
	defer qt.Recovering("QFontDatabase::addApplicationFont")

	return int(C.QFontDatabase_QFontDatabase_AddApplicationFont(C.CString(fileName)))
}

func QFontDatabase_AddApplicationFontFromData(fontData string) int {
	defer qt.Recovering("QFontDatabase::addApplicationFontFromData")

	return int(C.QFontDatabase_QFontDatabase_AddApplicationFontFromData(C.CString(fontData)))
}

func (ptr *QFontDatabase) AddApplicationFontFromData(fontData string) int {
	defer qt.Recovering("QFontDatabase::addApplicationFontFromData")

	return int(C.QFontDatabase_QFontDatabase_AddApplicationFontFromData(C.CString(fontData)))
}

func QFontDatabase_ApplicationFontFamilies(id int) []string {
	defer qt.Recovering("QFontDatabase::applicationFontFamilies")

	return strings.Split(C.GoString(C.QFontDatabase_QFontDatabase_ApplicationFontFamilies(C.int(id))), "|")
}

func (ptr *QFontDatabase) ApplicationFontFamilies(id int) []string {
	defer qt.Recovering("QFontDatabase::applicationFontFamilies")

	return strings.Split(C.GoString(C.QFontDatabase_QFontDatabase_ApplicationFontFamilies(C.int(id))), "|")
}

func (ptr *QFontDatabase) Bold(family string, style string) bool {
	defer qt.Recovering("QFontDatabase::bold")

	if ptr.Pointer() != nil {
		return C.QFontDatabase_Bold(ptr.Pointer(), C.CString(family), C.CString(style)) != 0
	}
	return false
}

func (ptr *QFontDatabase) Families(writingSystem QFontDatabase__WritingSystem) []string {
	defer qt.Recovering("QFontDatabase::families")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QFontDatabase_Families(ptr.Pointer(), C.int(writingSystem))), "|")
	}
	return make([]string, 0)
}

func (ptr *QFontDatabase) Font(family string, style string, pointSize int) *QFont {
	defer qt.Recovering("QFontDatabase::font")

	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QFontDatabase_Font(ptr.Pointer(), C.CString(family), C.CString(style), C.int(pointSize)))
	}
	return nil
}

func (ptr *QFontDatabase) IsBitmapScalable(family string, style string) bool {
	defer qt.Recovering("QFontDatabase::isBitmapScalable")

	if ptr.Pointer() != nil {
		return C.QFontDatabase_IsBitmapScalable(ptr.Pointer(), C.CString(family), C.CString(style)) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsFixedPitch(family string, style string) bool {
	defer qt.Recovering("QFontDatabase::isFixedPitch")

	if ptr.Pointer() != nil {
		return C.QFontDatabase_IsFixedPitch(ptr.Pointer(), C.CString(family), C.CString(style)) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsPrivateFamily(family string) bool {
	defer qt.Recovering("QFontDatabase::isPrivateFamily")

	if ptr.Pointer() != nil {
		return C.QFontDatabase_IsPrivateFamily(ptr.Pointer(), C.CString(family)) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsScalable(family string, style string) bool {
	defer qt.Recovering("QFontDatabase::isScalable")

	if ptr.Pointer() != nil {
		return C.QFontDatabase_IsScalable(ptr.Pointer(), C.CString(family), C.CString(style)) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsSmoothlyScalable(family string, style string) bool {
	defer qt.Recovering("QFontDatabase::isSmoothlyScalable")

	if ptr.Pointer() != nil {
		return C.QFontDatabase_IsSmoothlyScalable(ptr.Pointer(), C.CString(family), C.CString(style)) != 0
	}
	return false
}

func (ptr *QFontDatabase) Italic(family string, style string) bool {
	defer qt.Recovering("QFontDatabase::italic")

	if ptr.Pointer() != nil {
		return C.QFontDatabase_Italic(ptr.Pointer(), C.CString(family), C.CString(style)) != 0
	}
	return false
}

func (ptr *QFontDatabase) StyleString(font QFont_ITF) string {
	defer qt.Recovering("QFontDatabase::styleString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFontDatabase_StyleString(ptr.Pointer(), PointerFromQFont(font)))
	}
	return ""
}

func (ptr *QFontDatabase) StyleString2(fontInfo QFontInfo_ITF) string {
	defer qt.Recovering("QFontDatabase::styleString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFontDatabase_StyleString2(ptr.Pointer(), PointerFromQFontInfo(fontInfo)))
	}
	return ""
}

func (ptr *QFontDatabase) Styles(family string) []string {
	defer qt.Recovering("QFontDatabase::styles")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QFontDatabase_Styles(ptr.Pointer(), C.CString(family))), "|")
	}
	return make([]string, 0)
}

func QFontDatabase_SystemFont(ty QFontDatabase__SystemFont) *QFont {
	defer qt.Recovering("QFontDatabase::systemFont")

	return NewQFontFromPointer(C.QFontDatabase_QFontDatabase_SystemFont(C.int(ty)))
}

func (ptr *QFontDatabase) SystemFont(ty QFontDatabase__SystemFont) *QFont {
	defer qt.Recovering("QFontDatabase::systemFont")

	return NewQFontFromPointer(C.QFontDatabase_QFontDatabase_SystemFont(C.int(ty)))
}

func (ptr *QFontDatabase) Weight(family string, style string) int {
	defer qt.Recovering("QFontDatabase::weight")

	if ptr.Pointer() != nil {
		return int(C.QFontDatabase_Weight(ptr.Pointer(), C.CString(family), C.CString(style)))
	}
	return 0
}

func QFontDatabase_WritingSystemName(writingSystem QFontDatabase__WritingSystem) string {
	defer qt.Recovering("QFontDatabase::writingSystemName")

	return C.GoString(C.QFontDatabase_QFontDatabase_WritingSystemName(C.int(writingSystem)))
}

func (ptr *QFontDatabase) WritingSystemName(writingSystem QFontDatabase__WritingSystem) string {
	defer qt.Recovering("QFontDatabase::writingSystemName")

	return C.GoString(C.QFontDatabase_QFontDatabase_WritingSystemName(C.int(writingSystem)))
}

func QFontDatabase_WritingSystemSample(writingSystem QFontDatabase__WritingSystem) string {
	defer qt.Recovering("QFontDatabase::writingSystemSample")

	return C.GoString(C.QFontDatabase_QFontDatabase_WritingSystemSample(C.int(writingSystem)))
}

func (ptr *QFontDatabase) WritingSystemSample(writingSystem QFontDatabase__WritingSystem) string {
	defer qt.Recovering("QFontDatabase::writingSystemSample")

	return C.GoString(C.QFontDatabase_QFontDatabase_WritingSystemSample(C.int(writingSystem)))
}

type QFontInfo struct {
	ptr unsafe.Pointer
}

type QFontInfo_ITF interface {
	QFontInfo_PTR() *QFontInfo
}

func (p *QFontInfo) QFontInfo_PTR() *QFontInfo {
	return p
}

func (p *QFontInfo) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFontInfo) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFontInfo(ptr QFontInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontInfo_PTR().Pointer()
	}
	return nil
}

func NewQFontInfoFromPointer(ptr unsafe.Pointer) *QFontInfo {
	var n = new(QFontInfo)
	n.SetPointer(ptr)
	return n
}

func newQFontInfoFromPointer(ptr unsafe.Pointer) *QFontInfo {
	var n = NewQFontInfoFromPointer(ptr)
	return n
}

func NewQFontInfo(font QFont_ITF) *QFontInfo {
	defer qt.Recovering("QFontInfo::QFontInfo")

	return newQFontInfoFromPointer(C.QFontInfo_NewQFontInfo(PointerFromQFont(font)))
}

func NewQFontInfo2(fi QFontInfo_ITF) *QFontInfo {
	defer qt.Recovering("QFontInfo::QFontInfo")

	return newQFontInfoFromPointer(C.QFontInfo_NewQFontInfo2(PointerFromQFontInfo(fi)))
}

func (ptr *QFontInfo) Bold() bool {
	defer qt.Recovering("QFontInfo::bold")

	if ptr.Pointer() != nil {
		return C.QFontInfo_Bold(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) ExactMatch() bool {
	defer qt.Recovering("QFontInfo::exactMatch")

	if ptr.Pointer() != nil {
		return C.QFontInfo_ExactMatch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) Family() string {
	defer qt.Recovering("QFontInfo::family")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFontInfo_Family(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFontInfo) FixedPitch() bool {
	defer qt.Recovering("QFontInfo::fixedPitch")

	if ptr.Pointer() != nil {
		return C.QFontInfo_FixedPitch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) Italic() bool {
	defer qt.Recovering("QFontInfo::italic")

	if ptr.Pointer() != nil {
		return C.QFontInfo_Italic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) PixelSize() int {
	defer qt.Recovering("QFontInfo::pixelSize")

	if ptr.Pointer() != nil {
		return int(C.QFontInfo_PixelSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) PointSize() int {
	defer qt.Recovering("QFontInfo::pointSize")

	if ptr.Pointer() != nil {
		return int(C.QFontInfo_PointSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) PointSizeF() float64 {
	defer qt.Recovering("QFontInfo::pointSizeF")

	if ptr.Pointer() != nil {
		return float64(C.QFontInfo_PointSizeF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) Style() QFont__Style {
	defer qt.Recovering("QFontInfo::style")

	if ptr.Pointer() != nil {
		return QFont__Style(C.QFontInfo_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) StyleName() string {
	defer qt.Recovering("QFontInfo::styleName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFontInfo_StyleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFontInfo) Swap(other QFontInfo_ITF) {
	defer qt.Recovering("QFontInfo::swap")

	if ptr.Pointer() != nil {
		C.QFontInfo_Swap(ptr.Pointer(), PointerFromQFontInfo(other))
	}
}

func (ptr *QFontInfo) StyleHint() QFont__StyleHint {
	defer qt.Recovering("QFontInfo::styleHint")

	if ptr.Pointer() != nil {
		return QFont__StyleHint(C.QFontInfo_StyleHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) Weight() int {
	defer qt.Recovering("QFontInfo::weight")

	if ptr.Pointer() != nil {
		return int(C.QFontInfo_Weight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) DestroyQFontInfo() {
	defer qt.Recovering("QFontInfo::~QFontInfo")

	if ptr.Pointer() != nil {
		C.QFontInfo_DestroyQFontInfo(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QFontMetrics struct {
	ptr unsafe.Pointer
}

type QFontMetrics_ITF interface {
	QFontMetrics_PTR() *QFontMetrics
}

func (p *QFontMetrics) QFontMetrics_PTR() *QFontMetrics {
	return p
}

func (p *QFontMetrics) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFontMetrics) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFontMetrics(ptr QFontMetrics_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontMetrics_PTR().Pointer()
	}
	return nil
}

func NewQFontMetricsFromPointer(ptr unsafe.Pointer) *QFontMetrics {
	var n = new(QFontMetrics)
	n.SetPointer(ptr)
	return n
}

func newQFontMetricsFromPointer(ptr unsafe.Pointer) *QFontMetrics {
	var n = NewQFontMetricsFromPointer(ptr)
	return n
}

func NewQFontMetrics(font QFont_ITF) *QFontMetrics {
	defer qt.Recovering("QFontMetrics::QFontMetrics")

	return newQFontMetricsFromPointer(C.QFontMetrics_NewQFontMetrics(PointerFromQFont(font)))
}

func NewQFontMetrics2(font QFont_ITF, paintdevice QPaintDevice_ITF) *QFontMetrics {
	defer qt.Recovering("QFontMetrics::QFontMetrics")

	return newQFontMetricsFromPointer(C.QFontMetrics_NewQFontMetrics2(PointerFromQFont(font), PointerFromQPaintDevice(paintdevice)))
}

func NewQFontMetrics3(fm QFontMetrics_ITF) *QFontMetrics {
	defer qt.Recovering("QFontMetrics::QFontMetrics")

	return newQFontMetricsFromPointer(C.QFontMetrics_NewQFontMetrics3(PointerFromQFontMetrics(fm)))
}

func (ptr *QFontMetrics) Ascent() int {
	defer qt.Recovering("QFontMetrics::ascent")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) AverageCharWidth() int {
	defer qt.Recovering("QFontMetrics::averageCharWidth")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_AverageCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) BoundingRect(ch core.QChar_ITF) *core.QRect {
	defer qt.Recovering("QFontMetrics::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QFontMetrics_BoundingRect(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return nil
}

func (ptr *QFontMetrics) BoundingRect4(rect core.QRect_ITF, flags int, text string, tabStops int, tabArray int) *core.QRect {
	defer qt.Recovering("QFontMetrics::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QFontMetrics_BoundingRect4(ptr.Pointer(), core.PointerFromQRect(rect), C.int(flags), C.CString(text), C.int(tabStops), C.int(tabArray)))
	}
	return nil
}

func (ptr *QFontMetrics) BoundingRect2(text string) *core.QRect {
	defer qt.Recovering("QFontMetrics::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QFontMetrics_BoundingRect2(ptr.Pointer(), C.CString(text)))
	}
	return nil
}

func (ptr *QFontMetrics) BoundingRect3(x int, y int, width int, height int, flags int, text string, tabStops int, tabArray int) *core.QRect {
	defer qt.Recovering("QFontMetrics::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QFontMetrics_BoundingRect3(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), C.int(flags), C.CString(text), C.int(tabStops), C.int(tabArray)))
	}
	return nil
}

func (ptr *QFontMetrics) Descent() int {
	defer qt.Recovering("QFontMetrics::descent")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) ElidedText(text string, mode core.Qt__TextElideMode, width int, flags int) string {
	defer qt.Recovering("QFontMetrics::elidedText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFontMetrics_ElidedText(ptr.Pointer(), C.CString(text), C.int(mode), C.int(width), C.int(flags)))
	}
	return ""
}

func (ptr *QFontMetrics) Height() int {
	defer qt.Recovering("QFontMetrics::height")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) InFont(ch core.QChar_ITF) bool {
	defer qt.Recovering("QFontMetrics::inFont")

	if ptr.Pointer() != nil {
		return C.QFontMetrics_InFont(ptr.Pointer(), core.PointerFromQChar(ch)) != 0
	}
	return false
}

func (ptr *QFontMetrics) Leading() int {
	defer qt.Recovering("QFontMetrics::leading")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) LeftBearing(ch core.QChar_ITF) int {
	defer qt.Recovering("QFontMetrics::leftBearing")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_LeftBearing(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetrics) LineSpacing() int {
	defer qt.Recovering("QFontMetrics::lineSpacing")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_LineSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) LineWidth() int {
	defer qt.Recovering("QFontMetrics::lineWidth")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_LineWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) MaxWidth() int {
	defer qt.Recovering("QFontMetrics::maxWidth")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_MaxWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) MinLeftBearing() int {
	defer qt.Recovering("QFontMetrics::minLeftBearing")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_MinLeftBearing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) MinRightBearing() int {
	defer qt.Recovering("QFontMetrics::minRightBearing")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_MinRightBearing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) OverlinePos() int {
	defer qt.Recovering("QFontMetrics::overlinePos")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_OverlinePos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) RightBearing(ch core.QChar_ITF) int {
	defer qt.Recovering("QFontMetrics::rightBearing")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_RightBearing(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetrics) Size(flags int, text string, tabStops int, tabArray int) *core.QSize {
	defer qt.Recovering("QFontMetrics::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QFontMetrics_Size(ptr.Pointer(), C.int(flags), C.CString(text), C.int(tabStops), C.int(tabArray)))
	}
	return nil
}

func (ptr *QFontMetrics) StrikeOutPos() int {
	defer qt.Recovering("QFontMetrics::strikeOutPos")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_StrikeOutPos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) Swap(other QFontMetrics_ITF) {
	defer qt.Recovering("QFontMetrics::swap")

	if ptr.Pointer() != nil {
		C.QFontMetrics_Swap(ptr.Pointer(), PointerFromQFontMetrics(other))
	}
}

func (ptr *QFontMetrics) TightBoundingRect(text string) *core.QRect {
	defer qt.Recovering("QFontMetrics::tightBoundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QFontMetrics_TightBoundingRect(ptr.Pointer(), C.CString(text)))
	}
	return nil
}

func (ptr *QFontMetrics) UnderlinePos() int {
	defer qt.Recovering("QFontMetrics::underlinePos")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_UnderlinePos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) Width3(ch core.QChar_ITF) int {
	defer qt.Recovering("QFontMetrics::width")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_Width3(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetrics) Width(text string, len int) int {
	defer qt.Recovering("QFontMetrics::width")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_Width(ptr.Pointer(), C.CString(text), C.int(len)))
	}
	return 0
}

func (ptr *QFontMetrics) XHeight() int {
	defer qt.Recovering("QFontMetrics::xHeight")

	if ptr.Pointer() != nil {
		return int(C.QFontMetrics_XHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetrics) DestroyQFontMetrics() {
	defer qt.Recovering("QFontMetrics::~QFontMetrics")

	if ptr.Pointer() != nil {
		C.QFontMetrics_DestroyQFontMetrics(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QFontMetricsF struct {
	ptr unsafe.Pointer
}

type QFontMetricsF_ITF interface {
	QFontMetricsF_PTR() *QFontMetricsF
}

func (p *QFontMetricsF) QFontMetricsF_PTR() *QFontMetricsF {
	return p
}

func (p *QFontMetricsF) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFontMetricsF) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFontMetricsF(ptr QFontMetricsF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontMetricsF_PTR().Pointer()
	}
	return nil
}

func NewQFontMetricsFFromPointer(ptr unsafe.Pointer) *QFontMetricsF {
	var n = new(QFontMetricsF)
	n.SetPointer(ptr)
	return n
}

func newQFontMetricsFFromPointer(ptr unsafe.Pointer) *QFontMetricsF {
	var n = NewQFontMetricsFFromPointer(ptr)
	return n
}

func NewQFontMetricsF(font QFont_ITF) *QFontMetricsF {
	defer qt.Recovering("QFontMetricsF::QFontMetricsF")

	return newQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF(PointerFromQFont(font)))
}

func NewQFontMetricsF2(font QFont_ITF, paintdevice QPaintDevice_ITF) *QFontMetricsF {
	defer qt.Recovering("QFontMetricsF::QFontMetricsF")

	return newQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF2(PointerFromQFont(font), PointerFromQPaintDevice(paintdevice)))
}

func NewQFontMetricsF3(fontMetrics QFontMetrics_ITF) *QFontMetricsF {
	defer qt.Recovering("QFontMetricsF::QFontMetricsF")

	return newQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF3(PointerFromQFontMetrics(fontMetrics)))
}

func NewQFontMetricsF4(fm QFontMetricsF_ITF) *QFontMetricsF {
	defer qt.Recovering("QFontMetricsF::QFontMetricsF")

	return newQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF4(PointerFromQFontMetricsF(fm)))
}

func (ptr *QFontMetricsF) Ascent() float64 {
	defer qt.Recovering("QFontMetricsF::ascent")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) AverageCharWidth() float64 {
	defer qt.Recovering("QFontMetricsF::averageCharWidth")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_AverageCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) BoundingRect2(ch core.QChar_ITF) *core.QRectF {
	defer qt.Recovering("QFontMetricsF::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QFontMetricsF_BoundingRect2(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return nil
}

func (ptr *QFontMetricsF) BoundingRect3(rect core.QRectF_ITF, flags int, text string, tabStops int, tabArray int) *core.QRectF {
	defer qt.Recovering("QFontMetricsF::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QFontMetricsF_BoundingRect3(ptr.Pointer(), core.PointerFromQRectF(rect), C.int(flags), C.CString(text), C.int(tabStops), C.int(tabArray)))
	}
	return nil
}

func (ptr *QFontMetricsF) BoundingRect(text string) *core.QRectF {
	defer qt.Recovering("QFontMetricsF::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QFontMetricsF_BoundingRect(ptr.Pointer(), C.CString(text)))
	}
	return nil
}

func (ptr *QFontMetricsF) Descent() float64 {
	defer qt.Recovering("QFontMetricsF::descent")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) ElidedText(text string, mode core.Qt__TextElideMode, width float64, flags int) string {
	defer qt.Recovering("QFontMetricsF::elidedText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QFontMetricsF_ElidedText(ptr.Pointer(), C.CString(text), C.int(mode), C.double(width), C.int(flags)))
	}
	return ""
}

func (ptr *QFontMetricsF) Height() float64 {
	defer qt.Recovering("QFontMetricsF::height")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) InFont(ch core.QChar_ITF) bool {
	defer qt.Recovering("QFontMetricsF::inFont")

	if ptr.Pointer() != nil {
		return C.QFontMetricsF_InFont(ptr.Pointer(), core.PointerFromQChar(ch)) != 0
	}
	return false
}

func (ptr *QFontMetricsF) Leading() float64 {
	defer qt.Recovering("QFontMetricsF::leading")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) LeftBearing(ch core.QChar_ITF) float64 {
	defer qt.Recovering("QFontMetricsF::leftBearing")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_LeftBearing(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetricsF) LineSpacing() float64 {
	defer qt.Recovering("QFontMetricsF::lineSpacing")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_LineSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) LineWidth() float64 {
	defer qt.Recovering("QFontMetricsF::lineWidth")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_LineWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) MaxWidth() float64 {
	defer qt.Recovering("QFontMetricsF::maxWidth")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_MaxWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) MinLeftBearing() float64 {
	defer qt.Recovering("QFontMetricsF::minLeftBearing")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_MinLeftBearing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) MinRightBearing() float64 {
	defer qt.Recovering("QFontMetricsF::minRightBearing")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_MinRightBearing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) OverlinePos() float64 {
	defer qt.Recovering("QFontMetricsF::overlinePos")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_OverlinePos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) RightBearing(ch core.QChar_ITF) float64 {
	defer qt.Recovering("QFontMetricsF::rightBearing")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_RightBearing(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetricsF) Size(flags int, text string, tabStops int, tabArray int) *core.QSizeF {
	defer qt.Recovering("QFontMetricsF::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QFontMetricsF_Size(ptr.Pointer(), C.int(flags), C.CString(text), C.int(tabStops), C.int(tabArray)))
	}
	return nil
}

func (ptr *QFontMetricsF) StrikeOutPos() float64 {
	defer qt.Recovering("QFontMetricsF::strikeOutPos")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_StrikeOutPos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) Swap(other QFontMetricsF_ITF) {
	defer qt.Recovering("QFontMetricsF::swap")

	if ptr.Pointer() != nil {
		C.QFontMetricsF_Swap(ptr.Pointer(), PointerFromQFontMetricsF(other))
	}
}

func (ptr *QFontMetricsF) TightBoundingRect(text string) *core.QRectF {
	defer qt.Recovering("QFontMetricsF::tightBoundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QFontMetricsF_TightBoundingRect(ptr.Pointer(), C.CString(text)))
	}
	return nil
}

func (ptr *QFontMetricsF) UnderlinePos() float64 {
	defer qt.Recovering("QFontMetricsF::underlinePos")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_UnderlinePos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) Width2(ch core.QChar_ITF) float64 {
	defer qt.Recovering("QFontMetricsF::width")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Width2(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetricsF) Width(text string) float64 {
	defer qt.Recovering("QFontMetricsF::width")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Width(ptr.Pointer(), C.CString(text)))
	}
	return 0
}

func (ptr *QFontMetricsF) XHeight() float64 {
	defer qt.Recovering("QFontMetricsF::xHeight")

	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_XHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) DestroyQFontMetricsF() {
	defer qt.Recovering("QFontMetricsF::~QFontMetricsF")

	if ptr.Pointer() != nil {
		C.QFontMetricsF_DestroyQFontMetricsF(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QGenericMatrix struct {
	ptr unsafe.Pointer
}

type QGenericMatrix_ITF interface {
	QGenericMatrix_PTR() *QGenericMatrix
}

func (p *QGenericMatrix) QGenericMatrix_PTR() *QGenericMatrix {
	return p
}

func (p *QGenericMatrix) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGenericMatrix) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGenericMatrix(ptr QGenericMatrix_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericMatrix_PTR().Pointer()
	}
	return nil
}

func NewQGenericMatrixFromPointer(ptr unsafe.Pointer) *QGenericMatrix {
	var n = new(QGenericMatrix)
	n.SetPointer(ptr)
	return n
}

func newQGenericMatrixFromPointer(ptr unsafe.Pointer) *QGenericMatrix {
	var n = NewQGenericMatrixFromPointer(ptr)
	return n
}

type QGenericPlugin struct {
	core.QObject
}

type QGenericPlugin_ITF interface {
	core.QObject_ITF
	QGenericPlugin_PTR() *QGenericPlugin
}

func (p *QGenericPlugin) QGenericPlugin_PTR() *QGenericPlugin {
	return p
}

func (p *QGenericPlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QGenericPlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQGenericPlugin(ptr QGenericPlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericPlugin_PTR().Pointer()
	}
	return nil
}

func NewQGenericPluginFromPointer(ptr unsafe.Pointer) *QGenericPlugin {
	var n = new(QGenericPlugin)
	n.SetPointer(ptr)
	return n
}

func newQGenericPluginFromPointer(ptr unsafe.Pointer) *QGenericPlugin {
	var n = NewQGenericPluginFromPointer(ptr)
	for len(n.ObjectName()) < len("QGenericPlugin_") {
		n.SetObjectName("QGenericPlugin_" + qt.Identifier())
	}
	return n
}

func NewQGenericPlugin(parent core.QObject_ITF) *QGenericPlugin {
	defer qt.Recovering("QGenericPlugin::QGenericPlugin")

	return newQGenericPluginFromPointer(C.QGenericPlugin_NewQGenericPlugin(core.PointerFromQObject(parent)))
}

//export callbackQGenericPlugin_Create
func callbackQGenericPlugin_Create(ptr unsafe.Pointer, ptrName *C.char, key *C.char, specification *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QGenericPlugin::create")

	if signal := qt.GetSignal(C.GoString(ptrName), "create"); signal != nil {
		return core.PointerFromQObject(signal.(func(string, string) *core.QObject)(C.GoString(key), C.GoString(specification)))
	}

	return core.PointerFromQObject(nil)
}

func (ptr *QGenericPlugin) ConnectCreate(f func(key string, specification string) *core.QObject) {
	defer qt.Recovering("connect QGenericPlugin::create")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "create", f)
	}
}

func (ptr *QGenericPlugin) DisconnectCreate(key string, specification string) {
	defer qt.Recovering("disconnect QGenericPlugin::create")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "create")
	}
}

func (ptr *QGenericPlugin) Create(key string, specification string) *core.QObject {
	defer qt.Recovering("QGenericPlugin::create")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QGenericPlugin_Create(ptr.Pointer(), C.CString(key), C.CString(specification)))
	}
	return nil
}

func (ptr *QGenericPlugin) DestroyQGenericPlugin() {
	defer qt.Recovering("QGenericPlugin::~QGenericPlugin")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_DestroyQGenericPlugin(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQGenericPlugin_TimerEvent
func callbackQGenericPlugin_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QGenericPlugin::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGenericPluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGenericPlugin) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QGenericPlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QGenericPlugin) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QGenericPlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QGenericPlugin) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QGenericPlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QGenericPlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QGenericPlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQGenericPlugin_ChildEvent
func callbackQGenericPlugin_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QGenericPlugin::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGenericPluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGenericPlugin) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QGenericPlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QGenericPlugin) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QGenericPlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QGenericPlugin) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QGenericPlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QGenericPlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QGenericPlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGenericPlugin_ConnectNotify
func callbackQGenericPlugin_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QGenericPlugin::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGenericPluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGenericPlugin) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QGenericPlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QGenericPlugin) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QGenericPlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QGenericPlugin) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGenericPlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGenericPlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGenericPlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGenericPlugin_CustomEvent
func callbackQGenericPlugin_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QGenericPlugin::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQGenericPluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGenericPlugin) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QGenericPlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QGenericPlugin) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QGenericPlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QGenericPlugin) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QGenericPlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGenericPlugin) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QGenericPlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGenericPlugin_DeleteLater
func callbackQGenericPlugin_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QGenericPlugin::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGenericPlugin) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QGenericPlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QGenericPlugin) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QGenericPlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QGenericPlugin) DeleteLater() {
	defer qt.Recovering("QGenericPlugin::deleteLater")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQGenericPlugin_DisconnectNotify
func callbackQGenericPlugin_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QGenericPlugin::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGenericPluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGenericPlugin) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QGenericPlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QGenericPlugin) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QGenericPlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QGenericPlugin) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGenericPlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGenericPlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGenericPlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QGenericPlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGenericPlugin_Event
func callbackQGenericPlugin_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QGenericPlugin::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQGenericPluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QGenericPlugin) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QGenericPlugin::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QGenericPlugin) DisconnectEvent() {
	defer qt.Recovering("disconnect QGenericPlugin::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QGenericPlugin) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QGenericPlugin::event")

	if ptr.Pointer() != nil {
		return C.QGenericPlugin_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QGenericPlugin) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QGenericPlugin::event")

	if ptr.Pointer() != nil {
		return C.QGenericPlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQGenericPlugin_EventFilter
func callbackQGenericPlugin_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QGenericPlugin::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQGenericPluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QGenericPlugin) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QGenericPlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QGenericPlugin) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QGenericPlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QGenericPlugin) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QGenericPlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QGenericPlugin_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QGenericPlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QGenericPlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QGenericPlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQGenericPlugin_MetaObject
func callbackQGenericPlugin_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QGenericPlugin::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQGenericPluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGenericPlugin) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QGenericPlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QGenericPlugin) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QGenericPlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QGenericPlugin) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QGenericPlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGenericPlugin_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGenericPlugin) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QGenericPlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGenericPlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QGenericPluginFactory struct {
	ptr unsafe.Pointer
}

type QGenericPluginFactory_ITF interface {
	QGenericPluginFactory_PTR() *QGenericPluginFactory
}

func (p *QGenericPluginFactory) QGenericPluginFactory_PTR() *QGenericPluginFactory {
	return p
}

func (p *QGenericPluginFactory) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGenericPluginFactory) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGenericPluginFactory(ptr QGenericPluginFactory_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericPluginFactory_PTR().Pointer()
	}
	return nil
}

func NewQGenericPluginFactoryFromPointer(ptr unsafe.Pointer) *QGenericPluginFactory {
	var n = new(QGenericPluginFactory)
	n.SetPointer(ptr)
	return n
}

func newQGenericPluginFactoryFromPointer(ptr unsafe.Pointer) *QGenericPluginFactory {
	var n = NewQGenericPluginFactoryFromPointer(ptr)
	return n
}

func QGenericPluginFactory_Create(key string, specification string) *core.QObject {
	defer qt.Recovering("QGenericPluginFactory::create")

	return core.NewQObjectFromPointer(C.QGenericPluginFactory_QGenericPluginFactory_Create(C.CString(key), C.CString(specification)))
}

func (ptr *QGenericPluginFactory) Create(key string, specification string) *core.QObject {
	defer qt.Recovering("QGenericPluginFactory::create")

	return core.NewQObjectFromPointer(C.QGenericPluginFactory_QGenericPluginFactory_Create(C.CString(key), C.CString(specification)))
}

func QGenericPluginFactory_Keys() []string {
	defer qt.Recovering("QGenericPluginFactory::keys")

	return strings.Split(C.GoString(C.QGenericPluginFactory_QGenericPluginFactory_Keys()), "|")
}

func (ptr *QGenericPluginFactory) Keys() []string {
	defer qt.Recovering("QGenericPluginFactory::keys")

	return strings.Split(C.GoString(C.QGenericPluginFactory_QGenericPluginFactory_Keys()), "|")
}

//QGlyphRun::GlyphRunFlag
type QGlyphRun__GlyphRunFlag int64

const (
	QGlyphRun__Overline      = QGlyphRun__GlyphRunFlag(0x01)
	QGlyphRun__Underline     = QGlyphRun__GlyphRunFlag(0x02)
	QGlyphRun__StrikeOut     = QGlyphRun__GlyphRunFlag(0x04)
	QGlyphRun__RightToLeft   = QGlyphRun__GlyphRunFlag(0x08)
	QGlyphRun__SplitLigature = QGlyphRun__GlyphRunFlag(0x10)
)

type QGlyphRun struct {
	ptr unsafe.Pointer
}

type QGlyphRun_ITF interface {
	QGlyphRun_PTR() *QGlyphRun
}

func (p *QGlyphRun) QGlyphRun_PTR() *QGlyphRun {
	return p
}

func (p *QGlyphRun) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGlyphRun) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGlyphRun(ptr QGlyphRun_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGlyphRun_PTR().Pointer()
	}
	return nil
}

func NewQGlyphRunFromPointer(ptr unsafe.Pointer) *QGlyphRun {
	var n = new(QGlyphRun)
	n.SetPointer(ptr)
	return n
}

func newQGlyphRunFromPointer(ptr unsafe.Pointer) *QGlyphRun {
	var n = NewQGlyphRunFromPointer(ptr)
	return n
}

func NewQGlyphRun() *QGlyphRun {
	defer qt.Recovering("QGlyphRun::QGlyphRun")

	return newQGlyphRunFromPointer(C.QGlyphRun_NewQGlyphRun())
}

func NewQGlyphRun2(other QGlyphRun_ITF) *QGlyphRun {
	defer qt.Recovering("QGlyphRun::QGlyphRun")

	return newQGlyphRunFromPointer(C.QGlyphRun_NewQGlyphRun2(PointerFromQGlyphRun(other)))
}

func (ptr *QGlyphRun) BoundingRect() *core.QRectF {
	defer qt.Recovering("QGlyphRun::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QGlyphRun_BoundingRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGlyphRun) Clear() {
	defer qt.Recovering("QGlyphRun::clear")

	if ptr.Pointer() != nil {
		C.QGlyphRun_Clear(ptr.Pointer())
	}
}

func (ptr *QGlyphRun) Flags() QGlyphRun__GlyphRunFlag {
	defer qt.Recovering("QGlyphRun::flags")

	if ptr.Pointer() != nil {
		return QGlyphRun__GlyphRunFlag(C.QGlyphRun_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGlyphRun) IsEmpty() bool {
	defer qt.Recovering("QGlyphRun::isEmpty")

	if ptr.Pointer() != nil {
		return C.QGlyphRun_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) IsRightToLeft() bool {
	defer qt.Recovering("QGlyphRun::isRightToLeft")

	if ptr.Pointer() != nil {
		return C.QGlyphRun_IsRightToLeft(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) Overline() bool {
	defer qt.Recovering("QGlyphRun::overline")

	if ptr.Pointer() != nil {
		return C.QGlyphRun_Overline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) RawFont() *QRawFont {
	defer qt.Recovering("QGlyphRun::rawFont")

	if ptr.Pointer() != nil {
		return NewQRawFontFromPointer(C.QGlyphRun_RawFont(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGlyphRun) SetBoundingRect(boundingRect core.QRectF_ITF) {
	defer qt.Recovering("QGlyphRun::setBoundingRect")

	if ptr.Pointer() != nil {
		C.QGlyphRun_SetBoundingRect(ptr.Pointer(), core.PointerFromQRectF(boundingRect))
	}
}

func (ptr *QGlyphRun) SetFlag(flag QGlyphRun__GlyphRunFlag, enabled bool) {
	defer qt.Recovering("QGlyphRun::setFlag")

	if ptr.Pointer() != nil {
		C.QGlyphRun_SetFlag(ptr.Pointer(), C.int(flag), C.int(qt.GoBoolToInt(enabled)))
	}
}

func (ptr *QGlyphRun) SetFlags(flags QGlyphRun__GlyphRunFlag) {
	defer qt.Recovering("QGlyphRun::setFlags")

	if ptr.Pointer() != nil {
		C.QGlyphRun_SetFlags(ptr.Pointer(), C.int(flags))
	}
}

func (ptr *QGlyphRun) SetOverline(overline bool) {
	defer qt.Recovering("QGlyphRun::setOverline")

	if ptr.Pointer() != nil {
		C.QGlyphRun_SetOverline(ptr.Pointer(), C.int(qt.GoBoolToInt(overline)))
	}
}

func (ptr *QGlyphRun) SetRawFont(rawFont QRawFont_ITF) {
	defer qt.Recovering("QGlyphRun::setRawFont")

	if ptr.Pointer() != nil {
		C.QGlyphRun_SetRawFont(ptr.Pointer(), PointerFromQRawFont(rawFont))
	}
}

func (ptr *QGlyphRun) SetRightToLeft(rightToLeft bool) {
	defer qt.Recovering("QGlyphRun::setRightToLeft")

	if ptr.Pointer() != nil {
		C.QGlyphRun_SetRightToLeft(ptr.Pointer(), C.int(qt.GoBoolToInt(rightToLeft)))
	}
}

func (ptr *QGlyphRun) SetStrikeOut(strikeOut bool) {
	defer qt.Recovering("QGlyphRun::setStrikeOut")

	if ptr.Pointer() != nil {
		C.QGlyphRun_SetStrikeOut(ptr.Pointer(), C.int(qt.GoBoolToInt(strikeOut)))
	}
}

func (ptr *QGlyphRun) SetUnderline(underline bool) {
	defer qt.Recovering("QGlyphRun::setUnderline")

	if ptr.Pointer() != nil {
		C.QGlyphRun_SetUnderline(ptr.Pointer(), C.int(qt.GoBoolToInt(underline)))
	}
}

func (ptr *QGlyphRun) StrikeOut() bool {
	defer qt.Recovering("QGlyphRun::strikeOut")

	if ptr.Pointer() != nil {
		return C.QGlyphRun_StrikeOut(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) Swap(other QGlyphRun_ITF) {
	defer qt.Recovering("QGlyphRun::swap")

	if ptr.Pointer() != nil {
		C.QGlyphRun_Swap(ptr.Pointer(), PointerFromQGlyphRun(other))
	}
}

func (ptr *QGlyphRun) Underline() bool {
	defer qt.Recovering("QGlyphRun::underline")

	if ptr.Pointer() != nil {
		return C.QGlyphRun_Underline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) DestroyQGlyphRun() {
	defer qt.Recovering("QGlyphRun::~QGlyphRun")

	if ptr.Pointer() != nil {
		C.QGlyphRun_DestroyQGlyphRun(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QGradient::CoordinateMode
type QGradient__CoordinateMode int64

const (
	QGradient__LogicalMode         = QGradient__CoordinateMode(0)
	QGradient__StretchToDeviceMode = QGradient__CoordinateMode(1)
	QGradient__ObjectBoundingMode  = QGradient__CoordinateMode(2)
)

//QGradient::Spread
type QGradient__Spread int64

const (
	QGradient__PadSpread     = QGradient__Spread(0)
	QGradient__ReflectSpread = QGradient__Spread(1)
	QGradient__RepeatSpread  = QGradient__Spread(2)
)

//QGradient::Type
type QGradient__Type int64

const (
	QGradient__LinearGradient  = QGradient__Type(0)
	QGradient__RadialGradient  = QGradient__Type(1)
	QGradient__ConicalGradient = QGradient__Type(2)
	QGradient__NoGradient      = QGradient__Type(3)
)

type QGradient struct {
	ptr unsafe.Pointer
}

type QGradient_ITF interface {
	QGradient_PTR() *QGradient
}

func (p *QGradient) QGradient_PTR() *QGradient {
	return p
}

func (p *QGradient) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGradient) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGradient(ptr QGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGradient_PTR().Pointer()
	}
	return nil
}

func NewQGradientFromPointer(ptr unsafe.Pointer) *QGradient {
	var n = new(QGradient)
	n.SetPointer(ptr)
	return n
}

func newQGradientFromPointer(ptr unsafe.Pointer) *QGradient {
	var n = NewQGradientFromPointer(ptr)
	return n
}

func (ptr *QGradient) SetColorAt(position float64, color QColor_ITF) {
	defer qt.Recovering("QGradient::setColorAt")

	if ptr.Pointer() != nil {
		C.QGradient_SetColorAt(ptr.Pointer(), C.double(position), PointerFromQColor(color))
	}
}

func (ptr *QGradient) CoordinateMode() QGradient__CoordinateMode {
	defer qt.Recovering("QGradient::coordinateMode")

	if ptr.Pointer() != nil {
		return QGradient__CoordinateMode(C.QGradient_CoordinateMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGradient) SetCoordinateMode(mode QGradient__CoordinateMode) {
	defer qt.Recovering("QGradient::setCoordinateMode")

	if ptr.Pointer() != nil {
		C.QGradient_SetCoordinateMode(ptr.Pointer(), C.int(mode))
	}
}

func (ptr *QGradient) SetSpread(method QGradient__Spread) {
	defer qt.Recovering("QGradient::setSpread")

	if ptr.Pointer() != nil {
		C.QGradient_SetSpread(ptr.Pointer(), C.int(method))
	}
}

func (ptr *QGradient) Spread() QGradient__Spread {
	defer qt.Recovering("QGradient::spread")

	if ptr.Pointer() != nil {
		return QGradient__Spread(C.QGradient_Spread(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGradient) Type() QGradient__Type {
	defer qt.Recovering("QGradient::type")

	if ptr.Pointer() != nil {
		return QGradient__Type(C.QGradient_Type(ptr.Pointer()))
	}
	return 0
}

type QGuiApplication struct {
	core.QCoreApplication
}

type QGuiApplication_ITF interface {
	core.QCoreApplication_ITF
	QGuiApplication_PTR() *QGuiApplication
}

func (p *QGuiApplication) QGuiApplication_PTR() *QGuiApplication {
	return p
}

func (p *QGuiApplication) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QCoreApplication_PTR().Pointer()
	}
	return nil
}

func (p *QGuiApplication) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QCoreApplication_PTR().SetPointer(ptr)
	}
}

func PointerFromQGuiApplication(ptr QGuiApplication_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGuiApplication_PTR().Pointer()
	}
	return nil
}

func NewQGuiApplicationFromPointer(ptr unsafe.Pointer) *QGuiApplication {
	var n = new(QGuiApplication)
	n.SetPointer(ptr)
	return n
}

func newQGuiApplicationFromPointer(ptr unsafe.Pointer) *QGuiApplication {
	var n = NewQGuiApplicationFromPointer(ptr)
	for len(n.ObjectName()) < len("QGuiApplication_") {
		n.SetObjectName("QGuiApplication_" + qt.Identifier())
	}
	return n
}

func QGuiApplication_ApplicationDisplayName() string {
	defer qt.Recovering("QGuiApplication::applicationDisplayName")

	return C.GoString(C.QGuiApplication_QGuiApplication_ApplicationDisplayName())
}

func (ptr *QGuiApplication) ApplicationDisplayName() string {
	defer qt.Recovering("QGuiApplication::applicationDisplayName")

	return C.GoString(C.QGuiApplication_QGuiApplication_ApplicationDisplayName())
}

func QGuiApplication_ApplicationState() core.Qt__ApplicationState {
	defer qt.Recovering("QGuiApplication::applicationState")

	return core.Qt__ApplicationState(C.QGuiApplication_QGuiApplication_ApplicationState())
}

func (ptr *QGuiApplication) ApplicationState() core.Qt__ApplicationState {
	defer qt.Recovering("QGuiApplication::applicationState")

	return core.Qt__ApplicationState(C.QGuiApplication_QGuiApplication_ApplicationState())
}

func (ptr *QGuiApplication) IsSavingSession() bool {
	defer qt.Recovering("QGuiApplication::isSavingSession")

	if ptr.Pointer() != nil {
		return C.QGuiApplication_IsSavingSession(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGuiApplication) IsSessionRestored() bool {
	defer qt.Recovering("QGuiApplication::isSessionRestored")

	if ptr.Pointer() != nil {
		return C.QGuiApplication_IsSessionRestored(ptr.Pointer()) != 0
	}
	return false
}

func QGuiApplication_LayoutDirection() core.Qt__LayoutDirection {
	defer qt.Recovering("QGuiApplication::layoutDirection")

	return core.Qt__LayoutDirection(C.QGuiApplication_QGuiApplication_LayoutDirection())
}

func (ptr *QGuiApplication) LayoutDirection() core.Qt__LayoutDirection {
	defer qt.Recovering("QGuiApplication::layoutDirection")

	return core.Qt__LayoutDirection(C.QGuiApplication_QGuiApplication_LayoutDirection())
}

func QGuiApplication_OverrideCursor() *QCursor {
	defer qt.Recovering("QGuiApplication::overrideCursor")

	return NewQCursorFromPointer(C.QGuiApplication_QGuiApplication_OverrideCursor())
}

func (ptr *QGuiApplication) OverrideCursor() *QCursor {
	defer qt.Recovering("QGuiApplication::overrideCursor")

	return NewQCursorFromPointer(C.QGuiApplication_QGuiApplication_OverrideCursor())
}

func QGuiApplication_PlatformName() string {
	defer qt.Recovering("QGuiApplication::platformName")

	return C.GoString(C.QGuiApplication_QGuiApplication_PlatformName())
}

func (ptr *QGuiApplication) PlatformName() string {
	defer qt.Recovering("QGuiApplication::platformName")

	return C.GoString(C.QGuiApplication_QGuiApplication_PlatformName())
}

func QGuiApplication_QueryKeyboardModifiers() core.Qt__KeyboardModifier {
	defer qt.Recovering("QGuiApplication::queryKeyboardModifiers")

	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_QueryKeyboardModifiers())
}

func (ptr *QGuiApplication) QueryKeyboardModifiers() core.Qt__KeyboardModifier {
	defer qt.Recovering("QGuiApplication::queryKeyboardModifiers")

	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_QueryKeyboardModifiers())
}

func QGuiApplication_QuitOnLastWindowClosed() bool {
	defer qt.Recovering("QGuiApplication::quitOnLastWindowClosed")

	return C.QGuiApplication_QGuiApplication_QuitOnLastWindowClosed() != 0
}

func (ptr *QGuiApplication) QuitOnLastWindowClosed() bool {
	defer qt.Recovering("QGuiApplication::quitOnLastWindowClosed")

	return C.QGuiApplication_QGuiApplication_QuitOnLastWindowClosed() != 0
}

func QGuiApplication_RestoreOverrideCursor() {
	defer qt.Recovering("QGuiApplication::restoreOverrideCursor")

	C.QGuiApplication_QGuiApplication_RestoreOverrideCursor()
}

func (ptr *QGuiApplication) RestoreOverrideCursor() {
	defer qt.Recovering("QGuiApplication::restoreOverrideCursor")

	C.QGuiApplication_QGuiApplication_RestoreOverrideCursor()
}

func (ptr *QGuiApplication) SessionId() string {
	defer qt.Recovering("QGuiApplication::sessionId")

	if ptr.Pointer() != nil {
		return C.GoString(C.QGuiApplication_SessionId(ptr.Pointer()))
	}
	return ""
}

func (ptr *QGuiApplication) SessionKey() string {
	defer qt.Recovering("QGuiApplication::sessionKey")

	if ptr.Pointer() != nil {
		return C.GoString(C.QGuiApplication_SessionKey(ptr.Pointer()))
	}
	return ""
}

func QGuiApplication_SetApplicationDisplayName(name string) {
	defer qt.Recovering("QGuiApplication::setApplicationDisplayName")

	C.QGuiApplication_QGuiApplication_SetApplicationDisplayName(C.CString(name))
}

func (ptr *QGuiApplication) SetApplicationDisplayName(name string) {
	defer qt.Recovering("QGuiApplication::setApplicationDisplayName")

	C.QGuiApplication_QGuiApplication_SetApplicationDisplayName(C.CString(name))
}

func QGuiApplication_SetLayoutDirection(direction core.Qt__LayoutDirection) {
	defer qt.Recovering("QGuiApplication::setLayoutDirection")

	C.QGuiApplication_QGuiApplication_SetLayoutDirection(C.int(direction))
}

func (ptr *QGuiApplication) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	defer qt.Recovering("QGuiApplication::setLayoutDirection")

	C.QGuiApplication_QGuiApplication_SetLayoutDirection(C.int(direction))
}

func QGuiApplication_SetOverrideCursor(cursor QCursor_ITF) {
	defer qt.Recovering("QGuiApplication::setOverrideCursor")

	C.QGuiApplication_QGuiApplication_SetOverrideCursor(PointerFromQCursor(cursor))
}

func (ptr *QGuiApplication) SetOverrideCursor(cursor QCursor_ITF) {
	defer qt.Recovering("QGuiApplication::setOverrideCursor")

	C.QGuiApplication_QGuiApplication_SetOverrideCursor(PointerFromQCursor(cursor))
}

func QGuiApplication_SetQuitOnLastWindowClosed(quit bool) {
	defer qt.Recovering("QGuiApplication::setQuitOnLastWindowClosed")

	C.QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(C.int(qt.GoBoolToInt(quit)))
}

func (ptr *QGuiApplication) SetQuitOnLastWindowClosed(quit bool) {
	defer qt.Recovering("QGuiApplication::setQuitOnLastWindowClosed")

	C.QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(C.int(qt.GoBoolToInt(quit)))
}

func QGuiApplication_SetWindowIcon(icon QIcon_ITF) {
	defer qt.Recovering("QGuiApplication::setWindowIcon")

	C.QGuiApplication_QGuiApplication_SetWindowIcon(PointerFromQIcon(icon))
}

func (ptr *QGuiApplication) SetWindowIcon(icon QIcon_ITF) {
	defer qt.Recovering("QGuiApplication::setWindowIcon")

	C.QGuiApplication_QGuiApplication_SetWindowIcon(PointerFromQIcon(icon))
}

func QGuiApplication_WindowIcon() *QIcon {
	defer qt.Recovering("QGuiApplication::windowIcon")

	return NewQIconFromPointer(C.QGuiApplication_QGuiApplication_WindowIcon())
}

func (ptr *QGuiApplication) WindowIcon() *QIcon {
	defer qt.Recovering("QGuiApplication::windowIcon")

	return NewQIconFromPointer(C.QGuiApplication_QGuiApplication_WindowIcon())
}

func NewQGuiApplication(argc int, argv []string) *QGuiApplication {
	defer qt.Recovering("QGuiApplication::QGuiApplication")

	return newQGuiApplicationFromPointer(C.QGuiApplication_NewQGuiApplication(C.int(argc), C.CString(strings.Join(argv, "|"))))
}

//export callbackQGuiApplication_ApplicationStateChanged
func callbackQGuiApplication_ApplicationStateChanged(ptr unsafe.Pointer, ptrName *C.char, state C.int) {
	defer qt.Recovering("callback QGuiApplication::applicationStateChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "applicationStateChanged"); signal != nil {
		signal.(func(core.Qt__ApplicationState))(core.Qt__ApplicationState(state))
	}

}

func (ptr *QGuiApplication) ConnectApplicationStateChanged(f func(state core.Qt__ApplicationState)) {
	defer qt.Recovering("connect QGuiApplication::applicationStateChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectApplicationStateChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "applicationStateChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectApplicationStateChanged() {
	defer qt.Recovering("disconnect QGuiApplication::applicationStateChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectApplicationStateChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "applicationStateChanged")
	}
}

func (ptr *QGuiApplication) ApplicationStateChanged(state core.Qt__ApplicationState) {
	defer qt.Recovering("QGuiApplication::applicationStateChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ApplicationStateChanged(ptr.Pointer(), C.int(state))
	}
}

func QGuiApplication_ChangeOverrideCursor(cursor QCursor_ITF) {
	defer qt.Recovering("QGuiApplication::changeOverrideCursor")

	C.QGuiApplication_QGuiApplication_ChangeOverrideCursor(PointerFromQCursor(cursor))
}

func (ptr *QGuiApplication) ChangeOverrideCursor(cursor QCursor_ITF) {
	defer qt.Recovering("QGuiApplication::changeOverrideCursor")

	C.QGuiApplication_QGuiApplication_ChangeOverrideCursor(PointerFromQCursor(cursor))
}

func QGuiApplication_Clipboard() *QClipboard {
	defer qt.Recovering("QGuiApplication::clipboard")

	return NewQClipboardFromPointer(C.QGuiApplication_QGuiApplication_Clipboard())
}

func (ptr *QGuiApplication) Clipboard() *QClipboard {
	defer qt.Recovering("QGuiApplication::clipboard")

	return NewQClipboardFromPointer(C.QGuiApplication_QGuiApplication_Clipboard())
}

func QGuiApplication_DesktopSettingsAware() bool {
	defer qt.Recovering("QGuiApplication::desktopSettingsAware")

	return C.QGuiApplication_QGuiApplication_DesktopSettingsAware() != 0
}

func (ptr *QGuiApplication) DesktopSettingsAware() bool {
	defer qt.Recovering("QGuiApplication::desktopSettingsAware")

	return C.QGuiApplication_QGuiApplication_DesktopSettingsAware() != 0
}

func (ptr *QGuiApplication) DevicePixelRatio() float64 {
	defer qt.Recovering("QGuiApplication::devicePixelRatio")

	if ptr.Pointer() != nil {
		return float64(C.QGuiApplication_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

//export callbackQGuiApplication_Event
func callbackQGuiApplication_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QGuiApplication::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQGuiApplicationFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QGuiApplication) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QGuiApplication::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QGuiApplication) DisconnectEvent() {
	defer qt.Recovering("disconnect QGuiApplication::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QGuiApplication) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QGuiApplication::event")

	if ptr.Pointer() != nil {
		return C.QGuiApplication_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QGuiApplication) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QGuiApplication::event")

	if ptr.Pointer() != nil {
		return C.QGuiApplication_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func QGuiApplication_Exec() int {
	defer qt.Recovering("QGuiApplication::exec")

	return int(C.QGuiApplication_QGuiApplication_Exec())
}

func (ptr *QGuiApplication) Exec() int {
	defer qt.Recovering("QGuiApplication::exec")

	return int(C.QGuiApplication_QGuiApplication_Exec())
}

func QGuiApplication_FocusObject() *core.QObject {
	defer qt.Recovering("QGuiApplication::focusObject")

	return core.NewQObjectFromPointer(C.QGuiApplication_QGuiApplication_FocusObject())
}

func (ptr *QGuiApplication) FocusObject() *core.QObject {
	defer qt.Recovering("QGuiApplication::focusObject")

	return core.NewQObjectFromPointer(C.QGuiApplication_QGuiApplication_FocusObject())
}

//export callbackQGuiApplication_FocusObjectChanged
func callbackQGuiApplication_FocusObjectChanged(ptr unsafe.Pointer, ptrName *C.char, focusObject unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::focusObjectChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusObjectChanged"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(focusObject))
	}

}

func (ptr *QGuiApplication) ConnectFocusObjectChanged(f func(focusObject *core.QObject)) {
	defer qt.Recovering("connect QGuiApplication::focusObjectChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectFocusObjectChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "focusObjectChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectFocusObjectChanged() {
	defer qt.Recovering("disconnect QGuiApplication::focusObjectChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectFocusObjectChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "focusObjectChanged")
	}
}

func (ptr *QGuiApplication) FocusObjectChanged(focusObject core.QObject_ITF) {
	defer qt.Recovering("QGuiApplication::focusObjectChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_FocusObjectChanged(ptr.Pointer(), core.PointerFromQObject(focusObject))
	}
}

func QGuiApplication_FocusWindow() *QWindow {
	defer qt.Recovering("QGuiApplication::focusWindow")

	return NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_FocusWindow())
}

func (ptr *QGuiApplication) FocusWindow() *QWindow {
	defer qt.Recovering("QGuiApplication::focusWindow")

	return NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_FocusWindow())
}

//export callbackQGuiApplication_FocusWindowChanged
func callbackQGuiApplication_FocusWindowChanged(ptr unsafe.Pointer, ptrName *C.char, focusWindow unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::focusWindowChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusWindowChanged"); signal != nil {
		signal.(func(*QWindow))(NewQWindowFromPointer(focusWindow))
	}

}

func (ptr *QGuiApplication) ConnectFocusWindowChanged(f func(focusWindow *QWindow)) {
	defer qt.Recovering("connect QGuiApplication::focusWindowChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectFocusWindowChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "focusWindowChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectFocusWindowChanged() {
	defer qt.Recovering("disconnect QGuiApplication::focusWindowChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectFocusWindowChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "focusWindowChanged")
	}
}

func (ptr *QGuiApplication) FocusWindowChanged(focusWindow QWindow_ITF) {
	defer qt.Recovering("QGuiApplication::focusWindowChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_FocusWindowChanged(ptr.Pointer(), PointerFromQWindow(focusWindow))
	}
}

func QGuiApplication_Font() *QFont {
	defer qt.Recovering("QGuiApplication::font")

	return NewQFontFromPointer(C.QGuiApplication_QGuiApplication_Font())
}

func (ptr *QGuiApplication) Font() *QFont {
	defer qt.Recovering("QGuiApplication::font")

	return NewQFontFromPointer(C.QGuiApplication_QGuiApplication_Font())
}

//export callbackQGuiApplication_FontDatabaseChanged
func callbackQGuiApplication_FontDatabaseChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QGuiApplication::fontDatabaseChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "fontDatabaseChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGuiApplication) ConnectFontDatabaseChanged(f func()) {
	defer qt.Recovering("connect QGuiApplication::fontDatabaseChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectFontDatabaseChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "fontDatabaseChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectFontDatabaseChanged() {
	defer qt.Recovering("disconnect QGuiApplication::fontDatabaseChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectFontDatabaseChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "fontDatabaseChanged")
	}
}

func (ptr *QGuiApplication) FontDatabaseChanged() {
	defer qt.Recovering("QGuiApplication::fontDatabaseChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_FontDatabaseChanged(ptr.Pointer())
	}
}

func QGuiApplication_InputMethod() *QInputMethod {
	defer qt.Recovering("QGuiApplication::inputMethod")

	return NewQInputMethodFromPointer(C.QGuiApplication_QGuiApplication_InputMethod())
}

func (ptr *QGuiApplication) InputMethod() *QInputMethod {
	defer qt.Recovering("QGuiApplication::inputMethod")

	return NewQInputMethodFromPointer(C.QGuiApplication_QGuiApplication_InputMethod())
}

func QGuiApplication_IsLeftToRight() bool {
	defer qt.Recovering("QGuiApplication::isLeftToRight")

	return C.QGuiApplication_QGuiApplication_IsLeftToRight() != 0
}

func (ptr *QGuiApplication) IsLeftToRight() bool {
	defer qt.Recovering("QGuiApplication::isLeftToRight")

	return C.QGuiApplication_QGuiApplication_IsLeftToRight() != 0
}

func QGuiApplication_IsRightToLeft() bool {
	defer qt.Recovering("QGuiApplication::isRightToLeft")

	return C.QGuiApplication_QGuiApplication_IsRightToLeft() != 0
}

func (ptr *QGuiApplication) IsRightToLeft() bool {
	defer qt.Recovering("QGuiApplication::isRightToLeft")

	return C.QGuiApplication_QGuiApplication_IsRightToLeft() != 0
}

func QGuiApplication_KeyboardModifiers() core.Qt__KeyboardModifier {
	defer qt.Recovering("QGuiApplication::keyboardModifiers")

	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_KeyboardModifiers())
}

func (ptr *QGuiApplication) KeyboardModifiers() core.Qt__KeyboardModifier {
	defer qt.Recovering("QGuiApplication::keyboardModifiers")

	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_KeyboardModifiers())
}

//export callbackQGuiApplication_LastWindowClosed
func callbackQGuiApplication_LastWindowClosed(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QGuiApplication::lastWindowClosed")

	if signal := qt.GetSignal(C.GoString(ptrName), "lastWindowClosed"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGuiApplication) ConnectLastWindowClosed(f func()) {
	defer qt.Recovering("connect QGuiApplication::lastWindowClosed")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectLastWindowClosed(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "lastWindowClosed", f)
	}
}

func (ptr *QGuiApplication) DisconnectLastWindowClosed() {
	defer qt.Recovering("disconnect QGuiApplication::lastWindowClosed")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectLastWindowClosed(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "lastWindowClosed")
	}
}

func (ptr *QGuiApplication) LastWindowClosed() {
	defer qt.Recovering("QGuiApplication::lastWindowClosed")

	if ptr.Pointer() != nil {
		C.QGuiApplication_LastWindowClosed(ptr.Pointer())
	}
}

//export callbackQGuiApplication_LayoutDirectionChanged
func callbackQGuiApplication_LayoutDirectionChanged(ptr unsafe.Pointer, ptrName *C.char, direction C.int) {
	defer qt.Recovering("callback QGuiApplication::layoutDirectionChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "layoutDirectionChanged"); signal != nil {
		signal.(func(core.Qt__LayoutDirection))(core.Qt__LayoutDirection(direction))
	}

}

func (ptr *QGuiApplication) ConnectLayoutDirectionChanged(f func(direction core.Qt__LayoutDirection)) {
	defer qt.Recovering("connect QGuiApplication::layoutDirectionChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectLayoutDirectionChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "layoutDirectionChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectLayoutDirectionChanged() {
	defer qt.Recovering("disconnect QGuiApplication::layoutDirectionChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectLayoutDirectionChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "layoutDirectionChanged")
	}
}

func (ptr *QGuiApplication) LayoutDirectionChanged(direction core.Qt__LayoutDirection) {
	defer qt.Recovering("QGuiApplication::layoutDirectionChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_LayoutDirectionChanged(ptr.Pointer(), C.int(direction))
	}
}

func QGuiApplication_ModalWindow() *QWindow {
	defer qt.Recovering("QGuiApplication::modalWindow")

	return NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_ModalWindow())
}

func (ptr *QGuiApplication) ModalWindow() *QWindow {
	defer qt.Recovering("QGuiApplication::modalWindow")

	return NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_ModalWindow())
}

func QGuiApplication_MouseButtons() core.Qt__MouseButton {
	defer qt.Recovering("QGuiApplication::mouseButtons")

	return core.Qt__MouseButton(C.QGuiApplication_QGuiApplication_MouseButtons())
}

func (ptr *QGuiApplication) MouseButtons() core.Qt__MouseButton {
	defer qt.Recovering("QGuiApplication::mouseButtons")

	return core.Qt__MouseButton(C.QGuiApplication_QGuiApplication_MouseButtons())
}

func QGuiApplication_Palette() *QPalette {
	defer qt.Recovering("QGuiApplication::palette")

	return NewQPaletteFromPointer(C.QGuiApplication_QGuiApplication_Palette())
}

func (ptr *QGuiApplication) Palette() *QPalette {
	defer qt.Recovering("QGuiApplication::palette")

	return NewQPaletteFromPointer(C.QGuiApplication_QGuiApplication_Palette())
}

//export callbackQGuiApplication_PaletteChanged
func callbackQGuiApplication_PaletteChanged(ptr unsafe.Pointer, ptrName *C.char, palette unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::paletteChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "paletteChanged"); signal != nil {
		signal.(func(*QPalette))(NewQPaletteFromPointer(palette))
	}

}

func (ptr *QGuiApplication) ConnectPaletteChanged(f func(palette *QPalette)) {
	defer qt.Recovering("connect QGuiApplication::paletteChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectPaletteChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "paletteChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectPaletteChanged() {
	defer qt.Recovering("disconnect QGuiApplication::paletteChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectPaletteChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "paletteChanged")
	}
}

func (ptr *QGuiApplication) PaletteChanged(palette QPalette_ITF) {
	defer qt.Recovering("QGuiApplication::paletteChanged")

	if ptr.Pointer() != nil {
		C.QGuiApplication_PaletteChanged(ptr.Pointer(), PointerFromQPalette(palette))
	}
}

func QGuiApplication_PrimaryScreen() *QScreen {
	defer qt.Recovering("QGuiApplication::primaryScreen")

	return NewQScreenFromPointer(C.QGuiApplication_QGuiApplication_PrimaryScreen())
}

func (ptr *QGuiApplication) PrimaryScreen() *QScreen {
	defer qt.Recovering("QGuiApplication::primaryScreen")

	return NewQScreenFromPointer(C.QGuiApplication_QGuiApplication_PrimaryScreen())
}

//export callbackQGuiApplication_ScreenAdded
func callbackQGuiApplication_ScreenAdded(ptr unsafe.Pointer, ptrName *C.char, screen unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::screenAdded")

	if signal := qt.GetSignal(C.GoString(ptrName), "screenAdded"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QGuiApplication) ConnectScreenAdded(f func(screen *QScreen)) {
	defer qt.Recovering("connect QGuiApplication::screenAdded")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectScreenAdded(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "screenAdded", f)
	}
}

func (ptr *QGuiApplication) DisconnectScreenAdded() {
	defer qt.Recovering("disconnect QGuiApplication::screenAdded")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectScreenAdded(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "screenAdded")
	}
}

func (ptr *QGuiApplication) ScreenAdded(screen QScreen_ITF) {
	defer qt.Recovering("QGuiApplication::screenAdded")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ScreenAdded(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

//export callbackQGuiApplication_ScreenRemoved
func callbackQGuiApplication_ScreenRemoved(ptr unsafe.Pointer, ptrName *C.char, screen unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::screenRemoved")

	if signal := qt.GetSignal(C.GoString(ptrName), "screenRemoved"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QGuiApplication) ConnectScreenRemoved(f func(screen *QScreen)) {
	defer qt.Recovering("connect QGuiApplication::screenRemoved")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectScreenRemoved(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "screenRemoved", f)
	}
}

func (ptr *QGuiApplication) DisconnectScreenRemoved() {
	defer qt.Recovering("disconnect QGuiApplication::screenRemoved")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectScreenRemoved(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "screenRemoved")
	}
}

func (ptr *QGuiApplication) ScreenRemoved(screen QScreen_ITF) {
	defer qt.Recovering("QGuiApplication::screenRemoved")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ScreenRemoved(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func QGuiApplication_SetDesktopSettingsAware(on bool) {
	defer qt.Recovering("QGuiApplication::setDesktopSettingsAware")

	C.QGuiApplication_QGuiApplication_SetDesktopSettingsAware(C.int(qt.GoBoolToInt(on)))
}

func (ptr *QGuiApplication) SetDesktopSettingsAware(on bool) {
	defer qt.Recovering("QGuiApplication::setDesktopSettingsAware")

	C.QGuiApplication_QGuiApplication_SetDesktopSettingsAware(C.int(qt.GoBoolToInt(on)))
}

func QGuiApplication_SetFont(font QFont_ITF) {
	defer qt.Recovering("QGuiApplication::setFont")

	C.QGuiApplication_QGuiApplication_SetFont(PointerFromQFont(font))
}

func (ptr *QGuiApplication) SetFont(font QFont_ITF) {
	defer qt.Recovering("QGuiApplication::setFont")

	C.QGuiApplication_QGuiApplication_SetFont(PointerFromQFont(font))
}

func QGuiApplication_SetPalette(pal QPalette_ITF) {
	defer qt.Recovering("QGuiApplication::setPalette")

	C.QGuiApplication_QGuiApplication_SetPalette(PointerFromQPalette(pal))
}

func (ptr *QGuiApplication) SetPalette(pal QPalette_ITF) {
	defer qt.Recovering("QGuiApplication::setPalette")

	C.QGuiApplication_QGuiApplication_SetPalette(PointerFromQPalette(pal))
}

func QGuiApplication_StyleHints() *QStyleHints {
	defer qt.Recovering("QGuiApplication::styleHints")

	return NewQStyleHintsFromPointer(C.QGuiApplication_QGuiApplication_StyleHints())
}

func (ptr *QGuiApplication) StyleHints() *QStyleHints {
	defer qt.Recovering("QGuiApplication::styleHints")

	return NewQStyleHintsFromPointer(C.QGuiApplication_QGuiApplication_StyleHints())
}

func QGuiApplication_Sync() {
	defer qt.Recovering("QGuiApplication::sync")

	C.QGuiApplication_QGuiApplication_Sync()
}

func (ptr *QGuiApplication) Sync() {
	defer qt.Recovering("QGuiApplication::sync")

	C.QGuiApplication_QGuiApplication_Sync()
}

func QGuiApplication_TopLevelAt(pos core.QPoint_ITF) *QWindow {
	defer qt.Recovering("QGuiApplication::topLevelAt")

	return NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_TopLevelAt(core.PointerFromQPoint(pos)))
}

func (ptr *QGuiApplication) TopLevelAt(pos core.QPoint_ITF) *QWindow {
	defer qt.Recovering("QGuiApplication::topLevelAt")

	return NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_TopLevelAt(core.PointerFromQPoint(pos)))
}

func (ptr *QGuiApplication) DestroyQGuiApplication() {
	defer qt.Recovering("QGuiApplication::~QGuiApplication")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DestroyQGuiApplication(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQGuiApplication_Quit
func callbackQGuiApplication_Quit(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QGuiApplication::quit")

	if signal := qt.GetSignal(C.GoString(ptrName), "quit"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGuiApplication) ConnectQuit(f func()) {
	defer qt.Recovering("connect QGuiApplication::quit")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "quit", f)
	}
}

func (ptr *QGuiApplication) DisconnectQuit() {
	defer qt.Recovering("disconnect QGuiApplication::quit")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "quit")
	}
}

func (ptr *QGuiApplication) Quit() {
	defer qt.Recovering("QGuiApplication::quit")

	if ptr.Pointer() != nil {
		C.QGuiApplication_Quit(ptr.Pointer())
	}
}

//export callbackQGuiApplication_TimerEvent
func callbackQGuiApplication_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGuiApplicationFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGuiApplication) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QGuiApplication::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QGuiApplication) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QGuiApplication::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QGuiApplication) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QGuiApplication::timerEvent")

	if ptr.Pointer() != nil {
		C.QGuiApplication_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QGuiApplication) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QGuiApplication::timerEvent")

	if ptr.Pointer() != nil {
		C.QGuiApplication_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQGuiApplication_ChildEvent
func callbackQGuiApplication_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGuiApplicationFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGuiApplication) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QGuiApplication::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QGuiApplication) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QGuiApplication::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QGuiApplication) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QGuiApplication::childEvent")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QGuiApplication) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QGuiApplication::childEvent")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGuiApplication_ConnectNotify
func callbackQGuiApplication_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGuiApplicationFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGuiApplication) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QGuiApplication::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QGuiApplication) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QGuiApplication::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QGuiApplication) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGuiApplication::connectNotify")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGuiApplication) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGuiApplication::connectNotify")

	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGuiApplication_CustomEvent
func callbackQGuiApplication_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQGuiApplicationFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGuiApplication) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QGuiApplication::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QGuiApplication) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QGuiApplication::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QGuiApplication) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QGuiApplication::customEvent")

	if ptr.Pointer() != nil {
		C.QGuiApplication_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGuiApplication) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QGuiApplication::customEvent")

	if ptr.Pointer() != nil {
		C.QGuiApplication_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGuiApplication_DeleteLater
func callbackQGuiApplication_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QGuiApplication::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGuiApplication) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QGuiApplication::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QGuiApplication) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QGuiApplication::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QGuiApplication) DeleteLater() {
	defer qt.Recovering("QGuiApplication::deleteLater")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQGuiApplication_DisconnectNotify
func callbackQGuiApplication_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QGuiApplication::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGuiApplicationFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGuiApplication) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QGuiApplication::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QGuiApplication) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QGuiApplication::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QGuiApplication) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGuiApplication::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGuiApplication) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGuiApplication::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGuiApplication_EventFilter
func callbackQGuiApplication_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QGuiApplication::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQGuiApplicationFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QGuiApplication) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QGuiApplication::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QGuiApplication) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QGuiApplication::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QGuiApplication) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QGuiApplication::eventFilter")

	if ptr.Pointer() != nil {
		return C.QGuiApplication_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QGuiApplication) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QGuiApplication::eventFilter")

	if ptr.Pointer() != nil {
		return C.QGuiApplication_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQGuiApplication_MetaObject
func callbackQGuiApplication_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QGuiApplication::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQGuiApplicationFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGuiApplication) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QGuiApplication::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QGuiApplication) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QGuiApplication::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QGuiApplication) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QGuiApplication::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGuiApplication_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGuiApplication) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QGuiApplication::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGuiApplication_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QHelpEvent struct {
	core.QEvent
}

type QHelpEvent_ITF interface {
	core.QEvent_ITF
	QHelpEvent_PTR() *QHelpEvent
}

func (p *QHelpEvent) QHelpEvent_PTR() *QHelpEvent {
	return p
}

func (p *QHelpEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QHelpEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQHelpEvent(ptr QHelpEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHelpEvent_PTR().Pointer()
	}
	return nil
}

func NewQHelpEventFromPointer(ptr unsafe.Pointer) *QHelpEvent {
	var n = new(QHelpEvent)
	n.SetPointer(ptr)
	return n
}

func newQHelpEventFromPointer(ptr unsafe.Pointer) *QHelpEvent {
	var n = NewQHelpEventFromPointer(ptr)
	return n
}

func NewQHelpEvent(ty core.QEvent__Type, pos core.QPoint_ITF, globalPos core.QPoint_ITF) *QHelpEvent {
	defer qt.Recovering("QHelpEvent::QHelpEvent")

	return newQHelpEventFromPointer(C.QHelpEvent_NewQHelpEvent(C.int(ty), core.PointerFromQPoint(pos), core.PointerFromQPoint(globalPos)))
}

func (ptr *QHelpEvent) GlobalPos() *core.QPoint {
	defer qt.Recovering("QHelpEvent::globalPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QHelpEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHelpEvent) GlobalX() int {
	defer qt.Recovering("QHelpEvent::globalX")

	if ptr.Pointer() != nil {
		return int(C.QHelpEvent_GlobalX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QHelpEvent) GlobalY() int {
	defer qt.Recovering("QHelpEvent::globalY")

	if ptr.Pointer() != nil {
		return int(C.QHelpEvent_GlobalY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QHelpEvent) Pos() *core.QPoint {
	defer qt.Recovering("QHelpEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QHelpEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHelpEvent) X() int {
	defer qt.Recovering("QHelpEvent::x")

	if ptr.Pointer() != nil {
		return int(C.QHelpEvent_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QHelpEvent) Y() int {
	defer qt.Recovering("QHelpEvent::y")

	if ptr.Pointer() != nil {
		return int(C.QHelpEvent_Y(ptr.Pointer()))
	}
	return 0
}

type QHideEvent struct {
	core.QEvent
}

type QHideEvent_ITF interface {
	core.QEvent_ITF
	QHideEvent_PTR() *QHideEvent
}

func (p *QHideEvent) QHideEvent_PTR() *QHideEvent {
	return p
}

func (p *QHideEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QHideEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQHideEvent(ptr QHideEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHideEvent_PTR().Pointer()
	}
	return nil
}

func NewQHideEventFromPointer(ptr unsafe.Pointer) *QHideEvent {
	var n = new(QHideEvent)
	n.SetPointer(ptr)
	return n
}

func newQHideEventFromPointer(ptr unsafe.Pointer) *QHideEvent {
	var n = NewQHideEventFromPointer(ptr)
	return n
}

func NewQHideEvent() *QHideEvent {
	defer qt.Recovering("QHideEvent::QHideEvent")

	return newQHideEventFromPointer(C.QHideEvent_NewQHideEvent())
}

type QHoverEvent struct {
	QInputEvent
}

type QHoverEvent_ITF interface {
	QInputEvent_ITF
	QHoverEvent_PTR() *QHoverEvent
}

func (p *QHoverEvent) QHoverEvent_PTR() *QHoverEvent {
	return p
}

func (p *QHoverEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QHoverEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQHoverEvent(ptr QHoverEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHoverEvent_PTR().Pointer()
	}
	return nil
}

func NewQHoverEventFromPointer(ptr unsafe.Pointer) *QHoverEvent {
	var n = new(QHoverEvent)
	n.SetPointer(ptr)
	return n
}

func newQHoverEventFromPointer(ptr unsafe.Pointer) *QHoverEvent {
	var n = NewQHoverEventFromPointer(ptr)
	return n
}

func NewQHoverEvent(ty core.QEvent__Type, pos core.QPointF_ITF, oldPos core.QPointF_ITF, modifiers core.Qt__KeyboardModifier) *QHoverEvent {
	defer qt.Recovering("QHoverEvent::QHoverEvent")

	return newQHoverEventFromPointer(C.QHoverEvent_NewQHoverEvent(C.int(ty), core.PointerFromQPointF(pos), core.PointerFromQPointF(oldPos), C.int(modifiers)))
}

func (ptr *QHoverEvent) OldPos() *core.QPoint {
	defer qt.Recovering("QHoverEvent::oldPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QHoverEvent_OldPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHoverEvent) OldPosF() *core.QPointF {
	defer qt.Recovering("QHoverEvent::oldPosF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QHoverEvent_OldPosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHoverEvent) Pos() *core.QPoint {
	defer qt.Recovering("QHoverEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QHoverEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHoverEvent) PosF() *core.QPointF {
	defer qt.Recovering("QHoverEvent::posF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QHoverEvent_PosF(ptr.Pointer()))
	}
	return nil
}

//QIcon::Mode
type QIcon__Mode int64

const (
	QIcon__Normal   = QIcon__Mode(0)
	QIcon__Disabled = QIcon__Mode(1)
	QIcon__Active   = QIcon__Mode(2)
	QIcon__Selected = QIcon__Mode(3)
)

//QIcon::State
type QIcon__State int64

const (
	QIcon__On  = QIcon__State(0)
	QIcon__Off = QIcon__State(1)
)

type QIcon struct {
	ptr unsafe.Pointer
}

type QIcon_ITF interface {
	QIcon_PTR() *QIcon
}

func (p *QIcon) QIcon_PTR() *QIcon {
	return p
}

func (p *QIcon) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QIcon) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQIcon(ptr QIcon_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIcon_PTR().Pointer()
	}
	return nil
}

func NewQIconFromPointer(ptr unsafe.Pointer) *QIcon {
	var n = new(QIcon)
	n.SetPointer(ptr)
	return n
}

func newQIconFromPointer(ptr unsafe.Pointer) *QIcon {
	var n = NewQIconFromPointer(ptr)
	return n
}

func NewQIcon() *QIcon {
	defer qt.Recovering("QIcon::QIcon")

	return newQIconFromPointer(C.QIcon_NewQIcon())
}

func NewQIcon4(other QIcon_ITF) *QIcon {
	defer qt.Recovering("QIcon::QIcon")

	return newQIconFromPointer(C.QIcon_NewQIcon4(PointerFromQIcon(other)))
}

func NewQIcon6(engine QIconEngine_ITF) *QIcon {
	defer qt.Recovering("QIcon::QIcon")

	return newQIconFromPointer(C.QIcon_NewQIcon6(PointerFromQIconEngine(engine)))
}

func NewQIcon3(other QIcon_ITF) *QIcon {
	defer qt.Recovering("QIcon::QIcon")

	return newQIconFromPointer(C.QIcon_NewQIcon3(PointerFromQIcon(other)))
}

func NewQIcon2(pixmap QPixmap_ITF) *QIcon {
	defer qt.Recovering("QIcon::QIcon")

	return newQIconFromPointer(C.QIcon_NewQIcon2(PointerFromQPixmap(pixmap)))
}

func NewQIcon5(fileName string) *QIcon {
	defer qt.Recovering("QIcon::QIcon")

	return newQIconFromPointer(C.QIcon_NewQIcon5(C.CString(fileName)))
}

func (ptr *QIcon) ActualSize2(window QWindow_ITF, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	defer qt.Recovering("QIcon::actualSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QIcon_ActualSize2(ptr.Pointer(), PointerFromQWindow(window), core.PointerFromQSize(size), C.int(mode), C.int(state)))
	}
	return nil
}

func (ptr *QIcon) ActualSize(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	defer qt.Recovering("QIcon::actualSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QIcon_ActualSize(ptr.Pointer(), core.PointerFromQSize(size), C.int(mode), C.int(state)))
	}
	return nil
}

func (ptr *QIcon) AddFile(fileName string, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("QIcon::addFile")

	if ptr.Pointer() != nil {
		C.QIcon_AddFile(ptr.Pointer(), C.CString(fileName), core.PointerFromQSize(size), C.int(mode), C.int(state))
	}
}

func (ptr *QIcon) AddPixmap(pixmap QPixmap_ITF, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("QIcon::addPixmap")

	if ptr.Pointer() != nil {
		C.QIcon_AddPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap), C.int(mode), C.int(state))
	}
}

func (ptr *QIcon) CacheKey() int64 {
	defer qt.Recovering("QIcon::cacheKey")

	if ptr.Pointer() != nil {
		return int64(C.QIcon_CacheKey(ptr.Pointer()))
	}
	return 0
}

func QIcon_FromTheme(name string, fallback QIcon_ITF) *QIcon {
	defer qt.Recovering("QIcon::fromTheme")

	return NewQIconFromPointer(C.QIcon_QIcon_FromTheme(C.CString(name), PointerFromQIcon(fallback)))
}

func (ptr *QIcon) FromTheme(name string, fallback QIcon_ITF) *QIcon {
	defer qt.Recovering("QIcon::fromTheme")

	return NewQIconFromPointer(C.QIcon_QIcon_FromTheme(C.CString(name), PointerFromQIcon(fallback)))
}

func QIcon_HasThemeIcon(name string) bool {
	defer qt.Recovering("QIcon::hasThemeIcon")

	return C.QIcon_QIcon_HasThemeIcon(C.CString(name)) != 0
}

func (ptr *QIcon) HasThemeIcon(name string) bool {
	defer qt.Recovering("QIcon::hasThemeIcon")

	return C.QIcon_QIcon_HasThemeIcon(C.CString(name)) != 0
}

func (ptr *QIcon) IsNull() bool {
	defer qt.Recovering("QIcon::isNull")

	if ptr.Pointer() != nil {
		return C.QIcon_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIcon) Name() string {
	defer qt.Recovering("QIcon::name")

	if ptr.Pointer() != nil {
		return C.GoString(C.QIcon_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIcon) Paint(painter QPainter_ITF, rect core.QRect_ITF, alignment core.Qt__AlignmentFlag, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("QIcon::paint")

	if ptr.Pointer() != nil {
		C.QIcon_Paint(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRect(rect), C.int(alignment), C.int(mode), C.int(state))
	}
}

func (ptr *QIcon) Paint2(painter QPainter_ITF, x int, y int, w int, h int, alignment core.Qt__AlignmentFlag, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("QIcon::paint")

	if ptr.Pointer() != nil {
		C.QIcon_Paint2(ptr.Pointer(), PointerFromQPainter(painter), C.int(x), C.int(y), C.int(w), C.int(h), C.int(alignment), C.int(mode), C.int(state))
	}
}

func (ptr *QIcon) Pixmap2(window QWindow_ITF, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	defer qt.Recovering("QIcon::pixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QIcon_Pixmap2(ptr.Pointer(), PointerFromQWindow(window), core.PointerFromQSize(size), C.int(mode), C.int(state)))
	}
	return nil
}

func (ptr *QIcon) Pixmap(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	defer qt.Recovering("QIcon::pixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QIcon_Pixmap(ptr.Pointer(), core.PointerFromQSize(size), C.int(mode), C.int(state)))
	}
	return nil
}

func (ptr *QIcon) Pixmap4(extent int, mode QIcon__Mode, state QIcon__State) *QPixmap {
	defer qt.Recovering("QIcon::pixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QIcon_Pixmap4(ptr.Pointer(), C.int(extent), C.int(mode), C.int(state)))
	}
	return nil
}

func (ptr *QIcon) Pixmap3(w int, h int, mode QIcon__Mode, state QIcon__State) *QPixmap {
	defer qt.Recovering("QIcon::pixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QIcon_Pixmap3(ptr.Pointer(), C.int(w), C.int(h), C.int(mode), C.int(state)))
	}
	return nil
}

func QIcon_SetThemeName(name string) {
	defer qt.Recovering("QIcon::setThemeName")

	C.QIcon_QIcon_SetThemeName(C.CString(name))
}

func (ptr *QIcon) SetThemeName(name string) {
	defer qt.Recovering("QIcon::setThemeName")

	C.QIcon_QIcon_SetThemeName(C.CString(name))
}

func QIcon_SetThemeSearchPaths(paths []string) {
	defer qt.Recovering("QIcon::setThemeSearchPaths")

	C.QIcon_QIcon_SetThemeSearchPaths(C.CString(strings.Join(paths, "|")))
}

func (ptr *QIcon) SetThemeSearchPaths(paths []string) {
	defer qt.Recovering("QIcon::setThemeSearchPaths")

	C.QIcon_QIcon_SetThemeSearchPaths(C.CString(strings.Join(paths, "|")))
}

func (ptr *QIcon) Swap(other QIcon_ITF) {
	defer qt.Recovering("QIcon::swap")

	if ptr.Pointer() != nil {
		C.QIcon_Swap(ptr.Pointer(), PointerFromQIcon(other))
	}
}

func QIcon_ThemeName() string {
	defer qt.Recovering("QIcon::themeName")

	return C.GoString(C.QIcon_QIcon_ThemeName())
}

func (ptr *QIcon) ThemeName() string {
	defer qt.Recovering("QIcon::themeName")

	return C.GoString(C.QIcon_QIcon_ThemeName())
}

func QIcon_ThemeSearchPaths() []string {
	defer qt.Recovering("QIcon::themeSearchPaths")

	return strings.Split(C.GoString(C.QIcon_QIcon_ThemeSearchPaths()), "|")
}

func (ptr *QIcon) ThemeSearchPaths() []string {
	defer qt.Recovering("QIcon::themeSearchPaths")

	return strings.Split(C.GoString(C.QIcon_QIcon_ThemeSearchPaths()), "|")
}

func (ptr *QIcon) DestroyQIcon() {
	defer qt.Recovering("QIcon::~QIcon")

	if ptr.Pointer() != nil {
		C.QIcon_DestroyQIcon(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QIconDragEvent struct {
	core.QEvent
}

type QIconDragEvent_ITF interface {
	core.QEvent_ITF
	QIconDragEvent_PTR() *QIconDragEvent
}

func (p *QIconDragEvent) QIconDragEvent_PTR() *QIconDragEvent {
	return p
}

func (p *QIconDragEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QIconDragEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQIconDragEvent(ptr QIconDragEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIconDragEvent_PTR().Pointer()
	}
	return nil
}

func NewQIconDragEventFromPointer(ptr unsafe.Pointer) *QIconDragEvent {
	var n = new(QIconDragEvent)
	n.SetPointer(ptr)
	return n
}

func newQIconDragEventFromPointer(ptr unsafe.Pointer) *QIconDragEvent {
	var n = NewQIconDragEventFromPointer(ptr)
	return n
}

func NewQIconDragEvent() *QIconDragEvent {
	defer qt.Recovering("QIconDragEvent::QIconDragEvent")

	return newQIconDragEventFromPointer(C.QIconDragEvent_NewQIconDragEvent())
}

//QIconEngine::IconEngineHook
type QIconEngine__IconEngineHook int64

const (
	QIconEngine__AvailableSizesHook = QIconEngine__IconEngineHook(1)
	QIconEngine__IconNameHook       = QIconEngine__IconEngineHook(2)
)

type QIconEngine struct {
	ptr unsafe.Pointer
}

type QIconEngine_ITF interface {
	QIconEngine_PTR() *QIconEngine
}

func (p *QIconEngine) QIconEngine_PTR() *QIconEngine {
	return p
}

func (p *QIconEngine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QIconEngine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQIconEngine(ptr QIconEngine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIconEngine_PTR().Pointer()
	}
	return nil
}

func NewQIconEngineFromPointer(ptr unsafe.Pointer) *QIconEngine {
	var n = new(QIconEngine)
	n.SetPointer(ptr)
	return n
}

func newQIconEngineFromPointer(ptr unsafe.Pointer) *QIconEngine {
	var n = NewQIconEngineFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QIconEngine_") {
		n.SetObjectNameAbs("QIconEngine_" + qt.Identifier())
	}
	return n
}

//export callbackQIconEngine_ActualSize
func callbackQIconEngine_ActualSize(ptr unsafe.Pointer, ptrName *C.char, size unsafe.Pointer, mode C.int, state C.int) unsafe.Pointer {
	defer qt.Recovering("callback QIconEngine::actualSize")

	if signal := qt.GetSignal(C.GoString(ptrName), "actualSize"); signal != nil {
		return core.PointerFromQSize(signal.(func(*core.QSize, QIcon__Mode, QIcon__State) *core.QSize)(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
	}

	return core.PointerFromQSize(NewQIconEngineFromPointer(ptr).ActualSizeDefault(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
}

func (ptr *QIconEngine) ConnectActualSize(f func(size *core.QSize, mode QIcon__Mode, state QIcon__State) *core.QSize) {
	defer qt.Recovering("connect QIconEngine::actualSize")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "actualSize", f)
	}
}

func (ptr *QIconEngine) DisconnectActualSize() {
	defer qt.Recovering("disconnect QIconEngine::actualSize")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "actualSize")
	}
}

func (ptr *QIconEngine) ActualSize(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	defer qt.Recovering("QIconEngine::actualSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QIconEngine_ActualSize(ptr.Pointer(), core.PointerFromQSize(size), C.int(mode), C.int(state)))
	}
	return nil
}

func (ptr *QIconEngine) ActualSizeDefault(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	defer qt.Recovering("QIconEngine::actualSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QIconEngine_ActualSizeDefault(ptr.Pointer(), core.PointerFromQSize(size), C.int(mode), C.int(state)))
	}
	return nil
}

//export callbackQIconEngine_AddFile
func callbackQIconEngine_AddFile(ptr unsafe.Pointer, ptrName *C.char, fileName *C.char, size unsafe.Pointer, mode C.int, state C.int) {
	defer qt.Recovering("callback QIconEngine::addFile")

	if signal := qt.GetSignal(C.GoString(ptrName), "addFile"); signal != nil {
		signal.(func(string, *core.QSize, QIcon__Mode, QIcon__State))(C.GoString(fileName), core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state))
	} else {
		NewQIconEngineFromPointer(ptr).AddFileDefault(C.GoString(fileName), core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state))
	}
}

func (ptr *QIconEngine) ConnectAddFile(f func(fileName string, size *core.QSize, mode QIcon__Mode, state QIcon__State)) {
	defer qt.Recovering("connect QIconEngine::addFile")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "addFile", f)
	}
}

func (ptr *QIconEngine) DisconnectAddFile() {
	defer qt.Recovering("disconnect QIconEngine::addFile")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "addFile")
	}
}

func (ptr *QIconEngine) AddFile(fileName string, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("QIconEngine::addFile")

	if ptr.Pointer() != nil {
		C.QIconEngine_AddFile(ptr.Pointer(), C.CString(fileName), core.PointerFromQSize(size), C.int(mode), C.int(state))
	}
}

func (ptr *QIconEngine) AddFileDefault(fileName string, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("QIconEngine::addFile")

	if ptr.Pointer() != nil {
		C.QIconEngine_AddFileDefault(ptr.Pointer(), C.CString(fileName), core.PointerFromQSize(size), C.int(mode), C.int(state))
	}
}

//export callbackQIconEngine_AddPixmap
func callbackQIconEngine_AddPixmap(ptr unsafe.Pointer, ptrName *C.char, pixmap unsafe.Pointer, mode C.int, state C.int) {
	defer qt.Recovering("callback QIconEngine::addPixmap")

	if signal := qt.GetSignal(C.GoString(ptrName), "addPixmap"); signal != nil {
		signal.(func(*QPixmap, QIcon__Mode, QIcon__State))(NewQPixmapFromPointer(pixmap), QIcon__Mode(mode), QIcon__State(state))
	} else {
		NewQIconEngineFromPointer(ptr).AddPixmapDefault(NewQPixmapFromPointer(pixmap), QIcon__Mode(mode), QIcon__State(state))
	}
}

func (ptr *QIconEngine) ConnectAddPixmap(f func(pixmap *QPixmap, mode QIcon__Mode, state QIcon__State)) {
	defer qt.Recovering("connect QIconEngine::addPixmap")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "addPixmap", f)
	}
}

func (ptr *QIconEngine) DisconnectAddPixmap() {
	defer qt.Recovering("disconnect QIconEngine::addPixmap")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "addPixmap")
	}
}

func (ptr *QIconEngine) AddPixmap(pixmap QPixmap_ITF, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("QIconEngine::addPixmap")

	if ptr.Pointer() != nil {
		C.QIconEngine_AddPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap), C.int(mode), C.int(state))
	}
}

func (ptr *QIconEngine) AddPixmapDefault(pixmap QPixmap_ITF, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("QIconEngine::addPixmap")

	if ptr.Pointer() != nil {
		C.QIconEngine_AddPixmapDefault(ptr.Pointer(), PointerFromQPixmap(pixmap), C.int(mode), C.int(state))
	}
}

//export callbackQIconEngine_Clone
func callbackQIconEngine_Clone(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QIconEngine::clone")

	if signal := qt.GetSignal(C.GoString(ptrName), "clone"); signal != nil {
		return PointerFromQIconEngine(signal.(func() *QIconEngine)())
	}

	return PointerFromQIconEngine(nil)
}

func (ptr *QIconEngine) ConnectClone(f func() *QIconEngine) {
	defer qt.Recovering("connect QIconEngine::clone")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "clone", f)
	}
}

func (ptr *QIconEngine) DisconnectClone() {
	defer qt.Recovering("disconnect QIconEngine::clone")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "clone")
	}
}

func (ptr *QIconEngine) Clone() *QIconEngine {
	defer qt.Recovering("QIconEngine::clone")

	if ptr.Pointer() != nil {
		return NewQIconEngineFromPointer(C.QIconEngine_Clone(ptr.Pointer()))
	}
	return nil
}

//export callbackQIconEngine_IconName
func callbackQIconEngine_IconName(ptr unsafe.Pointer, ptrName *C.char) *C.char {
	defer qt.Recovering("callback QIconEngine::iconName")

	if signal := qt.GetSignal(C.GoString(ptrName), "iconName"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQIconEngineFromPointer(ptr).IconNameDefault())
}

func (ptr *QIconEngine) ConnectIconName(f func() string) {
	defer qt.Recovering("connect QIconEngine::iconName")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "iconName", f)
	}
}

func (ptr *QIconEngine) DisconnectIconName() {
	defer qt.Recovering("disconnect QIconEngine::iconName")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "iconName")
	}
}

func (ptr *QIconEngine) IconName() string {
	defer qt.Recovering("QIconEngine::iconName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QIconEngine_IconName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIconEngine) IconNameDefault() string {
	defer qt.Recovering("QIconEngine::iconName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QIconEngine_IconNameDefault(ptr.Pointer()))
	}
	return ""
}

//export callbackQIconEngine_Key
func callbackQIconEngine_Key(ptr unsafe.Pointer, ptrName *C.char) *C.char {
	defer qt.Recovering("callback QIconEngine::key")

	if signal := qt.GetSignal(C.GoString(ptrName), "key"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQIconEngineFromPointer(ptr).KeyDefault())
}

func (ptr *QIconEngine) ConnectKey(f func() string) {
	defer qt.Recovering("connect QIconEngine::key")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "key", f)
	}
}

func (ptr *QIconEngine) DisconnectKey() {
	defer qt.Recovering("disconnect QIconEngine::key")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "key")
	}
}

func (ptr *QIconEngine) Key() string {
	defer qt.Recovering("QIconEngine::key")

	if ptr.Pointer() != nil {
		return C.GoString(C.QIconEngine_Key(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIconEngine) KeyDefault() string {
	defer qt.Recovering("QIconEngine::key")

	if ptr.Pointer() != nil {
		return C.GoString(C.QIconEngine_KeyDefault(ptr.Pointer()))
	}
	return ""
}

//export callbackQIconEngine_Paint
func callbackQIconEngine_Paint(ptr unsafe.Pointer, ptrName *C.char, painter unsafe.Pointer, rect unsafe.Pointer, mode C.int, state C.int) {
	defer qt.Recovering("callback QIconEngine::paint")

	if signal := qt.GetSignal(C.GoString(ptrName), "paint"); signal != nil {
		signal.(func(*QPainter, *core.QRect, QIcon__Mode, QIcon__State))(NewQPainterFromPointer(painter), core.NewQRectFromPointer(rect), QIcon__Mode(mode), QIcon__State(state))
	}

}

func (ptr *QIconEngine) ConnectPaint(f func(painter *QPainter, rect *core.QRect, mode QIcon__Mode, state QIcon__State)) {
	defer qt.Recovering("connect QIconEngine::paint")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "paint", f)
	}
}

func (ptr *QIconEngine) DisconnectPaint(painter QPainter_ITF, rect core.QRect_ITF, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("disconnect QIconEngine::paint")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "paint")
	}
}

func (ptr *QIconEngine) Paint(painter QPainter_ITF, rect core.QRect_ITF, mode QIcon__Mode, state QIcon__State) {
	defer qt.Recovering("QIconEngine::paint")

	if ptr.Pointer() != nil {
		C.QIconEngine_Paint(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRect(rect), C.int(mode), C.int(state))
	}
}

//export callbackQIconEngine_Pixmap
func callbackQIconEngine_Pixmap(ptr unsafe.Pointer, ptrName *C.char, size unsafe.Pointer, mode C.int, state C.int) unsafe.Pointer {
	defer qt.Recovering("callback QIconEngine::pixmap")

	if signal := qt.GetSignal(C.GoString(ptrName), "pixmap"); signal != nil {
		return PointerFromQPixmap(signal.(func(*core.QSize, QIcon__Mode, QIcon__State) *QPixmap)(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
	}

	return PointerFromQPixmap(NewQIconEngineFromPointer(ptr).PixmapDefault(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
}

func (ptr *QIconEngine) ConnectPixmap(f func(size *core.QSize, mode QIcon__Mode, state QIcon__State) *QPixmap) {
	defer qt.Recovering("connect QIconEngine::pixmap")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "pixmap", f)
	}
}

func (ptr *QIconEngine) DisconnectPixmap() {
	defer qt.Recovering("disconnect QIconEngine::pixmap")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "pixmap")
	}
}

func (ptr *QIconEngine) Pixmap(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	defer qt.Recovering("QIconEngine::pixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QIconEngine_Pixmap(ptr.Pointer(), core.PointerFromQSize(size), C.int(mode), C.int(state)))
	}
	return nil
}

func (ptr *QIconEngine) PixmapDefault(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	defer qt.Recovering("QIconEngine::pixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QIconEngine_PixmapDefault(ptr.Pointer(), core.PointerFromQSize(size), C.int(mode), C.int(state)))
	}
	return nil
}

//export callbackQIconEngine_Virtual_hook
func callbackQIconEngine_Virtual_hook(ptr unsafe.Pointer, ptrName *C.char, id C.int, data unsafe.Pointer) {
	defer qt.Recovering("callback QIconEngine::virtual_hook")

	if signal := qt.GetSignal(C.GoString(ptrName), "virtual_hook"); signal != nil {
		signal.(func(int, unsafe.Pointer))(int(id), data)
	} else {
		NewQIconEngineFromPointer(ptr).Virtual_hookDefault(int(id), data)
	}
}

func (ptr *QIconEngine) ConnectVirtual_hook(f func(id int, data unsafe.Pointer)) {
	defer qt.Recovering("connect QIconEngine::virtual_hook")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "virtual_hook", f)
	}
}

func (ptr *QIconEngine) DisconnectVirtual_hook() {
	defer qt.Recovering("disconnect QIconEngine::virtual_hook")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "virtual_hook")
	}
}

func (ptr *QIconEngine) Virtual_hook(id int, data unsafe.Pointer) {
	defer qt.Recovering("QIconEngine::virtual_hook")

	if ptr.Pointer() != nil {
		C.QIconEngine_Virtual_hook(ptr.Pointer(), C.int(id), data)
	}
}

func (ptr *QIconEngine) Virtual_hookDefault(id int, data unsafe.Pointer) {
	defer qt.Recovering("QIconEngine::virtual_hook")

	if ptr.Pointer() != nil {
		C.QIconEngine_Virtual_hookDefault(ptr.Pointer(), C.int(id), data)
	}
}

func (ptr *QIconEngine) DestroyQIconEngine() {
	defer qt.Recovering("QIconEngine::~QIconEngine")

	if ptr.Pointer() != nil {
		C.QIconEngine_DestroyQIconEngine(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QIconEngine) ObjectNameAbs() string {
	defer qt.Recovering("QIconEngine::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QIconEngine_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIconEngine) SetObjectNameAbs(name string) {
	defer qt.Recovering("QIconEngine::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QIconEngine_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QIconEnginePlugin struct {
	core.QObject
}

type QIconEnginePlugin_ITF interface {
	core.QObject_ITF
	QIconEnginePlugin_PTR() *QIconEnginePlugin
}

func (p *QIconEnginePlugin) QIconEnginePlugin_PTR() *QIconEnginePlugin {
	return p
}

func (p *QIconEnginePlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QIconEnginePlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQIconEnginePlugin(ptr QIconEnginePlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIconEnginePlugin_PTR().Pointer()
	}
	return nil
}

func NewQIconEnginePluginFromPointer(ptr unsafe.Pointer) *QIconEnginePlugin {
	var n = new(QIconEnginePlugin)
	n.SetPointer(ptr)
	return n
}

func newQIconEnginePluginFromPointer(ptr unsafe.Pointer) *QIconEnginePlugin {
	var n = NewQIconEnginePluginFromPointer(ptr)
	for len(n.ObjectName()) < len("QIconEnginePlugin_") {
		n.SetObjectName("QIconEnginePlugin_" + qt.Identifier())
	}
	return n
}

func NewQIconEnginePlugin(parent core.QObject_ITF) *QIconEnginePlugin {
	defer qt.Recovering("QIconEnginePlugin::QIconEnginePlugin")

	return newQIconEnginePluginFromPointer(C.QIconEnginePlugin_NewQIconEnginePlugin(core.PointerFromQObject(parent)))
}

//export callbackQIconEnginePlugin_Create
func callbackQIconEnginePlugin_Create(ptr unsafe.Pointer, ptrName *C.char, filename *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QIconEnginePlugin::create")

	if signal := qt.GetSignal(C.GoString(ptrName), "create"); signal != nil {
		return PointerFromQIconEngine(signal.(func(string) *QIconEngine)(C.GoString(filename)))
	}

	return PointerFromQIconEngine(nil)
}

func (ptr *QIconEnginePlugin) ConnectCreate(f func(filename string) *QIconEngine) {
	defer qt.Recovering("connect QIconEnginePlugin::create")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "create", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectCreate(filename string) {
	defer qt.Recovering("disconnect QIconEnginePlugin::create")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "create")
	}
}

func (ptr *QIconEnginePlugin) Create(filename string) *QIconEngine {
	defer qt.Recovering("QIconEnginePlugin::create")

	if ptr.Pointer() != nil {
		return NewQIconEngineFromPointer(C.QIconEnginePlugin_Create(ptr.Pointer(), C.CString(filename)))
	}
	return nil
}

func (ptr *QIconEnginePlugin) DestroyQIconEnginePlugin() {
	defer qt.Recovering("QIconEnginePlugin::~QIconEnginePlugin")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DestroyQIconEnginePlugin(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQIconEnginePlugin_TimerEvent
func callbackQIconEnginePlugin_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QIconEnginePlugin::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQIconEnginePluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QIconEnginePlugin) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QIconEnginePlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QIconEnginePlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QIconEnginePlugin) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QIconEnginePlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QIconEnginePlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QIconEnginePlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQIconEnginePlugin_ChildEvent
func callbackQIconEnginePlugin_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QIconEnginePlugin::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQIconEnginePluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QIconEnginePlugin) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QIconEnginePlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QIconEnginePlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QIconEnginePlugin) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QIconEnginePlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QIconEnginePlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QIconEnginePlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQIconEnginePlugin_ConnectNotify
func callbackQIconEnginePlugin_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QIconEnginePlugin::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIconEnginePluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIconEnginePlugin) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QIconEnginePlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QIconEnginePlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QIconEnginePlugin) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QIconEnginePlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIconEnginePlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QIconEnginePlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIconEnginePlugin_CustomEvent
func callbackQIconEnginePlugin_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QIconEnginePlugin::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQIconEnginePluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QIconEnginePlugin) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QIconEnginePlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QIconEnginePlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QIconEnginePlugin) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QIconEnginePlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QIconEnginePlugin) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QIconEnginePlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQIconEnginePlugin_DeleteLater
func callbackQIconEnginePlugin_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QIconEnginePlugin::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QIconEnginePlugin) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QIconEnginePlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QIconEnginePlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QIconEnginePlugin) DeleteLater() {
	defer qt.Recovering("QIconEnginePlugin::deleteLater")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQIconEnginePlugin_DisconnectNotify
func callbackQIconEnginePlugin_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QIconEnginePlugin::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIconEnginePluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIconEnginePlugin) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QIconEnginePlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QIconEnginePlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QIconEnginePlugin) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QIconEnginePlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIconEnginePlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QIconEnginePlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIconEnginePlugin_Event
func callbackQIconEnginePlugin_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QIconEnginePlugin::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQIconEnginePluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QIconEnginePlugin) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QIconEnginePlugin::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectEvent() {
	defer qt.Recovering("disconnect QIconEnginePlugin::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QIconEnginePlugin) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QIconEnginePlugin::event")

	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QIconEnginePlugin) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QIconEnginePlugin::event")

	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQIconEnginePlugin_EventFilter
func callbackQIconEnginePlugin_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QIconEnginePlugin::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQIconEnginePluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QIconEnginePlugin) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QIconEnginePlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QIconEnginePlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QIconEnginePlugin) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QIconEnginePlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QIconEnginePlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QIconEnginePlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQIconEnginePlugin_MetaObject
func callbackQIconEnginePlugin_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QIconEnginePlugin::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQIconEnginePluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QIconEnginePlugin) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QIconEnginePlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QIconEnginePlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QIconEnginePlugin) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QIconEnginePlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QIconEnginePlugin_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QIconEnginePlugin) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QIconEnginePlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QIconEnginePlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QImage::Format
type QImage__Format int64

const (
	QImage__Format_Invalid                = QImage__Format(0)
	QImage__Format_Mono                   = QImage__Format(1)
	QImage__Format_MonoLSB                = QImage__Format(2)
	QImage__Format_Indexed8               = QImage__Format(3)
	QImage__Format_RGB32                  = QImage__Format(4)
	QImage__Format_ARGB32                 = QImage__Format(5)
	QImage__Format_ARGB32_Premultiplied   = QImage__Format(6)
	QImage__Format_RGB16                  = QImage__Format(7)
	QImage__Format_ARGB8565_Premultiplied = QImage__Format(8)
	QImage__Format_RGB666                 = QImage__Format(9)
	QImage__Format_ARGB6666_Premultiplied = QImage__Format(10)
	QImage__Format_RGB555                 = QImage__Format(11)
	QImage__Format_ARGB8555_Premultiplied = QImage__Format(12)
	QImage__Format_RGB888                 = QImage__Format(13)
	QImage__Format_RGB444                 = QImage__Format(14)
	QImage__Format_ARGB4444_Premultiplied = QImage__Format(15)
	QImage__Format_RGBX8888               = QImage__Format(16)
	QImage__Format_RGBA8888               = QImage__Format(17)
	QImage__Format_RGBA8888_Premultiplied = QImage__Format(18)
	QImage__Format_BGR30                  = QImage__Format(19)
	QImage__Format_A2BGR30_Premultiplied  = QImage__Format(20)
	QImage__Format_RGB30                  = QImage__Format(21)
	QImage__Format_A2RGB30_Premultiplied  = QImage__Format(22)
	QImage__Format_Alpha8                 = QImage__Format(23)
	QImage__Format_Grayscale8             = QImage__Format(24)
)

//QImage::InvertMode
type QImage__InvertMode int64

const (
	QImage__InvertRgb  = QImage__InvertMode(0)
	QImage__InvertRgba = QImage__InvertMode(1)
)

type QImage struct {
	QPaintDevice
}

type QImage_ITF interface {
	QPaintDevice_ITF
	QImage_PTR() *QImage
}

func (p *QImage) QImage_PTR() *QImage {
	return p
}

func (p *QImage) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QImage) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQImage(ptr QImage_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImage_PTR().Pointer()
	}
	return nil
}

func NewQImageFromPointer(ptr unsafe.Pointer) *QImage {
	var n = new(QImage)
	n.SetPointer(ptr)
	return n
}

func newQImageFromPointer(ptr unsafe.Pointer) *QImage {
	var n = NewQImageFromPointer(ptr)
	return n
}

func (ptr *QImage) ColorCount() int {
	defer qt.Recovering("QImage::colorCount")

	if ptr.Pointer() != nil {
		return int(C.QImage_ColorCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) Copy(rectangle core.QRect_ITF) *QImage {
	defer qt.Recovering("QImage::copy")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_Copy(ptr.Pointer(), core.PointerFromQRect(rectangle)))
	}
	return nil
}

func (ptr *QImage) Fill2(color core.Qt__GlobalColor) {
	defer qt.Recovering("QImage::fill")

	if ptr.Pointer() != nil {
		C.QImage_Fill2(ptr.Pointer(), C.int(color))
	}
}

func (ptr *QImage) Fill3(color QColor_ITF) {
	defer qt.Recovering("QImage::fill")

	if ptr.Pointer() != nil {
		C.QImage_Fill3(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QImage) Height() int {
	defer qt.Recovering("QImage::height")

	if ptr.Pointer() != nil {
		return int(C.QImage_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) IsNull() bool {
	defer qt.Recovering("QImage::isNull")

	if ptr.Pointer() != nil {
		return C.QImage_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) Offset() *core.QPoint {
	defer qt.Recovering("QImage::offset")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QImage_Offset(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImage) Rect() *core.QRect {
	defer qt.Recovering("QImage::rect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QImage_Rect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImage) Scaled(size core.QSize_ITF, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QImage {
	defer qt.Recovering("QImage::scaled")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_Scaled(ptr.Pointer(), core.PointerFromQSize(size), C.int(aspectRatioMode), C.int(transformMode)))
	}
	return nil
}

func (ptr *QImage) ScaledToHeight(height int, mode core.Qt__TransformationMode) *QImage {
	defer qt.Recovering("QImage::scaledToHeight")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_ScaledToHeight(ptr.Pointer(), C.int(height), C.int(mode)))
	}
	return nil
}

func (ptr *QImage) ScaledToWidth(width int, mode core.Qt__TransformationMode) *QImage {
	defer qt.Recovering("QImage::scaledToWidth")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_ScaledToWidth(ptr.Pointer(), C.int(width), C.int(mode)))
	}
	return nil
}

func (ptr *QImage) SetOffset(offset core.QPoint_ITF) {
	defer qt.Recovering("QImage::setOffset")

	if ptr.Pointer() != nil {
		C.QImage_SetOffset(ptr.Pointer(), core.PointerFromQPoint(offset))
	}
}

func (ptr *QImage) SetText(key string, text string) {
	defer qt.Recovering("QImage::setText")

	if ptr.Pointer() != nil {
		C.QImage_SetText(ptr.Pointer(), C.CString(key), C.CString(text))
	}
}

func (ptr *QImage) Size() *core.QSize {
	defer qt.Recovering("QImage::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QImage_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImage) Width() int {
	defer qt.Recovering("QImage::width")

	if ptr.Pointer() != nil {
		return int(C.QImage_Width(ptr.Pointer()))
	}
	return 0
}

func NewQImage() *QImage {
	defer qt.Recovering("QImage::QImage")

	return newQImageFromPointer(C.QImage_NewQImage())
}

func NewQImage11(other QImage_ITF) *QImage {
	defer qt.Recovering("QImage::QImage")

	return newQImageFromPointer(C.QImage_NewQImage11(PointerFromQImage(other)))
}

func NewQImage10(image QImage_ITF) *QImage {
	defer qt.Recovering("QImage::QImage")

	return newQImageFromPointer(C.QImage_NewQImage10(PointerFromQImage(image)))
}

func NewQImage2(size core.QSize_ITF, format QImage__Format) *QImage {
	defer qt.Recovering("QImage::QImage")

	return newQImageFromPointer(C.QImage_NewQImage2(core.PointerFromQSize(size), C.int(format)))
}

func NewQImage9(fileName string, format string) *QImage {
	defer qt.Recovering("QImage::QImage")

	return newQImageFromPointer(C.QImage_NewQImage9(C.CString(fileName), C.CString(format)))
}

func NewQImage3(width int, height int, format QImage__Format) *QImage {
	defer qt.Recovering("QImage::QImage")

	return newQImageFromPointer(C.QImage_NewQImage3(C.int(width), C.int(height), C.int(format)))
}

func (ptr *QImage) AllGray() bool {
	defer qt.Recovering("QImage::allGray")

	if ptr.Pointer() != nil {
		return C.QImage_AllGray(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) BitPlaneCount() int {
	defer qt.Recovering("QImage::bitPlaneCount")

	if ptr.Pointer() != nil {
		return int(C.QImage_BitPlaneCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) ByteCount() int {
	defer qt.Recovering("QImage::byteCount")

	if ptr.Pointer() != nil {
		return int(C.QImage_ByteCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) BytesPerLine() int {
	defer qt.Recovering("QImage::bytesPerLine")

	if ptr.Pointer() != nil {
		return int(C.QImage_BytesPerLine(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) CacheKey() int64 {
	defer qt.Recovering("QImage::cacheKey")

	if ptr.Pointer() != nil {
		return int64(C.QImage_CacheKey(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) Copy2(x int, y int, width int, height int) *QImage {
	defer qt.Recovering("QImage::copy")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_Copy2(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height)))
	}
	return nil
}

func (ptr *QImage) CreateAlphaMask(flags core.Qt__ImageConversionFlag) *QImage {
	defer qt.Recovering("QImage::createAlphaMask")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_CreateAlphaMask(ptr.Pointer(), C.int(flags)))
	}
	return nil
}

func (ptr *QImage) CreateHeuristicMask(clipTight bool) *QImage {
	defer qt.Recovering("QImage::createHeuristicMask")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_CreateHeuristicMask(ptr.Pointer(), C.int(qt.GoBoolToInt(clipTight))))
	}
	return nil
}

func (ptr *QImage) Depth() int {
	defer qt.Recovering("QImage::depth")

	if ptr.Pointer() != nil {
		return int(C.QImage_Depth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) DevicePixelRatio() float64 {
	defer qt.Recovering("QImage::devicePixelRatio")

	if ptr.Pointer() != nil {
		return float64(C.QImage_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) DotsPerMeterX() int {
	defer qt.Recovering("QImage::dotsPerMeterX")

	if ptr.Pointer() != nil {
		return int(C.QImage_DotsPerMeterX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) DotsPerMeterY() int {
	defer qt.Recovering("QImage::dotsPerMeterY")

	if ptr.Pointer() != nil {
		return int(C.QImage_DotsPerMeterY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) Format() QImage__Format {
	defer qt.Recovering("QImage::format")

	if ptr.Pointer() != nil {
		return QImage__Format(C.QImage_Format(ptr.Pointer()))
	}
	return 0
}

func QImage_FromData2(data string, format string) *QImage {
	defer qt.Recovering("QImage::fromData")

	return NewQImageFromPointer(C.QImage_QImage_FromData2(C.CString(data), C.CString(format)))
}

func (ptr *QImage) FromData2(data string, format string) *QImage {
	defer qt.Recovering("QImage::fromData")

	return NewQImageFromPointer(C.QImage_QImage_FromData2(C.CString(data), C.CString(format)))
}

func (ptr *QImage) HasAlphaChannel() bool {
	defer qt.Recovering("QImage::hasAlphaChannel")

	if ptr.Pointer() != nil {
		return C.QImage_HasAlphaChannel(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) InvertPixels(mode QImage__InvertMode) {
	defer qt.Recovering("QImage::invertPixels")

	if ptr.Pointer() != nil {
		C.QImage_InvertPixels(ptr.Pointer(), C.int(mode))
	}
}

func (ptr *QImage) IsGrayscale() bool {
	defer qt.Recovering("QImage::isGrayscale")

	if ptr.Pointer() != nil {
		return C.QImage_IsGrayscale(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) Load2(device core.QIODevice_ITF, format string) bool {
	defer qt.Recovering("QImage::load")

	if ptr.Pointer() != nil {
		return C.QImage_Load2(ptr.Pointer(), core.PointerFromQIODevice(device), C.CString(format)) != 0
	}
	return false
}

func (ptr *QImage) Load(fileName string, format string) bool {
	defer qt.Recovering("QImage::load")

	if ptr.Pointer() != nil {
		return C.QImage_Load(ptr.Pointer(), C.CString(fileName), C.CString(format)) != 0
	}
	return false
}

func (ptr *QImage) LoadFromData2(data string, format string) bool {
	defer qt.Recovering("QImage::loadFromData")

	if ptr.Pointer() != nil {
		return C.QImage_LoadFromData2(ptr.Pointer(), C.CString(data), C.CString(format)) != 0
	}
	return false
}

func (ptr *QImage) PixelIndex(position core.QPoint_ITF) int {
	defer qt.Recovering("QImage::pixelIndex")

	if ptr.Pointer() != nil {
		return int(C.QImage_PixelIndex(ptr.Pointer(), core.PointerFromQPoint(position)))
	}
	return 0
}

func (ptr *QImage) PixelIndex2(x int, y int) int {
	defer qt.Recovering("QImage::pixelIndex")

	if ptr.Pointer() != nil {
		return int(C.QImage_PixelIndex2(ptr.Pointer(), C.int(x), C.int(y)))
	}
	return 0
}

func (ptr *QImage) Save2(device core.QIODevice_ITF, format string, quality int) bool {
	defer qt.Recovering("QImage::save")

	if ptr.Pointer() != nil {
		return C.QImage_Save2(ptr.Pointer(), core.PointerFromQIODevice(device), C.CString(format), C.int(quality)) != 0
	}
	return false
}

func (ptr *QImage) Save(fileName string, format string, quality int) bool {
	defer qt.Recovering("QImage::save")

	if ptr.Pointer() != nil {
		return C.QImage_Save(ptr.Pointer(), C.CString(fileName), C.CString(format), C.int(quality)) != 0
	}
	return false
}

func (ptr *QImage) Scaled2(width int, height int, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QImage {
	defer qt.Recovering("QImage::scaled")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_Scaled2(ptr.Pointer(), C.int(width), C.int(height), C.int(aspectRatioMode), C.int(transformMode)))
	}
	return nil
}

func (ptr *QImage) SetColorCount(colorCount int) {
	defer qt.Recovering("QImage::setColorCount")

	if ptr.Pointer() != nil {
		C.QImage_SetColorCount(ptr.Pointer(), C.int(colorCount))
	}
}

func (ptr *QImage) SetDevicePixelRatio(scaleFactor float64) {
	defer qt.Recovering("QImage::setDevicePixelRatio")

	if ptr.Pointer() != nil {
		C.QImage_SetDevicePixelRatio(ptr.Pointer(), C.double(scaleFactor))
	}
}

func (ptr *QImage) SetDotsPerMeterX(x int) {
	defer qt.Recovering("QImage::setDotsPerMeterX")

	if ptr.Pointer() != nil {
		C.QImage_SetDotsPerMeterX(ptr.Pointer(), C.int(x))
	}
}

func (ptr *QImage) SetDotsPerMeterY(y int) {
	defer qt.Recovering("QImage::setDotsPerMeterY")

	if ptr.Pointer() != nil {
		C.QImage_SetDotsPerMeterY(ptr.Pointer(), C.int(y))
	}
}

func (ptr *QImage) SmoothScaled(w int, h int) *QImage {
	defer qt.Recovering("QImage::smoothScaled")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_SmoothScaled(ptr.Pointer(), C.int(w), C.int(h)))
	}
	return nil
}

func (ptr *QImage) Swap(other QImage_ITF) {
	defer qt.Recovering("QImage::swap")

	if ptr.Pointer() != nil {
		C.QImage_Swap(ptr.Pointer(), PointerFromQImage(other))
	}
}

func (ptr *QImage) Text(key string) string {
	defer qt.Recovering("QImage::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImage_Text(ptr.Pointer(), C.CString(key)))
	}
	return ""
}

func (ptr *QImage) TextKeys() []string {
	defer qt.Recovering("QImage::textKeys")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QImage_TextKeys(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func QImage_ToImageFormat(format QPixelFormat_ITF) QImage__Format {
	defer qt.Recovering("QImage::toImageFormat")

	return QImage__Format(C.QImage_QImage_ToImageFormat(PointerFromQPixelFormat(format)))
}

func (ptr *QImage) ToImageFormat(format QPixelFormat_ITF) QImage__Format {
	defer qt.Recovering("QImage::toImageFormat")

	return QImage__Format(C.QImage_QImage_ToImageFormat(PointerFromQPixelFormat(format)))
}

func (ptr *QImage) Transformed2(matrix QTransform_ITF, mode core.Qt__TransformationMode) *QImage {
	defer qt.Recovering("QImage::transformed")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_Transformed2(ptr.Pointer(), PointerFromQTransform(matrix), C.int(mode)))
	}
	return nil
}

func (ptr *QImage) Valid(pos core.QPoint_ITF) bool {
	defer qt.Recovering("QImage::valid")

	if ptr.Pointer() != nil {
		return C.QImage_Valid(ptr.Pointer(), core.PointerFromQPoint(pos)) != 0
	}
	return false
}

func (ptr *QImage) Valid2(x int, y int) bool {
	defer qt.Recovering("QImage::valid")

	if ptr.Pointer() != nil {
		return C.QImage_Valid2(ptr.Pointer(), C.int(x), C.int(y)) != 0
	}
	return false
}

func (ptr *QImage) DestroyQImage() {
	defer qt.Recovering("QImage::~QImage")

	if ptr.Pointer() != nil {
		C.QImage_DestroyQImage(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QImage) ConvertToFormat(format QImage__Format, flags core.Qt__ImageConversionFlag) *QImage {
	defer qt.Recovering("QImage::convertToFormat")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_ConvertToFormat(ptr.Pointer(), C.int(format), C.int(flags)))
	}
	return nil
}

func (ptr *QImage) Mirrored(horizontal bool, vertical bool) *QImage {
	defer qt.Recovering("QImage::mirrored")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_Mirrored(ptr.Pointer(), C.int(qt.GoBoolToInt(horizontal)), C.int(qt.GoBoolToInt(vertical))))
	}
	return nil
}

func (ptr *QImage) RgbSwapped() *QImage {
	defer qt.Recovering("QImage::rgbSwapped")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImage_RgbSwapped(ptr.Pointer()))
	}
	return nil
}

//export callbackQImage_Metric
func callbackQImage_Metric(ptr unsafe.Pointer, ptrName *C.char, metric C.int) C.int {
	defer qt.Recovering("callback QImage::metric")

	if signal := qt.GetSignal(C.GoString(ptrName), "metric"); signal != nil {
		return C.int(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric)))
	}

	return C.int(NewQImageFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric)))
}

func (ptr *QImage) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	defer qt.Recovering("connect QImage::metric")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "metric", f)
	}
}

func (ptr *QImage) DisconnectMetric() {
	defer qt.Recovering("disconnect QImage::metric")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "metric")
	}
}

func (ptr *QImage) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QImage::metric")

	if ptr.Pointer() != nil {
		return int(C.QImage_Metric(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QImage) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QImage::metric")

	if ptr.Pointer() != nil {
		return int(C.QImage_MetricDefault(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

//export callbackQImage_PaintEngine
func callbackQImage_PaintEngine(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QImage::paintEngine")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QImage) ConnectPaintEngine(f func() *QPaintEngine) {
	defer qt.Recovering("connect QImage::paintEngine")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "paintEngine", f)
	}
}

func (ptr *QImage) DisconnectPaintEngine() {
	defer qt.Recovering("disconnect QImage::paintEngine")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "paintEngine")
	}
}

func (ptr *QImage) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QImage::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QImage_PaintEngine(ptr.Pointer()))
	}
	return nil
}

//QImageIOHandler::ImageOption
type QImageIOHandler__ImageOption int64

const (
	QImageIOHandler__Size                 = QImageIOHandler__ImageOption(0)
	QImageIOHandler__ClipRect             = QImageIOHandler__ImageOption(1)
	QImageIOHandler__Description          = QImageIOHandler__ImageOption(2)
	QImageIOHandler__ScaledClipRect       = QImageIOHandler__ImageOption(3)
	QImageIOHandler__ScaledSize           = QImageIOHandler__ImageOption(4)
	QImageIOHandler__CompressionRatio     = QImageIOHandler__ImageOption(5)
	QImageIOHandler__Gamma                = QImageIOHandler__ImageOption(6)
	QImageIOHandler__Quality              = QImageIOHandler__ImageOption(7)
	QImageIOHandler__Name                 = QImageIOHandler__ImageOption(8)
	QImageIOHandler__SubType              = QImageIOHandler__ImageOption(9)
	QImageIOHandler__IncrementalReading   = QImageIOHandler__ImageOption(10)
	QImageIOHandler__Endianness           = QImageIOHandler__ImageOption(11)
	QImageIOHandler__Animation            = QImageIOHandler__ImageOption(12)
	QImageIOHandler__BackgroundColor      = QImageIOHandler__ImageOption(13)
	QImageIOHandler__ImageFormat          = QImageIOHandler__ImageOption(14)
	QImageIOHandler__SupportedSubTypes    = QImageIOHandler__ImageOption(15)
	QImageIOHandler__OptimizedWrite       = QImageIOHandler__ImageOption(16)
	QImageIOHandler__ProgressiveScanWrite = QImageIOHandler__ImageOption(17)
	QImageIOHandler__ImageTransformation  = QImageIOHandler__ImageOption(18)
	QImageIOHandler__TransformedByDefault = QImageIOHandler__ImageOption(19)
)

//QImageIOHandler::Transformation
type QImageIOHandler__Transformation int64

const (
	QImageIOHandler__TransformationNone              = QImageIOHandler__Transformation(0)
	QImageIOHandler__TransformationMirror            = QImageIOHandler__Transformation(1)
	QImageIOHandler__TransformationFlip              = QImageIOHandler__Transformation(2)
	QImageIOHandler__TransformationRotate180         = QImageIOHandler__Transformation(QImageIOHandler__TransformationMirror | QImageIOHandler__TransformationFlip)
	QImageIOHandler__TransformationRotate90          = QImageIOHandler__Transformation(4)
	QImageIOHandler__TransformationMirrorAndRotate90 = QImageIOHandler__Transformation(QImageIOHandler__TransformationMirror | QImageIOHandler__TransformationRotate90)
	QImageIOHandler__TransformationFlipAndRotate90   = QImageIOHandler__Transformation(QImageIOHandler__TransformationFlip | QImageIOHandler__TransformationRotate90)
	QImageIOHandler__TransformationRotate270         = QImageIOHandler__Transformation(QImageIOHandler__TransformationRotate180 | QImageIOHandler__TransformationRotate90)
)

type QImageIOHandler struct {
	ptr unsafe.Pointer
}

type QImageIOHandler_ITF interface {
	QImageIOHandler_PTR() *QImageIOHandler
}

func (p *QImageIOHandler) QImageIOHandler_PTR() *QImageIOHandler {
	return p
}

func (p *QImageIOHandler) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QImageIOHandler) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQImageIOHandler(ptr QImageIOHandler_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageIOHandler_PTR().Pointer()
	}
	return nil
}

func NewQImageIOHandlerFromPointer(ptr unsafe.Pointer) *QImageIOHandler {
	var n = new(QImageIOHandler)
	n.SetPointer(ptr)
	return n
}

func newQImageIOHandlerFromPointer(ptr unsafe.Pointer) *QImageIOHandler {
	var n = NewQImageIOHandlerFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QImageIOHandler_") {
		n.SetObjectNameAbs("QImageIOHandler_" + qt.Identifier())
	}
	return n
}

func NewQImageIOHandler() *QImageIOHandler {
	defer qt.Recovering("QImageIOHandler::QImageIOHandler")

	return newQImageIOHandlerFromPointer(C.QImageIOHandler_NewQImageIOHandler())
}

//export callbackQImageIOHandler_CanRead
func callbackQImageIOHandler_CanRead(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QImageIOHandler::canRead")

	if signal := qt.GetSignal(C.GoString(ptrName), "canRead"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QImageIOHandler) ConnectCanRead(f func() bool) {
	defer qt.Recovering("connect QImageIOHandler::canRead")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "canRead", f)
	}
}

func (ptr *QImageIOHandler) DisconnectCanRead() {
	defer qt.Recovering("disconnect QImageIOHandler::canRead")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "canRead")
	}
}

func (ptr *QImageIOHandler) CanRead() bool {
	defer qt.Recovering("QImageIOHandler::canRead")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_CanRead(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQImageIOHandler_CurrentImageNumber
func callbackQImageIOHandler_CurrentImageNumber(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QImageIOHandler::currentImageNumber")

	if signal := qt.GetSignal(C.GoString(ptrName), "currentImageNumber"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(NewQImageIOHandlerFromPointer(ptr).CurrentImageNumberDefault())
}

func (ptr *QImageIOHandler) ConnectCurrentImageNumber(f func() int) {
	defer qt.Recovering("connect QImageIOHandler::currentImageNumber")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "currentImageNumber", f)
	}
}

func (ptr *QImageIOHandler) DisconnectCurrentImageNumber() {
	defer qt.Recovering("disconnect QImageIOHandler::currentImageNumber")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "currentImageNumber")
	}
}

func (ptr *QImageIOHandler) CurrentImageNumber() int {
	defer qt.Recovering("QImageIOHandler::currentImageNumber")

	if ptr.Pointer() != nil {
		return int(C.QImageIOHandler_CurrentImageNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageIOHandler) CurrentImageNumberDefault() int {
	defer qt.Recovering("QImageIOHandler::currentImageNumber")

	if ptr.Pointer() != nil {
		return int(C.QImageIOHandler_CurrentImageNumberDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQImageIOHandler_CurrentImageRect
func callbackQImageIOHandler_CurrentImageRect(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QImageIOHandler::currentImageRect")

	if signal := qt.GetSignal(C.GoString(ptrName), "currentImageRect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(NewQImageIOHandlerFromPointer(ptr).CurrentImageRectDefault())
}

func (ptr *QImageIOHandler) ConnectCurrentImageRect(f func() *core.QRect) {
	defer qt.Recovering("connect QImageIOHandler::currentImageRect")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "currentImageRect", f)
	}
}

func (ptr *QImageIOHandler) DisconnectCurrentImageRect() {
	defer qt.Recovering("disconnect QImageIOHandler::currentImageRect")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "currentImageRect")
	}
}

func (ptr *QImageIOHandler) CurrentImageRect() *core.QRect {
	defer qt.Recovering("QImageIOHandler::currentImageRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QImageIOHandler_CurrentImageRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageIOHandler) CurrentImageRectDefault() *core.QRect {
	defer qt.Recovering("QImageIOHandler::currentImageRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QImageIOHandler_CurrentImageRectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageIOHandler) Device() *core.QIODevice {
	defer qt.Recovering("QImageIOHandler::device")

	if ptr.Pointer() != nil {
		return core.NewQIODeviceFromPointer(C.QImageIOHandler_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageIOHandler) Format() string {
	defer qt.Recovering("QImageIOHandler::format")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageIOHandler_Format(ptr.Pointer()))
	}
	return ""
}

//export callbackQImageIOHandler_ImageCount
func callbackQImageIOHandler_ImageCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QImageIOHandler::imageCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "imageCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(NewQImageIOHandlerFromPointer(ptr).ImageCountDefault())
}

func (ptr *QImageIOHandler) ConnectImageCount(f func() int) {
	defer qt.Recovering("connect QImageIOHandler::imageCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "imageCount", f)
	}
}

func (ptr *QImageIOHandler) DisconnectImageCount() {
	defer qt.Recovering("disconnect QImageIOHandler::imageCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "imageCount")
	}
}

func (ptr *QImageIOHandler) ImageCount() int {
	defer qt.Recovering("QImageIOHandler::imageCount")

	if ptr.Pointer() != nil {
		return int(C.QImageIOHandler_ImageCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageIOHandler) ImageCountDefault() int {
	defer qt.Recovering("QImageIOHandler::imageCount")

	if ptr.Pointer() != nil {
		return int(C.QImageIOHandler_ImageCountDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQImageIOHandler_JumpToImage
func callbackQImageIOHandler_JumpToImage(ptr unsafe.Pointer, ptrName *C.char, imageNumber C.int) C.int {
	defer qt.Recovering("callback QImageIOHandler::jumpToImage")

	if signal := qt.GetSignal(C.GoString(ptrName), "jumpToImage"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int) bool)(int(imageNumber))))
	}

	return C.int(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).JumpToImageDefault(int(imageNumber))))
}

func (ptr *QImageIOHandler) ConnectJumpToImage(f func(imageNumber int) bool) {
	defer qt.Recovering("connect QImageIOHandler::jumpToImage")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "jumpToImage", f)
	}
}

func (ptr *QImageIOHandler) DisconnectJumpToImage() {
	defer qt.Recovering("disconnect QImageIOHandler::jumpToImage")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "jumpToImage")
	}
}

func (ptr *QImageIOHandler) JumpToImage(imageNumber int) bool {
	defer qt.Recovering("QImageIOHandler::jumpToImage")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToImage(ptr.Pointer(), C.int(imageNumber)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) JumpToImageDefault(imageNumber int) bool {
	defer qt.Recovering("QImageIOHandler::jumpToImage")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToImageDefault(ptr.Pointer(), C.int(imageNumber)) != 0
	}
	return false
}

//export callbackQImageIOHandler_JumpToNextImage
func callbackQImageIOHandler_JumpToNextImage(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QImageIOHandler::jumpToNextImage")

	if signal := qt.GetSignal(C.GoString(ptrName), "jumpToNextImage"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).JumpToNextImageDefault()))
}

func (ptr *QImageIOHandler) ConnectJumpToNextImage(f func() bool) {
	defer qt.Recovering("connect QImageIOHandler::jumpToNextImage")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "jumpToNextImage", f)
	}
}

func (ptr *QImageIOHandler) DisconnectJumpToNextImage() {
	defer qt.Recovering("disconnect QImageIOHandler::jumpToNextImage")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "jumpToNextImage")
	}
}

func (ptr *QImageIOHandler) JumpToNextImage() bool {
	defer qt.Recovering("QImageIOHandler::jumpToNextImage")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToNextImage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageIOHandler) JumpToNextImageDefault() bool {
	defer qt.Recovering("QImageIOHandler::jumpToNextImage")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToNextImageDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQImageIOHandler_LoopCount
func callbackQImageIOHandler_LoopCount(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QImageIOHandler::loopCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "loopCount"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(NewQImageIOHandlerFromPointer(ptr).LoopCountDefault())
}

func (ptr *QImageIOHandler) ConnectLoopCount(f func() int) {
	defer qt.Recovering("connect QImageIOHandler::loopCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "loopCount", f)
	}
}

func (ptr *QImageIOHandler) DisconnectLoopCount() {
	defer qt.Recovering("disconnect QImageIOHandler::loopCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "loopCount")
	}
}

func (ptr *QImageIOHandler) LoopCount() int {
	defer qt.Recovering("QImageIOHandler::loopCount")

	if ptr.Pointer() != nil {
		return int(C.QImageIOHandler_LoopCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageIOHandler) LoopCountDefault() int {
	defer qt.Recovering("QImageIOHandler::loopCount")

	if ptr.Pointer() != nil {
		return int(C.QImageIOHandler_LoopCountDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQImageIOHandler_NextImageDelay
func callbackQImageIOHandler_NextImageDelay(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QImageIOHandler::nextImageDelay")

	if signal := qt.GetSignal(C.GoString(ptrName), "nextImageDelay"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(NewQImageIOHandlerFromPointer(ptr).NextImageDelayDefault())
}

func (ptr *QImageIOHandler) ConnectNextImageDelay(f func() int) {
	defer qt.Recovering("connect QImageIOHandler::nextImageDelay")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "nextImageDelay", f)
	}
}

func (ptr *QImageIOHandler) DisconnectNextImageDelay() {
	defer qt.Recovering("disconnect QImageIOHandler::nextImageDelay")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "nextImageDelay")
	}
}

func (ptr *QImageIOHandler) NextImageDelay() int {
	defer qt.Recovering("QImageIOHandler::nextImageDelay")

	if ptr.Pointer() != nil {
		return int(C.QImageIOHandler_NextImageDelay(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageIOHandler) NextImageDelayDefault() int {
	defer qt.Recovering("QImageIOHandler::nextImageDelay")

	if ptr.Pointer() != nil {
		return int(C.QImageIOHandler_NextImageDelayDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQImageIOHandler_Option
func callbackQImageIOHandler_Option(ptr unsafe.Pointer, ptrName *C.char, option C.int) unsafe.Pointer {
	defer qt.Recovering("callback QImageIOHandler::option")

	if signal := qt.GetSignal(C.GoString(ptrName), "option"); signal != nil {
		return core.PointerFromQVariant(signal.(func(QImageIOHandler__ImageOption) *core.QVariant)(QImageIOHandler__ImageOption(option)))
	}

	return core.PointerFromQVariant(NewQImageIOHandlerFromPointer(ptr).OptionDefault(QImageIOHandler__ImageOption(option)))
}

func (ptr *QImageIOHandler) ConnectOption(f func(option QImageIOHandler__ImageOption) *core.QVariant) {
	defer qt.Recovering("connect QImageIOHandler::option")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "option", f)
	}
}

func (ptr *QImageIOHandler) DisconnectOption() {
	defer qt.Recovering("disconnect QImageIOHandler::option")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "option")
	}
}

func (ptr *QImageIOHandler) Option(option QImageIOHandler__ImageOption) *core.QVariant {
	defer qt.Recovering("QImageIOHandler::option")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QImageIOHandler_Option(ptr.Pointer(), C.int(option)))
	}
	return nil
}

func (ptr *QImageIOHandler) OptionDefault(option QImageIOHandler__ImageOption) *core.QVariant {
	defer qt.Recovering("QImageIOHandler::option")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QImageIOHandler_OptionDefault(ptr.Pointer(), C.int(option)))
	}
	return nil
}

//export callbackQImageIOHandler_Read
func callbackQImageIOHandler_Read(ptr unsafe.Pointer, ptrName *C.char, image unsafe.Pointer) C.int {
	defer qt.Recovering("callback QImageIOHandler::read")

	if signal := qt.GetSignal(C.GoString(ptrName), "read"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*QImage) bool)(NewQImageFromPointer(image))))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QImageIOHandler) ConnectRead(f func(image *QImage) bool) {
	defer qt.Recovering("connect QImageIOHandler::read")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "read", f)
	}
}

func (ptr *QImageIOHandler) DisconnectRead(image QImage_ITF) {
	defer qt.Recovering("disconnect QImageIOHandler::read")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "read")
	}
}

func (ptr *QImageIOHandler) Read(image QImage_ITF) bool {
	defer qt.Recovering("QImageIOHandler::read")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_Read(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) SetDevice(device core.QIODevice_ITF) {
	defer qt.Recovering("QImageIOHandler::setDevice")

	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QImageIOHandler) SetFormat(format string) {
	defer qt.Recovering("QImageIOHandler::setFormat")

	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetFormat(ptr.Pointer(), C.CString(format))
	}
}

func (ptr *QImageIOHandler) SetFormat2(format string) {
	defer qt.Recovering("QImageIOHandler::setFormat")

	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetFormat2(ptr.Pointer(), C.CString(format))
	}
}

//export callbackQImageIOHandler_SetOption
func callbackQImageIOHandler_SetOption(ptr unsafe.Pointer, ptrName *C.char, option C.int, value unsafe.Pointer) {
	defer qt.Recovering("callback QImageIOHandler::setOption")

	if signal := qt.GetSignal(C.GoString(ptrName), "setOption"); signal != nil {
		signal.(func(QImageIOHandler__ImageOption, *core.QVariant))(QImageIOHandler__ImageOption(option), core.NewQVariantFromPointer(value))
	} else {
		NewQImageIOHandlerFromPointer(ptr).SetOptionDefault(QImageIOHandler__ImageOption(option), core.NewQVariantFromPointer(value))
	}
}

func (ptr *QImageIOHandler) ConnectSetOption(f func(option QImageIOHandler__ImageOption, value *core.QVariant)) {
	defer qt.Recovering("connect QImageIOHandler::setOption")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "setOption", f)
	}
}

func (ptr *QImageIOHandler) DisconnectSetOption() {
	defer qt.Recovering("disconnect QImageIOHandler::setOption")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "setOption")
	}
}

func (ptr *QImageIOHandler) SetOption(option QImageIOHandler__ImageOption, value core.QVariant_ITF) {
	defer qt.Recovering("QImageIOHandler::setOption")

	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetOption(ptr.Pointer(), C.int(option), core.PointerFromQVariant(value))
	}
}

func (ptr *QImageIOHandler) SetOptionDefault(option QImageIOHandler__ImageOption, value core.QVariant_ITF) {
	defer qt.Recovering("QImageIOHandler::setOption")

	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetOptionDefault(ptr.Pointer(), C.int(option), core.PointerFromQVariant(value))
	}
}

//export callbackQImageIOHandler_SupportsOption
func callbackQImageIOHandler_SupportsOption(ptr unsafe.Pointer, ptrName *C.char, option C.int) C.int {
	defer qt.Recovering("callback QImageIOHandler::supportsOption")

	if signal := qt.GetSignal(C.GoString(ptrName), "supportsOption"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(QImageIOHandler__ImageOption) bool)(QImageIOHandler__ImageOption(option))))
	}

	return C.int(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).SupportsOptionDefault(QImageIOHandler__ImageOption(option))))
}

func (ptr *QImageIOHandler) ConnectSupportsOption(f func(option QImageIOHandler__ImageOption) bool) {
	defer qt.Recovering("connect QImageIOHandler::supportsOption")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "supportsOption", f)
	}
}

func (ptr *QImageIOHandler) DisconnectSupportsOption() {
	defer qt.Recovering("disconnect QImageIOHandler::supportsOption")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "supportsOption")
	}
}

func (ptr *QImageIOHandler) SupportsOption(option QImageIOHandler__ImageOption) bool {
	defer qt.Recovering("QImageIOHandler::supportsOption")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_SupportsOption(ptr.Pointer(), C.int(option)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) SupportsOptionDefault(option QImageIOHandler__ImageOption) bool {
	defer qt.Recovering("QImageIOHandler::supportsOption")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_SupportsOptionDefault(ptr.Pointer(), C.int(option)) != 0
	}
	return false
}

//export callbackQImageIOHandler_Write
func callbackQImageIOHandler_Write(ptr unsafe.Pointer, ptrName *C.char, image unsafe.Pointer) C.int {
	defer qt.Recovering("callback QImageIOHandler::write")

	if signal := qt.GetSignal(C.GoString(ptrName), "write"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*QImage) bool)(NewQImageFromPointer(image))))
	}

	return C.int(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).WriteDefault(NewQImageFromPointer(image))))
}

func (ptr *QImageIOHandler) ConnectWrite(f func(image *QImage) bool) {
	defer qt.Recovering("connect QImageIOHandler::write")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "write", f)
	}
}

func (ptr *QImageIOHandler) DisconnectWrite() {
	defer qt.Recovering("disconnect QImageIOHandler::write")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "write")
	}
}

func (ptr *QImageIOHandler) Write(image QImage_ITF) bool {
	defer qt.Recovering("QImageIOHandler::write")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_Write(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) WriteDefault(image QImage_ITF) bool {
	defer qt.Recovering("QImageIOHandler::write")

	if ptr.Pointer() != nil {
		return C.QImageIOHandler_WriteDefault(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) DestroyQImageIOHandler() {
	defer qt.Recovering("QImageIOHandler::~QImageIOHandler")

	if ptr.Pointer() != nil {
		C.QImageIOHandler_DestroyQImageIOHandler(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageIOHandler) ObjectNameAbs() string {
	defer qt.Recovering("QImageIOHandler::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageIOHandler_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageIOHandler) SetObjectNameAbs(name string) {
	defer qt.Recovering("QImageIOHandler::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

//QImageIOPlugin::Capability
type QImageIOPlugin__Capability int64

const (
	QImageIOPlugin__CanRead            = QImageIOPlugin__Capability(0x1)
	QImageIOPlugin__CanWrite           = QImageIOPlugin__Capability(0x2)
	QImageIOPlugin__CanReadIncremental = QImageIOPlugin__Capability(0x4)
)

type QImageIOPlugin struct {
	core.QObject
}

type QImageIOPlugin_ITF interface {
	core.QObject_ITF
	QImageIOPlugin_PTR() *QImageIOPlugin
}

func (p *QImageIOPlugin) QImageIOPlugin_PTR() *QImageIOPlugin {
	return p
}

func (p *QImageIOPlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QImageIOPlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQImageIOPlugin(ptr QImageIOPlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageIOPlugin_PTR().Pointer()
	}
	return nil
}

func NewQImageIOPluginFromPointer(ptr unsafe.Pointer) *QImageIOPlugin {
	var n = new(QImageIOPlugin)
	n.SetPointer(ptr)
	return n
}

func newQImageIOPluginFromPointer(ptr unsafe.Pointer) *QImageIOPlugin {
	var n = NewQImageIOPluginFromPointer(ptr)
	for len(n.ObjectName()) < len("QImageIOPlugin_") {
		n.SetObjectName("QImageIOPlugin_" + qt.Identifier())
	}
	return n
}

func NewQImageIOPlugin(parent core.QObject_ITF) *QImageIOPlugin {
	defer qt.Recovering("QImageIOPlugin::QImageIOPlugin")

	return newQImageIOPluginFromPointer(C.QImageIOPlugin_NewQImageIOPlugin(core.PointerFromQObject(parent)))
}

//export callbackQImageIOPlugin_Capabilities
func callbackQImageIOPlugin_Capabilities(ptr unsafe.Pointer, ptrName *C.char, device unsafe.Pointer, format *C.char) C.int {
	defer qt.Recovering("callback QImageIOPlugin::capabilities")

	if signal := qt.GetSignal(C.GoString(ptrName), "capabilities"); signal != nil {
		return C.int(signal.(func(*core.QIODevice, string) QImageIOPlugin__Capability)(core.NewQIODeviceFromPointer(device), C.GoString(format)))
	}

	return C.int(0)
}

func (ptr *QImageIOPlugin) ConnectCapabilities(f func(device *core.QIODevice, format string) QImageIOPlugin__Capability) {
	defer qt.Recovering("connect QImageIOPlugin::capabilities")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "capabilities", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectCapabilities(device core.QIODevice_ITF, format string) {
	defer qt.Recovering("disconnect QImageIOPlugin::capabilities")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "capabilities")
	}
}

func (ptr *QImageIOPlugin) Capabilities(device core.QIODevice_ITF, format string) QImageIOPlugin__Capability {
	defer qt.Recovering("QImageIOPlugin::capabilities")

	if ptr.Pointer() != nil {
		return QImageIOPlugin__Capability(C.QImageIOPlugin_Capabilities(ptr.Pointer(), core.PointerFromQIODevice(device), C.CString(format)))
	}
	return 0
}

//export callbackQImageIOPlugin_Create
func callbackQImageIOPlugin_Create(ptr unsafe.Pointer, ptrName *C.char, device unsafe.Pointer, format *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QImageIOPlugin::create")

	if signal := qt.GetSignal(C.GoString(ptrName), "create"); signal != nil {
		return PointerFromQImageIOHandler(signal.(func(*core.QIODevice, string) *QImageIOHandler)(core.NewQIODeviceFromPointer(device), C.GoString(format)))
	}

	return PointerFromQImageIOHandler(nil)
}

func (ptr *QImageIOPlugin) ConnectCreate(f func(device *core.QIODevice, format string) *QImageIOHandler) {
	defer qt.Recovering("connect QImageIOPlugin::create")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "create", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectCreate(device core.QIODevice_ITF, format string) {
	defer qt.Recovering("disconnect QImageIOPlugin::create")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "create")
	}
}

func (ptr *QImageIOPlugin) Create(device core.QIODevice_ITF, format string) *QImageIOHandler {
	defer qt.Recovering("QImageIOPlugin::create")

	if ptr.Pointer() != nil {
		return NewQImageIOHandlerFromPointer(C.QImageIOPlugin_Create(ptr.Pointer(), core.PointerFromQIODevice(device), C.CString(format)))
	}
	return nil
}

func (ptr *QImageIOPlugin) DestroyQImageIOPlugin() {
	defer qt.Recovering("QImageIOPlugin::~QImageIOPlugin")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DestroyQImageIOPlugin(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQImageIOPlugin_TimerEvent
func callbackQImageIOPlugin_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QImageIOPlugin::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQImageIOPluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QImageIOPlugin) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QImageIOPlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QImageIOPlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QImageIOPlugin) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QImageIOPlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QImageIOPlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QImageIOPlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQImageIOPlugin_ChildEvent
func callbackQImageIOPlugin_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QImageIOPlugin::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQImageIOPluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QImageIOPlugin) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QImageIOPlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QImageIOPlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QImageIOPlugin) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QImageIOPlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QImageIOPlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QImageIOPlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQImageIOPlugin_ConnectNotify
func callbackQImageIOPlugin_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QImageIOPlugin::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQImageIOPluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QImageIOPlugin) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QImageIOPlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QImageIOPlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QImageIOPlugin) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QImageIOPlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QImageIOPlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QImageIOPlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQImageIOPlugin_CustomEvent
func callbackQImageIOPlugin_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QImageIOPlugin::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQImageIOPluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QImageIOPlugin) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QImageIOPlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QImageIOPlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QImageIOPlugin) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QImageIOPlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QImageIOPlugin) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QImageIOPlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQImageIOPlugin_DeleteLater
func callbackQImageIOPlugin_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QImageIOPlugin::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QImageIOPlugin) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QImageIOPlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QImageIOPlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QImageIOPlugin) DeleteLater() {
	defer qt.Recovering("QImageIOPlugin::deleteLater")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQImageIOPlugin_DisconnectNotify
func callbackQImageIOPlugin_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QImageIOPlugin::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQImageIOPluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QImageIOPlugin) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QImageIOPlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QImageIOPlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QImageIOPlugin) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QImageIOPlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QImageIOPlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QImageIOPlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQImageIOPlugin_Event
func callbackQImageIOPlugin_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QImageIOPlugin::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQImageIOPluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QImageIOPlugin) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QImageIOPlugin::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectEvent() {
	defer qt.Recovering("disconnect QImageIOPlugin::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QImageIOPlugin) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QImageIOPlugin::event")

	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QImageIOPlugin) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QImageIOPlugin::event")

	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQImageIOPlugin_EventFilter
func callbackQImageIOPlugin_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QImageIOPlugin::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQImageIOPluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QImageIOPlugin) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QImageIOPlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QImageIOPlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QImageIOPlugin) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QImageIOPlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QImageIOPlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QImageIOPlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQImageIOPlugin_MetaObject
func callbackQImageIOPlugin_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QImageIOPlugin::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQImageIOPluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QImageIOPlugin) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QImageIOPlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QImageIOPlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QImageIOPlugin) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QImageIOPlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QImageIOPlugin_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageIOPlugin) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QImageIOPlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QImageIOPlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QImageReader::ImageReaderError
type QImageReader__ImageReaderError int64

const (
	QImageReader__UnknownError           = QImageReader__ImageReaderError(0)
	QImageReader__FileNotFoundError      = QImageReader__ImageReaderError(1)
	QImageReader__DeviceError            = QImageReader__ImageReaderError(2)
	QImageReader__UnsupportedFormatError = QImageReader__ImageReaderError(3)
	QImageReader__InvalidDataError       = QImageReader__ImageReaderError(4)
)

type QImageReader struct {
	ptr unsafe.Pointer
}

type QImageReader_ITF interface {
	QImageReader_PTR() *QImageReader
}

func (p *QImageReader) QImageReader_PTR() *QImageReader {
	return p
}

func (p *QImageReader) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QImageReader) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQImageReader(ptr QImageReader_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageReader_PTR().Pointer()
	}
	return nil
}

func NewQImageReaderFromPointer(ptr unsafe.Pointer) *QImageReader {
	var n = new(QImageReader)
	n.SetPointer(ptr)
	return n
}

func newQImageReaderFromPointer(ptr unsafe.Pointer) *QImageReader {
	var n = NewQImageReaderFromPointer(ptr)
	return n
}

func NewQImageReader() *QImageReader {
	defer qt.Recovering("QImageReader::QImageReader")

	return newQImageReaderFromPointer(C.QImageReader_NewQImageReader())
}

func NewQImageReader2(device core.QIODevice_ITF, format string) *QImageReader {
	defer qt.Recovering("QImageReader::QImageReader")

	return newQImageReaderFromPointer(C.QImageReader_NewQImageReader2(core.PointerFromQIODevice(device), C.CString(format)))
}

func NewQImageReader3(fileName string, format string) *QImageReader {
	defer qt.Recovering("QImageReader::QImageReader")

	return newQImageReaderFromPointer(C.QImageReader_NewQImageReader3(C.CString(fileName), C.CString(format)))
}

func (ptr *QImageReader) AutoDetectImageFormat() bool {
	defer qt.Recovering("QImageReader::autoDetectImageFormat")

	if ptr.Pointer() != nil {
		return C.QImageReader_AutoDetectImageFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) AutoTransform() bool {
	defer qt.Recovering("QImageReader::autoTransform")

	if ptr.Pointer() != nil {
		return C.QImageReader_AutoTransform(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) BackgroundColor() *QColor {
	defer qt.Recovering("QImageReader::backgroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QImageReader_BackgroundColor(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageReader) CanRead() bool {
	defer qt.Recovering("QImageReader::canRead")

	if ptr.Pointer() != nil {
		return C.QImageReader_CanRead(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) ClipRect() *core.QRect {
	defer qt.Recovering("QImageReader::clipRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QImageReader_ClipRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageReader) CurrentImageNumber() int {
	defer qt.Recovering("QImageReader::currentImageNumber")

	if ptr.Pointer() != nil {
		return int(C.QImageReader_CurrentImageNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) CurrentImageRect() *core.QRect {
	defer qt.Recovering("QImageReader::currentImageRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QImageReader_CurrentImageRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageReader) DecideFormatFromContent() bool {
	defer qt.Recovering("QImageReader::decideFormatFromContent")

	if ptr.Pointer() != nil {
		return C.QImageReader_DecideFormatFromContent(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) Device() *core.QIODevice {
	defer qt.Recovering("QImageReader::device")

	if ptr.Pointer() != nil {
		return core.NewQIODeviceFromPointer(C.QImageReader_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageReader) Error() QImageReader__ImageReaderError {
	defer qt.Recovering("QImageReader::error")

	if ptr.Pointer() != nil {
		return QImageReader__ImageReaderError(C.QImageReader_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) ErrorString() string {
	defer qt.Recovering("QImageReader::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageReader_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageReader) FileName() string {
	defer qt.Recovering("QImageReader::fileName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageReader_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageReader) Format() string {
	defer qt.Recovering("QImageReader::format")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageReader_Format(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageReader) ImageCount() int {
	defer qt.Recovering("QImageReader::imageCount")

	if ptr.Pointer() != nil {
		return int(C.QImageReader_ImageCount(ptr.Pointer()))
	}
	return 0
}

func QImageReader_ImageFormat3(device core.QIODevice_ITF) string {
	defer qt.Recovering("QImageReader::imageFormat")

	return C.GoString(C.QImageReader_QImageReader_ImageFormat3(core.PointerFromQIODevice(device)))
}

func (ptr *QImageReader) ImageFormat3(device core.QIODevice_ITF) string {
	defer qt.Recovering("QImageReader::imageFormat")

	return C.GoString(C.QImageReader_QImageReader_ImageFormat3(core.PointerFromQIODevice(device)))
}

func QImageReader_ImageFormat2(fileName string) string {
	defer qt.Recovering("QImageReader::imageFormat")

	return C.GoString(C.QImageReader_QImageReader_ImageFormat2(C.CString(fileName)))
}

func (ptr *QImageReader) ImageFormat2(fileName string) string {
	defer qt.Recovering("QImageReader::imageFormat")

	return C.GoString(C.QImageReader_QImageReader_ImageFormat2(C.CString(fileName)))
}

func (ptr *QImageReader) ImageFormat() QImage__Format {
	defer qt.Recovering("QImageReader::imageFormat")

	if ptr.Pointer() != nil {
		return QImage__Format(C.QImageReader_ImageFormat(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) JumpToImage(imageNumber int) bool {
	defer qt.Recovering("QImageReader::jumpToImage")

	if ptr.Pointer() != nil {
		return C.QImageReader_JumpToImage(ptr.Pointer(), C.int(imageNumber)) != 0
	}
	return false
}

func (ptr *QImageReader) JumpToNextImage() bool {
	defer qt.Recovering("QImageReader::jumpToNextImage")

	if ptr.Pointer() != nil {
		return C.QImageReader_JumpToNextImage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) LoopCount() int {
	defer qt.Recovering("QImageReader::loopCount")

	if ptr.Pointer() != nil {
		return int(C.QImageReader_LoopCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) NextImageDelay() int {
	defer qt.Recovering("QImageReader::nextImageDelay")

	if ptr.Pointer() != nil {
		return int(C.QImageReader_NextImageDelay(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) Quality() int {
	defer qt.Recovering("QImageReader::quality")

	if ptr.Pointer() != nil {
		return int(C.QImageReader_Quality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) Read() *QImage {
	defer qt.Recovering("QImageReader::read")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QImageReader_Read(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageReader) Read2(image QImage_ITF) bool {
	defer qt.Recovering("QImageReader::read")

	if ptr.Pointer() != nil {
		return C.QImageReader_Read2(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageReader) ScaledClipRect() *core.QRect {
	defer qt.Recovering("QImageReader::scaledClipRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QImageReader_ScaledClipRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageReader) ScaledSize() *core.QSize {
	defer qt.Recovering("QImageReader::scaledSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QImageReader_ScaledSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageReader) SetAutoDetectImageFormat(enabled bool) {
	defer qt.Recovering("QImageReader::setAutoDetectImageFormat")

	if ptr.Pointer() != nil {
		C.QImageReader_SetAutoDetectImageFormat(ptr.Pointer(), C.int(qt.GoBoolToInt(enabled)))
	}
}

func (ptr *QImageReader) SetAutoTransform(enabled bool) {
	defer qt.Recovering("QImageReader::setAutoTransform")

	if ptr.Pointer() != nil {
		C.QImageReader_SetAutoTransform(ptr.Pointer(), C.int(qt.GoBoolToInt(enabled)))
	}
}

func (ptr *QImageReader) SetBackgroundColor(color QColor_ITF) {
	defer qt.Recovering("QImageReader::setBackgroundColor")

	if ptr.Pointer() != nil {
		C.QImageReader_SetBackgroundColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QImageReader) SetClipRect(rect core.QRect_ITF) {
	defer qt.Recovering("QImageReader::setClipRect")

	if ptr.Pointer() != nil {
		C.QImageReader_SetClipRect(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QImageReader) SetDecideFormatFromContent(ignored bool) {
	defer qt.Recovering("QImageReader::setDecideFormatFromContent")

	if ptr.Pointer() != nil {
		C.QImageReader_SetDecideFormatFromContent(ptr.Pointer(), C.int(qt.GoBoolToInt(ignored)))
	}
}

func (ptr *QImageReader) SetDevice(device core.QIODevice_ITF) {
	defer qt.Recovering("QImageReader::setDevice")

	if ptr.Pointer() != nil {
		C.QImageReader_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QImageReader) SetFileName(fileName string) {
	defer qt.Recovering("QImageReader::setFileName")

	if ptr.Pointer() != nil {
		C.QImageReader_SetFileName(ptr.Pointer(), C.CString(fileName))
	}
}

func (ptr *QImageReader) SetFormat(format string) {
	defer qt.Recovering("QImageReader::setFormat")

	if ptr.Pointer() != nil {
		C.QImageReader_SetFormat(ptr.Pointer(), C.CString(format))
	}
}

func (ptr *QImageReader) SetQuality(quality int) {
	defer qt.Recovering("QImageReader::setQuality")

	if ptr.Pointer() != nil {
		C.QImageReader_SetQuality(ptr.Pointer(), C.int(quality))
	}
}

func (ptr *QImageReader) SetScaledClipRect(rect core.QRect_ITF) {
	defer qt.Recovering("QImageReader::setScaledClipRect")

	if ptr.Pointer() != nil {
		C.QImageReader_SetScaledClipRect(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QImageReader) SetScaledSize(size core.QSize_ITF) {
	defer qt.Recovering("QImageReader::setScaledSize")

	if ptr.Pointer() != nil {
		C.QImageReader_SetScaledSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QImageReader) Size() *core.QSize {
	defer qt.Recovering("QImageReader::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QImageReader_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageReader) SubType() string {
	defer qt.Recovering("QImageReader::subType")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageReader_SubType(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageReader) SupportsAnimation() bool {
	defer qt.Recovering("QImageReader::supportsAnimation")

	if ptr.Pointer() != nil {
		return C.QImageReader_SupportsAnimation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) SupportsOption(option QImageIOHandler__ImageOption) bool {
	defer qt.Recovering("QImageReader::supportsOption")

	if ptr.Pointer() != nil {
		return C.QImageReader_SupportsOption(ptr.Pointer(), C.int(option)) != 0
	}
	return false
}

func (ptr *QImageReader) Text(key string) string {
	defer qt.Recovering("QImageReader::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageReader_Text(ptr.Pointer(), C.CString(key)))
	}
	return ""
}

func (ptr *QImageReader) TextKeys() []string {
	defer qt.Recovering("QImageReader::textKeys")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QImageReader_TextKeys(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QImageReader) Transformation() QImageIOHandler__Transformation {
	defer qt.Recovering("QImageReader::transformation")

	if ptr.Pointer() != nil {
		return QImageIOHandler__Transformation(C.QImageReader_Transformation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) DestroyQImageReader() {
	defer qt.Recovering("QImageReader::~QImageReader")

	if ptr.Pointer() != nil {
		C.QImageReader_DestroyQImageReader(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QImageWriter::ImageWriterError
type QImageWriter__ImageWriterError int64

const (
	QImageWriter__UnknownError           = QImageWriter__ImageWriterError(0)
	QImageWriter__DeviceError            = QImageWriter__ImageWriterError(1)
	QImageWriter__UnsupportedFormatError = QImageWriter__ImageWriterError(2)
)

type QImageWriter struct {
	ptr unsafe.Pointer
}

type QImageWriter_ITF interface {
	QImageWriter_PTR() *QImageWriter
}

func (p *QImageWriter) QImageWriter_PTR() *QImageWriter {
	return p
}

func (p *QImageWriter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QImageWriter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQImageWriter(ptr QImageWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageWriter_PTR().Pointer()
	}
	return nil
}

func NewQImageWriterFromPointer(ptr unsafe.Pointer) *QImageWriter {
	var n = new(QImageWriter)
	n.SetPointer(ptr)
	return n
}

func newQImageWriterFromPointer(ptr unsafe.Pointer) *QImageWriter {
	var n = NewQImageWriterFromPointer(ptr)
	return n
}

func NewQImageWriter() *QImageWriter {
	defer qt.Recovering("QImageWriter::QImageWriter")

	return newQImageWriterFromPointer(C.QImageWriter_NewQImageWriter())
}

func NewQImageWriter2(device core.QIODevice_ITF, format string) *QImageWriter {
	defer qt.Recovering("QImageWriter::QImageWriter")

	return newQImageWriterFromPointer(C.QImageWriter_NewQImageWriter2(core.PointerFromQIODevice(device), C.CString(format)))
}

func NewQImageWriter3(fileName string, format string) *QImageWriter {
	defer qt.Recovering("QImageWriter::QImageWriter")

	return newQImageWriterFromPointer(C.QImageWriter_NewQImageWriter3(C.CString(fileName), C.CString(format)))
}

func (ptr *QImageWriter) CanWrite() bool {
	defer qt.Recovering("QImageWriter::canWrite")

	if ptr.Pointer() != nil {
		return C.QImageWriter_CanWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageWriter) Compression() int {
	defer qt.Recovering("QImageWriter::compression")

	if ptr.Pointer() != nil {
		return int(C.QImageWriter_Compression(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) Device() *core.QIODevice {
	defer qt.Recovering("QImageWriter::device")

	if ptr.Pointer() != nil {
		return core.NewQIODeviceFromPointer(C.QImageWriter_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageWriter) Error() QImageWriter__ImageWriterError {
	defer qt.Recovering("QImageWriter::error")

	if ptr.Pointer() != nil {
		return QImageWriter__ImageWriterError(C.QImageWriter_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) ErrorString() string {
	defer qt.Recovering("QImageWriter::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageWriter_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageWriter) FileName() string {
	defer qt.Recovering("QImageWriter::fileName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageWriter_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageWriter) Format() string {
	defer qt.Recovering("QImageWriter::format")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageWriter_Format(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageWriter) OptimizedWrite() bool {
	defer qt.Recovering("QImageWriter::optimizedWrite")

	if ptr.Pointer() != nil {
		return C.QImageWriter_OptimizedWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageWriter) ProgressiveScanWrite() bool {
	defer qt.Recovering("QImageWriter::progressiveScanWrite")

	if ptr.Pointer() != nil {
		return C.QImageWriter_ProgressiveScanWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageWriter) Quality() int {
	defer qt.Recovering("QImageWriter::quality")

	if ptr.Pointer() != nil {
		return int(C.QImageWriter_Quality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) SetCompression(compression int) {
	defer qt.Recovering("QImageWriter::setCompression")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetCompression(ptr.Pointer(), C.int(compression))
	}
}

func (ptr *QImageWriter) SetDevice(device core.QIODevice_ITF) {
	defer qt.Recovering("QImageWriter::setDevice")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QImageWriter) SetFileName(fileName string) {
	defer qt.Recovering("QImageWriter::setFileName")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetFileName(ptr.Pointer(), C.CString(fileName))
	}
}

func (ptr *QImageWriter) SetFormat(format string) {
	defer qt.Recovering("QImageWriter::setFormat")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetFormat(ptr.Pointer(), C.CString(format))
	}
}

func (ptr *QImageWriter) SetOptimizedWrite(optimize bool) {
	defer qt.Recovering("QImageWriter::setOptimizedWrite")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetOptimizedWrite(ptr.Pointer(), C.int(qt.GoBoolToInt(optimize)))
	}
}

func (ptr *QImageWriter) SetProgressiveScanWrite(progressive bool) {
	defer qt.Recovering("QImageWriter::setProgressiveScanWrite")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetProgressiveScanWrite(ptr.Pointer(), C.int(qt.GoBoolToInt(progressive)))
	}
}

func (ptr *QImageWriter) SetQuality(quality int) {
	defer qt.Recovering("QImageWriter::setQuality")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetQuality(ptr.Pointer(), C.int(quality))
	}
}

func (ptr *QImageWriter) SetSubType(ty string) {
	defer qt.Recovering("QImageWriter::setSubType")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetSubType(ptr.Pointer(), C.CString(ty))
	}
}

func (ptr *QImageWriter) SetText(key string, text string) {
	defer qt.Recovering("QImageWriter::setText")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetText(ptr.Pointer(), C.CString(key), C.CString(text))
	}
}

func (ptr *QImageWriter) SetTransformation(transform QImageIOHandler__Transformation) {
	defer qt.Recovering("QImageWriter::setTransformation")

	if ptr.Pointer() != nil {
		C.QImageWriter_SetTransformation(ptr.Pointer(), C.int(transform))
	}
}

func (ptr *QImageWriter) SubType() string {
	defer qt.Recovering("QImageWriter::subType")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageWriter_SubType(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageWriter) SupportsOption(option QImageIOHandler__ImageOption) bool {
	defer qt.Recovering("QImageWriter::supportsOption")

	if ptr.Pointer() != nil {
		return C.QImageWriter_SupportsOption(ptr.Pointer(), C.int(option)) != 0
	}
	return false
}

func (ptr *QImageWriter) Transformation() QImageIOHandler__Transformation {
	defer qt.Recovering("QImageWriter::transformation")

	if ptr.Pointer() != nil {
		return QImageIOHandler__Transformation(C.QImageWriter_Transformation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) Write(image QImage_ITF) bool {
	defer qt.Recovering("QImageWriter::write")

	if ptr.Pointer() != nil {
		return C.QImageWriter_Write(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageWriter) DestroyQImageWriter() {
	defer qt.Recovering("QImageWriter::~QImageWriter")

	if ptr.Pointer() != nil {
		C.QImageWriter_DestroyQImageWriter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QInputEvent struct {
	core.QEvent
}

type QInputEvent_ITF interface {
	core.QEvent_ITF
	QInputEvent_PTR() *QInputEvent
}

func (p *QInputEvent) QInputEvent_PTR() *QInputEvent {
	return p
}

func (p *QInputEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QInputEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQInputEvent(ptr QInputEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func NewQInputEventFromPointer(ptr unsafe.Pointer) *QInputEvent {
	var n = new(QInputEvent)
	n.SetPointer(ptr)
	return n
}

func newQInputEventFromPointer(ptr unsafe.Pointer) *QInputEvent {
	var n = NewQInputEventFromPointer(ptr)
	return n
}

func (ptr *QInputEvent) Modifiers() core.Qt__KeyboardModifier {
	defer qt.Recovering("QInputEvent::modifiers")

	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QInputEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

//QInputMethod::Action
type QInputMethod__Action int64

const (
	QInputMethod__Click       = QInputMethod__Action(0)
	QInputMethod__ContextMenu = QInputMethod__Action(1)
)

type QInputMethod struct {
	core.QObject
}

type QInputMethod_ITF interface {
	core.QObject_ITF
	QInputMethod_PTR() *QInputMethod
}

func (p *QInputMethod) QInputMethod_PTR() *QInputMethod {
	return p
}

func (p *QInputMethod) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QInputMethod) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQInputMethod(ptr QInputMethod_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputMethod_PTR().Pointer()
	}
	return nil
}

func NewQInputMethodFromPointer(ptr unsafe.Pointer) *QInputMethod {
	var n = new(QInputMethod)
	n.SetPointer(ptr)
	return n
}

func newQInputMethodFromPointer(ptr unsafe.Pointer) *QInputMethod {
	var n = NewQInputMethodFromPointer(ptr)
	for len(n.ObjectName()) < len("QInputMethod_") {
		n.SetObjectName("QInputMethod_" + qt.Identifier())
	}
	return n
}

func (ptr *QInputMethod) CursorRectangle() *core.QRectF {
	defer qt.Recovering("QInputMethod::cursorRectangle")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QInputMethod_CursorRectangle(ptr.Pointer()))
	}
	return nil
}

func (ptr *QInputMethod) InputDirection() core.Qt__LayoutDirection {
	defer qt.Recovering("QInputMethod::inputDirection")

	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QInputMethod_InputDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputMethod) IsAnimating() bool {
	defer qt.Recovering("QInputMethod::isAnimating")

	if ptr.Pointer() != nil {
		return C.QInputMethod_IsAnimating(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QInputMethod) IsVisible() bool {
	defer qt.Recovering("QInputMethod::isVisible")

	if ptr.Pointer() != nil {
		return C.QInputMethod_IsVisible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QInputMethod) KeyboardRectangle() *core.QRectF {
	defer qt.Recovering("QInputMethod::keyboardRectangle")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QInputMethod_KeyboardRectangle(ptr.Pointer()))
	}
	return nil
}

func (ptr *QInputMethod) Locale() *core.QLocale {
	defer qt.Recovering("QInputMethod::locale")

	if ptr.Pointer() != nil {
		return core.NewQLocaleFromPointer(C.QInputMethod_Locale(ptr.Pointer()))
	}
	return nil
}

//export callbackQInputMethod_AnimatingChanged
func callbackQInputMethod_AnimatingChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::animatingChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "animatingChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectAnimatingChanged(f func()) {
	defer qt.Recovering("connect QInputMethod::animatingChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectAnimatingChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "animatingChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectAnimatingChanged() {
	defer qt.Recovering("disconnect QInputMethod::animatingChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectAnimatingChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "animatingChanged")
	}
}

func (ptr *QInputMethod) AnimatingChanged() {
	defer qt.Recovering("QInputMethod::animatingChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_AnimatingChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_Commit
func callbackQInputMethod_Commit(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::commit")

	if signal := qt.GetSignal(C.GoString(ptrName), "commit"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectCommit(f func()) {
	defer qt.Recovering("connect QInputMethod::commit")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "commit", f)
	}
}

func (ptr *QInputMethod) DisconnectCommit() {
	defer qt.Recovering("disconnect QInputMethod::commit")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "commit")
	}
}

func (ptr *QInputMethod) Commit() {
	defer qt.Recovering("QInputMethod::commit")

	if ptr.Pointer() != nil {
		C.QInputMethod_Commit(ptr.Pointer())
	}
}

//export callbackQInputMethod_CursorRectangleChanged
func callbackQInputMethod_CursorRectangleChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::cursorRectangleChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "cursorRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectCursorRectangleChanged(f func()) {
	defer qt.Recovering("connect QInputMethod::cursorRectangleChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectCursorRectangleChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "cursorRectangleChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectCursorRectangleChanged() {
	defer qt.Recovering("disconnect QInputMethod::cursorRectangleChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectCursorRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "cursorRectangleChanged")
	}
}

func (ptr *QInputMethod) CursorRectangleChanged() {
	defer qt.Recovering("QInputMethod::cursorRectangleChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_CursorRectangleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_Hide
func callbackQInputMethod_Hide(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::hide")

	if signal := qt.GetSignal(C.GoString(ptrName), "hide"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectHide(f func()) {
	defer qt.Recovering("connect QInputMethod::hide")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "hide", f)
	}
}

func (ptr *QInputMethod) DisconnectHide() {
	defer qt.Recovering("disconnect QInputMethod::hide")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "hide")
	}
}

func (ptr *QInputMethod) Hide() {
	defer qt.Recovering("QInputMethod::hide")

	if ptr.Pointer() != nil {
		C.QInputMethod_Hide(ptr.Pointer())
	}
}

//export callbackQInputMethod_InputDirectionChanged
func callbackQInputMethod_InputDirectionChanged(ptr unsafe.Pointer, ptrName *C.char, newDirection C.int) {
	defer qt.Recovering("callback QInputMethod::inputDirectionChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "inputDirectionChanged"); signal != nil {
		signal.(func(core.Qt__LayoutDirection))(core.Qt__LayoutDirection(newDirection))
	}

}

func (ptr *QInputMethod) ConnectInputDirectionChanged(f func(newDirection core.Qt__LayoutDirection)) {
	defer qt.Recovering("connect QInputMethod::inputDirectionChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectInputDirectionChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "inputDirectionChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectInputDirectionChanged() {
	defer qt.Recovering("disconnect QInputMethod::inputDirectionChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectInputDirectionChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "inputDirectionChanged")
	}
}

func (ptr *QInputMethod) InputDirectionChanged(newDirection core.Qt__LayoutDirection) {
	defer qt.Recovering("QInputMethod::inputDirectionChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_InputDirectionChanged(ptr.Pointer(), C.int(newDirection))
	}
}

func (ptr *QInputMethod) InputItemRectangle() *core.QRectF {
	defer qt.Recovering("QInputMethod::inputItemRectangle")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QInputMethod_InputItemRectangle(ptr.Pointer()))
	}
	return nil
}

//export callbackQInputMethod_InvokeAction
func callbackQInputMethod_InvokeAction(ptr unsafe.Pointer, ptrName *C.char, a C.int, cursorPosition C.int) {
	defer qt.Recovering("callback QInputMethod::invokeAction")

	if signal := qt.GetSignal(C.GoString(ptrName), "invokeAction"); signal != nil {
		signal.(func(QInputMethod__Action, int))(QInputMethod__Action(a), int(cursorPosition))
	}

}

func (ptr *QInputMethod) ConnectInvokeAction(f func(a QInputMethod__Action, cursorPosition int)) {
	defer qt.Recovering("connect QInputMethod::invokeAction")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "invokeAction", f)
	}
}

func (ptr *QInputMethod) DisconnectInvokeAction(a QInputMethod__Action, cursorPosition int) {
	defer qt.Recovering("disconnect QInputMethod::invokeAction")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "invokeAction")
	}
}

func (ptr *QInputMethod) InvokeAction(a QInputMethod__Action, cursorPosition int) {
	defer qt.Recovering("QInputMethod::invokeAction")

	if ptr.Pointer() != nil {
		C.QInputMethod_InvokeAction(ptr.Pointer(), C.int(a), C.int(cursorPosition))
	}
}

//export callbackQInputMethod_KeyboardRectangleChanged
func callbackQInputMethod_KeyboardRectangleChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::keyboardRectangleChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "keyboardRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectKeyboardRectangleChanged(f func()) {
	defer qt.Recovering("connect QInputMethod::keyboardRectangleChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectKeyboardRectangleChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "keyboardRectangleChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectKeyboardRectangleChanged() {
	defer qt.Recovering("disconnect QInputMethod::keyboardRectangleChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectKeyboardRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "keyboardRectangleChanged")
	}
}

func (ptr *QInputMethod) KeyboardRectangleChanged() {
	defer qt.Recovering("QInputMethod::keyboardRectangleChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_KeyboardRectangleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_LocaleChanged
func callbackQInputMethod_LocaleChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::localeChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "localeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectLocaleChanged(f func()) {
	defer qt.Recovering("connect QInputMethod::localeChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectLocaleChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "localeChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectLocaleChanged() {
	defer qt.Recovering("disconnect QInputMethod::localeChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectLocaleChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "localeChanged")
	}
}

func (ptr *QInputMethod) LocaleChanged() {
	defer qt.Recovering("QInputMethod::localeChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_LocaleChanged(ptr.Pointer())
	}
}

func QInputMethod_QueryFocusObject(query core.Qt__InputMethodQuery, argument core.QVariant_ITF) *core.QVariant {
	defer qt.Recovering("QInputMethod::queryFocusObject")

	return core.NewQVariantFromPointer(C.QInputMethod_QInputMethod_QueryFocusObject(C.int(query), core.PointerFromQVariant(argument)))
}

func (ptr *QInputMethod) QueryFocusObject(query core.Qt__InputMethodQuery, argument core.QVariant_ITF) *core.QVariant {
	defer qt.Recovering("QInputMethod::queryFocusObject")

	return core.NewQVariantFromPointer(C.QInputMethod_QInputMethod_QueryFocusObject(C.int(query), core.PointerFromQVariant(argument)))
}

//export callbackQInputMethod_Reset
func callbackQInputMethod_Reset(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::reset")

	if signal := qt.GetSignal(C.GoString(ptrName), "reset"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectReset(f func()) {
	defer qt.Recovering("connect QInputMethod::reset")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "reset", f)
	}
}

func (ptr *QInputMethod) DisconnectReset() {
	defer qt.Recovering("disconnect QInputMethod::reset")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "reset")
	}
}

func (ptr *QInputMethod) Reset() {
	defer qt.Recovering("QInputMethod::reset")

	if ptr.Pointer() != nil {
		C.QInputMethod_Reset(ptr.Pointer())
	}
}

func (ptr *QInputMethod) SetInputItemRectangle(rect core.QRectF_ITF) {
	defer qt.Recovering("QInputMethod::setInputItemRectangle")

	if ptr.Pointer() != nil {
		C.QInputMethod_SetInputItemRectangle(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QInputMethod) SetInputItemTransform(transform QTransform_ITF) {
	defer qt.Recovering("QInputMethod::setInputItemTransform")

	if ptr.Pointer() != nil {
		C.QInputMethod_SetInputItemTransform(ptr.Pointer(), PointerFromQTransform(transform))
	}
}

func (ptr *QInputMethod) SetVisible(visible bool) {
	defer qt.Recovering("QInputMethod::setVisible")

	if ptr.Pointer() != nil {
		C.QInputMethod_SetVisible(ptr.Pointer(), C.int(qt.GoBoolToInt(visible)))
	}
}

//export callbackQInputMethod_Show
func callbackQInputMethod_Show(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::show")

	if signal := qt.GetSignal(C.GoString(ptrName), "show"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectShow(f func()) {
	defer qt.Recovering("connect QInputMethod::show")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "show", f)
	}
}

func (ptr *QInputMethod) DisconnectShow() {
	defer qt.Recovering("disconnect QInputMethod::show")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "show")
	}
}

func (ptr *QInputMethod) Show() {
	defer qt.Recovering("QInputMethod::show")

	if ptr.Pointer() != nil {
		C.QInputMethod_Show(ptr.Pointer())
	}
}

//export callbackQInputMethod_Update
func callbackQInputMethod_Update(ptr unsafe.Pointer, ptrName *C.char, queries C.int) {
	defer qt.Recovering("callback QInputMethod::update")

	if signal := qt.GetSignal(C.GoString(ptrName), "update"); signal != nil {
		signal.(func(core.Qt__InputMethodQuery))(core.Qt__InputMethodQuery(queries))
	}

}

func (ptr *QInputMethod) ConnectUpdate(f func(queries core.Qt__InputMethodQuery)) {
	defer qt.Recovering("connect QInputMethod::update")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "update", f)
	}
}

func (ptr *QInputMethod) DisconnectUpdate(queries core.Qt__InputMethodQuery) {
	defer qt.Recovering("disconnect QInputMethod::update")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "update")
	}
}

func (ptr *QInputMethod) Update(queries core.Qt__InputMethodQuery) {
	defer qt.Recovering("QInputMethod::update")

	if ptr.Pointer() != nil {
		C.QInputMethod_Update(ptr.Pointer(), C.int(queries))
	}
}

//export callbackQInputMethod_VisibleChanged
func callbackQInputMethod_VisibleChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::visibleChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "visibleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectVisibleChanged(f func()) {
	defer qt.Recovering("connect QInputMethod::visibleChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectVisibleChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "visibleChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectVisibleChanged() {
	defer qt.Recovering("disconnect QInputMethod::visibleChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectVisibleChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "visibleChanged")
	}
}

func (ptr *QInputMethod) VisibleChanged() {
	defer qt.Recovering("QInputMethod::visibleChanged")

	if ptr.Pointer() != nil {
		C.QInputMethod_VisibleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_TimerEvent
func callbackQInputMethod_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QInputMethod::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQInputMethodFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QInputMethod) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QInputMethod::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QInputMethod) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QInputMethod::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QInputMethod) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QInputMethod::timerEvent")

	if ptr.Pointer() != nil {
		C.QInputMethod_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QInputMethod) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QInputMethod::timerEvent")

	if ptr.Pointer() != nil {
		C.QInputMethod_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQInputMethod_ChildEvent
func callbackQInputMethod_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QInputMethod::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQInputMethodFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QInputMethod) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QInputMethod::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QInputMethod) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QInputMethod::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QInputMethod) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QInputMethod::childEvent")

	if ptr.Pointer() != nil {
		C.QInputMethod_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QInputMethod) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QInputMethod::childEvent")

	if ptr.Pointer() != nil {
		C.QInputMethod_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQInputMethod_ConnectNotify
func callbackQInputMethod_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QInputMethod::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQInputMethodFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QInputMethod) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QInputMethod::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QInputMethod) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QInputMethod::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QInputMethod) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QInputMethod::connectNotify")

	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QInputMethod) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QInputMethod::connectNotify")

	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQInputMethod_CustomEvent
func callbackQInputMethod_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QInputMethod::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQInputMethodFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QInputMethod) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QInputMethod::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QInputMethod) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QInputMethod::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QInputMethod) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QInputMethod::customEvent")

	if ptr.Pointer() != nil {
		C.QInputMethod_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QInputMethod) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QInputMethod::customEvent")

	if ptr.Pointer() != nil {
		C.QInputMethod_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQInputMethod_DeleteLater
func callbackQInputMethod_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QInputMethod::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QInputMethod::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QInputMethod) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QInputMethod::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QInputMethod) DeleteLater() {
	defer qt.Recovering("QInputMethod::deleteLater")

	if ptr.Pointer() != nil {
		C.QInputMethod_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQInputMethod_DisconnectNotify
func callbackQInputMethod_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QInputMethod::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQInputMethodFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QInputMethod) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QInputMethod::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QInputMethod) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QInputMethod::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QInputMethod) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QInputMethod::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QInputMethod) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QInputMethod::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQInputMethod_Event
func callbackQInputMethod_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QInputMethod::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQInputMethodFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QInputMethod) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QInputMethod::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QInputMethod) DisconnectEvent() {
	defer qt.Recovering("disconnect QInputMethod::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QInputMethod) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QInputMethod::event")

	if ptr.Pointer() != nil {
		return C.QInputMethod_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QInputMethod) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QInputMethod::event")

	if ptr.Pointer() != nil {
		return C.QInputMethod_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQInputMethod_EventFilter
func callbackQInputMethod_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QInputMethod::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQInputMethodFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QInputMethod) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QInputMethod::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QInputMethod) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QInputMethod::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QInputMethod) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QInputMethod::eventFilter")

	if ptr.Pointer() != nil {
		return C.QInputMethod_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QInputMethod) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QInputMethod::eventFilter")

	if ptr.Pointer() != nil {
		return C.QInputMethod_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQInputMethod_MetaObject
func callbackQInputMethod_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QInputMethod::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQInputMethodFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QInputMethod) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QInputMethod::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QInputMethod) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QInputMethod::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QInputMethod) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QInputMethod::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QInputMethod_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QInputMethod) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QInputMethod::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QInputMethod_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QInputMethodEvent::AttributeType
type QInputMethodEvent__AttributeType int64

const (
	QInputMethodEvent__TextFormat = QInputMethodEvent__AttributeType(0)
	QInputMethodEvent__Cursor     = QInputMethodEvent__AttributeType(1)
	QInputMethodEvent__Language   = QInputMethodEvent__AttributeType(2)
	QInputMethodEvent__Ruby       = QInputMethodEvent__AttributeType(3)
	QInputMethodEvent__Selection  = QInputMethodEvent__AttributeType(4)
)

type QInputMethodEvent struct {
	core.QEvent
}

type QInputMethodEvent_ITF interface {
	core.QEvent_ITF
	QInputMethodEvent_PTR() *QInputMethodEvent
}

func (p *QInputMethodEvent) QInputMethodEvent_PTR() *QInputMethodEvent {
	return p
}

func (p *QInputMethodEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QInputMethodEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQInputMethodEvent(ptr QInputMethodEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputMethodEvent_PTR().Pointer()
	}
	return nil
}

func NewQInputMethodEventFromPointer(ptr unsafe.Pointer) *QInputMethodEvent {
	var n = new(QInputMethodEvent)
	n.SetPointer(ptr)
	return n
}

func newQInputMethodEventFromPointer(ptr unsafe.Pointer) *QInputMethodEvent {
	var n = NewQInputMethodEventFromPointer(ptr)
	return n
}

func NewQInputMethodEvent() *QInputMethodEvent {
	defer qt.Recovering("QInputMethodEvent::QInputMethodEvent")

	return newQInputMethodEventFromPointer(C.QInputMethodEvent_NewQInputMethodEvent())
}

func NewQInputMethodEvent3(other QInputMethodEvent_ITF) *QInputMethodEvent {
	defer qt.Recovering("QInputMethodEvent::QInputMethodEvent")

	return newQInputMethodEventFromPointer(C.QInputMethodEvent_NewQInputMethodEvent3(PointerFromQInputMethodEvent(other)))
}

func (ptr *QInputMethodEvent) CommitString() string {
	defer qt.Recovering("QInputMethodEvent::commitString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QInputMethodEvent_CommitString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QInputMethodEvent) PreeditString() string {
	defer qt.Recovering("QInputMethodEvent::preeditString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QInputMethodEvent_PreeditString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QInputMethodEvent) ReplacementLength() int {
	defer qt.Recovering("QInputMethodEvent::replacementLength")

	if ptr.Pointer() != nil {
		return int(C.QInputMethodEvent_ReplacementLength(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputMethodEvent) ReplacementStart() int {
	defer qt.Recovering("QInputMethodEvent::replacementStart")

	if ptr.Pointer() != nil {
		return int(C.QInputMethodEvent_ReplacementStart(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputMethodEvent) SetCommitString(commitString string, replaceFrom int, replaceLength int) {
	defer qt.Recovering("QInputMethodEvent::setCommitString")

	if ptr.Pointer() != nil {
		C.QInputMethodEvent_SetCommitString(ptr.Pointer(), C.CString(commitString), C.int(replaceFrom), C.int(replaceLength))
	}
}

type QInputMethodQueryEvent struct {
	core.QEvent
}

type QInputMethodQueryEvent_ITF interface {
	core.QEvent_ITF
	QInputMethodQueryEvent_PTR() *QInputMethodQueryEvent
}

func (p *QInputMethodQueryEvent) QInputMethodQueryEvent_PTR() *QInputMethodQueryEvent {
	return p
}

func (p *QInputMethodQueryEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QInputMethodQueryEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQInputMethodQueryEvent(ptr QInputMethodQueryEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputMethodQueryEvent_PTR().Pointer()
	}
	return nil
}

func NewQInputMethodQueryEventFromPointer(ptr unsafe.Pointer) *QInputMethodQueryEvent {
	var n = new(QInputMethodQueryEvent)
	n.SetPointer(ptr)
	return n
}

func newQInputMethodQueryEventFromPointer(ptr unsafe.Pointer) *QInputMethodQueryEvent {
	var n = NewQInputMethodQueryEventFromPointer(ptr)
	return n
}

func NewQInputMethodQueryEvent(queries core.Qt__InputMethodQuery) *QInputMethodQueryEvent {
	defer qt.Recovering("QInputMethodQueryEvent::QInputMethodQueryEvent")

	return newQInputMethodQueryEventFromPointer(C.QInputMethodQueryEvent_NewQInputMethodQueryEvent(C.int(queries)))
}

func (ptr *QInputMethodQueryEvent) Queries() core.Qt__InputMethodQuery {
	defer qt.Recovering("QInputMethodQueryEvent::queries")

	if ptr.Pointer() != nil {
		return core.Qt__InputMethodQuery(C.QInputMethodQueryEvent_Queries(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputMethodQueryEvent) SetValue(query core.Qt__InputMethodQuery, value core.QVariant_ITF) {
	defer qt.Recovering("QInputMethodQueryEvent::setValue")

	if ptr.Pointer() != nil {
		C.QInputMethodQueryEvent_SetValue(ptr.Pointer(), C.int(query), core.PointerFromQVariant(value))
	}
}

func (ptr *QInputMethodQueryEvent) Value(query core.Qt__InputMethodQuery) *core.QVariant {
	defer qt.Recovering("QInputMethodQueryEvent::value")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QInputMethodQueryEvent_Value(ptr.Pointer(), C.int(query)))
	}
	return nil
}

type QIntValidator struct {
	QValidator
}

type QIntValidator_ITF interface {
	QValidator_ITF
	QIntValidator_PTR() *QIntValidator
}

func (p *QIntValidator) QIntValidator_PTR() *QIntValidator {
	return p
}

func (p *QIntValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QValidator_PTR().Pointer()
	}
	return nil
}

func (p *QIntValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QValidator_PTR().SetPointer(ptr)
	}
}

func PointerFromQIntValidator(ptr QIntValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIntValidator_PTR().Pointer()
	}
	return nil
}

func NewQIntValidatorFromPointer(ptr unsafe.Pointer) *QIntValidator {
	var n = new(QIntValidator)
	n.SetPointer(ptr)
	return n
}

func newQIntValidatorFromPointer(ptr unsafe.Pointer) *QIntValidator {
	var n = NewQIntValidatorFromPointer(ptr)
	for len(n.ObjectName()) < len("QIntValidator_") {
		n.SetObjectName("QIntValidator_" + qt.Identifier())
	}
	return n
}

func (ptr *QIntValidator) SetBottom(vin int) {
	defer qt.Recovering("QIntValidator::setBottom")

	if ptr.Pointer() != nil {
		C.QIntValidator_SetBottom(ptr.Pointer(), C.int(vin))
	}
}

func (ptr *QIntValidator) SetTop(vin int) {
	defer qt.Recovering("QIntValidator::setTop")

	if ptr.Pointer() != nil {
		C.QIntValidator_SetTop(ptr.Pointer(), C.int(vin))
	}
}

//export callbackQIntValidator_Validate
func callbackQIntValidator_Validate(ptr unsafe.Pointer, ptrName *C.char, input *C.char, pos C.int) C.int {
	defer qt.Recovering("callback QIntValidator::validate")

	if signal := qt.GetSignal(C.GoString(ptrName), "validate"); signal != nil {
		return C.int(signal.(func(string, int) QValidator__State)(C.GoString(input), int(pos)))
	}

	return C.int(NewQIntValidatorFromPointer(ptr).ValidateDefault(C.GoString(input), int(pos)))
}

func (ptr *QIntValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	defer qt.Recovering("connect QIntValidator::validate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "validate", f)
	}
}

func (ptr *QIntValidator) DisconnectValidate() {
	defer qt.Recovering("disconnect QIntValidator::validate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "validate")
	}
}

func (ptr *QIntValidator) Validate(input string, pos int) QValidator__State {
	defer qt.Recovering("QIntValidator::validate")

	if ptr.Pointer() != nil {

	}
	return 0
}

func (ptr *QIntValidator) ValidateDefault(input string, pos int) QValidator__State {
	defer qt.Recovering("QIntValidator::validate")

	if ptr.Pointer() != nil {

	}
	return 0
}

func NewQIntValidator(parent core.QObject_ITF) *QIntValidator {
	defer qt.Recovering("QIntValidator::QIntValidator")

	return newQIntValidatorFromPointer(C.QIntValidator_NewQIntValidator(core.PointerFromQObject(parent)))
}

func NewQIntValidator2(minimum int, maximum int, parent core.QObject_ITF) *QIntValidator {
	defer qt.Recovering("QIntValidator::QIntValidator")

	return newQIntValidatorFromPointer(C.QIntValidator_NewQIntValidator2(C.int(minimum), C.int(maximum), core.PointerFromQObject(parent)))
}

func (ptr *QIntValidator) Bottom() int {
	defer qt.Recovering("QIntValidator::bottom")

	if ptr.Pointer() != nil {
		return int(C.QIntValidator_Bottom(ptr.Pointer()))
	}
	return 0
}

//export callbackQIntValidator_Fixup
func callbackQIntValidator_Fixup(ptr unsafe.Pointer, ptrName *C.char, input *C.char) {
	defer qt.Recovering("callback QIntValidator::fixup")

	if signal := qt.GetSignal(C.GoString(ptrName), "fixup"); signal != nil {
		signal.(func(string))(C.GoString(input))
	} else {
		NewQIntValidatorFromPointer(ptr).FixupDefault(C.GoString(input))
	}
}

func (ptr *QIntValidator) ConnectFixup(f func(input string)) {
	defer qt.Recovering("connect QIntValidator::fixup")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "fixup", f)
	}
}

func (ptr *QIntValidator) DisconnectFixup() {
	defer qt.Recovering("disconnect QIntValidator::fixup")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "fixup")
	}
}

func (ptr *QIntValidator) Fixup(input string) {
	defer qt.Recovering("QIntValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

func (ptr *QIntValidator) FixupDefault(input string) {
	defer qt.Recovering("QIntValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

//export callbackQIntValidator_SetRange
func callbackQIntValidator_SetRange(ptr unsafe.Pointer, ptrName *C.char, bottom C.int, top C.int) {
	defer qt.Recovering("callback QIntValidator::setRange")

	if signal := qt.GetSignal(C.GoString(ptrName), "setRange"); signal != nil {
		signal.(func(int, int))(int(bottom), int(top))
	} else {
		NewQIntValidatorFromPointer(ptr).SetRangeDefault(int(bottom), int(top))
	}
}

func (ptr *QIntValidator) ConnectSetRange(f func(bottom int, top int)) {
	defer qt.Recovering("connect QIntValidator::setRange")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setRange", f)
	}
}

func (ptr *QIntValidator) DisconnectSetRange() {
	defer qt.Recovering("disconnect QIntValidator::setRange")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setRange")
	}
}

func (ptr *QIntValidator) SetRange(bottom int, top int) {
	defer qt.Recovering("QIntValidator::setRange")

	if ptr.Pointer() != nil {
		C.QIntValidator_SetRange(ptr.Pointer(), C.int(bottom), C.int(top))
	}
}

func (ptr *QIntValidator) SetRangeDefault(bottom int, top int) {
	defer qt.Recovering("QIntValidator::setRange")

	if ptr.Pointer() != nil {
		C.QIntValidator_SetRangeDefault(ptr.Pointer(), C.int(bottom), C.int(top))
	}
}

func (ptr *QIntValidator) Top() int {
	defer qt.Recovering("QIntValidator::top")

	if ptr.Pointer() != nil {
		return int(C.QIntValidator_Top(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIntValidator) DestroyQIntValidator() {
	defer qt.Recovering("QIntValidator::~QIntValidator")

	if ptr.Pointer() != nil {
		C.QIntValidator_DestroyQIntValidator(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQIntValidator_TimerEvent
func callbackQIntValidator_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QIntValidator::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQIntValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QIntValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QIntValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QIntValidator) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QIntValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QIntValidator) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QIntValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QIntValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QIntValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QIntValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QIntValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQIntValidator_ChildEvent
func callbackQIntValidator_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QIntValidator::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQIntValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QIntValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QIntValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QIntValidator) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QIntValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QIntValidator) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QIntValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QIntValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QIntValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QIntValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QIntValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQIntValidator_ConnectNotify
func callbackQIntValidator_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QIntValidator::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIntValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIntValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QIntValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QIntValidator) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QIntValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QIntValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QIntValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QIntValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIntValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QIntValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QIntValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIntValidator_CustomEvent
func callbackQIntValidator_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QIntValidator::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQIntValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QIntValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QIntValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QIntValidator) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QIntValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QIntValidator) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QIntValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QIntValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QIntValidator) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QIntValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QIntValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQIntValidator_DeleteLater
func callbackQIntValidator_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QIntValidator::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QIntValidator) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QIntValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QIntValidator) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QIntValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QIntValidator) DeleteLater() {
	defer qt.Recovering("QIntValidator::deleteLater")

	if ptr.Pointer() != nil {
		C.QIntValidator_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQIntValidator_DisconnectNotify
func callbackQIntValidator_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QIntValidator::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIntValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIntValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QIntValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QIntValidator) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QIntValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QIntValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QIntValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QIntValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIntValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QIntValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QIntValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIntValidator_Event
func callbackQIntValidator_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QIntValidator::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQIntValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QIntValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QIntValidator::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QIntValidator) DisconnectEvent() {
	defer qt.Recovering("disconnect QIntValidator::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QIntValidator) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QIntValidator::event")

	if ptr.Pointer() != nil {
		return C.QIntValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QIntValidator) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QIntValidator::event")

	if ptr.Pointer() != nil {
		return C.QIntValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQIntValidator_EventFilter
func callbackQIntValidator_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QIntValidator::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQIntValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QIntValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QIntValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QIntValidator) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QIntValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QIntValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QIntValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QIntValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QIntValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QIntValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QIntValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQIntValidator_MetaObject
func callbackQIntValidator_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QIntValidator::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQIntValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QIntValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QIntValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QIntValidator) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QIntValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QIntValidator) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QIntValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QIntValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QIntValidator) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QIntValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QIntValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QKeyEvent struct {
	QInputEvent
}

type QKeyEvent_ITF interface {
	QInputEvent_ITF
	QKeyEvent_PTR() *QKeyEvent
}

func (p *QKeyEvent) QKeyEvent_PTR() *QKeyEvent {
	return p
}

func (p *QKeyEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QKeyEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQKeyEvent(ptr QKeyEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QKeyEvent_PTR().Pointer()
	}
	return nil
}

func NewQKeyEventFromPointer(ptr unsafe.Pointer) *QKeyEvent {
	var n = new(QKeyEvent)
	n.SetPointer(ptr)
	return n
}

func newQKeyEventFromPointer(ptr unsafe.Pointer) *QKeyEvent {
	var n = NewQKeyEventFromPointer(ptr)
	return n
}

func (ptr *QKeyEvent) Matches(key QKeySequence__StandardKey) bool {
	defer qt.Recovering("QKeyEvent::matches")

	if ptr.Pointer() != nil {
		return C.QKeyEvent_Matches(ptr.Pointer(), C.int(key)) != 0
	}
	return false
}

func (ptr *QKeyEvent) Count() int {
	defer qt.Recovering("QKeyEvent::count")

	if ptr.Pointer() != nil {
		return int(C.QKeyEvent_Count(ptr.Pointer()))
	}
	return 0
}

func (ptr *QKeyEvent) IsAutoRepeat() bool {
	defer qt.Recovering("QKeyEvent::isAutoRepeat")

	if ptr.Pointer() != nil {
		return C.QKeyEvent_IsAutoRepeat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QKeyEvent) Key() int {
	defer qt.Recovering("QKeyEvent::key")

	if ptr.Pointer() != nil {
		return int(C.QKeyEvent_Key(ptr.Pointer()))
	}
	return 0
}

func (ptr *QKeyEvent) Modifiers() core.Qt__KeyboardModifier {
	defer qt.Recovering("QKeyEvent::modifiers")

	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QKeyEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QKeyEvent) Text() string {
	defer qt.Recovering("QKeyEvent::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QKeyEvent_Text(ptr.Pointer()))
	}
	return ""
}

//QKeySequence::SequenceFormat
type QKeySequence__SequenceFormat int64

const (
	QKeySequence__NativeText   = QKeySequence__SequenceFormat(0)
	QKeySequence__PortableText = QKeySequence__SequenceFormat(1)
)

//QKeySequence::SequenceMatch
type QKeySequence__SequenceMatch int64

const (
	QKeySequence__NoMatch      = QKeySequence__SequenceMatch(0)
	QKeySequence__PartialMatch = QKeySequence__SequenceMatch(1)
	QKeySequence__ExactMatch   = QKeySequence__SequenceMatch(2)
)

//QKeySequence::StandardKey
type QKeySequence__StandardKey int64

const (
	QKeySequence__UnknownKey               = QKeySequence__StandardKey(0)
	QKeySequence__HelpContents             = QKeySequence__StandardKey(1)
	QKeySequence__WhatsThis                = QKeySequence__StandardKey(2)
	QKeySequence__Open                     = QKeySequence__StandardKey(3)
	QKeySequence__Close                    = QKeySequence__StandardKey(4)
	QKeySequence__Save                     = QKeySequence__StandardKey(5)
	QKeySequence__New                      = QKeySequence__StandardKey(6)
	QKeySequence__Delete                   = QKeySequence__StandardKey(7)
	QKeySequence__Cut                      = QKeySequence__StandardKey(8)
	QKeySequence__Copy                     = QKeySequence__StandardKey(9)
	QKeySequence__Paste                    = QKeySequence__StandardKey(10)
	QKeySequence__Undo                     = QKeySequence__StandardKey(11)
	QKeySequence__Redo                     = QKeySequence__StandardKey(12)
	QKeySequence__Back                     = QKeySequence__StandardKey(13)
	QKeySequence__Forward                  = QKeySequence__StandardKey(14)
	QKeySequence__Refresh                  = QKeySequence__StandardKey(15)
	QKeySequence__ZoomIn                   = QKeySequence__StandardKey(16)
	QKeySequence__ZoomOut                  = QKeySequence__StandardKey(17)
	QKeySequence__Print                    = QKeySequence__StandardKey(18)
	QKeySequence__AddTab                   = QKeySequence__StandardKey(19)
	QKeySequence__NextChild                = QKeySequence__StandardKey(20)
	QKeySequence__PreviousChild            = QKeySequence__StandardKey(21)
	QKeySequence__Find                     = QKeySequence__StandardKey(22)
	QKeySequence__FindNext                 = QKeySequence__StandardKey(23)
	QKeySequence__FindPrevious             = QKeySequence__StandardKey(24)
	QKeySequence__Replace                  = QKeySequence__StandardKey(25)
	QKeySequence__SelectAll                = QKeySequence__StandardKey(26)
	QKeySequence__Bold                     = QKeySequence__StandardKey(27)
	QKeySequence__Italic                   = QKeySequence__StandardKey(28)
	QKeySequence__Underline                = QKeySequence__StandardKey(29)
	QKeySequence__MoveToNextChar           = QKeySequence__StandardKey(30)
	QKeySequence__MoveToPreviousChar       = QKeySequence__StandardKey(31)
	QKeySequence__MoveToNextWord           = QKeySequence__StandardKey(32)
	QKeySequence__MoveToPreviousWord       = QKeySequence__StandardKey(33)
	QKeySequence__MoveToNextLine           = QKeySequence__StandardKey(34)
	QKeySequence__MoveToPreviousLine       = QKeySequence__StandardKey(35)
	QKeySequence__MoveToNextPage           = QKeySequence__StandardKey(36)
	QKeySequence__MoveToPreviousPage       = QKeySequence__StandardKey(37)
	QKeySequence__MoveToStartOfLine        = QKeySequence__StandardKey(38)
	QKeySequence__MoveToEndOfLine          = QKeySequence__StandardKey(39)
	QKeySequence__MoveToStartOfBlock       = QKeySequence__StandardKey(40)
	QKeySequence__MoveToEndOfBlock         = QKeySequence__StandardKey(41)
	QKeySequence__MoveToStartOfDocument    = QKeySequence__StandardKey(42)
	QKeySequence__MoveToEndOfDocument      = QKeySequence__StandardKey(43)
	QKeySequence__SelectNextChar           = QKeySequence__StandardKey(44)
	QKeySequence__SelectPreviousChar       = QKeySequence__StandardKey(45)
	QKeySequence__SelectNextWord           = QKeySequence__StandardKey(46)
	QKeySequence__SelectPreviousWord       = QKeySequence__StandardKey(47)
	QKeySequence__SelectNextLine           = QKeySequence__StandardKey(48)
	QKeySequence__SelectPreviousLine       = QKeySequence__StandardKey(49)
	QKeySequence__SelectNextPage           = QKeySequence__StandardKey(50)
	QKeySequence__SelectPreviousPage       = QKeySequence__StandardKey(51)
	QKeySequence__SelectStartOfLine        = QKeySequence__StandardKey(52)
	QKeySequence__SelectEndOfLine          = QKeySequence__StandardKey(53)
	QKeySequence__SelectStartOfBlock       = QKeySequence__StandardKey(54)
	QKeySequence__SelectEndOfBlock         = QKeySequence__StandardKey(55)
	QKeySequence__SelectStartOfDocument    = QKeySequence__StandardKey(56)
	QKeySequence__SelectEndOfDocument      = QKeySequence__StandardKey(57)
	QKeySequence__DeleteStartOfWord        = QKeySequence__StandardKey(58)
	QKeySequence__DeleteEndOfWord          = QKeySequence__StandardKey(59)
	QKeySequence__DeleteEndOfLine          = QKeySequence__StandardKey(60)
	QKeySequence__InsertParagraphSeparator = QKeySequence__StandardKey(61)
	QKeySequence__InsertLineSeparator      = QKeySequence__StandardKey(62)
	QKeySequence__SaveAs                   = QKeySequence__StandardKey(63)
	QKeySequence__Preferences              = QKeySequence__StandardKey(64)
	QKeySequence__Quit                     = QKeySequence__StandardKey(65)
	QKeySequence__FullScreen               = QKeySequence__StandardKey(66)
	QKeySequence__Deselect                 = QKeySequence__StandardKey(67)
	QKeySequence__DeleteCompleteLine       = QKeySequence__StandardKey(68)
	QKeySequence__Backspace                = QKeySequence__StandardKey(69)
)

type QKeySequence struct {
	ptr unsafe.Pointer
}

type QKeySequence_ITF interface {
	QKeySequence_PTR() *QKeySequence
}

func (p *QKeySequence) QKeySequence_PTR() *QKeySequence {
	return p
}

func (p *QKeySequence) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QKeySequence) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQKeySequence(ptr QKeySequence_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QKeySequence_PTR().Pointer()
	}
	return nil
}

func NewQKeySequenceFromPointer(ptr unsafe.Pointer) *QKeySequence {
	var n = new(QKeySequence)
	n.SetPointer(ptr)
	return n
}

func newQKeySequenceFromPointer(ptr unsafe.Pointer) *QKeySequence {
	var n = NewQKeySequenceFromPointer(ptr)
	return n
}

func NewQKeySequence() *QKeySequence {
	defer qt.Recovering("QKeySequence::QKeySequence")

	return newQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence())
}

func NewQKeySequence5(key QKeySequence__StandardKey) *QKeySequence {
	defer qt.Recovering("QKeySequence::QKeySequence")

	return newQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence5(C.int(key)))
}

func NewQKeySequence4(keysequence QKeySequence_ITF) *QKeySequence {
	defer qt.Recovering("QKeySequence::QKeySequence")

	return newQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence4(PointerFromQKeySequence(keysequence)))
}

func NewQKeySequence2(key string, format QKeySequence__SequenceFormat) *QKeySequence {
	defer qt.Recovering("QKeySequence::QKeySequence")

	return newQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence2(C.CString(key), C.int(format)))
}

func NewQKeySequence3(k1 int, k2 int, k3 int, k4 int) *QKeySequence {
	defer qt.Recovering("QKeySequence::QKeySequence")

	return newQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence3(C.int(k1), C.int(k2), C.int(k3), C.int(k4)))
}

func (ptr *QKeySequence) Count() int {
	defer qt.Recovering("QKeySequence::count")

	if ptr.Pointer() != nil {
		return int(C.QKeySequence_Count(ptr.Pointer()))
	}
	return 0
}

func QKeySequence_FromString(str string, format QKeySequence__SequenceFormat) *QKeySequence {
	defer qt.Recovering("QKeySequence::fromString")

	return NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_FromString(C.CString(str), C.int(format)))
}

func (ptr *QKeySequence) FromString(str string, format QKeySequence__SequenceFormat) *QKeySequence {
	defer qt.Recovering("QKeySequence::fromString")

	return NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_FromString(C.CString(str), C.int(format)))
}

func (ptr *QKeySequence) IsEmpty() bool {
	defer qt.Recovering("QKeySequence::isEmpty")

	if ptr.Pointer() != nil {
		return C.QKeySequence_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QKeySequence) Matches(seq QKeySequence_ITF) QKeySequence__SequenceMatch {
	defer qt.Recovering("QKeySequence::matches")

	if ptr.Pointer() != nil {
		return QKeySequence__SequenceMatch(C.QKeySequence_Matches(ptr.Pointer(), PointerFromQKeySequence(seq)))
	}
	return 0
}

func QKeySequence_Mnemonic(text string) *QKeySequence {
	defer qt.Recovering("QKeySequence::mnemonic")

	return NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_Mnemonic(C.CString(text)))
}

func (ptr *QKeySequence) Mnemonic(text string) *QKeySequence {
	defer qt.Recovering("QKeySequence::mnemonic")

	return NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_Mnemonic(C.CString(text)))
}

func (ptr *QKeySequence) Swap(other QKeySequence_ITF) {
	defer qt.Recovering("QKeySequence::swap")

	if ptr.Pointer() != nil {
		C.QKeySequence_Swap(ptr.Pointer(), PointerFromQKeySequence(other))
	}
}

func (ptr *QKeySequence) ToString(format QKeySequence__SequenceFormat) string {
	defer qt.Recovering("QKeySequence::toString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QKeySequence_ToString(ptr.Pointer(), C.int(format)))
	}
	return ""
}

func (ptr *QKeySequence) DestroyQKeySequence() {
	defer qt.Recovering("QKeySequence::~QKeySequence")

	if ptr.Pointer() != nil {
		C.QKeySequence_DestroyQKeySequence(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QLinearGradient struct {
	QGradient
}

type QLinearGradient_ITF interface {
	QGradient_ITF
	QLinearGradient_PTR() *QLinearGradient
}

func (p *QLinearGradient) QLinearGradient_PTR() *QLinearGradient {
	return p
}

func (p *QLinearGradient) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QGradient_PTR().Pointer()
	}
	return nil
}

func (p *QLinearGradient) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QGradient_PTR().SetPointer(ptr)
	}
}

func PointerFromQLinearGradient(ptr QLinearGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLinearGradient_PTR().Pointer()
	}
	return nil
}

func NewQLinearGradientFromPointer(ptr unsafe.Pointer) *QLinearGradient {
	var n = new(QLinearGradient)
	n.SetPointer(ptr)
	return n
}

func newQLinearGradientFromPointer(ptr unsafe.Pointer) *QLinearGradient {
	var n = NewQLinearGradientFromPointer(ptr)
	return n
}

func NewQLinearGradient3(x1 float64, y1 float64, x2 float64, y2 float64) *QLinearGradient {
	defer qt.Recovering("QLinearGradient::QLinearGradient")

	return newQLinearGradientFromPointer(C.QLinearGradient_NewQLinearGradient3(C.double(x1), C.double(y1), C.double(x2), C.double(y2)))
}

func NewQLinearGradient() *QLinearGradient {
	defer qt.Recovering("QLinearGradient::QLinearGradient")

	return newQLinearGradientFromPointer(C.QLinearGradient_NewQLinearGradient())
}

func NewQLinearGradient2(start core.QPointF_ITF, finalStop core.QPointF_ITF) *QLinearGradient {
	defer qt.Recovering("QLinearGradient::QLinearGradient")

	return newQLinearGradientFromPointer(C.QLinearGradient_NewQLinearGradient2(core.PointerFromQPointF(start), core.PointerFromQPointF(finalStop)))
}

func (ptr *QLinearGradient) FinalStop() *core.QPointF {
	defer qt.Recovering("QLinearGradient::finalStop")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QLinearGradient_FinalStop(ptr.Pointer()))
	}
	return nil
}

func (ptr *QLinearGradient) SetFinalStop(stop core.QPointF_ITF) {
	defer qt.Recovering("QLinearGradient::setFinalStop")

	if ptr.Pointer() != nil {
		C.QLinearGradient_SetFinalStop(ptr.Pointer(), core.PointerFromQPointF(stop))
	}
}

func (ptr *QLinearGradient) SetFinalStop2(x float64, y float64) {
	defer qt.Recovering("QLinearGradient::setFinalStop")

	if ptr.Pointer() != nil {
		C.QLinearGradient_SetFinalStop2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QLinearGradient) SetStart(start core.QPointF_ITF) {
	defer qt.Recovering("QLinearGradient::setStart")

	if ptr.Pointer() != nil {
		C.QLinearGradient_SetStart(ptr.Pointer(), core.PointerFromQPointF(start))
	}
}

func (ptr *QLinearGradient) SetStart2(x float64, y float64) {
	defer qt.Recovering("QLinearGradient::setStart")

	if ptr.Pointer() != nil {
		C.QLinearGradient_SetStart2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QLinearGradient) Start() *core.QPointF {
	defer qt.Recovering("QLinearGradient::start")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QLinearGradient_Start(ptr.Pointer()))
	}
	return nil
}

type QMatrix4x4 struct {
	ptr unsafe.Pointer
}

type QMatrix4x4_ITF interface {
	QMatrix4x4_PTR() *QMatrix4x4
}

func (p *QMatrix4x4) QMatrix4x4_PTR() *QMatrix4x4 {
	return p
}

func (p *QMatrix4x4) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMatrix4x4) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMatrix4x4(ptr QMatrix4x4_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMatrix4x4_PTR().Pointer()
	}
	return nil
}

func NewQMatrix4x4FromPointer(ptr unsafe.Pointer) *QMatrix4x4 {
	var n = new(QMatrix4x4)
	n.SetPointer(ptr)
	return n
}

func newQMatrix4x4FromPointer(ptr unsafe.Pointer) *QMatrix4x4 {
	var n = NewQMatrix4x4FromPointer(ptr)
	return n
}

func NewQMatrix4x4() *QMatrix4x4 {
	defer qt.Recovering("QMatrix4x4::QMatrix4x4")

	return newQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x4())
}

func NewQMatrix4x47(transform QTransform_ITF) *QMatrix4x4 {
	defer qt.Recovering("QMatrix4x4::QMatrix4x4")

	return newQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x47(PointerFromQTransform(transform)))
}

func (ptr *QMatrix4x4) IsAffine() bool {
	defer qt.Recovering("QMatrix4x4::isAffine")

	if ptr.Pointer() != nil {
		return C.QMatrix4x4_IsAffine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMatrix4x4) IsIdentity() bool {
	defer qt.Recovering("QMatrix4x4::isIdentity")

	if ptr.Pointer() != nil {
		return C.QMatrix4x4_IsIdentity(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMatrix4x4) LookAt(eye QVector3D_ITF, center QVector3D_ITF, up QVector3D_ITF) {
	defer qt.Recovering("QMatrix4x4::lookAt")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_LookAt(ptr.Pointer(), PointerFromQVector3D(eye), PointerFromQVector3D(center), PointerFromQVector3D(up))
	}
}

func (ptr *QMatrix4x4) Map(point core.QPoint_ITF) *core.QPoint {
	defer qt.Recovering("QMatrix4x4::map")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QMatrix4x4_Map(ptr.Pointer(), core.PointerFromQPoint(point)))
	}
	return nil
}

func (ptr *QMatrix4x4) Map2(point core.QPointF_ITF) *core.QPointF {
	defer qt.Recovering("QMatrix4x4::map")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMatrix4x4_Map2(ptr.Pointer(), core.PointerFromQPointF(point)))
	}
	return nil
}

func (ptr *QMatrix4x4) MapRect(rect core.QRect_ITF) *core.QRect {
	defer qt.Recovering("QMatrix4x4::mapRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QMatrix4x4_MapRect(ptr.Pointer(), core.PointerFromQRect(rect)))
	}
	return nil
}

func (ptr *QMatrix4x4) MapRect2(rect core.QRectF_ITF) *core.QRectF {
	defer qt.Recovering("QMatrix4x4::mapRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QMatrix4x4_MapRect2(ptr.Pointer(), core.PointerFromQRectF(rect)))
	}
	return nil
}

func (ptr *QMatrix4x4) Optimize() {
	defer qt.Recovering("QMatrix4x4::optimize")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_Optimize(ptr.Pointer())
	}
}

func (ptr *QMatrix4x4) Ortho2(rect core.QRect_ITF) {
	defer qt.Recovering("QMatrix4x4::ortho")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_Ortho2(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QMatrix4x4) Ortho3(rect core.QRectF_ITF) {
	defer qt.Recovering("QMatrix4x4::ortho")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_Ortho3(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QMatrix4x4) Rotate2(quaternion QQuaternion_ITF) {
	defer qt.Recovering("QMatrix4x4::rotate")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_Rotate2(ptr.Pointer(), PointerFromQQuaternion(quaternion))
	}
}

func (ptr *QMatrix4x4) Scale(vector QVector3D_ITF) {
	defer qt.Recovering("QMatrix4x4::scale")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_Scale(ptr.Pointer(), PointerFromQVector3D(vector))
	}
}

func (ptr *QMatrix4x4) SetColumn(index int, value QVector4D_ITF) {
	defer qt.Recovering("QMatrix4x4::setColumn")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_SetColumn(ptr.Pointer(), C.int(index), PointerFromQVector4D(value))
	}
}

func (ptr *QMatrix4x4) SetRow(index int, value QVector4D_ITF) {
	defer qt.Recovering("QMatrix4x4::setRow")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_SetRow(ptr.Pointer(), C.int(index), PointerFromQVector4D(value))
	}
}

func (ptr *QMatrix4x4) SetToIdentity() {
	defer qt.Recovering("QMatrix4x4::setToIdentity")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_SetToIdentity(ptr.Pointer())
	}
}

func (ptr *QMatrix4x4) Translate(vector QVector3D_ITF) {
	defer qt.Recovering("QMatrix4x4::translate")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_Translate(ptr.Pointer(), PointerFromQVector3D(vector))
	}
}

func (ptr *QMatrix4x4) Viewport2(rect core.QRectF_ITF) {
	defer qt.Recovering("QMatrix4x4::viewport")

	if ptr.Pointer() != nil {
		C.QMatrix4x4_Viewport2(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

type QMouseEvent struct {
	QInputEvent
}

type QMouseEvent_ITF interface {
	QInputEvent_ITF
	QMouseEvent_PTR() *QMouseEvent
}

func (p *QMouseEvent) QMouseEvent_PTR() *QMouseEvent {
	return p
}

func (p *QMouseEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QMouseEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQMouseEvent(ptr QMouseEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMouseEvent_PTR().Pointer()
	}
	return nil
}

func NewQMouseEventFromPointer(ptr unsafe.Pointer) *QMouseEvent {
	var n = new(QMouseEvent)
	n.SetPointer(ptr)
	return n
}

func newQMouseEventFromPointer(ptr unsafe.Pointer) *QMouseEvent {
	var n = NewQMouseEventFromPointer(ptr)
	return n
}

func NewQMouseEvent(ty core.QEvent__Type, localPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QMouseEvent {
	defer qt.Recovering("QMouseEvent::QMouseEvent")

	return newQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent(C.int(ty), core.PointerFromQPointF(localPos), C.int(button), C.int(buttons), C.int(modifiers)))
}

func NewQMouseEvent2(ty core.QEvent__Type, localPos core.QPointF_ITF, screenPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QMouseEvent {
	defer qt.Recovering("QMouseEvent::QMouseEvent")

	return newQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent2(C.int(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(screenPos), C.int(button), C.int(buttons), C.int(modifiers)))
}

func NewQMouseEvent3(ty core.QEvent__Type, localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QMouseEvent {
	defer qt.Recovering("QMouseEvent::QMouseEvent")

	return newQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent3(C.int(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos), C.int(button), C.int(buttons), C.int(modifiers)))
}

func (ptr *QMouseEvent) Button() core.Qt__MouseButton {
	defer qt.Recovering("QMouseEvent::button")

	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_Button(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) Buttons() core.Qt__MouseButton {
	defer qt.Recovering("QMouseEvent::buttons")

	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) Flags() core.Qt__MouseEventFlag {
	defer qt.Recovering("QMouseEvent::flags")

	if ptr.Pointer() != nil {
		return core.Qt__MouseEventFlag(C.QMouseEvent_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) GlobalPos() *core.QPoint {
	defer qt.Recovering("QMouseEvent::globalPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QMouseEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) GlobalX() int {
	defer qt.Recovering("QMouseEvent::globalX")

	if ptr.Pointer() != nil {
		return int(C.QMouseEvent_GlobalX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) GlobalY() int {
	defer qt.Recovering("QMouseEvent::globalY")

	if ptr.Pointer() != nil {
		return int(C.QMouseEvent_GlobalY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) LocalPos() *core.QPointF {
	defer qt.Recovering("QMouseEvent::localPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMouseEvent_LocalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) Pos() *core.QPoint {
	defer qt.Recovering("QMouseEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QMouseEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) ScreenPos() *core.QPointF {
	defer qt.Recovering("QMouseEvent::screenPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMouseEvent_ScreenPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) Source() core.Qt__MouseEventSource {
	defer qt.Recovering("QMouseEvent::source")

	if ptr.Pointer() != nil {
		return core.Qt__MouseEventSource(C.QMouseEvent_Source(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) WindowPos() *core.QPointF {
	defer qt.Recovering("QMouseEvent::windowPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMouseEvent_WindowPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) X() int {
	defer qt.Recovering("QMouseEvent::x")

	if ptr.Pointer() != nil {
		return int(C.QMouseEvent_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) Y() int {
	defer qt.Recovering("QMouseEvent::y")

	if ptr.Pointer() != nil {
		return int(C.QMouseEvent_Y(ptr.Pointer()))
	}
	return 0
}

type QMoveEvent struct {
	core.QEvent
}

type QMoveEvent_ITF interface {
	core.QEvent_ITF
	QMoveEvent_PTR() *QMoveEvent
}

func (p *QMoveEvent) QMoveEvent_PTR() *QMoveEvent {
	return p
}

func (p *QMoveEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QMoveEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQMoveEvent(ptr QMoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQMoveEventFromPointer(ptr unsafe.Pointer) *QMoveEvent {
	var n = new(QMoveEvent)
	n.SetPointer(ptr)
	return n
}

func newQMoveEventFromPointer(ptr unsafe.Pointer) *QMoveEvent {
	var n = NewQMoveEventFromPointer(ptr)
	return n
}

func NewQMoveEvent(pos core.QPoint_ITF, oldPos core.QPoint_ITF) *QMoveEvent {
	defer qt.Recovering("QMoveEvent::QMoveEvent")

	return newQMoveEventFromPointer(C.QMoveEvent_NewQMoveEvent(core.PointerFromQPoint(pos), core.PointerFromQPoint(oldPos)))
}

func (ptr *QMoveEvent) OldPos() *core.QPoint {
	defer qt.Recovering("QMoveEvent::oldPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QMoveEvent_OldPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMoveEvent) Pos() *core.QPoint {
	defer qt.Recovering("QMoveEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QMoveEvent_Pos(ptr.Pointer()))
	}
	return nil
}

//QMovie::CacheMode
type QMovie__CacheMode int64

const (
	QMovie__CacheNone = QMovie__CacheMode(0)
	QMovie__CacheAll  = QMovie__CacheMode(1)
)

//QMovie::MovieState
type QMovie__MovieState int64

const (
	QMovie__NotRunning = QMovie__MovieState(0)
	QMovie__Paused     = QMovie__MovieState(1)
	QMovie__Running    = QMovie__MovieState(2)
)

type QMovie struct {
	core.QObject
}

type QMovie_ITF interface {
	core.QObject_ITF
	QMovie_PTR() *QMovie
}

func (p *QMovie) QMovie_PTR() *QMovie {
	return p
}

func (p *QMovie) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QMovie) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQMovie(ptr QMovie_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMovie_PTR().Pointer()
	}
	return nil
}

func NewQMovieFromPointer(ptr unsafe.Pointer) *QMovie {
	var n = new(QMovie)
	n.SetPointer(ptr)
	return n
}

func newQMovieFromPointer(ptr unsafe.Pointer) *QMovie {
	var n = NewQMovieFromPointer(ptr)
	for len(n.ObjectName()) < len("QMovie_") {
		n.SetObjectName("QMovie_" + qt.Identifier())
	}
	return n
}

func (ptr *QMovie) CacheMode() QMovie__CacheMode {
	defer qt.Recovering("QMovie::cacheMode")

	if ptr.Pointer() != nil {
		return QMovie__CacheMode(C.QMovie_CacheMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMovie) SetCacheMode(mode QMovie__CacheMode) {
	defer qt.Recovering("QMovie::setCacheMode")

	if ptr.Pointer() != nil {
		C.QMovie_SetCacheMode(ptr.Pointer(), C.int(mode))
	}
}

//export callbackQMovie_SetSpeed
func callbackQMovie_SetSpeed(ptr unsafe.Pointer, ptrName *C.char, percentSpeed C.int) {
	defer qt.Recovering("callback QMovie::setSpeed")

	if signal := qt.GetSignal(C.GoString(ptrName), "setSpeed"); signal != nil {
		signal.(func(int))(int(percentSpeed))
	}

}

func (ptr *QMovie) ConnectSetSpeed(f func(percentSpeed int)) {
	defer qt.Recovering("connect QMovie::setSpeed")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setSpeed", f)
	}
}

func (ptr *QMovie) DisconnectSetSpeed(percentSpeed int) {
	defer qt.Recovering("disconnect QMovie::setSpeed")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setSpeed")
	}
}

func (ptr *QMovie) SetSpeed(percentSpeed int) {
	defer qt.Recovering("QMovie::setSpeed")

	if ptr.Pointer() != nil {
		C.QMovie_SetSpeed(ptr.Pointer(), C.int(percentSpeed))
	}
}

func (ptr *QMovie) Speed() int {
	defer qt.Recovering("QMovie::speed")

	if ptr.Pointer() != nil {
		return int(C.QMovie_Speed(ptr.Pointer()))
	}
	return 0
}

func NewQMovie2(device core.QIODevice_ITF, format string, parent core.QObject_ITF) *QMovie {
	defer qt.Recovering("QMovie::QMovie")

	return newQMovieFromPointer(C.QMovie_NewQMovie2(core.PointerFromQIODevice(device), C.CString(format), core.PointerFromQObject(parent)))
}

func NewQMovie(parent core.QObject_ITF) *QMovie {
	defer qt.Recovering("QMovie::QMovie")

	return newQMovieFromPointer(C.QMovie_NewQMovie(core.PointerFromQObject(parent)))
}

func NewQMovie3(fileName string, format string, parent core.QObject_ITF) *QMovie {
	defer qt.Recovering("QMovie::QMovie")

	return newQMovieFromPointer(C.QMovie_NewQMovie3(C.CString(fileName), C.CString(format), core.PointerFromQObject(parent)))
}

func (ptr *QMovie) BackgroundColor() *QColor {
	defer qt.Recovering("QMovie::backgroundColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QMovie_BackgroundColor(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMovie) CurrentFrameNumber() int {
	defer qt.Recovering("QMovie::currentFrameNumber")

	if ptr.Pointer() != nil {
		return int(C.QMovie_CurrentFrameNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMovie) CurrentImage() *QImage {
	defer qt.Recovering("QMovie::currentImage")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QMovie_CurrentImage(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMovie) CurrentPixmap() *QPixmap {
	defer qt.Recovering("QMovie::currentPixmap")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QMovie_CurrentPixmap(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMovie) Device() *core.QIODevice {
	defer qt.Recovering("QMovie::device")

	if ptr.Pointer() != nil {
		return core.NewQIODeviceFromPointer(C.QMovie_Device(ptr.Pointer()))
	}
	return nil
}

//export callbackQMovie_Error
func callbackQMovie_Error(ptr unsafe.Pointer, ptrName *C.char, error C.int) {
	defer qt.Recovering("callback QMovie::error")

	if signal := qt.GetSignal(C.GoString(ptrName), "error"); signal != nil {
		signal.(func(QImageReader__ImageReaderError))(QImageReader__ImageReaderError(error))
	}

}

func (ptr *QMovie) ConnectError(f func(error QImageReader__ImageReaderError)) {
	defer qt.Recovering("connect QMovie::error")

	if ptr.Pointer() != nil {
		C.QMovie_ConnectError(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "error", f)
	}
}

func (ptr *QMovie) DisconnectError() {
	defer qt.Recovering("disconnect QMovie::error")

	if ptr.Pointer() != nil {
		C.QMovie_DisconnectError(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "error")
	}
}

func (ptr *QMovie) Error(error QImageReader__ImageReaderError) {
	defer qt.Recovering("QMovie::error")

	if ptr.Pointer() != nil {
		C.QMovie_Error(ptr.Pointer(), C.int(error))
	}
}

func (ptr *QMovie) FileName() string {
	defer qt.Recovering("QMovie::fileName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMovie_FileName(ptr.Pointer()))
	}
	return ""
}

//export callbackQMovie_Finished
func callbackQMovie_Finished(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QMovie::finished")

	if signal := qt.GetSignal(C.GoString(ptrName), "finished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectFinished(f func()) {
	defer qt.Recovering("connect QMovie::finished")

	if ptr.Pointer() != nil {
		C.QMovie_ConnectFinished(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "finished", f)
	}
}

func (ptr *QMovie) DisconnectFinished() {
	defer qt.Recovering("disconnect QMovie::finished")

	if ptr.Pointer() != nil {
		C.QMovie_DisconnectFinished(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "finished")
	}
}

func (ptr *QMovie) Finished() {
	defer qt.Recovering("QMovie::finished")

	if ptr.Pointer() != nil {
		C.QMovie_Finished(ptr.Pointer())
	}
}

func (ptr *QMovie) Format() string {
	defer qt.Recovering("QMovie::format")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMovie_Format(ptr.Pointer()))
	}
	return ""
}

//export callbackQMovie_FrameChanged
func callbackQMovie_FrameChanged(ptr unsafe.Pointer, ptrName *C.char, frameNumber C.int) {
	defer qt.Recovering("callback QMovie::frameChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "frameChanged"); signal != nil {
		signal.(func(int))(int(frameNumber))
	}

}

func (ptr *QMovie) ConnectFrameChanged(f func(frameNumber int)) {
	defer qt.Recovering("connect QMovie::frameChanged")

	if ptr.Pointer() != nil {
		C.QMovie_ConnectFrameChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "frameChanged", f)
	}
}

func (ptr *QMovie) DisconnectFrameChanged() {
	defer qt.Recovering("disconnect QMovie::frameChanged")

	if ptr.Pointer() != nil {
		C.QMovie_DisconnectFrameChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "frameChanged")
	}
}

func (ptr *QMovie) FrameChanged(frameNumber int) {
	defer qt.Recovering("QMovie::frameChanged")

	if ptr.Pointer() != nil {
		C.QMovie_FrameChanged(ptr.Pointer(), C.int(frameNumber))
	}
}

func (ptr *QMovie) FrameCount() int {
	defer qt.Recovering("QMovie::frameCount")

	if ptr.Pointer() != nil {
		return int(C.QMovie_FrameCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMovie) FrameRect() *core.QRect {
	defer qt.Recovering("QMovie::frameRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QMovie_FrameRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMovie) IsValid() bool {
	defer qt.Recovering("QMovie::isValid")

	if ptr.Pointer() != nil {
		return C.QMovie_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMovie) JumpToFrame(frameNumber int) bool {
	defer qt.Recovering("QMovie::jumpToFrame")

	if ptr.Pointer() != nil {
		return C.QMovie_JumpToFrame(ptr.Pointer(), C.int(frameNumber)) != 0
	}
	return false
}

//export callbackQMovie_JumpToNextFrame
func callbackQMovie_JumpToNextFrame(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QMovie::jumpToNextFrame")

	if signal := qt.GetSignal(C.GoString(ptrName), "jumpToNextFrame"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QMovie) ConnectJumpToNextFrame(f func() bool) {
	defer qt.Recovering("connect QMovie::jumpToNextFrame")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "jumpToNextFrame", f)
	}
}

func (ptr *QMovie) DisconnectJumpToNextFrame() {
	defer qt.Recovering("disconnect QMovie::jumpToNextFrame")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "jumpToNextFrame")
	}
}

func (ptr *QMovie) JumpToNextFrame() bool {
	defer qt.Recovering("QMovie::jumpToNextFrame")

	if ptr.Pointer() != nil {
		return C.QMovie_JumpToNextFrame(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMovie) LoopCount() int {
	defer qt.Recovering("QMovie::loopCount")

	if ptr.Pointer() != nil {
		return int(C.QMovie_LoopCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMovie) NextFrameDelay() int {
	defer qt.Recovering("QMovie::nextFrameDelay")

	if ptr.Pointer() != nil {
		return int(C.QMovie_NextFrameDelay(ptr.Pointer()))
	}
	return 0
}

//export callbackQMovie_Resized
func callbackQMovie_Resized(ptr unsafe.Pointer, ptrName *C.char, size unsafe.Pointer) {
	defer qt.Recovering("callback QMovie::resized")

	if signal := qt.GetSignal(C.GoString(ptrName), "resized"); signal != nil {
		signal.(func(*core.QSize))(core.NewQSizeFromPointer(size))
	}

}

func (ptr *QMovie) ConnectResized(f func(size *core.QSize)) {
	defer qt.Recovering("connect QMovie::resized")

	if ptr.Pointer() != nil {
		C.QMovie_ConnectResized(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "resized", f)
	}
}

func (ptr *QMovie) DisconnectResized() {
	defer qt.Recovering("disconnect QMovie::resized")

	if ptr.Pointer() != nil {
		C.QMovie_DisconnectResized(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "resized")
	}
}

func (ptr *QMovie) Resized(size core.QSize_ITF) {
	defer qt.Recovering("QMovie::resized")

	if ptr.Pointer() != nil {
		C.QMovie_Resized(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QMovie) ScaledSize() *core.QSize {
	defer qt.Recovering("QMovie::scaledSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QMovie_ScaledSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMovie) SetBackgroundColor(color QColor_ITF) {
	defer qt.Recovering("QMovie::setBackgroundColor")

	if ptr.Pointer() != nil {
		C.QMovie_SetBackgroundColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QMovie) SetDevice(device core.QIODevice_ITF) {
	defer qt.Recovering("QMovie::setDevice")

	if ptr.Pointer() != nil {
		C.QMovie_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QMovie) SetFileName(fileName string) {
	defer qt.Recovering("QMovie::setFileName")

	if ptr.Pointer() != nil {
		C.QMovie_SetFileName(ptr.Pointer(), C.CString(fileName))
	}
}

func (ptr *QMovie) SetFormat(format string) {
	defer qt.Recovering("QMovie::setFormat")

	if ptr.Pointer() != nil {
		C.QMovie_SetFormat(ptr.Pointer(), C.CString(format))
	}
}

//export callbackQMovie_SetPaused
func callbackQMovie_SetPaused(ptr unsafe.Pointer, ptrName *C.char, paused C.int) {
	defer qt.Recovering("callback QMovie::setPaused")

	if signal := qt.GetSignal(C.GoString(ptrName), "setPaused"); signal != nil {
		signal.(func(bool))(int(paused) != 0)
	}

}

func (ptr *QMovie) ConnectSetPaused(f func(paused bool)) {
	defer qt.Recovering("connect QMovie::setPaused")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setPaused", f)
	}
}

func (ptr *QMovie) DisconnectSetPaused(paused bool) {
	defer qt.Recovering("disconnect QMovie::setPaused")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setPaused")
	}
}

func (ptr *QMovie) SetPaused(paused bool) {
	defer qt.Recovering("QMovie::setPaused")

	if ptr.Pointer() != nil {
		C.QMovie_SetPaused(ptr.Pointer(), C.int(qt.GoBoolToInt(paused)))
	}
}

func (ptr *QMovie) SetScaledSize(size core.QSize_ITF) {
	defer qt.Recovering("QMovie::setScaledSize")

	if ptr.Pointer() != nil {
		C.QMovie_SetScaledSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

//export callbackQMovie_Start
func callbackQMovie_Start(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QMovie::start")

	if signal := qt.GetSignal(C.GoString(ptrName), "start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectStart(f func()) {
	defer qt.Recovering("connect QMovie::start")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "start", f)
	}
}

func (ptr *QMovie) DisconnectStart() {
	defer qt.Recovering("disconnect QMovie::start")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "start")
	}
}

func (ptr *QMovie) Start() {
	defer qt.Recovering("QMovie::start")

	if ptr.Pointer() != nil {
		C.QMovie_Start(ptr.Pointer())
	}
}

//export callbackQMovie_Started
func callbackQMovie_Started(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QMovie::started")

	if signal := qt.GetSignal(C.GoString(ptrName), "started"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectStarted(f func()) {
	defer qt.Recovering("connect QMovie::started")

	if ptr.Pointer() != nil {
		C.QMovie_ConnectStarted(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "started", f)
	}
}

func (ptr *QMovie) DisconnectStarted() {
	defer qt.Recovering("disconnect QMovie::started")

	if ptr.Pointer() != nil {
		C.QMovie_DisconnectStarted(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "started")
	}
}

func (ptr *QMovie) Started() {
	defer qt.Recovering("QMovie::started")

	if ptr.Pointer() != nil {
		C.QMovie_Started(ptr.Pointer())
	}
}

func (ptr *QMovie) State() QMovie__MovieState {
	defer qt.Recovering("QMovie::state")

	if ptr.Pointer() != nil {
		return QMovie__MovieState(C.QMovie_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQMovie_StateChanged
func callbackQMovie_StateChanged(ptr unsafe.Pointer, ptrName *C.char, state C.int) {
	defer qt.Recovering("callback QMovie::stateChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "stateChanged"); signal != nil {
		signal.(func(QMovie__MovieState))(QMovie__MovieState(state))
	}

}

func (ptr *QMovie) ConnectStateChanged(f func(state QMovie__MovieState)) {
	defer qt.Recovering("connect QMovie::stateChanged")

	if ptr.Pointer() != nil {
		C.QMovie_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "stateChanged", f)
	}
}

func (ptr *QMovie) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QMovie::stateChanged")

	if ptr.Pointer() != nil {
		C.QMovie_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "stateChanged")
	}
}

func (ptr *QMovie) StateChanged(state QMovie__MovieState) {
	defer qt.Recovering("QMovie::stateChanged")

	if ptr.Pointer() != nil {
		C.QMovie_StateChanged(ptr.Pointer(), C.int(state))
	}
}

//export callbackQMovie_Stop
func callbackQMovie_Stop(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QMovie::stop")

	if signal := qt.GetSignal(C.GoString(ptrName), "stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectStop(f func()) {
	defer qt.Recovering("connect QMovie::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "stop", f)
	}
}

func (ptr *QMovie) DisconnectStop() {
	defer qt.Recovering("disconnect QMovie::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "stop")
	}
}

func (ptr *QMovie) Stop() {
	defer qt.Recovering("QMovie::stop")

	if ptr.Pointer() != nil {
		C.QMovie_Stop(ptr.Pointer())
	}
}

//export callbackQMovie_Updated
func callbackQMovie_Updated(ptr unsafe.Pointer, ptrName *C.char, rect unsafe.Pointer) {
	defer qt.Recovering("callback QMovie::updated")

	if signal := qt.GetSignal(C.GoString(ptrName), "updated"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	}

}

func (ptr *QMovie) ConnectUpdated(f func(rect *core.QRect)) {
	defer qt.Recovering("connect QMovie::updated")

	if ptr.Pointer() != nil {
		C.QMovie_ConnectUpdated(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "updated", f)
	}
}

func (ptr *QMovie) DisconnectUpdated() {
	defer qt.Recovering("disconnect QMovie::updated")

	if ptr.Pointer() != nil {
		C.QMovie_DisconnectUpdated(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "updated")
	}
}

func (ptr *QMovie) Updated(rect core.QRect_ITF) {
	defer qt.Recovering("QMovie::updated")

	if ptr.Pointer() != nil {
		C.QMovie_Updated(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QMovie) DestroyQMovie() {
	defer qt.Recovering("QMovie::~QMovie")

	if ptr.Pointer() != nil {
		C.QMovie_DestroyQMovie(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQMovie_TimerEvent
func callbackQMovie_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QMovie::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMovieFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMovie) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMovie::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QMovie) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMovie::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QMovie) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMovie::timerEvent")

	if ptr.Pointer() != nil {
		C.QMovie_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMovie) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMovie::timerEvent")

	if ptr.Pointer() != nil {
		C.QMovie_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMovie_ChildEvent
func callbackQMovie_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QMovie::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMovieFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMovie) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMovie::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QMovie) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMovie::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QMovie) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMovie::childEvent")

	if ptr.Pointer() != nil {
		C.QMovie_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMovie) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMovie::childEvent")

	if ptr.Pointer() != nil {
		C.QMovie_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMovie_ConnectNotify
func callbackQMovie_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMovie::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMovieFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMovie) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMovie::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QMovie) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMovie::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QMovie) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMovie::connectNotify")

	if ptr.Pointer() != nil {
		C.QMovie_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMovie) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMovie::connectNotify")

	if ptr.Pointer() != nil {
		C.QMovie_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMovie_CustomEvent
func callbackQMovie_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QMovie::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMovieFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMovie) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMovie::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QMovie) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMovie::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QMovie) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMovie::customEvent")

	if ptr.Pointer() != nil {
		C.QMovie_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMovie) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMovie::customEvent")

	if ptr.Pointer() != nil {
		C.QMovie_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMovie_DeleteLater
func callbackQMovie_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QMovie::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMovie::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QMovie) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMovie::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QMovie) DeleteLater() {
	defer qt.Recovering("QMovie::deleteLater")

	if ptr.Pointer() != nil {
		C.QMovie_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQMovie_DisconnectNotify
func callbackQMovie_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMovie::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMovieFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMovie) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMovie::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QMovie) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMovie::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QMovie) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMovie::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMovie_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMovie) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMovie::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMovie_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMovie_Event
func callbackQMovie_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QMovie::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQMovieFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QMovie) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMovie::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QMovie) DisconnectEvent() {
	defer qt.Recovering("disconnect QMovie::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QMovie) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMovie::event")

	if ptr.Pointer() != nil {
		return C.QMovie_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMovie) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMovie::event")

	if ptr.Pointer() != nil {
		return C.QMovie_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMovie_EventFilter
func callbackQMovie_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QMovie::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQMovieFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QMovie) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMovie::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QMovie) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMovie::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QMovie) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMovie::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMovie_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMovie) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMovie::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMovie_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMovie_MetaObject
func callbackQMovie_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QMovie::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMovieFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMovie) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMovie::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QMovie) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMovie::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QMovie) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMovie::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMovie_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMovie) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMovie::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMovie_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QNativeGestureEvent struct {
	QInputEvent
}

type QNativeGestureEvent_ITF interface {
	QInputEvent_ITF
	QNativeGestureEvent_PTR() *QNativeGestureEvent
}

func (p *QNativeGestureEvent) QNativeGestureEvent_PTR() *QNativeGestureEvent {
	return p
}

func (p *QNativeGestureEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QNativeGestureEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQNativeGestureEvent(ptr QNativeGestureEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QNativeGestureEvent_PTR().Pointer()
	}
	return nil
}

func NewQNativeGestureEventFromPointer(ptr unsafe.Pointer) *QNativeGestureEvent {
	var n = new(QNativeGestureEvent)
	n.SetPointer(ptr)
	return n
}

func newQNativeGestureEventFromPointer(ptr unsafe.Pointer) *QNativeGestureEvent {
	var n = NewQNativeGestureEventFromPointer(ptr)
	return n
}

func (ptr *QNativeGestureEvent) GestureType() core.Qt__NativeGestureType {
	defer qt.Recovering("QNativeGestureEvent::gestureType")

	if ptr.Pointer() != nil {
		return core.Qt__NativeGestureType(C.QNativeGestureEvent_GestureType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) GlobalPos() *core.QPoint {
	defer qt.Recovering("QNativeGestureEvent::globalPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QNativeGestureEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) LocalPos() *core.QPointF {
	defer qt.Recovering("QNativeGestureEvent::localPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QNativeGestureEvent_LocalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) Pos() *core.QPoint {
	defer qt.Recovering("QNativeGestureEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QNativeGestureEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) ScreenPos() *core.QPointF {
	defer qt.Recovering("QNativeGestureEvent::screenPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QNativeGestureEvent_ScreenPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) Value() float64 {
	defer qt.Recovering("QNativeGestureEvent::value")

	if ptr.Pointer() != nil {
		return float64(C.QNativeGestureEvent_Value(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) WindowPos() *core.QPointF {
	defer qt.Recovering("QNativeGestureEvent::windowPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QNativeGestureEvent_WindowPos(ptr.Pointer()))
	}
	return nil
}

type QOffscreenSurface struct {
	core.QObject
	QSurface
}

type QOffscreenSurface_ITF interface {
	core.QObject_ITF
	QSurface_ITF
	QOffscreenSurface_PTR() *QOffscreenSurface
}

func (p *QOffscreenSurface) QOffscreenSurface_PTR() *QOffscreenSurface {
	return p
}

func (p *QOffscreenSurface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOffscreenSurface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QSurface_PTR().SetPointer(ptr)
	}
}

func PointerFromQOffscreenSurface(ptr QOffscreenSurface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOffscreenSurface_PTR().Pointer()
	}
	return nil
}

func NewQOffscreenSurfaceFromPointer(ptr unsafe.Pointer) *QOffscreenSurface {
	var n = new(QOffscreenSurface)
	n.SetPointer(ptr)
	return n
}

func newQOffscreenSurfaceFromPointer(ptr unsafe.Pointer) *QOffscreenSurface {
	var n = NewQOffscreenSurfaceFromPointer(ptr)
	for len(n.ObjectName()) < len("QOffscreenSurface_") {
		n.SetObjectName("QOffscreenSurface_" + qt.Identifier())
	}
	return n
}

func NewQOffscreenSurface(targetScreen QScreen_ITF) *QOffscreenSurface {
	defer qt.Recovering("QOffscreenSurface::QOffscreenSurface")

	return newQOffscreenSurfaceFromPointer(C.QOffscreenSurface_NewQOffscreenSurface(PointerFromQScreen(targetScreen)))
}

func (ptr *QOffscreenSurface) Create() {
	defer qt.Recovering("QOffscreenSurface::create")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_Create(ptr.Pointer())
	}
}

func (ptr *QOffscreenSurface) Destroy() {
	defer qt.Recovering("QOffscreenSurface::destroy")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_Destroy(ptr.Pointer())
	}
}

//export callbackQOffscreenSurface_Format
func callbackQOffscreenSurface_Format(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QOffscreenSurface::format")

	if signal := qt.GetSignal(C.GoString(ptrName), "format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQOffscreenSurfaceFromPointer(ptr).FormatDefault())
}

func (ptr *QOffscreenSurface) ConnectFormat(f func() *QSurfaceFormat) {
	defer qt.Recovering("connect QOffscreenSurface::format")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "format", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectFormat() {
	defer qt.Recovering("disconnect QOffscreenSurface::format")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "format")
	}
}

func (ptr *QOffscreenSurface) Format() *QSurfaceFormat {
	defer qt.Recovering("QOffscreenSurface::format")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QOffscreenSurface_Format(ptr.Pointer()))
	}
	return nil
}

func (ptr *QOffscreenSurface) FormatDefault() *QSurfaceFormat {
	defer qt.Recovering("QOffscreenSurface::format")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QOffscreenSurface_FormatDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QOffscreenSurface) IsValid() bool {
	defer qt.Recovering("QOffscreenSurface::isValid")

	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QOffscreenSurface) RequestedFormat() *QSurfaceFormat {
	defer qt.Recovering("QOffscreenSurface::requestedFormat")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QOffscreenSurface_RequestedFormat(ptr.Pointer()))
	}
	return nil
}

func (ptr *QOffscreenSurface) Screen() *QScreen {
	defer qt.Recovering("QOffscreenSurface::screen")

	if ptr.Pointer() != nil {
		return NewQScreenFromPointer(C.QOffscreenSurface_Screen(ptr.Pointer()))
	}
	return nil
}

//export callbackQOffscreenSurface_ScreenChanged
func callbackQOffscreenSurface_ScreenChanged(ptr unsafe.Pointer, ptrName *C.char, screen unsafe.Pointer) {
	defer qt.Recovering("callback QOffscreenSurface::screenChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "screenChanged"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QOffscreenSurface) ConnectScreenChanged(f func(screen *QScreen)) {
	defer qt.Recovering("connect QOffscreenSurface::screenChanged")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ConnectScreenChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "screenChanged", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectScreenChanged() {
	defer qt.Recovering("disconnect QOffscreenSurface::screenChanged")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DisconnectScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "screenChanged")
	}
}

func (ptr *QOffscreenSurface) ScreenChanged(screen QScreen_ITF) {
	defer qt.Recovering("QOffscreenSurface::screenChanged")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ScreenChanged(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func (ptr *QOffscreenSurface) SetFormat(format QSurfaceFormat_ITF) {
	defer qt.Recovering("QOffscreenSurface::setFormat")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_SetFormat(ptr.Pointer(), PointerFromQSurfaceFormat(format))
	}
}

func (ptr *QOffscreenSurface) SetScreen(newScreen QScreen_ITF) {
	defer qt.Recovering("QOffscreenSurface::setScreen")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_SetScreen(ptr.Pointer(), PointerFromQScreen(newScreen))
	}
}

//export callbackQOffscreenSurface_Size
func callbackQOffscreenSurface_Size(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QOffscreenSurface::size")

	if signal := qt.GetSignal(C.GoString(ptrName), "size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQOffscreenSurfaceFromPointer(ptr).SizeDefault())
}

func (ptr *QOffscreenSurface) ConnectSize(f func() *core.QSize) {
	defer qt.Recovering("connect QOffscreenSurface::size")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "size", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectSize() {
	defer qt.Recovering("disconnect QOffscreenSurface::size")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "size")
	}
}

func (ptr *QOffscreenSurface) Size() *core.QSize {
	defer qt.Recovering("QOffscreenSurface::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QOffscreenSurface_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QOffscreenSurface) SizeDefault() *core.QSize {
	defer qt.Recovering("QOffscreenSurface::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QOffscreenSurface_SizeDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQOffscreenSurface_SurfaceType
func callbackQOffscreenSurface_SurfaceType(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QOffscreenSurface::surfaceType")

	if signal := qt.GetSignal(C.GoString(ptrName), "surfaceType"); signal != nil {
		return C.int(signal.(func() QSurface__SurfaceType)())
	}

	return C.int(NewQOffscreenSurfaceFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QOffscreenSurface) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	defer qt.Recovering("connect QOffscreenSurface::surfaceType")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "surfaceType", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectSurfaceType() {
	defer qt.Recovering("disconnect QOffscreenSurface::surfaceType")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "surfaceType")
	}
}

func (ptr *QOffscreenSurface) SurfaceType() QSurface__SurfaceType {
	defer qt.Recovering("QOffscreenSurface::surfaceType")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QOffscreenSurface_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QOffscreenSurface) SurfaceTypeDefault() QSurface__SurfaceType {
	defer qt.Recovering("QOffscreenSurface::surfaceType")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QOffscreenSurface_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QOffscreenSurface) DestroyQOffscreenSurface() {
	defer qt.Recovering("QOffscreenSurface::~QOffscreenSurface")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DestroyQOffscreenSurface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQOffscreenSurface_TimerEvent
func callbackQOffscreenSurface_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QOffscreenSurface::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QOffscreenSurface) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QOffscreenSurface::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QOffscreenSurface::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QOffscreenSurface) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QOffscreenSurface::timerEvent")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QOffscreenSurface) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QOffscreenSurface::timerEvent")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQOffscreenSurface_ChildEvent
func callbackQOffscreenSurface_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QOffscreenSurface::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QOffscreenSurface) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QOffscreenSurface::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QOffscreenSurface::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QOffscreenSurface) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QOffscreenSurface::childEvent")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QOffscreenSurface) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QOffscreenSurface::childEvent")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQOffscreenSurface_ConnectNotify
func callbackQOffscreenSurface_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QOffscreenSurface::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QOffscreenSurface) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QOffscreenSurface::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QOffscreenSurface::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QOffscreenSurface) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QOffscreenSurface::connectNotify")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QOffscreenSurface) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QOffscreenSurface::connectNotify")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQOffscreenSurface_CustomEvent
func callbackQOffscreenSurface_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QOffscreenSurface::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QOffscreenSurface) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QOffscreenSurface::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QOffscreenSurface::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QOffscreenSurface) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QOffscreenSurface::customEvent")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QOffscreenSurface) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QOffscreenSurface::customEvent")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQOffscreenSurface_DeleteLater
func callbackQOffscreenSurface_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QOffscreenSurface::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QOffscreenSurface) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QOffscreenSurface::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QOffscreenSurface::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QOffscreenSurface) DeleteLater() {
	defer qt.Recovering("QOffscreenSurface::deleteLater")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQOffscreenSurface_DisconnectNotify
func callbackQOffscreenSurface_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QOffscreenSurface::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QOffscreenSurface) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QOffscreenSurface::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QOffscreenSurface::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QOffscreenSurface) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QOffscreenSurface::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QOffscreenSurface) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QOffscreenSurface::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQOffscreenSurface_Event
func callbackQOffscreenSurface_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QOffscreenSurface::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQOffscreenSurfaceFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QOffscreenSurface) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QOffscreenSurface::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectEvent() {
	defer qt.Recovering("disconnect QOffscreenSurface::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QOffscreenSurface) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QOffscreenSurface::event")

	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QOffscreenSurface) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QOffscreenSurface::event")

	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQOffscreenSurface_EventFilter
func callbackQOffscreenSurface_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QOffscreenSurface::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQOffscreenSurfaceFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QOffscreenSurface) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QOffscreenSurface::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QOffscreenSurface::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QOffscreenSurface) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QOffscreenSurface::eventFilter")

	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QOffscreenSurface) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QOffscreenSurface::eventFilter")

	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQOffscreenSurface_MetaObject
func callbackQOffscreenSurface_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QOffscreenSurface::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQOffscreenSurfaceFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QOffscreenSurface) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QOffscreenSurface::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QOffscreenSurface::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QOffscreenSurface) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QOffscreenSurface::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QOffscreenSurface_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QOffscreenSurface) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QOffscreenSurface::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QOffscreenSurface_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QOpenGLBuffer::Access
type QOpenGLBuffer__Access int64

const (
	QOpenGLBuffer__ReadOnly  = QOpenGLBuffer__Access(0x88B8)
	QOpenGLBuffer__WriteOnly = QOpenGLBuffer__Access(0x88B9)
	QOpenGLBuffer__ReadWrite = QOpenGLBuffer__Access(0x88BA)
)

//QOpenGLBuffer::RangeAccessFlag
type QOpenGLBuffer__RangeAccessFlag int64

const (
	QOpenGLBuffer__RangeRead             = QOpenGLBuffer__RangeAccessFlag(0x0001)
	QOpenGLBuffer__RangeWrite            = QOpenGLBuffer__RangeAccessFlag(0x0002)
	QOpenGLBuffer__RangeInvalidate       = QOpenGLBuffer__RangeAccessFlag(0x0004)
	QOpenGLBuffer__RangeInvalidateBuffer = QOpenGLBuffer__RangeAccessFlag(0x0008)
	QOpenGLBuffer__RangeFlushExplicit    = QOpenGLBuffer__RangeAccessFlag(0x0010)
	QOpenGLBuffer__RangeUnsynchronized   = QOpenGLBuffer__RangeAccessFlag(0x0020)
)

//QOpenGLBuffer::Type
type QOpenGLBuffer__Type int64

const (
	QOpenGLBuffer__VertexBuffer      = QOpenGLBuffer__Type(0x8892)
	QOpenGLBuffer__IndexBuffer       = QOpenGLBuffer__Type(0x8893)
	QOpenGLBuffer__PixelPackBuffer   = QOpenGLBuffer__Type(0x88EB)
	QOpenGLBuffer__PixelUnpackBuffer = QOpenGLBuffer__Type(0x88EC)
)

//QOpenGLBuffer::UsagePattern
type QOpenGLBuffer__UsagePattern int64

const (
	QOpenGLBuffer__StreamDraw  = QOpenGLBuffer__UsagePattern(0x88E0)
	QOpenGLBuffer__StreamRead  = QOpenGLBuffer__UsagePattern(0x88E1)
	QOpenGLBuffer__StreamCopy  = QOpenGLBuffer__UsagePattern(0x88E2)
	QOpenGLBuffer__StaticDraw  = QOpenGLBuffer__UsagePattern(0x88E4)
	QOpenGLBuffer__StaticRead  = QOpenGLBuffer__UsagePattern(0x88E5)
	QOpenGLBuffer__StaticCopy  = QOpenGLBuffer__UsagePattern(0x88E6)
	QOpenGLBuffer__DynamicDraw = QOpenGLBuffer__UsagePattern(0x88E8)
	QOpenGLBuffer__DynamicRead = QOpenGLBuffer__UsagePattern(0x88E9)
	QOpenGLBuffer__DynamicCopy = QOpenGLBuffer__UsagePattern(0x88EA)
)

type QOpenGLBuffer struct {
	ptr unsafe.Pointer
}

type QOpenGLBuffer_ITF interface {
	QOpenGLBuffer_PTR() *QOpenGLBuffer
}

func (p *QOpenGLBuffer) QOpenGLBuffer_PTR() *QOpenGLBuffer {
	return p
}

func (p *QOpenGLBuffer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLBuffer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLBuffer(ptr QOpenGLBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLBuffer_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLBufferFromPointer(ptr unsafe.Pointer) *QOpenGLBuffer {
	var n = new(QOpenGLBuffer)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLBufferFromPointer(ptr unsafe.Pointer) *QOpenGLBuffer {
	var n = NewQOpenGLBufferFromPointer(ptr)
	return n
}

//QOpenGLContext::OpenGLModuleType
type QOpenGLContext__OpenGLModuleType int64

const (
	QOpenGLContext__LibGL   = QOpenGLContext__OpenGLModuleType(0)
	QOpenGLContext__LibGLES = QOpenGLContext__OpenGLModuleType(1)
)

type QOpenGLContext struct {
	core.QObject
}

type QOpenGLContext_ITF interface {
	core.QObject_ITF
	QOpenGLContext_PTR() *QOpenGLContext
}

func (p *QOpenGLContext) QOpenGLContext_PTR() *QOpenGLContext {
	return p
}

func (p *QOpenGLContext) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLContext) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLContext(ptr QOpenGLContext_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLContext_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLContextFromPointer(ptr unsafe.Pointer) *QOpenGLContext {
	var n = new(QOpenGLContext)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLContextFromPointer(ptr unsafe.Pointer) *QOpenGLContext {
	var n = NewQOpenGLContextFromPointer(ptr)
	return n
}

type QOpenGLContextGroup struct {
	core.QObject
}

type QOpenGLContextGroup_ITF interface {
	core.QObject_ITF
	QOpenGLContextGroup_PTR() *QOpenGLContextGroup
}

func (p *QOpenGLContextGroup) QOpenGLContextGroup_PTR() *QOpenGLContextGroup {
	return p
}

func (p *QOpenGLContextGroup) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLContextGroup) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLContextGroup(ptr QOpenGLContextGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLContextGroup_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLContextGroupFromPointer(ptr unsafe.Pointer) *QOpenGLContextGroup {
	var n = new(QOpenGLContextGroup)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLContextGroupFromPointer(ptr unsafe.Pointer) *QOpenGLContextGroup {
	var n = NewQOpenGLContextGroupFromPointer(ptr)
	return n
}

//QOpenGLDebugLogger::LoggingMode
type QOpenGLDebugLogger__LoggingMode int64

const (
	QOpenGLDebugLogger__AsynchronousLogging = QOpenGLDebugLogger__LoggingMode(0)
	QOpenGLDebugLogger__SynchronousLogging  = QOpenGLDebugLogger__LoggingMode(1)
)

type QOpenGLDebugLogger struct {
	core.QObject
}

type QOpenGLDebugLogger_ITF interface {
	core.QObject_ITF
	QOpenGLDebugLogger_PTR() *QOpenGLDebugLogger
}

func (p *QOpenGLDebugLogger) QOpenGLDebugLogger_PTR() *QOpenGLDebugLogger {
	return p
}

func (p *QOpenGLDebugLogger) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLDebugLogger) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLDebugLogger(ptr QOpenGLDebugLogger_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLDebugLogger_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLDebugLoggerFromPointer(ptr unsafe.Pointer) *QOpenGLDebugLogger {
	var n = new(QOpenGLDebugLogger)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLDebugLoggerFromPointer(ptr unsafe.Pointer) *QOpenGLDebugLogger {
	var n = NewQOpenGLDebugLoggerFromPointer(ptr)
	return n
}

//QOpenGLDebugMessage::Severity
type QOpenGLDebugMessage__Severity int64

const (
	QOpenGLDebugMessage__InvalidSeverity      = QOpenGLDebugMessage__Severity(0x00000000)
	QOpenGLDebugMessage__HighSeverity         = QOpenGLDebugMessage__Severity(0x00000001)
	QOpenGLDebugMessage__MediumSeverity       = QOpenGLDebugMessage__Severity(0x00000002)
	QOpenGLDebugMessage__LowSeverity          = QOpenGLDebugMessage__Severity(0x00000004)
	QOpenGLDebugMessage__NotificationSeverity = QOpenGLDebugMessage__Severity(0x00000008)
	QOpenGLDebugMessage__LastSeverity         = QOpenGLDebugMessage__Severity(QOpenGLDebugMessage__NotificationSeverity)
	QOpenGLDebugMessage__AnySeverity          = QOpenGLDebugMessage__Severity(0xffffffff)
)

//QOpenGLDebugMessage::Source
type QOpenGLDebugMessage__Source int64

const (
	QOpenGLDebugMessage__InvalidSource        = QOpenGLDebugMessage__Source(0x00000000)
	QOpenGLDebugMessage__APISource            = QOpenGLDebugMessage__Source(0x00000001)
	QOpenGLDebugMessage__WindowSystemSource   = QOpenGLDebugMessage__Source(0x00000002)
	QOpenGLDebugMessage__ShaderCompilerSource = QOpenGLDebugMessage__Source(0x00000004)
	QOpenGLDebugMessage__ThirdPartySource     = QOpenGLDebugMessage__Source(0x00000008)
	QOpenGLDebugMessage__ApplicationSource    = QOpenGLDebugMessage__Source(0x00000010)
	QOpenGLDebugMessage__OtherSource          = QOpenGLDebugMessage__Source(0x00000020)
	QOpenGLDebugMessage__LastSource           = QOpenGLDebugMessage__Source(QOpenGLDebugMessage__OtherSource)
	QOpenGLDebugMessage__AnySource            = QOpenGLDebugMessage__Source(0xffffffff)
)

//QOpenGLDebugMessage::Type
type QOpenGLDebugMessage__Type int64

const (
	QOpenGLDebugMessage__InvalidType            = QOpenGLDebugMessage__Type(0x00000000)
	QOpenGLDebugMessage__ErrorType              = QOpenGLDebugMessage__Type(0x00000001)
	QOpenGLDebugMessage__DeprecatedBehaviorType = QOpenGLDebugMessage__Type(0x00000002)
	QOpenGLDebugMessage__UndefinedBehaviorType  = QOpenGLDebugMessage__Type(0x00000004)
	QOpenGLDebugMessage__PortabilityType        = QOpenGLDebugMessage__Type(0x00000008)
	QOpenGLDebugMessage__PerformanceType        = QOpenGLDebugMessage__Type(0x00000010)
	QOpenGLDebugMessage__OtherType              = QOpenGLDebugMessage__Type(0x00000020)
	QOpenGLDebugMessage__MarkerType             = QOpenGLDebugMessage__Type(0x00000040)
	QOpenGLDebugMessage__GroupPushType          = QOpenGLDebugMessage__Type(0x00000080)
	QOpenGLDebugMessage__GroupPopType           = QOpenGLDebugMessage__Type(0x00000100)
	QOpenGLDebugMessage__LastType               = QOpenGLDebugMessage__Type(QOpenGLDebugMessage__GroupPopType)
	QOpenGLDebugMessage__AnyType                = QOpenGLDebugMessage__Type(0xffffffff)
)

type QOpenGLDebugMessage struct {
	ptr unsafe.Pointer
}

type QOpenGLDebugMessage_ITF interface {
	QOpenGLDebugMessage_PTR() *QOpenGLDebugMessage
}

func (p *QOpenGLDebugMessage) QOpenGLDebugMessage_PTR() *QOpenGLDebugMessage {
	return p
}

func (p *QOpenGLDebugMessage) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLDebugMessage) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLDebugMessage(ptr QOpenGLDebugMessage_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLDebugMessage_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLDebugMessageFromPointer(ptr unsafe.Pointer) *QOpenGLDebugMessage {
	var n = new(QOpenGLDebugMessage)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLDebugMessageFromPointer(ptr unsafe.Pointer) *QOpenGLDebugMessage {
	var n = NewQOpenGLDebugMessageFromPointer(ptr)
	return n
}

//QOpenGLFramebufferObject::Attachment
type QOpenGLFramebufferObject__Attachment int64

const (
	QOpenGLFramebufferObject__NoAttachment         = QOpenGLFramebufferObject__Attachment(0)
	QOpenGLFramebufferObject__CombinedDepthStencil = QOpenGLFramebufferObject__Attachment(1)
	QOpenGLFramebufferObject__Depth                = QOpenGLFramebufferObject__Attachment(2)
)

type QOpenGLFramebufferObject struct {
	ptr unsafe.Pointer
}

type QOpenGLFramebufferObject_ITF interface {
	QOpenGLFramebufferObject_PTR() *QOpenGLFramebufferObject
}

func (p *QOpenGLFramebufferObject) QOpenGLFramebufferObject_PTR() *QOpenGLFramebufferObject {
	return p
}

func (p *QOpenGLFramebufferObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLFramebufferObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLFramebufferObject(ptr QOpenGLFramebufferObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFramebufferObject_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFramebufferObjectFromPointer(ptr unsafe.Pointer) *QOpenGLFramebufferObject {
	var n = new(QOpenGLFramebufferObject)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFramebufferObjectFromPointer(ptr unsafe.Pointer) *QOpenGLFramebufferObject {
	var n = NewQOpenGLFramebufferObjectFromPointer(ptr)
	return n
}

type QOpenGLFramebufferObjectFormat struct {
	ptr unsafe.Pointer
}

type QOpenGLFramebufferObjectFormat_ITF interface {
	QOpenGLFramebufferObjectFormat_PTR() *QOpenGLFramebufferObjectFormat
}

func (p *QOpenGLFramebufferObjectFormat) QOpenGLFramebufferObjectFormat_PTR() *QOpenGLFramebufferObjectFormat {
	return p
}

func (p *QOpenGLFramebufferObjectFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLFramebufferObjectFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLFramebufferObjectFormat(ptr QOpenGLFramebufferObjectFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFramebufferObjectFormat_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFramebufferObjectFormatFromPointer(ptr unsafe.Pointer) *QOpenGLFramebufferObjectFormat {
	var n = new(QOpenGLFramebufferObjectFormat)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFramebufferObjectFormatFromPointer(ptr unsafe.Pointer) *QOpenGLFramebufferObjectFormat {
	var n = NewQOpenGLFramebufferObjectFormatFromPointer(ptr)
	return n
}

//QOpenGLFunctions::OpenGLFeature
type QOpenGLFunctions__OpenGLFeature int64

const (
	QOpenGLFunctions__Multitexture          = QOpenGLFunctions__OpenGLFeature(0x0001)
	QOpenGLFunctions__Shaders               = QOpenGLFunctions__OpenGLFeature(0x0002)
	QOpenGLFunctions__Buffers               = QOpenGLFunctions__OpenGLFeature(0x0004)
	QOpenGLFunctions__Framebuffers          = QOpenGLFunctions__OpenGLFeature(0x0008)
	QOpenGLFunctions__BlendColor            = QOpenGLFunctions__OpenGLFeature(0x0010)
	QOpenGLFunctions__BlendEquation         = QOpenGLFunctions__OpenGLFeature(0x0020)
	QOpenGLFunctions__BlendEquationSeparate = QOpenGLFunctions__OpenGLFeature(0x0040)
	QOpenGLFunctions__BlendFuncSeparate     = QOpenGLFunctions__OpenGLFeature(0x0080)
	QOpenGLFunctions__BlendSubtract         = QOpenGLFunctions__OpenGLFeature(0x0100)
	QOpenGLFunctions__CompressedTextures    = QOpenGLFunctions__OpenGLFeature(0x0200)
	QOpenGLFunctions__Multisample           = QOpenGLFunctions__OpenGLFeature(0x0400)
	QOpenGLFunctions__StencilSeparate       = QOpenGLFunctions__OpenGLFeature(0x0800)
	QOpenGLFunctions__NPOTTextures          = QOpenGLFunctions__OpenGLFeature(0x1000)
	QOpenGLFunctions__NPOTTextureRepeat     = QOpenGLFunctions__OpenGLFeature(0x2000)
	QOpenGLFunctions__FixedFunctionPipeline = QOpenGLFunctions__OpenGLFeature(0x4000)
	QOpenGLFunctions__TextureRGFormats      = QOpenGLFunctions__OpenGLFeature(0x8000)
)

type QOpenGLFunctions struct {
	ptr unsafe.Pointer
}

type QOpenGLFunctions_ITF interface {
	QOpenGLFunctions_PTR() *QOpenGLFunctions
}

func (p *QOpenGLFunctions) QOpenGLFunctions_PTR() *QOpenGLFunctions {
	return p
}

func (p *QOpenGLFunctions) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLFunctions) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLFunctions(ptr QOpenGLFunctions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctionsFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions {
	var n = new(QOpenGLFunctions)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctionsFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions {
	var n = NewQOpenGLFunctionsFromPointer(ptr)
	return n
}

type QOpenGLFunctions_1_0 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_0_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_0_PTR() *QOpenGLFunctions_1_0
}

func (p *QOpenGLFunctions_1_0) QOpenGLFunctions_1_0_PTR() *QOpenGLFunctions_1_0 {
	return p
}

func (p *QOpenGLFunctions_1_0) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_0) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_0(ptr QOpenGLFunctions_1_0_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_0_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_0 {
	var n = new(QOpenGLFunctions_1_0)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_1_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_0 {
	var n = NewQOpenGLFunctions_1_0FromPointer(ptr)
	return n
}

type QOpenGLFunctions_1_1 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_1_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_1_PTR() *QOpenGLFunctions_1_1
}

func (p *QOpenGLFunctions_1_1) QOpenGLFunctions_1_1_PTR() *QOpenGLFunctions_1_1 {
	return p
}

func (p *QOpenGLFunctions_1_1) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_1) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_1(ptr QOpenGLFunctions_1_1_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_1_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_1 {
	var n = new(QOpenGLFunctions_1_1)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_1_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_1 {
	var n = NewQOpenGLFunctions_1_1FromPointer(ptr)
	return n
}

type QOpenGLFunctions_1_2 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_2_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_2_PTR() *QOpenGLFunctions_1_2
}

func (p *QOpenGLFunctions_1_2) QOpenGLFunctions_1_2_PTR() *QOpenGLFunctions_1_2 {
	return p
}

func (p *QOpenGLFunctions_1_2) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_2) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_2(ptr QOpenGLFunctions_1_2_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_2_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_2FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_2 {
	var n = new(QOpenGLFunctions_1_2)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_1_2FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_2 {
	var n = NewQOpenGLFunctions_1_2FromPointer(ptr)
	return n
}

type QOpenGLFunctions_1_3 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_3_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_3_PTR() *QOpenGLFunctions_1_3
}

func (p *QOpenGLFunctions_1_3) QOpenGLFunctions_1_3_PTR() *QOpenGLFunctions_1_3 {
	return p
}

func (p *QOpenGLFunctions_1_3) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_3) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_3(ptr QOpenGLFunctions_1_3_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_3_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_3FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_3 {
	var n = new(QOpenGLFunctions_1_3)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_1_3FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_3 {
	var n = NewQOpenGLFunctions_1_3FromPointer(ptr)
	return n
}

type QOpenGLFunctions_1_4 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_4_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_4_PTR() *QOpenGLFunctions_1_4
}

func (p *QOpenGLFunctions_1_4) QOpenGLFunctions_1_4_PTR() *QOpenGLFunctions_1_4 {
	return p
}

func (p *QOpenGLFunctions_1_4) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_4) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_4(ptr QOpenGLFunctions_1_4_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_4_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_4FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_4 {
	var n = new(QOpenGLFunctions_1_4)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_1_4FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_4 {
	var n = NewQOpenGLFunctions_1_4FromPointer(ptr)
	return n
}

type QOpenGLFunctions_1_5 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_5_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_5_PTR() *QOpenGLFunctions_1_5
}

func (p *QOpenGLFunctions_1_5) QOpenGLFunctions_1_5_PTR() *QOpenGLFunctions_1_5 {
	return p
}

func (p *QOpenGLFunctions_1_5) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_5) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_5(ptr QOpenGLFunctions_1_5_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_5_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_5FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_5 {
	var n = new(QOpenGLFunctions_1_5)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_1_5FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_5 {
	var n = NewQOpenGLFunctions_1_5FromPointer(ptr)
	return n
}

type QOpenGLFunctions_2_0 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_2_0_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_2_0_PTR() *QOpenGLFunctions_2_0
}

func (p *QOpenGLFunctions_2_0) QOpenGLFunctions_2_0_PTR() *QOpenGLFunctions_2_0 {
	return p
}

func (p *QOpenGLFunctions_2_0) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_2_0) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_2_0(ptr QOpenGLFunctions_2_0_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_2_0_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_2_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_2_0 {
	var n = new(QOpenGLFunctions_2_0)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_2_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_2_0 {
	var n = NewQOpenGLFunctions_2_0FromPointer(ptr)
	return n
}

type QOpenGLFunctions_2_1 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_2_1_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_2_1_PTR() *QOpenGLFunctions_2_1
}

func (p *QOpenGLFunctions_2_1) QOpenGLFunctions_2_1_PTR() *QOpenGLFunctions_2_1 {
	return p
}

func (p *QOpenGLFunctions_2_1) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_2_1) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_2_1(ptr QOpenGLFunctions_2_1_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_2_1_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_2_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_2_1 {
	var n = new(QOpenGLFunctions_2_1)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_2_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_2_1 {
	var n = NewQOpenGLFunctions_2_1FromPointer(ptr)
	return n
}

type QOpenGLFunctions_3_0 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_0_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_0_PTR() *QOpenGLFunctions_3_0
}

func (p *QOpenGLFunctions_3_0) QOpenGLFunctions_3_0_PTR() *QOpenGLFunctions_3_0 {
	return p
}

func (p *QOpenGLFunctions_3_0) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_0) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_0(ptr QOpenGLFunctions_3_0_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_0_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_0 {
	var n = new(QOpenGLFunctions_3_0)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_3_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_0 {
	var n = NewQOpenGLFunctions_3_0FromPointer(ptr)
	return n
}

type QOpenGLFunctions_3_1 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_1_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_1_PTR() *QOpenGLFunctions_3_1
}

func (p *QOpenGLFunctions_3_1) QOpenGLFunctions_3_1_PTR() *QOpenGLFunctions_3_1 {
	return p
}

func (p *QOpenGLFunctions_3_1) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_1) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_1(ptr QOpenGLFunctions_3_1_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_1_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_1 {
	var n = new(QOpenGLFunctions_3_1)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_3_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_1 {
	var n = NewQOpenGLFunctions_3_1FromPointer(ptr)
	return n
}

type QOpenGLFunctions_3_2_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_2_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_2_Compatibility_PTR() *QOpenGLFunctions_3_2_Compatibility
}

func (p *QOpenGLFunctions_3_2_Compatibility) QOpenGLFunctions_3_2_Compatibility_PTR() *QOpenGLFunctions_3_2_Compatibility {
	return p
}

func (p *QOpenGLFunctions_3_2_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_2_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_2_Compatibility(ptr QOpenGLFunctions_3_2_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_2_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_2_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_2_Compatibility {
	var n = new(QOpenGLFunctions_3_2_Compatibility)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_3_2_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_2_Compatibility {
	var n = NewQOpenGLFunctions_3_2_CompatibilityFromPointer(ptr)
	return n
}

type QOpenGLFunctions_3_2_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_2_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_2_Core_PTR() *QOpenGLFunctions_3_2_Core
}

func (p *QOpenGLFunctions_3_2_Core) QOpenGLFunctions_3_2_Core_PTR() *QOpenGLFunctions_3_2_Core {
	return p
}

func (p *QOpenGLFunctions_3_2_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_2_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_2_Core(ptr QOpenGLFunctions_3_2_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_2_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_2_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_2_Core {
	var n = new(QOpenGLFunctions_3_2_Core)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_3_2_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_2_Core {
	var n = NewQOpenGLFunctions_3_2_CoreFromPointer(ptr)
	return n
}

type QOpenGLFunctions_3_3_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_3_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_3_Compatibility_PTR() *QOpenGLFunctions_3_3_Compatibility
}

func (p *QOpenGLFunctions_3_3_Compatibility) QOpenGLFunctions_3_3_Compatibility_PTR() *QOpenGLFunctions_3_3_Compatibility {
	return p
}

func (p *QOpenGLFunctions_3_3_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_3_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_3_Compatibility(ptr QOpenGLFunctions_3_3_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_3_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_3_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_3_Compatibility {
	var n = new(QOpenGLFunctions_3_3_Compatibility)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_3_3_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_3_Compatibility {
	var n = NewQOpenGLFunctions_3_3_CompatibilityFromPointer(ptr)
	return n
}

type QOpenGLFunctions_3_3_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_3_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_3_Core_PTR() *QOpenGLFunctions_3_3_Core
}

func (p *QOpenGLFunctions_3_3_Core) QOpenGLFunctions_3_3_Core_PTR() *QOpenGLFunctions_3_3_Core {
	return p
}

func (p *QOpenGLFunctions_3_3_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_3_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_3_Core(ptr QOpenGLFunctions_3_3_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_3_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_3_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_3_Core {
	var n = new(QOpenGLFunctions_3_3_Core)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_3_3_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_3_Core {
	var n = NewQOpenGLFunctions_3_3_CoreFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_0_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_0_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_0_Compatibility_PTR() *QOpenGLFunctions_4_0_Compatibility
}

func (p *QOpenGLFunctions_4_0_Compatibility) QOpenGLFunctions_4_0_Compatibility_PTR() *QOpenGLFunctions_4_0_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_0_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_0_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_0_Compatibility(ptr QOpenGLFunctions_4_0_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_0_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_0_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_0_Compatibility {
	var n = new(QOpenGLFunctions_4_0_Compatibility)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_0_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_0_Compatibility {
	var n = NewQOpenGLFunctions_4_0_CompatibilityFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_0_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_0_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_0_Core_PTR() *QOpenGLFunctions_4_0_Core
}

func (p *QOpenGLFunctions_4_0_Core) QOpenGLFunctions_4_0_Core_PTR() *QOpenGLFunctions_4_0_Core {
	return p
}

func (p *QOpenGLFunctions_4_0_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_0_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_0_Core(ptr QOpenGLFunctions_4_0_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_0_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_0_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_0_Core {
	var n = new(QOpenGLFunctions_4_0_Core)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_0_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_0_Core {
	var n = NewQOpenGLFunctions_4_0_CoreFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_1_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_1_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_1_Compatibility_PTR() *QOpenGLFunctions_4_1_Compatibility
}

func (p *QOpenGLFunctions_4_1_Compatibility) QOpenGLFunctions_4_1_Compatibility_PTR() *QOpenGLFunctions_4_1_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_1_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_1_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_1_Compatibility(ptr QOpenGLFunctions_4_1_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_1_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_1_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_1_Compatibility {
	var n = new(QOpenGLFunctions_4_1_Compatibility)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_1_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_1_Compatibility {
	var n = NewQOpenGLFunctions_4_1_CompatibilityFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_1_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_1_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_1_Core_PTR() *QOpenGLFunctions_4_1_Core
}

func (p *QOpenGLFunctions_4_1_Core) QOpenGLFunctions_4_1_Core_PTR() *QOpenGLFunctions_4_1_Core {
	return p
}

func (p *QOpenGLFunctions_4_1_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_1_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_1_Core(ptr QOpenGLFunctions_4_1_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_1_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_1_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_1_Core {
	var n = new(QOpenGLFunctions_4_1_Core)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_1_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_1_Core {
	var n = NewQOpenGLFunctions_4_1_CoreFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_2_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_2_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_2_Compatibility_PTR() *QOpenGLFunctions_4_2_Compatibility
}

func (p *QOpenGLFunctions_4_2_Compatibility) QOpenGLFunctions_4_2_Compatibility_PTR() *QOpenGLFunctions_4_2_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_2_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_2_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_2_Compatibility(ptr QOpenGLFunctions_4_2_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_2_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_2_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_2_Compatibility {
	var n = new(QOpenGLFunctions_4_2_Compatibility)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_2_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_2_Compatibility {
	var n = NewQOpenGLFunctions_4_2_CompatibilityFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_2_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_2_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_2_Core_PTR() *QOpenGLFunctions_4_2_Core
}

func (p *QOpenGLFunctions_4_2_Core) QOpenGLFunctions_4_2_Core_PTR() *QOpenGLFunctions_4_2_Core {
	return p
}

func (p *QOpenGLFunctions_4_2_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_2_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_2_Core(ptr QOpenGLFunctions_4_2_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_2_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_2_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_2_Core {
	var n = new(QOpenGLFunctions_4_2_Core)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_2_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_2_Core {
	var n = NewQOpenGLFunctions_4_2_CoreFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_3_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_3_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_3_Compatibility_PTR() *QOpenGLFunctions_4_3_Compatibility
}

func (p *QOpenGLFunctions_4_3_Compatibility) QOpenGLFunctions_4_3_Compatibility_PTR() *QOpenGLFunctions_4_3_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_3_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_3_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_3_Compatibility(ptr QOpenGLFunctions_4_3_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_3_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_3_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_3_Compatibility {
	var n = new(QOpenGLFunctions_4_3_Compatibility)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_3_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_3_Compatibility {
	var n = NewQOpenGLFunctions_4_3_CompatibilityFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_3_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_3_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_3_Core_PTR() *QOpenGLFunctions_4_3_Core
}

func (p *QOpenGLFunctions_4_3_Core) QOpenGLFunctions_4_3_Core_PTR() *QOpenGLFunctions_4_3_Core {
	return p
}

func (p *QOpenGLFunctions_4_3_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_3_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_3_Core(ptr QOpenGLFunctions_4_3_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_3_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_3_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_3_Core {
	var n = new(QOpenGLFunctions_4_3_Core)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_3_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_3_Core {
	var n = NewQOpenGLFunctions_4_3_CoreFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_4_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_4_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_4_Compatibility_PTR() *QOpenGLFunctions_4_4_Compatibility
}

func (p *QOpenGLFunctions_4_4_Compatibility) QOpenGLFunctions_4_4_Compatibility_PTR() *QOpenGLFunctions_4_4_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_4_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_4_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_4_Compatibility(ptr QOpenGLFunctions_4_4_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_4_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_4_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_4_Compatibility {
	var n = new(QOpenGLFunctions_4_4_Compatibility)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_4_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_4_Compatibility {
	var n = NewQOpenGLFunctions_4_4_CompatibilityFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_4_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_4_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_4_Core_PTR() *QOpenGLFunctions_4_4_Core
}

func (p *QOpenGLFunctions_4_4_Core) QOpenGLFunctions_4_4_Core_PTR() *QOpenGLFunctions_4_4_Core {
	return p
}

func (p *QOpenGLFunctions_4_4_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_4_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_4_Core(ptr QOpenGLFunctions_4_4_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_4_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_4_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_4_Core {
	var n = new(QOpenGLFunctions_4_4_Core)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_4_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_4_Core {
	var n = NewQOpenGLFunctions_4_4_CoreFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_5_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_5_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_5_Compatibility_PTR() *QOpenGLFunctions_4_5_Compatibility
}

func (p *QOpenGLFunctions_4_5_Compatibility) QOpenGLFunctions_4_5_Compatibility_PTR() *QOpenGLFunctions_4_5_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_5_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_5_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_5_Compatibility(ptr QOpenGLFunctions_4_5_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_5_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_5_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_5_Compatibility {
	var n = new(QOpenGLFunctions_4_5_Compatibility)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_5_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_5_Compatibility {
	var n = NewQOpenGLFunctions_4_5_CompatibilityFromPointer(ptr)
	return n
}

type QOpenGLFunctions_4_5_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_5_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_5_Core_PTR() *QOpenGLFunctions_4_5_Core
}

func (p *QOpenGLFunctions_4_5_Core) QOpenGLFunctions_4_5_Core_PTR() *QOpenGLFunctions_4_5_Core {
	return p
}

func (p *QOpenGLFunctions_4_5_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_5_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_5_Core(ptr QOpenGLFunctions_4_5_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_5_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_5_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_5_Core {
	var n = new(QOpenGLFunctions_4_5_Core)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_4_5_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_5_Core {
	var n = NewQOpenGLFunctions_4_5_CoreFromPointer(ptr)
	return n
}

type QOpenGLFunctions_ES2 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_ES2_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_ES2_PTR() *QOpenGLFunctions_ES2
}

func (p *QOpenGLFunctions_ES2) QOpenGLFunctions_ES2_PTR() *QOpenGLFunctions_ES2 {
	return p
}

func (p *QOpenGLFunctions_ES2) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_ES2) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_ES2(ptr QOpenGLFunctions_ES2_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_ES2_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_ES2FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_ES2 {
	var n = new(QOpenGLFunctions_ES2)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLFunctions_ES2FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_ES2 {
	var n = NewQOpenGLFunctions_ES2FromPointer(ptr)
	return n
}

type QOpenGLPaintDevice struct {
	QPaintDevice
}

type QOpenGLPaintDevice_ITF interface {
	QPaintDevice_ITF
	QOpenGLPaintDevice_PTR() *QOpenGLPaintDevice
}

func (p *QOpenGLPaintDevice) QOpenGLPaintDevice_PTR() *QOpenGLPaintDevice {
	return p
}

func (p *QOpenGLPaintDevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLPaintDevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLPaintDevice(ptr QOpenGLPaintDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLPaintDevice_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLPaintDeviceFromPointer(ptr unsafe.Pointer) *QOpenGLPaintDevice {
	var n = new(QOpenGLPaintDevice)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLPaintDeviceFromPointer(ptr unsafe.Pointer) *QOpenGLPaintDevice {
	var n = NewQOpenGLPaintDeviceFromPointer(ptr)
	return n
}

type QOpenGLPixelTransferOptions struct {
	ptr unsafe.Pointer
}

type QOpenGLPixelTransferOptions_ITF interface {
	QOpenGLPixelTransferOptions_PTR() *QOpenGLPixelTransferOptions
}

func (p *QOpenGLPixelTransferOptions) QOpenGLPixelTransferOptions_PTR() *QOpenGLPixelTransferOptions {
	return p
}

func (p *QOpenGLPixelTransferOptions) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLPixelTransferOptions) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLPixelTransferOptions(ptr QOpenGLPixelTransferOptions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLPixelTransferOptions_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLPixelTransferOptionsFromPointer(ptr unsafe.Pointer) *QOpenGLPixelTransferOptions {
	var n = new(QOpenGLPixelTransferOptions)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLPixelTransferOptionsFromPointer(ptr unsafe.Pointer) *QOpenGLPixelTransferOptions {
	var n = NewQOpenGLPixelTransferOptionsFromPointer(ptr)
	return n
}

//QOpenGLShader::ShaderTypeBit
type QOpenGLShader__ShaderTypeBit int64

const (
	QOpenGLShader__Vertex                 = QOpenGLShader__ShaderTypeBit(0x0001)
	QOpenGLShader__Fragment               = QOpenGLShader__ShaderTypeBit(0x0002)
	QOpenGLShader__Geometry               = QOpenGLShader__ShaderTypeBit(0x0004)
	QOpenGLShader__TessellationControl    = QOpenGLShader__ShaderTypeBit(0x0008)
	QOpenGLShader__TessellationEvaluation = QOpenGLShader__ShaderTypeBit(0x0010)
	QOpenGLShader__Compute                = QOpenGLShader__ShaderTypeBit(0x0020)
)

type QOpenGLShader struct {
	core.QObject
}

type QOpenGLShader_ITF interface {
	core.QObject_ITF
	QOpenGLShader_PTR() *QOpenGLShader
}

func (p *QOpenGLShader) QOpenGLShader_PTR() *QOpenGLShader {
	return p
}

func (p *QOpenGLShader) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLShader) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLShader(ptr QOpenGLShader_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLShader_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLShaderFromPointer(ptr unsafe.Pointer) *QOpenGLShader {
	var n = new(QOpenGLShader)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLShaderFromPointer(ptr unsafe.Pointer) *QOpenGLShader {
	var n = NewQOpenGLShaderFromPointer(ptr)
	return n
}

type QOpenGLShaderProgram struct {
	core.QObject
}

type QOpenGLShaderProgram_ITF interface {
	core.QObject_ITF
	QOpenGLShaderProgram_PTR() *QOpenGLShaderProgram
}

func (p *QOpenGLShaderProgram) QOpenGLShaderProgram_PTR() *QOpenGLShaderProgram {
	return p
}

func (p *QOpenGLShaderProgram) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLShaderProgram) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLShaderProgram(ptr QOpenGLShaderProgram_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLShaderProgram_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLShaderProgramFromPointer(ptr unsafe.Pointer) *QOpenGLShaderProgram {
	var n = new(QOpenGLShaderProgram)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLShaderProgramFromPointer(ptr unsafe.Pointer) *QOpenGLShaderProgram {
	var n = NewQOpenGLShaderProgramFromPointer(ptr)
	return n
}

//QOpenGLTexture::BindingTarget
type QOpenGLTexture__BindingTarget int64

const (
	QOpenGLTexture__BindingTarget1D                 = QOpenGLTexture__BindingTarget(0x8068)
	QOpenGLTexture__BindingTarget1DArray            = QOpenGLTexture__BindingTarget(0x8C1C)
	QOpenGLTexture__BindingTarget2D                 = QOpenGLTexture__BindingTarget(0x8069)
	QOpenGLTexture__BindingTarget2DArray            = QOpenGLTexture__BindingTarget(0x8C1D)
	QOpenGLTexture__BindingTarget3D                 = QOpenGLTexture__BindingTarget(0x806A)
	QOpenGLTexture__BindingTargetCubeMap            = QOpenGLTexture__BindingTarget(0x8514)
	QOpenGLTexture__BindingTargetCubeMapArray       = QOpenGLTexture__BindingTarget(0x900A)
	QOpenGLTexture__BindingTarget2DMultisample      = QOpenGLTexture__BindingTarget(0x9104)
	QOpenGLTexture__BindingTarget2DMultisampleArray = QOpenGLTexture__BindingTarget(0x9105)
	QOpenGLTexture__BindingTargetRectangle          = QOpenGLTexture__BindingTarget(0x84F6)
	QOpenGLTexture__BindingTargetBuffer             = QOpenGLTexture__BindingTarget(0x8C2C)
)

//QOpenGLTexture::ComparisonFunction
type QOpenGLTexture__ComparisonFunction int64

const (
	QOpenGLTexture__CompareLessEqual    = QOpenGLTexture__ComparisonFunction(0x0203)
	QOpenGLTexture__CompareGreaterEqual = QOpenGLTexture__ComparisonFunction(0x0206)
	QOpenGLTexture__CompareLess         = QOpenGLTexture__ComparisonFunction(0x0201)
	QOpenGLTexture__CompareGreater      = QOpenGLTexture__ComparisonFunction(0x0204)
	QOpenGLTexture__CompareEqual        = QOpenGLTexture__ComparisonFunction(0x0202)
	QOpenGLTexture__CommpareNotEqual    = QOpenGLTexture__ComparisonFunction(0x0205)
	QOpenGLTexture__CompareAlways       = QOpenGLTexture__ComparisonFunction(0x0207)
	QOpenGLTexture__CompareNever        = QOpenGLTexture__ComparisonFunction(0x0200)
)

//QOpenGLTexture::ComparisonMode
type QOpenGLTexture__ComparisonMode int64

const (
	QOpenGLTexture__CompareRefToTexture = QOpenGLTexture__ComparisonMode(0x884E)
	QOpenGLTexture__CompareNone         = QOpenGLTexture__ComparisonMode(0x0000)
)

//QOpenGLTexture::CoordinateDirection
type QOpenGLTexture__CoordinateDirection int64

const (
	QOpenGLTexture__DirectionS = QOpenGLTexture__CoordinateDirection(0x2802)
	QOpenGLTexture__DirectionT = QOpenGLTexture__CoordinateDirection(0x2803)
	QOpenGLTexture__DirectionR = QOpenGLTexture__CoordinateDirection(0x8072)
)

//QOpenGLTexture::CubeMapFace
type QOpenGLTexture__CubeMapFace int64

const (
	QOpenGLTexture__CubeMapPositiveX = QOpenGLTexture__CubeMapFace(0x8515)
	QOpenGLTexture__CubeMapNegativeX = QOpenGLTexture__CubeMapFace(0x8516)
	QOpenGLTexture__CubeMapPositiveY = QOpenGLTexture__CubeMapFace(0x8517)
	QOpenGLTexture__CubeMapNegativeY = QOpenGLTexture__CubeMapFace(0x8518)
	QOpenGLTexture__CubeMapPositiveZ = QOpenGLTexture__CubeMapFace(0x8519)
	QOpenGLTexture__CubeMapNegativeZ = QOpenGLTexture__CubeMapFace(0x851A)
)

//QOpenGLTexture::DepthStencilMode
type QOpenGLTexture__DepthStencilMode int64

const (
	QOpenGLTexture__DepthMode   = QOpenGLTexture__DepthStencilMode(0x1902)
	QOpenGLTexture__StencilMode = QOpenGLTexture__DepthStencilMode(0x1901)
)

//QOpenGLTexture::Feature
type QOpenGLTexture__Feature int64

const (
	QOpenGLTexture__ImmutableStorage            = QOpenGLTexture__Feature(0x00000001)
	QOpenGLTexture__ImmutableMultisampleStorage = QOpenGLTexture__Feature(0x00000002)
	QOpenGLTexture__TextureRectangle            = QOpenGLTexture__Feature(0x00000004)
	QOpenGLTexture__TextureArrays               = QOpenGLTexture__Feature(0x00000008)
	QOpenGLTexture__Texture3D                   = QOpenGLTexture__Feature(0x00000010)
	QOpenGLTexture__TextureMultisample          = QOpenGLTexture__Feature(0x00000020)
	QOpenGLTexture__TextureBuffer               = QOpenGLTexture__Feature(0x00000040)
	QOpenGLTexture__TextureCubeMapArrays        = QOpenGLTexture__Feature(0x00000080)
	QOpenGLTexture__Swizzle                     = QOpenGLTexture__Feature(0x00000100)
	QOpenGLTexture__StencilTexturing            = QOpenGLTexture__Feature(0x00000200)
	QOpenGLTexture__AnisotropicFiltering        = QOpenGLTexture__Feature(0x00000400)
	QOpenGLTexture__NPOTTextures                = QOpenGLTexture__Feature(0x00000800)
	QOpenGLTexture__NPOTTextureRepeat           = QOpenGLTexture__Feature(0x00001000)
	QOpenGLTexture__Texture1D                   = QOpenGLTexture__Feature(0x00002000)
	QOpenGLTexture__TextureComparisonOperators  = QOpenGLTexture__Feature(0x00004000)
	QOpenGLTexture__TextureMipMapLevel          = QOpenGLTexture__Feature(0x00008000)
)

//QOpenGLTexture::Filter
type QOpenGLTexture__Filter int64

const (
	QOpenGLTexture__Nearest              = QOpenGLTexture__Filter(0x2600)
	QOpenGLTexture__Linear               = QOpenGLTexture__Filter(0x2601)
	QOpenGLTexture__NearestMipMapNearest = QOpenGLTexture__Filter(0x2700)
	QOpenGLTexture__NearestMipMapLinear  = QOpenGLTexture__Filter(0x2702)
	QOpenGLTexture__LinearMipMapNearest  = QOpenGLTexture__Filter(0x2701)
	QOpenGLTexture__LinearMipMapLinear   = QOpenGLTexture__Filter(0x2703)
)

//QOpenGLTexture::MipMapGeneration
type QOpenGLTexture__MipMapGeneration int64

const (
	QOpenGLTexture__GenerateMipMaps     = QOpenGLTexture__MipMapGeneration(0)
	QOpenGLTexture__DontGenerateMipMaps = QOpenGLTexture__MipMapGeneration(1)
)

//QOpenGLTexture::PixelFormat
type QOpenGLTexture__PixelFormat int64

const (
	QOpenGLTexture__NoSourceFormat = QOpenGLTexture__PixelFormat(0)
	QOpenGLTexture__Red            = QOpenGLTexture__PixelFormat(0x1903)
	QOpenGLTexture__RG             = QOpenGLTexture__PixelFormat(0x8227)
	QOpenGLTexture__RGB            = QOpenGLTexture__PixelFormat(0x1907)
	QOpenGLTexture__BGR            = QOpenGLTexture__PixelFormat(0x80E0)
	QOpenGLTexture__RGBA           = QOpenGLTexture__PixelFormat(0x1908)
	QOpenGLTexture__BGRA           = QOpenGLTexture__PixelFormat(0x80E1)
	QOpenGLTexture__Red_Integer    = QOpenGLTexture__PixelFormat(0x8D94)
	QOpenGLTexture__RG_Integer     = QOpenGLTexture__PixelFormat(0x8228)
	QOpenGLTexture__RGB_Integer    = QOpenGLTexture__PixelFormat(0x8D98)
	QOpenGLTexture__BGR_Integer    = QOpenGLTexture__PixelFormat(0x8D9A)
	QOpenGLTexture__RGBA_Integer   = QOpenGLTexture__PixelFormat(0x8D99)
	QOpenGLTexture__BGRA_Integer   = QOpenGLTexture__PixelFormat(0x8D9B)
	QOpenGLTexture__Stencil        = QOpenGLTexture__PixelFormat(0x1901)
	QOpenGLTexture__Depth          = QOpenGLTexture__PixelFormat(0x1902)
	QOpenGLTexture__DepthStencil   = QOpenGLTexture__PixelFormat(0x84F9)
	QOpenGLTexture__Alpha          = QOpenGLTexture__PixelFormat(0x1906)
	QOpenGLTexture__Luminance      = QOpenGLTexture__PixelFormat(0x1909)
	QOpenGLTexture__LuminanceAlpha = QOpenGLTexture__PixelFormat(0x190A)
)

//QOpenGLTexture::PixelType
type QOpenGLTexture__PixelType int64

const (
	QOpenGLTexture__NoPixelType               = QOpenGLTexture__PixelType(0)
	QOpenGLTexture__Int8                      = QOpenGLTexture__PixelType(0x1400)
	QOpenGLTexture__UInt8                     = QOpenGLTexture__PixelType(0x1401)
	QOpenGLTexture__Int16                     = QOpenGLTexture__PixelType(0x1402)
	QOpenGLTexture__UInt16                    = QOpenGLTexture__PixelType(0x1403)
	QOpenGLTexture__Int32                     = QOpenGLTexture__PixelType(0x1404)
	QOpenGLTexture__UInt32                    = QOpenGLTexture__PixelType(0x1405)
	QOpenGLTexture__Float16                   = QOpenGLTexture__PixelType(0x140B)
	QOpenGLTexture__Float16OES                = QOpenGLTexture__PixelType(0x8D61)
	QOpenGLTexture__Float32                   = QOpenGLTexture__PixelType(0x1406)
	QOpenGLTexture__UInt32_RGB9_E5            = QOpenGLTexture__PixelType(0x8C3E)
	QOpenGLTexture__UInt32_RG11B10F           = QOpenGLTexture__PixelType(0x8C3B)
	QOpenGLTexture__UInt8_RG3B2               = QOpenGLTexture__PixelType(0x8032)
	QOpenGLTexture__UInt8_RG3B2_Rev           = QOpenGLTexture__PixelType(0x8362)
	QOpenGLTexture__UInt16_RGB5A1             = QOpenGLTexture__PixelType(0x8034)
	QOpenGLTexture__UInt16_RGB5A1_Rev         = QOpenGLTexture__PixelType(0x8366)
	QOpenGLTexture__UInt16_R5G6B5             = QOpenGLTexture__PixelType(0x8363)
	QOpenGLTexture__UInt16_R5G6B5_Rev         = QOpenGLTexture__PixelType(0x8364)
	QOpenGLTexture__UInt16_RGBA4              = QOpenGLTexture__PixelType(0x8033)
	QOpenGLTexture__UInt16_RGBA4_Rev          = QOpenGLTexture__PixelType(0x8365)
	QOpenGLTexture__UInt32_RGBA8              = QOpenGLTexture__PixelType(0x8035)
	QOpenGLTexture__UInt32_RGBA8_Rev          = QOpenGLTexture__PixelType(0x8367)
	QOpenGLTexture__UInt32_RGB10A2            = QOpenGLTexture__PixelType(0x8036)
	QOpenGLTexture__UInt32_RGB10A2_Rev        = QOpenGLTexture__PixelType(0x8368)
	QOpenGLTexture__UInt32_D24S8              = QOpenGLTexture__PixelType(0x84FA)
	QOpenGLTexture__Float32_D32_UInt32_S8_X24 = QOpenGLTexture__PixelType(0x8DAD)
)

//QOpenGLTexture::SwizzleComponent
type QOpenGLTexture__SwizzleComponent int64

const (
	QOpenGLTexture__SwizzleRed   = QOpenGLTexture__SwizzleComponent(0x8E42)
	QOpenGLTexture__SwizzleGreen = QOpenGLTexture__SwizzleComponent(0x8E43)
	QOpenGLTexture__SwizzleBlue  = QOpenGLTexture__SwizzleComponent(0x8E44)
	QOpenGLTexture__SwizzleAlpha = QOpenGLTexture__SwizzleComponent(0x8E45)
)

//QOpenGLTexture::SwizzleValue
type QOpenGLTexture__SwizzleValue int64

const (
	QOpenGLTexture__RedValue   = QOpenGLTexture__SwizzleValue(0x1903)
	QOpenGLTexture__GreenValue = QOpenGLTexture__SwizzleValue(0x1904)
	QOpenGLTexture__BlueValue  = QOpenGLTexture__SwizzleValue(0x1905)
	QOpenGLTexture__AlphaValue = QOpenGLTexture__SwizzleValue(0x1906)
	QOpenGLTexture__ZeroValue  = QOpenGLTexture__SwizzleValue(0)
	QOpenGLTexture__OneValue   = QOpenGLTexture__SwizzleValue(1)
)

//QOpenGLTexture::Target
type QOpenGLTexture__Target int64

const (
	QOpenGLTexture__Target1D                 = QOpenGLTexture__Target(0x0DE0)
	QOpenGLTexture__Target1DArray            = QOpenGLTexture__Target(0x8C18)
	QOpenGLTexture__Target2D                 = QOpenGLTexture__Target(0x0DE1)
	QOpenGLTexture__Target2DArray            = QOpenGLTexture__Target(0x8C1A)
	QOpenGLTexture__Target3D                 = QOpenGLTexture__Target(0x806F)
	QOpenGLTexture__TargetCubeMap            = QOpenGLTexture__Target(0x8513)
	QOpenGLTexture__TargetCubeMapArray       = QOpenGLTexture__Target(0x9009)
	QOpenGLTexture__Target2DMultisample      = QOpenGLTexture__Target(0x9100)
	QOpenGLTexture__Target2DMultisampleArray = QOpenGLTexture__Target(0x9102)
	QOpenGLTexture__TargetRectangle          = QOpenGLTexture__Target(0x84F5)
	QOpenGLTexture__TargetBuffer             = QOpenGLTexture__Target(0x8C2A)
)

//QOpenGLTexture::TextureFormat
type QOpenGLTexture__TextureFormat int64

const (
	QOpenGLTexture__NoFormat                       = QOpenGLTexture__TextureFormat(0)
	QOpenGLTexture__R8_UNorm                       = QOpenGLTexture__TextureFormat(0x8229)
	QOpenGLTexture__RG8_UNorm                      = QOpenGLTexture__TextureFormat(0x822B)
	QOpenGLTexture__RGB8_UNorm                     = QOpenGLTexture__TextureFormat(0x8051)
	QOpenGLTexture__RGBA8_UNorm                    = QOpenGLTexture__TextureFormat(0x8058)
	QOpenGLTexture__R16_UNorm                      = QOpenGLTexture__TextureFormat(0x822A)
	QOpenGLTexture__RG16_UNorm                     = QOpenGLTexture__TextureFormat(0x822C)
	QOpenGLTexture__RGB16_UNorm                    = QOpenGLTexture__TextureFormat(0x8054)
	QOpenGLTexture__RGBA16_UNorm                   = QOpenGLTexture__TextureFormat(0x805B)
	QOpenGLTexture__R8_SNorm                       = QOpenGLTexture__TextureFormat(0x8F94)
	QOpenGLTexture__RG8_SNorm                      = QOpenGLTexture__TextureFormat(0x8F95)
	QOpenGLTexture__RGB8_SNorm                     = QOpenGLTexture__TextureFormat(0x8F96)
	QOpenGLTexture__RGBA8_SNorm                    = QOpenGLTexture__TextureFormat(0x8F97)
	QOpenGLTexture__R16_SNorm                      = QOpenGLTexture__TextureFormat(0x8F98)
	QOpenGLTexture__RG16_SNorm                     = QOpenGLTexture__TextureFormat(0x8F99)
	QOpenGLTexture__RGB16_SNorm                    = QOpenGLTexture__TextureFormat(0x8F9A)
	QOpenGLTexture__RGBA16_SNorm                   = QOpenGLTexture__TextureFormat(0x8F9B)
	QOpenGLTexture__R8U                            = QOpenGLTexture__TextureFormat(0x8232)
	QOpenGLTexture__RG8U                           = QOpenGLTexture__TextureFormat(0x8238)
	QOpenGLTexture__RGB8U                          = QOpenGLTexture__TextureFormat(0x8D7D)
	QOpenGLTexture__RGBA8U                         = QOpenGLTexture__TextureFormat(0x8D7C)
	QOpenGLTexture__R16U                           = QOpenGLTexture__TextureFormat(0x8234)
	QOpenGLTexture__RG16U                          = QOpenGLTexture__TextureFormat(0x823A)
	QOpenGLTexture__RGB16U                         = QOpenGLTexture__TextureFormat(0x8D77)
	QOpenGLTexture__RGBA16U                        = QOpenGLTexture__TextureFormat(0x8D76)
	QOpenGLTexture__R32U                           = QOpenGLTexture__TextureFormat(0x8236)
	QOpenGLTexture__RG32U                          = QOpenGLTexture__TextureFormat(0x823C)
	QOpenGLTexture__RGB32U                         = QOpenGLTexture__TextureFormat(0x8D71)
	QOpenGLTexture__RGBA32U                        = QOpenGLTexture__TextureFormat(0x8D70)
	QOpenGLTexture__R8I                            = QOpenGLTexture__TextureFormat(0x8231)
	QOpenGLTexture__RG8I                           = QOpenGLTexture__TextureFormat(0x8237)
	QOpenGLTexture__RGB8I                          = QOpenGLTexture__TextureFormat(0x8D8F)
	QOpenGLTexture__RGBA8I                         = QOpenGLTexture__TextureFormat(0x8D8E)
	QOpenGLTexture__R16I                           = QOpenGLTexture__TextureFormat(0x8233)
	QOpenGLTexture__RG16I                          = QOpenGLTexture__TextureFormat(0x8239)
	QOpenGLTexture__RGB16I                         = QOpenGLTexture__TextureFormat(0x8D89)
	QOpenGLTexture__RGBA16I                        = QOpenGLTexture__TextureFormat(0x8D88)
	QOpenGLTexture__R32I                           = QOpenGLTexture__TextureFormat(0x8235)
	QOpenGLTexture__RG32I                          = QOpenGLTexture__TextureFormat(0x823B)
	QOpenGLTexture__RGB32I                         = QOpenGLTexture__TextureFormat(0x8D83)
	QOpenGLTexture__RGBA32I                        = QOpenGLTexture__TextureFormat(0x8D82)
	QOpenGLTexture__R16F                           = QOpenGLTexture__TextureFormat(0x822D)
	QOpenGLTexture__RG16F                          = QOpenGLTexture__TextureFormat(0x822F)
	QOpenGLTexture__RGB16F                         = QOpenGLTexture__TextureFormat(0x881B)
	QOpenGLTexture__RGBA16F                        = QOpenGLTexture__TextureFormat(0x881A)
	QOpenGLTexture__R32F                           = QOpenGLTexture__TextureFormat(0x822E)
	QOpenGLTexture__RG32F                          = QOpenGLTexture__TextureFormat(0x8230)
	QOpenGLTexture__RGB32F                         = QOpenGLTexture__TextureFormat(0x8815)
	QOpenGLTexture__RGBA32F                        = QOpenGLTexture__TextureFormat(0x8814)
	QOpenGLTexture__RGB9E5                         = QOpenGLTexture__TextureFormat(0x8C3D)
	QOpenGLTexture__RG11B10F                       = QOpenGLTexture__TextureFormat(0x8C3A)
	QOpenGLTexture__RG3B2                          = QOpenGLTexture__TextureFormat(0x2A10)
	QOpenGLTexture__R5G6B5                         = QOpenGLTexture__TextureFormat(0x8D62)
	QOpenGLTexture__RGB5A1                         = QOpenGLTexture__TextureFormat(0x8057)
	QOpenGLTexture__RGBA4                          = QOpenGLTexture__TextureFormat(0x8056)
	QOpenGLTexture__RGB10A2                        = QOpenGLTexture__TextureFormat(0x906F)
	QOpenGLTexture__D16                            = QOpenGLTexture__TextureFormat(0x81A5)
	QOpenGLTexture__D24                            = QOpenGLTexture__TextureFormat(0x81A6)
	QOpenGLTexture__D24S8                          = QOpenGLTexture__TextureFormat(0x88F0)
	QOpenGLTexture__D32                            = QOpenGLTexture__TextureFormat(0x81A7)
	QOpenGLTexture__D32F                           = QOpenGLTexture__TextureFormat(0x8CAC)
	QOpenGLTexture__D32FS8X24                      = QOpenGLTexture__TextureFormat(0x8CAD)
	QOpenGLTexture__S8                             = QOpenGLTexture__TextureFormat(0x8D48)
	QOpenGLTexture__RGB_DXT1                       = QOpenGLTexture__TextureFormat(0x83F0)
	QOpenGLTexture__RGBA_DXT1                      = QOpenGLTexture__TextureFormat(0x83F1)
	QOpenGLTexture__RGBA_DXT3                      = QOpenGLTexture__TextureFormat(0x83F2)
	QOpenGLTexture__RGBA_DXT5                      = QOpenGLTexture__TextureFormat(0x83F3)
	QOpenGLTexture__R_ATI1N_UNorm                  = QOpenGLTexture__TextureFormat(0x8DBB)
	QOpenGLTexture__R_ATI1N_SNorm                  = QOpenGLTexture__TextureFormat(0x8DBC)
	QOpenGLTexture__RG_ATI2N_UNorm                 = QOpenGLTexture__TextureFormat(0x8DBD)
	QOpenGLTexture__RG_ATI2N_SNorm                 = QOpenGLTexture__TextureFormat(0x8DBE)
	QOpenGLTexture__RGB_BP_UNSIGNED_FLOAT          = QOpenGLTexture__TextureFormat(0x8E8F)
	QOpenGLTexture__RGB_BP_SIGNED_FLOAT            = QOpenGLTexture__TextureFormat(0x8E8E)
	QOpenGLTexture__RGB_BP_UNorm                   = QOpenGLTexture__TextureFormat(0x8E8C)
	QOpenGLTexture__R11_EAC_UNorm                  = QOpenGLTexture__TextureFormat(0x9270)
	QOpenGLTexture__R11_EAC_SNorm                  = QOpenGLTexture__TextureFormat(0x9271)
	QOpenGLTexture__RG11_EAC_UNorm                 = QOpenGLTexture__TextureFormat(0x9272)
	QOpenGLTexture__RG11_EAC_SNorm                 = QOpenGLTexture__TextureFormat(0x9273)
	QOpenGLTexture__RGB8_ETC2                      = QOpenGLTexture__TextureFormat(0x9274)
	QOpenGLTexture__SRGB8_ETC2                     = QOpenGLTexture__TextureFormat(0x9275)
	QOpenGLTexture__RGB8_PunchThrough_Alpha1_ETC2  = QOpenGLTexture__TextureFormat(0x9276)
	QOpenGLTexture__SRGB8_PunchThrough_Alpha1_ETC2 = QOpenGLTexture__TextureFormat(0x9277)
	QOpenGLTexture__RGBA8_ETC2_EAC                 = QOpenGLTexture__TextureFormat(0x9278)
	QOpenGLTexture__SRGB8_Alpha8_ETC2_EAC          = QOpenGLTexture__TextureFormat(0x9279)
	QOpenGLTexture__SRGB8                          = QOpenGLTexture__TextureFormat(0x8C41)
	QOpenGLTexture__SRGB8_Alpha8                   = QOpenGLTexture__TextureFormat(0x8C43)
	QOpenGLTexture__SRGB_DXT1                      = QOpenGLTexture__TextureFormat(0x8C4C)
	QOpenGLTexture__SRGB_Alpha_DXT1                = QOpenGLTexture__TextureFormat(0x8C4D)
	QOpenGLTexture__SRGB_Alpha_DXT3                = QOpenGLTexture__TextureFormat(0x8C4E)
	QOpenGLTexture__SRGB_Alpha_DXT5                = QOpenGLTexture__TextureFormat(0x8C4F)
	QOpenGLTexture__SRGB_BP_UNorm                  = QOpenGLTexture__TextureFormat(0x8E8D)
	QOpenGLTexture__DepthFormat                    = QOpenGLTexture__TextureFormat(0x1902)
	QOpenGLTexture__AlphaFormat                    = QOpenGLTexture__TextureFormat(0x1906)
	QOpenGLTexture__RGBFormat                      = QOpenGLTexture__TextureFormat(0x1907)
	QOpenGLTexture__RGBAFormat                     = QOpenGLTexture__TextureFormat(0x1908)
	QOpenGLTexture__LuminanceFormat                = QOpenGLTexture__TextureFormat(0x1909)
	QOpenGLTexture__LuminanceAlphaFormat           = QOpenGLTexture__TextureFormat(0x190A)
)

//QOpenGLTexture::TextureUnitReset
type QOpenGLTexture__TextureUnitReset int64

const (
	QOpenGLTexture__ResetTextureUnit     = QOpenGLTexture__TextureUnitReset(0)
	QOpenGLTexture__DontResetTextureUnit = QOpenGLTexture__TextureUnitReset(1)
)

//QOpenGLTexture::WrapMode
type QOpenGLTexture__WrapMode int64

const (
	QOpenGLTexture__Repeat         = QOpenGLTexture__WrapMode(0x2901)
	QOpenGLTexture__MirroredRepeat = QOpenGLTexture__WrapMode(0x8370)
	QOpenGLTexture__ClampToEdge    = QOpenGLTexture__WrapMode(0x812F)
	QOpenGLTexture__ClampToBorder  = QOpenGLTexture__WrapMode(0x812D)
)

type QOpenGLTexture struct {
	ptr unsafe.Pointer
}

type QOpenGLTexture_ITF interface {
	QOpenGLTexture_PTR() *QOpenGLTexture
}

func (p *QOpenGLTexture) QOpenGLTexture_PTR() *QOpenGLTexture {
	return p
}

func (p *QOpenGLTexture) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLTexture) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLTexture(ptr QOpenGLTexture_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTexture_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTextureFromPointer(ptr unsafe.Pointer) *QOpenGLTexture {
	var n = new(QOpenGLTexture)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLTextureFromPointer(ptr unsafe.Pointer) *QOpenGLTexture {
	var n = NewQOpenGLTextureFromPointer(ptr)
	return n
}

type QOpenGLTimeMonitor struct {
	core.QObject
}

type QOpenGLTimeMonitor_ITF interface {
	core.QObject_ITF
	QOpenGLTimeMonitor_PTR() *QOpenGLTimeMonitor
}

func (p *QOpenGLTimeMonitor) QOpenGLTimeMonitor_PTR() *QOpenGLTimeMonitor {
	return p
}

func (p *QOpenGLTimeMonitor) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLTimeMonitor) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLTimeMonitor(ptr QOpenGLTimeMonitor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTimeMonitor_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTimeMonitorFromPointer(ptr unsafe.Pointer) *QOpenGLTimeMonitor {
	var n = new(QOpenGLTimeMonitor)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLTimeMonitorFromPointer(ptr unsafe.Pointer) *QOpenGLTimeMonitor {
	var n = NewQOpenGLTimeMonitorFromPointer(ptr)
	return n
}

type QOpenGLTimerQuery struct {
	core.QObject
}

type QOpenGLTimerQuery_ITF interface {
	core.QObject_ITF
	QOpenGLTimerQuery_PTR() *QOpenGLTimerQuery
}

func (p *QOpenGLTimerQuery) QOpenGLTimerQuery_PTR() *QOpenGLTimerQuery {
	return p
}

func (p *QOpenGLTimerQuery) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLTimerQuery) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLTimerQuery(ptr QOpenGLTimerQuery_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTimerQuery_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTimerQueryFromPointer(ptr unsafe.Pointer) *QOpenGLTimerQuery {
	var n = new(QOpenGLTimerQuery)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLTimerQueryFromPointer(ptr unsafe.Pointer) *QOpenGLTimerQuery {
	var n = NewQOpenGLTimerQueryFromPointer(ptr)
	return n
}

type QOpenGLVersionProfile struct {
	ptr unsafe.Pointer
}

type QOpenGLVersionProfile_ITF interface {
	QOpenGLVersionProfile_PTR() *QOpenGLVersionProfile
}

func (p *QOpenGLVersionProfile) QOpenGLVersionProfile_PTR() *QOpenGLVersionProfile {
	return p
}

func (p *QOpenGLVersionProfile) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLVersionProfile) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLVersionProfile(ptr QOpenGLVersionProfile_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLVersionProfile_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLVersionProfileFromPointer(ptr unsafe.Pointer) *QOpenGLVersionProfile {
	var n = new(QOpenGLVersionProfile)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLVersionProfileFromPointer(ptr unsafe.Pointer) *QOpenGLVersionProfile {
	var n = NewQOpenGLVersionProfileFromPointer(ptr)
	return n
}

type QOpenGLVertexArrayObject struct {
	core.QObject
}

type QOpenGLVertexArrayObject_ITF interface {
	core.QObject_ITF
	QOpenGLVertexArrayObject_PTR() *QOpenGLVertexArrayObject
}

func (p *QOpenGLVertexArrayObject) QOpenGLVertexArrayObject_PTR() *QOpenGLVertexArrayObject {
	return p
}

func (p *QOpenGLVertexArrayObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLVertexArrayObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLVertexArrayObject(ptr QOpenGLVertexArrayObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLVertexArrayObject_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLVertexArrayObjectFromPointer(ptr unsafe.Pointer) *QOpenGLVertexArrayObject {
	var n = new(QOpenGLVertexArrayObject)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLVertexArrayObjectFromPointer(ptr unsafe.Pointer) *QOpenGLVertexArrayObject {
	var n = NewQOpenGLVertexArrayObjectFromPointer(ptr)
	return n
}

//QOpenGLWindow::UpdateBehavior
type QOpenGLWindow__UpdateBehavior int64

const (
	QOpenGLWindow__NoPartialUpdate    = QOpenGLWindow__UpdateBehavior(0)
	QOpenGLWindow__PartialUpdateBlit  = QOpenGLWindow__UpdateBehavior(1)
	QOpenGLWindow__PartialUpdateBlend = QOpenGLWindow__UpdateBehavior(2)
)

type QOpenGLWindow struct {
	QPaintDeviceWindow
}

type QOpenGLWindow_ITF interface {
	QPaintDeviceWindow_ITF
	QOpenGLWindow_PTR() *QOpenGLWindow
}

func (p *QOpenGLWindow) QOpenGLWindow_PTR() *QOpenGLWindow {
	return p
}

func (p *QOpenGLWindow) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDeviceWindow_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLWindow) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDeviceWindow_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLWindow(ptr QOpenGLWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLWindow_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLWindowFromPointer(ptr unsafe.Pointer) *QOpenGLWindow {
	var n = new(QOpenGLWindow)
	n.SetPointer(ptr)
	return n
}

func newQOpenGLWindowFromPointer(ptr unsafe.Pointer) *QOpenGLWindow {
	var n = NewQOpenGLWindowFromPointer(ptr)
	return n
}

//QPageLayout::Mode
type QPageLayout__Mode int64

const (
	QPageLayout__StandardMode = QPageLayout__Mode(0)
	QPageLayout__FullPageMode = QPageLayout__Mode(1)
)

//QPageLayout::Orientation
type QPageLayout__Orientation int64

const (
	QPageLayout__Portrait  = QPageLayout__Orientation(0)
	QPageLayout__Landscape = QPageLayout__Orientation(1)
)

//QPageLayout::Unit
type QPageLayout__Unit int64

const (
	QPageLayout__Millimeter = QPageLayout__Unit(0)
	QPageLayout__Point      = QPageLayout__Unit(1)
	QPageLayout__Inch       = QPageLayout__Unit(2)
	QPageLayout__Pica       = QPageLayout__Unit(3)
	QPageLayout__Didot      = QPageLayout__Unit(4)
	QPageLayout__Cicero     = QPageLayout__Unit(5)
)

type QPageLayout struct {
	ptr unsafe.Pointer
}

type QPageLayout_ITF interface {
	QPageLayout_PTR() *QPageLayout
}

func (p *QPageLayout) QPageLayout_PTR() *QPageLayout {
	return p
}

func (p *QPageLayout) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPageLayout) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPageLayout(ptr QPageLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPageLayout_PTR().Pointer()
	}
	return nil
}

func NewQPageLayoutFromPointer(ptr unsafe.Pointer) *QPageLayout {
	var n = new(QPageLayout)
	n.SetPointer(ptr)
	return n
}

func newQPageLayoutFromPointer(ptr unsafe.Pointer) *QPageLayout {
	var n = NewQPageLayoutFromPointer(ptr)
	return n
}

func NewQPageLayout() *QPageLayout {
	defer qt.Recovering("QPageLayout::QPageLayout")

	return newQPageLayoutFromPointer(C.QPageLayout_NewQPageLayout())
}

func NewQPageLayout3(other QPageLayout_ITF) *QPageLayout {
	defer qt.Recovering("QPageLayout::QPageLayout")

	return newQPageLayoutFromPointer(C.QPageLayout_NewQPageLayout3(PointerFromQPageLayout(other)))
}

func NewQPageLayout2(pageSize QPageSize_ITF, orientation QPageLayout__Orientation, margins core.QMarginsF_ITF, units QPageLayout__Unit, minMargins core.QMarginsF_ITF) *QPageLayout {
	defer qt.Recovering("QPageLayout::QPageLayout")

	return newQPageLayoutFromPointer(C.QPageLayout_NewQPageLayout2(PointerFromQPageSize(pageSize), C.int(orientation), core.PointerFromQMarginsF(margins), C.int(units), core.PointerFromQMarginsF(minMargins)))
}

func (ptr *QPageLayout) FullRect() *core.QRectF {
	defer qt.Recovering("QPageLayout::fullRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPageLayout_FullRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageLayout) FullRect2(units QPageLayout__Unit) *core.QRectF {
	defer qt.Recovering("QPageLayout::fullRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPageLayout_FullRect2(ptr.Pointer(), C.int(units)))
	}
	return nil
}

func (ptr *QPageLayout) FullRectPixels(resolution int) *core.QRect {
	defer qt.Recovering("QPageLayout::fullRectPixels")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPageLayout_FullRectPixels(ptr.Pointer(), C.int(resolution)))
	}
	return nil
}

func (ptr *QPageLayout) FullRectPoints() *core.QRect {
	defer qt.Recovering("QPageLayout::fullRectPoints")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPageLayout_FullRectPoints(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageLayout) IsEquivalentTo(other QPageLayout_ITF) bool {
	defer qt.Recovering("QPageLayout::isEquivalentTo")

	if ptr.Pointer() != nil {
		return C.QPageLayout_IsEquivalentTo(ptr.Pointer(), PointerFromQPageLayout(other)) != 0
	}
	return false
}

func (ptr *QPageLayout) IsValid() bool {
	defer qt.Recovering("QPageLayout::isValid")

	if ptr.Pointer() != nil {
		return C.QPageLayout_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPageLayout) Margins() *core.QMarginsF {
	defer qt.Recovering("QPageLayout::margins")

	if ptr.Pointer() != nil {
		return core.NewQMarginsFFromPointer(C.QPageLayout_Margins(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageLayout) Margins2(units QPageLayout__Unit) *core.QMarginsF {
	defer qt.Recovering("QPageLayout::margins")

	if ptr.Pointer() != nil {
		return core.NewQMarginsFFromPointer(C.QPageLayout_Margins2(ptr.Pointer(), C.int(units)))
	}
	return nil
}

func (ptr *QPageLayout) MarginsPixels(resolution int) *core.QMargins {
	defer qt.Recovering("QPageLayout::marginsPixels")

	if ptr.Pointer() != nil {
		return core.NewQMarginsFromPointer(C.QPageLayout_MarginsPixels(ptr.Pointer(), C.int(resolution)))
	}
	return nil
}

func (ptr *QPageLayout) MarginsPoints() *core.QMargins {
	defer qt.Recovering("QPageLayout::marginsPoints")

	if ptr.Pointer() != nil {
		return core.NewQMarginsFromPointer(C.QPageLayout_MarginsPoints(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageLayout) MaximumMargins() *core.QMarginsF {
	defer qt.Recovering("QPageLayout::maximumMargins")

	if ptr.Pointer() != nil {
		return core.NewQMarginsFFromPointer(C.QPageLayout_MaximumMargins(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageLayout) MinimumMargins() *core.QMarginsF {
	defer qt.Recovering("QPageLayout::minimumMargins")

	if ptr.Pointer() != nil {
		return core.NewQMarginsFFromPointer(C.QPageLayout_MinimumMargins(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageLayout) Mode() QPageLayout__Mode {
	defer qt.Recovering("QPageLayout::mode")

	if ptr.Pointer() != nil {
		return QPageLayout__Mode(C.QPageLayout_Mode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageLayout) Orientation() QPageLayout__Orientation {
	defer qt.Recovering("QPageLayout::orientation")

	if ptr.Pointer() != nil {
		return QPageLayout__Orientation(C.QPageLayout_Orientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageLayout) PageSize() *QPageSize {
	defer qt.Recovering("QPageLayout::pageSize")

	if ptr.Pointer() != nil {
		return NewQPageSizeFromPointer(C.QPageLayout_PageSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageLayout) PaintRect() *core.QRectF {
	defer qt.Recovering("QPageLayout::paintRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPageLayout_PaintRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageLayout) PaintRect2(units QPageLayout__Unit) *core.QRectF {
	defer qt.Recovering("QPageLayout::paintRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPageLayout_PaintRect2(ptr.Pointer(), C.int(units)))
	}
	return nil
}

func (ptr *QPageLayout) PaintRectPixels(resolution int) *core.QRect {
	defer qt.Recovering("QPageLayout::paintRectPixels")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPageLayout_PaintRectPixels(ptr.Pointer(), C.int(resolution)))
	}
	return nil
}

func (ptr *QPageLayout) PaintRectPoints() *core.QRect {
	defer qt.Recovering("QPageLayout::paintRectPoints")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPageLayout_PaintRectPoints(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageLayout) SetBottomMargin(bottomMargin float64) bool {
	defer qt.Recovering("QPageLayout::setBottomMargin")

	if ptr.Pointer() != nil {
		return C.QPageLayout_SetBottomMargin(ptr.Pointer(), C.double(bottomMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetLeftMargin(leftMargin float64) bool {
	defer qt.Recovering("QPageLayout::setLeftMargin")

	if ptr.Pointer() != nil {
		return C.QPageLayout_SetLeftMargin(ptr.Pointer(), C.double(leftMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetMargins(margins core.QMarginsF_ITF) bool {
	defer qt.Recovering("QPageLayout::setMargins")

	if ptr.Pointer() != nil {
		return C.QPageLayout_SetMargins(ptr.Pointer(), core.PointerFromQMarginsF(margins)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetMinimumMargins(minMargins core.QMarginsF_ITF) {
	defer qt.Recovering("QPageLayout::setMinimumMargins")

	if ptr.Pointer() != nil {
		C.QPageLayout_SetMinimumMargins(ptr.Pointer(), core.PointerFromQMarginsF(minMargins))
	}
}

func (ptr *QPageLayout) SetMode(mode QPageLayout__Mode) {
	defer qt.Recovering("QPageLayout::setMode")

	if ptr.Pointer() != nil {
		C.QPageLayout_SetMode(ptr.Pointer(), C.int(mode))
	}
}

func (ptr *QPageLayout) SetOrientation(orientation QPageLayout__Orientation) {
	defer qt.Recovering("QPageLayout::setOrientation")

	if ptr.Pointer() != nil {
		C.QPageLayout_SetOrientation(ptr.Pointer(), C.int(orientation))
	}
}

func (ptr *QPageLayout) SetPageSize(pageSize QPageSize_ITF, minMargins core.QMarginsF_ITF) {
	defer qt.Recovering("QPageLayout::setPageSize")

	if ptr.Pointer() != nil {
		C.QPageLayout_SetPageSize(ptr.Pointer(), PointerFromQPageSize(pageSize), core.PointerFromQMarginsF(minMargins))
	}
}

func (ptr *QPageLayout) SetRightMargin(rightMargin float64) bool {
	defer qt.Recovering("QPageLayout::setRightMargin")

	if ptr.Pointer() != nil {
		return C.QPageLayout_SetRightMargin(ptr.Pointer(), C.double(rightMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetTopMargin(topMargin float64) bool {
	defer qt.Recovering("QPageLayout::setTopMargin")

	if ptr.Pointer() != nil {
		return C.QPageLayout_SetTopMargin(ptr.Pointer(), C.double(topMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetUnits(units QPageLayout__Unit) {
	defer qt.Recovering("QPageLayout::setUnits")

	if ptr.Pointer() != nil {
		C.QPageLayout_SetUnits(ptr.Pointer(), C.int(units))
	}
}

func (ptr *QPageLayout) Swap(other QPageLayout_ITF) {
	defer qt.Recovering("QPageLayout::swap")

	if ptr.Pointer() != nil {
		C.QPageLayout_Swap(ptr.Pointer(), PointerFromQPageLayout(other))
	}
}

func (ptr *QPageLayout) Units() QPageLayout__Unit {
	defer qt.Recovering("QPageLayout::units")

	if ptr.Pointer() != nil {
		return QPageLayout__Unit(C.QPageLayout_Units(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageLayout) DestroyQPageLayout() {
	defer qt.Recovering("QPageLayout::~QPageLayout")

	if ptr.Pointer() != nil {
		C.QPageLayout_DestroyQPageLayout(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QPageSize::PageSizeId
type QPageSize__PageSizeId int64

const (
	QPageSize__A4                 = QPageSize__PageSizeId(0)
	QPageSize__B5                 = QPageSize__PageSizeId(1)
	QPageSize__Letter             = QPageSize__PageSizeId(2)
	QPageSize__Legal              = QPageSize__PageSizeId(3)
	QPageSize__Executive          = QPageSize__PageSizeId(4)
	QPageSize__A0                 = QPageSize__PageSizeId(5)
	QPageSize__A1                 = QPageSize__PageSizeId(6)
	QPageSize__A2                 = QPageSize__PageSizeId(7)
	QPageSize__A3                 = QPageSize__PageSizeId(8)
	QPageSize__A5                 = QPageSize__PageSizeId(9)
	QPageSize__A6                 = QPageSize__PageSizeId(10)
	QPageSize__A7                 = QPageSize__PageSizeId(11)
	QPageSize__A8                 = QPageSize__PageSizeId(12)
	QPageSize__A9                 = QPageSize__PageSizeId(13)
	QPageSize__B0                 = QPageSize__PageSizeId(14)
	QPageSize__B1                 = QPageSize__PageSizeId(15)
	QPageSize__B10                = QPageSize__PageSizeId(16)
	QPageSize__B2                 = QPageSize__PageSizeId(17)
	QPageSize__B3                 = QPageSize__PageSizeId(18)
	QPageSize__B4                 = QPageSize__PageSizeId(19)
	QPageSize__B6                 = QPageSize__PageSizeId(20)
	QPageSize__B7                 = QPageSize__PageSizeId(21)
	QPageSize__B8                 = QPageSize__PageSizeId(22)
	QPageSize__B9                 = QPageSize__PageSizeId(23)
	QPageSize__C5E                = QPageSize__PageSizeId(24)
	QPageSize__Comm10E            = QPageSize__PageSizeId(25)
	QPageSize__DLE                = QPageSize__PageSizeId(26)
	QPageSize__Folio              = QPageSize__PageSizeId(27)
	QPageSize__Ledger             = QPageSize__PageSizeId(28)
	QPageSize__Tabloid            = QPageSize__PageSizeId(29)
	QPageSize__Custom             = QPageSize__PageSizeId(30)
	QPageSize__A10                = QPageSize__PageSizeId(31)
	QPageSize__A3Extra            = QPageSize__PageSizeId(32)
	QPageSize__A4Extra            = QPageSize__PageSizeId(33)
	QPageSize__A4Plus             = QPageSize__PageSizeId(34)
	QPageSize__A4Small            = QPageSize__PageSizeId(35)
	QPageSize__A5Extra            = QPageSize__PageSizeId(36)
	QPageSize__B5Extra            = QPageSize__PageSizeId(37)
	QPageSize__JisB0              = QPageSize__PageSizeId(38)
	QPageSize__JisB1              = QPageSize__PageSizeId(39)
	QPageSize__JisB2              = QPageSize__PageSizeId(40)
	QPageSize__JisB3              = QPageSize__PageSizeId(41)
	QPageSize__JisB4              = QPageSize__PageSizeId(42)
	QPageSize__JisB5              = QPageSize__PageSizeId(43)
	QPageSize__JisB6              = QPageSize__PageSizeId(44)
	QPageSize__JisB7              = QPageSize__PageSizeId(45)
	QPageSize__JisB8              = QPageSize__PageSizeId(46)
	QPageSize__JisB9              = QPageSize__PageSizeId(47)
	QPageSize__JisB10             = QPageSize__PageSizeId(48)
	QPageSize__AnsiC              = QPageSize__PageSizeId(49)
	QPageSize__AnsiD              = QPageSize__PageSizeId(50)
	QPageSize__AnsiE              = QPageSize__PageSizeId(51)
	QPageSize__LegalExtra         = QPageSize__PageSizeId(52)
	QPageSize__LetterExtra        = QPageSize__PageSizeId(53)
	QPageSize__LetterPlus         = QPageSize__PageSizeId(54)
	QPageSize__LetterSmall        = QPageSize__PageSizeId(55)
	QPageSize__TabloidExtra       = QPageSize__PageSizeId(56)
	QPageSize__ArchA              = QPageSize__PageSizeId(57)
	QPageSize__ArchB              = QPageSize__PageSizeId(58)
	QPageSize__ArchC              = QPageSize__PageSizeId(59)
	QPageSize__ArchD              = QPageSize__PageSizeId(60)
	QPageSize__ArchE              = QPageSize__PageSizeId(61)
	QPageSize__Imperial7x9        = QPageSize__PageSizeId(62)
	QPageSize__Imperial8x10       = QPageSize__PageSizeId(63)
	QPageSize__Imperial9x11       = QPageSize__PageSizeId(64)
	QPageSize__Imperial9x12       = QPageSize__PageSizeId(65)
	QPageSize__Imperial10x11      = QPageSize__PageSizeId(66)
	QPageSize__Imperial10x13      = QPageSize__PageSizeId(67)
	QPageSize__Imperial10x14      = QPageSize__PageSizeId(68)
	QPageSize__Imperial12x11      = QPageSize__PageSizeId(69)
	QPageSize__Imperial15x11      = QPageSize__PageSizeId(70)
	QPageSize__ExecutiveStandard  = QPageSize__PageSizeId(71)
	QPageSize__Note               = QPageSize__PageSizeId(72)
	QPageSize__Quarto             = QPageSize__PageSizeId(73)
	QPageSize__Statement          = QPageSize__PageSizeId(74)
	QPageSize__SuperA             = QPageSize__PageSizeId(75)
	QPageSize__SuperB             = QPageSize__PageSizeId(76)
	QPageSize__Postcard           = QPageSize__PageSizeId(77)
	QPageSize__DoublePostcard     = QPageSize__PageSizeId(78)
	QPageSize__Prc16K             = QPageSize__PageSizeId(79)
	QPageSize__Prc32K             = QPageSize__PageSizeId(80)
	QPageSize__Prc32KBig          = QPageSize__PageSizeId(81)
	QPageSize__FanFoldUS          = QPageSize__PageSizeId(82)
	QPageSize__FanFoldGerman      = QPageSize__PageSizeId(83)
	QPageSize__FanFoldGermanLegal = QPageSize__PageSizeId(84)
	QPageSize__EnvelopeB4         = QPageSize__PageSizeId(85)
	QPageSize__EnvelopeB5         = QPageSize__PageSizeId(86)
	QPageSize__EnvelopeB6         = QPageSize__PageSizeId(87)
	QPageSize__EnvelopeC0         = QPageSize__PageSizeId(88)
	QPageSize__EnvelopeC1         = QPageSize__PageSizeId(89)
	QPageSize__EnvelopeC2         = QPageSize__PageSizeId(90)
	QPageSize__EnvelopeC3         = QPageSize__PageSizeId(91)
	QPageSize__EnvelopeC4         = QPageSize__PageSizeId(92)
	QPageSize__EnvelopeC6         = QPageSize__PageSizeId(93)
	QPageSize__EnvelopeC65        = QPageSize__PageSizeId(94)
	QPageSize__EnvelopeC7         = QPageSize__PageSizeId(95)
	QPageSize__Envelope9          = QPageSize__PageSizeId(96)
	QPageSize__Envelope11         = QPageSize__PageSizeId(97)
	QPageSize__Envelope12         = QPageSize__PageSizeId(98)
	QPageSize__Envelope14         = QPageSize__PageSizeId(99)
	QPageSize__EnvelopeMonarch    = QPageSize__PageSizeId(100)
	QPageSize__EnvelopePersonal   = QPageSize__PageSizeId(101)
	QPageSize__EnvelopeChou3      = QPageSize__PageSizeId(102)
	QPageSize__EnvelopeChou4      = QPageSize__PageSizeId(103)
	QPageSize__EnvelopeInvite     = QPageSize__PageSizeId(104)
	QPageSize__EnvelopeItalian    = QPageSize__PageSizeId(105)
	QPageSize__EnvelopeKaku2      = QPageSize__PageSizeId(106)
	QPageSize__EnvelopeKaku3      = QPageSize__PageSizeId(107)
	QPageSize__EnvelopePrc1       = QPageSize__PageSizeId(108)
	QPageSize__EnvelopePrc2       = QPageSize__PageSizeId(109)
	QPageSize__EnvelopePrc3       = QPageSize__PageSizeId(110)
	QPageSize__EnvelopePrc4       = QPageSize__PageSizeId(111)
	QPageSize__EnvelopePrc5       = QPageSize__PageSizeId(112)
	QPageSize__EnvelopePrc6       = QPageSize__PageSizeId(113)
	QPageSize__EnvelopePrc7       = QPageSize__PageSizeId(114)
	QPageSize__EnvelopePrc8       = QPageSize__PageSizeId(115)
	QPageSize__EnvelopePrc9       = QPageSize__PageSizeId(116)
	QPageSize__EnvelopePrc10      = QPageSize__PageSizeId(117)
	QPageSize__EnvelopeYou4       = QPageSize__PageSizeId(118)
	QPageSize__LastPageSize       = QPageSize__PageSizeId(QPageSize__EnvelopeYou4)
	QPageSize__NPageSize          = QPageSize__PageSizeId(QPageSize__LastPageSize)
	QPageSize__NPaperSize         = QPageSize__PageSizeId(QPageSize__LastPageSize)
	QPageSize__AnsiA              = QPageSize__PageSizeId(QPageSize__Letter)
	QPageSize__AnsiB              = QPageSize__PageSizeId(QPageSize__Ledger)
	QPageSize__EnvelopeC5         = QPageSize__PageSizeId(QPageSize__C5E)
	QPageSize__EnvelopeDL         = QPageSize__PageSizeId(QPageSize__DLE)
	QPageSize__Envelope10         = QPageSize__PageSizeId(QPageSize__Comm10E)
)

//QPageSize::SizeMatchPolicy
type QPageSize__SizeMatchPolicy int64

const (
	QPageSize__FuzzyMatch            = QPageSize__SizeMatchPolicy(0)
	QPageSize__FuzzyOrientationMatch = QPageSize__SizeMatchPolicy(1)
	QPageSize__ExactMatch            = QPageSize__SizeMatchPolicy(2)
)

//QPageSize::Unit
type QPageSize__Unit int64

const (
	QPageSize__Millimeter = QPageSize__Unit(0)
	QPageSize__Point      = QPageSize__Unit(1)
	QPageSize__Inch       = QPageSize__Unit(2)
	QPageSize__Pica       = QPageSize__Unit(3)
	QPageSize__Didot      = QPageSize__Unit(4)
	QPageSize__Cicero     = QPageSize__Unit(5)
)

type QPageSize struct {
	ptr unsafe.Pointer
}

type QPageSize_ITF interface {
	QPageSize_PTR() *QPageSize
}

func (p *QPageSize) QPageSize_PTR() *QPageSize {
	return p
}

func (p *QPageSize) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPageSize) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPageSize(ptr QPageSize_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPageSize_PTR().Pointer()
	}
	return nil
}

func NewQPageSizeFromPointer(ptr unsafe.Pointer) *QPageSize {
	var n = new(QPageSize)
	n.SetPointer(ptr)
	return n
}

func newQPageSizeFromPointer(ptr unsafe.Pointer) *QPageSize {
	var n = NewQPageSizeFromPointer(ptr)
	return n
}

func NewQPageSize() *QPageSize {
	defer qt.Recovering("QPageSize::QPageSize")

	return newQPageSizeFromPointer(C.QPageSize_NewQPageSize())
}

func NewQPageSize2(pageSize QPageSize__PageSizeId) *QPageSize {
	defer qt.Recovering("QPageSize::QPageSize")

	return newQPageSizeFromPointer(C.QPageSize_NewQPageSize2(C.int(pageSize)))
}

func NewQPageSize5(other QPageSize_ITF) *QPageSize {
	defer qt.Recovering("QPageSize::QPageSize")

	return newQPageSizeFromPointer(C.QPageSize_NewQPageSize5(PointerFromQPageSize(other)))
}

func NewQPageSize3(pointSize core.QSize_ITF, name string, matchPolicy QPageSize__SizeMatchPolicy) *QPageSize {
	defer qt.Recovering("QPageSize::QPageSize")

	return newQPageSizeFromPointer(C.QPageSize_NewQPageSize3(core.PointerFromQSize(pointSize), C.CString(name), C.int(matchPolicy)))
}

func NewQPageSize4(size core.QSizeF_ITF, units QPageSize__Unit, name string, matchPolicy QPageSize__SizeMatchPolicy) *QPageSize {
	defer qt.Recovering("QPageSize::QPageSize")

	return newQPageSizeFromPointer(C.QPageSize_NewQPageSize4(core.PointerFromQSizeF(size), C.int(units), C.CString(name), C.int(matchPolicy)))
}

func QPageSize_DefinitionSize2(pageSizeId QPageSize__PageSizeId) *core.QSizeF {
	defer qt.Recovering("QPageSize::definitionSize")

	return core.NewQSizeFFromPointer(C.QPageSize_QPageSize_DefinitionSize2(C.int(pageSizeId)))
}

func (ptr *QPageSize) DefinitionSize2(pageSizeId QPageSize__PageSizeId) *core.QSizeF {
	defer qt.Recovering("QPageSize::definitionSize")

	return core.NewQSizeFFromPointer(C.QPageSize_QPageSize_DefinitionSize2(C.int(pageSizeId)))
}

func (ptr *QPageSize) DefinitionSize() *core.QSizeF {
	defer qt.Recovering("QPageSize::definitionSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QPageSize_DefinitionSize(ptr.Pointer()))
	}
	return nil
}

func QPageSize_DefinitionUnits2(pageSizeId QPageSize__PageSizeId) QPageSize__Unit {
	defer qt.Recovering("QPageSize::definitionUnits")

	return QPageSize__Unit(C.QPageSize_QPageSize_DefinitionUnits2(C.int(pageSizeId)))
}

func (ptr *QPageSize) DefinitionUnits2(pageSizeId QPageSize__PageSizeId) QPageSize__Unit {
	defer qt.Recovering("QPageSize::definitionUnits")

	return QPageSize__Unit(C.QPageSize_QPageSize_DefinitionUnits2(C.int(pageSizeId)))
}

func (ptr *QPageSize) DefinitionUnits() QPageSize__Unit {
	defer qt.Recovering("QPageSize::definitionUnits")

	if ptr.Pointer() != nil {
		return QPageSize__Unit(C.QPageSize_DefinitionUnits(ptr.Pointer()))
	}
	return 0
}

func QPageSize_Id2(pointSize core.QSize_ITF, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	defer qt.Recovering("QPageSize::id")

	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id2(core.PointerFromQSize(pointSize), C.int(matchPolicy)))
}

func (ptr *QPageSize) Id2(pointSize core.QSize_ITF, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	defer qt.Recovering("QPageSize::id")

	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id2(core.PointerFromQSize(pointSize), C.int(matchPolicy)))
}

func QPageSize_Id3(size core.QSizeF_ITF, units QPageSize__Unit, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	defer qt.Recovering("QPageSize::id")

	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id3(core.PointerFromQSizeF(size), C.int(units), C.int(matchPolicy)))
}

func (ptr *QPageSize) Id3(size core.QSizeF_ITF, units QPageSize__Unit, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	defer qt.Recovering("QPageSize::id")

	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id3(core.PointerFromQSizeF(size), C.int(units), C.int(matchPolicy)))
}

func QPageSize_Id4(windowsId int) QPageSize__PageSizeId {
	defer qt.Recovering("QPageSize::id")

	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id4(C.int(windowsId)))
}

func (ptr *QPageSize) Id4(windowsId int) QPageSize__PageSizeId {
	defer qt.Recovering("QPageSize::id")

	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id4(C.int(windowsId)))
}

func (ptr *QPageSize) Id() QPageSize__PageSizeId {
	defer qt.Recovering("QPageSize::id")

	if ptr.Pointer() != nil {
		return QPageSize__PageSizeId(C.QPageSize_Id(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageSize) IsEquivalentTo(other QPageSize_ITF) bool {
	defer qt.Recovering("QPageSize::isEquivalentTo")

	if ptr.Pointer() != nil {
		return C.QPageSize_IsEquivalentTo(ptr.Pointer(), PointerFromQPageSize(other)) != 0
	}
	return false
}

func (ptr *QPageSize) IsValid() bool {
	defer qt.Recovering("QPageSize::isValid")

	if ptr.Pointer() != nil {
		return C.QPageSize_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func QPageSize_Key2(pageSizeId QPageSize__PageSizeId) string {
	defer qt.Recovering("QPageSize::key")

	return C.GoString(C.QPageSize_QPageSize_Key2(C.int(pageSizeId)))
}

func (ptr *QPageSize) Key2(pageSizeId QPageSize__PageSizeId) string {
	defer qt.Recovering("QPageSize::key")

	return C.GoString(C.QPageSize_QPageSize_Key2(C.int(pageSizeId)))
}

func (ptr *QPageSize) Key() string {
	defer qt.Recovering("QPageSize::key")

	if ptr.Pointer() != nil {
		return C.GoString(C.QPageSize_Key(ptr.Pointer()))
	}
	return ""
}

func QPageSize_Name2(pageSizeId QPageSize__PageSizeId) string {
	defer qt.Recovering("QPageSize::name")

	return C.GoString(C.QPageSize_QPageSize_Name2(C.int(pageSizeId)))
}

func (ptr *QPageSize) Name2(pageSizeId QPageSize__PageSizeId) string {
	defer qt.Recovering("QPageSize::name")

	return C.GoString(C.QPageSize_QPageSize_Name2(C.int(pageSizeId)))
}

func (ptr *QPageSize) Name() string {
	defer qt.Recovering("QPageSize::name")

	if ptr.Pointer() != nil {
		return C.GoString(C.QPageSize_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPageSize) Rect(units QPageSize__Unit) *core.QRectF {
	defer qt.Recovering("QPageSize::rect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPageSize_Rect(ptr.Pointer(), C.int(units)))
	}
	return nil
}

func (ptr *QPageSize) RectPixels(resolution int) *core.QRect {
	defer qt.Recovering("QPageSize::rectPixels")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPageSize_RectPixels(ptr.Pointer(), C.int(resolution)))
	}
	return nil
}

func (ptr *QPageSize) RectPoints() *core.QRect {
	defer qt.Recovering("QPageSize::rectPoints")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPageSize_RectPoints(ptr.Pointer()))
	}
	return nil
}

func QPageSize_Size2(pageSizeId QPageSize__PageSizeId, units QPageSize__Unit) *core.QSizeF {
	defer qt.Recovering("QPageSize::size")

	return core.NewQSizeFFromPointer(C.QPageSize_QPageSize_Size2(C.int(pageSizeId), C.int(units)))
}

func (ptr *QPageSize) Size2(pageSizeId QPageSize__PageSizeId, units QPageSize__Unit) *core.QSizeF {
	defer qt.Recovering("QPageSize::size")

	return core.NewQSizeFFromPointer(C.QPageSize_QPageSize_Size2(C.int(pageSizeId), C.int(units)))
}

func (ptr *QPageSize) Size(units QPageSize__Unit) *core.QSizeF {
	defer qt.Recovering("QPageSize::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QPageSize_Size(ptr.Pointer(), C.int(units)))
	}
	return nil
}

func QPageSize_SizePixels2(pageSizeId QPageSize__PageSizeId, resolution int) *core.QSize {
	defer qt.Recovering("QPageSize::sizePixels")

	return core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePixels2(C.int(pageSizeId), C.int(resolution)))
}

func (ptr *QPageSize) SizePixels2(pageSizeId QPageSize__PageSizeId, resolution int) *core.QSize {
	defer qt.Recovering("QPageSize::sizePixels")

	return core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePixels2(C.int(pageSizeId), C.int(resolution)))
}

func (ptr *QPageSize) SizePixels(resolution int) *core.QSize {
	defer qt.Recovering("QPageSize::sizePixels")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QPageSize_SizePixels(ptr.Pointer(), C.int(resolution)))
	}
	return nil
}

func QPageSize_SizePoints2(pageSizeId QPageSize__PageSizeId) *core.QSize {
	defer qt.Recovering("QPageSize::sizePoints")

	return core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePoints2(C.int(pageSizeId)))
}

func (ptr *QPageSize) SizePoints2(pageSizeId QPageSize__PageSizeId) *core.QSize {
	defer qt.Recovering("QPageSize::sizePoints")

	return core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePoints2(C.int(pageSizeId)))
}

func (ptr *QPageSize) SizePoints() *core.QSize {
	defer qt.Recovering("QPageSize::sizePoints")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QPageSize_SizePoints(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPageSize) Swap(other QPageSize_ITF) {
	defer qt.Recovering("QPageSize::swap")

	if ptr.Pointer() != nil {
		C.QPageSize_Swap(ptr.Pointer(), PointerFromQPageSize(other))
	}
}

func QPageSize_WindowsId2(pageSizeId QPageSize__PageSizeId) int {
	defer qt.Recovering("QPageSize::windowsId")

	return int(C.QPageSize_QPageSize_WindowsId2(C.int(pageSizeId)))
}

func (ptr *QPageSize) WindowsId2(pageSizeId QPageSize__PageSizeId) int {
	defer qt.Recovering("QPageSize::windowsId")

	return int(C.QPageSize_QPageSize_WindowsId2(C.int(pageSizeId)))
}

func (ptr *QPageSize) WindowsId() int {
	defer qt.Recovering("QPageSize::windowsId")

	if ptr.Pointer() != nil {
		return int(C.QPageSize_WindowsId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageSize) DestroyQPageSize() {
	defer qt.Recovering("QPageSize::~QPageSize")

	if ptr.Pointer() != nil {
		C.QPageSize_DestroyQPageSize(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QPagedPaintDevice::PageSize
type QPagedPaintDevice__PageSize int64

const (
	QPagedPaintDevice__A4                 = QPagedPaintDevice__PageSize(0)
	QPagedPaintDevice__B5                 = QPagedPaintDevice__PageSize(1)
	QPagedPaintDevice__Letter             = QPagedPaintDevice__PageSize(2)
	QPagedPaintDevice__Legal              = QPagedPaintDevice__PageSize(3)
	QPagedPaintDevice__Executive          = QPagedPaintDevice__PageSize(4)
	QPagedPaintDevice__A0                 = QPagedPaintDevice__PageSize(5)
	QPagedPaintDevice__A1                 = QPagedPaintDevice__PageSize(6)
	QPagedPaintDevice__A2                 = QPagedPaintDevice__PageSize(7)
	QPagedPaintDevice__A3                 = QPagedPaintDevice__PageSize(8)
	QPagedPaintDevice__A5                 = QPagedPaintDevice__PageSize(9)
	QPagedPaintDevice__A6                 = QPagedPaintDevice__PageSize(10)
	QPagedPaintDevice__A7                 = QPagedPaintDevice__PageSize(11)
	QPagedPaintDevice__A8                 = QPagedPaintDevice__PageSize(12)
	QPagedPaintDevice__A9                 = QPagedPaintDevice__PageSize(13)
	QPagedPaintDevice__B0                 = QPagedPaintDevice__PageSize(14)
	QPagedPaintDevice__B1                 = QPagedPaintDevice__PageSize(15)
	QPagedPaintDevice__B10                = QPagedPaintDevice__PageSize(16)
	QPagedPaintDevice__B2                 = QPagedPaintDevice__PageSize(17)
	QPagedPaintDevice__B3                 = QPagedPaintDevice__PageSize(18)
	QPagedPaintDevice__B4                 = QPagedPaintDevice__PageSize(19)
	QPagedPaintDevice__B6                 = QPagedPaintDevice__PageSize(20)
	QPagedPaintDevice__B7                 = QPagedPaintDevice__PageSize(21)
	QPagedPaintDevice__B8                 = QPagedPaintDevice__PageSize(22)
	QPagedPaintDevice__B9                 = QPagedPaintDevice__PageSize(23)
	QPagedPaintDevice__C5E                = QPagedPaintDevice__PageSize(24)
	QPagedPaintDevice__Comm10E            = QPagedPaintDevice__PageSize(25)
	QPagedPaintDevice__DLE                = QPagedPaintDevice__PageSize(26)
	QPagedPaintDevice__Folio              = QPagedPaintDevice__PageSize(27)
	QPagedPaintDevice__Ledger             = QPagedPaintDevice__PageSize(28)
	QPagedPaintDevice__Tabloid            = QPagedPaintDevice__PageSize(29)
	QPagedPaintDevice__Custom             = QPagedPaintDevice__PageSize(30)
	QPagedPaintDevice__A10                = QPagedPaintDevice__PageSize(31)
	QPagedPaintDevice__A3Extra            = QPagedPaintDevice__PageSize(32)
	QPagedPaintDevice__A4Extra            = QPagedPaintDevice__PageSize(33)
	QPagedPaintDevice__A4Plus             = QPagedPaintDevice__PageSize(34)
	QPagedPaintDevice__A4Small            = QPagedPaintDevice__PageSize(35)
	QPagedPaintDevice__A5Extra            = QPagedPaintDevice__PageSize(36)
	QPagedPaintDevice__B5Extra            = QPagedPaintDevice__PageSize(37)
	QPagedPaintDevice__JisB0              = QPagedPaintDevice__PageSize(38)
	QPagedPaintDevice__JisB1              = QPagedPaintDevice__PageSize(39)
	QPagedPaintDevice__JisB2              = QPagedPaintDevice__PageSize(40)
	QPagedPaintDevice__JisB3              = QPagedPaintDevice__PageSize(41)
	QPagedPaintDevice__JisB4              = QPagedPaintDevice__PageSize(42)
	QPagedPaintDevice__JisB5              = QPagedPaintDevice__PageSize(43)
	QPagedPaintDevice__JisB6              = QPagedPaintDevice__PageSize(44)
	QPagedPaintDevice__JisB7              = QPagedPaintDevice__PageSize(45)
	QPagedPaintDevice__JisB8              = QPagedPaintDevice__PageSize(46)
	QPagedPaintDevice__JisB9              = QPagedPaintDevice__PageSize(47)
	QPagedPaintDevice__JisB10             = QPagedPaintDevice__PageSize(48)
	QPagedPaintDevice__AnsiC              = QPagedPaintDevice__PageSize(49)
	QPagedPaintDevice__AnsiD              = QPagedPaintDevice__PageSize(50)
	QPagedPaintDevice__AnsiE              = QPagedPaintDevice__PageSize(51)
	QPagedPaintDevice__LegalExtra         = QPagedPaintDevice__PageSize(52)
	QPagedPaintDevice__LetterExtra        = QPagedPaintDevice__PageSize(53)
	QPagedPaintDevice__LetterPlus         = QPagedPaintDevice__PageSize(54)
	QPagedPaintDevice__LetterSmall        = QPagedPaintDevice__PageSize(55)
	QPagedPaintDevice__TabloidExtra       = QPagedPaintDevice__PageSize(56)
	QPagedPaintDevice__ArchA              = QPagedPaintDevice__PageSize(57)
	QPagedPaintDevice__ArchB              = QPagedPaintDevice__PageSize(58)
	QPagedPaintDevice__ArchC              = QPagedPaintDevice__PageSize(59)
	QPagedPaintDevice__ArchD              = QPagedPaintDevice__PageSize(60)
	QPagedPaintDevice__ArchE              = QPagedPaintDevice__PageSize(61)
	QPagedPaintDevice__Imperial7x9        = QPagedPaintDevice__PageSize(62)
	QPagedPaintDevice__Imperial8x10       = QPagedPaintDevice__PageSize(63)
	QPagedPaintDevice__Imperial9x11       = QPagedPaintDevice__PageSize(64)
	QPagedPaintDevice__Imperial9x12       = QPagedPaintDevice__PageSize(65)
	QPagedPaintDevice__Imperial10x11      = QPagedPaintDevice__PageSize(66)
	QPagedPaintDevice__Imperial10x13      = QPagedPaintDevice__PageSize(67)
	QPagedPaintDevice__Imperial10x14      = QPagedPaintDevice__PageSize(68)
	QPagedPaintDevice__Imperial12x11      = QPagedPaintDevice__PageSize(69)
	QPagedPaintDevice__Imperial15x11      = QPagedPaintDevice__PageSize(70)
	QPagedPaintDevice__ExecutiveStandard  = QPagedPaintDevice__PageSize(71)
	QPagedPaintDevice__Note               = QPagedPaintDevice__PageSize(72)
	QPagedPaintDevice__Quarto             = QPagedPaintDevice__PageSize(73)
	QPagedPaintDevice__Statement          = QPagedPaintDevice__PageSize(74)
	QPagedPaintDevice__SuperA             = QPagedPaintDevice__PageSize(75)
	QPagedPaintDevice__SuperB             = QPagedPaintDevice__PageSize(76)
	QPagedPaintDevice__Postcard           = QPagedPaintDevice__PageSize(77)
	QPagedPaintDevice__DoublePostcard     = QPagedPaintDevice__PageSize(78)
	QPagedPaintDevice__Prc16K             = QPagedPaintDevice__PageSize(79)
	QPagedPaintDevice__Prc32K             = QPagedPaintDevice__PageSize(80)
	QPagedPaintDevice__Prc32KBig          = QPagedPaintDevice__PageSize(81)
	QPagedPaintDevice__FanFoldUS          = QPagedPaintDevice__PageSize(82)
	QPagedPaintDevice__FanFoldGerman      = QPagedPaintDevice__PageSize(83)
	QPagedPaintDevice__FanFoldGermanLegal = QPagedPaintDevice__PageSize(84)
	QPagedPaintDevice__EnvelopeB4         = QPagedPaintDevice__PageSize(85)
	QPagedPaintDevice__EnvelopeB5         = QPagedPaintDevice__PageSize(86)
	QPagedPaintDevice__EnvelopeB6         = QPagedPaintDevice__PageSize(87)
	QPagedPaintDevice__EnvelopeC0         = QPagedPaintDevice__PageSize(88)
	QPagedPaintDevice__EnvelopeC1         = QPagedPaintDevice__PageSize(89)
	QPagedPaintDevice__EnvelopeC2         = QPagedPaintDevice__PageSize(90)
	QPagedPaintDevice__EnvelopeC3         = QPagedPaintDevice__PageSize(91)
	QPagedPaintDevice__EnvelopeC4         = QPagedPaintDevice__PageSize(92)
	QPagedPaintDevice__EnvelopeC6         = QPagedPaintDevice__PageSize(93)
	QPagedPaintDevice__EnvelopeC65        = QPagedPaintDevice__PageSize(94)
	QPagedPaintDevice__EnvelopeC7         = QPagedPaintDevice__PageSize(95)
	QPagedPaintDevice__Envelope9          = QPagedPaintDevice__PageSize(96)
	QPagedPaintDevice__Envelope11         = QPagedPaintDevice__PageSize(97)
	QPagedPaintDevice__Envelope12         = QPagedPaintDevice__PageSize(98)
	QPagedPaintDevice__Envelope14         = QPagedPaintDevice__PageSize(99)
	QPagedPaintDevice__EnvelopeMonarch    = QPagedPaintDevice__PageSize(100)
	QPagedPaintDevice__EnvelopePersonal   = QPagedPaintDevice__PageSize(101)
	QPagedPaintDevice__EnvelopeChou3      = QPagedPaintDevice__PageSize(102)
	QPagedPaintDevice__EnvelopeChou4      = QPagedPaintDevice__PageSize(103)
	QPagedPaintDevice__EnvelopeInvite     = QPagedPaintDevice__PageSize(104)
	QPagedPaintDevice__EnvelopeItalian    = QPagedPaintDevice__PageSize(105)
	QPagedPaintDevice__EnvelopeKaku2      = QPagedPaintDevice__PageSize(106)
	QPagedPaintDevice__EnvelopeKaku3      = QPagedPaintDevice__PageSize(107)
	QPagedPaintDevice__EnvelopePrc1       = QPagedPaintDevice__PageSize(108)
	QPagedPaintDevice__EnvelopePrc2       = QPagedPaintDevice__PageSize(109)
	QPagedPaintDevice__EnvelopePrc3       = QPagedPaintDevice__PageSize(110)
	QPagedPaintDevice__EnvelopePrc4       = QPagedPaintDevice__PageSize(111)
	QPagedPaintDevice__EnvelopePrc5       = QPagedPaintDevice__PageSize(112)
	QPagedPaintDevice__EnvelopePrc6       = QPagedPaintDevice__PageSize(113)
	QPagedPaintDevice__EnvelopePrc7       = QPagedPaintDevice__PageSize(114)
	QPagedPaintDevice__EnvelopePrc8       = QPagedPaintDevice__PageSize(115)
	QPagedPaintDevice__EnvelopePrc9       = QPagedPaintDevice__PageSize(116)
	QPagedPaintDevice__EnvelopePrc10      = QPagedPaintDevice__PageSize(117)
	QPagedPaintDevice__EnvelopeYou4       = QPagedPaintDevice__PageSize(118)
	QPagedPaintDevice__LastPageSize       = QPagedPaintDevice__PageSize(QPagedPaintDevice__EnvelopeYou4)
	QPagedPaintDevice__NPageSize          = QPagedPaintDevice__PageSize(QPagedPaintDevice__LastPageSize)
	QPagedPaintDevice__NPaperSize         = QPagedPaintDevice__PageSize(QPagedPaintDevice__LastPageSize)
	QPagedPaintDevice__AnsiA              = QPagedPaintDevice__PageSize(QPagedPaintDevice__Letter)
	QPagedPaintDevice__AnsiB              = QPagedPaintDevice__PageSize(QPagedPaintDevice__Ledger)
	QPagedPaintDevice__EnvelopeC5         = QPagedPaintDevice__PageSize(QPagedPaintDevice__C5E)
	QPagedPaintDevice__EnvelopeDL         = QPagedPaintDevice__PageSize(QPagedPaintDevice__DLE)
	QPagedPaintDevice__Envelope10         = QPagedPaintDevice__PageSize(QPagedPaintDevice__Comm10E)
)

type QPagedPaintDevice struct {
	QPaintDevice
}

type QPagedPaintDevice_ITF interface {
	QPaintDevice_ITF
	QPagedPaintDevice_PTR() *QPagedPaintDevice
}

func (p *QPagedPaintDevice) QPagedPaintDevice_PTR() *QPagedPaintDevice {
	return p
}

func (p *QPagedPaintDevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QPagedPaintDevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPagedPaintDevice(ptr QPagedPaintDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPagedPaintDevice_PTR().Pointer()
	}
	return nil
}

func NewQPagedPaintDeviceFromPointer(ptr unsafe.Pointer) *QPagedPaintDevice {
	var n = new(QPagedPaintDevice)
	n.SetPointer(ptr)
	return n
}

func newQPagedPaintDeviceFromPointer(ptr unsafe.Pointer) *QPagedPaintDevice {
	var n = NewQPagedPaintDeviceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QPagedPaintDevice_") {
		n.SetObjectNameAbs("QPagedPaintDevice_" + qt.Identifier())
	}
	return n
}

func NewQPagedPaintDevice() *QPagedPaintDevice {
	defer qt.Recovering("QPagedPaintDevice::QPagedPaintDevice")

	return newQPagedPaintDeviceFromPointer(C.QPagedPaintDevice_NewQPagedPaintDevice())
}

//export callbackQPagedPaintDevice_NewPage
func callbackQPagedPaintDevice_NewPage(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QPagedPaintDevice::newPage")

	if signal := qt.GetSignal(C.GoString(ptrName), "newPage"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QPagedPaintDevice) ConnectNewPage(f func() bool) {
	defer qt.Recovering("connect QPagedPaintDevice::newPage")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "newPage", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectNewPage() {
	defer qt.Recovering("disconnect QPagedPaintDevice::newPage")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "newPage")
	}
}

func (ptr *QPagedPaintDevice) NewPage() bool {
	defer qt.Recovering("QPagedPaintDevice::newPage")

	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_NewPage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) PageLayout() *QPageLayout {
	defer qt.Recovering("QPagedPaintDevice::pageLayout")

	if ptr.Pointer() != nil {
		return NewQPageLayoutFromPointer(C.QPagedPaintDevice_PageLayout(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPagedPaintDevice) PageSize() QPagedPaintDevice__PageSize {
	defer qt.Recovering("QPagedPaintDevice::pageSize")

	if ptr.Pointer() != nil {
		return QPagedPaintDevice__PageSize(C.QPagedPaintDevice_PageSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPagedPaintDevice) PageSizeMM() *core.QSizeF {
	defer qt.Recovering("QPagedPaintDevice::pageSizeMM")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QPagedPaintDevice_PageSizeMM(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPagedPaintDevice) SetPageLayout(newPageLayout QPageLayout_ITF) bool {
	defer qt.Recovering("QPagedPaintDevice::setPageLayout")

	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageLayout(ptr.Pointer(), PointerFromQPageLayout(newPageLayout)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageMargins(margins core.QMarginsF_ITF) bool {
	defer qt.Recovering("QPagedPaintDevice::setPageMargins")

	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageMargins(ptr.Pointer(), core.PointerFromQMarginsF(margins)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageMargins2(margins core.QMarginsF_ITF, units QPageLayout__Unit) bool {
	defer qt.Recovering("QPagedPaintDevice::setPageMargins")

	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageMargins2(ptr.Pointer(), core.PointerFromQMarginsF(margins), C.int(units)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageOrientation(orientation QPageLayout__Orientation) bool {
	defer qt.Recovering("QPagedPaintDevice::setPageOrientation")

	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageOrientation(ptr.Pointer(), C.int(orientation)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageSize(pageSize QPageSize_ITF) bool {
	defer qt.Recovering("QPagedPaintDevice::setPageSize")

	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageSize(ptr.Pointer(), PointerFromQPageSize(pageSize)) != 0
	}
	return false
}

//export callbackQPagedPaintDevice_SetPageSize2
func callbackQPagedPaintDevice_SetPageSize2(ptr unsafe.Pointer, ptrName *C.char, size C.int) {
	defer qt.Recovering("callback QPagedPaintDevice::setPageSize")

	if signal := qt.GetSignal(C.GoString(ptrName), "setPageSize2"); signal != nil {
		signal.(func(QPagedPaintDevice__PageSize))(QPagedPaintDevice__PageSize(size))
	} else {
		NewQPagedPaintDeviceFromPointer(ptr).SetPageSize2Default(QPagedPaintDevice__PageSize(size))
	}
}

func (ptr *QPagedPaintDevice) ConnectSetPageSize2(f func(size QPagedPaintDevice__PageSize)) {
	defer qt.Recovering("connect QPagedPaintDevice::setPageSize")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "setPageSize2", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectSetPageSize2() {
	defer qt.Recovering("disconnect QPagedPaintDevice::setPageSize")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "setPageSize2")
	}
}

func (ptr *QPagedPaintDevice) SetPageSize2(size QPagedPaintDevice__PageSize) {
	defer qt.Recovering("QPagedPaintDevice::setPageSize")

	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSize2(ptr.Pointer(), C.int(size))
	}
}

func (ptr *QPagedPaintDevice) SetPageSize2Default(size QPagedPaintDevice__PageSize) {
	defer qt.Recovering("QPagedPaintDevice::setPageSize")

	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSize2Default(ptr.Pointer(), C.int(size))
	}
}

//export callbackQPagedPaintDevice_SetPageSizeMM
func callbackQPagedPaintDevice_SetPageSizeMM(ptr unsafe.Pointer, ptrName *C.char, size unsafe.Pointer) {
	defer qt.Recovering("callback QPagedPaintDevice::setPageSizeMM")

	if signal := qt.GetSignal(C.GoString(ptrName), "setPageSizeMM"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(size))
	} else {
		NewQPagedPaintDeviceFromPointer(ptr).SetPageSizeMMDefault(core.NewQSizeFFromPointer(size))
	}
}

func (ptr *QPagedPaintDevice) ConnectSetPageSizeMM(f func(size *core.QSizeF)) {
	defer qt.Recovering("connect QPagedPaintDevice::setPageSizeMM")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "setPageSizeMM", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectSetPageSizeMM() {
	defer qt.Recovering("disconnect QPagedPaintDevice::setPageSizeMM")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "setPageSizeMM")
	}
}

func (ptr *QPagedPaintDevice) SetPageSizeMM(size core.QSizeF_ITF) {
	defer qt.Recovering("QPagedPaintDevice::setPageSizeMM")

	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSizeMM(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QPagedPaintDevice) SetPageSizeMMDefault(size core.QSizeF_ITF) {
	defer qt.Recovering("QPagedPaintDevice::setPageSizeMM")

	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSizeMMDefault(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QPagedPaintDevice) DestroyQPagedPaintDevice() {
	defer qt.Recovering("QPagedPaintDevice::~QPagedPaintDevice")

	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_DestroyQPagedPaintDevice(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPagedPaintDevice) ObjectNameAbs() string {
	defer qt.Recovering("QPagedPaintDevice::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QPagedPaintDevice_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPagedPaintDevice) SetObjectNameAbs(name string) {
	defer qt.Recovering("QPagedPaintDevice::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

//export callbackQPagedPaintDevice_Metric
func callbackQPagedPaintDevice_Metric(ptr unsafe.Pointer, ptrName *C.char, metric C.int) C.int {
	defer qt.Recovering("callback QPagedPaintDevice::metric")

	if signal := qt.GetSignal(C.GoString(ptrName), "metric"); signal != nil {
		return C.int(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric)))
	}

	return C.int(NewQPagedPaintDeviceFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric)))
}

func (ptr *QPagedPaintDevice) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	defer qt.Recovering("connect QPagedPaintDevice::metric")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "metric", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectMetric() {
	defer qt.Recovering("disconnect QPagedPaintDevice::metric")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "metric")
	}
}

func (ptr *QPagedPaintDevice) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPagedPaintDevice::metric")

	if ptr.Pointer() != nil {
		return int(C.QPagedPaintDevice_Metric(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QPagedPaintDevice) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPagedPaintDevice::metric")

	if ptr.Pointer() != nil {
		return int(C.QPagedPaintDevice_MetricDefault(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

//export callbackQPagedPaintDevice_PaintEngine
func callbackQPagedPaintDevice_PaintEngine(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPagedPaintDevice::paintEngine")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QPagedPaintDevice) ConnectPaintEngine(f func() *QPaintEngine) {
	defer qt.Recovering("connect QPagedPaintDevice::paintEngine")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "paintEngine", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectPaintEngine() {
	defer qt.Recovering("disconnect QPagedPaintDevice::paintEngine")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "paintEngine")
	}
}

func (ptr *QPagedPaintDevice) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QPagedPaintDevice::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPagedPaintDevice_PaintEngine(ptr.Pointer()))
	}
	return nil
}

//QPaintDevice::PaintDeviceMetric
type QPaintDevice__PaintDeviceMetric int64

const (
	QPaintDevice__PdmWidth            = QPaintDevice__PaintDeviceMetric(1)
	QPaintDevice__PdmHeight           = QPaintDevice__PaintDeviceMetric(2)
	QPaintDevice__PdmWidthMM          = QPaintDevice__PaintDeviceMetric(3)
	QPaintDevice__PdmHeightMM         = QPaintDevice__PaintDeviceMetric(4)
	QPaintDevice__PdmNumColors        = QPaintDevice__PaintDeviceMetric(5)
	QPaintDevice__PdmDepth            = QPaintDevice__PaintDeviceMetric(6)
	QPaintDevice__PdmDpiX             = QPaintDevice__PaintDeviceMetric(7)
	QPaintDevice__PdmDpiY             = QPaintDevice__PaintDeviceMetric(8)
	QPaintDevice__PdmPhysicalDpiX     = QPaintDevice__PaintDeviceMetric(9)
	QPaintDevice__PdmPhysicalDpiY     = QPaintDevice__PaintDeviceMetric(10)
	QPaintDevice__PdmDevicePixelRatio = QPaintDevice__PaintDeviceMetric(11)
)

type QPaintDevice struct {
	ptr unsafe.Pointer
}

type QPaintDevice_ITF interface {
	QPaintDevice_PTR() *QPaintDevice
}

func (p *QPaintDevice) QPaintDevice_PTR() *QPaintDevice {
	return p
}

func (p *QPaintDevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPaintDevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPaintDevice(ptr QPaintDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func NewQPaintDeviceFromPointer(ptr unsafe.Pointer) *QPaintDevice {
	var n = new(QPaintDevice)
	n.SetPointer(ptr)
	return n
}

func newQPaintDeviceFromPointer(ptr unsafe.Pointer) *QPaintDevice {
	var n = NewQPaintDeviceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QPaintDevice_") {
		n.SetObjectNameAbs("QPaintDevice_" + qt.Identifier())
	}
	return n
}

func NewQPaintDevice() *QPaintDevice {
	defer qt.Recovering("QPaintDevice::QPaintDevice")

	return newQPaintDeviceFromPointer(C.QPaintDevice_NewQPaintDevice())
}

//export callbackQPaintDevice_Metric
func callbackQPaintDevice_Metric(ptr unsafe.Pointer, ptrName *C.char, metric C.int) C.int {
	defer qt.Recovering("callback QPaintDevice::metric")

	if signal := qt.GetSignal(C.GoString(ptrName), "metric"); signal != nil {
		return C.int(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric)))
	}

	return C.int(NewQPaintDeviceFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric)))
}

func (ptr *QPaintDevice) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	defer qt.Recovering("connect QPaintDevice::metric")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "metric", f)
	}
}

func (ptr *QPaintDevice) DisconnectMetric() {
	defer qt.Recovering("disconnect QPaintDevice::metric")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "metric")
	}
}

func (ptr *QPaintDevice) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPaintDevice::metric")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_Metric(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QPaintDevice) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPaintDevice::metric")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_MetricDefault(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QPaintDevice) DestroyQPaintDevice() {
	defer qt.Recovering("QPaintDevice::~QPaintDevice")

	if ptr.Pointer() != nil {
		C.QPaintDevice_DestroyQPaintDevice(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintDevice) ColorCount() int {
	defer qt.Recovering("QPaintDevice::colorCount")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_ColorCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) Depth() int {
	defer qt.Recovering("QPaintDevice::depth")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_Depth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) DevicePixelRatio() int {
	defer qt.Recovering("QPaintDevice::devicePixelRatio")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) Height() int {
	defer qt.Recovering("QPaintDevice::height")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) HeightMM() int {
	defer qt.Recovering("QPaintDevice::heightMM")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_HeightMM(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) LogicalDpiX() int {
	defer qt.Recovering("QPaintDevice::logicalDpiX")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_LogicalDpiX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) LogicalDpiY() int {
	defer qt.Recovering("QPaintDevice::logicalDpiY")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_LogicalDpiY(ptr.Pointer()))
	}
	return 0
}

//export callbackQPaintDevice_PaintEngine
func callbackQPaintDevice_PaintEngine(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPaintDevice::paintEngine")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QPaintDevice) ConnectPaintEngine(f func() *QPaintEngine) {
	defer qt.Recovering("connect QPaintDevice::paintEngine")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "paintEngine", f)
	}
}

func (ptr *QPaintDevice) DisconnectPaintEngine() {
	defer qt.Recovering("disconnect QPaintDevice::paintEngine")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "paintEngine")
	}
}

func (ptr *QPaintDevice) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QPaintDevice::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPaintDevice_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDevice) PaintingActive() bool {
	defer qt.Recovering("QPaintDevice::paintingActive")

	if ptr.Pointer() != nil {
		return C.QPaintDevice_PaintingActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintDevice) PhysicalDpiX() int {
	defer qt.Recovering("QPaintDevice::physicalDpiX")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_PhysicalDpiX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) PhysicalDpiY() int {
	defer qt.Recovering("QPaintDevice::physicalDpiY")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_PhysicalDpiY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) Width() int {
	defer qt.Recovering("QPaintDevice::width")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) WidthMM() int {
	defer qt.Recovering("QPaintDevice::widthMM")

	if ptr.Pointer() != nil {
		return int(C.QPaintDevice_WidthMM(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) ObjectNameAbs() string {
	defer qt.Recovering("QPaintDevice::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QPaintDevice_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPaintDevice) SetObjectNameAbs(name string) {
	defer qt.Recovering("QPaintDevice::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QPaintDevice_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QPaintDeviceWindow struct {
	QWindow
	QPaintDevice
}

type QPaintDeviceWindow_ITF interface {
	QWindow_ITF
	QPaintDevice_ITF
	QPaintDeviceWindow_PTR() *QPaintDeviceWindow
}

func (p *QPaintDeviceWindow) QPaintDeviceWindow_PTR() *QPaintDeviceWindow {
	return p
}

func (p *QPaintDeviceWindow) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QWindow_PTR().Pointer()
	}
	return nil
}

func (p *QPaintDeviceWindow) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QWindow_PTR().SetPointer(ptr)
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPaintDeviceWindow(ptr QPaintDeviceWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDeviceWindow_PTR().Pointer()
	}
	return nil
}

func NewQPaintDeviceWindowFromPointer(ptr unsafe.Pointer) *QPaintDeviceWindow {
	var n = new(QPaintDeviceWindow)
	n.SetPointer(ptr)
	return n
}

func newQPaintDeviceWindowFromPointer(ptr unsafe.Pointer) *QPaintDeviceWindow {
	var n = NewQPaintDeviceWindowFromPointer(ptr)
	for len(n.ObjectName()) < len("QPaintDeviceWindow_") {
		n.SetObjectName("QPaintDeviceWindow_" + qt.Identifier())
	}
	return n
}

//export callbackQPaintDeviceWindow_PaintEvent
func callbackQPaintDeviceWindow_PaintEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::paintEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEvent"); signal != nil {
		signal.(func(*QPaintEvent))(NewQPaintEventFromPointer(event))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).PaintEventDefault(NewQPaintEventFromPointer(event))
	}
}

func (ptr *QPaintDeviceWindow) ConnectPaintEvent(f func(event *QPaintEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::paintEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "paintEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectPaintEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::paintEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "paintEvent")
	}
}

func (ptr *QPaintDeviceWindow) PaintEvent(event QPaintEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::paintEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_PaintEvent(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

func (ptr *QPaintDeviceWindow) PaintEventDefault(event QPaintEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::paintEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_PaintEventDefault(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

//export callbackQPaintDeviceWindow_Update3
func callbackQPaintDeviceWindow_Update3(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::update")

	if signal := qt.GetSignal(C.GoString(ptrName), "update3"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectUpdate3(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::update")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "update3", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectUpdate3() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::update")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "update3")
	}
}

func (ptr *QPaintDeviceWindow) Update3() {
	defer qt.Recovering("QPaintDeviceWindow::update")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update3(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) Update(rect core.QRect_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::update")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QPaintDeviceWindow) Update2(region QRegion_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::update")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update2(ptr.Pointer(), PointerFromQRegion(region))
	}
}

//export callbackQPaintDeviceWindow_SetHeight
func callbackQPaintDeviceWindow_SetHeight(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::setHeight")

	if signal := qt.GetSignal(C.GoString(ptrName), "setHeight"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetHeight(f func(arg int)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setHeight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setHeight", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetHeight(arg int) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setHeight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setHeight")
	}
}

func (ptr *QPaintDeviceWindow) SetHeight(arg int) {
	defer qt.Recovering("QPaintDeviceWindow::setHeight")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetHeight(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQPaintDeviceWindow_SetMaximumHeight
func callbackQPaintDeviceWindow_SetMaximumHeight(ptr unsafe.Pointer, ptrName *C.char, h C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::setMaximumHeight")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMaximumHeight"); signal != nil {
		signal.(func(int))(int(h))
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetMaximumHeight(f func(h int)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setMaximumHeight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMaximumHeight", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetMaximumHeight(h int) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setMaximumHeight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMaximumHeight")
	}
}

func (ptr *QPaintDeviceWindow) SetMaximumHeight(h int) {
	defer qt.Recovering("QPaintDeviceWindow::setMaximumHeight")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMaximumHeight(ptr.Pointer(), C.int(h))
	}
}

//export callbackQPaintDeviceWindow_SetMaximumWidth
func callbackQPaintDeviceWindow_SetMaximumWidth(ptr unsafe.Pointer, ptrName *C.char, w C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::setMaximumWidth")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMaximumWidth"); signal != nil {
		signal.(func(int))(int(w))
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetMaximumWidth(f func(w int)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setMaximumWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMaximumWidth", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetMaximumWidth(w int) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setMaximumWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMaximumWidth")
	}
}

func (ptr *QPaintDeviceWindow) SetMaximumWidth(w int) {
	defer qt.Recovering("QPaintDeviceWindow::setMaximumWidth")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMaximumWidth(ptr.Pointer(), C.int(w))
	}
}

//export callbackQPaintDeviceWindow_SetMinimumHeight
func callbackQPaintDeviceWindow_SetMinimumHeight(ptr unsafe.Pointer, ptrName *C.char, h C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::setMinimumHeight")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMinimumHeight"); signal != nil {
		signal.(func(int))(int(h))
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetMinimumHeight(f func(h int)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setMinimumHeight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMinimumHeight", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetMinimumHeight(h int) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setMinimumHeight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMinimumHeight")
	}
}

func (ptr *QPaintDeviceWindow) SetMinimumHeight(h int) {
	defer qt.Recovering("QPaintDeviceWindow::setMinimumHeight")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMinimumHeight(ptr.Pointer(), C.int(h))
	}
}

//export callbackQPaintDeviceWindow_SetMinimumWidth
func callbackQPaintDeviceWindow_SetMinimumWidth(ptr unsafe.Pointer, ptrName *C.char, w C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::setMinimumWidth")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMinimumWidth"); signal != nil {
		signal.(func(int))(int(w))
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetMinimumWidth(f func(w int)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setMinimumWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMinimumWidth", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetMinimumWidth(w int) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setMinimumWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMinimumWidth")
	}
}

func (ptr *QPaintDeviceWindow) SetMinimumWidth(w int) {
	defer qt.Recovering("QPaintDeviceWindow::setMinimumWidth")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMinimumWidth(ptr.Pointer(), C.int(w))
	}
}

//export callbackQPaintDeviceWindow_SetTitle
func callbackQPaintDeviceWindow_SetTitle(ptr unsafe.Pointer, ptrName *C.char, vqs *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::setTitle")

	if signal := qt.GetSignal(C.GoString(ptrName), "setTitle"); signal != nil {
		signal.(func(string))(C.GoString(vqs))
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetTitle(f func(vqs string)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setTitle")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setTitle", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetTitle(vqs string) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setTitle")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setTitle")
	}
}

func (ptr *QPaintDeviceWindow) SetTitle(vqs string) {
	defer qt.Recovering("QPaintDeviceWindow::setTitle")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetTitle(ptr.Pointer(), C.CString(vqs))
	}
}

//export callbackQPaintDeviceWindow_SetVisible
func callbackQPaintDeviceWindow_SetVisible(ptr unsafe.Pointer, ptrName *C.char, visible C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::setVisible")

	if signal := qt.GetSignal(C.GoString(ptrName), "setVisible"); signal != nil {
		signal.(func(bool))(int(visible) != 0)
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetVisible(f func(visible bool)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setVisible")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setVisible", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetVisible(visible bool) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setVisible")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setVisible")
	}
}

func (ptr *QPaintDeviceWindow) SetVisible(visible bool) {
	defer qt.Recovering("QPaintDeviceWindow::setVisible")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetVisible(ptr.Pointer(), C.int(qt.GoBoolToInt(visible)))
	}
}

//export callbackQPaintDeviceWindow_SetWidth
func callbackQPaintDeviceWindow_SetWidth(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::setWidth")

	if signal := qt.GetSignal(C.GoString(ptrName), "setWidth"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetWidth(f func(arg int)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setWidth", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetWidth(arg int) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setWidth")
	}
}

func (ptr *QPaintDeviceWindow) SetWidth(arg int) {
	defer qt.Recovering("QPaintDeviceWindow::setWidth")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetWidth(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQPaintDeviceWindow_SetX
func callbackQPaintDeviceWindow_SetX(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::setX")

	if signal := qt.GetSignal(C.GoString(ptrName), "setX"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetX(f func(arg int)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setX")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setX", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetX(arg int) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setX")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setX")
	}
}

func (ptr *QPaintDeviceWindow) SetX(arg int) {
	defer qt.Recovering("QPaintDeviceWindow::setX")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetX(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQPaintDeviceWindow_SetY
func callbackQPaintDeviceWindow_SetY(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::setY")

	if signal := qt.GetSignal(C.GoString(ptrName), "setY"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QPaintDeviceWindow) ConnectSetY(f func(arg int)) {
	defer qt.Recovering("connect QPaintDeviceWindow::setY")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setY", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetY(arg int) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::setY")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setY")
	}
}

func (ptr *QPaintDeviceWindow) SetY(arg int) {
	defer qt.Recovering("QPaintDeviceWindow::setY")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetY(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQPaintDeviceWindow_Alert
func callbackQPaintDeviceWindow_Alert(ptr unsafe.Pointer, ptrName *C.char, msec C.int) {
	defer qt.Recovering("callback QPaintDeviceWindow::alert")

	if signal := qt.GetSignal(C.GoString(ptrName), "alert"); signal != nil {
		signal.(func(int))(int(msec))
	}

}

func (ptr *QPaintDeviceWindow) ConnectAlert(f func(msec int)) {
	defer qt.Recovering("connect QPaintDeviceWindow::alert")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "alert", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectAlert(msec int) {
	defer qt.Recovering("disconnect QPaintDeviceWindow::alert")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "alert")
	}
}

func (ptr *QPaintDeviceWindow) Alert(msec int) {
	defer qt.Recovering("QPaintDeviceWindow::alert")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Alert(ptr.Pointer(), C.int(msec))
	}
}

//export callbackQPaintDeviceWindow_Close
func callbackQPaintDeviceWindow_Close(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QPaintDeviceWindow::close")

	if signal := qt.GetSignal(C.GoString(ptrName), "close"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QPaintDeviceWindow) ConnectClose(f func() bool) {
	defer qt.Recovering("connect QPaintDeviceWindow::close")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "close", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectClose() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::close")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "close")
	}
}

func (ptr *QPaintDeviceWindow) Close() bool {
	defer qt.Recovering("QPaintDeviceWindow::close")

	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_Close(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQPaintDeviceWindow_Event
func callbackQPaintDeviceWindow_Event(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) C.int {
	defer qt.Recovering("callback QPaintDeviceWindow::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(ev))))
	}

	return C.int(qt.GoBoolToInt(NewQPaintDeviceWindowFromPointer(ptr).EventDefault(core.NewQEventFromPointer(ev))))
}

func (ptr *QPaintDeviceWindow) ConnectEvent(f func(ev *core.QEvent) bool) {
	defer qt.Recovering("connect QPaintDeviceWindow::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QPaintDeviceWindow) Event(ev core.QEvent_ITF) bool {
	defer qt.Recovering("QPaintDeviceWindow::event")

	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_Event(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

func (ptr *QPaintDeviceWindow) EventDefault(ev core.QEvent_ITF) bool {
	defer qt.Recovering("QPaintDeviceWindow::event")

	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_EventDefault(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

//export callbackQPaintDeviceWindow_ExposeEvent
func callbackQPaintDeviceWindow_ExposeEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::exposeEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "exposeEvent"); signal != nil {
		signal.(func(*QExposeEvent))(NewQExposeEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ExposeEventDefault(NewQExposeEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectExposeEvent(f func(ev *QExposeEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::exposeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "exposeEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectExposeEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::exposeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "exposeEvent")
	}
}

func (ptr *QPaintDeviceWindow) ExposeEvent(ev QExposeEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::exposeEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ExposeEvent(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) ExposeEventDefault(ev QExposeEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::exposeEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ExposeEventDefault(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_FocusInEvent
func callbackQPaintDeviceWindow_FocusInEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::focusInEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusInEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).FocusInEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectFocusInEvent(f func(ev *QFocusEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::focusInEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "focusInEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectFocusInEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::focusInEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "focusInEvent")
	}
}

func (ptr *QPaintDeviceWindow) FocusInEvent(ev QFocusEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::focusInEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_FocusInEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) FocusInEventDefault(ev QFocusEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::focusInEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_FocusInEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_FocusObject
func callbackQPaintDeviceWindow_FocusObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPaintDeviceWindow::focusObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusObject"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQPaintDeviceWindowFromPointer(ptr).FocusObjectDefault())
}

func (ptr *QPaintDeviceWindow) ConnectFocusObject(f func() *core.QObject) {
	defer qt.Recovering("connect QPaintDeviceWindow::focusObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "focusObject", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectFocusObject() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::focusObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "focusObject")
	}
}

func (ptr *QPaintDeviceWindow) FocusObject() *core.QObject {
	defer qt.Recovering("QPaintDeviceWindow::focusObject")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QPaintDeviceWindow_FocusObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDeviceWindow) FocusObjectDefault() *core.QObject {
	defer qt.Recovering("QPaintDeviceWindow::focusObject")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QPaintDeviceWindow_FocusObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQPaintDeviceWindow_FocusOutEvent
func callbackQPaintDeviceWindow_FocusOutEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::focusOutEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusOutEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).FocusOutEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectFocusOutEvent(f func(ev *QFocusEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "focusOutEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectFocusOutEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "focusOutEvent")
	}
}

func (ptr *QPaintDeviceWindow) FocusOutEvent(ev QFocusEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_FocusOutEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) FocusOutEventDefault(ev QFocusEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_FocusOutEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_Format
func callbackQPaintDeviceWindow_Format(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPaintDeviceWindow::format")

	if signal := qt.GetSignal(C.GoString(ptrName), "format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQPaintDeviceWindowFromPointer(ptr).FormatDefault())
}

func (ptr *QPaintDeviceWindow) ConnectFormat(f func() *QSurfaceFormat) {
	defer qt.Recovering("connect QPaintDeviceWindow::format")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "format", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectFormat() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::format")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "format")
	}
}

func (ptr *QPaintDeviceWindow) Format() *QSurfaceFormat {
	defer qt.Recovering("QPaintDeviceWindow::format")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QPaintDeviceWindow_Format(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDeviceWindow) FormatDefault() *QSurfaceFormat {
	defer qt.Recovering("QPaintDeviceWindow::format")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QPaintDeviceWindow_FormatDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQPaintDeviceWindow_Hide
func callbackQPaintDeviceWindow_Hide(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::hide")

	if signal := qt.GetSignal(C.GoString(ptrName), "hide"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectHide(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::hide")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "hide", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectHide() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::hide")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "hide")
	}
}

func (ptr *QPaintDeviceWindow) Hide() {
	defer qt.Recovering("QPaintDeviceWindow::hide")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Hide(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_HideEvent
func callbackQPaintDeviceWindow_HideEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::hideEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "hideEvent"); signal != nil {
		signal.(func(*QHideEvent))(NewQHideEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).HideEventDefault(NewQHideEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectHideEvent(f func(ev *QHideEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::hideEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "hideEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectHideEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::hideEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "hideEvent")
	}
}

func (ptr *QPaintDeviceWindow) HideEvent(ev QHideEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::hideEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_HideEvent(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) HideEventDefault(ev QHideEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::hideEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_HideEventDefault(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_KeyPressEvent
func callbackQPaintDeviceWindow_KeyPressEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::keyPressEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "keyPressEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).KeyPressEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectKeyPressEvent(f func(ev *QKeyEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "keyPressEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectKeyPressEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "keyPressEvent")
	}
}

func (ptr *QPaintDeviceWindow) KeyPressEvent(ev QKeyEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_KeyPressEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) KeyPressEventDefault(ev QKeyEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_KeyPressEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_KeyReleaseEvent
func callbackQPaintDeviceWindow_KeyReleaseEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::keyReleaseEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "keyReleaseEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).KeyReleaseEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectKeyReleaseEvent(f func(ev *QKeyEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "keyReleaseEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectKeyReleaseEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "keyReleaseEvent")
	}
}

func (ptr *QPaintDeviceWindow) KeyReleaseEvent(ev QKeyEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_KeyReleaseEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) KeyReleaseEventDefault(ev QKeyEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_KeyReleaseEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_Lower
func callbackQPaintDeviceWindow_Lower(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::lower")

	if signal := qt.GetSignal(C.GoString(ptrName), "lower"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectLower(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::lower")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "lower", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectLower() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::lower")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "lower")
	}
}

func (ptr *QPaintDeviceWindow) Lower() {
	defer qt.Recovering("QPaintDeviceWindow::lower")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Lower(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_MouseDoubleClickEvent
func callbackQPaintDeviceWindow_MouseDoubleClickEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::mouseDoubleClickEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseDoubleClickEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MouseDoubleClickEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMouseDoubleClickEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mouseDoubleClickEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMouseDoubleClickEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mouseDoubleClickEvent")
	}
}

func (ptr *QPaintDeviceWindow) MouseDoubleClickEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseDoubleClickEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MouseDoubleClickEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseDoubleClickEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_MouseMoveEvent
func callbackQPaintDeviceWindow_MouseMoveEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::mouseMoveEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseMoveEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MouseMoveEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMouseMoveEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mouseMoveEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMouseMoveEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mouseMoveEvent")
	}
}

func (ptr *QPaintDeviceWindow) MouseMoveEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseMoveEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MouseMoveEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseMoveEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_MousePressEvent
func callbackQPaintDeviceWindow_MousePressEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::mousePressEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mousePressEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MousePressEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMousePressEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mousePressEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMousePressEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mousePressEvent")
	}
}

func (ptr *QPaintDeviceWindow) MousePressEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MousePressEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MousePressEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MousePressEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_MouseReleaseEvent
func callbackQPaintDeviceWindow_MouseReleaseEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::mouseReleaseEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseReleaseEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MouseReleaseEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMouseReleaseEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mouseReleaseEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMouseReleaseEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mouseReleaseEvent")
	}
}

func (ptr *QPaintDeviceWindow) MouseReleaseEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseReleaseEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MouseReleaseEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseReleaseEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_MoveEvent
func callbackQPaintDeviceWindow_MoveEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::moveEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "moveEvent"); signal != nil {
		signal.(func(*QMoveEvent))(NewQMoveEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MoveEventDefault(NewQMoveEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMoveEvent(f func(ev *QMoveEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::moveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "moveEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMoveEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::moveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "moveEvent")
	}
}

func (ptr *QPaintDeviceWindow) MoveEvent(ev QMoveEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::moveEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MoveEvent(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MoveEventDefault(ev QMoveEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::moveEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MoveEventDefault(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_NativeEvent
func callbackQPaintDeviceWindow_NativeEvent(ptr unsafe.Pointer, ptrName *C.char, eventType *C.char, message unsafe.Pointer, result C.long) C.int {
	defer qt.Recovering("callback QPaintDeviceWindow::nativeEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "nativeEvent"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(string, unsafe.Pointer, int) bool)(C.GoString(eventType), message, int(result))))
	}

	return C.int(qt.GoBoolToInt(NewQPaintDeviceWindowFromPointer(ptr).NativeEventDefault(C.GoString(eventType), message, int(result))))
}

func (ptr *QPaintDeviceWindow) ConnectNativeEvent(f func(eventType string, message unsafe.Pointer, result int) bool) {
	defer qt.Recovering("connect QPaintDeviceWindow::nativeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "nativeEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectNativeEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::nativeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "nativeEvent")
	}
}

func (ptr *QPaintDeviceWindow) NativeEvent(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QPaintDeviceWindow::nativeEvent")

	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_NativeEvent(ptr.Pointer(), C.CString(eventType), message, C.long(result)) != 0
	}
	return false
}

func (ptr *QPaintDeviceWindow) NativeEventDefault(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QPaintDeviceWindow::nativeEvent")

	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_NativeEventDefault(ptr.Pointer(), C.CString(eventType), message, C.long(result)) != 0
	}
	return false
}

//export callbackQPaintDeviceWindow_Raise
func callbackQPaintDeviceWindow_Raise(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::raise")

	if signal := qt.GetSignal(C.GoString(ptrName), "raise"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectRaise(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::raise")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "raise", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectRaise() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::raise")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "raise")
	}
}

func (ptr *QPaintDeviceWindow) Raise() {
	defer qt.Recovering("QPaintDeviceWindow::raise")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Raise(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_RequestActivate
func callbackQPaintDeviceWindow_RequestActivate(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::requestActivate")

	if signal := qt.GetSignal(C.GoString(ptrName), "requestActivate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectRequestActivate(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::requestActivate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "requestActivate", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectRequestActivate() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::requestActivate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "requestActivate")
	}
}

func (ptr *QPaintDeviceWindow) RequestActivate() {
	defer qt.Recovering("QPaintDeviceWindow::requestActivate")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_RequestActivate(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_RequestUpdate
func callbackQPaintDeviceWindow_RequestUpdate(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::requestUpdate")

	if signal := qt.GetSignal(C.GoString(ptrName), "requestUpdate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectRequestUpdate(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::requestUpdate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "requestUpdate", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectRequestUpdate() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::requestUpdate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "requestUpdate")
	}
}

func (ptr *QPaintDeviceWindow) RequestUpdate() {
	defer qt.Recovering("QPaintDeviceWindow::requestUpdate")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_RequestUpdate(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ResizeEvent
func callbackQPaintDeviceWindow_ResizeEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::resizeEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "resizeEvent"); signal != nil {
		signal.(func(*QResizeEvent))(NewQResizeEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ResizeEventDefault(NewQResizeEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectResizeEvent(f func(ev *QResizeEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::resizeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "resizeEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectResizeEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::resizeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "resizeEvent")
	}
}

func (ptr *QPaintDeviceWindow) ResizeEvent(ev QResizeEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::resizeEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ResizeEvent(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) ResizeEventDefault(ev QResizeEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::resizeEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ResizeEventDefault(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_Show
func callbackQPaintDeviceWindow_Show(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::show")

	if signal := qt.GetSignal(C.GoString(ptrName), "show"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectShow(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::show")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "show", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShow() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::show")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "show")
	}
}

func (ptr *QPaintDeviceWindow) Show() {
	defer qt.Recovering("QPaintDeviceWindow::show")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Show(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ShowEvent
func callbackQPaintDeviceWindow_ShowEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::showEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "showEvent"); signal != nil {
		signal.(func(*QShowEvent))(NewQShowEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ShowEventDefault(NewQShowEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectShowEvent(f func(ev *QShowEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::showEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::showEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showEvent")
	}
}

func (ptr *QPaintDeviceWindow) ShowEvent(ev QShowEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::showEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowEvent(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) ShowEventDefault(ev QShowEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::showEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowEventDefault(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_ShowFullScreen
func callbackQPaintDeviceWindow_ShowFullScreen(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::showFullScreen")

	if signal := qt.GetSignal(C.GoString(ptrName), "showFullScreen"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectShowFullScreen(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::showFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showFullScreen", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowFullScreen() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::showFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showFullScreen")
	}
}

func (ptr *QPaintDeviceWindow) ShowFullScreen() {
	defer qt.Recovering("QPaintDeviceWindow::showFullScreen")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowFullScreen(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ShowMaximized
func callbackQPaintDeviceWindow_ShowMaximized(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::showMaximized")

	if signal := qt.GetSignal(C.GoString(ptrName), "showMaximized"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectShowMaximized(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::showMaximized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showMaximized", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowMaximized() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::showMaximized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showMaximized")
	}
}

func (ptr *QPaintDeviceWindow) ShowMaximized() {
	defer qt.Recovering("QPaintDeviceWindow::showMaximized")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowMaximized(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ShowMinimized
func callbackQPaintDeviceWindow_ShowMinimized(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::showMinimized")

	if signal := qt.GetSignal(C.GoString(ptrName), "showMinimized"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectShowMinimized(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::showMinimized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showMinimized", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowMinimized() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::showMinimized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showMinimized")
	}
}

func (ptr *QPaintDeviceWindow) ShowMinimized() {
	defer qt.Recovering("QPaintDeviceWindow::showMinimized")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowMinimized(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ShowNormal
func callbackQPaintDeviceWindow_ShowNormal(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::showNormal")

	if signal := qt.GetSignal(C.GoString(ptrName), "showNormal"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectShowNormal(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::showNormal")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showNormal", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowNormal() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::showNormal")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showNormal")
	}
}

func (ptr *QPaintDeviceWindow) ShowNormal() {
	defer qt.Recovering("QPaintDeviceWindow::showNormal")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowNormal(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_Size
func callbackQPaintDeviceWindow_Size(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPaintDeviceWindow::size")

	if signal := qt.GetSignal(C.GoString(ptrName), "size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQPaintDeviceWindowFromPointer(ptr).SizeDefault())
}

func (ptr *QPaintDeviceWindow) ConnectSize(f func() *core.QSize) {
	defer qt.Recovering("connect QPaintDeviceWindow::size")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "size", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSize() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::size")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "size")
	}
}

func (ptr *QPaintDeviceWindow) Size() *core.QSize {
	defer qt.Recovering("QPaintDeviceWindow::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QPaintDeviceWindow_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDeviceWindow) SizeDefault() *core.QSize {
	defer qt.Recovering("QPaintDeviceWindow::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QPaintDeviceWindow_SizeDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQPaintDeviceWindow_SurfaceType
func callbackQPaintDeviceWindow_SurfaceType(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QPaintDeviceWindow::surfaceType")

	if signal := qt.GetSignal(C.GoString(ptrName), "surfaceType"); signal != nil {
		return C.int(signal.(func() QSurface__SurfaceType)())
	}

	return C.int(NewQPaintDeviceWindowFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QPaintDeviceWindow) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	defer qt.Recovering("connect QPaintDeviceWindow::surfaceType")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "surfaceType", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSurfaceType() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::surfaceType")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "surfaceType")
	}
}

func (ptr *QPaintDeviceWindow) SurfaceType() QSurface__SurfaceType {
	defer qt.Recovering("QPaintDeviceWindow::surfaceType")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QPaintDeviceWindow_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDeviceWindow) SurfaceTypeDefault() QSurface__SurfaceType {
	defer qt.Recovering("QPaintDeviceWindow::surfaceType")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QPaintDeviceWindow_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQPaintDeviceWindow_TabletEvent
func callbackQPaintDeviceWindow_TabletEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::tabletEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "tabletEvent"); signal != nil {
		signal.(func(*QTabletEvent))(NewQTabletEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).TabletEventDefault(NewQTabletEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectTabletEvent(f func(ev *QTabletEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::tabletEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "tabletEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectTabletEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::tabletEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "tabletEvent")
	}
}

func (ptr *QPaintDeviceWindow) TabletEvent(ev QTabletEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::tabletEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TabletEvent(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) TabletEventDefault(ev QTabletEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::tabletEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TabletEventDefault(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_TouchEvent
func callbackQPaintDeviceWindow_TouchEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::touchEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "touchEvent"); signal != nil {
		signal.(func(*QTouchEvent))(NewQTouchEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).TouchEventDefault(NewQTouchEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectTouchEvent(f func(ev *QTouchEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::touchEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "touchEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectTouchEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::touchEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "touchEvent")
	}
}

func (ptr *QPaintDeviceWindow) TouchEvent(ev QTouchEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::touchEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TouchEvent(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) TouchEventDefault(ev QTouchEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::touchEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TouchEventDefault(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_WheelEvent
func callbackQPaintDeviceWindow_WheelEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::wheelEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "wheelEvent"); signal != nil {
		signal.(func(*QWheelEvent))(NewQWheelEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).WheelEventDefault(NewQWheelEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectWheelEvent(f func(ev *QWheelEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::wheelEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "wheelEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectWheelEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::wheelEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "wheelEvent")
	}
}

func (ptr *QPaintDeviceWindow) WheelEvent(ev QWheelEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::wheelEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_WheelEvent(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) WheelEventDefault(ev QWheelEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::wheelEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_WheelEventDefault(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_TimerEvent
func callbackQPaintDeviceWindow_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QPaintDeviceWindow) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QPaintDeviceWindow) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::timerEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QPaintDeviceWindow) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::timerEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQPaintDeviceWindow_ChildEvent
func callbackQPaintDeviceWindow_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QPaintDeviceWindow) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QPaintDeviceWindow) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::childEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QPaintDeviceWindow) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::childEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQPaintDeviceWindow_ConnectNotify
func callbackQPaintDeviceWindow_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPaintDeviceWindow) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QPaintDeviceWindow::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QPaintDeviceWindow) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::connectNotify")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPaintDeviceWindow) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::connectNotify")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPaintDeviceWindow_CustomEvent
func callbackQPaintDeviceWindow_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QPaintDeviceWindow) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QPaintDeviceWindow::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QPaintDeviceWindow) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::customEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QPaintDeviceWindow) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::customEvent")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQPaintDeviceWindow_DeleteLater
func callbackQPaintDeviceWindow_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPaintDeviceWindow::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QPaintDeviceWindow::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QPaintDeviceWindow) DeleteLater() {
	defer qt.Recovering("QPaintDeviceWindow::deleteLater")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQPaintDeviceWindow_DisconnectNotify
func callbackQPaintDeviceWindow_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QPaintDeviceWindow::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPaintDeviceWindow) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QPaintDeviceWindow::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QPaintDeviceWindow) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPaintDeviceWindow) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QPaintDeviceWindow::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPaintDeviceWindow_EventFilter
func callbackQPaintDeviceWindow_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QPaintDeviceWindow::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQPaintDeviceWindowFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QPaintDeviceWindow) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QPaintDeviceWindow::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QPaintDeviceWindow) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QPaintDeviceWindow::eventFilter")

	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QPaintDeviceWindow) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QPaintDeviceWindow::eventFilter")

	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQPaintDeviceWindow_MetaObject
func callbackQPaintDeviceWindow_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPaintDeviceWindow::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQPaintDeviceWindowFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QPaintDeviceWindow) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QPaintDeviceWindow::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QPaintDeviceWindow) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QPaintDeviceWindow::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPaintDeviceWindow_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDeviceWindow) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QPaintDeviceWindow::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPaintDeviceWindow_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQPaintDeviceWindow_Metric
func callbackQPaintDeviceWindow_Metric(ptr unsafe.Pointer, ptrName *C.char, metric C.int) C.int {
	defer qt.Recovering("callback QPaintDeviceWindow::metric")

	if signal := qt.GetSignal(C.GoString(ptrName), "metric"); signal != nil {
		return C.int(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric)))
	}

	return C.int(NewQPaintDeviceWindowFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric)))
}

func (ptr *QPaintDeviceWindow) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	defer qt.Recovering("connect QPaintDeviceWindow::metric")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metric", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMetric() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::metric")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metric")
	}
}

func (ptr *QPaintDeviceWindow) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPaintDeviceWindow::metric")

	if ptr.Pointer() != nil {
		return int(C.QPaintDeviceWindow_Metric(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QPaintDeviceWindow) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPaintDeviceWindow::metric")

	if ptr.Pointer() != nil {
		return int(C.QPaintDeviceWindow_MetricDefault(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

//export callbackQPaintDeviceWindow_PaintEngine
func callbackQPaintDeviceWindow_PaintEngine(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPaintDeviceWindow::paintEngine")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QPaintDeviceWindow) ConnectPaintEngine(f func() *QPaintEngine) {
	defer qt.Recovering("connect QPaintDeviceWindow::paintEngine")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "paintEngine", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectPaintEngine() {
	defer qt.Recovering("disconnect QPaintDeviceWindow::paintEngine")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "paintEngine")
	}
}

func (ptr *QPaintDeviceWindow) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QPaintDeviceWindow::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPaintDeviceWindow_PaintEngine(ptr.Pointer()))
	}
	return nil
}

//QPaintEngine::DirtyFlag
type QPaintEngine__DirtyFlag int64

const (
	QPaintEngine__DirtyPen             = QPaintEngine__DirtyFlag(0x0001)
	QPaintEngine__DirtyBrush           = QPaintEngine__DirtyFlag(0x0002)
	QPaintEngine__DirtyBrushOrigin     = QPaintEngine__DirtyFlag(0x0004)
	QPaintEngine__DirtyFont            = QPaintEngine__DirtyFlag(0x0008)
	QPaintEngine__DirtyBackground      = QPaintEngine__DirtyFlag(0x0010)
	QPaintEngine__DirtyBackgroundMode  = QPaintEngine__DirtyFlag(0x0020)
	QPaintEngine__DirtyTransform       = QPaintEngine__DirtyFlag(0x0040)
	QPaintEngine__DirtyClipRegion      = QPaintEngine__DirtyFlag(0x0080)
	QPaintEngine__DirtyClipPath        = QPaintEngine__DirtyFlag(0x0100)
	QPaintEngine__DirtyHints           = QPaintEngine__DirtyFlag(0x0200)
	QPaintEngine__DirtyCompositionMode = QPaintEngine__DirtyFlag(0x0400)
	QPaintEngine__DirtyClipEnabled     = QPaintEngine__DirtyFlag(0x0800)
	QPaintEngine__DirtyOpacity         = QPaintEngine__DirtyFlag(0x1000)
	QPaintEngine__AllDirty             = QPaintEngine__DirtyFlag(0xffff)
)

//QPaintEngine::PaintEngineFeature
type QPaintEngine__PaintEngineFeature int64

const (
	QPaintEngine__PrimitiveTransform          = QPaintEngine__PaintEngineFeature(0x00000001)
	QPaintEngine__PatternTransform            = QPaintEngine__PaintEngineFeature(0x00000002)
	QPaintEngine__PixmapTransform             = QPaintEngine__PaintEngineFeature(0x00000004)
	QPaintEngine__PatternBrush                = QPaintEngine__PaintEngineFeature(0x00000008)
	QPaintEngine__LinearGradientFill          = QPaintEngine__PaintEngineFeature(0x00000010)
	QPaintEngine__RadialGradientFill          = QPaintEngine__PaintEngineFeature(0x00000020)
	QPaintEngine__ConicalGradientFill         = QPaintEngine__PaintEngineFeature(0x00000040)
	QPaintEngine__AlphaBlend                  = QPaintEngine__PaintEngineFeature(0x00000080)
	QPaintEngine__PorterDuff                  = QPaintEngine__PaintEngineFeature(0x00000100)
	QPaintEngine__PainterPaths                = QPaintEngine__PaintEngineFeature(0x00000200)
	QPaintEngine__Antialiasing                = QPaintEngine__PaintEngineFeature(0x00000400)
	QPaintEngine__BrushStroke                 = QPaintEngine__PaintEngineFeature(0x00000800)
	QPaintEngine__ConstantOpacity             = QPaintEngine__PaintEngineFeature(0x00001000)
	QPaintEngine__MaskedBrush                 = QPaintEngine__PaintEngineFeature(0x00002000)
	QPaintEngine__PerspectiveTransform        = QPaintEngine__PaintEngineFeature(0x00004000)
	QPaintEngine__BlendModes                  = QPaintEngine__PaintEngineFeature(0x00008000)
	QPaintEngine__ObjectBoundingModeGradients = QPaintEngine__PaintEngineFeature(0x00010000)
	QPaintEngine__RasterOpModes               = QPaintEngine__PaintEngineFeature(0x00020000)
	QPaintEngine__PaintOutsidePaintEvent      = QPaintEngine__PaintEngineFeature(0x20000000)
	QPaintEngine__AllFeatures                 = QPaintEngine__PaintEngineFeature(0xffffffff)
)

//QPaintEngine::PolygonDrawMode
type QPaintEngine__PolygonDrawMode int64

const (
	QPaintEngine__OddEvenMode  = QPaintEngine__PolygonDrawMode(0)
	QPaintEngine__WindingMode  = QPaintEngine__PolygonDrawMode(1)
	QPaintEngine__ConvexMode   = QPaintEngine__PolygonDrawMode(2)
	QPaintEngine__PolylineMode = QPaintEngine__PolygonDrawMode(3)
)

//QPaintEngine::Type
type QPaintEngine__Type int64

const (
	QPaintEngine__X11           = QPaintEngine__Type(0)
	QPaintEngine__Windows       = QPaintEngine__Type(1)
	QPaintEngine__QuickDraw     = QPaintEngine__Type(2)
	QPaintEngine__CoreGraphics  = QPaintEngine__Type(3)
	QPaintEngine__MacPrinter    = QPaintEngine__Type(4)
	QPaintEngine__QWindowSystem = QPaintEngine__Type(5)
	QPaintEngine__PostScript    = QPaintEngine__Type(6)
	QPaintEngine__OpenGL        = QPaintEngine__Type(7)
	QPaintEngine__Picture       = QPaintEngine__Type(8)
	QPaintEngine__SVG           = QPaintEngine__Type(9)
	QPaintEngine__Raster        = QPaintEngine__Type(10)
	QPaintEngine__Direct3D      = QPaintEngine__Type(11)
	QPaintEngine__Pdf           = QPaintEngine__Type(12)
	QPaintEngine__OpenVG        = QPaintEngine__Type(13)
	QPaintEngine__OpenGL2       = QPaintEngine__Type(14)
	QPaintEngine__PaintBuffer   = QPaintEngine__Type(15)
	QPaintEngine__Blitter       = QPaintEngine__Type(16)
	QPaintEngine__Direct2D      = QPaintEngine__Type(17)
	QPaintEngine__User          = QPaintEngine__Type(50)
	QPaintEngine__MaxUser       = QPaintEngine__Type(100)
)

type QPaintEngine struct {
	ptr unsafe.Pointer
}

type QPaintEngine_ITF interface {
	QPaintEngine_PTR() *QPaintEngine
}

func (p *QPaintEngine) QPaintEngine_PTR() *QPaintEngine {
	return p
}

func (p *QPaintEngine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPaintEngine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPaintEngine(ptr QPaintEngine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEngine_PTR().Pointer()
	}
	return nil
}

func NewQPaintEngineFromPointer(ptr unsafe.Pointer) *QPaintEngine {
	var n = new(QPaintEngine)
	n.SetPointer(ptr)
	return n
}

func newQPaintEngineFromPointer(ptr unsafe.Pointer) *QPaintEngine {
	var n = NewQPaintEngineFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QPaintEngine_") {
		n.SetObjectNameAbs("QPaintEngine_" + qt.Identifier())
	}
	return n
}

//export callbackQPaintEngine_DrawEllipse
func callbackQPaintEngine_DrawEllipse(ptr unsafe.Pointer, ptrName *C.char, rect unsafe.Pointer) {
	defer qt.Recovering("callback QPaintEngine::drawEllipse")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawEllipse"); signal != nil {
		signal.(func(*core.QRectF))(core.NewQRectFFromPointer(rect))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawEllipseDefault(core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QPaintEngine) ConnectDrawEllipse(f func(rect *core.QRectF)) {
	defer qt.Recovering("connect QPaintEngine::drawEllipse")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawEllipse", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawEllipse() {
	defer qt.Recovering("disconnect QPaintEngine::drawEllipse")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawEllipse")
	}
}

func (ptr *QPaintEngine) DrawEllipse(rect core.QRectF_ITF) {
	defer qt.Recovering("QPaintEngine::drawEllipse")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipse(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QPaintEngine) DrawEllipseDefault(rect core.QRectF_ITF) {
	defer qt.Recovering("QPaintEngine::drawEllipse")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipseDefault(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

//export callbackQPaintEngine_DrawImage
func callbackQPaintEngine_DrawImage(ptr unsafe.Pointer, ptrName *C.char, rectangle unsafe.Pointer, image unsafe.Pointer, sr unsafe.Pointer, flags C.int) {
	defer qt.Recovering("callback QPaintEngine::drawImage")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawImage"); signal != nil {
		signal.(func(*core.QRectF, *QImage, *core.QRectF, core.Qt__ImageConversionFlag))(core.NewQRectFFromPointer(rectangle), NewQImageFromPointer(image), core.NewQRectFFromPointer(sr), core.Qt__ImageConversionFlag(flags))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawImageDefault(core.NewQRectFFromPointer(rectangle), NewQImageFromPointer(image), core.NewQRectFFromPointer(sr), core.Qt__ImageConversionFlag(flags))
	}
}

func (ptr *QPaintEngine) ConnectDrawImage(f func(rectangle *core.QRectF, image *QImage, sr *core.QRectF, flags core.Qt__ImageConversionFlag)) {
	defer qt.Recovering("connect QPaintEngine::drawImage")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawImage", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawImage() {
	defer qt.Recovering("disconnect QPaintEngine::drawImage")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawImage")
	}
}

func (ptr *QPaintEngine) DrawImage(rectangle core.QRectF_ITF, image QImage_ITF, sr core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	defer qt.Recovering("QPaintEngine::drawImage")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawImage(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQImage(image), core.PointerFromQRectF(sr), C.int(flags))
	}
}

func (ptr *QPaintEngine) DrawImageDefault(rectangle core.QRectF_ITF, image QImage_ITF, sr core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	defer qt.Recovering("QPaintEngine::drawImage")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawImageDefault(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQImage(image), core.PointerFromQRectF(sr), C.int(flags))
	}
}

//export callbackQPaintEngine_DrawPolygon
func callbackQPaintEngine_DrawPolygon(ptr unsafe.Pointer, ptrName *C.char, points unsafe.Pointer, pointCount C.int, mode C.int) {
	defer qt.Recovering("callback QPaintEngine::drawPolygon")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawPolygon"); signal != nil {
		signal.(func(*core.QPointF, int, QPaintEngine__PolygonDrawMode))(core.NewQPointFFromPointer(points), int(pointCount), QPaintEngine__PolygonDrawMode(mode))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPolygonDefault(core.NewQPointFFromPointer(points), int(pointCount), QPaintEngine__PolygonDrawMode(mode))
	}
}

func (ptr *QPaintEngine) ConnectDrawPolygon(f func(points *core.QPointF, pointCount int, mode QPaintEngine__PolygonDrawMode)) {
	defer qt.Recovering("connect QPaintEngine::drawPolygon")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawPolygon", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPolygon() {
	defer qt.Recovering("disconnect QPaintEngine::drawPolygon")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawPolygon")
	}
}

func (ptr *QPaintEngine) DrawPolygon(points core.QPointF_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	defer qt.Recovering("QPaintEngine::drawPolygon")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygon(ptr.Pointer(), core.PointerFromQPointF(points), C.int(pointCount), C.int(mode))
	}
}

func (ptr *QPaintEngine) DrawPolygonDefault(points core.QPointF_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	defer qt.Recovering("QPaintEngine::drawPolygon")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygonDefault(ptr.Pointer(), core.PointerFromQPointF(points), C.int(pointCount), C.int(mode))
	}
}

//export callbackQPaintEngine_Begin
func callbackQPaintEngine_Begin(ptr unsafe.Pointer, ptrName *C.char, pdev unsafe.Pointer) C.int {
	defer qt.Recovering("callback QPaintEngine::begin")

	if signal := qt.GetSignal(C.GoString(ptrName), "begin"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*QPaintDevice) bool)(NewQPaintDeviceFromPointer(pdev))))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QPaintEngine) ConnectBegin(f func(pdev *QPaintDevice) bool) {
	defer qt.Recovering("connect QPaintEngine::begin")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "begin", f)
	}
}

func (ptr *QPaintEngine) DisconnectBegin(pdev QPaintDevice_ITF) {
	defer qt.Recovering("disconnect QPaintEngine::begin")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "begin")
	}
}

func (ptr *QPaintEngine) Begin(pdev QPaintDevice_ITF) bool {
	defer qt.Recovering("QPaintEngine::begin")

	if ptr.Pointer() != nil {
		return C.QPaintEngine_Begin(ptr.Pointer(), PointerFromQPaintDevice(pdev)) != 0
	}
	return false
}

//export callbackQPaintEngine_DrawEllipse2
func callbackQPaintEngine_DrawEllipse2(ptr unsafe.Pointer, ptrName *C.char, rect unsafe.Pointer) {
	defer qt.Recovering("callback QPaintEngine::drawEllipse")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawEllipse2"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawEllipse2Default(core.NewQRectFromPointer(rect))
	}
}

func (ptr *QPaintEngine) ConnectDrawEllipse2(f func(rect *core.QRect)) {
	defer qt.Recovering("connect QPaintEngine::drawEllipse")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawEllipse2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawEllipse2() {
	defer qt.Recovering("disconnect QPaintEngine::drawEllipse")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawEllipse2")
	}
}

func (ptr *QPaintEngine) DrawEllipse2(rect core.QRect_ITF) {
	defer qt.Recovering("QPaintEngine::drawEllipse")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipse2(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QPaintEngine) DrawEllipse2Default(rect core.QRect_ITF) {
	defer qt.Recovering("QPaintEngine::drawEllipse")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipse2Default(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

//export callbackQPaintEngine_DrawLines2
func callbackQPaintEngine_DrawLines2(ptr unsafe.Pointer, ptrName *C.char, lines unsafe.Pointer, lineCount C.int) {
	defer qt.Recovering("callback QPaintEngine::drawLines")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawLines2"); signal != nil {
		signal.(func(*core.QLine, int))(core.NewQLineFromPointer(lines), int(lineCount))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawLines2Default(core.NewQLineFromPointer(lines), int(lineCount))
	}
}

func (ptr *QPaintEngine) ConnectDrawLines2(f func(lines *core.QLine, lineCount int)) {
	defer qt.Recovering("connect QPaintEngine::drawLines")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawLines2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawLines2() {
	defer qt.Recovering("disconnect QPaintEngine::drawLines")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawLines2")
	}
}

func (ptr *QPaintEngine) DrawLines2(lines core.QLine_ITF, lineCount int) {
	defer qt.Recovering("QPaintEngine::drawLines")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLines2(ptr.Pointer(), core.PointerFromQLine(lines), C.int(lineCount))
	}
}

func (ptr *QPaintEngine) DrawLines2Default(lines core.QLine_ITF, lineCount int) {
	defer qt.Recovering("QPaintEngine::drawLines")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLines2Default(ptr.Pointer(), core.PointerFromQLine(lines), C.int(lineCount))
	}
}

//export callbackQPaintEngine_DrawLines
func callbackQPaintEngine_DrawLines(ptr unsafe.Pointer, ptrName *C.char, lines unsafe.Pointer, lineCount C.int) {
	defer qt.Recovering("callback QPaintEngine::drawLines")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawLines"); signal != nil {
		signal.(func(*core.QLineF, int))(core.NewQLineFFromPointer(lines), int(lineCount))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawLinesDefault(core.NewQLineFFromPointer(lines), int(lineCount))
	}
}

func (ptr *QPaintEngine) ConnectDrawLines(f func(lines *core.QLineF, lineCount int)) {
	defer qt.Recovering("connect QPaintEngine::drawLines")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawLines", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawLines() {
	defer qt.Recovering("disconnect QPaintEngine::drawLines")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawLines")
	}
}

func (ptr *QPaintEngine) DrawLines(lines core.QLineF_ITF, lineCount int) {
	defer qt.Recovering("QPaintEngine::drawLines")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLines(ptr.Pointer(), core.PointerFromQLineF(lines), C.int(lineCount))
	}
}

func (ptr *QPaintEngine) DrawLinesDefault(lines core.QLineF_ITF, lineCount int) {
	defer qt.Recovering("QPaintEngine::drawLines")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLinesDefault(ptr.Pointer(), core.PointerFromQLineF(lines), C.int(lineCount))
	}
}

//export callbackQPaintEngine_DrawPath
func callbackQPaintEngine_DrawPath(ptr unsafe.Pointer, ptrName *C.char, path unsafe.Pointer) {
	defer qt.Recovering("callback QPaintEngine::drawPath")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawPath"); signal != nil {
		signal.(func(*QPainterPath))(NewQPainterPathFromPointer(path))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPathDefault(NewQPainterPathFromPointer(path))
	}
}

func (ptr *QPaintEngine) ConnectDrawPath(f func(path *QPainterPath)) {
	defer qt.Recovering("connect QPaintEngine::drawPath")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawPath", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPath() {
	defer qt.Recovering("disconnect QPaintEngine::drawPath")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawPath")
	}
}

func (ptr *QPaintEngine) DrawPath(path QPainterPath_ITF) {
	defer qt.Recovering("QPaintEngine::drawPath")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPaintEngine) DrawPathDefault(path QPainterPath_ITF) {
	defer qt.Recovering("QPaintEngine::drawPath")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPathDefault(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

//export callbackQPaintEngine_DrawPixmap
func callbackQPaintEngine_DrawPixmap(ptr unsafe.Pointer, ptrName *C.char, r unsafe.Pointer, pm unsafe.Pointer, sr unsafe.Pointer) {
	defer qt.Recovering("callback QPaintEngine::drawPixmap")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawPixmap"); signal != nil {
		signal.(func(*core.QRectF, *QPixmap, *core.QRectF))(core.NewQRectFFromPointer(r), NewQPixmapFromPointer(pm), core.NewQRectFFromPointer(sr))
	}

}

func (ptr *QPaintEngine) ConnectDrawPixmap(f func(r *core.QRectF, pm *QPixmap, sr *core.QRectF)) {
	defer qt.Recovering("connect QPaintEngine::drawPixmap")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawPixmap", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPixmap(r core.QRectF_ITF, pm QPixmap_ITF, sr core.QRectF_ITF) {
	defer qt.Recovering("disconnect QPaintEngine::drawPixmap")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawPixmap")
	}
}

func (ptr *QPaintEngine) DrawPixmap(r core.QRectF_ITF, pm QPixmap_ITF, sr core.QRectF_ITF) {
	defer qt.Recovering("QPaintEngine::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPixmap(ptr.Pointer(), core.PointerFromQRectF(r), PointerFromQPixmap(pm), core.PointerFromQRectF(sr))
	}
}

//export callbackQPaintEngine_DrawPoints2
func callbackQPaintEngine_DrawPoints2(ptr unsafe.Pointer, ptrName *C.char, points unsafe.Pointer, pointCount C.int) {
	defer qt.Recovering("callback QPaintEngine::drawPoints")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawPoints2"); signal != nil {
		signal.(func(*core.QPoint, int))(core.NewQPointFromPointer(points), int(pointCount))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPoints2Default(core.NewQPointFromPointer(points), int(pointCount))
	}
}

func (ptr *QPaintEngine) ConnectDrawPoints2(f func(points *core.QPoint, pointCount int)) {
	defer qt.Recovering("connect QPaintEngine::drawPoints")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawPoints2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPoints2() {
	defer qt.Recovering("disconnect QPaintEngine::drawPoints")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawPoints2")
	}
}

func (ptr *QPaintEngine) DrawPoints2(points core.QPoint_ITF, pointCount int) {
	defer qt.Recovering("QPaintEngine::drawPoints")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPoints2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(pointCount))
	}
}

func (ptr *QPaintEngine) DrawPoints2Default(points core.QPoint_ITF, pointCount int) {
	defer qt.Recovering("QPaintEngine::drawPoints")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPoints2Default(ptr.Pointer(), core.PointerFromQPoint(points), C.int(pointCount))
	}
}

//export callbackQPaintEngine_DrawPoints
func callbackQPaintEngine_DrawPoints(ptr unsafe.Pointer, ptrName *C.char, points unsafe.Pointer, pointCount C.int) {
	defer qt.Recovering("callback QPaintEngine::drawPoints")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawPoints"); signal != nil {
		signal.(func(*core.QPointF, int))(core.NewQPointFFromPointer(points), int(pointCount))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPointsDefault(core.NewQPointFFromPointer(points), int(pointCount))
	}
}

func (ptr *QPaintEngine) ConnectDrawPoints(f func(points *core.QPointF, pointCount int)) {
	defer qt.Recovering("connect QPaintEngine::drawPoints")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawPoints", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPoints() {
	defer qt.Recovering("disconnect QPaintEngine::drawPoints")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawPoints")
	}
}

func (ptr *QPaintEngine) DrawPoints(points core.QPointF_ITF, pointCount int) {
	defer qt.Recovering("QPaintEngine::drawPoints")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPoints(ptr.Pointer(), core.PointerFromQPointF(points), C.int(pointCount))
	}
}

func (ptr *QPaintEngine) DrawPointsDefault(points core.QPointF_ITF, pointCount int) {
	defer qt.Recovering("QPaintEngine::drawPoints")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPointsDefault(ptr.Pointer(), core.PointerFromQPointF(points), C.int(pointCount))
	}
}

//export callbackQPaintEngine_DrawPolygon2
func callbackQPaintEngine_DrawPolygon2(ptr unsafe.Pointer, ptrName *C.char, points unsafe.Pointer, pointCount C.int, mode C.int) {
	defer qt.Recovering("callback QPaintEngine::drawPolygon")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawPolygon2"); signal != nil {
		signal.(func(*core.QPoint, int, QPaintEngine__PolygonDrawMode))(core.NewQPointFromPointer(points), int(pointCount), QPaintEngine__PolygonDrawMode(mode))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPolygon2Default(core.NewQPointFromPointer(points), int(pointCount), QPaintEngine__PolygonDrawMode(mode))
	}
}

func (ptr *QPaintEngine) ConnectDrawPolygon2(f func(points *core.QPoint, pointCount int, mode QPaintEngine__PolygonDrawMode)) {
	defer qt.Recovering("connect QPaintEngine::drawPolygon")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawPolygon2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPolygon2() {
	defer qt.Recovering("disconnect QPaintEngine::drawPolygon")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawPolygon2")
	}
}

func (ptr *QPaintEngine) DrawPolygon2(points core.QPoint_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	defer qt.Recovering("QPaintEngine::drawPolygon")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygon2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(pointCount), C.int(mode))
	}
}

func (ptr *QPaintEngine) DrawPolygon2Default(points core.QPoint_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	defer qt.Recovering("QPaintEngine::drawPolygon")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygon2Default(ptr.Pointer(), core.PointerFromQPoint(points), C.int(pointCount), C.int(mode))
	}
}

//export callbackQPaintEngine_DrawRects2
func callbackQPaintEngine_DrawRects2(ptr unsafe.Pointer, ptrName *C.char, rects unsafe.Pointer, rectCount C.int) {
	defer qt.Recovering("callback QPaintEngine::drawRects")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawRects2"); signal != nil {
		signal.(func(*core.QRect, int))(core.NewQRectFromPointer(rects), int(rectCount))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawRects2Default(core.NewQRectFromPointer(rects), int(rectCount))
	}
}

func (ptr *QPaintEngine) ConnectDrawRects2(f func(rects *core.QRect, rectCount int)) {
	defer qt.Recovering("connect QPaintEngine::drawRects")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawRects2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawRects2() {
	defer qt.Recovering("disconnect QPaintEngine::drawRects")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawRects2")
	}
}

func (ptr *QPaintEngine) DrawRects2(rects core.QRect_ITF, rectCount int) {
	defer qt.Recovering("QPaintEngine::drawRects")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRects2(ptr.Pointer(), core.PointerFromQRect(rects), C.int(rectCount))
	}
}

func (ptr *QPaintEngine) DrawRects2Default(rects core.QRect_ITF, rectCount int) {
	defer qt.Recovering("QPaintEngine::drawRects")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRects2Default(ptr.Pointer(), core.PointerFromQRect(rects), C.int(rectCount))
	}
}

//export callbackQPaintEngine_DrawRects
func callbackQPaintEngine_DrawRects(ptr unsafe.Pointer, ptrName *C.char, rects unsafe.Pointer, rectCount C.int) {
	defer qt.Recovering("callback QPaintEngine::drawRects")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawRects"); signal != nil {
		signal.(func(*core.QRectF, int))(core.NewQRectFFromPointer(rects), int(rectCount))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawRectsDefault(core.NewQRectFFromPointer(rects), int(rectCount))
	}
}

func (ptr *QPaintEngine) ConnectDrawRects(f func(rects *core.QRectF, rectCount int)) {
	defer qt.Recovering("connect QPaintEngine::drawRects")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawRects", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawRects() {
	defer qt.Recovering("disconnect QPaintEngine::drawRects")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawRects")
	}
}

func (ptr *QPaintEngine) DrawRects(rects core.QRectF_ITF, rectCount int) {
	defer qt.Recovering("QPaintEngine::drawRects")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRects(ptr.Pointer(), core.PointerFromQRectF(rects), C.int(rectCount))
	}
}

func (ptr *QPaintEngine) DrawRectsDefault(rects core.QRectF_ITF, rectCount int) {
	defer qt.Recovering("QPaintEngine::drawRects")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRectsDefault(ptr.Pointer(), core.PointerFromQRectF(rects), C.int(rectCount))
	}
}

//export callbackQPaintEngine_DrawTiledPixmap
func callbackQPaintEngine_DrawTiledPixmap(ptr unsafe.Pointer, ptrName *C.char, rect unsafe.Pointer, pixmap unsafe.Pointer, p unsafe.Pointer) {
	defer qt.Recovering("callback QPaintEngine::drawTiledPixmap")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawTiledPixmap"); signal != nil {
		signal.(func(*core.QRectF, *QPixmap, *core.QPointF))(core.NewQRectFFromPointer(rect), NewQPixmapFromPointer(pixmap), core.NewQPointFFromPointer(p))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawTiledPixmapDefault(core.NewQRectFFromPointer(rect), NewQPixmapFromPointer(pixmap), core.NewQPointFFromPointer(p))
	}
}

func (ptr *QPaintEngine) ConnectDrawTiledPixmap(f func(rect *core.QRectF, pixmap *QPixmap, p *core.QPointF)) {
	defer qt.Recovering("connect QPaintEngine::drawTiledPixmap")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawTiledPixmap", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawTiledPixmap() {
	defer qt.Recovering("disconnect QPaintEngine::drawTiledPixmap")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawTiledPixmap")
	}
}

func (ptr *QPaintEngine) DrawTiledPixmap(rect core.QRectF_ITF, pixmap QPixmap_ITF, p core.QPointF_ITF) {
	defer qt.Recovering("QPaintEngine::drawTiledPixmap")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTiledPixmap(ptr.Pointer(), core.PointerFromQRectF(rect), PointerFromQPixmap(pixmap), core.PointerFromQPointF(p))
	}
}

func (ptr *QPaintEngine) DrawTiledPixmapDefault(rect core.QRectF_ITF, pixmap QPixmap_ITF, p core.QPointF_ITF) {
	defer qt.Recovering("QPaintEngine::drawTiledPixmap")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTiledPixmapDefault(ptr.Pointer(), core.PointerFromQRectF(rect), PointerFromQPixmap(pixmap), core.PointerFromQPointF(p))
	}
}

//export callbackQPaintEngine_End
func callbackQPaintEngine_End(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QPaintEngine::end")

	if signal := qt.GetSignal(C.GoString(ptrName), "end"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QPaintEngine) ConnectEnd(f func() bool) {
	defer qt.Recovering("connect QPaintEngine::end")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "end", f)
	}
}

func (ptr *QPaintEngine) DisconnectEnd() {
	defer qt.Recovering("disconnect QPaintEngine::end")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "end")
	}
}

func (ptr *QPaintEngine) End() bool {
	defer qt.Recovering("QPaintEngine::end")

	if ptr.Pointer() != nil {
		return C.QPaintEngine_End(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngine) HasFeature(feature QPaintEngine__PaintEngineFeature) bool {
	defer qt.Recovering("QPaintEngine::hasFeature")

	if ptr.Pointer() != nil {
		return C.QPaintEngine_HasFeature(ptr.Pointer(), C.int(feature)) != 0
	}
	return false
}

func (ptr *QPaintEngine) IsActive() bool {
	defer qt.Recovering("QPaintEngine::isActive")

	if ptr.Pointer() != nil {
		return C.QPaintEngine_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngine) PaintDevice() *QPaintDevice {
	defer qt.Recovering("QPaintEngine::paintDevice")

	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QPaintEngine_PaintDevice(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngine) Painter() *QPainter {
	defer qt.Recovering("QPaintEngine::painter")

	if ptr.Pointer() != nil {
		return NewQPainterFromPointer(C.QPaintEngine_Painter(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngine) SetActive(state bool) {
	defer qt.Recovering("QPaintEngine::setActive")

	if ptr.Pointer() != nil {
		C.QPaintEngine_SetActive(ptr.Pointer(), C.int(qt.GoBoolToInt(state)))
	}
}

//export callbackQPaintEngine_Type
func callbackQPaintEngine_Type(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QPaintEngine::type")

	if signal := qt.GetSignal(C.GoString(ptrName), "type"); signal != nil {
		return C.int(signal.(func() QPaintEngine__Type)())
	}

	return C.int(0)
}

func (ptr *QPaintEngine) ConnectType(f func() QPaintEngine__Type) {
	defer qt.Recovering("connect QPaintEngine::type")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "type", f)
	}
}

func (ptr *QPaintEngine) DisconnectType() {
	defer qt.Recovering("disconnect QPaintEngine::type")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "type")
	}
}

func (ptr *QPaintEngine) Type() QPaintEngine__Type {
	defer qt.Recovering("QPaintEngine::type")

	if ptr.Pointer() != nil {
		return QPaintEngine__Type(C.QPaintEngine_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngine) DestroyQPaintEngine() {
	defer qt.Recovering("QPaintEngine::~QPaintEngine")

	if ptr.Pointer() != nil {
		C.QPaintEngine_DestroyQPaintEngine(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintEngine) ObjectNameAbs() string {
	defer qt.Recovering("QPaintEngine::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QPaintEngine_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPaintEngine) SetObjectNameAbs(name string) {
	defer qt.Recovering("QPaintEngine::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QPaintEngine_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QPaintEngineState struct {
	ptr unsafe.Pointer
}

type QPaintEngineState_ITF interface {
	QPaintEngineState_PTR() *QPaintEngineState
}

func (p *QPaintEngineState) QPaintEngineState_PTR() *QPaintEngineState {
	return p
}

func (p *QPaintEngineState) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPaintEngineState) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPaintEngineState(ptr QPaintEngineState_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEngineState_PTR().Pointer()
	}
	return nil
}

func NewQPaintEngineStateFromPointer(ptr unsafe.Pointer) *QPaintEngineState {
	var n = new(QPaintEngineState)
	n.SetPointer(ptr)
	return n
}

func newQPaintEngineStateFromPointer(ptr unsafe.Pointer) *QPaintEngineState {
	var n = NewQPaintEngineStateFromPointer(ptr)
	return n
}

func (ptr *QPaintEngineState) BackgroundBrush() *QBrush {
	defer qt.Recovering("QPaintEngineState::backgroundBrush")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPaintEngineState_BackgroundBrush(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) BackgroundMode() core.Qt__BGMode {
	defer qt.Recovering("QPaintEngineState::backgroundMode")

	if ptr.Pointer() != nil {
		return core.Qt__BGMode(C.QPaintEngineState_BackgroundMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) Brush() *QBrush {
	defer qt.Recovering("QPaintEngineState::brush")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPaintEngineState_Brush(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) BrushNeedsResolving() bool {
	defer qt.Recovering("QPaintEngineState::brushNeedsResolving")

	if ptr.Pointer() != nil {
		return C.QPaintEngineState_BrushNeedsResolving(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngineState) BrushOrigin() *core.QPointF {
	defer qt.Recovering("QPaintEngineState::brushOrigin")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QPaintEngineState_BrushOrigin(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) ClipOperation() core.Qt__ClipOperation {
	defer qt.Recovering("QPaintEngineState::clipOperation")

	if ptr.Pointer() != nil {
		return core.Qt__ClipOperation(C.QPaintEngineState_ClipOperation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) ClipPath() *QPainterPath {
	defer qt.Recovering("QPaintEngineState::clipPath")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPaintEngineState_ClipPath(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) ClipRegion() *QRegion {
	defer qt.Recovering("QPaintEngineState::clipRegion")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QPaintEngineState_ClipRegion(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) CompositionMode() QPainter__CompositionMode {
	defer qt.Recovering("QPaintEngineState::compositionMode")

	if ptr.Pointer() != nil {
		return QPainter__CompositionMode(C.QPaintEngineState_CompositionMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) Font() *QFont {
	defer qt.Recovering("QPaintEngineState::font")

	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QPaintEngineState_Font(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) IsClipEnabled() bool {
	defer qt.Recovering("QPaintEngineState::isClipEnabled")

	if ptr.Pointer() != nil {
		return C.QPaintEngineState_IsClipEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngineState) Opacity() float64 {
	defer qt.Recovering("QPaintEngineState::opacity")

	if ptr.Pointer() != nil {
		return float64(C.QPaintEngineState_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) Painter() *QPainter {
	defer qt.Recovering("QPaintEngineState::painter")

	if ptr.Pointer() != nil {
		return NewQPainterFromPointer(C.QPaintEngineState_Painter(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) Pen() *QPen {
	defer qt.Recovering("QPaintEngineState::pen")

	if ptr.Pointer() != nil {
		return NewQPenFromPointer(C.QPaintEngineState_Pen(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) PenNeedsResolving() bool {
	defer qt.Recovering("QPaintEngineState::penNeedsResolving")

	if ptr.Pointer() != nil {
		return C.QPaintEngineState_PenNeedsResolving(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngineState) RenderHints() QPainter__RenderHint {
	defer qt.Recovering("QPaintEngineState::renderHints")

	if ptr.Pointer() != nil {
		return QPainter__RenderHint(C.QPaintEngineState_RenderHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) State() QPaintEngine__DirtyFlag {
	defer qt.Recovering("QPaintEngineState::state")

	if ptr.Pointer() != nil {
		return QPaintEngine__DirtyFlag(C.QPaintEngineState_State(ptr.Pointer()))
	}
	return 0
}

type QPaintEvent struct {
	core.QEvent
}

type QPaintEvent_ITF interface {
	core.QEvent_ITF
	QPaintEvent_PTR() *QPaintEvent
}

func (p *QPaintEvent) QPaintEvent_PTR() *QPaintEvent {
	return p
}

func (p *QPaintEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QPaintEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQPaintEvent(ptr QPaintEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEvent_PTR().Pointer()
	}
	return nil
}

func NewQPaintEventFromPointer(ptr unsafe.Pointer) *QPaintEvent {
	var n = new(QPaintEvent)
	n.SetPointer(ptr)
	return n
}

func newQPaintEventFromPointer(ptr unsafe.Pointer) *QPaintEvent {
	var n = NewQPaintEventFromPointer(ptr)
	return n
}

func NewQPaintEvent2(paintRect core.QRect_ITF) *QPaintEvent {
	defer qt.Recovering("QPaintEvent::QPaintEvent")

	return newQPaintEventFromPointer(C.QPaintEvent_NewQPaintEvent2(core.PointerFromQRect(paintRect)))
}

func NewQPaintEvent(paintRegion QRegion_ITF) *QPaintEvent {
	defer qt.Recovering("QPaintEvent::QPaintEvent")

	return newQPaintEventFromPointer(C.QPaintEvent_NewQPaintEvent(PointerFromQRegion(paintRegion)))
}

func (ptr *QPaintEvent) Rect() *core.QRect {
	defer qt.Recovering("QPaintEvent::rect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPaintEvent_Rect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEvent) Region() *QRegion {
	defer qt.Recovering("QPaintEvent::region")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QPaintEvent_Region(ptr.Pointer()))
	}
	return nil
}

//QPainter::CompositionMode
type QPainter__CompositionMode int64

const (
	QPainter__CompositionMode_SourceOver          = QPainter__CompositionMode(0)
	QPainter__CompositionMode_DestinationOver     = QPainter__CompositionMode(1)
	QPainter__CompositionMode_Clear               = QPainter__CompositionMode(2)
	QPainter__CompositionMode_Source              = QPainter__CompositionMode(3)
	QPainter__CompositionMode_Destination         = QPainter__CompositionMode(4)
	QPainter__CompositionMode_SourceIn            = QPainter__CompositionMode(5)
	QPainter__CompositionMode_DestinationIn       = QPainter__CompositionMode(6)
	QPainter__CompositionMode_SourceOut           = QPainter__CompositionMode(7)
	QPainter__CompositionMode_DestinationOut      = QPainter__CompositionMode(8)
	QPainter__CompositionMode_SourceAtop          = QPainter__CompositionMode(9)
	QPainter__CompositionMode_DestinationAtop     = QPainter__CompositionMode(10)
	QPainter__CompositionMode_Xor                 = QPainter__CompositionMode(11)
	QPainter__CompositionMode_Plus                = QPainter__CompositionMode(12)
	QPainter__CompositionMode_Multiply            = QPainter__CompositionMode(13)
	QPainter__CompositionMode_Screen              = QPainter__CompositionMode(14)
	QPainter__CompositionMode_Overlay             = QPainter__CompositionMode(15)
	QPainter__CompositionMode_Darken              = QPainter__CompositionMode(16)
	QPainter__CompositionMode_Lighten             = QPainter__CompositionMode(17)
	QPainter__CompositionMode_ColorDodge          = QPainter__CompositionMode(18)
	QPainter__CompositionMode_ColorBurn           = QPainter__CompositionMode(19)
	QPainter__CompositionMode_HardLight           = QPainter__CompositionMode(20)
	QPainter__CompositionMode_SoftLight           = QPainter__CompositionMode(21)
	QPainter__CompositionMode_Difference          = QPainter__CompositionMode(22)
	QPainter__CompositionMode_Exclusion           = QPainter__CompositionMode(23)
	QPainter__RasterOp_SourceOrDestination        = QPainter__CompositionMode(24)
	QPainter__RasterOp_SourceAndDestination       = QPainter__CompositionMode(25)
	QPainter__RasterOp_SourceXorDestination       = QPainter__CompositionMode(26)
	QPainter__RasterOp_NotSourceAndNotDestination = QPainter__CompositionMode(27)
	QPainter__RasterOp_NotSourceOrNotDestination  = QPainter__CompositionMode(28)
	QPainter__RasterOp_NotSourceXorDestination    = QPainter__CompositionMode(29)
	QPainter__RasterOp_NotSource                  = QPainter__CompositionMode(30)
	QPainter__RasterOp_NotSourceAndDestination    = QPainter__CompositionMode(31)
	QPainter__RasterOp_SourceAndNotDestination    = QPainter__CompositionMode(32)
	QPainter__RasterOp_NotSourceOrDestination     = QPainter__CompositionMode(33)
	QPainter__RasterOp_SourceOrNotDestination     = QPainter__CompositionMode(34)
	QPainter__RasterOp_ClearDestination           = QPainter__CompositionMode(35)
	QPainter__RasterOp_SetDestination             = QPainter__CompositionMode(36)
	QPainter__RasterOp_NotDestination             = QPainter__CompositionMode(37)
)

//QPainter::PixmapFragmentHint
type QPainter__PixmapFragmentHint int64

const (
	QPainter__OpaqueHint = QPainter__PixmapFragmentHint(0x01)
)

//QPainter::RenderHint
type QPainter__RenderHint int64

const (
	QPainter__Antialiasing            = QPainter__RenderHint(0x01)
	QPainter__TextAntialiasing        = QPainter__RenderHint(0x02)
	QPainter__SmoothPixmapTransform   = QPainter__RenderHint(0x04)
	QPainter__HighQualityAntialiasing = QPainter__RenderHint(0x08)
	QPainter__NonCosmeticDefaultPen   = QPainter__RenderHint(0x10)
	QPainter__Qt4CompatiblePainting   = QPainter__RenderHint(0x20)
)

type QPainter struct {
	ptr unsafe.Pointer
}

type QPainter_ITF interface {
	QPainter_PTR() *QPainter
}

func (p *QPainter) QPainter_PTR() *QPainter {
	return p
}

func (p *QPainter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPainter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPainter(ptr QPainter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPainter_PTR().Pointer()
	}
	return nil
}

func NewQPainterFromPointer(ptr unsafe.Pointer) *QPainter {
	var n = new(QPainter)
	n.SetPointer(ptr)
	return n
}

func newQPainterFromPointer(ptr unsafe.Pointer) *QPainter {
	var n = NewQPainterFromPointer(ptr)
	return n
}

func NewQPainter2(device QPaintDevice_ITF) *QPainter {
	defer qt.Recovering("QPainter::QPainter")

	return newQPainterFromPointer(C.QPainter_NewQPainter2(PointerFromQPaintDevice(device)))
}

func (ptr *QPainter) Begin(device QPaintDevice_ITF) bool {
	defer qt.Recovering("QPainter::begin")

	if ptr.Pointer() != nil {
		return C.QPainter_Begin(ptr.Pointer(), PointerFromQPaintDevice(device)) != 0
	}
	return false
}

func (ptr *QPainter) BoundingRect2(rectangle core.QRect_ITF, flags int, text string) *core.QRect {
	defer qt.Recovering("QPainter::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPainter_BoundingRect2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(flags), C.CString(text)))
	}
	return nil
}

func (ptr *QPainter) BoundingRect4(rectangle core.QRectF_ITF, text string, option QTextOption_ITF) *core.QRectF {
	defer qt.Recovering("QPainter::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPainter_BoundingRect4(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.CString(text), PointerFromQTextOption(option)))
	}
	return nil
}

func (ptr *QPainter) BoundingRect(rectangle core.QRectF_ITF, flags int, text string) *core.QRectF {
	defer qt.Recovering("QPainter::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPainter_BoundingRect(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(flags), C.CString(text)))
	}
	return nil
}

func (ptr *QPainter) DrawArc(rectangle core.QRectF_ITF, startAngle int, spanAngle int) {
	defer qt.Recovering("QPainter::drawArc")

	if ptr.Pointer() != nil {
		C.QPainter_DrawArc(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(startAngle), C.int(spanAngle))
	}
}

func (ptr *QPainter) DrawChord(rectangle core.QRectF_ITF, startAngle int, spanAngle int) {
	defer qt.Recovering("QPainter::drawChord")

	if ptr.Pointer() != nil {
		C.QPainter_DrawChord(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(startAngle), C.int(spanAngle))
	}
}

func (ptr *QPainter) DrawConvexPolygon2(points core.QPoint_ITF, pointCount int) {
	defer qt.Recovering("QPainter::drawConvexPolygon")

	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(pointCount))
	}
}

func (ptr *QPainter) DrawConvexPolygon(points core.QPointF_ITF, pointCount int) {
	defer qt.Recovering("QPainter::drawConvexPolygon")

	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon(ptr.Pointer(), core.PointerFromQPointF(points), C.int(pointCount))
	}
}

func (ptr *QPainter) DrawEllipse2(rectangle core.QRect_ITF) {
	defer qt.Recovering("QPainter::drawEllipse")

	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse2(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) DrawEllipse(rectangle core.QRectF_ITF) {
	defer qt.Recovering("QPainter::drawEllipse")

	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainter) DrawGlyphRun(position core.QPointF_ITF, glyphs QGlyphRun_ITF) {
	defer qt.Recovering("QPainter::drawGlyphRun")

	if ptr.Pointer() != nil {
		C.QPainter_DrawGlyphRun(ptr.Pointer(), core.PointerFromQPointF(position), PointerFromQGlyphRun(glyphs))
	}
}

func (ptr *QPainter) DrawImage3(point core.QPointF_ITF, image QImage_ITF) {
	defer qt.Recovering("QPainter::drawImage")

	if ptr.Pointer() != nil {
		C.QPainter_DrawImage3(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage(target core.QRectF_ITF, image QImage_ITF, source core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	defer qt.Recovering("QPainter::drawImage")

	if ptr.Pointer() != nil {
		C.QPainter_DrawImage(ptr.Pointer(), core.PointerFromQRectF(target), PointerFromQImage(image), core.PointerFromQRectF(source), C.int(flags))
	}
}

func (ptr *QPainter) DrawLines2(lines core.QLine_ITF, lineCount int) {
	defer qt.Recovering("QPainter::drawLines")

	if ptr.Pointer() != nil {
		C.QPainter_DrawLines2(ptr.Pointer(), core.PointerFromQLine(lines), C.int(lineCount))
	}
}

func (ptr *QPainter) DrawPicture(point core.QPointF_ITF, picture QPicture_ITF) {
	defer qt.Recovering("QPainter::drawPicture")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPicture(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQPicture(picture))
	}
}

func (ptr *QPainter) DrawPie(rectangle core.QRectF_ITF, startAngle int, spanAngle int) {
	defer qt.Recovering("QPainter::drawPie")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPie(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(startAngle), C.int(spanAngle))
	}
}

func (ptr *QPainter) DrawPixmap5(point core.QPointF_ITF, pixmap QPixmap_ITF) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap5(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap(target core.QRectF_ITF, pixmap QPixmap_ITF, source core.QRectF_ITF) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap(ptr.Pointer(), core.PointerFromQRectF(target), PointerFromQPixmap(pixmap), core.PointerFromQRectF(source))
	}
}

func (ptr *QPainter) DrawRects2(rectangles core.QRect_ITF, rectCount int) {
	defer qt.Recovering("QPainter::drawRects")

	if ptr.Pointer() != nil {
		C.QPainter_DrawRects2(ptr.Pointer(), core.PointerFromQRect(rectangles), C.int(rectCount))
	}
}

func (ptr *QPainter) DrawRects(rectangles core.QRectF_ITF, rectCount int) {
	defer qt.Recovering("QPainter::drawRects")

	if ptr.Pointer() != nil {
		C.QPainter_DrawRects(ptr.Pointer(), core.PointerFromQRectF(rectangles), C.int(rectCount))
	}
}

func (ptr *QPainter) DrawText(position core.QPointF_ITF, text string) {
	defer qt.Recovering("QPainter::drawText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawText(ptr.Pointer(), core.PointerFromQPointF(position), C.CString(text))
	}
}

func (ptr *QPainter) DrawText5(rectangle core.QRect_ITF, flags int, text string, boundingRect core.QRect_ITF) {
	defer qt.Recovering("QPainter::drawText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawText5(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(flags), C.CString(text), core.PointerFromQRect(boundingRect))
	}
}

func (ptr *QPainter) DrawText8(rectangle core.QRectF_ITF, text string, option QTextOption_ITF) {
	defer qt.Recovering("QPainter::drawText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawText8(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.CString(text), PointerFromQTextOption(option))
	}
}

func (ptr *QPainter) DrawText4(rectangle core.QRectF_ITF, flags int, text string, boundingRect core.QRectF_ITF) {
	defer qt.Recovering("QPainter::drawText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawText4(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(flags), C.CString(text), core.PointerFromQRectF(boundingRect))
	}
}

func (ptr *QPainter) DrawTiledPixmap(rectangle core.QRectF_ITF, pixmap QPixmap_ITF, position core.QPointF_ITF) {
	defer qt.Recovering("QPainter::drawTiledPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawTiledPixmap(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQPixmap(pixmap), core.PointerFromQPointF(position))
	}
}

func (ptr *QPainter) EraseRect(rectangle core.QRectF_ITF) {
	defer qt.Recovering("QPainter::eraseRect")

	if ptr.Pointer() != nil {
		C.QPainter_EraseRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainter) FillRect5(rectangle core.QRect_ITF, brush QBrush_ITF) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect5(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect6(rectangle core.QRect_ITF, color QColor_ITF) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect6(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQColor(color))
	}
}

func (ptr *QPainter) FillRect(rectangle core.QRectF_ITF, brush QBrush_ITF) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect7(rectangle core.QRectF_ITF, color QColor_ITF) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect7(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQColor(color))
	}
}

func (ptr *QPainter) Rotate(angle float64) {
	defer qt.Recovering("QPainter::rotate")

	if ptr.Pointer() != nil {
		C.QPainter_Rotate(ptr.Pointer(), C.double(angle))
	}
}

func (ptr *QPainter) SetBackground(brush QBrush_ITF) {
	defer qt.Recovering("QPainter::setBackground")

	if ptr.Pointer() != nil {
		C.QPainter_SetBackground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) SetBrushOrigin(position core.QPointF_ITF) {
	defer qt.Recovering("QPainter::setBrushOrigin")

	if ptr.Pointer() != nil {
		C.QPainter_SetBrushOrigin(ptr.Pointer(), core.PointerFromQPointF(position))
	}
}

func (ptr *QPainter) SetClipPath(path QPainterPath_ITF, operation core.Qt__ClipOperation) {
	defer qt.Recovering("QPainter::setClipPath")

	if ptr.Pointer() != nil {
		C.QPainter_SetClipPath(ptr.Pointer(), PointerFromQPainterPath(path), C.int(operation))
	}
}

func (ptr *QPainter) SetClipRect3(rectangle core.QRect_ITF, operation core.Qt__ClipOperation) {
	defer qt.Recovering("QPainter::setClipRect")

	if ptr.Pointer() != nil {
		C.QPainter_SetClipRect3(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(operation))
	}
}

func (ptr *QPainter) SetClipRect(rectangle core.QRectF_ITF, operation core.Qt__ClipOperation) {
	defer qt.Recovering("QPainter::setClipRect")

	if ptr.Pointer() != nil {
		C.QPainter_SetClipRect(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(operation))
	}
}

func (ptr *QPainter) SetClipRegion(region QRegion_ITF, operation core.Qt__ClipOperation) {
	defer qt.Recovering("QPainter::setClipRegion")

	if ptr.Pointer() != nil {
		C.QPainter_SetClipRegion(ptr.Pointer(), PointerFromQRegion(region), C.int(operation))
	}
}

func (ptr *QPainter) SetViewport(rectangle core.QRect_ITF) {
	defer qt.Recovering("QPainter::setViewport")

	if ptr.Pointer() != nil {
		C.QPainter_SetViewport(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) SetWindow(rectangle core.QRect_ITF) {
	defer qt.Recovering("QPainter::setWindow")

	if ptr.Pointer() != nil {
		C.QPainter_SetWindow(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func NewQPainter() *QPainter {
	defer qt.Recovering("QPainter::QPainter")

	return newQPainterFromPointer(C.QPainter_NewQPainter())
}

func (ptr *QPainter) Background() *QBrush {
	defer qt.Recovering("QPainter::background")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPainter_Background(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) BackgroundMode() core.Qt__BGMode {
	defer qt.Recovering("QPainter::backgroundMode")

	if ptr.Pointer() != nil {
		return core.Qt__BGMode(C.QPainter_BackgroundMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) BeginNativePainting() {
	defer qt.Recovering("QPainter::beginNativePainting")

	if ptr.Pointer() != nil {
		C.QPainter_BeginNativePainting(ptr.Pointer())
	}
}

func (ptr *QPainter) BoundingRect3(x int, y int, w int, h int, flags int, text string) *core.QRect {
	defer qt.Recovering("QPainter::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPainter_BoundingRect3(ptr.Pointer(), C.int(x), C.int(y), C.int(w), C.int(h), C.int(flags), C.CString(text)))
	}
	return nil
}

func (ptr *QPainter) Brush() *QBrush {
	defer qt.Recovering("QPainter::brush")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPainter_Brush(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) BrushOrigin() *core.QPoint {
	defer qt.Recovering("QPainter::brushOrigin")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QPainter_BrushOrigin(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) ClipBoundingRect() *core.QRectF {
	defer qt.Recovering("QPainter::clipBoundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPainter_ClipBoundingRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) ClipPath() *QPainterPath {
	defer qt.Recovering("QPainter::clipPath")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPainter_ClipPath(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) ClipRegion() *QRegion {
	defer qt.Recovering("QPainter::clipRegion")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QPainter_ClipRegion(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) CompositionMode() QPainter__CompositionMode {
	defer qt.Recovering("QPainter::compositionMode")

	if ptr.Pointer() != nil {
		return QPainter__CompositionMode(C.QPainter_CompositionMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) Device() *QPaintDevice {
	defer qt.Recovering("QPainter::device")

	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QPainter_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) DrawArc2(rectangle core.QRect_ITF, startAngle int, spanAngle int) {
	defer qt.Recovering("QPainter::drawArc")

	if ptr.Pointer() != nil {
		C.QPainter_DrawArc2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(startAngle), C.int(spanAngle))
	}
}

func (ptr *QPainter) DrawArc3(x int, y int, width int, height int, startAngle int, spanAngle int) {
	defer qt.Recovering("QPainter::drawArc")

	if ptr.Pointer() != nil {
		C.QPainter_DrawArc3(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), C.int(startAngle), C.int(spanAngle))
	}
}

func (ptr *QPainter) DrawChord2(rectangle core.QRect_ITF, startAngle int, spanAngle int) {
	defer qt.Recovering("QPainter::drawChord")

	if ptr.Pointer() != nil {
		C.QPainter_DrawChord2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(startAngle), C.int(spanAngle))
	}
}

func (ptr *QPainter) DrawChord3(x int, y int, width int, height int, startAngle int, spanAngle int) {
	defer qt.Recovering("QPainter::drawChord")

	if ptr.Pointer() != nil {
		C.QPainter_DrawChord3(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), C.int(startAngle), C.int(spanAngle))
	}
}

func (ptr *QPainter) DrawConvexPolygon4(polygon QPolygon_ITF) {
	defer qt.Recovering("QPainter::drawConvexPolygon")

	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon4(ptr.Pointer(), PointerFromQPolygon(polygon))
	}
}

func (ptr *QPainter) DrawConvexPolygon3(polygon QPolygonF_ITF) {
	defer qt.Recovering("QPainter::drawConvexPolygon")

	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon3(ptr.Pointer(), PointerFromQPolygonF(polygon))
	}
}

func (ptr *QPainter) DrawEllipse5(center core.QPoint_ITF, rx int, ry int) {
	defer qt.Recovering("QPainter::drawEllipse")

	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse5(ptr.Pointer(), core.PointerFromQPoint(center), C.int(rx), C.int(ry))
	}
}

func (ptr *QPainter) DrawEllipse4(center core.QPointF_ITF, rx float64, ry float64) {
	defer qt.Recovering("QPainter::drawEllipse")

	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse4(ptr.Pointer(), core.PointerFromQPointF(center), C.double(rx), C.double(ry))
	}
}

func (ptr *QPainter) DrawEllipse3(x int, y int, width int, height int) {
	defer qt.Recovering("QPainter::drawEllipse")

	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse3(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height))
	}
}

func (ptr *QPainter) DrawImage4(point core.QPoint_ITF, image QImage_ITF) {
	defer qt.Recovering("QPainter::drawImage")

	if ptr.Pointer() != nil {
		C.QPainter_DrawImage4(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage6(point core.QPoint_ITF, image QImage_ITF, source core.QRect_ITF, flags core.Qt__ImageConversionFlag) {
	defer qt.Recovering("QPainter::drawImage")

	if ptr.Pointer() != nil {
		C.QPainter_DrawImage6(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQImage(image), core.PointerFromQRect(source), C.int(flags))
	}
}

func (ptr *QPainter) DrawImage5(point core.QPointF_ITF, image QImage_ITF, source core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	defer qt.Recovering("QPainter::drawImage")

	if ptr.Pointer() != nil {
		C.QPainter_DrawImage5(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQImage(image), core.PointerFromQRectF(source), C.int(flags))
	}
}

func (ptr *QPainter) DrawImage8(rectangle core.QRect_ITF, image QImage_ITF) {
	defer qt.Recovering("QPainter::drawImage")

	if ptr.Pointer() != nil {
		C.QPainter_DrawImage8(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage2(target core.QRect_ITF, image QImage_ITF, source core.QRect_ITF, flags core.Qt__ImageConversionFlag) {
	defer qt.Recovering("QPainter::drawImage")

	if ptr.Pointer() != nil {
		C.QPainter_DrawImage2(ptr.Pointer(), core.PointerFromQRect(target), PointerFromQImage(image), core.PointerFromQRect(source), C.int(flags))
	}
}

func (ptr *QPainter) DrawImage7(rectangle core.QRectF_ITF, image QImage_ITF) {
	defer qt.Recovering("QPainter::drawImage")

	if ptr.Pointer() != nil {
		C.QPainter_DrawImage7(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage9(x int, y int, image QImage_ITF, sx int, sy int, sw int, sh int, flags core.Qt__ImageConversionFlag) {
	defer qt.Recovering("QPainter::drawImage")

	if ptr.Pointer() != nil {
		C.QPainter_DrawImage9(ptr.Pointer(), C.int(x), C.int(y), PointerFromQImage(image), C.int(sx), C.int(sy), C.int(sw), C.int(sh), C.int(flags))
	}
}

func (ptr *QPainter) DrawLine2(line core.QLine_ITF) {
	defer qt.Recovering("QPainter::drawLine")

	if ptr.Pointer() != nil {
		C.QPainter_DrawLine2(ptr.Pointer(), core.PointerFromQLine(line))
	}
}

func (ptr *QPainter) DrawLine(line core.QLineF_ITF) {
	defer qt.Recovering("QPainter::drawLine")

	if ptr.Pointer() != nil {
		C.QPainter_DrawLine(ptr.Pointer(), core.PointerFromQLineF(line))
	}
}

func (ptr *QPainter) DrawLine3(p1 core.QPoint_ITF, p2 core.QPoint_ITF) {
	defer qt.Recovering("QPainter::drawLine")

	if ptr.Pointer() != nil {
		C.QPainter_DrawLine3(ptr.Pointer(), core.PointerFromQPoint(p1), core.PointerFromQPoint(p2))
	}
}

func (ptr *QPainter) DrawLine4(p1 core.QPointF_ITF, p2 core.QPointF_ITF) {
	defer qt.Recovering("QPainter::drawLine")

	if ptr.Pointer() != nil {
		C.QPainter_DrawLine4(ptr.Pointer(), core.PointerFromQPointF(p1), core.PointerFromQPointF(p2))
	}
}

func (ptr *QPainter) DrawLine5(x1 int, y1 int, x2 int, y2 int) {
	defer qt.Recovering("QPainter::drawLine")

	if ptr.Pointer() != nil {
		C.QPainter_DrawLine5(ptr.Pointer(), C.int(x1), C.int(y1), C.int(x2), C.int(y2))
	}
}

func (ptr *QPainter) DrawLines(lines core.QLineF_ITF, lineCount int) {
	defer qt.Recovering("QPainter::drawLines")

	if ptr.Pointer() != nil {
		C.QPainter_DrawLines(ptr.Pointer(), core.PointerFromQLineF(lines), C.int(lineCount))
	}
}

func (ptr *QPainter) DrawLines4(pointPairs core.QPoint_ITF, lineCount int) {
	defer qt.Recovering("QPainter::drawLines")

	if ptr.Pointer() != nil {
		C.QPainter_DrawLines4(ptr.Pointer(), core.PointerFromQPoint(pointPairs), C.int(lineCount))
	}
}

func (ptr *QPainter) DrawLines3(pointPairs core.QPointF_ITF, lineCount int) {
	defer qt.Recovering("QPainter::drawLines")

	if ptr.Pointer() != nil {
		C.QPainter_DrawLines3(ptr.Pointer(), core.PointerFromQPointF(pointPairs), C.int(lineCount))
	}
}

func (ptr *QPainter) DrawPath(path QPainterPath_ITF) {
	defer qt.Recovering("QPainter::drawPath")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPainter) DrawPicture2(point core.QPoint_ITF, picture QPicture_ITF) {
	defer qt.Recovering("QPainter::drawPicture")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPicture2(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQPicture(picture))
	}
}

func (ptr *QPainter) DrawPicture3(x int, y int, picture QPicture_ITF) {
	defer qt.Recovering("QPainter::drawPicture")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPicture3(ptr.Pointer(), C.int(x), C.int(y), PointerFromQPicture(picture))
	}
}

func (ptr *QPainter) DrawPie2(rectangle core.QRect_ITF, startAngle int, spanAngle int) {
	defer qt.Recovering("QPainter::drawPie")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPie2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(startAngle), C.int(spanAngle))
	}
}

func (ptr *QPainter) DrawPie3(x int, y int, width int, height int, startAngle int, spanAngle int) {
	defer qt.Recovering("QPainter::drawPie")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPie3(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), C.int(startAngle), C.int(spanAngle))
	}
}

func (ptr *QPainter) DrawPixmap6(point core.QPoint_ITF, pixmap QPixmap_ITF) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap6(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap4(point core.QPoint_ITF, pixmap QPixmap_ITF, source core.QRect_ITF) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap4(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQPixmap(pixmap), core.PointerFromQRect(source))
	}
}

func (ptr *QPainter) DrawPixmap3(point core.QPointF_ITF, pixmap QPixmap_ITF, source core.QRectF_ITF) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap3(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQPixmap(pixmap), core.PointerFromQRectF(source))
	}
}

func (ptr *QPainter) DrawPixmap8(rectangle core.QRect_ITF, pixmap QPixmap_ITF) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap8(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap2(target core.QRect_ITF, pixmap QPixmap_ITF, source core.QRect_ITF) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap2(ptr.Pointer(), core.PointerFromQRect(target), PointerFromQPixmap(pixmap), core.PointerFromQRect(source))
	}
}

func (ptr *QPainter) DrawPixmap7(x int, y int, pixmap QPixmap_ITF) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap7(ptr.Pointer(), C.int(x), C.int(y), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap11(x int, y int, pixmap QPixmap_ITF, sx int, sy int, sw int, sh int) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap11(ptr.Pointer(), C.int(x), C.int(y), PointerFromQPixmap(pixmap), C.int(sx), C.int(sy), C.int(sw), C.int(sh))
	}
}

func (ptr *QPainter) DrawPixmap10(x int, y int, w int, h int, pixmap QPixmap_ITF, sx int, sy int, sw int, sh int) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap10(ptr.Pointer(), C.int(x), C.int(y), C.int(w), C.int(h), PointerFromQPixmap(pixmap), C.int(sx), C.int(sy), C.int(sw), C.int(sh))
	}
}

func (ptr *QPainter) DrawPixmap9(x int, y int, width int, height int, pixmap QPixmap_ITF) {
	defer qt.Recovering("QPainter::drawPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap9(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPoint2(position core.QPoint_ITF) {
	defer qt.Recovering("QPainter::drawPoint")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPoint2(ptr.Pointer(), core.PointerFromQPoint(position))
	}
}

func (ptr *QPainter) DrawPoint(position core.QPointF_ITF) {
	defer qt.Recovering("QPainter::drawPoint")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPoint(ptr.Pointer(), core.PointerFromQPointF(position))
	}
}

func (ptr *QPainter) DrawPoint3(x int, y int) {
	defer qt.Recovering("QPainter::drawPoint")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPoint3(ptr.Pointer(), C.int(x), C.int(y))
	}
}

func (ptr *QPainter) DrawPoints2(points core.QPoint_ITF, pointCount int) {
	defer qt.Recovering("QPainter::drawPoints")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(pointCount))
	}
}

func (ptr *QPainter) DrawPoints(points core.QPointF_ITF, pointCount int) {
	defer qt.Recovering("QPainter::drawPoints")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints(ptr.Pointer(), core.PointerFromQPointF(points), C.int(pointCount))
	}
}

func (ptr *QPainter) DrawPoints4(points QPolygon_ITF) {
	defer qt.Recovering("QPainter::drawPoints")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints4(ptr.Pointer(), PointerFromQPolygon(points))
	}
}

func (ptr *QPainter) DrawPoints3(points QPolygonF_ITF) {
	defer qt.Recovering("QPainter::drawPoints")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints3(ptr.Pointer(), PointerFromQPolygonF(points))
	}
}

func (ptr *QPainter) DrawPolygon2(points core.QPoint_ITF, pointCount int, fillRule core.Qt__FillRule) {
	defer qt.Recovering("QPainter::drawPolygon")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(pointCount), C.int(fillRule))
	}
}

func (ptr *QPainter) DrawPolygon(points core.QPointF_ITF, pointCount int, fillRule core.Qt__FillRule) {
	defer qt.Recovering("QPainter::drawPolygon")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon(ptr.Pointer(), core.PointerFromQPointF(points), C.int(pointCount), C.int(fillRule))
	}
}

func (ptr *QPainter) DrawPolygon4(points QPolygon_ITF, fillRule core.Qt__FillRule) {
	defer qt.Recovering("QPainter::drawPolygon")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon4(ptr.Pointer(), PointerFromQPolygon(points), C.int(fillRule))
	}
}

func (ptr *QPainter) DrawPolygon3(points QPolygonF_ITF, fillRule core.Qt__FillRule) {
	defer qt.Recovering("QPainter::drawPolygon")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon3(ptr.Pointer(), PointerFromQPolygonF(points), C.int(fillRule))
	}
}

func (ptr *QPainter) DrawPolyline2(points core.QPoint_ITF, pointCount int) {
	defer qt.Recovering("QPainter::drawPolyline")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(pointCount))
	}
}

func (ptr *QPainter) DrawPolyline(points core.QPointF_ITF, pointCount int) {
	defer qt.Recovering("QPainter::drawPolyline")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline(ptr.Pointer(), core.PointerFromQPointF(points), C.int(pointCount))
	}
}

func (ptr *QPainter) DrawPolyline4(points QPolygon_ITF) {
	defer qt.Recovering("QPainter::drawPolyline")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline4(ptr.Pointer(), PointerFromQPolygon(points))
	}
}

func (ptr *QPainter) DrawPolyline3(points QPolygonF_ITF) {
	defer qt.Recovering("QPainter::drawPolyline")

	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline3(ptr.Pointer(), PointerFromQPolygonF(points))
	}
}

func (ptr *QPainter) DrawRect2(rectangle core.QRect_ITF) {
	defer qt.Recovering("QPainter::drawRect")

	if ptr.Pointer() != nil {
		C.QPainter_DrawRect2(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) DrawRect(rectangle core.QRectF_ITF) {
	defer qt.Recovering("QPainter::drawRect")

	if ptr.Pointer() != nil {
		C.QPainter_DrawRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainter) DrawRect3(x int, y int, width int, height int) {
	defer qt.Recovering("QPainter::drawRect")

	if ptr.Pointer() != nil {
		C.QPainter_DrawRect3(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height))
	}
}

func (ptr *QPainter) DrawRoundedRect2(rect core.QRect_ITF, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	defer qt.Recovering("QPainter::drawRoundedRect")

	if ptr.Pointer() != nil {
		C.QPainter_DrawRoundedRect2(ptr.Pointer(), core.PointerFromQRect(rect), C.double(xRadius), C.double(yRadius), C.int(mode))
	}
}

func (ptr *QPainter) DrawRoundedRect(rect core.QRectF_ITF, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	defer qt.Recovering("QPainter::drawRoundedRect")

	if ptr.Pointer() != nil {
		C.QPainter_DrawRoundedRect(ptr.Pointer(), core.PointerFromQRectF(rect), C.double(xRadius), C.double(yRadius), C.int(mode))
	}
}

func (ptr *QPainter) DrawRoundedRect3(x int, y int, w int, h int, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	defer qt.Recovering("QPainter::drawRoundedRect")

	if ptr.Pointer() != nil {
		C.QPainter_DrawRoundedRect3(ptr.Pointer(), C.int(x), C.int(y), C.int(w), C.int(h), C.double(xRadius), C.double(yRadius), C.int(mode))
	}
}

func (ptr *QPainter) DrawStaticText2(topLeftPosition core.QPoint_ITF, staticText QStaticText_ITF) {
	defer qt.Recovering("QPainter::drawStaticText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawStaticText2(ptr.Pointer(), core.PointerFromQPoint(topLeftPosition), PointerFromQStaticText(staticText))
	}
}

func (ptr *QPainter) DrawStaticText(topLeftPosition core.QPointF_ITF, staticText QStaticText_ITF) {
	defer qt.Recovering("QPainter::drawStaticText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawStaticText(ptr.Pointer(), core.PointerFromQPointF(topLeftPosition), PointerFromQStaticText(staticText))
	}
}

func (ptr *QPainter) DrawStaticText3(left int, top int, staticText QStaticText_ITF) {
	defer qt.Recovering("QPainter::drawStaticText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawStaticText3(ptr.Pointer(), C.int(left), C.int(top), PointerFromQStaticText(staticText))
	}
}

func (ptr *QPainter) DrawText3(position core.QPoint_ITF, text string) {
	defer qt.Recovering("QPainter::drawText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawText3(ptr.Pointer(), core.PointerFromQPoint(position), C.CString(text))
	}
}

func (ptr *QPainter) DrawText6(x int, y int, text string) {
	defer qt.Recovering("QPainter::drawText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawText6(ptr.Pointer(), C.int(x), C.int(y), C.CString(text))
	}
}

func (ptr *QPainter) DrawText7(x int, y int, width int, height int, flags int, text string, boundingRect core.QRect_ITF) {
	defer qt.Recovering("QPainter::drawText")

	if ptr.Pointer() != nil {
		C.QPainter_DrawText7(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), C.int(flags), C.CString(text), core.PointerFromQRect(boundingRect))
	}
}

func (ptr *QPainter) DrawTiledPixmap2(rectangle core.QRect_ITF, pixmap QPixmap_ITF, position core.QPoint_ITF) {
	defer qt.Recovering("QPainter::drawTiledPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawTiledPixmap2(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQPixmap(pixmap), core.PointerFromQPoint(position))
	}
}

func (ptr *QPainter) DrawTiledPixmap3(x int, y int, width int, height int, pixmap QPixmap_ITF, sx int, sy int) {
	defer qt.Recovering("QPainter::drawTiledPixmap")

	if ptr.Pointer() != nil {
		C.QPainter_DrawTiledPixmap3(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), PointerFromQPixmap(pixmap), C.int(sx), C.int(sy))
	}
}

func (ptr *QPainter) End() bool {
	defer qt.Recovering("QPainter::end")

	if ptr.Pointer() != nil {
		return C.QPainter_End(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) EndNativePainting() {
	defer qt.Recovering("QPainter::endNativePainting")

	if ptr.Pointer() != nil {
		C.QPainter_EndNativePainting(ptr.Pointer())
	}
}

func (ptr *QPainter) EraseRect2(rectangle core.QRect_ITF) {
	defer qt.Recovering("QPainter::eraseRect")

	if ptr.Pointer() != nil {
		C.QPainter_EraseRect2(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) EraseRect3(x int, y int, width int, height int) {
	defer qt.Recovering("QPainter::eraseRect")

	if ptr.Pointer() != nil {
		C.QPainter_EraseRect3(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height))
	}
}

func (ptr *QPainter) FillPath(path QPainterPath_ITF, brush QBrush_ITF) {
	defer qt.Recovering("QPainter::fillPath")

	if ptr.Pointer() != nil {
		C.QPainter_FillPath(ptr.Pointer(), PointerFromQPainterPath(path), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect3(rectangle core.QRect_ITF, style core.Qt__BrushStyle) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect3(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(style))
	}
}

func (ptr *QPainter) FillRect11(rectangle core.QRect_ITF, color core.Qt__GlobalColor) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect11(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(color))
	}
}

func (ptr *QPainter) FillRect4(rectangle core.QRectF_ITF, style core.Qt__BrushStyle) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect4(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(style))
	}
}

func (ptr *QPainter) FillRect12(rectangle core.QRectF_ITF, color core.Qt__GlobalColor) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect12(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(color))
	}
}

func (ptr *QPainter) FillRect2(x int, y int, width int, height int, style core.Qt__BrushStyle) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect2(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), C.int(style))
	}
}

func (ptr *QPainter) FillRect10(x int, y int, width int, height int, color core.Qt__GlobalColor) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect10(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), C.int(color))
	}
}

func (ptr *QPainter) FillRect8(x int, y int, width int, height int, brush QBrush_ITF) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect8(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect9(x int, y int, width int, height int, color QColor_ITF) {
	defer qt.Recovering("QPainter::fillRect")

	if ptr.Pointer() != nil {
		C.QPainter_FillRect9(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), PointerFromQColor(color))
	}
}

func (ptr *QPainter) Font() *QFont {
	defer qt.Recovering("QPainter::font")

	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QPainter_Font(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) FontInfo() *QFontInfo {
	defer qt.Recovering("QPainter::fontInfo")

	if ptr.Pointer() != nil {
		return NewQFontInfoFromPointer(C.QPainter_FontInfo(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) FontMetrics() *QFontMetrics {
	defer qt.Recovering("QPainter::fontMetrics")

	if ptr.Pointer() != nil {
		return NewQFontMetricsFromPointer(C.QPainter_FontMetrics(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) HasClipping() bool {
	defer qt.Recovering("QPainter::hasClipping")

	if ptr.Pointer() != nil {
		return C.QPainter_HasClipping(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) IsActive() bool {
	defer qt.Recovering("QPainter::isActive")

	if ptr.Pointer() != nil {
		return C.QPainter_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) LayoutDirection() core.Qt__LayoutDirection {
	defer qt.Recovering("QPainter::layoutDirection")

	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QPainter_LayoutDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) Opacity() float64 {
	defer qt.Recovering("QPainter::opacity")

	if ptr.Pointer() != nil {
		return float64(C.QPainter_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QPainter::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPainter_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) Pen() *QPen {
	defer qt.Recovering("QPainter::pen")

	if ptr.Pointer() != nil {
		return NewQPenFromPointer(C.QPainter_Pen(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) RenderHints() QPainter__RenderHint {
	defer qt.Recovering("QPainter::renderHints")

	if ptr.Pointer() != nil {
		return QPainter__RenderHint(C.QPainter_RenderHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) ResetTransform() {
	defer qt.Recovering("QPainter::resetTransform")

	if ptr.Pointer() != nil {
		C.QPainter_ResetTransform(ptr.Pointer())
	}
}

func (ptr *QPainter) Restore() {
	defer qt.Recovering("QPainter::restore")

	if ptr.Pointer() != nil {
		C.QPainter_Restore(ptr.Pointer())
	}
}

func (ptr *QPainter) Save() {
	defer qt.Recovering("QPainter::save")

	if ptr.Pointer() != nil {
		C.QPainter_Save(ptr.Pointer())
	}
}

func (ptr *QPainter) Scale(sx float64, sy float64) {
	defer qt.Recovering("QPainter::scale")

	if ptr.Pointer() != nil {
		C.QPainter_Scale(ptr.Pointer(), C.double(sx), C.double(sy))
	}
}

func (ptr *QPainter) SetBackgroundMode(mode core.Qt__BGMode) {
	defer qt.Recovering("QPainter::setBackgroundMode")

	if ptr.Pointer() != nil {
		C.QPainter_SetBackgroundMode(ptr.Pointer(), C.int(mode))
	}
}

func (ptr *QPainter) SetBrush2(style core.Qt__BrushStyle) {
	defer qt.Recovering("QPainter::setBrush")

	if ptr.Pointer() != nil {
		C.QPainter_SetBrush2(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QPainter) SetBrush(brush QBrush_ITF) {
	defer qt.Recovering("QPainter::setBrush")

	if ptr.Pointer() != nil {
		C.QPainter_SetBrush(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) SetBrushOrigin2(position core.QPoint_ITF) {
	defer qt.Recovering("QPainter::setBrushOrigin")

	if ptr.Pointer() != nil {
		C.QPainter_SetBrushOrigin2(ptr.Pointer(), core.PointerFromQPoint(position))
	}
}

func (ptr *QPainter) SetBrushOrigin3(x int, y int) {
	defer qt.Recovering("QPainter::setBrushOrigin")

	if ptr.Pointer() != nil {
		C.QPainter_SetBrushOrigin3(ptr.Pointer(), C.int(x), C.int(y))
	}
}

func (ptr *QPainter) SetClipRect2(x int, y int, width int, height int, operation core.Qt__ClipOperation) {
	defer qt.Recovering("QPainter::setClipRect")

	if ptr.Pointer() != nil {
		C.QPainter_SetClipRect2(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height), C.int(operation))
	}
}

func (ptr *QPainter) SetClipping(enable bool) {
	defer qt.Recovering("QPainter::setClipping")

	if ptr.Pointer() != nil {
		C.QPainter_SetClipping(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QPainter) SetCompositionMode(mode QPainter__CompositionMode) {
	defer qt.Recovering("QPainter::setCompositionMode")

	if ptr.Pointer() != nil {
		C.QPainter_SetCompositionMode(ptr.Pointer(), C.int(mode))
	}
}

func (ptr *QPainter) SetFont(font QFont_ITF) {
	defer qt.Recovering("QPainter::setFont")

	if ptr.Pointer() != nil {
		C.QPainter_SetFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QPainter) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	defer qt.Recovering("QPainter::setLayoutDirection")

	if ptr.Pointer() != nil {
		C.QPainter_SetLayoutDirection(ptr.Pointer(), C.int(direction))
	}
}

func (ptr *QPainter) SetOpacity(opacity float64) {
	defer qt.Recovering("QPainter::setOpacity")

	if ptr.Pointer() != nil {
		C.QPainter_SetOpacity(ptr.Pointer(), C.double(opacity))
	}
}

func (ptr *QPainter) SetPen3(style core.Qt__PenStyle) {
	defer qt.Recovering("QPainter::setPen")

	if ptr.Pointer() != nil {
		C.QPainter_SetPen3(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QPainter) SetPen2(color QColor_ITF) {
	defer qt.Recovering("QPainter::setPen")

	if ptr.Pointer() != nil {
		C.QPainter_SetPen2(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QPainter) SetPen(pen QPen_ITF) {
	defer qt.Recovering("QPainter::setPen")

	if ptr.Pointer() != nil {
		C.QPainter_SetPen(ptr.Pointer(), PointerFromQPen(pen))
	}
}

func (ptr *QPainter) SetRenderHint(hint QPainter__RenderHint, on bool) {
	defer qt.Recovering("QPainter::setRenderHint")

	if ptr.Pointer() != nil {
		C.QPainter_SetRenderHint(ptr.Pointer(), C.int(hint), C.int(qt.GoBoolToInt(on)))
	}
}

func (ptr *QPainter) SetRenderHints(hints QPainter__RenderHint, on bool) {
	defer qt.Recovering("QPainter::setRenderHints")

	if ptr.Pointer() != nil {
		C.QPainter_SetRenderHints(ptr.Pointer(), C.int(hints), C.int(qt.GoBoolToInt(on)))
	}
}

func (ptr *QPainter) SetTransform(transform QTransform_ITF, combine bool) {
	defer qt.Recovering("QPainter::setTransform")

	if ptr.Pointer() != nil {
		C.QPainter_SetTransform(ptr.Pointer(), PointerFromQTransform(transform), C.int(qt.GoBoolToInt(combine)))
	}
}

func (ptr *QPainter) SetViewTransformEnabled(enable bool) {
	defer qt.Recovering("QPainter::setViewTransformEnabled")

	if ptr.Pointer() != nil {
		C.QPainter_SetViewTransformEnabled(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QPainter) SetViewport2(x int, y int, width int, height int) {
	defer qt.Recovering("QPainter::setViewport")

	if ptr.Pointer() != nil {
		C.QPainter_SetViewport2(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height))
	}
}

func (ptr *QPainter) SetWindow2(x int, y int, width int, height int) {
	defer qt.Recovering("QPainter::setWindow")

	if ptr.Pointer() != nil {
		C.QPainter_SetWindow2(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height))
	}
}

func (ptr *QPainter) SetWorldMatrixEnabled(enable bool) {
	defer qt.Recovering("QPainter::setWorldMatrixEnabled")

	if ptr.Pointer() != nil {
		C.QPainter_SetWorldMatrixEnabled(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QPainter) SetWorldTransform(matrix QTransform_ITF, combine bool) {
	defer qt.Recovering("QPainter::setWorldTransform")

	if ptr.Pointer() != nil {
		C.QPainter_SetWorldTransform(ptr.Pointer(), PointerFromQTransform(matrix), C.int(qt.GoBoolToInt(combine)))
	}
}

func (ptr *QPainter) Shear(sh float64, sv float64) {
	defer qt.Recovering("QPainter::shear")

	if ptr.Pointer() != nil {
		C.QPainter_Shear(ptr.Pointer(), C.double(sh), C.double(sv))
	}
}

func (ptr *QPainter) StrokePath(path QPainterPath_ITF, pen QPen_ITF) {
	defer qt.Recovering("QPainter::strokePath")

	if ptr.Pointer() != nil {
		C.QPainter_StrokePath(ptr.Pointer(), PointerFromQPainterPath(path), PointerFromQPen(pen))
	}
}

func (ptr *QPainter) TestRenderHint(hint QPainter__RenderHint) bool {
	defer qt.Recovering("QPainter::testRenderHint")

	if ptr.Pointer() != nil {
		return C.QPainter_TestRenderHint(ptr.Pointer(), C.int(hint)) != 0
	}
	return false
}

func (ptr *QPainter) Translate2(offset core.QPoint_ITF) {
	defer qt.Recovering("QPainter::translate")

	if ptr.Pointer() != nil {
		C.QPainter_Translate2(ptr.Pointer(), core.PointerFromQPoint(offset))
	}
}

func (ptr *QPainter) Translate(offset core.QPointF_ITF) {
	defer qt.Recovering("QPainter::translate")

	if ptr.Pointer() != nil {
		C.QPainter_Translate(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QPainter) Translate3(dx float64, dy float64) {
	defer qt.Recovering("QPainter::translate")

	if ptr.Pointer() != nil {
		C.QPainter_Translate3(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QPainter) ViewTransformEnabled() bool {
	defer qt.Recovering("QPainter::viewTransformEnabled")

	if ptr.Pointer() != nil {
		return C.QPainter_ViewTransformEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) Viewport() *core.QRect {
	defer qt.Recovering("QPainter::viewport")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPainter_Viewport(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) Window() *core.QRect {
	defer qt.Recovering("QPainter::window")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPainter_Window(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) WorldMatrixEnabled() bool {
	defer qt.Recovering("QPainter::worldMatrixEnabled")

	if ptr.Pointer() != nil {
		return C.QPainter_WorldMatrixEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) DestroyQPainter() {
	defer qt.Recovering("QPainter::~QPainter")

	if ptr.Pointer() != nil {
		C.QPainter_DestroyQPainter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QPainterPath::ElementType
type QPainterPath__ElementType int64

const (
	QPainterPath__MoveToElement      = QPainterPath__ElementType(0)
	QPainterPath__LineToElement      = QPainterPath__ElementType(1)
	QPainterPath__CurveToElement     = QPainterPath__ElementType(2)
	QPainterPath__CurveToDataElement = QPainterPath__ElementType(3)
)

type QPainterPath struct {
	ptr unsafe.Pointer
}

type QPainterPath_ITF interface {
	QPainterPath_PTR() *QPainterPath
}

func (p *QPainterPath) QPainterPath_PTR() *QPainterPath {
	return p
}

func (p *QPainterPath) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPainterPath) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPainterPath(ptr QPainterPath_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPainterPath_PTR().Pointer()
	}
	return nil
}

func NewQPainterPathFromPointer(ptr unsafe.Pointer) *QPainterPath {
	var n = new(QPainterPath)
	n.SetPointer(ptr)
	return n
}

func newQPainterPathFromPointer(ptr unsafe.Pointer) *QPainterPath {
	var n = NewQPainterPathFromPointer(ptr)
	return n
}

func NewQPainterPath3(path QPainterPath_ITF) *QPainterPath {
	defer qt.Recovering("QPainterPath::QPainterPath")

	return newQPainterPathFromPointer(C.QPainterPath_NewQPainterPath3(PointerFromQPainterPath(path)))
}

func (ptr *QPainterPath) AddEllipse(boundingRectangle core.QRectF_ITF) {
	defer qt.Recovering("QPainterPath::addEllipse")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddEllipse(ptr.Pointer(), core.PointerFromQRectF(boundingRectangle))
	}
}

func (ptr *QPainterPath) AddPath(path QPainterPath_ITF) {
	defer qt.Recovering("QPainterPath::addPath")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPainterPath) AddRect(rectangle core.QRectF_ITF) {
	defer qt.Recovering("QPainterPath::addRect")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainterPath) AddText(point core.QPointF_ITF, font QFont_ITF, text string) {
	defer qt.Recovering("QPainterPath::addText")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddText(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQFont(font), C.CString(text))
	}
}

func (ptr *QPainterPath) ArcMoveTo(rectangle core.QRectF_ITF, angle float64) {
	defer qt.Recovering("QPainterPath::arcMoveTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_ArcMoveTo(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.double(angle))
	}
}

func (ptr *QPainterPath) ArcTo(rectangle core.QRectF_ITF, startAngle float64, sweepLength float64) {
	defer qt.Recovering("QPainterPath::arcTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_ArcTo(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.double(startAngle), C.double(sweepLength))
	}
}

func (ptr *QPainterPath) ConnectPath(path QPainterPath_ITF) {
	defer qt.Recovering("QPainterPath::connectPath")

	if ptr.Pointer() != nil {
		C.QPainterPath_ConnectPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPainterPath) Contains(point core.QPointF_ITF) bool {
	defer qt.Recovering("QPainterPath::contains")

	if ptr.Pointer() != nil {
		return C.QPainterPath_Contains(ptr.Pointer(), core.PointerFromQPointF(point)) != 0
	}
	return false
}

func (ptr *QPainterPath) Contains2(rectangle core.QRectF_ITF) bool {
	defer qt.Recovering("QPainterPath::contains")

	if ptr.Pointer() != nil {
		return C.QPainterPath_Contains2(ptr.Pointer(), core.PointerFromQRectF(rectangle)) != 0
	}
	return false
}

func (ptr *QPainterPath) CubicTo(c1 core.QPointF_ITF, c2 core.QPointF_ITF, endPoint core.QPointF_ITF) {
	defer qt.Recovering("QPainterPath::cubicTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_CubicTo(ptr.Pointer(), core.PointerFromQPointF(c1), core.PointerFromQPointF(c2), core.PointerFromQPointF(endPoint))
	}
}

func (ptr *QPainterPath) CurrentPosition() *core.QPointF {
	defer qt.Recovering("QPainterPath::currentPosition")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QPainterPath_CurrentPosition(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainterPath) ElementCount() int {
	defer qt.Recovering("QPainterPath::elementCount")

	if ptr.Pointer() != nil {
		return int(C.QPainterPath_ElementCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPath) Intersects(rectangle core.QRectF_ITF) bool {
	defer qt.Recovering("QPainterPath::intersects")

	if ptr.Pointer() != nil {
		return C.QPainterPath_Intersects(ptr.Pointer(), core.PointerFromQRectF(rectangle)) != 0
	}
	return false
}

func (ptr *QPainterPath) IsEmpty() bool {
	defer qt.Recovering("QPainterPath::isEmpty")

	if ptr.Pointer() != nil {
		return C.QPainterPath_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainterPath) LineTo(endPoint core.QPointF_ITF) {
	defer qt.Recovering("QPainterPath::lineTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_LineTo(ptr.Pointer(), core.PointerFromQPointF(endPoint))
	}
}

func (ptr *QPainterPath) MoveTo(point core.QPointF_ITF) {
	defer qt.Recovering("QPainterPath::moveTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_MoveTo(ptr.Pointer(), core.PointerFromQPointF(point))
	}
}

func (ptr *QPainterPath) QuadTo(c core.QPointF_ITF, endPoint core.QPointF_ITF) {
	defer qt.Recovering("QPainterPath::quadTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_QuadTo(ptr.Pointer(), core.PointerFromQPointF(c), core.PointerFromQPointF(endPoint))
	}
}

func (ptr *QPainterPath) SetElementPositionAt(index int, x float64, y float64) {
	defer qt.Recovering("QPainterPath::setElementPositionAt")

	if ptr.Pointer() != nil {
		C.QPainterPath_SetElementPositionAt(ptr.Pointer(), C.int(index), C.double(x), C.double(y))
	}
}

func (ptr *QPainterPath) SetFillRule(fillRule core.Qt__FillRule) {
	defer qt.Recovering("QPainterPath::setFillRule")

	if ptr.Pointer() != nil {
		C.QPainterPath_SetFillRule(ptr.Pointer(), C.int(fillRule))
	}
}

func NewQPainterPath() *QPainterPath {
	defer qt.Recovering("QPainterPath::QPainterPath")

	return newQPainterPathFromPointer(C.QPainterPath_NewQPainterPath())
}

func NewQPainterPath2(startPoint core.QPointF_ITF) *QPainterPath {
	defer qt.Recovering("QPainterPath::QPainterPath")

	return newQPainterPathFromPointer(C.QPainterPath_NewQPainterPath2(core.PointerFromQPointF(startPoint)))
}

func (ptr *QPainterPath) AddEllipse3(center core.QPointF_ITF, rx float64, ry float64) {
	defer qt.Recovering("QPainterPath::addEllipse")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddEllipse3(ptr.Pointer(), core.PointerFromQPointF(center), C.double(rx), C.double(ry))
	}
}

func (ptr *QPainterPath) AddEllipse2(x float64, y float64, width float64, height float64) {
	defer qt.Recovering("QPainterPath::addEllipse")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddEllipse2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

func (ptr *QPainterPath) AddPolygon(polygon QPolygonF_ITF) {
	defer qt.Recovering("QPainterPath::addPolygon")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddPolygon(ptr.Pointer(), PointerFromQPolygonF(polygon))
	}
}

func (ptr *QPainterPath) AddRect2(x float64, y float64, width float64, height float64) {
	defer qt.Recovering("QPainterPath::addRect")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

func (ptr *QPainterPath) AddRegion(region QRegion_ITF) {
	defer qt.Recovering("QPainterPath::addRegion")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddRegion(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QPainterPath) AddRoundedRect(rect core.QRectF_ITF, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	defer qt.Recovering("QPainterPath::addRoundedRect")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddRoundedRect(ptr.Pointer(), core.PointerFromQRectF(rect), C.double(xRadius), C.double(yRadius), C.int(mode))
	}
}

func (ptr *QPainterPath) AddRoundedRect2(x float64, y float64, w float64, h float64, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	defer qt.Recovering("QPainterPath::addRoundedRect")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddRoundedRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), C.double(xRadius), C.double(yRadius), C.int(mode))
	}
}

func (ptr *QPainterPath) AddText2(x float64, y float64, font QFont_ITF, text string) {
	defer qt.Recovering("QPainterPath::addText")

	if ptr.Pointer() != nil {
		C.QPainterPath_AddText2(ptr.Pointer(), C.double(x), C.double(y), PointerFromQFont(font), C.CString(text))
	}
}

func (ptr *QPainterPath) AngleAtPercent(t float64) float64 {
	defer qt.Recovering("QPainterPath::angleAtPercent")

	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_AngleAtPercent(ptr.Pointer(), C.double(t)))
	}
	return 0
}

func (ptr *QPainterPath) ArcMoveTo2(x float64, y float64, width float64, height float64, angle float64) {
	defer qt.Recovering("QPainterPath::arcMoveTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_ArcMoveTo2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height), C.double(angle))
	}
}

func (ptr *QPainterPath) ArcTo2(x float64, y float64, width float64, height float64, startAngle float64, sweepLength float64) {
	defer qt.Recovering("QPainterPath::arcTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_ArcTo2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height), C.double(startAngle), C.double(sweepLength))
	}
}

func (ptr *QPainterPath) BoundingRect() *core.QRectF {
	defer qt.Recovering("QPainterPath::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPainterPath_BoundingRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainterPath) CloseSubpath() {
	defer qt.Recovering("QPainterPath::closeSubpath")

	if ptr.Pointer() != nil {
		C.QPainterPath_CloseSubpath(ptr.Pointer())
	}
}

func (ptr *QPainterPath) Contains3(p QPainterPath_ITF) bool {
	defer qt.Recovering("QPainterPath::contains")

	if ptr.Pointer() != nil {
		return C.QPainterPath_Contains3(ptr.Pointer(), PointerFromQPainterPath(p)) != 0
	}
	return false
}

func (ptr *QPainterPath) ControlPointRect() *core.QRectF {
	defer qt.Recovering("QPainterPath::controlPointRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPainterPath_ControlPointRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainterPath) CubicTo2(c1X float64, c1Y float64, c2X float64, c2Y float64, endPointX float64, endPointY float64) {
	defer qt.Recovering("QPainterPath::cubicTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_CubicTo2(ptr.Pointer(), C.double(c1X), C.double(c1Y), C.double(c2X), C.double(c2Y), C.double(endPointX), C.double(endPointY))
	}
}

func (ptr *QPainterPath) FillRule() core.Qt__FillRule {
	defer qt.Recovering("QPainterPath::fillRule")

	if ptr.Pointer() != nil {
		return core.Qt__FillRule(C.QPainterPath_FillRule(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPath) Intersected(p QPainterPath_ITF) *QPainterPath {
	defer qt.Recovering("QPainterPath::intersected")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPainterPath_Intersected(ptr.Pointer(), PointerFromQPainterPath(p)))
	}
	return nil
}

func (ptr *QPainterPath) Intersects2(p QPainterPath_ITF) bool {
	defer qt.Recovering("QPainterPath::intersects")

	if ptr.Pointer() != nil {
		return C.QPainterPath_Intersects2(ptr.Pointer(), PointerFromQPainterPath(p)) != 0
	}
	return false
}

func (ptr *QPainterPath) Length() float64 {
	defer qt.Recovering("QPainterPath::length")

	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPath) LineTo2(x float64, y float64) {
	defer qt.Recovering("QPainterPath::lineTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_LineTo2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QPainterPath) MoveTo2(x float64, y float64) {
	defer qt.Recovering("QPainterPath::moveTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_MoveTo2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QPainterPath) PercentAtLength(len float64) float64 {
	defer qt.Recovering("QPainterPath::percentAtLength")

	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_PercentAtLength(ptr.Pointer(), C.double(len)))
	}
	return 0
}

func (ptr *QPainterPath) PointAtPercent(t float64) *core.QPointF {
	defer qt.Recovering("QPainterPath::pointAtPercent")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QPainterPath_PointAtPercent(ptr.Pointer(), C.double(t)))
	}
	return nil
}

func (ptr *QPainterPath) QuadTo2(cx float64, cy float64, endPointX float64, endPointY float64) {
	defer qt.Recovering("QPainterPath::quadTo")

	if ptr.Pointer() != nil {
		C.QPainterPath_QuadTo2(ptr.Pointer(), C.double(cx), C.double(cy), C.double(endPointX), C.double(endPointY))
	}
}

func (ptr *QPainterPath) Simplified() *QPainterPath {
	defer qt.Recovering("QPainterPath::simplified")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPainterPath_Simplified(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainterPath) SlopeAtPercent(t float64) float64 {
	defer qt.Recovering("QPainterPath::slopeAtPercent")

	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_SlopeAtPercent(ptr.Pointer(), C.double(t)))
	}
	return 0
}

func (ptr *QPainterPath) Subtracted(p QPainterPath_ITF) *QPainterPath {
	defer qt.Recovering("QPainterPath::subtracted")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPainterPath_Subtracted(ptr.Pointer(), PointerFromQPainterPath(p)))
	}
	return nil
}

func (ptr *QPainterPath) Swap(other QPainterPath_ITF) {
	defer qt.Recovering("QPainterPath::swap")

	if ptr.Pointer() != nil {
		C.QPainterPath_Swap(ptr.Pointer(), PointerFromQPainterPath(other))
	}
}

func (ptr *QPainterPath) ToFillPolygon(matrix QTransform_ITF) *QPolygonF {
	defer qt.Recovering("QPainterPath::toFillPolygon")

	if ptr.Pointer() != nil {
		return NewQPolygonFFromPointer(C.QPainterPath_ToFillPolygon(ptr.Pointer(), PointerFromQTransform(matrix)))
	}
	return nil
}

func (ptr *QPainterPath) ToReversed() *QPainterPath {
	defer qt.Recovering("QPainterPath::toReversed")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPainterPath_ToReversed(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainterPath) Translate2(offset core.QPointF_ITF) {
	defer qt.Recovering("QPainterPath::translate")

	if ptr.Pointer() != nil {
		C.QPainterPath_Translate2(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QPainterPath) Translate(dx float64, dy float64) {
	defer qt.Recovering("QPainterPath::translate")

	if ptr.Pointer() != nil {
		C.QPainterPath_Translate(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QPainterPath) Translated2(offset core.QPointF_ITF) *QPainterPath {
	defer qt.Recovering("QPainterPath::translated")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPainterPath_Translated2(ptr.Pointer(), core.PointerFromQPointF(offset)))
	}
	return nil
}

func (ptr *QPainterPath) Translated(dx float64, dy float64) *QPainterPath {
	defer qt.Recovering("QPainterPath::translated")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPainterPath_Translated(ptr.Pointer(), C.double(dx), C.double(dy)))
	}
	return nil
}

func (ptr *QPainterPath) United(p QPainterPath_ITF) *QPainterPath {
	defer qt.Recovering("QPainterPath::united")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPainterPath_United(ptr.Pointer(), PointerFromQPainterPath(p)))
	}
	return nil
}

func (ptr *QPainterPath) DestroyQPainterPath() {
	defer qt.Recovering("QPainterPath::~QPainterPath")

	if ptr.Pointer() != nil {
		C.QPainterPath_DestroyQPainterPath(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QPainterPathStroker struct {
	ptr unsafe.Pointer
}

type QPainterPathStroker_ITF interface {
	QPainterPathStroker_PTR() *QPainterPathStroker
}

func (p *QPainterPathStroker) QPainterPathStroker_PTR() *QPainterPathStroker {
	return p
}

func (p *QPainterPathStroker) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPainterPathStroker) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPainterPathStroker(ptr QPainterPathStroker_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPainterPathStroker_PTR().Pointer()
	}
	return nil
}

func NewQPainterPathStrokerFromPointer(ptr unsafe.Pointer) *QPainterPathStroker {
	var n = new(QPainterPathStroker)
	n.SetPointer(ptr)
	return n
}

func newQPainterPathStrokerFromPointer(ptr unsafe.Pointer) *QPainterPathStroker {
	var n = NewQPainterPathStrokerFromPointer(ptr)
	return n
}

func NewQPainterPathStroker() *QPainterPathStroker {
	defer qt.Recovering("QPainterPathStroker::QPainterPathStroker")

	return newQPainterPathStrokerFromPointer(C.QPainterPathStroker_NewQPainterPathStroker())
}

func NewQPainterPathStroker2(pen QPen_ITF) *QPainterPathStroker {
	defer qt.Recovering("QPainterPathStroker::QPainterPathStroker")

	return newQPainterPathStrokerFromPointer(C.QPainterPathStroker_NewQPainterPathStroker2(PointerFromQPen(pen)))
}

func (ptr *QPainterPathStroker) CapStyle() core.Qt__PenCapStyle {
	defer qt.Recovering("QPainterPathStroker::capStyle")

	if ptr.Pointer() != nil {
		return core.Qt__PenCapStyle(C.QPainterPathStroker_CapStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) CreateStroke(path QPainterPath_ITF) *QPainterPath {
	defer qt.Recovering("QPainterPathStroker::createStroke")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QPainterPathStroker_CreateStroke(ptr.Pointer(), PointerFromQPainterPath(path)))
	}
	return nil
}

func (ptr *QPainterPathStroker) CurveThreshold() float64 {
	defer qt.Recovering("QPainterPathStroker::curveThreshold")

	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_CurveThreshold(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) DashOffset() float64 {
	defer qt.Recovering("QPainterPathStroker::dashOffset")

	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_DashOffset(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) JoinStyle() core.Qt__PenJoinStyle {
	defer qt.Recovering("QPainterPathStroker::joinStyle")

	if ptr.Pointer() != nil {
		return core.Qt__PenJoinStyle(C.QPainterPathStroker_JoinStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) MiterLimit() float64 {
	defer qt.Recovering("QPainterPathStroker::miterLimit")

	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_MiterLimit(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) SetCapStyle(style core.Qt__PenCapStyle) {
	defer qt.Recovering("QPainterPathStroker::setCapStyle")

	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetCapStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QPainterPathStroker) SetCurveThreshold(threshold float64) {
	defer qt.Recovering("QPainterPathStroker::setCurveThreshold")

	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetCurveThreshold(ptr.Pointer(), C.double(threshold))
	}
}

func (ptr *QPainterPathStroker) SetDashOffset(offset float64) {
	defer qt.Recovering("QPainterPathStroker::setDashOffset")

	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetDashOffset(ptr.Pointer(), C.double(offset))
	}
}

func (ptr *QPainterPathStroker) SetDashPattern(style core.Qt__PenStyle) {
	defer qt.Recovering("QPainterPathStroker::setDashPattern")

	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetDashPattern(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QPainterPathStroker) SetJoinStyle(style core.Qt__PenJoinStyle) {
	defer qt.Recovering("QPainterPathStroker::setJoinStyle")

	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetJoinStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QPainterPathStroker) SetMiterLimit(limit float64) {
	defer qt.Recovering("QPainterPathStroker::setMiterLimit")

	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetMiterLimit(ptr.Pointer(), C.double(limit))
	}
}

func (ptr *QPainterPathStroker) SetWidth(width float64) {
	defer qt.Recovering("QPainterPathStroker::setWidth")

	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QPainterPathStroker) Width() float64 {
	defer qt.Recovering("QPainterPathStroker::width")

	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) DestroyQPainterPathStroker() {
	defer qt.Recovering("QPainterPathStroker::~QPainterPathStroker")

	if ptr.Pointer() != nil {
		C.QPainterPathStroker_DestroyQPainterPathStroker(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QPalette::ColorGroup
type QPalette__ColorGroup int64

const (
	QPalette__Active       = QPalette__ColorGroup(0)
	QPalette__Disabled     = QPalette__ColorGroup(1)
	QPalette__Inactive     = QPalette__ColorGroup(2)
	QPalette__NColorGroups = QPalette__ColorGroup(3)
	QPalette__Current      = QPalette__ColorGroup(4)
	QPalette__All          = QPalette__ColorGroup(5)
	QPalette__Normal       = QPalette__ColorGroup(QPalette__Active)
)

//QPalette::ColorRole
type QPalette__ColorRole int64

var (
	QPalette__WindowText      = QPalette__ColorRole(0)
	QPalette__Button          = QPalette__ColorRole(1)
	QPalette__Light           = QPalette__ColorRole(2)
	QPalette__Midlight        = QPalette__ColorRole(3)
	QPalette__Dark            = QPalette__ColorRole(4)
	QPalette__Mid             = QPalette__ColorRole(5)
	QPalette__Text            = QPalette__ColorRole(6)
	QPalette__BrightText      = QPalette__ColorRole(7)
	QPalette__ButtonText      = QPalette__ColorRole(8)
	QPalette__Base            = QPalette__ColorRole(9)
	QPalette__Window          = QPalette__ColorRole(10)
	QPalette__Shadow          = QPalette__ColorRole(11)
	QPalette__Highlight       = QPalette__ColorRole(12)
	QPalette__HighlightedText = QPalette__ColorRole(13)
	QPalette__Link            = QPalette__ColorRole(14)
	QPalette__LinkVisited     = QPalette__ColorRole(15)
	QPalette__AlternateBase   = QPalette__ColorRole(16)
	QPalette__NoRole          = QPalette__ColorRole(17)
	QPalette__ToolTipBase     = QPalette__ColorRole(18)
	QPalette__ToolTipText     = QPalette__ColorRole(19)
	QPalette__NColorRoles     = QPalette__ColorRole(C.QPalette_NColorRoles_Type())
	QPalette__Foreground      = QPalette__ColorRole(QPalette__WindowText)
	QPalette__Background      = QPalette__ColorRole(QPalette__Window)
)

type QPalette struct {
	ptr unsafe.Pointer
}

type QPalette_ITF interface {
	QPalette_PTR() *QPalette
}

func (p *QPalette) QPalette_PTR() *QPalette {
	return p
}

func (p *QPalette) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPalette) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPalette(ptr QPalette_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPalette_PTR().Pointer()
	}
	return nil
}

func NewQPaletteFromPointer(ptr unsafe.Pointer) *QPalette {
	var n = new(QPalette)
	n.SetPointer(ptr)
	return n
}

func newQPaletteFromPointer(ptr unsafe.Pointer) *QPalette {
	var n = NewQPaletteFromPointer(ptr)
	return n
}

func (ptr *QPalette) Brush(group QPalette__ColorGroup, role QPalette__ColorRole) *QBrush {
	defer qt.Recovering("QPalette::brush")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Brush(ptr.Pointer(), C.int(group), C.int(role)))
	}
	return nil
}

func (ptr *QPalette) IsEqual(cg1 QPalette__ColorGroup, cg2 QPalette__ColorGroup) bool {
	defer qt.Recovering("QPalette::isEqual")

	if ptr.Pointer() != nil {
		return C.QPalette_IsEqual(ptr.Pointer(), C.int(cg1), C.int(cg2)) != 0
	}
	return false
}

func (ptr *QPalette) SetBrush2(group QPalette__ColorGroup, role QPalette__ColorRole, brush QBrush_ITF) {
	defer qt.Recovering("QPalette::setBrush")

	if ptr.Pointer() != nil {
		C.QPalette_SetBrush2(ptr.Pointer(), C.int(group), C.int(role), PointerFromQBrush(brush))
	}
}

func NewQPalette() *QPalette {
	defer qt.Recovering("QPalette::QPalette")

	return newQPaletteFromPointer(C.QPalette_NewQPalette())
}

func NewQPalette8(other QPalette_ITF) *QPalette {
	defer qt.Recovering("QPalette::QPalette")

	return newQPaletteFromPointer(C.QPalette_NewQPalette8(PointerFromQPalette(other)))
}

func NewQPalette3(button core.Qt__GlobalColor) *QPalette {
	defer qt.Recovering("QPalette::QPalette")

	return newQPaletteFromPointer(C.QPalette_NewQPalette3(C.int(button)))
}

func NewQPalette5(windowText QBrush_ITF, button QBrush_ITF, light QBrush_ITF, dark QBrush_ITF, mid QBrush_ITF, text QBrush_ITF, bright_text QBrush_ITF, base QBrush_ITF, window QBrush_ITF) *QPalette {
	defer qt.Recovering("QPalette::QPalette")

	return newQPaletteFromPointer(C.QPalette_NewQPalette5(PointerFromQBrush(windowText), PointerFromQBrush(button), PointerFromQBrush(light), PointerFromQBrush(dark), PointerFromQBrush(mid), PointerFromQBrush(text), PointerFromQBrush(bright_text), PointerFromQBrush(base), PointerFromQBrush(window)))
}

func NewQPalette2(button QColor_ITF) *QPalette {
	defer qt.Recovering("QPalette::QPalette")

	return newQPaletteFromPointer(C.QPalette_NewQPalette2(PointerFromQColor(button)))
}

func NewQPalette4(button QColor_ITF, window QColor_ITF) *QPalette {
	defer qt.Recovering("QPalette::QPalette")

	return newQPaletteFromPointer(C.QPalette_NewQPalette4(PointerFromQColor(button), PointerFromQColor(window)))
}

func NewQPalette7(p QPalette_ITF) *QPalette {
	defer qt.Recovering("QPalette::QPalette")

	return newQPaletteFromPointer(C.QPalette_NewQPalette7(PointerFromQPalette(p)))
}

func (ptr *QPalette) AlternateBase() *QBrush {
	defer qt.Recovering("QPalette::alternateBase")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_AlternateBase(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Base() *QBrush {
	defer qt.Recovering("QPalette::base")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Base(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) BrightText() *QBrush {
	defer qt.Recovering("QPalette::brightText")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_BrightText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Brush2(role QPalette__ColorRole) *QBrush {
	defer qt.Recovering("QPalette::brush")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Brush2(ptr.Pointer(), C.int(role)))
	}
	return nil
}

func (ptr *QPalette) Button() *QBrush {
	defer qt.Recovering("QPalette::button")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Button(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) ButtonText() *QBrush {
	defer qt.Recovering("QPalette::buttonText")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_ButtonText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) CacheKey() int64 {
	defer qt.Recovering("QPalette::cacheKey")

	if ptr.Pointer() != nil {
		return int64(C.QPalette_CacheKey(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPalette) Color(group QPalette__ColorGroup, role QPalette__ColorRole) *QColor {
	defer qt.Recovering("QPalette::color")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QPalette_Color(ptr.Pointer(), C.int(group), C.int(role)))
	}
	return nil
}

func (ptr *QPalette) Color2(role QPalette__ColorRole) *QColor {
	defer qt.Recovering("QPalette::color")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QPalette_Color2(ptr.Pointer(), C.int(role)))
	}
	return nil
}

func (ptr *QPalette) CurrentColorGroup() QPalette__ColorGroup {
	defer qt.Recovering("QPalette::currentColorGroup")

	if ptr.Pointer() != nil {
		return QPalette__ColorGroup(C.QPalette_CurrentColorGroup(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPalette) Dark() *QBrush {
	defer qt.Recovering("QPalette::dark")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Dark(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Highlight() *QBrush {
	defer qt.Recovering("QPalette::highlight")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Highlight(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) HighlightedText() *QBrush {
	defer qt.Recovering("QPalette::highlightedText")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_HighlightedText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) IsBrushSet(cg QPalette__ColorGroup, cr QPalette__ColorRole) bool {
	defer qt.Recovering("QPalette::isBrushSet")

	if ptr.Pointer() != nil {
		return C.QPalette_IsBrushSet(ptr.Pointer(), C.int(cg), C.int(cr)) != 0
	}
	return false
}

func (ptr *QPalette) IsCopyOf(p QPalette_ITF) bool {
	defer qt.Recovering("QPalette::isCopyOf")

	if ptr.Pointer() != nil {
		return C.QPalette_IsCopyOf(ptr.Pointer(), PointerFromQPalette(p)) != 0
	}
	return false
}

func (ptr *QPalette) Light() *QBrush {
	defer qt.Recovering("QPalette::light")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Light(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Link() *QBrush {
	defer qt.Recovering("QPalette::link")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Link(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) LinkVisited() *QBrush {
	defer qt.Recovering("QPalette::linkVisited")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_LinkVisited(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Mid() *QBrush {
	defer qt.Recovering("QPalette::mid")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Mid(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Midlight() *QBrush {
	defer qt.Recovering("QPalette::midlight")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Midlight(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Resolve(other QPalette_ITF) *QPalette {
	defer qt.Recovering("QPalette::resolve")

	if ptr.Pointer() != nil {
		return NewQPaletteFromPointer(C.QPalette_Resolve(ptr.Pointer(), PointerFromQPalette(other)))
	}
	return nil
}

func (ptr *QPalette) SetBrush(role QPalette__ColorRole, brush QBrush_ITF) {
	defer qt.Recovering("QPalette::setBrush")

	if ptr.Pointer() != nil {
		C.QPalette_SetBrush(ptr.Pointer(), C.int(role), PointerFromQBrush(brush))
	}
}

func (ptr *QPalette) SetColor(group QPalette__ColorGroup, role QPalette__ColorRole, color QColor_ITF) {
	defer qt.Recovering("QPalette::setColor")

	if ptr.Pointer() != nil {
		C.QPalette_SetColor(ptr.Pointer(), C.int(group), C.int(role), PointerFromQColor(color))
	}
}

func (ptr *QPalette) SetColor2(role QPalette__ColorRole, color QColor_ITF) {
	defer qt.Recovering("QPalette::setColor")

	if ptr.Pointer() != nil {
		C.QPalette_SetColor2(ptr.Pointer(), C.int(role), PointerFromQColor(color))
	}
}

func (ptr *QPalette) SetColorGroup(cg QPalette__ColorGroup, windowText QBrush_ITF, button QBrush_ITF, light QBrush_ITF, dark QBrush_ITF, mid QBrush_ITF, text QBrush_ITF, bright_text QBrush_ITF, base QBrush_ITF, window QBrush_ITF) {
	defer qt.Recovering("QPalette::setColorGroup")

	if ptr.Pointer() != nil {
		C.QPalette_SetColorGroup(ptr.Pointer(), C.int(cg), PointerFromQBrush(windowText), PointerFromQBrush(button), PointerFromQBrush(light), PointerFromQBrush(dark), PointerFromQBrush(mid), PointerFromQBrush(text), PointerFromQBrush(bright_text), PointerFromQBrush(base), PointerFromQBrush(window))
	}
}

func (ptr *QPalette) SetCurrentColorGroup(cg QPalette__ColorGroup) {
	defer qt.Recovering("QPalette::setCurrentColorGroup")

	if ptr.Pointer() != nil {
		C.QPalette_SetCurrentColorGroup(ptr.Pointer(), C.int(cg))
	}
}

func (ptr *QPalette) Shadow() *QBrush {
	defer qt.Recovering("QPalette::shadow")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Shadow(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Swap(other QPalette_ITF) {
	defer qt.Recovering("QPalette::swap")

	if ptr.Pointer() != nil {
		C.QPalette_Swap(ptr.Pointer(), PointerFromQPalette(other))
	}
}

func (ptr *QPalette) Text() *QBrush {
	defer qt.Recovering("QPalette::text")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Text(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) ToolTipBase() *QBrush {
	defer qt.Recovering("QPalette::toolTipBase")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_ToolTipBase(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) ToolTipText() *QBrush {
	defer qt.Recovering("QPalette::toolTipText")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_ToolTipText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Window() *QBrush {
	defer qt.Recovering("QPalette::window")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Window(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) WindowText() *QBrush {
	defer qt.Recovering("QPalette::windowText")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_WindowText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) DestroyQPalette() {
	defer qt.Recovering("QPalette::~QPalette")

	if ptr.Pointer() != nil {
		C.QPalette_DestroyQPalette(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QPdfWriter struct {
	core.QObject
	QPagedPaintDevice
}

type QPdfWriter_ITF interface {
	core.QObject_ITF
	QPagedPaintDevice_ITF
	QPdfWriter_PTR() *QPdfWriter
}

func (p *QPdfWriter) QPdfWriter_PTR() *QPdfWriter {
	return p
}

func (p *QPdfWriter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QPdfWriter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QPagedPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPdfWriter(ptr QPdfWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPdfWriter_PTR().Pointer()
	}
	return nil
}

func NewQPdfWriterFromPointer(ptr unsafe.Pointer) *QPdfWriter {
	var n = new(QPdfWriter)
	n.SetPointer(ptr)
	return n
}

func newQPdfWriterFromPointer(ptr unsafe.Pointer) *QPdfWriter {
	var n = NewQPdfWriterFromPointer(ptr)
	for len(n.ObjectName()) < len("QPdfWriter_") {
		n.SetObjectName("QPdfWriter_" + qt.Identifier())
	}
	return n
}

func NewQPdfWriter2(device core.QIODevice_ITF) *QPdfWriter {
	defer qt.Recovering("QPdfWriter::QPdfWriter")

	return newQPdfWriterFromPointer(C.QPdfWriter_NewQPdfWriter2(core.PointerFromQIODevice(device)))
}

func NewQPdfWriter(filename string) *QPdfWriter {
	defer qt.Recovering("QPdfWriter::QPdfWriter")

	return newQPdfWriterFromPointer(C.QPdfWriter_NewQPdfWriter(C.CString(filename)))
}

func (ptr *QPdfWriter) Creator() string {
	defer qt.Recovering("QPdfWriter::creator")

	if ptr.Pointer() != nil {
		return C.GoString(C.QPdfWriter_Creator(ptr.Pointer()))
	}
	return ""
}

//export callbackQPdfWriter_NewPage
func callbackQPdfWriter_NewPage(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QPdfWriter::newPage")

	if signal := qt.GetSignal(C.GoString(ptrName), "newPage"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(NewQPdfWriterFromPointer(ptr).NewPageDefault()))
}

func (ptr *QPdfWriter) ConnectNewPage(f func() bool) {
	defer qt.Recovering("connect QPdfWriter::newPage")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "newPage", f)
	}
}

func (ptr *QPdfWriter) DisconnectNewPage() {
	defer qt.Recovering("disconnect QPdfWriter::newPage")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "newPage")
	}
}

func (ptr *QPdfWriter) NewPage() bool {
	defer qt.Recovering("QPdfWriter::newPage")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_NewPage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPdfWriter) NewPageDefault() bool {
	defer qt.Recovering("QPdfWriter::newPage")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_NewPageDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPdfWriter) PageLayout() *QPageLayout {
	defer qt.Recovering("QPdfWriter::pageLayout")

	if ptr.Pointer() != nil {
		return NewQPageLayoutFromPointer(C.QPdfWriter_PageLayout(ptr.Pointer()))
	}
	return nil
}

//export callbackQPdfWriter_PaintEngine
func callbackQPdfWriter_PaintEngine(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPdfWriter::paintEngine")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPdfWriterFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QPdfWriter) ConnectPaintEngine(f func() *QPaintEngine) {
	defer qt.Recovering("connect QPdfWriter::paintEngine")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "paintEngine", f)
	}
}

func (ptr *QPdfWriter) DisconnectPaintEngine() {
	defer qt.Recovering("disconnect QPdfWriter::paintEngine")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "paintEngine")
	}
}

func (ptr *QPdfWriter) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QPdfWriter::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPdfWriter_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPdfWriter) PaintEngineDefault() *QPaintEngine {
	defer qt.Recovering("QPdfWriter::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPdfWriter_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPdfWriter) Resolution() int {
	defer qt.Recovering("QPdfWriter::resolution")

	if ptr.Pointer() != nil {
		return int(C.QPdfWriter_Resolution(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPdfWriter) SetCreator(creator string) {
	defer qt.Recovering("QPdfWriter::setCreator")

	if ptr.Pointer() != nil {
		C.QPdfWriter_SetCreator(ptr.Pointer(), C.CString(creator))
	}
}

func (ptr *QPdfWriter) SetPageLayout(newPageLayout QPageLayout_ITF) bool {
	defer qt.Recovering("QPdfWriter::setPageLayout")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageLayout(ptr.Pointer(), PointerFromQPageLayout(newPageLayout)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetPageMargins(margins core.QMarginsF_ITF) bool {
	defer qt.Recovering("QPdfWriter::setPageMargins")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageMargins(ptr.Pointer(), core.PointerFromQMarginsF(margins)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetPageMargins2(margins core.QMarginsF_ITF, units QPageLayout__Unit) bool {
	defer qt.Recovering("QPdfWriter::setPageMargins")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageMargins2(ptr.Pointer(), core.PointerFromQMarginsF(margins), C.int(units)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetPageOrientation(orientation QPageLayout__Orientation) bool {
	defer qt.Recovering("QPdfWriter::setPageOrientation")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageOrientation(ptr.Pointer(), C.int(orientation)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetPageSize(pageSize QPageSize_ITF) bool {
	defer qt.Recovering("QPdfWriter::setPageSize")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageSize(ptr.Pointer(), PointerFromQPageSize(pageSize)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetResolution(resolution int) {
	defer qt.Recovering("QPdfWriter::setResolution")

	if ptr.Pointer() != nil {
		C.QPdfWriter_SetResolution(ptr.Pointer(), C.int(resolution))
	}
}

func (ptr *QPdfWriter) SetTitle(title string) {
	defer qt.Recovering("QPdfWriter::setTitle")

	if ptr.Pointer() != nil {
		C.QPdfWriter_SetTitle(ptr.Pointer(), C.CString(title))
	}
}

func (ptr *QPdfWriter) Title() string {
	defer qt.Recovering("QPdfWriter::title")

	if ptr.Pointer() != nil {
		return C.GoString(C.QPdfWriter_Title(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPdfWriter) DestroyQPdfWriter() {
	defer qt.Recovering("QPdfWriter::~QPdfWriter")

	if ptr.Pointer() != nil {
		C.QPdfWriter_DestroyQPdfWriter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQPdfWriter_TimerEvent
func callbackQPdfWriter_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QPdfWriter::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQPdfWriterFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QPdfWriter) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QPdfWriter::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QPdfWriter) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QPdfWriter::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QPdfWriter) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QPdfWriter::timerEvent")

	if ptr.Pointer() != nil {
		C.QPdfWriter_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QPdfWriter) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QPdfWriter::timerEvent")

	if ptr.Pointer() != nil {
		C.QPdfWriter_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQPdfWriter_ChildEvent
func callbackQPdfWriter_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QPdfWriter::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQPdfWriterFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QPdfWriter) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QPdfWriter::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QPdfWriter) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QPdfWriter::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QPdfWriter) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QPdfWriter::childEvent")

	if ptr.Pointer() != nil {
		C.QPdfWriter_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QPdfWriter) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QPdfWriter::childEvent")

	if ptr.Pointer() != nil {
		C.QPdfWriter_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQPdfWriter_ConnectNotify
func callbackQPdfWriter_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QPdfWriter::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPdfWriterFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPdfWriter) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QPdfWriter::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QPdfWriter) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QPdfWriter::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QPdfWriter) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QPdfWriter::connectNotify")

	if ptr.Pointer() != nil {
		C.QPdfWriter_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPdfWriter) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QPdfWriter::connectNotify")

	if ptr.Pointer() != nil {
		C.QPdfWriter_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPdfWriter_CustomEvent
func callbackQPdfWriter_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QPdfWriter::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQPdfWriterFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QPdfWriter) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QPdfWriter::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QPdfWriter) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QPdfWriter::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QPdfWriter) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QPdfWriter::customEvent")

	if ptr.Pointer() != nil {
		C.QPdfWriter_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QPdfWriter) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QPdfWriter::customEvent")

	if ptr.Pointer() != nil {
		C.QPdfWriter_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQPdfWriter_DeleteLater
func callbackQPdfWriter_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QPdfWriter::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPdfWriter) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QPdfWriter::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QPdfWriter) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QPdfWriter::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QPdfWriter) DeleteLater() {
	defer qt.Recovering("QPdfWriter::deleteLater")

	if ptr.Pointer() != nil {
		C.QPdfWriter_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQPdfWriter_DisconnectNotify
func callbackQPdfWriter_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QPdfWriter::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPdfWriterFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPdfWriter) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QPdfWriter::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QPdfWriter) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QPdfWriter::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QPdfWriter) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QPdfWriter::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QPdfWriter_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPdfWriter) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QPdfWriter::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QPdfWriter_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPdfWriter_Event
func callbackQPdfWriter_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QPdfWriter::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQPdfWriterFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QPdfWriter) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QPdfWriter::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QPdfWriter) DisconnectEvent() {
	defer qt.Recovering("disconnect QPdfWriter::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QPdfWriter) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QPdfWriter::event")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QPdfWriter) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QPdfWriter::event")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQPdfWriter_EventFilter
func callbackQPdfWriter_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QPdfWriter::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQPdfWriterFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QPdfWriter) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QPdfWriter::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QPdfWriter) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QPdfWriter::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QPdfWriter) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QPdfWriter::eventFilter")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QPdfWriter) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QPdfWriter::eventFilter")

	if ptr.Pointer() != nil {
		return C.QPdfWriter_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQPdfWriter_MetaObject
func callbackQPdfWriter_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPdfWriter::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQPdfWriterFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QPdfWriter) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QPdfWriter::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QPdfWriter) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QPdfWriter::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QPdfWriter) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QPdfWriter::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPdfWriter_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPdfWriter) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QPdfWriter::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPdfWriter_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQPdfWriter_SetPageSize2
func callbackQPdfWriter_SetPageSize2(ptr unsafe.Pointer, ptrName *C.char, size C.int) {
	defer qt.Recovering("callback QPdfWriter::setPageSize")

	if signal := qt.GetSignal(C.GoString(ptrName), "setPageSize2"); signal != nil {
		signal.(func(QPagedPaintDevice__PageSize))(QPagedPaintDevice__PageSize(size))
	} else {
		NewQPdfWriterFromPointer(ptr).SetPageSize2Default(QPagedPaintDevice__PageSize(size))
	}
}

func (ptr *QPdfWriter) ConnectSetPageSize2(f func(size QPagedPaintDevice__PageSize)) {
	defer qt.Recovering("connect QPdfWriter::setPageSize")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setPageSize2", f)
	}
}

func (ptr *QPdfWriter) DisconnectSetPageSize2() {
	defer qt.Recovering("disconnect QPdfWriter::setPageSize")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setPageSize2")
	}
}

func (ptr *QPdfWriter) SetPageSize2(size QPagedPaintDevice__PageSize) {
	defer qt.Recovering("QPdfWriter::setPageSize")

	if ptr.Pointer() != nil {
		C.QPdfWriter_SetPageSize2(ptr.Pointer(), C.int(size))
	}
}

func (ptr *QPdfWriter) SetPageSize2Default(size QPagedPaintDevice__PageSize) {
	defer qt.Recovering("QPdfWriter::setPageSize")

	if ptr.Pointer() != nil {
		C.QPdfWriter_SetPageSize2Default(ptr.Pointer(), C.int(size))
	}
}

//export callbackQPdfWriter_SetPageSizeMM
func callbackQPdfWriter_SetPageSizeMM(ptr unsafe.Pointer, ptrName *C.char, size unsafe.Pointer) {
	defer qt.Recovering("callback QPdfWriter::setPageSizeMM")

	if signal := qt.GetSignal(C.GoString(ptrName), "setPageSizeMM"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(size))
	} else {
		NewQPdfWriterFromPointer(ptr).SetPageSizeMMDefault(core.NewQSizeFFromPointer(size))
	}
}

func (ptr *QPdfWriter) ConnectSetPageSizeMM(f func(size *core.QSizeF)) {
	defer qt.Recovering("connect QPdfWriter::setPageSizeMM")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setPageSizeMM", f)
	}
}

func (ptr *QPdfWriter) DisconnectSetPageSizeMM() {
	defer qt.Recovering("disconnect QPdfWriter::setPageSizeMM")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setPageSizeMM")
	}
}

func (ptr *QPdfWriter) SetPageSizeMM(size core.QSizeF_ITF) {
	defer qt.Recovering("QPdfWriter::setPageSizeMM")

	if ptr.Pointer() != nil {
		C.QPdfWriter_SetPageSizeMM(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QPdfWriter) SetPageSizeMMDefault(size core.QSizeF_ITF) {
	defer qt.Recovering("QPdfWriter::setPageSizeMM")

	if ptr.Pointer() != nil {
		C.QPdfWriter_SetPageSizeMMDefault(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

//export callbackQPdfWriter_Metric
func callbackQPdfWriter_Metric(ptr unsafe.Pointer, ptrName *C.char, metric C.int) C.int {
	defer qt.Recovering("callback QPdfWriter::metric")

	if signal := qt.GetSignal(C.GoString(ptrName), "metric"); signal != nil {
		return C.int(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric)))
	}

	return C.int(NewQPdfWriterFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric)))
}

func (ptr *QPdfWriter) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	defer qt.Recovering("connect QPdfWriter::metric")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metric", f)
	}
}

func (ptr *QPdfWriter) DisconnectMetric() {
	defer qt.Recovering("disconnect QPdfWriter::metric")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metric")
	}
}

func (ptr *QPdfWriter) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPdfWriter::metric")

	if ptr.Pointer() != nil {
		return int(C.QPdfWriter_Metric(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QPdfWriter) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPdfWriter::metric")

	if ptr.Pointer() != nil {
		return int(C.QPdfWriter_MetricDefault(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

type QPen struct {
	ptr unsafe.Pointer
}

type QPen_ITF interface {
	QPen_PTR() *QPen
}

func (p *QPen) QPen_PTR() *QPen {
	return p
}

func (p *QPen) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPen) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPen(ptr QPen_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPen_PTR().Pointer()
	}
	return nil
}

func NewQPenFromPointer(ptr unsafe.Pointer) *QPen {
	var n = new(QPen)
	n.SetPointer(ptr)
	return n
}

func newQPenFromPointer(ptr unsafe.Pointer) *QPen {
	var n = NewQPenFromPointer(ptr)
	return n
}

func NewQPen4(brush QBrush_ITF, width float64, style core.Qt__PenStyle, cap core.Qt__PenCapStyle, join core.Qt__PenJoinStyle) *QPen {
	defer qt.Recovering("QPen::QPen")

	return newQPenFromPointer(C.QPen_NewQPen4(PointerFromQBrush(brush), C.double(width), C.int(style), C.int(cap), C.int(join)))
}

func NewQPen5(pen QPen_ITF) *QPen {
	defer qt.Recovering("QPen::QPen")

	return newQPenFromPointer(C.QPen_NewQPen5(PointerFromQPen(pen)))
}

func (ptr *QPen) Color() *QColor {
	defer qt.Recovering("QPen::color")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QPen_Color(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPen) SetCapStyle(style core.Qt__PenCapStyle) {
	defer qt.Recovering("QPen::setCapStyle")

	if ptr.Pointer() != nil {
		C.QPen_SetCapStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QPen) SetColor(color QColor_ITF) {
	defer qt.Recovering("QPen::setColor")

	if ptr.Pointer() != nil {
		C.QPen_SetColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QPen) SetJoinStyle(style core.Qt__PenJoinStyle) {
	defer qt.Recovering("QPen::setJoinStyle")

	if ptr.Pointer() != nil {
		C.QPen_SetJoinStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QPen) SetStyle(style core.Qt__PenStyle) {
	defer qt.Recovering("QPen::setStyle")

	if ptr.Pointer() != nil {
		C.QPen_SetStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QPen) SetWidth(width int) {
	defer qt.Recovering("QPen::setWidth")

	if ptr.Pointer() != nil {
		C.QPen_SetWidth(ptr.Pointer(), C.int(width))
	}
}

func (ptr *QPen) Style() core.Qt__PenStyle {
	defer qt.Recovering("QPen::style")

	if ptr.Pointer() != nil {
		return core.Qt__PenStyle(C.QPen_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) Width() int {
	defer qt.Recovering("QPen::width")

	if ptr.Pointer() != nil {
		return int(C.QPen_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) WidthF() float64 {
	defer qt.Recovering("QPen::widthF")

	if ptr.Pointer() != nil {
		return float64(C.QPen_WidthF(ptr.Pointer()))
	}
	return 0
}

func NewQPen() *QPen {
	defer qt.Recovering("QPen::QPen")

	return newQPenFromPointer(C.QPen_NewQPen())
}

func NewQPen6(pen QPen_ITF) *QPen {
	defer qt.Recovering("QPen::QPen")

	return newQPenFromPointer(C.QPen_NewQPen6(PointerFromQPen(pen)))
}

func NewQPen2(style core.Qt__PenStyle) *QPen {
	defer qt.Recovering("QPen::QPen")

	return newQPenFromPointer(C.QPen_NewQPen2(C.int(style)))
}

func NewQPen3(color QColor_ITF) *QPen {
	defer qt.Recovering("QPen::QPen")

	return newQPenFromPointer(C.QPen_NewQPen3(PointerFromQColor(color)))
}

func (ptr *QPen) Brush() *QBrush {
	defer qt.Recovering("QPen::brush")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPen_Brush(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPen) CapStyle() core.Qt__PenCapStyle {
	defer qt.Recovering("QPen::capStyle")

	if ptr.Pointer() != nil {
		return core.Qt__PenCapStyle(C.QPen_CapStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) DashOffset() float64 {
	defer qt.Recovering("QPen::dashOffset")

	if ptr.Pointer() != nil {
		return float64(C.QPen_DashOffset(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) IsCosmetic() bool {
	defer qt.Recovering("QPen::isCosmetic")

	if ptr.Pointer() != nil {
		return C.QPen_IsCosmetic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPen) IsSolid() bool {
	defer qt.Recovering("QPen::isSolid")

	if ptr.Pointer() != nil {
		return C.QPen_IsSolid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPen) JoinStyle() core.Qt__PenJoinStyle {
	defer qt.Recovering("QPen::joinStyle")

	if ptr.Pointer() != nil {
		return core.Qt__PenJoinStyle(C.QPen_JoinStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) MiterLimit() float64 {
	defer qt.Recovering("QPen::miterLimit")

	if ptr.Pointer() != nil {
		return float64(C.QPen_MiterLimit(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) SetBrush(brush QBrush_ITF) {
	defer qt.Recovering("QPen::setBrush")

	if ptr.Pointer() != nil {
		C.QPen_SetBrush(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QPen) SetCosmetic(cosmetic bool) {
	defer qt.Recovering("QPen::setCosmetic")

	if ptr.Pointer() != nil {
		C.QPen_SetCosmetic(ptr.Pointer(), C.int(qt.GoBoolToInt(cosmetic)))
	}
}

func (ptr *QPen) SetDashOffset(offset float64) {
	defer qt.Recovering("QPen::setDashOffset")

	if ptr.Pointer() != nil {
		C.QPen_SetDashOffset(ptr.Pointer(), C.double(offset))
	}
}

func (ptr *QPen) SetMiterLimit(limit float64) {
	defer qt.Recovering("QPen::setMiterLimit")

	if ptr.Pointer() != nil {
		C.QPen_SetMiterLimit(ptr.Pointer(), C.double(limit))
	}
}

func (ptr *QPen) SetWidthF(width float64) {
	defer qt.Recovering("QPen::setWidthF")

	if ptr.Pointer() != nil {
		C.QPen_SetWidthF(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QPen) Swap(other QPen_ITF) {
	defer qt.Recovering("QPen::swap")

	if ptr.Pointer() != nil {
		C.QPen_Swap(ptr.Pointer(), PointerFromQPen(other))
	}
}

func (ptr *QPen) DestroyQPen() {
	defer qt.Recovering("QPen::~QPen")

	if ptr.Pointer() != nil {
		C.QPen_DestroyQPen(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QPicture struct {
	QPaintDevice
}

type QPicture_ITF interface {
	QPaintDevice_ITF
	QPicture_PTR() *QPicture
}

func (p *QPicture) QPicture_PTR() *QPicture {
	return p
}

func (p *QPicture) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QPicture) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPicture(ptr QPicture_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPicture_PTR().Pointer()
	}
	return nil
}

func NewQPictureFromPointer(ptr unsafe.Pointer) *QPicture {
	var n = new(QPicture)
	n.SetPointer(ptr)
	return n
}

func newQPictureFromPointer(ptr unsafe.Pointer) *QPicture {
	var n = NewQPictureFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QPicture_") {
		n.SetObjectNameAbs("QPicture_" + qt.Identifier())
	}
	return n
}

func (ptr *QPicture) Data() string {
	defer qt.Recovering("QPicture::data")

	if ptr.Pointer() != nil {
		return C.GoString(C.QPicture_Data(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPicture) IsNull() bool {
	defer qt.Recovering("QPicture::isNull")

	if ptr.Pointer() != nil {
		return C.QPicture_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func NewQPicture2(pic QPicture_ITF) *QPicture {
	defer qt.Recovering("QPicture::QPicture")

	return newQPictureFromPointer(C.QPicture_NewQPicture2(PointerFromQPicture(pic)))
}

func NewQPicture(formatVersion int) *QPicture {
	defer qt.Recovering("QPicture::QPicture")

	return newQPictureFromPointer(C.QPicture_NewQPicture(C.int(formatVersion)))
}

func (ptr *QPicture) BoundingRect() *core.QRect {
	defer qt.Recovering("QPicture::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPicture_BoundingRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPicture) Load2(dev core.QIODevice_ITF, format string) bool {
	defer qt.Recovering("QPicture::load")

	if ptr.Pointer() != nil {
		return C.QPicture_Load2(ptr.Pointer(), core.PointerFromQIODevice(dev), C.CString(format)) != 0
	}
	return false
}

func (ptr *QPicture) Load(fileName string, format string) bool {
	defer qt.Recovering("QPicture::load")

	if ptr.Pointer() != nil {
		return C.QPicture_Load(ptr.Pointer(), C.CString(fileName), C.CString(format)) != 0
	}
	return false
}

func (ptr *QPicture) Play(painter QPainter_ITF) bool {
	defer qt.Recovering("QPicture::play")

	if ptr.Pointer() != nil {
		return C.QPicture_Play(ptr.Pointer(), PointerFromQPainter(painter)) != 0
	}
	return false
}

func (ptr *QPicture) Save2(dev core.QIODevice_ITF, format string) bool {
	defer qt.Recovering("QPicture::save")

	if ptr.Pointer() != nil {
		return C.QPicture_Save2(ptr.Pointer(), core.PointerFromQIODevice(dev), C.CString(format)) != 0
	}
	return false
}

func (ptr *QPicture) Save(fileName string, format string) bool {
	defer qt.Recovering("QPicture::save")

	if ptr.Pointer() != nil {
		return C.QPicture_Save(ptr.Pointer(), C.CString(fileName), C.CString(format)) != 0
	}
	return false
}

func (ptr *QPicture) SetBoundingRect(r core.QRect_ITF) {
	defer qt.Recovering("QPicture::setBoundingRect")

	if ptr.Pointer() != nil {
		C.QPicture_SetBoundingRect(ptr.Pointer(), core.PointerFromQRect(r))
	}
}

func (ptr *QPicture) Swap(other QPicture_ITF) {
	defer qt.Recovering("QPicture::swap")

	if ptr.Pointer() != nil {
		C.QPicture_Swap(ptr.Pointer(), PointerFromQPicture(other))
	}
}

func (ptr *QPicture) DestroyQPicture() {
	defer qt.Recovering("QPicture::~QPicture")

	if ptr.Pointer() != nil {
		C.QPicture_DestroyQPicture(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPicture) ObjectNameAbs() string {
	defer qt.Recovering("QPicture::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QPicture_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPicture) SetObjectNameAbs(name string) {
	defer qt.Recovering("QPicture::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QPicture_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

//export callbackQPicture_Metric
func callbackQPicture_Metric(ptr unsafe.Pointer, ptrName *C.char, metric C.int) C.int {
	defer qt.Recovering("callback QPicture::metric")

	if signal := qt.GetSignal(C.GoString(ptrName), "metric"); signal != nil {
		return C.int(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric)))
	}

	return C.int(NewQPictureFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric)))
}

func (ptr *QPicture) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	defer qt.Recovering("connect QPicture::metric")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "metric", f)
	}
}

func (ptr *QPicture) DisconnectMetric() {
	defer qt.Recovering("disconnect QPicture::metric")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "metric")
	}
}

func (ptr *QPicture) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPicture::metric")

	if ptr.Pointer() != nil {
		return int(C.QPicture_Metric(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QPicture) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPicture::metric")

	if ptr.Pointer() != nil {
		return int(C.QPicture_MetricDefault(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

//export callbackQPicture_PaintEngine
func callbackQPicture_PaintEngine(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPicture::paintEngine")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QPicture) ConnectPaintEngine(f func() *QPaintEngine) {
	defer qt.Recovering("connect QPicture::paintEngine")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "paintEngine", f)
	}
}

func (ptr *QPicture) DisconnectPaintEngine() {
	defer qt.Recovering("disconnect QPicture::paintEngine")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "paintEngine")
	}
}

func (ptr *QPicture) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QPicture::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPicture_PaintEngine(ptr.Pointer()))
	}
	return nil
}

//QPixelFormat::AlphaPosition
type QPixelFormat__AlphaPosition int64

const (
	QPixelFormat__AtBeginning = QPixelFormat__AlphaPosition(0)
	QPixelFormat__AtEnd       = QPixelFormat__AlphaPosition(1)
)

//QPixelFormat::AlphaPremultiplied
type QPixelFormat__AlphaPremultiplied int64

const (
	QPixelFormat__NotPremultiplied = QPixelFormat__AlphaPremultiplied(0)
	QPixelFormat__Premultiplied    = QPixelFormat__AlphaPremultiplied(1)
)

//QPixelFormat::AlphaUsage
type QPixelFormat__AlphaUsage int64

const (
	QPixelFormat__UsesAlpha    = QPixelFormat__AlphaUsage(0)
	QPixelFormat__IgnoresAlpha = QPixelFormat__AlphaUsage(1)
)

//QPixelFormat::ByteOrder
type QPixelFormat__ByteOrder int64

const (
	QPixelFormat__LittleEndian        = QPixelFormat__ByteOrder(0)
	QPixelFormat__BigEndian           = QPixelFormat__ByteOrder(1)
	QPixelFormat__CurrentSystemEndian = QPixelFormat__ByteOrder(2)
)

//QPixelFormat::ColorModel
type QPixelFormat__ColorModel int64

const (
	QPixelFormat__RGB       = QPixelFormat__ColorModel(0)
	QPixelFormat__BGR       = QPixelFormat__ColorModel(1)
	QPixelFormat__Indexed   = QPixelFormat__ColorModel(2)
	QPixelFormat__Grayscale = QPixelFormat__ColorModel(3)
	QPixelFormat__CMYK      = QPixelFormat__ColorModel(4)
	QPixelFormat__HSL       = QPixelFormat__ColorModel(5)
	QPixelFormat__HSV       = QPixelFormat__ColorModel(6)
	QPixelFormat__YUV       = QPixelFormat__ColorModel(7)
	QPixelFormat__Alpha     = QPixelFormat__ColorModel(8)
)

//QPixelFormat::TypeInterpretation
type QPixelFormat__TypeInterpretation int64

const (
	QPixelFormat__UnsignedInteger = QPixelFormat__TypeInterpretation(0)
	QPixelFormat__UnsignedShort   = QPixelFormat__TypeInterpretation(1)
	QPixelFormat__UnsignedByte    = QPixelFormat__TypeInterpretation(2)
	QPixelFormat__FloatingPoint   = QPixelFormat__TypeInterpretation(3)
)

//QPixelFormat::YUVLayout
type QPixelFormat__YUVLayout int64

const (
	QPixelFormat__YUV444   = QPixelFormat__YUVLayout(0)
	QPixelFormat__YUV422   = QPixelFormat__YUVLayout(1)
	QPixelFormat__YUV411   = QPixelFormat__YUVLayout(2)
	QPixelFormat__YUV420P  = QPixelFormat__YUVLayout(3)
	QPixelFormat__YUV420SP = QPixelFormat__YUVLayout(4)
	QPixelFormat__YV12     = QPixelFormat__YUVLayout(5)
	QPixelFormat__UYVY     = QPixelFormat__YUVLayout(6)
	QPixelFormat__YUYV     = QPixelFormat__YUVLayout(7)
	QPixelFormat__NV12     = QPixelFormat__YUVLayout(8)
	QPixelFormat__NV21     = QPixelFormat__YUVLayout(9)
	QPixelFormat__IMC1     = QPixelFormat__YUVLayout(10)
	QPixelFormat__IMC2     = QPixelFormat__YUVLayout(11)
	QPixelFormat__IMC3     = QPixelFormat__YUVLayout(12)
	QPixelFormat__IMC4     = QPixelFormat__YUVLayout(13)
	QPixelFormat__Y8       = QPixelFormat__YUVLayout(14)
	QPixelFormat__Y16      = QPixelFormat__YUVLayout(15)
)

type QPixelFormat struct {
	ptr unsafe.Pointer
}

type QPixelFormat_ITF interface {
	QPixelFormat_PTR() *QPixelFormat
}

func (p *QPixelFormat) QPixelFormat_PTR() *QPixelFormat {
	return p
}

func (p *QPixelFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPixelFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPixelFormat(ptr QPixelFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixelFormat_PTR().Pointer()
	}
	return nil
}

func NewQPixelFormatFromPointer(ptr unsafe.Pointer) *QPixelFormat {
	var n = new(QPixelFormat)
	n.SetPointer(ptr)
	return n
}

func newQPixelFormatFromPointer(ptr unsafe.Pointer) *QPixelFormat {
	var n = NewQPixelFormatFromPointer(ptr)
	return n
}

func NewQPixelFormat() *QPixelFormat {
	defer qt.Recovering("QPixelFormat::QPixelFormat")

	return newQPixelFormatFromPointer(C.QPixelFormat_NewQPixelFormat())
}

func (ptr *QPixelFormat) AlphaPosition() QPixelFormat__AlphaPosition {
	defer qt.Recovering("QPixelFormat::alphaPosition")

	if ptr.Pointer() != nil {
		return QPixelFormat__AlphaPosition(C.QPixelFormat_AlphaPosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) AlphaUsage() QPixelFormat__AlphaUsage {
	defer qt.Recovering("QPixelFormat::alphaUsage")

	if ptr.Pointer() != nil {
		return QPixelFormat__AlphaUsage(C.QPixelFormat_AlphaUsage(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) ByteOrder() QPixelFormat__ByteOrder {
	defer qt.Recovering("QPixelFormat::byteOrder")

	if ptr.Pointer() != nil {
		return QPixelFormat__ByteOrder(C.QPixelFormat_ByteOrder(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) ColorModel() QPixelFormat__ColorModel {
	defer qt.Recovering("QPixelFormat::colorModel")

	if ptr.Pointer() != nil {
		return QPixelFormat__ColorModel(C.QPixelFormat_ColorModel(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) Premultiplied() QPixelFormat__AlphaPremultiplied {
	defer qt.Recovering("QPixelFormat::premultiplied")

	if ptr.Pointer() != nil {
		return QPixelFormat__AlphaPremultiplied(C.QPixelFormat_Premultiplied(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) TypeInterpretation() QPixelFormat__TypeInterpretation {
	defer qt.Recovering("QPixelFormat::typeInterpretation")

	if ptr.Pointer() != nil {
		return QPixelFormat__TypeInterpretation(C.QPixelFormat_TypeInterpretation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) YuvLayout() QPixelFormat__YUVLayout {
	defer qt.Recovering("QPixelFormat::yuvLayout")

	if ptr.Pointer() != nil {
		return QPixelFormat__YUVLayout(C.QPixelFormat_YuvLayout(ptr.Pointer()))
	}
	return 0
}

type QPixmap struct {
	QPaintDevice
}

type QPixmap_ITF interface {
	QPaintDevice_ITF
	QPixmap_PTR() *QPixmap
}

func (p *QPixmap) QPixmap_PTR() *QPixmap {
	return p
}

func (p *QPixmap) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QPixmap) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPixmap(ptr QPixmap_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixmap_PTR().Pointer()
	}
	return nil
}

func NewQPixmapFromPointer(ptr unsafe.Pointer) *QPixmap {
	var n = new(QPixmap)
	n.SetPointer(ptr)
	return n
}

func newQPixmapFromPointer(ptr unsafe.Pointer) *QPixmap {
	var n = NewQPixmapFromPointer(ptr)
	return n
}

func NewQPixmap3(width int, height int) *QPixmap {
	defer qt.Recovering("QPixmap::QPixmap")

	return newQPixmapFromPointer(C.QPixmap_NewQPixmap3(C.int(width), C.int(height)))
}

func (ptr *QPixmap) Copy(rectangle core.QRect_ITF) *QPixmap {
	defer qt.Recovering("QPixmap::copy")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QPixmap_Copy(ptr.Pointer(), core.PointerFromQRect(rectangle)))
	}
	return nil
}

func (ptr *QPixmap) Depth() int {
	defer qt.Recovering("QPixmap::depth")

	if ptr.Pointer() != nil {
		return int(C.QPixmap_Depth(ptr.Pointer()))
	}
	return 0
}

func QPixmap_FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	defer qt.Recovering("QPixmap::fromImage")

	return NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage(PointerFromQImage(image), C.int(flags)))
}

func (ptr *QPixmap) FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	defer qt.Recovering("QPixmap::fromImage")

	return NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage(PointerFromQImage(image), C.int(flags)))
}

func QPixmap_FromImageReader(imageReader QImageReader_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	defer qt.Recovering("QPixmap::fromImageReader")

	return NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImageReader(PointerFromQImageReader(imageReader), C.int(flags)))
}

func (ptr *QPixmap) FromImageReader(imageReader QImageReader_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	defer qt.Recovering("QPixmap::fromImageReader")

	return NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImageReader(PointerFromQImageReader(imageReader), C.int(flags)))
}

func (ptr *QPixmap) Height() int {
	defer qt.Recovering("QPixmap::height")

	if ptr.Pointer() != nil {
		return int(C.QPixmap_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixmap) IsNull() bool {
	defer qt.Recovering("QPixmap::isNull")

	if ptr.Pointer() != nil {
		return C.QPixmap_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) IsQBitmap() bool {
	defer qt.Recovering("QPixmap::isQBitmap")

	if ptr.Pointer() != nil {
		return C.QPixmap_IsQBitmap(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) Rect() *core.QRect {
	defer qt.Recovering("QPixmap::rect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPixmap_Rect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPixmap) Scaled(size core.QSize_ITF, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QPixmap {
	defer qt.Recovering("QPixmap::scaled")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QPixmap_Scaled(ptr.Pointer(), core.PointerFromQSize(size), C.int(aspectRatioMode), C.int(transformMode)))
	}
	return nil
}

func (ptr *QPixmap) ScaledToHeight(height int, mode core.Qt__TransformationMode) *QPixmap {
	defer qt.Recovering("QPixmap::scaledToHeight")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QPixmap_ScaledToHeight(ptr.Pointer(), C.int(height), C.int(mode)))
	}
	return nil
}

func (ptr *QPixmap) ScaledToWidth(width int, mode core.Qt__TransformationMode) *QPixmap {
	defer qt.Recovering("QPixmap::scaledToWidth")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QPixmap_ScaledToWidth(ptr.Pointer(), C.int(width), C.int(mode)))
	}
	return nil
}

func (ptr *QPixmap) Size() *core.QSize {
	defer qt.Recovering("QPixmap::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QPixmap_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPixmap) Width() int {
	defer qt.Recovering("QPixmap::width")

	if ptr.Pointer() != nil {
		return int(C.QPixmap_Width(ptr.Pointer()))
	}
	return 0
}

func NewQPixmap() *QPixmap {
	defer qt.Recovering("QPixmap::QPixmap")

	return newQPixmapFromPointer(C.QPixmap_NewQPixmap())
}

func NewQPixmap6(pixmap QPixmap_ITF) *QPixmap {
	defer qt.Recovering("QPixmap::QPixmap")

	return newQPixmapFromPointer(C.QPixmap_NewQPixmap6(PointerFromQPixmap(pixmap)))
}

func NewQPixmap8(size core.QSize_ITF) *QPixmap {
	defer qt.Recovering("QPixmap::QPixmap")

	return newQPixmapFromPointer(C.QPixmap_NewQPixmap8(core.PointerFromQSize(size)))
}

func NewQPixmap4(fileName string, format string, flags core.Qt__ImageConversionFlag) *QPixmap {
	defer qt.Recovering("QPixmap::QPixmap")

	return newQPixmapFromPointer(C.QPixmap_NewQPixmap4(C.CString(fileName), C.CString(format), C.int(flags)))
}

func (ptr *QPixmap) CacheKey() int64 {
	defer qt.Recovering("QPixmap::cacheKey")

	if ptr.Pointer() != nil {
		return int64(C.QPixmap_CacheKey(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixmap) ConvertFromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) bool {
	defer qt.Recovering("QPixmap::convertFromImage")

	if ptr.Pointer() != nil {
		return C.QPixmap_ConvertFromImage(ptr.Pointer(), PointerFromQImage(image), C.int(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) Copy2(x int, y int, width int, height int) *QPixmap {
	defer qt.Recovering("QPixmap::copy")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QPixmap_Copy2(ptr.Pointer(), C.int(x), C.int(y), C.int(width), C.int(height)))
	}
	return nil
}

func QPixmap_DefaultDepth() int {
	defer qt.Recovering("QPixmap::defaultDepth")

	return int(C.QPixmap_QPixmap_DefaultDepth())
}

func (ptr *QPixmap) DefaultDepth() int {
	defer qt.Recovering("QPixmap::defaultDepth")

	return int(C.QPixmap_QPixmap_DefaultDepth())
}

func (ptr *QPixmap) Detach() {
	defer qt.Recovering("QPixmap::detach")

	if ptr.Pointer() != nil {
		C.QPixmap_Detach(ptr.Pointer())
	}
}

func (ptr *QPixmap) DevicePixelRatio() float64 {
	defer qt.Recovering("QPixmap::devicePixelRatio")

	if ptr.Pointer() != nil {
		return float64(C.QPixmap_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixmap) Fill(color QColor_ITF) {
	defer qt.Recovering("QPixmap::fill")

	if ptr.Pointer() != nil {
		C.QPixmap_Fill(ptr.Pointer(), PointerFromQColor(color))
	}
}

func QPixmap_FromImage2(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	defer qt.Recovering("QPixmap::fromImage")

	return NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage2(PointerFromQImage(image), C.int(flags)))
}

func (ptr *QPixmap) FromImage2(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	defer qt.Recovering("QPixmap::fromImage")

	return NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage2(PointerFromQImage(image), C.int(flags)))
}

func (ptr *QPixmap) HasAlpha() bool {
	defer qt.Recovering("QPixmap::hasAlpha")

	if ptr.Pointer() != nil {
		return C.QPixmap_HasAlpha(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) HasAlphaChannel() bool {
	defer qt.Recovering("QPixmap::hasAlphaChannel")

	if ptr.Pointer() != nil {
		return C.QPixmap_HasAlphaChannel(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) Load(fileName string, format string, flags core.Qt__ImageConversionFlag) bool {
	defer qt.Recovering("QPixmap::load")

	if ptr.Pointer() != nil {
		return C.QPixmap_Load(ptr.Pointer(), C.CString(fileName), C.CString(format), C.int(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) LoadFromData2(data string, format string, flags core.Qt__ImageConversionFlag) bool {
	defer qt.Recovering("QPixmap::loadFromData")

	if ptr.Pointer() != nil {
		return C.QPixmap_LoadFromData2(ptr.Pointer(), C.CString(data), C.CString(format), C.int(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) Save2(device core.QIODevice_ITF, format string, quality int) bool {
	defer qt.Recovering("QPixmap::save")

	if ptr.Pointer() != nil {
		return C.QPixmap_Save2(ptr.Pointer(), core.PointerFromQIODevice(device), C.CString(format), C.int(quality)) != 0
	}
	return false
}

func (ptr *QPixmap) Save(fileName string, format string, quality int) bool {
	defer qt.Recovering("QPixmap::save")

	if ptr.Pointer() != nil {
		return C.QPixmap_Save(ptr.Pointer(), C.CString(fileName), C.CString(format), C.int(quality)) != 0
	}
	return false
}

func (ptr *QPixmap) Scaled2(width int, height int, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QPixmap {
	defer qt.Recovering("QPixmap::scaled")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QPixmap_Scaled2(ptr.Pointer(), C.int(width), C.int(height), C.int(aspectRatioMode), C.int(transformMode)))
	}
	return nil
}

func (ptr *QPixmap) Scroll2(dx int, dy int, rect core.QRect_ITF, exposed QRegion_ITF) {
	defer qt.Recovering("QPixmap::scroll")

	if ptr.Pointer() != nil {
		C.QPixmap_Scroll2(ptr.Pointer(), C.int(dx), C.int(dy), core.PointerFromQRect(rect), PointerFromQRegion(exposed))
	}
}

func (ptr *QPixmap) Scroll(dx int, dy int, x int, y int, width int, height int, exposed QRegion_ITF) {
	defer qt.Recovering("QPixmap::scroll")

	if ptr.Pointer() != nil {
		C.QPixmap_Scroll(ptr.Pointer(), C.int(dx), C.int(dy), C.int(x), C.int(y), C.int(width), C.int(height), PointerFromQRegion(exposed))
	}
}

func (ptr *QPixmap) SetDevicePixelRatio(scaleFactor float64) {
	defer qt.Recovering("QPixmap::setDevicePixelRatio")

	if ptr.Pointer() != nil {
		C.QPixmap_SetDevicePixelRatio(ptr.Pointer(), C.double(scaleFactor))
	}
}

func (ptr *QPixmap) SetMask(mask QBitmap_ITF) {
	defer qt.Recovering("QPixmap::setMask")

	if ptr.Pointer() != nil {
		C.QPixmap_SetMask(ptr.Pointer(), PointerFromQBitmap(mask))
	}
}

func (ptr *QPixmap) Swap(other QPixmap_ITF) {
	defer qt.Recovering("QPixmap::swap")

	if ptr.Pointer() != nil {
		C.QPixmap_Swap(ptr.Pointer(), PointerFromQPixmap(other))
	}
}

func (ptr *QPixmap) ToImage() *QImage {
	defer qt.Recovering("QPixmap::toImage")

	if ptr.Pointer() != nil {
		return NewQImageFromPointer(C.QPixmap_ToImage(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPixmap) Transformed(transform QTransform_ITF, mode core.Qt__TransformationMode) *QPixmap {
	defer qt.Recovering("QPixmap::transformed")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QPixmap_Transformed(ptr.Pointer(), PointerFromQTransform(transform), C.int(mode)))
	}
	return nil
}

func (ptr *QPixmap) DestroyQPixmap() {
	defer qt.Recovering("QPixmap::~QPixmap")

	if ptr.Pointer() != nil {
		C.QPixmap_DestroyQPixmap(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQPixmap_Metric
func callbackQPixmap_Metric(ptr unsafe.Pointer, ptrName *C.char, metric C.int) C.int {
	defer qt.Recovering("callback QPixmap::metric")

	if signal := qt.GetSignal(C.GoString(ptrName), "metric"); signal != nil {
		return C.int(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric)))
	}

	return C.int(NewQPixmapFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric)))
}

func (ptr *QPixmap) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	defer qt.Recovering("connect QPixmap::metric")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "metric", f)
	}
}

func (ptr *QPixmap) DisconnectMetric() {
	defer qt.Recovering("disconnect QPixmap::metric")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "metric")
	}
}

func (ptr *QPixmap) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPixmap::metric")

	if ptr.Pointer() != nil {
		return int(C.QPixmap_Metric(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QPixmap) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QPixmap::metric")

	if ptr.Pointer() != nil {
		return int(C.QPixmap_MetricDefault(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

//export callbackQPixmap_PaintEngine
func callbackQPixmap_PaintEngine(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QPixmap::paintEngine")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QPixmap) ConnectPaintEngine(f func() *QPaintEngine) {
	defer qt.Recovering("connect QPixmap::paintEngine")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "paintEngine", f)
	}
}

func (ptr *QPixmap) DisconnectPaintEngine() {
	defer qt.Recovering("disconnect QPixmap::paintEngine")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "paintEngine")
	}
}

func (ptr *QPixmap) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QPixmap::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPixmap_PaintEngine(ptr.Pointer()))
	}
	return nil
}

type QPixmapCache struct {
	ptr unsafe.Pointer
}

type QPixmapCache_ITF interface {
	QPixmapCache_PTR() *QPixmapCache
}

func (p *QPixmapCache) QPixmapCache_PTR() *QPixmapCache {
	return p
}

func (p *QPixmapCache) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPixmapCache) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPixmapCache(ptr QPixmapCache_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixmapCache_PTR().Pointer()
	}
	return nil
}

func NewQPixmapCacheFromPointer(ptr unsafe.Pointer) *QPixmapCache {
	var n = new(QPixmapCache)
	n.SetPointer(ptr)
	return n
}

func newQPixmapCacheFromPointer(ptr unsafe.Pointer) *QPixmapCache {
	var n = NewQPixmapCacheFromPointer(ptr)
	return n
}

func QPixmapCache_CacheLimit() int {
	defer qt.Recovering("QPixmapCache::cacheLimit")

	return int(C.QPixmapCache_QPixmapCache_CacheLimit())
}

func (ptr *QPixmapCache) CacheLimit() int {
	defer qt.Recovering("QPixmapCache::cacheLimit")

	return int(C.QPixmapCache_QPixmapCache_CacheLimit())
}

func QPixmapCache_Clear() {
	defer qt.Recovering("QPixmapCache::clear")

	C.QPixmapCache_QPixmapCache_Clear()
}

func (ptr *QPixmapCache) Clear() {
	defer qt.Recovering("QPixmapCache::clear")

	C.QPixmapCache_QPixmapCache_Clear()
}

func QPixmapCache_Find(key string, pixmap QPixmap_ITF) bool {
	defer qt.Recovering("QPixmapCache::find")

	return C.QPixmapCache_QPixmapCache_Find(C.CString(key), PointerFromQPixmap(pixmap)) != 0
}

func (ptr *QPixmapCache) Find(key string, pixmap QPixmap_ITF) bool {
	defer qt.Recovering("QPixmapCache::find")

	return C.QPixmapCache_QPixmapCache_Find(C.CString(key), PointerFromQPixmap(pixmap)) != 0
}

func QPixmapCache_Insert(key string, pixmap QPixmap_ITF) bool {
	defer qt.Recovering("QPixmapCache::insert")

	return C.QPixmapCache_QPixmapCache_Insert(C.CString(key), PointerFromQPixmap(pixmap)) != 0
}

func (ptr *QPixmapCache) Insert(key string, pixmap QPixmap_ITF) bool {
	defer qt.Recovering("QPixmapCache::insert")

	return C.QPixmapCache_QPixmapCache_Insert(C.CString(key), PointerFromQPixmap(pixmap)) != 0
}

func QPixmapCache_Remove(key string) {
	defer qt.Recovering("QPixmapCache::remove")

	C.QPixmapCache_QPixmapCache_Remove(C.CString(key))
}

func (ptr *QPixmapCache) Remove(key string) {
	defer qt.Recovering("QPixmapCache::remove")

	C.QPixmapCache_QPixmapCache_Remove(C.CString(key))
}

func QPixmapCache_SetCacheLimit(n int) {
	defer qt.Recovering("QPixmapCache::setCacheLimit")

	C.QPixmapCache_QPixmapCache_SetCacheLimit(C.int(n))
}

func (ptr *QPixmapCache) SetCacheLimit(n int) {
	defer qt.Recovering("QPixmapCache::setCacheLimit")

	C.QPixmapCache_QPixmapCache_SetCacheLimit(C.int(n))
}

//QPlatformGraphicsBuffer::AccessType
type QPlatformGraphicsBuffer__AccessType int64

const (
	QPlatformGraphicsBuffer__None          = QPlatformGraphicsBuffer__AccessType(0x00)
	QPlatformGraphicsBuffer__SWReadAccess  = QPlatformGraphicsBuffer__AccessType(0x01)
	QPlatformGraphicsBuffer__SWWriteAccess = QPlatformGraphicsBuffer__AccessType(0x02)
	QPlatformGraphicsBuffer__TextureAccess = QPlatformGraphicsBuffer__AccessType(0x04)
	QPlatformGraphicsBuffer__HWCompositor  = QPlatformGraphicsBuffer__AccessType(0x08)
)

//QPlatformGraphicsBuffer::Origin
type QPlatformGraphicsBuffer__Origin int64

const (
	QPlatformGraphicsBuffer__OriginBottomLeft = QPlatformGraphicsBuffer__Origin(0)
	QPlatformGraphicsBuffer__OriginTopLeft    = QPlatformGraphicsBuffer__Origin(1)
)

type QPlatformGraphicsBuffer struct {
	core.QObject
}

type QPlatformGraphicsBuffer_ITF interface {
	core.QObject_ITF
	QPlatformGraphicsBuffer_PTR() *QPlatformGraphicsBuffer
}

func (p *QPlatformGraphicsBuffer) QPlatformGraphicsBuffer_PTR() *QPlatformGraphicsBuffer {
	return p
}

func (p *QPlatformGraphicsBuffer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QPlatformGraphicsBuffer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQPlatformGraphicsBuffer(ptr QPlatformGraphicsBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPlatformGraphicsBuffer_PTR().Pointer()
	}
	return nil
}

func NewQPlatformGraphicsBufferFromPointer(ptr unsafe.Pointer) *QPlatformGraphicsBuffer {
	var n = new(QPlatformGraphicsBuffer)
	n.SetPointer(ptr)
	return n
}

func newQPlatformGraphicsBufferFromPointer(ptr unsafe.Pointer) *QPlatformGraphicsBuffer {
	var n = NewQPlatformGraphicsBufferFromPointer(ptr)
	return n
}

//QPlatformSurfaceEvent::SurfaceEventType
type QPlatformSurfaceEvent__SurfaceEventType int64

const (
	QPlatformSurfaceEvent__SurfaceCreated            = QPlatformSurfaceEvent__SurfaceEventType(0)
	QPlatformSurfaceEvent__SurfaceAboutToBeDestroyed = QPlatformSurfaceEvent__SurfaceEventType(1)
)

type QPlatformSurfaceEvent struct {
	core.QEvent
}

type QPlatformSurfaceEvent_ITF interface {
	core.QEvent_ITF
	QPlatformSurfaceEvent_PTR() *QPlatformSurfaceEvent
}

func (p *QPlatformSurfaceEvent) QPlatformSurfaceEvent_PTR() *QPlatformSurfaceEvent {
	return p
}

func (p *QPlatformSurfaceEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QPlatformSurfaceEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQPlatformSurfaceEvent(ptr QPlatformSurfaceEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPlatformSurfaceEvent_PTR().Pointer()
	}
	return nil
}

func NewQPlatformSurfaceEventFromPointer(ptr unsafe.Pointer) *QPlatformSurfaceEvent {
	var n = new(QPlatformSurfaceEvent)
	n.SetPointer(ptr)
	return n
}

func newQPlatformSurfaceEventFromPointer(ptr unsafe.Pointer) *QPlatformSurfaceEvent {
	var n = NewQPlatformSurfaceEventFromPointer(ptr)
	return n
}

func NewQPlatformSurfaceEvent(surfaceEventType QPlatformSurfaceEvent__SurfaceEventType) *QPlatformSurfaceEvent {
	defer qt.Recovering("QPlatformSurfaceEvent::QPlatformSurfaceEvent")

	return newQPlatformSurfaceEventFromPointer(C.QPlatformSurfaceEvent_NewQPlatformSurfaceEvent(C.int(surfaceEventType)))
}

func (ptr *QPlatformSurfaceEvent) SurfaceEventType() QPlatformSurfaceEvent__SurfaceEventType {
	defer qt.Recovering("QPlatformSurfaceEvent::surfaceEventType")

	if ptr.Pointer() != nil {
		return QPlatformSurfaceEvent__SurfaceEventType(C.QPlatformSurfaceEvent_SurfaceEventType(ptr.Pointer()))
	}
	return 0
}

//QPlatformSystemTrayIcon::ActivationReason
type QPlatformSystemTrayIcon__ActivationReason int64

const (
	QPlatformSystemTrayIcon__Unknown     = QPlatformSystemTrayIcon__ActivationReason(0)
	QPlatformSystemTrayIcon__Context     = QPlatformSystemTrayIcon__ActivationReason(1)
	QPlatformSystemTrayIcon__DoubleClick = QPlatformSystemTrayIcon__ActivationReason(2)
	QPlatformSystemTrayIcon__Trigger     = QPlatformSystemTrayIcon__ActivationReason(3)
	QPlatformSystemTrayIcon__MiddleClick = QPlatformSystemTrayIcon__ActivationReason(4)
)

//QPlatformSystemTrayIcon::MessageIcon
type QPlatformSystemTrayIcon__MessageIcon int64

const (
	QPlatformSystemTrayIcon__NoIcon      = QPlatformSystemTrayIcon__MessageIcon(0)
	QPlatformSystemTrayIcon__Information = QPlatformSystemTrayIcon__MessageIcon(1)
	QPlatformSystemTrayIcon__Warning     = QPlatformSystemTrayIcon__MessageIcon(2)
	QPlatformSystemTrayIcon__Critical    = QPlatformSystemTrayIcon__MessageIcon(3)
)

type QPlatformSystemTrayIcon struct {
	core.QObject
}

type QPlatformSystemTrayIcon_ITF interface {
	core.QObject_ITF
	QPlatformSystemTrayIcon_PTR() *QPlatformSystemTrayIcon
}

func (p *QPlatformSystemTrayIcon) QPlatformSystemTrayIcon_PTR() *QPlatformSystemTrayIcon {
	return p
}

func (p *QPlatformSystemTrayIcon) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QPlatformSystemTrayIcon) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQPlatformSystemTrayIcon(ptr QPlatformSystemTrayIcon_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPlatformSystemTrayIcon_PTR().Pointer()
	}
	return nil
}

func NewQPlatformSystemTrayIconFromPointer(ptr unsafe.Pointer) *QPlatformSystemTrayIcon {
	var n = new(QPlatformSystemTrayIcon)
	n.SetPointer(ptr)
	return n
}

func newQPlatformSystemTrayIconFromPointer(ptr unsafe.Pointer) *QPlatformSystemTrayIcon {
	var n = NewQPlatformSystemTrayIconFromPointer(ptr)
	return n
}

type QPolygon struct {
	core.QVector
}

type QPolygon_ITF interface {
	core.QVector_ITF
	QPolygon_PTR() *QPolygon
}

func (p *QPolygon) QPolygon_PTR() *QPolygon {
	return p
}

func (p *QPolygon) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QVector_PTR().Pointer()
	}
	return nil
}

func (p *QPolygon) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QVector_PTR().SetPointer(ptr)
	}
}

func PointerFromQPolygon(ptr QPolygon_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPolygon_PTR().Pointer()
	}
	return nil
}

func NewQPolygonFromPointer(ptr unsafe.Pointer) *QPolygon {
	var n = new(QPolygon)
	n.SetPointer(ptr)
	return n
}

func newQPolygonFromPointer(ptr unsafe.Pointer) *QPolygon {
	var n = NewQPolygonFromPointer(ptr)
	return n
}

func NewQPolygon5(rectangle core.QRect_ITF, closed bool) *QPolygon {
	defer qt.Recovering("QPolygon::QPolygon")

	return newQPolygonFromPointer(C.QPolygon_NewQPolygon5(core.PointerFromQRect(rectangle), C.int(qt.GoBoolToInt(closed))))
}

func (ptr *QPolygon) ContainsPoint(point core.QPoint_ITF, fillRule core.Qt__FillRule) bool {
	defer qt.Recovering("QPolygon::containsPoint")

	if ptr.Pointer() != nil {
		return C.QPolygon_ContainsPoint(ptr.Pointer(), core.PointerFromQPoint(point), C.int(fillRule)) != 0
	}
	return false
}

func (ptr *QPolygon) PutPoints3(index int, nPoints int, fromPolygon QPolygon_ITF, fromIndex int) {
	defer qt.Recovering("QPolygon::putPoints")

	if ptr.Pointer() != nil {
		C.QPolygon_PutPoints3(ptr.Pointer(), C.int(index), C.int(nPoints), PointerFromQPolygon(fromPolygon), C.int(fromIndex))
	}
}

func NewQPolygon() *QPolygon {
	defer qt.Recovering("QPolygon::QPolygon")

	return newQPolygonFromPointer(C.QPolygon_NewQPolygon())
}

func NewQPolygon3(polygon QPolygon_ITF) *QPolygon {
	defer qt.Recovering("QPolygon::QPolygon")

	return newQPolygonFromPointer(C.QPolygon_NewQPolygon3(PointerFromQPolygon(polygon)))
}

func NewQPolygon2(size int) *QPolygon {
	defer qt.Recovering("QPolygon::QPolygon")

	return newQPolygonFromPointer(C.QPolygon_NewQPolygon2(C.int(size)))
}

func (ptr *QPolygon) BoundingRect() *core.QRect {
	defer qt.Recovering("QPolygon::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPolygon_BoundingRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPolygon) Intersected(r QPolygon_ITF) *QPolygon {
	defer qt.Recovering("QPolygon::intersected")

	if ptr.Pointer() != nil {
		return NewQPolygonFromPointer(C.QPolygon_Intersected(ptr.Pointer(), PointerFromQPolygon(r)))
	}
	return nil
}

func (ptr *QPolygon) Point2(index int) *core.QPoint {
	defer qt.Recovering("QPolygon::point")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QPolygon_Point2(ptr.Pointer(), C.int(index)))
	}
	return nil
}

func (ptr *QPolygon) Point(index int, x int, y int) {
	defer qt.Recovering("QPolygon::point")

	if ptr.Pointer() != nil {
		C.QPolygon_Point(ptr.Pointer(), C.int(index), C.int(x), C.int(y))
	}
}

func (ptr *QPolygon) SetPoint2(index int, point core.QPoint_ITF) {
	defer qt.Recovering("QPolygon::setPoint")

	if ptr.Pointer() != nil {
		C.QPolygon_SetPoint2(ptr.Pointer(), C.int(index), core.PointerFromQPoint(point))
	}
}

func (ptr *QPolygon) SetPoint(index int, x int, y int) {
	defer qt.Recovering("QPolygon::setPoint")

	if ptr.Pointer() != nil {
		C.QPolygon_SetPoint(ptr.Pointer(), C.int(index), C.int(x), C.int(y))
	}
}

func (ptr *QPolygon) SetPoints(nPoints int, points int) {
	defer qt.Recovering("QPolygon::setPoints")

	if ptr.Pointer() != nil {
		C.QPolygon_SetPoints(ptr.Pointer(), C.int(nPoints), C.int(points))
	}
}

func (ptr *QPolygon) Subtracted(r QPolygon_ITF) *QPolygon {
	defer qt.Recovering("QPolygon::subtracted")

	if ptr.Pointer() != nil {
		return NewQPolygonFromPointer(C.QPolygon_Subtracted(ptr.Pointer(), PointerFromQPolygon(r)))
	}
	return nil
}

func (ptr *QPolygon) Swap(other QPolygon_ITF) {
	defer qt.Recovering("QPolygon::swap")

	if ptr.Pointer() != nil {
		C.QPolygon_Swap(ptr.Pointer(), PointerFromQPolygon(other))
	}
}

func (ptr *QPolygon) Translate2(offset core.QPoint_ITF) {
	defer qt.Recovering("QPolygon::translate")

	if ptr.Pointer() != nil {
		C.QPolygon_Translate2(ptr.Pointer(), core.PointerFromQPoint(offset))
	}
}

func (ptr *QPolygon) Translate(dx int, dy int) {
	defer qt.Recovering("QPolygon::translate")

	if ptr.Pointer() != nil {
		C.QPolygon_Translate(ptr.Pointer(), C.int(dx), C.int(dy))
	}
}

func (ptr *QPolygon) Translated2(offset core.QPoint_ITF) *QPolygon {
	defer qt.Recovering("QPolygon::translated")

	if ptr.Pointer() != nil {
		return NewQPolygonFromPointer(C.QPolygon_Translated2(ptr.Pointer(), core.PointerFromQPoint(offset)))
	}
	return nil
}

func (ptr *QPolygon) Translated(dx int, dy int) *QPolygon {
	defer qt.Recovering("QPolygon::translated")

	if ptr.Pointer() != nil {
		return NewQPolygonFromPointer(C.QPolygon_Translated(ptr.Pointer(), C.int(dx), C.int(dy)))
	}
	return nil
}

func (ptr *QPolygon) United(r QPolygon_ITF) *QPolygon {
	defer qt.Recovering("QPolygon::united")

	if ptr.Pointer() != nil {
		return NewQPolygonFromPointer(C.QPolygon_United(ptr.Pointer(), PointerFromQPolygon(r)))
	}
	return nil
}

func (ptr *QPolygon) DestroyQPolygon() {
	defer qt.Recovering("QPolygon::~QPolygon")

	if ptr.Pointer() != nil {
		C.QPolygon_DestroyQPolygon(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QPolygonF struct {
	core.QVector
}

type QPolygonF_ITF interface {
	core.QVector_ITF
	QPolygonF_PTR() *QPolygonF
}

func (p *QPolygonF) QPolygonF_PTR() *QPolygonF {
	return p
}

func (p *QPolygonF) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QVector_PTR().Pointer()
	}
	return nil
}

func (p *QPolygonF) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QVector_PTR().SetPointer(ptr)
	}
}

func PointerFromQPolygonF(ptr QPolygonF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPolygonF_PTR().Pointer()
	}
	return nil
}

func NewQPolygonFFromPointer(ptr unsafe.Pointer) *QPolygonF {
	var n = new(QPolygonF)
	n.SetPointer(ptr)
	return n
}

func newQPolygonFFromPointer(ptr unsafe.Pointer) *QPolygonF {
	var n = NewQPolygonFFromPointer(ptr)
	return n
}

func NewQPolygonF6(polygon QPolygon_ITF) *QPolygonF {
	defer qt.Recovering("QPolygonF::QPolygonF")

	return newQPolygonFFromPointer(C.QPolygonF_NewQPolygonF6(PointerFromQPolygon(polygon)))
}

func NewQPolygonF5(rectangle core.QRectF_ITF) *QPolygonF {
	defer qt.Recovering("QPolygonF::QPolygonF")

	return newQPolygonFFromPointer(C.QPolygonF_NewQPolygonF5(core.PointerFromQRectF(rectangle)))
}

func (ptr *QPolygonF) ContainsPoint(point core.QPointF_ITF, fillRule core.Qt__FillRule) bool {
	defer qt.Recovering("QPolygonF::containsPoint")

	if ptr.Pointer() != nil {
		return C.QPolygonF_ContainsPoint(ptr.Pointer(), core.PointerFromQPointF(point), C.int(fillRule)) != 0
	}
	return false
}

func NewQPolygonF() *QPolygonF {
	defer qt.Recovering("QPolygonF::QPolygonF")

	return newQPolygonFFromPointer(C.QPolygonF_NewQPolygonF())
}

func NewQPolygonF3(polygon QPolygonF_ITF) *QPolygonF {
	defer qt.Recovering("QPolygonF::QPolygonF")

	return newQPolygonFFromPointer(C.QPolygonF_NewQPolygonF3(PointerFromQPolygonF(polygon)))
}

func NewQPolygonF2(size int) *QPolygonF {
	defer qt.Recovering("QPolygonF::QPolygonF")

	return newQPolygonFFromPointer(C.QPolygonF_NewQPolygonF2(C.int(size)))
}

func (ptr *QPolygonF) BoundingRect() *core.QRectF {
	defer qt.Recovering("QPolygonF::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QPolygonF_BoundingRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPolygonF) Intersected(r QPolygonF_ITF) *QPolygonF {
	defer qt.Recovering("QPolygonF::intersected")

	if ptr.Pointer() != nil {
		return NewQPolygonFFromPointer(C.QPolygonF_Intersected(ptr.Pointer(), PointerFromQPolygonF(r)))
	}
	return nil
}

func (ptr *QPolygonF) IsClosed() bool {
	defer qt.Recovering("QPolygonF::isClosed")

	if ptr.Pointer() != nil {
		return C.QPolygonF_IsClosed(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPolygonF) Subtracted(r QPolygonF_ITF) *QPolygonF {
	defer qt.Recovering("QPolygonF::subtracted")

	if ptr.Pointer() != nil {
		return NewQPolygonFFromPointer(C.QPolygonF_Subtracted(ptr.Pointer(), PointerFromQPolygonF(r)))
	}
	return nil
}

func (ptr *QPolygonF) Swap(other QPolygonF_ITF) {
	defer qt.Recovering("QPolygonF::swap")

	if ptr.Pointer() != nil {
		C.QPolygonF_Swap(ptr.Pointer(), PointerFromQPolygonF(other))
	}
}

func (ptr *QPolygonF) ToPolygon() *QPolygon {
	defer qt.Recovering("QPolygonF::toPolygon")

	if ptr.Pointer() != nil {
		return NewQPolygonFromPointer(C.QPolygonF_ToPolygon(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPolygonF) Translate(offset core.QPointF_ITF) {
	defer qt.Recovering("QPolygonF::translate")

	if ptr.Pointer() != nil {
		C.QPolygonF_Translate(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QPolygonF) Translate2(dx float64, dy float64) {
	defer qt.Recovering("QPolygonF::translate")

	if ptr.Pointer() != nil {
		C.QPolygonF_Translate2(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QPolygonF) Translated(offset core.QPointF_ITF) *QPolygonF {
	defer qt.Recovering("QPolygonF::translated")

	if ptr.Pointer() != nil {
		return NewQPolygonFFromPointer(C.QPolygonF_Translated(ptr.Pointer(), core.PointerFromQPointF(offset)))
	}
	return nil
}

func (ptr *QPolygonF) Translated2(dx float64, dy float64) *QPolygonF {
	defer qt.Recovering("QPolygonF::translated")

	if ptr.Pointer() != nil {
		return NewQPolygonFFromPointer(C.QPolygonF_Translated2(ptr.Pointer(), C.double(dx), C.double(dy)))
	}
	return nil
}

func (ptr *QPolygonF) United(r QPolygonF_ITF) *QPolygonF {
	defer qt.Recovering("QPolygonF::united")

	if ptr.Pointer() != nil {
		return NewQPolygonFFromPointer(C.QPolygonF_United(ptr.Pointer(), PointerFromQPolygonF(r)))
	}
	return nil
}

func (ptr *QPolygonF) DestroyQPolygonF() {
	defer qt.Recovering("QPolygonF::~QPolygonF")

	if ptr.Pointer() != nil {
		C.QPolygonF_DestroyQPolygonF(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QQuaternion struct {
	ptr unsafe.Pointer
}

type QQuaternion_ITF interface {
	QQuaternion_PTR() *QQuaternion
}

func (p *QQuaternion) QQuaternion_PTR() *QQuaternion {
	return p
}

func (p *QQuaternion) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QQuaternion) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQQuaternion(ptr QQuaternion_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QQuaternion_PTR().Pointer()
	}
	return nil
}

func NewQQuaternionFromPointer(ptr unsafe.Pointer) *QQuaternion {
	var n = new(QQuaternion)
	n.SetPointer(ptr)
	return n
}

func newQQuaternionFromPointer(ptr unsafe.Pointer) *QQuaternion {
	var n = NewQQuaternionFromPointer(ptr)
	return n
}

func NewQQuaternion() *QQuaternion {
	defer qt.Recovering("QQuaternion::QQuaternion")

	return newQQuaternionFromPointer(C.QQuaternion_NewQQuaternion())
}

func NewQQuaternion5(vector QVector4D_ITF) *QQuaternion {
	defer qt.Recovering("QQuaternion::QQuaternion")

	return newQQuaternionFromPointer(C.QQuaternion_NewQQuaternion5(PointerFromQVector4D(vector)))
}

func (ptr *QQuaternion) GetAxes(xAxis QVector3D_ITF, yAxis QVector3D_ITF, zAxis QVector3D_ITF) {
	defer qt.Recovering("QQuaternion::getAxes")

	if ptr.Pointer() != nil {
		C.QQuaternion_GetAxes(ptr.Pointer(), PointerFromQVector3D(xAxis), PointerFromQVector3D(yAxis), PointerFromQVector3D(zAxis))
	}
}

func (ptr *QQuaternion) IsIdentity() bool {
	defer qt.Recovering("QQuaternion::isIdentity")

	if ptr.Pointer() != nil {
		return C.QQuaternion_IsIdentity(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QQuaternion) IsNull() bool {
	defer qt.Recovering("QQuaternion::isNull")

	if ptr.Pointer() != nil {
		return C.QQuaternion_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QQuaternion) Normalize() {
	defer qt.Recovering("QQuaternion::normalize")

	if ptr.Pointer() != nil {
		C.QQuaternion_Normalize(ptr.Pointer())
	}
}

func (ptr *QQuaternion) SetVector(vector QVector3D_ITF) {
	defer qt.Recovering("QQuaternion::setVector")

	if ptr.Pointer() != nil {
		C.QQuaternion_SetVector(ptr.Pointer(), PointerFromQVector3D(vector))
	}
}

type QRadialGradient struct {
	QGradient
}

type QRadialGradient_ITF interface {
	QGradient_ITF
	QRadialGradient_PTR() *QRadialGradient
}

func (p *QRadialGradient) QRadialGradient_PTR() *QRadialGradient {
	return p
}

func (p *QRadialGradient) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QGradient_PTR().Pointer()
	}
	return nil
}

func (p *QRadialGradient) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QGradient_PTR().SetPointer(ptr)
	}
}

func PointerFromQRadialGradient(ptr QRadialGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRadialGradient_PTR().Pointer()
	}
	return nil
}

func NewQRadialGradientFromPointer(ptr unsafe.Pointer) *QRadialGradient {
	var n = new(QRadialGradient)
	n.SetPointer(ptr)
	return n
}

func newQRadialGradientFromPointer(ptr unsafe.Pointer) *QRadialGradient {
	var n = NewQRadialGradientFromPointer(ptr)
	return n
}

func NewQRadialGradient() *QRadialGradient {
	defer qt.Recovering("QRadialGradient::QRadialGradient")

	return newQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient())
}

func NewQRadialGradient6(center core.QPointF_ITF, centerRadius float64, focalPoint core.QPointF_ITF, focalRadius float64) *QRadialGradient {
	defer qt.Recovering("QRadialGradient::QRadialGradient")

	return newQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient6(core.PointerFromQPointF(center), C.double(centerRadius), core.PointerFromQPointF(focalPoint), C.double(focalRadius)))
}

func NewQRadialGradient4(center core.QPointF_ITF, radius float64) *QRadialGradient {
	defer qt.Recovering("QRadialGradient::QRadialGradient")

	return newQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient4(core.PointerFromQPointF(center), C.double(radius)))
}

func NewQRadialGradient2(center core.QPointF_ITF, radius float64, focalPoint core.QPointF_ITF) *QRadialGradient {
	defer qt.Recovering("QRadialGradient::QRadialGradient")

	return newQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient2(core.PointerFromQPointF(center), C.double(radius), core.PointerFromQPointF(focalPoint)))
}

func NewQRadialGradient7(cx float64, cy float64, centerRadius float64, fx float64, fy float64, focalRadius float64) *QRadialGradient {
	defer qt.Recovering("QRadialGradient::QRadialGradient")

	return newQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient7(C.double(cx), C.double(cy), C.double(centerRadius), C.double(fx), C.double(fy), C.double(focalRadius)))
}

func NewQRadialGradient5(cx float64, cy float64, radius float64) *QRadialGradient {
	defer qt.Recovering("QRadialGradient::QRadialGradient")

	return newQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient5(C.double(cx), C.double(cy), C.double(radius)))
}

func NewQRadialGradient3(cx float64, cy float64, radius float64, fx float64, fy float64) *QRadialGradient {
	defer qt.Recovering("QRadialGradient::QRadialGradient")

	return newQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient3(C.double(cx), C.double(cy), C.double(radius), C.double(fx), C.double(fy)))
}

func (ptr *QRadialGradient) Center() *core.QPointF {
	defer qt.Recovering("QRadialGradient::center")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QRadialGradient_Center(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRadialGradient) CenterRadius() float64 {
	defer qt.Recovering("QRadialGradient::centerRadius")

	if ptr.Pointer() != nil {
		return float64(C.QRadialGradient_CenterRadius(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadialGradient) FocalPoint() *core.QPointF {
	defer qt.Recovering("QRadialGradient::focalPoint")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QRadialGradient_FocalPoint(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRadialGradient) FocalRadius() float64 {
	defer qt.Recovering("QRadialGradient::focalRadius")

	if ptr.Pointer() != nil {
		return float64(C.QRadialGradient_FocalRadius(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadialGradient) Radius() float64 {
	defer qt.Recovering("QRadialGradient::radius")

	if ptr.Pointer() != nil {
		return float64(C.QRadialGradient_Radius(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadialGradient) SetCenter(center core.QPointF_ITF) {
	defer qt.Recovering("QRadialGradient::setCenter")

	if ptr.Pointer() != nil {
		C.QRadialGradient_SetCenter(ptr.Pointer(), core.PointerFromQPointF(center))
	}
}

func (ptr *QRadialGradient) SetCenter2(x float64, y float64) {
	defer qt.Recovering("QRadialGradient::setCenter")

	if ptr.Pointer() != nil {
		C.QRadialGradient_SetCenter2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QRadialGradient) SetCenterRadius(radius float64) {
	defer qt.Recovering("QRadialGradient::setCenterRadius")

	if ptr.Pointer() != nil {
		C.QRadialGradient_SetCenterRadius(ptr.Pointer(), C.double(radius))
	}
}

func (ptr *QRadialGradient) SetFocalPoint(focalPoint core.QPointF_ITF) {
	defer qt.Recovering("QRadialGradient::setFocalPoint")

	if ptr.Pointer() != nil {
		C.QRadialGradient_SetFocalPoint(ptr.Pointer(), core.PointerFromQPointF(focalPoint))
	}
}

func (ptr *QRadialGradient) SetFocalPoint2(x float64, y float64) {
	defer qt.Recovering("QRadialGradient::setFocalPoint")

	if ptr.Pointer() != nil {
		C.QRadialGradient_SetFocalPoint2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QRadialGradient) SetFocalRadius(radius float64) {
	defer qt.Recovering("QRadialGradient::setFocalRadius")

	if ptr.Pointer() != nil {
		C.QRadialGradient_SetFocalRadius(ptr.Pointer(), C.double(radius))
	}
}

func (ptr *QRadialGradient) SetRadius(radius float64) {
	defer qt.Recovering("QRadialGradient::setRadius")

	if ptr.Pointer() != nil {
		C.QRadialGradient_SetRadius(ptr.Pointer(), C.double(radius))
	}
}

type QRasterPaintEngine struct {
	QPaintEngine
}

type QRasterPaintEngine_ITF interface {
	QPaintEngine_ITF
	QRasterPaintEngine_PTR() *QRasterPaintEngine
}

func (p *QRasterPaintEngine) QRasterPaintEngine_PTR() *QRasterPaintEngine {
	return p
}

func (p *QRasterPaintEngine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintEngine_PTR().Pointer()
	}
	return nil
}

func (p *QRasterPaintEngine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintEngine_PTR().SetPointer(ptr)
	}
}

func PointerFromQRasterPaintEngine(ptr QRasterPaintEngine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRasterPaintEngine_PTR().Pointer()
	}
	return nil
}

func NewQRasterPaintEngineFromPointer(ptr unsafe.Pointer) *QRasterPaintEngine {
	var n = new(QRasterPaintEngine)
	n.SetPointer(ptr)
	return n
}

func newQRasterPaintEngineFromPointer(ptr unsafe.Pointer) *QRasterPaintEngine {
	var n = NewQRasterPaintEngineFromPointer(ptr)
	return n
}

type QRasterWindow struct {
	QPaintDeviceWindow
}

type QRasterWindow_ITF interface {
	QPaintDeviceWindow_ITF
	QRasterWindow_PTR() *QRasterWindow
}

func (p *QRasterWindow) QRasterWindow_PTR() *QRasterWindow {
	return p
}

func (p *QRasterWindow) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDeviceWindow_PTR().Pointer()
	}
	return nil
}

func (p *QRasterWindow) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDeviceWindow_PTR().SetPointer(ptr)
	}
}

func PointerFromQRasterWindow(ptr QRasterWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRasterWindow_PTR().Pointer()
	}
	return nil
}

func NewQRasterWindowFromPointer(ptr unsafe.Pointer) *QRasterWindow {
	var n = new(QRasterWindow)
	n.SetPointer(ptr)
	return n
}

func newQRasterWindowFromPointer(ptr unsafe.Pointer) *QRasterWindow {
	var n = NewQRasterWindowFromPointer(ptr)
	for len(n.ObjectName()) < len("QRasterWindow_") {
		n.SetObjectName("QRasterWindow_" + qt.Identifier())
	}
	return n
}

func NewQRasterWindow(parent QWindow_ITF) *QRasterWindow {
	defer qt.Recovering("QRasterWindow::QRasterWindow")

	return newQRasterWindowFromPointer(C.QRasterWindow_NewQRasterWindow(PointerFromQWindow(parent)))
}

//export callbackQRasterWindow_PaintEvent
func callbackQRasterWindow_PaintEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::paintEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEvent"); signal != nil {
		signal.(func(*QPaintEvent))(NewQPaintEventFromPointer(event))
	} else {
		NewQRasterWindowFromPointer(ptr).PaintEventDefault(NewQPaintEventFromPointer(event))
	}
}

func (ptr *QRasterWindow) ConnectPaintEvent(f func(event *QPaintEvent)) {
	defer qt.Recovering("connect QRasterWindow::paintEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "paintEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectPaintEvent() {
	defer qt.Recovering("disconnect QRasterWindow::paintEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "paintEvent")
	}
}

func (ptr *QRasterWindow) PaintEvent(event QPaintEvent_ITF) {
	defer qt.Recovering("QRasterWindow::paintEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_PaintEvent(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

func (ptr *QRasterWindow) PaintEventDefault(event QPaintEvent_ITF) {
	defer qt.Recovering("QRasterWindow::paintEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_PaintEventDefault(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

//export callbackQRasterWindow_Update3
func callbackQRasterWindow_Update3(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::update")

	if signal := qt.GetSignal(C.GoString(ptrName), "update3"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectUpdate3(f func()) {
	defer qt.Recovering("connect QRasterWindow::update")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "update3", f)
	}
}

func (ptr *QRasterWindow) DisconnectUpdate3() {
	defer qt.Recovering("disconnect QRasterWindow::update")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "update3")
	}
}

func (ptr *QRasterWindow) Update3() {
	defer qt.Recovering("QRasterWindow::update")

	if ptr.Pointer() != nil {
		C.QRasterWindow_Update3(ptr.Pointer())
	}
}

//export callbackQRasterWindow_SetHeight
func callbackQRasterWindow_SetHeight(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QRasterWindow::setHeight")

	if signal := qt.GetSignal(C.GoString(ptrName), "setHeight"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QRasterWindow) ConnectSetHeight(f func(arg int)) {
	defer qt.Recovering("connect QRasterWindow::setHeight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setHeight", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetHeight(arg int) {
	defer qt.Recovering("disconnect QRasterWindow::setHeight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setHeight")
	}
}

func (ptr *QRasterWindow) SetHeight(arg int) {
	defer qt.Recovering("QRasterWindow::setHeight")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetHeight(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQRasterWindow_SetMaximumHeight
func callbackQRasterWindow_SetMaximumHeight(ptr unsafe.Pointer, ptrName *C.char, h C.int) {
	defer qt.Recovering("callback QRasterWindow::setMaximumHeight")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMaximumHeight"); signal != nil {
		signal.(func(int))(int(h))
	}

}

func (ptr *QRasterWindow) ConnectSetMaximumHeight(f func(h int)) {
	defer qt.Recovering("connect QRasterWindow::setMaximumHeight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMaximumHeight", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetMaximumHeight(h int) {
	defer qt.Recovering("disconnect QRasterWindow::setMaximumHeight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMaximumHeight")
	}
}

func (ptr *QRasterWindow) SetMaximumHeight(h int) {
	defer qt.Recovering("QRasterWindow::setMaximumHeight")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMaximumHeight(ptr.Pointer(), C.int(h))
	}
}

//export callbackQRasterWindow_SetMaximumWidth
func callbackQRasterWindow_SetMaximumWidth(ptr unsafe.Pointer, ptrName *C.char, w C.int) {
	defer qt.Recovering("callback QRasterWindow::setMaximumWidth")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMaximumWidth"); signal != nil {
		signal.(func(int))(int(w))
	}

}

func (ptr *QRasterWindow) ConnectSetMaximumWidth(f func(w int)) {
	defer qt.Recovering("connect QRasterWindow::setMaximumWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMaximumWidth", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetMaximumWidth(w int) {
	defer qt.Recovering("disconnect QRasterWindow::setMaximumWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMaximumWidth")
	}
}

func (ptr *QRasterWindow) SetMaximumWidth(w int) {
	defer qt.Recovering("QRasterWindow::setMaximumWidth")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMaximumWidth(ptr.Pointer(), C.int(w))
	}
}

//export callbackQRasterWindow_SetMinimumHeight
func callbackQRasterWindow_SetMinimumHeight(ptr unsafe.Pointer, ptrName *C.char, h C.int) {
	defer qt.Recovering("callback QRasterWindow::setMinimumHeight")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMinimumHeight"); signal != nil {
		signal.(func(int))(int(h))
	}

}

func (ptr *QRasterWindow) ConnectSetMinimumHeight(f func(h int)) {
	defer qt.Recovering("connect QRasterWindow::setMinimumHeight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMinimumHeight", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetMinimumHeight(h int) {
	defer qt.Recovering("disconnect QRasterWindow::setMinimumHeight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMinimumHeight")
	}
}

func (ptr *QRasterWindow) SetMinimumHeight(h int) {
	defer qt.Recovering("QRasterWindow::setMinimumHeight")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMinimumHeight(ptr.Pointer(), C.int(h))
	}
}

//export callbackQRasterWindow_SetMinimumWidth
func callbackQRasterWindow_SetMinimumWidth(ptr unsafe.Pointer, ptrName *C.char, w C.int) {
	defer qt.Recovering("callback QRasterWindow::setMinimumWidth")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMinimumWidth"); signal != nil {
		signal.(func(int))(int(w))
	}

}

func (ptr *QRasterWindow) ConnectSetMinimumWidth(f func(w int)) {
	defer qt.Recovering("connect QRasterWindow::setMinimumWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMinimumWidth", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetMinimumWidth(w int) {
	defer qt.Recovering("disconnect QRasterWindow::setMinimumWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMinimumWidth")
	}
}

func (ptr *QRasterWindow) SetMinimumWidth(w int) {
	defer qt.Recovering("QRasterWindow::setMinimumWidth")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMinimumWidth(ptr.Pointer(), C.int(w))
	}
}

//export callbackQRasterWindow_SetTitle
func callbackQRasterWindow_SetTitle(ptr unsafe.Pointer, ptrName *C.char, vqs *C.char) {
	defer qt.Recovering("callback QRasterWindow::setTitle")

	if signal := qt.GetSignal(C.GoString(ptrName), "setTitle"); signal != nil {
		signal.(func(string))(C.GoString(vqs))
	}

}

func (ptr *QRasterWindow) ConnectSetTitle(f func(vqs string)) {
	defer qt.Recovering("connect QRasterWindow::setTitle")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setTitle", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetTitle(vqs string) {
	defer qt.Recovering("disconnect QRasterWindow::setTitle")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setTitle")
	}
}

func (ptr *QRasterWindow) SetTitle(vqs string) {
	defer qt.Recovering("QRasterWindow::setTitle")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetTitle(ptr.Pointer(), C.CString(vqs))
	}
}

//export callbackQRasterWindow_SetVisible
func callbackQRasterWindow_SetVisible(ptr unsafe.Pointer, ptrName *C.char, visible C.int) {
	defer qt.Recovering("callback QRasterWindow::setVisible")

	if signal := qt.GetSignal(C.GoString(ptrName), "setVisible"); signal != nil {
		signal.(func(bool))(int(visible) != 0)
	}

}

func (ptr *QRasterWindow) ConnectSetVisible(f func(visible bool)) {
	defer qt.Recovering("connect QRasterWindow::setVisible")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setVisible", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetVisible(visible bool) {
	defer qt.Recovering("disconnect QRasterWindow::setVisible")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setVisible")
	}
}

func (ptr *QRasterWindow) SetVisible(visible bool) {
	defer qt.Recovering("QRasterWindow::setVisible")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetVisible(ptr.Pointer(), C.int(qt.GoBoolToInt(visible)))
	}
}

//export callbackQRasterWindow_SetWidth
func callbackQRasterWindow_SetWidth(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QRasterWindow::setWidth")

	if signal := qt.GetSignal(C.GoString(ptrName), "setWidth"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QRasterWindow) ConnectSetWidth(f func(arg int)) {
	defer qt.Recovering("connect QRasterWindow::setWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setWidth", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetWidth(arg int) {
	defer qt.Recovering("disconnect QRasterWindow::setWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setWidth")
	}
}

func (ptr *QRasterWindow) SetWidth(arg int) {
	defer qt.Recovering("QRasterWindow::setWidth")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetWidth(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQRasterWindow_SetX
func callbackQRasterWindow_SetX(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QRasterWindow::setX")

	if signal := qt.GetSignal(C.GoString(ptrName), "setX"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QRasterWindow) ConnectSetX(f func(arg int)) {
	defer qt.Recovering("connect QRasterWindow::setX")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setX", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetX(arg int) {
	defer qt.Recovering("disconnect QRasterWindow::setX")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setX")
	}
}

func (ptr *QRasterWindow) SetX(arg int) {
	defer qt.Recovering("QRasterWindow::setX")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetX(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQRasterWindow_SetY
func callbackQRasterWindow_SetY(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QRasterWindow::setY")

	if signal := qt.GetSignal(C.GoString(ptrName), "setY"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QRasterWindow) ConnectSetY(f func(arg int)) {
	defer qt.Recovering("connect QRasterWindow::setY")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setY", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetY(arg int) {
	defer qt.Recovering("disconnect QRasterWindow::setY")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setY")
	}
}

func (ptr *QRasterWindow) SetY(arg int) {
	defer qt.Recovering("QRasterWindow::setY")

	if ptr.Pointer() != nil {
		C.QRasterWindow_SetY(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQRasterWindow_Alert
func callbackQRasterWindow_Alert(ptr unsafe.Pointer, ptrName *C.char, msec C.int) {
	defer qt.Recovering("callback QRasterWindow::alert")

	if signal := qt.GetSignal(C.GoString(ptrName), "alert"); signal != nil {
		signal.(func(int))(int(msec))
	}

}

func (ptr *QRasterWindow) ConnectAlert(f func(msec int)) {
	defer qt.Recovering("connect QRasterWindow::alert")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "alert", f)
	}
}

func (ptr *QRasterWindow) DisconnectAlert(msec int) {
	defer qt.Recovering("disconnect QRasterWindow::alert")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "alert")
	}
}

func (ptr *QRasterWindow) Alert(msec int) {
	defer qt.Recovering("QRasterWindow::alert")

	if ptr.Pointer() != nil {
		C.QRasterWindow_Alert(ptr.Pointer(), C.int(msec))
	}
}

//export callbackQRasterWindow_Close
func callbackQRasterWindow_Close(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QRasterWindow::close")

	if signal := qt.GetSignal(C.GoString(ptrName), "close"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QRasterWindow) ConnectClose(f func() bool) {
	defer qt.Recovering("connect QRasterWindow::close")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "close", f)
	}
}

func (ptr *QRasterWindow) DisconnectClose() {
	defer qt.Recovering("disconnect QRasterWindow::close")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "close")
	}
}

func (ptr *QRasterWindow) Close() bool {
	defer qt.Recovering("QRasterWindow::close")

	if ptr.Pointer() != nil {
		return C.QRasterWindow_Close(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQRasterWindow_Event
func callbackQRasterWindow_Event(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) C.int {
	defer qt.Recovering("callback QRasterWindow::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(ev))))
	}

	return C.int(qt.GoBoolToInt(NewQRasterWindowFromPointer(ptr).EventDefault(core.NewQEventFromPointer(ev))))
}

func (ptr *QRasterWindow) ConnectEvent(f func(ev *core.QEvent) bool) {
	defer qt.Recovering("connect QRasterWindow::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QRasterWindow) DisconnectEvent() {
	defer qt.Recovering("disconnect QRasterWindow::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QRasterWindow) Event(ev core.QEvent_ITF) bool {
	defer qt.Recovering("QRasterWindow::event")

	if ptr.Pointer() != nil {
		return C.QRasterWindow_Event(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

func (ptr *QRasterWindow) EventDefault(ev core.QEvent_ITF) bool {
	defer qt.Recovering("QRasterWindow::event")

	if ptr.Pointer() != nil {
		return C.QRasterWindow_EventDefault(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

//export callbackQRasterWindow_ExposeEvent
func callbackQRasterWindow_ExposeEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::exposeEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "exposeEvent"); signal != nil {
		signal.(func(*QExposeEvent))(NewQExposeEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).ExposeEventDefault(NewQExposeEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectExposeEvent(f func(ev *QExposeEvent)) {
	defer qt.Recovering("connect QRasterWindow::exposeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "exposeEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectExposeEvent() {
	defer qt.Recovering("disconnect QRasterWindow::exposeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "exposeEvent")
	}
}

func (ptr *QRasterWindow) ExposeEvent(ev QExposeEvent_ITF) {
	defer qt.Recovering("QRasterWindow::exposeEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ExposeEvent(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

func (ptr *QRasterWindow) ExposeEventDefault(ev QExposeEvent_ITF) {
	defer qt.Recovering("QRasterWindow::exposeEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ExposeEventDefault(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

//export callbackQRasterWindow_FocusInEvent
func callbackQRasterWindow_FocusInEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::focusInEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusInEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).FocusInEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectFocusInEvent(f func(ev *QFocusEvent)) {
	defer qt.Recovering("connect QRasterWindow::focusInEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "focusInEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectFocusInEvent() {
	defer qt.Recovering("disconnect QRasterWindow::focusInEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "focusInEvent")
	}
}

func (ptr *QRasterWindow) FocusInEvent(ev QFocusEvent_ITF) {
	defer qt.Recovering("QRasterWindow::focusInEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_FocusInEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QRasterWindow) FocusInEventDefault(ev QFocusEvent_ITF) {
	defer qt.Recovering("QRasterWindow::focusInEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_FocusInEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQRasterWindow_FocusObject
func callbackQRasterWindow_FocusObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QRasterWindow::focusObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusObject"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQRasterWindowFromPointer(ptr).FocusObjectDefault())
}

func (ptr *QRasterWindow) ConnectFocusObject(f func() *core.QObject) {
	defer qt.Recovering("connect QRasterWindow::focusObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "focusObject", f)
	}
}

func (ptr *QRasterWindow) DisconnectFocusObject() {
	defer qt.Recovering("disconnect QRasterWindow::focusObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "focusObject")
	}
}

func (ptr *QRasterWindow) FocusObject() *core.QObject {
	defer qt.Recovering("QRasterWindow::focusObject")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QRasterWindow_FocusObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRasterWindow) FocusObjectDefault() *core.QObject {
	defer qt.Recovering("QRasterWindow::focusObject")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QRasterWindow_FocusObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQRasterWindow_FocusOutEvent
func callbackQRasterWindow_FocusOutEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::focusOutEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusOutEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).FocusOutEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectFocusOutEvent(f func(ev *QFocusEvent)) {
	defer qt.Recovering("connect QRasterWindow::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "focusOutEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectFocusOutEvent() {
	defer qt.Recovering("disconnect QRasterWindow::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "focusOutEvent")
	}
}

func (ptr *QRasterWindow) FocusOutEvent(ev QFocusEvent_ITF) {
	defer qt.Recovering("QRasterWindow::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_FocusOutEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QRasterWindow) FocusOutEventDefault(ev QFocusEvent_ITF) {
	defer qt.Recovering("QRasterWindow::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_FocusOutEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQRasterWindow_Format
func callbackQRasterWindow_Format(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QRasterWindow::format")

	if signal := qt.GetSignal(C.GoString(ptrName), "format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQRasterWindowFromPointer(ptr).FormatDefault())
}

func (ptr *QRasterWindow) ConnectFormat(f func() *QSurfaceFormat) {
	defer qt.Recovering("connect QRasterWindow::format")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "format", f)
	}
}

func (ptr *QRasterWindow) DisconnectFormat() {
	defer qt.Recovering("disconnect QRasterWindow::format")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "format")
	}
}

func (ptr *QRasterWindow) Format() *QSurfaceFormat {
	defer qt.Recovering("QRasterWindow::format")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QRasterWindow_Format(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRasterWindow) FormatDefault() *QSurfaceFormat {
	defer qt.Recovering("QRasterWindow::format")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QRasterWindow_FormatDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQRasterWindow_Hide
func callbackQRasterWindow_Hide(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::hide")

	if signal := qt.GetSignal(C.GoString(ptrName), "hide"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectHide(f func()) {
	defer qt.Recovering("connect QRasterWindow::hide")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "hide", f)
	}
}

func (ptr *QRasterWindow) DisconnectHide() {
	defer qt.Recovering("disconnect QRasterWindow::hide")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "hide")
	}
}

func (ptr *QRasterWindow) Hide() {
	defer qt.Recovering("QRasterWindow::hide")

	if ptr.Pointer() != nil {
		C.QRasterWindow_Hide(ptr.Pointer())
	}
}

//export callbackQRasterWindow_HideEvent
func callbackQRasterWindow_HideEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::hideEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "hideEvent"); signal != nil {
		signal.(func(*QHideEvent))(NewQHideEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).HideEventDefault(NewQHideEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectHideEvent(f func(ev *QHideEvent)) {
	defer qt.Recovering("connect QRasterWindow::hideEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "hideEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectHideEvent() {
	defer qt.Recovering("disconnect QRasterWindow::hideEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "hideEvent")
	}
}

func (ptr *QRasterWindow) HideEvent(ev QHideEvent_ITF) {
	defer qt.Recovering("QRasterWindow::hideEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_HideEvent(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

func (ptr *QRasterWindow) HideEventDefault(ev QHideEvent_ITF) {
	defer qt.Recovering("QRasterWindow::hideEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_HideEventDefault(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

//export callbackQRasterWindow_KeyPressEvent
func callbackQRasterWindow_KeyPressEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::keyPressEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "keyPressEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).KeyPressEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectKeyPressEvent(f func(ev *QKeyEvent)) {
	defer qt.Recovering("connect QRasterWindow::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "keyPressEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectKeyPressEvent() {
	defer qt.Recovering("disconnect QRasterWindow::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "keyPressEvent")
	}
}

func (ptr *QRasterWindow) KeyPressEvent(ev QKeyEvent_ITF) {
	defer qt.Recovering("QRasterWindow::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_KeyPressEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QRasterWindow) KeyPressEventDefault(ev QKeyEvent_ITF) {
	defer qt.Recovering("QRasterWindow::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_KeyPressEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQRasterWindow_KeyReleaseEvent
func callbackQRasterWindow_KeyReleaseEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::keyReleaseEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "keyReleaseEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).KeyReleaseEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectKeyReleaseEvent(f func(ev *QKeyEvent)) {
	defer qt.Recovering("connect QRasterWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "keyReleaseEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectKeyReleaseEvent() {
	defer qt.Recovering("disconnect QRasterWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "keyReleaseEvent")
	}
}

func (ptr *QRasterWindow) KeyReleaseEvent(ev QKeyEvent_ITF) {
	defer qt.Recovering("QRasterWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_KeyReleaseEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QRasterWindow) KeyReleaseEventDefault(ev QKeyEvent_ITF) {
	defer qt.Recovering("QRasterWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_KeyReleaseEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQRasterWindow_Lower
func callbackQRasterWindow_Lower(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::lower")

	if signal := qt.GetSignal(C.GoString(ptrName), "lower"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectLower(f func()) {
	defer qt.Recovering("connect QRasterWindow::lower")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "lower", f)
	}
}

func (ptr *QRasterWindow) DisconnectLower() {
	defer qt.Recovering("disconnect QRasterWindow::lower")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "lower")
	}
}

func (ptr *QRasterWindow) Lower() {
	defer qt.Recovering("QRasterWindow::lower")

	if ptr.Pointer() != nil {
		C.QRasterWindow_Lower(ptr.Pointer())
	}
}

//export callbackQRasterWindow_MouseDoubleClickEvent
func callbackQRasterWindow_MouseDoubleClickEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::mouseDoubleClickEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseDoubleClickEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MouseDoubleClickEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMouseDoubleClickEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QRasterWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mouseDoubleClickEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMouseDoubleClickEvent() {
	defer qt.Recovering("disconnect QRasterWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mouseDoubleClickEvent")
	}
}

func (ptr *QRasterWindow) MouseDoubleClickEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QRasterWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseDoubleClickEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QRasterWindow) MouseDoubleClickEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QRasterWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseDoubleClickEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQRasterWindow_MouseMoveEvent
func callbackQRasterWindow_MouseMoveEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::mouseMoveEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseMoveEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MouseMoveEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMouseMoveEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QRasterWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mouseMoveEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMouseMoveEvent() {
	defer qt.Recovering("disconnect QRasterWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mouseMoveEvent")
	}
}

func (ptr *QRasterWindow) MouseMoveEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QRasterWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseMoveEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QRasterWindow) MouseMoveEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QRasterWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseMoveEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQRasterWindow_MousePressEvent
func callbackQRasterWindow_MousePressEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::mousePressEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mousePressEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MousePressEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMousePressEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QRasterWindow::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mousePressEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMousePressEvent() {
	defer qt.Recovering("disconnect QRasterWindow::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mousePressEvent")
	}
}

func (ptr *QRasterWindow) MousePressEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QRasterWindow::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MousePressEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QRasterWindow) MousePressEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QRasterWindow::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MousePressEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQRasterWindow_MouseReleaseEvent
func callbackQRasterWindow_MouseReleaseEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::mouseReleaseEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseReleaseEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MouseReleaseEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMouseReleaseEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QRasterWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mouseReleaseEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMouseReleaseEvent() {
	defer qt.Recovering("disconnect QRasterWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mouseReleaseEvent")
	}
}

func (ptr *QRasterWindow) MouseReleaseEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QRasterWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseReleaseEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QRasterWindow) MouseReleaseEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QRasterWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseReleaseEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQRasterWindow_MoveEvent
func callbackQRasterWindow_MoveEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::moveEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "moveEvent"); signal != nil {
		signal.(func(*QMoveEvent))(NewQMoveEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MoveEventDefault(NewQMoveEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMoveEvent(f func(ev *QMoveEvent)) {
	defer qt.Recovering("connect QRasterWindow::moveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "moveEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMoveEvent() {
	defer qt.Recovering("disconnect QRasterWindow::moveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "moveEvent")
	}
}

func (ptr *QRasterWindow) MoveEvent(ev QMoveEvent_ITF) {
	defer qt.Recovering("QRasterWindow::moveEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MoveEvent(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

func (ptr *QRasterWindow) MoveEventDefault(ev QMoveEvent_ITF) {
	defer qt.Recovering("QRasterWindow::moveEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_MoveEventDefault(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

//export callbackQRasterWindow_NativeEvent
func callbackQRasterWindow_NativeEvent(ptr unsafe.Pointer, ptrName *C.char, eventType *C.char, message unsafe.Pointer, result C.long) C.int {
	defer qt.Recovering("callback QRasterWindow::nativeEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "nativeEvent"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(string, unsafe.Pointer, int) bool)(C.GoString(eventType), message, int(result))))
	}

	return C.int(qt.GoBoolToInt(NewQRasterWindowFromPointer(ptr).NativeEventDefault(C.GoString(eventType), message, int(result))))
}

func (ptr *QRasterWindow) ConnectNativeEvent(f func(eventType string, message unsafe.Pointer, result int) bool) {
	defer qt.Recovering("connect QRasterWindow::nativeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "nativeEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectNativeEvent() {
	defer qt.Recovering("disconnect QRasterWindow::nativeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "nativeEvent")
	}
}

func (ptr *QRasterWindow) NativeEvent(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QRasterWindow::nativeEvent")

	if ptr.Pointer() != nil {
		return C.QRasterWindow_NativeEvent(ptr.Pointer(), C.CString(eventType), message, C.long(result)) != 0
	}
	return false
}

func (ptr *QRasterWindow) NativeEventDefault(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QRasterWindow::nativeEvent")

	if ptr.Pointer() != nil {
		return C.QRasterWindow_NativeEventDefault(ptr.Pointer(), C.CString(eventType), message, C.long(result)) != 0
	}
	return false
}

//export callbackQRasterWindow_Raise
func callbackQRasterWindow_Raise(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::raise")

	if signal := qt.GetSignal(C.GoString(ptrName), "raise"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectRaise(f func()) {
	defer qt.Recovering("connect QRasterWindow::raise")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "raise", f)
	}
}

func (ptr *QRasterWindow) DisconnectRaise() {
	defer qt.Recovering("disconnect QRasterWindow::raise")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "raise")
	}
}

func (ptr *QRasterWindow) Raise() {
	defer qt.Recovering("QRasterWindow::raise")

	if ptr.Pointer() != nil {
		C.QRasterWindow_Raise(ptr.Pointer())
	}
}

//export callbackQRasterWindow_RequestActivate
func callbackQRasterWindow_RequestActivate(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::requestActivate")

	if signal := qt.GetSignal(C.GoString(ptrName), "requestActivate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectRequestActivate(f func()) {
	defer qt.Recovering("connect QRasterWindow::requestActivate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "requestActivate", f)
	}
}

func (ptr *QRasterWindow) DisconnectRequestActivate() {
	defer qt.Recovering("disconnect QRasterWindow::requestActivate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "requestActivate")
	}
}

func (ptr *QRasterWindow) RequestActivate() {
	defer qt.Recovering("QRasterWindow::requestActivate")

	if ptr.Pointer() != nil {
		C.QRasterWindow_RequestActivate(ptr.Pointer())
	}
}

//export callbackQRasterWindow_RequestUpdate
func callbackQRasterWindow_RequestUpdate(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::requestUpdate")

	if signal := qt.GetSignal(C.GoString(ptrName), "requestUpdate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectRequestUpdate(f func()) {
	defer qt.Recovering("connect QRasterWindow::requestUpdate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "requestUpdate", f)
	}
}

func (ptr *QRasterWindow) DisconnectRequestUpdate() {
	defer qt.Recovering("disconnect QRasterWindow::requestUpdate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "requestUpdate")
	}
}

func (ptr *QRasterWindow) RequestUpdate() {
	defer qt.Recovering("QRasterWindow::requestUpdate")

	if ptr.Pointer() != nil {
		C.QRasterWindow_RequestUpdate(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ResizeEvent
func callbackQRasterWindow_ResizeEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::resizeEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "resizeEvent"); signal != nil {
		signal.(func(*QResizeEvent))(NewQResizeEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).ResizeEventDefault(NewQResizeEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectResizeEvent(f func(ev *QResizeEvent)) {
	defer qt.Recovering("connect QRasterWindow::resizeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "resizeEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectResizeEvent() {
	defer qt.Recovering("disconnect QRasterWindow::resizeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "resizeEvent")
	}
}

func (ptr *QRasterWindow) ResizeEvent(ev QResizeEvent_ITF) {
	defer qt.Recovering("QRasterWindow::resizeEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ResizeEvent(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

func (ptr *QRasterWindow) ResizeEventDefault(ev QResizeEvent_ITF) {
	defer qt.Recovering("QRasterWindow::resizeEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ResizeEventDefault(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

//export callbackQRasterWindow_Show
func callbackQRasterWindow_Show(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::show")

	if signal := qt.GetSignal(C.GoString(ptrName), "show"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectShow(f func()) {
	defer qt.Recovering("connect QRasterWindow::show")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "show", f)
	}
}

func (ptr *QRasterWindow) DisconnectShow() {
	defer qt.Recovering("disconnect QRasterWindow::show")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "show")
	}
}

func (ptr *QRasterWindow) Show() {
	defer qt.Recovering("QRasterWindow::show")

	if ptr.Pointer() != nil {
		C.QRasterWindow_Show(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ShowEvent
func callbackQRasterWindow_ShowEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::showEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "showEvent"); signal != nil {
		signal.(func(*QShowEvent))(NewQShowEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).ShowEventDefault(NewQShowEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectShowEvent(f func(ev *QShowEvent)) {
	defer qt.Recovering("connect QRasterWindow::showEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowEvent() {
	defer qt.Recovering("disconnect QRasterWindow::showEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showEvent")
	}
}

func (ptr *QRasterWindow) ShowEvent(ev QShowEvent_ITF) {
	defer qt.Recovering("QRasterWindow::showEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowEvent(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

func (ptr *QRasterWindow) ShowEventDefault(ev QShowEvent_ITF) {
	defer qt.Recovering("QRasterWindow::showEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowEventDefault(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

//export callbackQRasterWindow_ShowFullScreen
func callbackQRasterWindow_ShowFullScreen(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::showFullScreen")

	if signal := qt.GetSignal(C.GoString(ptrName), "showFullScreen"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectShowFullScreen(f func()) {
	defer qt.Recovering("connect QRasterWindow::showFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showFullScreen", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowFullScreen() {
	defer qt.Recovering("disconnect QRasterWindow::showFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showFullScreen")
	}
}

func (ptr *QRasterWindow) ShowFullScreen() {
	defer qt.Recovering("QRasterWindow::showFullScreen")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowFullScreen(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ShowMaximized
func callbackQRasterWindow_ShowMaximized(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::showMaximized")

	if signal := qt.GetSignal(C.GoString(ptrName), "showMaximized"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectShowMaximized(f func()) {
	defer qt.Recovering("connect QRasterWindow::showMaximized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showMaximized", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowMaximized() {
	defer qt.Recovering("disconnect QRasterWindow::showMaximized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showMaximized")
	}
}

func (ptr *QRasterWindow) ShowMaximized() {
	defer qt.Recovering("QRasterWindow::showMaximized")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowMaximized(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ShowMinimized
func callbackQRasterWindow_ShowMinimized(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::showMinimized")

	if signal := qt.GetSignal(C.GoString(ptrName), "showMinimized"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectShowMinimized(f func()) {
	defer qt.Recovering("connect QRasterWindow::showMinimized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showMinimized", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowMinimized() {
	defer qt.Recovering("disconnect QRasterWindow::showMinimized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showMinimized")
	}
}

func (ptr *QRasterWindow) ShowMinimized() {
	defer qt.Recovering("QRasterWindow::showMinimized")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowMinimized(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ShowNormal
func callbackQRasterWindow_ShowNormal(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::showNormal")

	if signal := qt.GetSignal(C.GoString(ptrName), "showNormal"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectShowNormal(f func()) {
	defer qt.Recovering("connect QRasterWindow::showNormal")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showNormal", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowNormal() {
	defer qt.Recovering("disconnect QRasterWindow::showNormal")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showNormal")
	}
}

func (ptr *QRasterWindow) ShowNormal() {
	defer qt.Recovering("QRasterWindow::showNormal")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowNormal(ptr.Pointer())
	}
}

//export callbackQRasterWindow_Size
func callbackQRasterWindow_Size(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QRasterWindow::size")

	if signal := qt.GetSignal(C.GoString(ptrName), "size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQRasterWindowFromPointer(ptr).SizeDefault())
}

func (ptr *QRasterWindow) ConnectSize(f func() *core.QSize) {
	defer qt.Recovering("connect QRasterWindow::size")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "size", f)
	}
}

func (ptr *QRasterWindow) DisconnectSize() {
	defer qt.Recovering("disconnect QRasterWindow::size")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "size")
	}
}

func (ptr *QRasterWindow) Size() *core.QSize {
	defer qt.Recovering("QRasterWindow::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QRasterWindow_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRasterWindow) SizeDefault() *core.QSize {
	defer qt.Recovering("QRasterWindow::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QRasterWindow_SizeDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQRasterWindow_SurfaceType
func callbackQRasterWindow_SurfaceType(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QRasterWindow::surfaceType")

	if signal := qt.GetSignal(C.GoString(ptrName), "surfaceType"); signal != nil {
		return C.int(signal.(func() QSurface__SurfaceType)())
	}

	return C.int(NewQRasterWindowFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QRasterWindow) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	defer qt.Recovering("connect QRasterWindow::surfaceType")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "surfaceType", f)
	}
}

func (ptr *QRasterWindow) DisconnectSurfaceType() {
	defer qt.Recovering("disconnect QRasterWindow::surfaceType")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "surfaceType")
	}
}

func (ptr *QRasterWindow) SurfaceType() QSurface__SurfaceType {
	defer qt.Recovering("QRasterWindow::surfaceType")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QRasterWindow_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRasterWindow) SurfaceTypeDefault() QSurface__SurfaceType {
	defer qt.Recovering("QRasterWindow::surfaceType")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QRasterWindow_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQRasterWindow_TabletEvent
func callbackQRasterWindow_TabletEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::tabletEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "tabletEvent"); signal != nil {
		signal.(func(*QTabletEvent))(NewQTabletEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).TabletEventDefault(NewQTabletEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectTabletEvent(f func(ev *QTabletEvent)) {
	defer qt.Recovering("connect QRasterWindow::tabletEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "tabletEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectTabletEvent() {
	defer qt.Recovering("disconnect QRasterWindow::tabletEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "tabletEvent")
	}
}

func (ptr *QRasterWindow) TabletEvent(ev QTabletEvent_ITF) {
	defer qt.Recovering("QRasterWindow::tabletEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_TabletEvent(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

func (ptr *QRasterWindow) TabletEventDefault(ev QTabletEvent_ITF) {
	defer qt.Recovering("QRasterWindow::tabletEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_TabletEventDefault(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

//export callbackQRasterWindow_TouchEvent
func callbackQRasterWindow_TouchEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::touchEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "touchEvent"); signal != nil {
		signal.(func(*QTouchEvent))(NewQTouchEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).TouchEventDefault(NewQTouchEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectTouchEvent(f func(ev *QTouchEvent)) {
	defer qt.Recovering("connect QRasterWindow::touchEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "touchEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectTouchEvent() {
	defer qt.Recovering("disconnect QRasterWindow::touchEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "touchEvent")
	}
}

func (ptr *QRasterWindow) TouchEvent(ev QTouchEvent_ITF) {
	defer qt.Recovering("QRasterWindow::touchEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_TouchEvent(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QRasterWindow) TouchEventDefault(ev QTouchEvent_ITF) {
	defer qt.Recovering("QRasterWindow::touchEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_TouchEventDefault(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

//export callbackQRasterWindow_WheelEvent
func callbackQRasterWindow_WheelEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::wheelEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "wheelEvent"); signal != nil {
		signal.(func(*QWheelEvent))(NewQWheelEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).WheelEventDefault(NewQWheelEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectWheelEvent(f func(ev *QWheelEvent)) {
	defer qt.Recovering("connect QRasterWindow::wheelEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "wheelEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectWheelEvent() {
	defer qt.Recovering("disconnect QRasterWindow::wheelEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "wheelEvent")
	}
}

func (ptr *QRasterWindow) WheelEvent(ev QWheelEvent_ITF) {
	defer qt.Recovering("QRasterWindow::wheelEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_WheelEvent(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

func (ptr *QRasterWindow) WheelEventDefault(ev QWheelEvent_ITF) {
	defer qt.Recovering("QRasterWindow::wheelEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_WheelEventDefault(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

//export callbackQRasterWindow_TimerEvent
func callbackQRasterWindow_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRasterWindowFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRasterWindow) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QRasterWindow::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QRasterWindow::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QRasterWindow) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRasterWindow::timerEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRasterWindow) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRasterWindow::timerEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRasterWindow_ChildEvent
func callbackQRasterWindow_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRasterWindowFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRasterWindow) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QRasterWindow::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QRasterWindow::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QRasterWindow) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRasterWindow::childEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRasterWindow) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRasterWindow::childEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRasterWindow_ConnectNotify
func callbackQRasterWindow_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRasterWindowFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRasterWindow) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRasterWindow::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QRasterWindow) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QRasterWindow::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QRasterWindow) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRasterWindow::connectNotify")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRasterWindow) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRasterWindow::connectNotify")

	if ptr.Pointer() != nil {
		C.QRasterWindow_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRasterWindow_CustomEvent
func callbackQRasterWindow_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRasterWindowFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRasterWindow) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QRasterWindow::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QRasterWindow::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QRasterWindow) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QRasterWindow::customEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRasterWindow) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QRasterWindow::customEvent")

	if ptr.Pointer() != nil {
		C.QRasterWindow_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRasterWindow_DeleteLater
func callbackQRasterWindow_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRasterWindow::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRasterWindow) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QRasterWindow::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QRasterWindow) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QRasterWindow::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QRasterWindow) DeleteLater() {
	defer qt.Recovering("QRasterWindow::deleteLater")

	if ptr.Pointer() != nil {
		C.QRasterWindow_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQRasterWindow_DisconnectNotify
func callbackQRasterWindow_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRasterWindow::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRasterWindowFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRasterWindow) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRasterWindow::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QRasterWindow) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QRasterWindow::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QRasterWindow) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRasterWindow::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRasterWindow_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRasterWindow) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRasterWindow::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRasterWindow_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRasterWindow_EventFilter
func callbackQRasterWindow_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QRasterWindow::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQRasterWindowFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QRasterWindow) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QRasterWindow::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QRasterWindow) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QRasterWindow::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QRasterWindow) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRasterWindow::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRasterWindow_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRasterWindow) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRasterWindow::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRasterWindow_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRasterWindow_MetaObject
func callbackQRasterWindow_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QRasterWindow::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRasterWindowFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRasterWindow) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QRasterWindow::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QRasterWindow) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QRasterWindow::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QRasterWindow) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QRasterWindow::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRasterWindow_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRasterWindow) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QRasterWindow::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRasterWindow_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQRasterWindow_Metric
func callbackQRasterWindow_Metric(ptr unsafe.Pointer, ptrName *C.char, metric C.int) C.int {
	defer qt.Recovering("callback QRasterWindow::metric")

	if signal := qt.GetSignal(C.GoString(ptrName), "metric"); signal != nil {
		return C.int(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric)))
	}

	return C.int(NewQRasterWindowFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric)))
}

func (ptr *QRasterWindow) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	defer qt.Recovering("connect QRasterWindow::metric")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metric", f)
	}
}

func (ptr *QRasterWindow) DisconnectMetric() {
	defer qt.Recovering("disconnect QRasterWindow::metric")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metric")
	}
}

func (ptr *QRasterWindow) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QRasterWindow::metric")

	if ptr.Pointer() != nil {
		return int(C.QRasterWindow_Metric(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

func (ptr *QRasterWindow) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	defer qt.Recovering("QRasterWindow::metric")

	if ptr.Pointer() != nil {
		return int(C.QRasterWindow_MetricDefault(ptr.Pointer(), C.int(metric)))
	}
	return 0
}

//export callbackQRasterWindow_PaintEngine
func callbackQRasterWindow_PaintEngine(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QRasterWindow::paintEngine")

	if signal := qt.GetSignal(C.GoString(ptrName), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QRasterWindow) ConnectPaintEngine(f func() *QPaintEngine) {
	defer qt.Recovering("connect QRasterWindow::paintEngine")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "paintEngine", f)
	}
}

func (ptr *QRasterWindow) DisconnectPaintEngine() {
	defer qt.Recovering("disconnect QRasterWindow::paintEngine")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "paintEngine")
	}
}

func (ptr *QRasterWindow) PaintEngine() *QPaintEngine {
	defer qt.Recovering("QRasterWindow::paintEngine")

	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QRasterWindow_PaintEngine(ptr.Pointer()))
	}
	return nil
}

//QRawFont::AntialiasingType
type QRawFont__AntialiasingType int64

const (
	QRawFont__PixelAntialiasing    = QRawFont__AntialiasingType(0)
	QRawFont__SubPixelAntialiasing = QRawFont__AntialiasingType(1)
)

//QRawFont::LayoutFlag
type QRawFont__LayoutFlag int64

const (
	QRawFont__SeparateAdvances = QRawFont__LayoutFlag(0)
	QRawFont__KernedAdvances   = QRawFont__LayoutFlag(1)
	QRawFont__UseDesignMetrics = QRawFont__LayoutFlag(2)
)

type QRawFont struct {
	ptr unsafe.Pointer
}

type QRawFont_ITF interface {
	QRawFont_PTR() *QRawFont
}

func (p *QRawFont) QRawFont_PTR() *QRawFont {
	return p
}

func (p *QRawFont) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRawFont) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRawFont(ptr QRawFont_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRawFont_PTR().Pointer()
	}
	return nil
}

func NewQRawFontFromPointer(ptr unsafe.Pointer) *QRawFont {
	var n = new(QRawFont)
	n.SetPointer(ptr)
	return n
}

func newQRawFontFromPointer(ptr unsafe.Pointer) *QRawFont {
	var n = NewQRawFontFromPointer(ptr)
	return n
}

func NewQRawFont() *QRawFont {
	defer qt.Recovering("QRawFont::QRawFont")

	return newQRawFontFromPointer(C.QRawFont_NewQRawFont())
}

func NewQRawFont3(fontData string, pixelSize float64, hintingPreference QFont__HintingPreference) *QRawFont {
	defer qt.Recovering("QRawFont::QRawFont")

	return newQRawFontFromPointer(C.QRawFont_NewQRawFont3(C.CString(fontData), C.double(pixelSize), C.int(hintingPreference)))
}

func NewQRawFont4(other QRawFont_ITF) *QRawFont {
	defer qt.Recovering("QRawFont::QRawFont")

	return newQRawFontFromPointer(C.QRawFont_NewQRawFont4(PointerFromQRawFont(other)))
}

func NewQRawFont2(fileName string, pixelSize float64, hintingPreference QFont__HintingPreference) *QRawFont {
	defer qt.Recovering("QRawFont::QRawFont")

	return newQRawFontFromPointer(C.QRawFont_NewQRawFont2(C.CString(fileName), C.double(pixelSize), C.int(hintingPreference)))
}

func (ptr *QRawFont) Ascent() float64 {
	defer qt.Recovering("QRawFont::ascent")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) AverageCharWidth() float64 {
	defer qt.Recovering("QRawFont::averageCharWidth")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_AverageCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) Descent() float64 {
	defer qt.Recovering("QRawFont::descent")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) FamilyName() string {
	defer qt.Recovering("QRawFont::familyName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRawFont_FamilyName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRawFont) FontTable(tagName string) string {
	defer qt.Recovering("QRawFont::fontTable")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRawFont_FontTable(ptr.Pointer(), C.CString(tagName)))
	}
	return ""
}

func QRawFont_FromFont(font QFont_ITF, writingSystem QFontDatabase__WritingSystem) *QRawFont {
	defer qt.Recovering("QRawFont::fromFont")

	return NewQRawFontFromPointer(C.QRawFont_QRawFont_FromFont(PointerFromQFont(font), C.int(writingSystem)))
}

func (ptr *QRawFont) FromFont(font QFont_ITF, writingSystem QFontDatabase__WritingSystem) *QRawFont {
	defer qt.Recovering("QRawFont::fromFont")

	return NewQRawFontFromPointer(C.QRawFont_QRawFont_FromFont(PointerFromQFont(font), C.int(writingSystem)))
}

func (ptr *QRawFont) HintingPreference() QFont__HintingPreference {
	defer qt.Recovering("QRawFont::hintingPreference")

	if ptr.Pointer() != nil {
		return QFont__HintingPreference(C.QRawFont_HintingPreference(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) IsValid() bool {
	defer qt.Recovering("QRawFont::isValid")

	if ptr.Pointer() != nil {
		return C.QRawFont_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRawFont) Leading() float64 {
	defer qt.Recovering("QRawFont::leading")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) LineThickness() float64 {
	defer qt.Recovering("QRawFont::lineThickness")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_LineThickness(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) LoadFromData(fontData string, pixelSize float64, hintingPreference QFont__HintingPreference) {
	defer qt.Recovering("QRawFont::loadFromData")

	if ptr.Pointer() != nil {
		C.QRawFont_LoadFromData(ptr.Pointer(), C.CString(fontData), C.double(pixelSize), C.int(hintingPreference))
	}
}

func (ptr *QRawFont) LoadFromFile(fileName string, pixelSize float64, hintingPreference QFont__HintingPreference) {
	defer qt.Recovering("QRawFont::loadFromFile")

	if ptr.Pointer() != nil {
		C.QRawFont_LoadFromFile(ptr.Pointer(), C.CString(fileName), C.double(pixelSize), C.int(hintingPreference))
	}
}

func (ptr *QRawFont) MaxCharWidth() float64 {
	defer qt.Recovering("QRawFont::maxCharWidth")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_MaxCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) PixelSize() float64 {
	defer qt.Recovering("QRawFont::pixelSize")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_PixelSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) SetPixelSize(pixelSize float64) {
	defer qt.Recovering("QRawFont::setPixelSize")

	if ptr.Pointer() != nil {
		C.QRawFont_SetPixelSize(ptr.Pointer(), C.double(pixelSize))
	}
}

func (ptr *QRawFont) Style() QFont__Style {
	defer qt.Recovering("QRawFont::style")

	if ptr.Pointer() != nil {
		return QFont__Style(C.QRawFont_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) StyleName() string {
	defer qt.Recovering("QRawFont::styleName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRawFont_StyleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRawFont) SupportsCharacter(character core.QChar_ITF) bool {
	defer qt.Recovering("QRawFont::supportsCharacter")

	if ptr.Pointer() != nil {
		return C.QRawFont_SupportsCharacter(ptr.Pointer(), core.PointerFromQChar(character)) != 0
	}
	return false
}

func (ptr *QRawFont) Swap(other QRawFont_ITF) {
	defer qt.Recovering("QRawFont::swap")

	if ptr.Pointer() != nil {
		C.QRawFont_Swap(ptr.Pointer(), PointerFromQRawFont(other))
	}
}

func (ptr *QRawFont) UnderlinePosition() float64 {
	defer qt.Recovering("QRawFont::underlinePosition")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_UnderlinePosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) UnitsPerEm() float64 {
	defer qt.Recovering("QRawFont::unitsPerEm")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_UnitsPerEm(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) Weight() int {
	defer qt.Recovering("QRawFont::weight")

	if ptr.Pointer() != nil {
		return int(C.QRawFont_Weight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) XHeight() float64 {
	defer qt.Recovering("QRawFont::xHeight")

	if ptr.Pointer() != nil {
		return float64(C.QRawFont_XHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) DestroyQRawFont() {
	defer qt.Recovering("QRawFont::~QRawFont")

	if ptr.Pointer() != nil {
		C.QRawFont_DestroyQRawFont(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QRegExpValidator struct {
	QValidator
}

type QRegExpValidator_ITF interface {
	QValidator_ITF
	QRegExpValidator_PTR() *QRegExpValidator
}

func (p *QRegExpValidator) QRegExpValidator_PTR() *QRegExpValidator {
	return p
}

func (p *QRegExpValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QValidator_PTR().Pointer()
	}
	return nil
}

func (p *QRegExpValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QValidator_PTR().SetPointer(ptr)
	}
}

func PointerFromQRegExpValidator(ptr QRegExpValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegExpValidator_PTR().Pointer()
	}
	return nil
}

func NewQRegExpValidatorFromPointer(ptr unsafe.Pointer) *QRegExpValidator {
	var n = new(QRegExpValidator)
	n.SetPointer(ptr)
	return n
}

func newQRegExpValidatorFromPointer(ptr unsafe.Pointer) *QRegExpValidator {
	var n = NewQRegExpValidatorFromPointer(ptr)
	for len(n.ObjectName()) < len("QRegExpValidator_") {
		n.SetObjectName("QRegExpValidator_" + qt.Identifier())
	}
	return n
}

func (ptr *QRegExpValidator) SetRegExp(rx core.QRegExp_ITF) {
	defer qt.Recovering("QRegExpValidator::setRegExp")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_SetRegExp(ptr.Pointer(), core.PointerFromQRegExp(rx))
	}
}

func NewQRegExpValidator(parent core.QObject_ITF) *QRegExpValidator {
	defer qt.Recovering("QRegExpValidator::QRegExpValidator")

	return newQRegExpValidatorFromPointer(C.QRegExpValidator_NewQRegExpValidator(core.PointerFromQObject(parent)))
}

func NewQRegExpValidator2(rx core.QRegExp_ITF, parent core.QObject_ITF) *QRegExpValidator {
	defer qt.Recovering("QRegExpValidator::QRegExpValidator")

	return newQRegExpValidatorFromPointer(C.QRegExpValidator_NewQRegExpValidator2(core.PointerFromQRegExp(rx), core.PointerFromQObject(parent)))
}

func (ptr *QRegExpValidator) RegExp() *core.QRegExp {
	defer qt.Recovering("QRegExpValidator::regExp")

	if ptr.Pointer() != nil {
		return core.NewQRegExpFromPointer(C.QRegExpValidator_RegExp(ptr.Pointer()))
	}
	return nil
}

//export callbackQRegExpValidator_Validate
func callbackQRegExpValidator_Validate(ptr unsafe.Pointer, ptrName *C.char, input *C.char, pos C.int) C.int {
	defer qt.Recovering("callback QRegExpValidator::validate")

	if signal := qt.GetSignal(C.GoString(ptrName), "validate"); signal != nil {
		return C.int(signal.(func(string, int) QValidator__State)(C.GoString(input), int(pos)))
	}

	return C.int(NewQRegExpValidatorFromPointer(ptr).ValidateDefault(C.GoString(input), int(pos)))
}

func (ptr *QRegExpValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	defer qt.Recovering("connect QRegExpValidator::validate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "validate", f)
	}
}

func (ptr *QRegExpValidator) DisconnectValidate() {
	defer qt.Recovering("disconnect QRegExpValidator::validate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "validate")
	}
}

func (ptr *QRegExpValidator) Validate(input string, pos int) QValidator__State {
	defer qt.Recovering("QRegExpValidator::validate")

	if ptr.Pointer() != nil {

	}
	return 0
}

func (ptr *QRegExpValidator) ValidateDefault(input string, pos int) QValidator__State {
	defer qt.Recovering("QRegExpValidator::validate")

	if ptr.Pointer() != nil {

	}
	return 0
}

func (ptr *QRegExpValidator) DestroyQRegExpValidator() {
	defer qt.Recovering("QRegExpValidator::~QRegExpValidator")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_DestroyQRegExpValidator(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQRegExpValidator_Fixup
func callbackQRegExpValidator_Fixup(ptr unsafe.Pointer, ptrName *C.char, input *C.char) {
	defer qt.Recovering("callback QRegExpValidator::fixup")

	if signal := qt.GetSignal(C.GoString(ptrName), "fixup"); signal != nil {
		signal.(func(string))(C.GoString(input))
	} else {
		NewQRegExpValidatorFromPointer(ptr).FixupDefault(C.GoString(input))
	}
}

func (ptr *QRegExpValidator) ConnectFixup(f func(input string)) {
	defer qt.Recovering("connect QRegExpValidator::fixup")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "fixup", f)
	}
}

func (ptr *QRegExpValidator) DisconnectFixup() {
	defer qt.Recovering("disconnect QRegExpValidator::fixup")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "fixup")
	}
}

func (ptr *QRegExpValidator) Fixup(input string) {
	defer qt.Recovering("QRegExpValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

func (ptr *QRegExpValidator) FixupDefault(input string) {
	defer qt.Recovering("QRegExpValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

//export callbackQRegExpValidator_TimerEvent
func callbackQRegExpValidator_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRegExpValidator::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRegExpValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRegExpValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QRegExpValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QRegExpValidator) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QRegExpValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QRegExpValidator) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRegExpValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRegExpValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRegExpValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRegExpValidator_ChildEvent
func callbackQRegExpValidator_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRegExpValidator::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRegExpValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRegExpValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QRegExpValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QRegExpValidator) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QRegExpValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QRegExpValidator) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRegExpValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRegExpValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRegExpValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRegExpValidator_ConnectNotify
func callbackQRegExpValidator_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRegExpValidator::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRegExpValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRegExpValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRegExpValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QRegExpValidator) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QRegExpValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QRegExpValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRegExpValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRegExpValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRegExpValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRegExpValidator_CustomEvent
func callbackQRegExpValidator_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRegExpValidator::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRegExpValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRegExpValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QRegExpValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QRegExpValidator) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QRegExpValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QRegExpValidator) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QRegExpValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRegExpValidator) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QRegExpValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRegExpValidator_DeleteLater
func callbackQRegExpValidator_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRegExpValidator::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRegExpValidator) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QRegExpValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QRegExpValidator) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QRegExpValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QRegExpValidator) DeleteLater() {
	defer qt.Recovering("QRegExpValidator::deleteLater")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQRegExpValidator_DisconnectNotify
func callbackQRegExpValidator_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRegExpValidator::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRegExpValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRegExpValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRegExpValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QRegExpValidator) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QRegExpValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QRegExpValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRegExpValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRegExpValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRegExpValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRegExpValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRegExpValidator_Event
func callbackQRegExpValidator_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QRegExpValidator::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQRegExpValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QRegExpValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QRegExpValidator::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QRegExpValidator) DisconnectEvent() {
	defer qt.Recovering("disconnect QRegExpValidator::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QRegExpValidator) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRegExpValidator::event")

	if ptr.Pointer() != nil {
		return C.QRegExpValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QRegExpValidator) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRegExpValidator::event")

	if ptr.Pointer() != nil {
		return C.QRegExpValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQRegExpValidator_EventFilter
func callbackQRegExpValidator_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QRegExpValidator::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQRegExpValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QRegExpValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QRegExpValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QRegExpValidator) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QRegExpValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QRegExpValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRegExpValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRegExpValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRegExpValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRegExpValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRegExpValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRegExpValidator_MetaObject
func callbackQRegExpValidator_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QRegExpValidator::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRegExpValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRegExpValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QRegExpValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QRegExpValidator) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QRegExpValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QRegExpValidator) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QRegExpValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRegExpValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRegExpValidator) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QRegExpValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRegExpValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QRegion::RegionType
type QRegion__RegionType int64

const (
	QRegion__Rectangle = QRegion__RegionType(0)
	QRegion__Ellipse   = QRegion__RegionType(1)
)

type QRegion struct {
	ptr unsafe.Pointer
}

type QRegion_ITF interface {
	QRegion_PTR() *QRegion
}

func (p *QRegion) QRegion_PTR() *QRegion {
	return p
}

func (p *QRegion) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRegion) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRegion(ptr QRegion_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegion_PTR().Pointer()
	}
	return nil
}

func NewQRegionFromPointer(ptr unsafe.Pointer) *QRegion {
	var n = new(QRegion)
	n.SetPointer(ptr)
	return n
}

func newQRegionFromPointer(ptr unsafe.Pointer) *QRegion {
	var n = NewQRegionFromPointer(ptr)
	return n
}

func NewQRegion() *QRegion {
	defer qt.Recovering("QRegion::QRegion")

	return newQRegionFromPointer(C.QRegion_NewQRegion())
}

func NewQRegion5(bm QBitmap_ITF) *QRegion {
	defer qt.Recovering("QRegion::QRegion")

	return newQRegionFromPointer(C.QRegion_NewQRegion5(PointerFromQBitmap(bm)))
}

func NewQRegion3(a QPolygon_ITF, fillRule core.Qt__FillRule) *QRegion {
	defer qt.Recovering("QRegion::QRegion")

	return newQRegionFromPointer(C.QRegion_NewQRegion3(PointerFromQPolygon(a), C.int(fillRule)))
}

func NewQRegion6(r core.QRect_ITF, t QRegion__RegionType) *QRegion {
	defer qt.Recovering("QRegion::QRegion")

	return newQRegionFromPointer(C.QRegion_NewQRegion6(core.PointerFromQRect(r), C.int(t)))
}

func NewQRegion4(r QRegion_ITF) *QRegion {
	defer qt.Recovering("QRegion::QRegion")

	return newQRegionFromPointer(C.QRegion_NewQRegion4(PointerFromQRegion(r)))
}

func (ptr *QRegion) BoundingRect() *core.QRect {
	defer qt.Recovering("QRegion::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QRegion_BoundingRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRegion) Contains(p core.QPoint_ITF) bool {
	defer qt.Recovering("QRegion::contains")

	if ptr.Pointer() != nil {
		return C.QRegion_Contains(ptr.Pointer(), core.PointerFromQPoint(p)) != 0
	}
	return false
}

func (ptr *QRegion) Contains2(r core.QRect_ITF) bool {
	defer qt.Recovering("QRegion::contains")

	if ptr.Pointer() != nil {
		return C.QRegion_Contains2(ptr.Pointer(), core.PointerFromQRect(r)) != 0
	}
	return false
}

func (ptr *QRegion) Intersected2(rect core.QRect_ITF) *QRegion {
	defer qt.Recovering("QRegion::intersected")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QRegion_Intersected2(ptr.Pointer(), core.PointerFromQRect(rect)))
	}
	return nil
}

func (ptr *QRegion) Intersected(r QRegion_ITF) *QRegion {
	defer qt.Recovering("QRegion::intersected")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QRegion_Intersected(ptr.Pointer(), PointerFromQRegion(r)))
	}
	return nil
}

func (ptr *QRegion) Intersects2(rect core.QRect_ITF) bool {
	defer qt.Recovering("QRegion::intersects")

	if ptr.Pointer() != nil {
		return C.QRegion_Intersects2(ptr.Pointer(), core.PointerFromQRect(rect)) != 0
	}
	return false
}

func (ptr *QRegion) IsEmpty() bool {
	defer qt.Recovering("QRegion::isEmpty")

	if ptr.Pointer() != nil {
		return C.QRegion_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegion) IsNull() bool {
	defer qt.Recovering("QRegion::isNull")

	if ptr.Pointer() != nil {
		return C.QRegion_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegion) RectCount() int {
	defer qt.Recovering("QRegion::rectCount")

	if ptr.Pointer() != nil {
		return int(C.QRegion_RectCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRegion) SetRects(rects core.QRect_ITF, number int) {
	defer qt.Recovering("QRegion::setRects")

	if ptr.Pointer() != nil {
		C.QRegion_SetRects(ptr.Pointer(), core.PointerFromQRect(rects), C.int(number))
	}
}

func (ptr *QRegion) Subtracted(r QRegion_ITF) *QRegion {
	defer qt.Recovering("QRegion::subtracted")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QRegion_Subtracted(ptr.Pointer(), PointerFromQRegion(r)))
	}
	return nil
}

func (ptr *QRegion) Translate(dx int, dy int) {
	defer qt.Recovering("QRegion::translate")

	if ptr.Pointer() != nil {
		C.QRegion_Translate(ptr.Pointer(), C.int(dx), C.int(dy))
	}
}

func (ptr *QRegion) United2(rect core.QRect_ITF) *QRegion {
	defer qt.Recovering("QRegion::united")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QRegion_United2(ptr.Pointer(), core.PointerFromQRect(rect)))
	}
	return nil
}

func (ptr *QRegion) United(r QRegion_ITF) *QRegion {
	defer qt.Recovering("QRegion::united")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QRegion_United(ptr.Pointer(), PointerFromQRegion(r)))
	}
	return nil
}

func (ptr *QRegion) Xored(r QRegion_ITF) *QRegion {
	defer qt.Recovering("QRegion::xored")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QRegion_Xored(ptr.Pointer(), PointerFromQRegion(r)))
	}
	return nil
}

func NewQRegion2(x int, y int, w int, h int, t QRegion__RegionType) *QRegion {
	defer qt.Recovering("QRegion::QRegion")

	return newQRegionFromPointer(C.QRegion_NewQRegion2(C.int(x), C.int(y), C.int(w), C.int(h), C.int(t)))
}

func (ptr *QRegion) Intersects(region QRegion_ITF) bool {
	defer qt.Recovering("QRegion::intersects")

	if ptr.Pointer() != nil {
		return C.QRegion_Intersects(ptr.Pointer(), PointerFromQRegion(region)) != 0
	}
	return false
}

func (ptr *QRegion) Swap(other QRegion_ITF) {
	defer qt.Recovering("QRegion::swap")

	if ptr.Pointer() != nil {
		C.QRegion_Swap(ptr.Pointer(), PointerFromQRegion(other))
	}
}

func (ptr *QRegion) Translate2(point core.QPoint_ITF) {
	defer qt.Recovering("QRegion::translate")

	if ptr.Pointer() != nil {
		C.QRegion_Translate2(ptr.Pointer(), core.PointerFromQPoint(point))
	}
}

func (ptr *QRegion) Translated2(p core.QPoint_ITF) *QRegion {
	defer qt.Recovering("QRegion::translated")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QRegion_Translated2(ptr.Pointer(), core.PointerFromQPoint(p)))
	}
	return nil
}

func (ptr *QRegion) Translated(dx int, dy int) *QRegion {
	defer qt.Recovering("QRegion::translated")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QRegion_Translated(ptr.Pointer(), C.int(dx), C.int(dy)))
	}
	return nil
}

type QRegularExpressionValidator struct {
	QValidator
}

type QRegularExpressionValidator_ITF interface {
	QValidator_ITF
	QRegularExpressionValidator_PTR() *QRegularExpressionValidator
}

func (p *QRegularExpressionValidator) QRegularExpressionValidator_PTR() *QRegularExpressionValidator {
	return p
}

func (p *QRegularExpressionValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QValidator_PTR().Pointer()
	}
	return nil
}

func (p *QRegularExpressionValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QValidator_PTR().SetPointer(ptr)
	}
}

func PointerFromQRegularExpressionValidator(ptr QRegularExpressionValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegularExpressionValidator_PTR().Pointer()
	}
	return nil
}

func NewQRegularExpressionValidatorFromPointer(ptr unsafe.Pointer) *QRegularExpressionValidator {
	var n = new(QRegularExpressionValidator)
	n.SetPointer(ptr)
	return n
}

func newQRegularExpressionValidatorFromPointer(ptr unsafe.Pointer) *QRegularExpressionValidator {
	var n = NewQRegularExpressionValidatorFromPointer(ptr)
	for len(n.ObjectName()) < len("QRegularExpressionValidator_") {
		n.SetObjectName("QRegularExpressionValidator_" + qt.Identifier())
	}
	return n
}

func (ptr *QRegularExpressionValidator) RegularExpression() *core.QRegularExpression {
	defer qt.Recovering("QRegularExpressionValidator::regularExpression")

	if ptr.Pointer() != nil {
		return core.NewQRegularExpressionFromPointer(C.QRegularExpressionValidator_RegularExpression(ptr.Pointer()))
	}
	return nil
}

//export callbackQRegularExpressionValidator_SetRegularExpression
func callbackQRegularExpressionValidator_SetRegularExpression(ptr unsafe.Pointer, ptrName *C.char, re unsafe.Pointer) {
	defer qt.Recovering("callback QRegularExpressionValidator::setRegularExpression")

	if signal := qt.GetSignal(C.GoString(ptrName), "setRegularExpression"); signal != nil {
		signal.(func(*core.QRegularExpression))(core.NewQRegularExpressionFromPointer(re))
	}

}

func (ptr *QRegularExpressionValidator) ConnectSetRegularExpression(f func(re *core.QRegularExpression)) {
	defer qt.Recovering("connect QRegularExpressionValidator::setRegularExpression")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setRegularExpression", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectSetRegularExpression(re core.QRegularExpression_ITF) {
	defer qt.Recovering("disconnect QRegularExpressionValidator::setRegularExpression")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setRegularExpression")
	}
}

func (ptr *QRegularExpressionValidator) SetRegularExpression(re core.QRegularExpression_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::setRegularExpression")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_SetRegularExpression(ptr.Pointer(), core.PointerFromQRegularExpression(re))
	}
}

func NewQRegularExpressionValidator(parent core.QObject_ITF) *QRegularExpressionValidator {
	defer qt.Recovering("QRegularExpressionValidator::QRegularExpressionValidator")

	return newQRegularExpressionValidatorFromPointer(C.QRegularExpressionValidator_NewQRegularExpressionValidator(core.PointerFromQObject(parent)))
}

func NewQRegularExpressionValidator2(re core.QRegularExpression_ITF, parent core.QObject_ITF) *QRegularExpressionValidator {
	defer qt.Recovering("QRegularExpressionValidator::QRegularExpressionValidator")

	return newQRegularExpressionValidatorFromPointer(C.QRegularExpressionValidator_NewQRegularExpressionValidator2(core.PointerFromQRegularExpression(re), core.PointerFromQObject(parent)))
}

//export callbackQRegularExpressionValidator_RegularExpressionChanged
func callbackQRegularExpressionValidator_RegularExpressionChanged(ptr unsafe.Pointer, ptrName *C.char, re unsafe.Pointer) {
	defer qt.Recovering("callback QRegularExpressionValidator::regularExpressionChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "regularExpressionChanged"); signal != nil {
		signal.(func(*core.QRegularExpression))(core.NewQRegularExpressionFromPointer(re))
	}

}

func (ptr *QRegularExpressionValidator) ConnectRegularExpressionChanged(f func(re *core.QRegularExpression)) {
	defer qt.Recovering("connect QRegularExpressionValidator::regularExpressionChanged")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ConnectRegularExpressionChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "regularExpressionChanged", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectRegularExpressionChanged() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::regularExpressionChanged")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DisconnectRegularExpressionChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "regularExpressionChanged")
	}
}

func (ptr *QRegularExpressionValidator) RegularExpressionChanged(re core.QRegularExpression_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::regularExpressionChanged")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_RegularExpressionChanged(ptr.Pointer(), core.PointerFromQRegularExpression(re))
	}
}

//export callbackQRegularExpressionValidator_Validate
func callbackQRegularExpressionValidator_Validate(ptr unsafe.Pointer, ptrName *C.char, input *C.char, pos C.int) C.int {
	defer qt.Recovering("callback QRegularExpressionValidator::validate")

	if signal := qt.GetSignal(C.GoString(ptrName), "validate"); signal != nil {
		return C.int(signal.(func(string, int) QValidator__State)(C.GoString(input), int(pos)))
	}

	return C.int(NewQRegularExpressionValidatorFromPointer(ptr).ValidateDefault(C.GoString(input), int(pos)))
}

func (ptr *QRegularExpressionValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	defer qt.Recovering("connect QRegularExpressionValidator::validate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "validate", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectValidate() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::validate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "validate")
	}
}

func (ptr *QRegularExpressionValidator) Validate(input string, pos int) QValidator__State {
	defer qt.Recovering("QRegularExpressionValidator::validate")

	if ptr.Pointer() != nil {

	}
	return 0
}

func (ptr *QRegularExpressionValidator) ValidateDefault(input string, pos int) QValidator__State {
	defer qt.Recovering("QRegularExpressionValidator::validate")

	if ptr.Pointer() != nil {

	}
	return 0
}

func (ptr *QRegularExpressionValidator) DestroyQRegularExpressionValidator() {
	defer qt.Recovering("QRegularExpressionValidator::~QRegularExpressionValidator")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DestroyQRegularExpressionValidator(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQRegularExpressionValidator_Fixup
func callbackQRegularExpressionValidator_Fixup(ptr unsafe.Pointer, ptrName *C.char, input *C.char) {
	defer qt.Recovering("callback QRegularExpressionValidator::fixup")

	if signal := qt.GetSignal(C.GoString(ptrName), "fixup"); signal != nil {
		signal.(func(string))(C.GoString(input))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).FixupDefault(C.GoString(input))
	}
}

func (ptr *QRegularExpressionValidator) ConnectFixup(f func(input string)) {
	defer qt.Recovering("connect QRegularExpressionValidator::fixup")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "fixup", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectFixup() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::fixup")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "fixup")
	}
}

func (ptr *QRegularExpressionValidator) Fixup(input string) {
	defer qt.Recovering("QRegularExpressionValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

func (ptr *QRegularExpressionValidator) FixupDefault(input string) {
	defer qt.Recovering("QRegularExpressionValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

//export callbackQRegularExpressionValidator_TimerEvent
func callbackQRegularExpressionValidator_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRegularExpressionValidator::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRegularExpressionValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QRegularExpressionValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QRegularExpressionValidator) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRegularExpressionValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRegularExpressionValidator_ChildEvent
func callbackQRegularExpressionValidator_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRegularExpressionValidator::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRegularExpressionValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QRegularExpressionValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QRegularExpressionValidator) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRegularExpressionValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRegularExpressionValidator_ConnectNotify
func callbackQRegularExpressionValidator_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRegularExpressionValidator::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRegularExpressionValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRegularExpressionValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QRegularExpressionValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRegularExpressionValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRegularExpressionValidator_CustomEvent
func callbackQRegularExpressionValidator_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QRegularExpressionValidator::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRegularExpressionValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QRegularExpressionValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QRegularExpressionValidator) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRegularExpressionValidator) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRegularExpressionValidator_DeleteLater
func callbackQRegularExpressionValidator_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QRegularExpressionValidator::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRegularExpressionValidator) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QRegularExpressionValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QRegularExpressionValidator) DeleteLater() {
	defer qt.Recovering("QRegularExpressionValidator::deleteLater")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQRegularExpressionValidator_DisconnectNotify
func callbackQRegularExpressionValidator_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRegularExpressionValidator::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRegularExpressionValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRegularExpressionValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QRegularExpressionValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRegularExpressionValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRegularExpressionValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRegularExpressionValidator_Event
func callbackQRegularExpressionValidator_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QRegularExpressionValidator::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQRegularExpressionValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QRegularExpressionValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QRegularExpressionValidator::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectEvent() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QRegularExpressionValidator) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRegularExpressionValidator::event")

	if ptr.Pointer() != nil {
		return C.QRegularExpressionValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QRegularExpressionValidator) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRegularExpressionValidator::event")

	if ptr.Pointer() != nil {
		return C.QRegularExpressionValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQRegularExpressionValidator_EventFilter
func callbackQRegularExpressionValidator_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QRegularExpressionValidator::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQRegularExpressionValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QRegularExpressionValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QRegularExpressionValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QRegularExpressionValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRegularExpressionValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRegularExpressionValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRegularExpressionValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRegularExpressionValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRegularExpressionValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRegularExpressionValidator_MetaObject
func callbackQRegularExpressionValidator_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QRegularExpressionValidator::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRegularExpressionValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRegularExpressionValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QRegularExpressionValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QRegularExpressionValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QRegularExpressionValidator) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QRegularExpressionValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRegularExpressionValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRegularExpressionValidator) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QRegularExpressionValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRegularExpressionValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QResizeEvent struct {
	core.QEvent
}

type QResizeEvent_ITF interface {
	core.QEvent_ITF
	QResizeEvent_PTR() *QResizeEvent
}

func (p *QResizeEvent) QResizeEvent_PTR() *QResizeEvent {
	return p
}

func (p *QResizeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QResizeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQResizeEvent(ptr QResizeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QResizeEvent_PTR().Pointer()
	}
	return nil
}

func NewQResizeEventFromPointer(ptr unsafe.Pointer) *QResizeEvent {
	var n = new(QResizeEvent)
	n.SetPointer(ptr)
	return n
}

func newQResizeEventFromPointer(ptr unsafe.Pointer) *QResizeEvent {
	var n = NewQResizeEventFromPointer(ptr)
	return n
}

func NewQResizeEvent(size core.QSize_ITF, oldSize core.QSize_ITF) *QResizeEvent {
	defer qt.Recovering("QResizeEvent::QResizeEvent")

	return newQResizeEventFromPointer(C.QResizeEvent_NewQResizeEvent(core.PointerFromQSize(size), core.PointerFromQSize(oldSize)))
}

func (ptr *QResizeEvent) OldSize() *core.QSize {
	defer qt.Recovering("QResizeEvent::oldSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QResizeEvent_OldSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QResizeEvent) Size() *core.QSize {
	defer qt.Recovering("QResizeEvent::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QResizeEvent_Size(ptr.Pointer()))
	}
	return nil
}

type QScreen struct {
	core.QObject
}

type QScreen_ITF interface {
	core.QObject_ITF
	QScreen_PTR() *QScreen
}

func (p *QScreen) QScreen_PTR() *QScreen {
	return p
}

func (p *QScreen) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QScreen) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQScreen(ptr QScreen_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScreen_PTR().Pointer()
	}
	return nil
}

func NewQScreenFromPointer(ptr unsafe.Pointer) *QScreen {
	var n = new(QScreen)
	n.SetPointer(ptr)
	return n
}

func newQScreenFromPointer(ptr unsafe.Pointer) *QScreen {
	var n = NewQScreenFromPointer(ptr)
	for len(n.ObjectName()) < len("QScreen_") {
		n.SetObjectName("QScreen_" + qt.Identifier())
	}
	return n
}

func (ptr *QScreen) AvailableGeometry() *core.QRect {
	defer qt.Recovering("QScreen::availableGeometry")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QScreen_AvailableGeometry(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) AvailableSize() *core.QSize {
	defer qt.Recovering("QScreen::availableSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QScreen_AvailableSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) AvailableVirtualGeometry() *core.QRect {
	defer qt.Recovering("QScreen::availableVirtualGeometry")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QScreen_AvailableVirtualGeometry(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) AvailableVirtualSize() *core.QSize {
	defer qt.Recovering("QScreen::availableVirtualSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QScreen_AvailableVirtualSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) Depth() int {
	defer qt.Recovering("QScreen::depth")

	if ptr.Pointer() != nil {
		return int(C.QScreen_Depth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) DevicePixelRatio() float64 {
	defer qt.Recovering("QScreen::devicePixelRatio")

	if ptr.Pointer() != nil {
		return float64(C.QScreen_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) Geometry() *core.QRect {
	defer qt.Recovering("QScreen::geometry")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QScreen_Geometry(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) LogicalDotsPerInch() float64 {
	defer qt.Recovering("QScreen::logicalDotsPerInch")

	if ptr.Pointer() != nil {
		return float64(C.QScreen_LogicalDotsPerInch(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) LogicalDotsPerInchX() float64 {
	defer qt.Recovering("QScreen::logicalDotsPerInchX")

	if ptr.Pointer() != nil {
		return float64(C.QScreen_LogicalDotsPerInchX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) LogicalDotsPerInchY() float64 {
	defer qt.Recovering("QScreen::logicalDotsPerInchY")

	if ptr.Pointer() != nil {
		return float64(C.QScreen_LogicalDotsPerInchY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) Name() string {
	defer qt.Recovering("QScreen::name")

	if ptr.Pointer() != nil {
		return C.GoString(C.QScreen_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QScreen) NativeOrientation() core.Qt__ScreenOrientation {
	defer qt.Recovering("QScreen::nativeOrientation")

	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_NativeOrientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) Orientation() core.Qt__ScreenOrientation {
	defer qt.Recovering("QScreen::orientation")

	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_Orientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalDotsPerInch() float64 {
	defer qt.Recovering("QScreen::physicalDotsPerInch")

	if ptr.Pointer() != nil {
		return float64(C.QScreen_PhysicalDotsPerInch(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalDotsPerInchX() float64 {
	defer qt.Recovering("QScreen::physicalDotsPerInchX")

	if ptr.Pointer() != nil {
		return float64(C.QScreen_PhysicalDotsPerInchX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalDotsPerInchY() float64 {
	defer qt.Recovering("QScreen::physicalDotsPerInchY")

	if ptr.Pointer() != nil {
		return float64(C.QScreen_PhysicalDotsPerInchY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalSize() *core.QSizeF {
	defer qt.Recovering("QScreen::physicalSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QScreen_PhysicalSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) PrimaryOrientation() core.Qt__ScreenOrientation {
	defer qt.Recovering("QScreen::primaryOrientation")

	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_PrimaryOrientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) RefreshRate() float64 {
	defer qt.Recovering("QScreen::refreshRate")

	if ptr.Pointer() != nil {
		return float64(C.QScreen_RefreshRate(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) Size() *core.QSize {
	defer qt.Recovering("QScreen::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QScreen_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) VirtualGeometry() *core.QRect {
	defer qt.Recovering("QScreen::virtualGeometry")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QScreen_VirtualGeometry(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) VirtualSize() *core.QSize {
	defer qt.Recovering("QScreen::virtualSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QScreen_VirtualSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) AngleBetween(a core.Qt__ScreenOrientation, b core.Qt__ScreenOrientation) int {
	defer qt.Recovering("QScreen::angleBetween")

	if ptr.Pointer() != nil {
		return int(C.QScreen_AngleBetween(ptr.Pointer(), C.int(a), C.int(b)))
	}
	return 0
}

//export callbackQScreen_AvailableGeometryChanged
func callbackQScreen_AvailableGeometryChanged(ptr unsafe.Pointer, ptrName *C.char, geometry unsafe.Pointer) {
	defer qt.Recovering("callback QScreen::availableGeometryChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "availableGeometryChanged"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(geometry))
	}

}

func (ptr *QScreen) ConnectAvailableGeometryChanged(f func(geometry *core.QRect)) {
	defer qt.Recovering("connect QScreen::availableGeometryChanged")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectAvailableGeometryChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "availableGeometryChanged", f)
	}
}

func (ptr *QScreen) DisconnectAvailableGeometryChanged() {
	defer qt.Recovering("disconnect QScreen::availableGeometryChanged")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectAvailableGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "availableGeometryChanged")
	}
}

func (ptr *QScreen) AvailableGeometryChanged(geometry core.QRect_ITF) {
	defer qt.Recovering("QScreen::availableGeometryChanged")

	if ptr.Pointer() != nil {
		C.QScreen_AvailableGeometryChanged(ptr.Pointer(), core.PointerFromQRect(geometry))
	}
}

//export callbackQScreen_GeometryChanged
func callbackQScreen_GeometryChanged(ptr unsafe.Pointer, ptrName *C.char, geometry unsafe.Pointer) {
	defer qt.Recovering("callback QScreen::geometryChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "geometryChanged"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(geometry))
	}

}

func (ptr *QScreen) ConnectGeometryChanged(f func(geometry *core.QRect)) {
	defer qt.Recovering("connect QScreen::geometryChanged")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectGeometryChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "geometryChanged", f)
	}
}

func (ptr *QScreen) DisconnectGeometryChanged() {
	defer qt.Recovering("disconnect QScreen::geometryChanged")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "geometryChanged")
	}
}

func (ptr *QScreen) GeometryChanged(geometry core.QRect_ITF) {
	defer qt.Recovering("QScreen::geometryChanged")

	if ptr.Pointer() != nil {
		C.QScreen_GeometryChanged(ptr.Pointer(), core.PointerFromQRect(geometry))
	}
}

func (ptr *QScreen) GrabWindow(window uintptr, x int, y int, width int, height int) *QPixmap {
	defer qt.Recovering("QScreen::grabWindow")

	if ptr.Pointer() != nil {
		return NewQPixmapFromPointer(C.QScreen_GrabWindow(ptr.Pointer(), C.ulonglong(window), C.int(x), C.int(y), C.int(width), C.int(height)))
	}
	return nil
}

func (ptr *QScreen) IsLandscape(o core.Qt__ScreenOrientation) bool {
	defer qt.Recovering("QScreen::isLandscape")

	if ptr.Pointer() != nil {
		return C.QScreen_IsLandscape(ptr.Pointer(), C.int(o)) != 0
	}
	return false
}

func (ptr *QScreen) IsPortrait(o core.Qt__ScreenOrientation) bool {
	defer qt.Recovering("QScreen::isPortrait")

	if ptr.Pointer() != nil {
		return C.QScreen_IsPortrait(ptr.Pointer(), C.int(o)) != 0
	}
	return false
}

//export callbackQScreen_LogicalDotsPerInchChanged
func callbackQScreen_LogicalDotsPerInchChanged(ptr unsafe.Pointer, ptrName *C.char, dpi C.double) {
	defer qt.Recovering("callback QScreen::logicalDotsPerInchChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "logicalDotsPerInchChanged"); signal != nil {
		signal.(func(float64))(float64(dpi))
	}

}

func (ptr *QScreen) ConnectLogicalDotsPerInchChanged(f func(dpi float64)) {
	defer qt.Recovering("connect QScreen::logicalDotsPerInchChanged")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectLogicalDotsPerInchChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "logicalDotsPerInchChanged", f)
	}
}

func (ptr *QScreen) DisconnectLogicalDotsPerInchChanged() {
	defer qt.Recovering("disconnect QScreen::logicalDotsPerInchChanged")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectLogicalDotsPerInchChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "logicalDotsPerInchChanged")
	}
}

func (ptr *QScreen) LogicalDotsPerInchChanged(dpi float64) {
	defer qt.Recovering("QScreen::logicalDotsPerInchChanged")

	if ptr.Pointer() != nil {
		C.QScreen_LogicalDotsPerInchChanged(ptr.Pointer(), C.double(dpi))
	}
}

func (ptr *QScreen) MapBetween(a core.Qt__ScreenOrientation, b core.Qt__ScreenOrientation, rect core.QRect_ITF) *core.QRect {
	defer qt.Recovering("QScreen::mapBetween")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QScreen_MapBetween(ptr.Pointer(), C.int(a), C.int(b), core.PointerFromQRect(rect)))
	}
	return nil
}

//export callbackQScreen_OrientationChanged
func callbackQScreen_OrientationChanged(ptr unsafe.Pointer, ptrName *C.char, orientation C.int) {
	defer qt.Recovering("callback QScreen::orientationChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "orientationChanged"); signal != nil {
		signal.(func(core.Qt__ScreenOrientation))(core.Qt__ScreenOrientation(orientation))
	}

}

func (ptr *QScreen) ConnectOrientationChanged(f func(orientation core.Qt__ScreenOrientation)) {
	defer qt.Recovering("connect QScreen::orientationChanged")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectOrientationChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "orientationChanged", f)
	}
}

func (ptr *QScreen) DisconnectOrientationChanged() {
	defer qt.Recovering("disconnect QScreen::orientationChanged")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectOrientationChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "orientationChanged")
	}
}

func (ptr *QScreen) OrientationChanged(orientation core.Qt__ScreenOrientation) {
	defer qt.Recovering("QScreen::orientationChanged")

	if ptr.Pointer() != nil {
		C.QScreen_OrientationChanged(ptr.Pointer(), C.int(orientation))
	}
}

func (ptr *QScreen) OrientationUpdateMask() core.Qt__ScreenOrientation {
	defer qt.Recovering("QScreen::orientationUpdateMask")

	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_OrientationUpdateMask(ptr.Pointer()))
	}
	return 0
}

//export callbackQScreen_PhysicalDotsPerInchChanged
func callbackQScreen_PhysicalDotsPerInchChanged(ptr unsafe.Pointer, ptrName *C.char, dpi C.double) {
	defer qt.Recovering("callback QScreen::physicalDotsPerInchChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "physicalDotsPerInchChanged"); signal != nil {
		signal.(func(float64))(float64(dpi))
	}

}

func (ptr *QScreen) ConnectPhysicalDotsPerInchChanged(f func(dpi float64)) {
	defer qt.Recovering("connect QScreen::physicalDotsPerInchChanged")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectPhysicalDotsPerInchChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "physicalDotsPerInchChanged", f)
	}
}

func (ptr *QScreen) DisconnectPhysicalDotsPerInchChanged() {
	defer qt.Recovering("disconnect QScreen::physicalDotsPerInchChanged")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectPhysicalDotsPerInchChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "physicalDotsPerInchChanged")
	}
}

func (ptr *QScreen) PhysicalDotsPerInchChanged(dpi float64) {
	defer qt.Recovering("QScreen::physicalDotsPerInchChanged")

	if ptr.Pointer() != nil {
		C.QScreen_PhysicalDotsPerInchChanged(ptr.Pointer(), C.double(dpi))
	}
}

//export callbackQScreen_PhysicalSizeChanged
func callbackQScreen_PhysicalSizeChanged(ptr unsafe.Pointer, ptrName *C.char, size unsafe.Pointer) {
	defer qt.Recovering("callback QScreen::physicalSizeChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "physicalSizeChanged"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(size))
	}

}

func (ptr *QScreen) ConnectPhysicalSizeChanged(f func(size *core.QSizeF)) {
	defer qt.Recovering("connect QScreen::physicalSizeChanged")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectPhysicalSizeChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "physicalSizeChanged", f)
	}
}

func (ptr *QScreen) DisconnectPhysicalSizeChanged() {
	defer qt.Recovering("disconnect QScreen::physicalSizeChanged")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectPhysicalSizeChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "physicalSizeChanged")
	}
}

func (ptr *QScreen) PhysicalSizeChanged(size core.QSizeF_ITF) {
	defer qt.Recovering("QScreen::physicalSizeChanged")

	if ptr.Pointer() != nil {
		C.QScreen_PhysicalSizeChanged(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

//export callbackQScreen_PrimaryOrientationChanged
func callbackQScreen_PrimaryOrientationChanged(ptr unsafe.Pointer, ptrName *C.char, orientation C.int) {
	defer qt.Recovering("callback QScreen::primaryOrientationChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "primaryOrientationChanged"); signal != nil {
		signal.(func(core.Qt__ScreenOrientation))(core.Qt__ScreenOrientation(orientation))
	}

}

func (ptr *QScreen) ConnectPrimaryOrientationChanged(f func(orientation core.Qt__ScreenOrientation)) {
	defer qt.Recovering("connect QScreen::primaryOrientationChanged")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectPrimaryOrientationChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "primaryOrientationChanged", f)
	}
}

func (ptr *QScreen) DisconnectPrimaryOrientationChanged() {
	defer qt.Recovering("disconnect QScreen::primaryOrientationChanged")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectPrimaryOrientationChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "primaryOrientationChanged")
	}
}

func (ptr *QScreen) PrimaryOrientationChanged(orientation core.Qt__ScreenOrientation) {
	defer qt.Recovering("QScreen::primaryOrientationChanged")

	if ptr.Pointer() != nil {
		C.QScreen_PrimaryOrientationChanged(ptr.Pointer(), C.int(orientation))
	}
}

//export callbackQScreen_RefreshRateChanged
func callbackQScreen_RefreshRateChanged(ptr unsafe.Pointer, ptrName *C.char, refreshRate C.double) {
	defer qt.Recovering("callback QScreen::refreshRateChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "refreshRateChanged"); signal != nil {
		signal.(func(float64))(float64(refreshRate))
	}

}

func (ptr *QScreen) ConnectRefreshRateChanged(f func(refreshRate float64)) {
	defer qt.Recovering("connect QScreen::refreshRateChanged")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectRefreshRateChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "refreshRateChanged", f)
	}
}

func (ptr *QScreen) DisconnectRefreshRateChanged() {
	defer qt.Recovering("disconnect QScreen::refreshRateChanged")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectRefreshRateChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "refreshRateChanged")
	}
}

func (ptr *QScreen) RefreshRateChanged(refreshRate float64) {
	defer qt.Recovering("QScreen::refreshRateChanged")

	if ptr.Pointer() != nil {
		C.QScreen_RefreshRateChanged(ptr.Pointer(), C.double(refreshRate))
	}
}

func (ptr *QScreen) SetOrientationUpdateMask(mask core.Qt__ScreenOrientation) {
	defer qt.Recovering("QScreen::setOrientationUpdateMask")

	if ptr.Pointer() != nil {
		C.QScreen_SetOrientationUpdateMask(ptr.Pointer(), C.int(mask))
	}
}

//export callbackQScreen_VirtualGeometryChanged
func callbackQScreen_VirtualGeometryChanged(ptr unsafe.Pointer, ptrName *C.char, rect unsafe.Pointer) {
	defer qt.Recovering("callback QScreen::virtualGeometryChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "virtualGeometryChanged"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	}

}

func (ptr *QScreen) ConnectVirtualGeometryChanged(f func(rect *core.QRect)) {
	defer qt.Recovering("connect QScreen::virtualGeometryChanged")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectVirtualGeometryChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "virtualGeometryChanged", f)
	}
}

func (ptr *QScreen) DisconnectVirtualGeometryChanged() {
	defer qt.Recovering("disconnect QScreen::virtualGeometryChanged")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectVirtualGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "virtualGeometryChanged")
	}
}

func (ptr *QScreen) VirtualGeometryChanged(rect core.QRect_ITF) {
	defer qt.Recovering("QScreen::virtualGeometryChanged")

	if ptr.Pointer() != nil {
		C.QScreen_VirtualGeometryChanged(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QScreen) DestroyQScreen() {
	defer qt.Recovering("QScreen::~QScreen")

	if ptr.Pointer() != nil {
		C.QScreen_DestroyQScreen(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQScreen_TimerEvent
func callbackQScreen_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QScreen::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQScreenFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QScreen) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QScreen::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QScreen) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QScreen::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QScreen) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QScreen::timerEvent")

	if ptr.Pointer() != nil {
		C.QScreen_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QScreen) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QScreen::timerEvent")

	if ptr.Pointer() != nil {
		C.QScreen_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQScreen_ChildEvent
func callbackQScreen_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QScreen::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQScreenFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QScreen) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QScreen::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QScreen) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QScreen::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QScreen) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QScreen::childEvent")

	if ptr.Pointer() != nil {
		C.QScreen_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QScreen) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QScreen::childEvent")

	if ptr.Pointer() != nil {
		C.QScreen_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQScreen_ConnectNotify
func callbackQScreen_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QScreen::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQScreenFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QScreen) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QScreen::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QScreen) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QScreen::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QScreen) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QScreen::connectNotify")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QScreen) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QScreen::connectNotify")

	if ptr.Pointer() != nil {
		C.QScreen_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQScreen_CustomEvent
func callbackQScreen_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QScreen::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQScreenFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QScreen) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QScreen::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QScreen) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QScreen::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QScreen) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QScreen::customEvent")

	if ptr.Pointer() != nil {
		C.QScreen_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QScreen) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QScreen::customEvent")

	if ptr.Pointer() != nil {
		C.QScreen_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQScreen_DeleteLater
func callbackQScreen_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QScreen::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QScreen) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QScreen::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QScreen) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QScreen::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QScreen) DeleteLater() {
	defer qt.Recovering("QScreen::deleteLater")

	if ptr.Pointer() != nil {
		C.QScreen_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQScreen_DisconnectNotify
func callbackQScreen_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QScreen::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQScreenFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QScreen) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QScreen::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QScreen) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QScreen::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QScreen) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QScreen::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QScreen) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QScreen::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QScreen_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQScreen_Event
func callbackQScreen_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QScreen::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQScreenFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QScreen) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QScreen::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QScreen) DisconnectEvent() {
	defer qt.Recovering("disconnect QScreen::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QScreen) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QScreen::event")

	if ptr.Pointer() != nil {
		return C.QScreen_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QScreen) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QScreen::event")

	if ptr.Pointer() != nil {
		return C.QScreen_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQScreen_EventFilter
func callbackQScreen_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QScreen::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQScreenFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QScreen) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QScreen::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QScreen) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QScreen::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QScreen) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QScreen::eventFilter")

	if ptr.Pointer() != nil {
		return C.QScreen_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QScreen) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QScreen::eventFilter")

	if ptr.Pointer() != nil {
		return C.QScreen_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQScreen_MetaObject
func callbackQScreen_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QScreen::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQScreenFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QScreen) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QScreen::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QScreen) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QScreen::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QScreen) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QScreen::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QScreen_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QScreen::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QScreen_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QScrollEvent::ScrollState
type QScrollEvent__ScrollState int64

const (
	QScrollEvent__ScrollStarted  = QScrollEvent__ScrollState(0)
	QScrollEvent__ScrollUpdated  = QScrollEvent__ScrollState(1)
	QScrollEvent__ScrollFinished = QScrollEvent__ScrollState(2)
)

type QScrollEvent struct {
	core.QEvent
}

type QScrollEvent_ITF interface {
	core.QEvent_ITF
	QScrollEvent_PTR() *QScrollEvent
}

func (p *QScrollEvent) QScrollEvent_PTR() *QScrollEvent {
	return p
}

func (p *QScrollEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QScrollEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQScrollEvent(ptr QScrollEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScrollEvent_PTR().Pointer()
	}
	return nil
}

func NewQScrollEventFromPointer(ptr unsafe.Pointer) *QScrollEvent {
	var n = new(QScrollEvent)
	n.SetPointer(ptr)
	return n
}

func newQScrollEventFromPointer(ptr unsafe.Pointer) *QScrollEvent {
	var n = NewQScrollEventFromPointer(ptr)
	return n
}

func NewQScrollEvent(contentPos core.QPointF_ITF, overshootDistance core.QPointF_ITF, scrollState QScrollEvent__ScrollState) *QScrollEvent {
	defer qt.Recovering("QScrollEvent::QScrollEvent")

	return newQScrollEventFromPointer(C.QScrollEvent_NewQScrollEvent(core.PointerFromQPointF(contentPos), core.PointerFromQPointF(overshootDistance), C.int(scrollState)))
}

func (ptr *QScrollEvent) ContentPos() *core.QPointF {
	defer qt.Recovering("QScrollEvent::contentPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QScrollEvent_ContentPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScrollEvent) OvershootDistance() *core.QPointF {
	defer qt.Recovering("QScrollEvent::overshootDistance")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QScrollEvent_OvershootDistance(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScrollEvent) ScrollState() QScrollEvent__ScrollState {
	defer qt.Recovering("QScrollEvent::scrollState")

	if ptr.Pointer() != nil {
		return QScrollEvent__ScrollState(C.QScrollEvent_ScrollState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScrollEvent) DestroyQScrollEvent() {
	defer qt.Recovering("QScrollEvent::~QScrollEvent")

	if ptr.Pointer() != nil {
		C.QScrollEvent_DestroyQScrollEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QScrollPrepareEvent struct {
	core.QEvent
}

type QScrollPrepareEvent_ITF interface {
	core.QEvent_ITF
	QScrollPrepareEvent_PTR() *QScrollPrepareEvent
}

func (p *QScrollPrepareEvent) QScrollPrepareEvent_PTR() *QScrollPrepareEvent {
	return p
}

func (p *QScrollPrepareEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QScrollPrepareEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQScrollPrepareEvent(ptr QScrollPrepareEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScrollPrepareEvent_PTR().Pointer()
	}
	return nil
}

func NewQScrollPrepareEventFromPointer(ptr unsafe.Pointer) *QScrollPrepareEvent {
	var n = new(QScrollPrepareEvent)
	n.SetPointer(ptr)
	return n
}

func newQScrollPrepareEventFromPointer(ptr unsafe.Pointer) *QScrollPrepareEvent {
	var n = NewQScrollPrepareEventFromPointer(ptr)
	return n
}

func NewQScrollPrepareEvent(startPos core.QPointF_ITF) *QScrollPrepareEvent {
	defer qt.Recovering("QScrollPrepareEvent::QScrollPrepareEvent")

	return newQScrollPrepareEventFromPointer(C.QScrollPrepareEvent_NewQScrollPrepareEvent(core.PointerFromQPointF(startPos)))
}

func (ptr *QScrollPrepareEvent) ContentPos() *core.QPointF {
	defer qt.Recovering("QScrollPrepareEvent::contentPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QScrollPrepareEvent_ContentPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScrollPrepareEvent) ContentPosRange() *core.QRectF {
	defer qt.Recovering("QScrollPrepareEvent::contentPosRange")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QScrollPrepareEvent_ContentPosRange(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScrollPrepareEvent) SetContentPos(pos core.QPointF_ITF) {
	defer qt.Recovering("QScrollPrepareEvent::setContentPos")

	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_SetContentPos(ptr.Pointer(), core.PointerFromQPointF(pos))
	}
}

func (ptr *QScrollPrepareEvent) SetContentPosRange(rect core.QRectF_ITF) {
	defer qt.Recovering("QScrollPrepareEvent::setContentPosRange")

	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_SetContentPosRange(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QScrollPrepareEvent) SetViewportSize(size core.QSizeF_ITF) {
	defer qt.Recovering("QScrollPrepareEvent::setViewportSize")

	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_SetViewportSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QScrollPrepareEvent) StartPos() *core.QPointF {
	defer qt.Recovering("QScrollPrepareEvent::startPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QScrollPrepareEvent_StartPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScrollPrepareEvent) ViewportSize() *core.QSizeF {
	defer qt.Recovering("QScrollPrepareEvent::viewportSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QScrollPrepareEvent_ViewportSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScrollPrepareEvent) DestroyQScrollPrepareEvent() {
	defer qt.Recovering("QScrollPrepareEvent::~QScrollPrepareEvent")

	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_DestroyQScrollPrepareEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QSessionManager::RestartHint
type QSessionManager__RestartHint int64

const (
	QSessionManager__RestartIfRunning   = QSessionManager__RestartHint(0)
	QSessionManager__RestartAnyway      = QSessionManager__RestartHint(1)
	QSessionManager__RestartImmediately = QSessionManager__RestartHint(2)
	QSessionManager__RestartNever       = QSessionManager__RestartHint(3)
)

type QSessionManager struct {
	core.QObject
}

type QSessionManager_ITF interface {
	core.QObject_ITF
	QSessionManager_PTR() *QSessionManager
}

func (p *QSessionManager) QSessionManager_PTR() *QSessionManager {
	return p
}

func (p *QSessionManager) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSessionManager) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSessionManager(ptr QSessionManager_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSessionManager_PTR().Pointer()
	}
	return nil
}

func NewQSessionManagerFromPointer(ptr unsafe.Pointer) *QSessionManager {
	var n = new(QSessionManager)
	n.SetPointer(ptr)
	return n
}

func newQSessionManagerFromPointer(ptr unsafe.Pointer) *QSessionManager {
	var n = NewQSessionManagerFromPointer(ptr)
	for len(n.ObjectName()) < len("QSessionManager_") {
		n.SetObjectName("QSessionManager_" + qt.Identifier())
	}
	return n
}

func (ptr *QSessionManager) RestartHint() QSessionManager__RestartHint {
	defer qt.Recovering("QSessionManager::restartHint")

	if ptr.Pointer() != nil {
		return QSessionManager__RestartHint(C.QSessionManager_RestartHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSessionManager) SessionKey() string {
	defer qt.Recovering("QSessionManager::sessionKey")

	if ptr.Pointer() != nil {
		return C.GoString(C.QSessionManager_SessionKey(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSessionManager) AllowsErrorInteraction() bool {
	defer qt.Recovering("QSessionManager::allowsErrorInteraction")

	if ptr.Pointer() != nil {
		return C.QSessionManager_AllowsErrorInteraction(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSessionManager) AllowsInteraction() bool {
	defer qt.Recovering("QSessionManager::allowsInteraction")

	if ptr.Pointer() != nil {
		return C.QSessionManager_AllowsInteraction(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSessionManager) Cancel() {
	defer qt.Recovering("QSessionManager::cancel")

	if ptr.Pointer() != nil {
		C.QSessionManager_Cancel(ptr.Pointer())
	}
}

func (ptr *QSessionManager) DiscardCommand() []string {
	defer qt.Recovering("QSessionManager::discardCommand")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QSessionManager_DiscardCommand(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSessionManager) IsPhase2() bool {
	defer qt.Recovering("QSessionManager::isPhase2")

	if ptr.Pointer() != nil {
		return C.QSessionManager_IsPhase2(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSessionManager) Release() {
	defer qt.Recovering("QSessionManager::release")

	if ptr.Pointer() != nil {
		C.QSessionManager_Release(ptr.Pointer())
	}
}

func (ptr *QSessionManager) RequestPhase2() {
	defer qt.Recovering("QSessionManager::requestPhase2")

	if ptr.Pointer() != nil {
		C.QSessionManager_RequestPhase2(ptr.Pointer())
	}
}

func (ptr *QSessionManager) RestartCommand() []string {
	defer qt.Recovering("QSessionManager::restartCommand")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QSessionManager_RestartCommand(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSessionManager) SessionId() string {
	defer qt.Recovering("QSessionManager::sessionId")

	if ptr.Pointer() != nil {
		return C.GoString(C.QSessionManager_SessionId(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSessionManager) SetDiscardCommand(command []string) {
	defer qt.Recovering("QSessionManager::setDiscardCommand")

	if ptr.Pointer() != nil {
		C.QSessionManager_SetDiscardCommand(ptr.Pointer(), C.CString(strings.Join(command, "|")))
	}
}

func (ptr *QSessionManager) SetManagerProperty2(name string, value string) {
	defer qt.Recovering("QSessionManager::setManagerProperty")

	if ptr.Pointer() != nil {
		C.QSessionManager_SetManagerProperty2(ptr.Pointer(), C.CString(name), C.CString(value))
	}
}

func (ptr *QSessionManager) SetManagerProperty(name string, value []string) {
	defer qt.Recovering("QSessionManager::setManagerProperty")

	if ptr.Pointer() != nil {
		C.QSessionManager_SetManagerProperty(ptr.Pointer(), C.CString(name), C.CString(strings.Join(value, "|")))
	}
}

func (ptr *QSessionManager) SetRestartCommand(command []string) {
	defer qt.Recovering("QSessionManager::setRestartCommand")

	if ptr.Pointer() != nil {
		C.QSessionManager_SetRestartCommand(ptr.Pointer(), C.CString(strings.Join(command, "|")))
	}
}

func (ptr *QSessionManager) SetRestartHint(hint QSessionManager__RestartHint) {
	defer qt.Recovering("QSessionManager::setRestartHint")

	if ptr.Pointer() != nil {
		C.QSessionManager_SetRestartHint(ptr.Pointer(), C.int(hint))
	}
}

//export callbackQSessionManager_TimerEvent
func callbackQSessionManager_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QSessionManager::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQSessionManagerFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSessionManager) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QSessionManager::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QSessionManager) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QSessionManager::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QSessionManager) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QSessionManager::timerEvent")

	if ptr.Pointer() != nil {
		C.QSessionManager_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QSessionManager) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QSessionManager::timerEvent")

	if ptr.Pointer() != nil {
		C.QSessionManager_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQSessionManager_ChildEvent
func callbackQSessionManager_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QSessionManager::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQSessionManagerFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QSessionManager) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QSessionManager::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QSessionManager) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QSessionManager::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QSessionManager) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QSessionManager::childEvent")

	if ptr.Pointer() != nil {
		C.QSessionManager_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QSessionManager) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QSessionManager::childEvent")

	if ptr.Pointer() != nil {
		C.QSessionManager_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQSessionManager_ConnectNotify
func callbackQSessionManager_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QSessionManager::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSessionManagerFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSessionManager) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QSessionManager::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QSessionManager) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QSessionManager::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QSessionManager) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSessionManager::connectNotify")

	if ptr.Pointer() != nil {
		C.QSessionManager_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSessionManager) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSessionManager::connectNotify")

	if ptr.Pointer() != nil {
		C.QSessionManager_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSessionManager_CustomEvent
func callbackQSessionManager_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QSessionManager::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQSessionManagerFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QSessionManager) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QSessionManager::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QSessionManager) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QSessionManager::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QSessionManager) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QSessionManager::customEvent")

	if ptr.Pointer() != nil {
		C.QSessionManager_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QSessionManager) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QSessionManager::customEvent")

	if ptr.Pointer() != nil {
		C.QSessionManager_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQSessionManager_DeleteLater
func callbackQSessionManager_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QSessionManager::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSessionManager) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QSessionManager::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QSessionManager) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QSessionManager::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QSessionManager) DeleteLater() {
	defer qt.Recovering("QSessionManager::deleteLater")

	if ptr.Pointer() != nil {
		C.QSessionManager_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQSessionManager_DisconnectNotify
func callbackQSessionManager_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QSessionManager::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSessionManagerFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSessionManager) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QSessionManager::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QSessionManager) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QSessionManager::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QSessionManager) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSessionManager::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QSessionManager_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSessionManager) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSessionManager::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QSessionManager_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSessionManager_Event
func callbackQSessionManager_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QSessionManager::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQSessionManagerFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QSessionManager) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QSessionManager::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QSessionManager) DisconnectEvent() {
	defer qt.Recovering("disconnect QSessionManager::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QSessionManager) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QSessionManager::event")

	if ptr.Pointer() != nil {
		return C.QSessionManager_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSessionManager) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QSessionManager::event")

	if ptr.Pointer() != nil {
		return C.QSessionManager_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSessionManager_EventFilter
func callbackQSessionManager_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QSessionManager::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQSessionManagerFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QSessionManager) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QSessionManager::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QSessionManager) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QSessionManager::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QSessionManager) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QSessionManager::eventFilter")

	if ptr.Pointer() != nil {
		return C.QSessionManager_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSessionManager) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QSessionManager::eventFilter")

	if ptr.Pointer() != nil {
		return C.QSessionManager_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSessionManager_MetaObject
func callbackQSessionManager_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QSessionManager::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQSessionManagerFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSessionManager) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QSessionManager::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QSessionManager) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QSessionManager::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QSessionManager) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QSessionManager::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSessionManager_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSessionManager) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QSessionManager::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSessionManager_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QShortcutEvent struct {
	core.QEvent
}

type QShortcutEvent_ITF interface {
	core.QEvent_ITF
	QShortcutEvent_PTR() *QShortcutEvent
}

func (p *QShortcutEvent) QShortcutEvent_PTR() *QShortcutEvent {
	return p
}

func (p *QShortcutEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QShortcutEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQShortcutEvent(ptr QShortcutEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QShortcutEvent_PTR().Pointer()
	}
	return nil
}

func NewQShortcutEventFromPointer(ptr unsafe.Pointer) *QShortcutEvent {
	var n = new(QShortcutEvent)
	n.SetPointer(ptr)
	return n
}

func newQShortcutEventFromPointer(ptr unsafe.Pointer) *QShortcutEvent {
	var n = NewQShortcutEventFromPointer(ptr)
	return n
}

func NewQShortcutEvent(key QKeySequence_ITF, id int, ambiguous bool) *QShortcutEvent {
	defer qt.Recovering("QShortcutEvent::QShortcutEvent")

	return newQShortcutEventFromPointer(C.QShortcutEvent_NewQShortcutEvent(PointerFromQKeySequence(key), C.int(id), C.int(qt.GoBoolToInt(ambiguous))))
}

func (ptr *QShortcutEvent) IsAmbiguous() bool {
	defer qt.Recovering("QShortcutEvent::isAmbiguous")

	if ptr.Pointer() != nil {
		return C.QShortcutEvent_IsAmbiguous(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QShortcutEvent) Key() *QKeySequence {
	defer qt.Recovering("QShortcutEvent::key")

	if ptr.Pointer() != nil {
		return NewQKeySequenceFromPointer(C.QShortcutEvent_Key(ptr.Pointer()))
	}
	return nil
}

func (ptr *QShortcutEvent) ShortcutId() int {
	defer qt.Recovering("QShortcutEvent::shortcutId")

	if ptr.Pointer() != nil {
		return int(C.QShortcutEvent_ShortcutId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QShortcutEvent) DestroyQShortcutEvent() {
	defer qt.Recovering("QShortcutEvent::~QShortcutEvent")

	if ptr.Pointer() != nil {
		C.QShortcutEvent_DestroyQShortcutEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QShowEvent struct {
	core.QEvent
}

type QShowEvent_ITF interface {
	core.QEvent_ITF
	QShowEvent_PTR() *QShowEvent
}

func (p *QShowEvent) QShowEvent_PTR() *QShowEvent {
	return p
}

func (p *QShowEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QShowEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQShowEvent(ptr QShowEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QShowEvent_PTR().Pointer()
	}
	return nil
}

func NewQShowEventFromPointer(ptr unsafe.Pointer) *QShowEvent {
	var n = new(QShowEvent)
	n.SetPointer(ptr)
	return n
}

func newQShowEventFromPointer(ptr unsafe.Pointer) *QShowEvent {
	var n = NewQShowEventFromPointer(ptr)
	return n
}

func NewQShowEvent() *QShowEvent {
	defer qt.Recovering("QShowEvent::QShowEvent")

	return newQShowEventFromPointer(C.QShowEvent_NewQShowEvent())
}

//QStandardItem::ItemType
type QStandardItem__ItemType int64

const (
	QStandardItem__Type     = QStandardItem__ItemType(0)
	QStandardItem__UserType = QStandardItem__ItemType(1000)
)

type QStandardItem struct {
	ptr unsafe.Pointer
}

type QStandardItem_ITF interface {
	QStandardItem_PTR() *QStandardItem
}

func (p *QStandardItem) QStandardItem_PTR() *QStandardItem {
	return p
}

func (p *QStandardItem) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QStandardItem) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQStandardItem(ptr QStandardItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStandardItem_PTR().Pointer()
	}
	return nil
}

func NewQStandardItemFromPointer(ptr unsafe.Pointer) *QStandardItem {
	var n = new(QStandardItem)
	n.SetPointer(ptr)
	return n
}

func newQStandardItemFromPointer(ptr unsafe.Pointer) *QStandardItem {
	var n = NewQStandardItemFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QStandardItem_") {
		n.SetObjectNameAbs("QStandardItem_" + qt.Identifier())
	}
	return n
}

func NewQStandardItem() *QStandardItem {
	defer qt.Recovering("QStandardItem::QStandardItem")

	return newQStandardItemFromPointer(C.QStandardItem_NewQStandardItem())
}

func NewQStandardItem3(icon QIcon_ITF, text string) *QStandardItem {
	defer qt.Recovering("QStandardItem::QStandardItem")

	return newQStandardItemFromPointer(C.QStandardItem_NewQStandardItem3(PointerFromQIcon(icon), C.CString(text)))
}

func NewQStandardItem2(text string) *QStandardItem {
	defer qt.Recovering("QStandardItem::QStandardItem")

	return newQStandardItemFromPointer(C.QStandardItem_NewQStandardItem2(C.CString(text)))
}

func NewQStandardItem4(rows int, columns int) *QStandardItem {
	defer qt.Recovering("QStandardItem::QStandardItem")

	return newQStandardItemFromPointer(C.QStandardItem_NewQStandardItem4(C.int(rows), C.int(columns)))
}

func NewQStandardItem5(other QStandardItem_ITF) *QStandardItem {
	defer qt.Recovering("QStandardItem::QStandardItem")

	return newQStandardItemFromPointer(C.QStandardItem_NewQStandardItem5(PointerFromQStandardItem(other)))
}

func (ptr *QStandardItem) AccessibleDescription() string {
	defer qt.Recovering("QStandardItem::accessibleDescription")

	if ptr.Pointer() != nil {
		return C.GoString(C.QStandardItem_AccessibleDescription(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) AccessibleText() string {
	defer qt.Recovering("QStandardItem::accessibleText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QStandardItem_AccessibleText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) AppendRow2(item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItem::appendRow")

	if ptr.Pointer() != nil {
		C.QStandardItem_AppendRow2(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) Background() *QBrush {
	defer qt.Recovering("QStandardItem::background")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QStandardItem_Background(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) CheckState() core.Qt__CheckState {
	defer qt.Recovering("QStandardItem::checkState")

	if ptr.Pointer() != nil {
		return core.Qt__CheckState(C.QStandardItem_CheckState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) Child(row int, column int) *QStandardItem {
	defer qt.Recovering("QStandardItem::child")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_Child(ptr.Pointer(), C.int(row), C.int(column)))
	}
	return nil
}

//export callbackQStandardItem_Clone
func callbackQStandardItem_Clone(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItem::clone")

	if signal := qt.GetSignal(C.GoString(ptrName), "clone"); signal != nil {
		return PointerFromQStandardItem(signal.(func() *QStandardItem)())
	}

	return PointerFromQStandardItem(NewQStandardItemFromPointer(ptr).CloneDefault())
}

func (ptr *QStandardItem) ConnectClone(f func() *QStandardItem) {
	defer qt.Recovering("connect QStandardItem::clone")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "clone", f)
	}
}

func (ptr *QStandardItem) DisconnectClone() {
	defer qt.Recovering("disconnect QStandardItem::clone")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "clone")
	}
}

func (ptr *QStandardItem) Clone() *QStandardItem {
	defer qt.Recovering("QStandardItem::clone")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_Clone(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) CloneDefault() *QStandardItem {
	defer qt.Recovering("QStandardItem::clone")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_CloneDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) Column() int {
	defer qt.Recovering("QStandardItem::column")

	if ptr.Pointer() != nil {
		return int(C.QStandardItem_Column(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) ColumnCount() int {
	defer qt.Recovering("QStandardItem::columnCount")

	if ptr.Pointer() != nil {
		return int(C.QStandardItem_ColumnCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQStandardItem_Data
func callbackQStandardItem_Data(ptr unsafe.Pointer, ptrName *C.char, role C.int) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItem::data")

	if signal := qt.GetSignal(C.GoString(ptrName), "data"); signal != nil {
		return core.PointerFromQVariant(signal.(func(int) *core.QVariant)(int(role)))
	}

	return core.PointerFromQVariant(NewQStandardItemFromPointer(ptr).DataDefault(int(role)))
}

func (ptr *QStandardItem) ConnectData(f func(role int) *core.QVariant) {
	defer qt.Recovering("connect QStandardItem::data")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "data", f)
	}
}

func (ptr *QStandardItem) DisconnectData() {
	defer qt.Recovering("disconnect QStandardItem::data")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "data")
	}
}

func (ptr *QStandardItem) Data(role int) *core.QVariant {
	defer qt.Recovering("QStandardItem::data")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QStandardItem_Data(ptr.Pointer(), C.int(role)))
	}
	return nil
}

func (ptr *QStandardItem) DataDefault(role int) *core.QVariant {
	defer qt.Recovering("QStandardItem::data")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QStandardItem_DataDefault(ptr.Pointer(), C.int(role)))
	}
	return nil
}

func (ptr *QStandardItem) EmitDataChanged() {
	defer qt.Recovering("QStandardItem::emitDataChanged")

	if ptr.Pointer() != nil {
		C.QStandardItem_EmitDataChanged(ptr.Pointer())
	}
}

func (ptr *QStandardItem) Flags() core.Qt__ItemFlag {
	defer qt.Recovering("QStandardItem::flags")

	if ptr.Pointer() != nil {
		return core.Qt__ItemFlag(C.QStandardItem_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) Font() *QFont {
	defer qt.Recovering("QStandardItem::font")

	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QStandardItem_Font(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) Foreground() *QBrush {
	defer qt.Recovering("QStandardItem::foreground")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QStandardItem_Foreground(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) HasChildren() bool {
	defer qt.Recovering("QStandardItem::hasChildren")

	if ptr.Pointer() != nil {
		return C.QStandardItem_HasChildren(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) Icon() *QIcon {
	defer qt.Recovering("QStandardItem::icon")

	if ptr.Pointer() != nil {
		return NewQIconFromPointer(C.QStandardItem_Icon(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) Index() *core.QModelIndex {
	defer qt.Recovering("QStandardItem::index")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItem_Index(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) InsertColumns(column int, count int) {
	defer qt.Recovering("QStandardItem::insertColumns")

	if ptr.Pointer() != nil {
		C.QStandardItem_InsertColumns(ptr.Pointer(), C.int(column), C.int(count))
	}
}

func (ptr *QStandardItem) InsertRow2(row int, item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItem::insertRow")

	if ptr.Pointer() != nil {
		C.QStandardItem_InsertRow2(ptr.Pointer(), C.int(row), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) InsertRows2(row int, count int) {
	defer qt.Recovering("QStandardItem::insertRows")

	if ptr.Pointer() != nil {
		C.QStandardItem_InsertRows2(ptr.Pointer(), C.int(row), C.int(count))
	}
}

func (ptr *QStandardItem) IsCheckable() bool {
	defer qt.Recovering("QStandardItem::isCheckable")

	if ptr.Pointer() != nil {
		return C.QStandardItem_IsCheckable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsDragEnabled() bool {
	defer qt.Recovering("QStandardItem::isDragEnabled")

	if ptr.Pointer() != nil {
		return C.QStandardItem_IsDragEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsDropEnabled() bool {
	defer qt.Recovering("QStandardItem::isDropEnabled")

	if ptr.Pointer() != nil {
		return C.QStandardItem_IsDropEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsEditable() bool {
	defer qt.Recovering("QStandardItem::isEditable")

	if ptr.Pointer() != nil {
		return C.QStandardItem_IsEditable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsEnabled() bool {
	defer qt.Recovering("QStandardItem::isEnabled")

	if ptr.Pointer() != nil {
		return C.QStandardItem_IsEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsSelectable() bool {
	defer qt.Recovering("QStandardItem::isSelectable")

	if ptr.Pointer() != nil {
		return C.QStandardItem_IsSelectable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsTristate() bool {
	defer qt.Recovering("QStandardItem::isTristate")

	if ptr.Pointer() != nil {
		return C.QStandardItem_IsTristate(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) Model() *QStandardItemModel {
	defer qt.Recovering("QStandardItem::model")

	if ptr.Pointer() != nil {
		return NewQStandardItemModelFromPointer(C.QStandardItem_Model(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) Parent() *QStandardItem {
	defer qt.Recovering("QStandardItem::parent")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_Parent(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) RemoveColumn(column int) {
	defer qt.Recovering("QStandardItem::removeColumn")

	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveColumn(ptr.Pointer(), C.int(column))
	}
}

func (ptr *QStandardItem) RemoveColumns(column int, count int) {
	defer qt.Recovering("QStandardItem::removeColumns")

	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveColumns(ptr.Pointer(), C.int(column), C.int(count))
	}
}

func (ptr *QStandardItem) RemoveRow(row int) {
	defer qt.Recovering("QStandardItem::removeRow")

	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveRow(ptr.Pointer(), C.int(row))
	}
}

func (ptr *QStandardItem) RemoveRows(row int, count int) {
	defer qt.Recovering("QStandardItem::removeRows")

	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveRows(ptr.Pointer(), C.int(row), C.int(count))
	}
}

func (ptr *QStandardItem) Row() int {
	defer qt.Recovering("QStandardItem::row")

	if ptr.Pointer() != nil {
		return int(C.QStandardItem_Row(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) RowCount() int {
	defer qt.Recovering("QStandardItem::rowCount")

	if ptr.Pointer() != nil {
		return int(C.QStandardItem_RowCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) SetAccessibleDescription(accessibleDescription string) {
	defer qt.Recovering("QStandardItem::setAccessibleDescription")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetAccessibleDescription(ptr.Pointer(), C.CString(accessibleDescription))
	}
}

func (ptr *QStandardItem) SetAccessibleText(accessibleText string) {
	defer qt.Recovering("QStandardItem::setAccessibleText")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetAccessibleText(ptr.Pointer(), C.CString(accessibleText))
	}
}

func (ptr *QStandardItem) SetBackground(brush QBrush_ITF) {
	defer qt.Recovering("QStandardItem::setBackground")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetBackground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QStandardItem) SetCheckState(state core.Qt__CheckState) {
	defer qt.Recovering("QStandardItem::setCheckState")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetCheckState(ptr.Pointer(), C.int(state))
	}
}

func (ptr *QStandardItem) SetCheckable(checkable bool) {
	defer qt.Recovering("QStandardItem::setCheckable")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetCheckable(ptr.Pointer(), C.int(qt.GoBoolToInt(checkable)))
	}
}

func (ptr *QStandardItem) SetChild2(row int, item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItem::setChild")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetChild2(ptr.Pointer(), C.int(row), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) SetChild(row int, column int, item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItem::setChild")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetChild(ptr.Pointer(), C.int(row), C.int(column), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) SetColumnCount(columns int) {
	defer qt.Recovering("QStandardItem::setColumnCount")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetColumnCount(ptr.Pointer(), C.int(columns))
	}
}

//export callbackQStandardItem_SetData
func callbackQStandardItem_SetData(ptr unsafe.Pointer, ptrName *C.char, value unsafe.Pointer, role C.int) {
	defer qt.Recovering("callback QStandardItem::setData")

	if signal := qt.GetSignal(C.GoString(ptrName), "setData"); signal != nil {
		signal.(func(*core.QVariant, int))(core.NewQVariantFromPointer(value), int(role))
	} else {
		NewQStandardItemFromPointer(ptr).SetDataDefault(core.NewQVariantFromPointer(value), int(role))
	}
}

func (ptr *QStandardItem) ConnectSetData(f func(value *core.QVariant, role int)) {
	defer qt.Recovering("connect QStandardItem::setData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "setData", f)
	}
}

func (ptr *QStandardItem) DisconnectSetData() {
	defer qt.Recovering("disconnect QStandardItem::setData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "setData")
	}
}

func (ptr *QStandardItem) SetData(value core.QVariant_ITF, role int) {
	defer qt.Recovering("QStandardItem::setData")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetData(ptr.Pointer(), core.PointerFromQVariant(value), C.int(role))
	}
}

func (ptr *QStandardItem) SetDataDefault(value core.QVariant_ITF, role int) {
	defer qt.Recovering("QStandardItem::setData")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetDataDefault(ptr.Pointer(), core.PointerFromQVariant(value), C.int(role))
	}
}

func (ptr *QStandardItem) SetDragEnabled(dragEnabled bool) {
	defer qt.Recovering("QStandardItem::setDragEnabled")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetDragEnabled(ptr.Pointer(), C.int(qt.GoBoolToInt(dragEnabled)))
	}
}

func (ptr *QStandardItem) SetDropEnabled(dropEnabled bool) {
	defer qt.Recovering("QStandardItem::setDropEnabled")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetDropEnabled(ptr.Pointer(), C.int(qt.GoBoolToInt(dropEnabled)))
	}
}

func (ptr *QStandardItem) SetEditable(editable bool) {
	defer qt.Recovering("QStandardItem::setEditable")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetEditable(ptr.Pointer(), C.int(qt.GoBoolToInt(editable)))
	}
}

func (ptr *QStandardItem) SetEnabled(enabled bool) {
	defer qt.Recovering("QStandardItem::setEnabled")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetEnabled(ptr.Pointer(), C.int(qt.GoBoolToInt(enabled)))
	}
}

func (ptr *QStandardItem) SetFlags(flags core.Qt__ItemFlag) {
	defer qt.Recovering("QStandardItem::setFlags")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetFlags(ptr.Pointer(), C.int(flags))
	}
}

func (ptr *QStandardItem) SetFont(font QFont_ITF) {
	defer qt.Recovering("QStandardItem::setFont")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QStandardItem) SetForeground(brush QBrush_ITF) {
	defer qt.Recovering("QStandardItem::setForeground")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetForeground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QStandardItem) SetIcon(icon QIcon_ITF) {
	defer qt.Recovering("QStandardItem::setIcon")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetIcon(ptr.Pointer(), PointerFromQIcon(icon))
	}
}

func (ptr *QStandardItem) SetRowCount(rows int) {
	defer qt.Recovering("QStandardItem::setRowCount")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetRowCount(ptr.Pointer(), C.int(rows))
	}
}

func (ptr *QStandardItem) SetSelectable(selectable bool) {
	defer qt.Recovering("QStandardItem::setSelectable")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetSelectable(ptr.Pointer(), C.int(qt.GoBoolToInt(selectable)))
	}
}

func (ptr *QStandardItem) SetSizeHint(size core.QSize_ITF) {
	defer qt.Recovering("QStandardItem::setSizeHint")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetSizeHint(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QStandardItem) SetStatusTip(statusTip string) {
	defer qt.Recovering("QStandardItem::setStatusTip")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetStatusTip(ptr.Pointer(), C.CString(statusTip))
	}
}

func (ptr *QStandardItem) SetText(text string) {
	defer qt.Recovering("QStandardItem::setText")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetText(ptr.Pointer(), C.CString(text))
	}
}

func (ptr *QStandardItem) SetTextAlignment(alignment core.Qt__AlignmentFlag) {
	defer qt.Recovering("QStandardItem::setTextAlignment")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetTextAlignment(ptr.Pointer(), C.int(alignment))
	}
}

func (ptr *QStandardItem) SetToolTip(toolTip string) {
	defer qt.Recovering("QStandardItem::setToolTip")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetToolTip(ptr.Pointer(), C.CString(toolTip))
	}
}

func (ptr *QStandardItem) SetTristate(tristate bool) {
	defer qt.Recovering("QStandardItem::setTristate")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetTristate(ptr.Pointer(), C.int(qt.GoBoolToInt(tristate)))
	}
}

func (ptr *QStandardItem) SetWhatsThis(whatsThis string) {
	defer qt.Recovering("QStandardItem::setWhatsThis")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetWhatsThis(ptr.Pointer(), C.CString(whatsThis))
	}
}

func (ptr *QStandardItem) SizeHint() *core.QSize {
	defer qt.Recovering("QStandardItem::sizeHint")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QStandardItem_SizeHint(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) SortChildren(column int, order core.Qt__SortOrder) {
	defer qt.Recovering("QStandardItem::sortChildren")

	if ptr.Pointer() != nil {
		C.QStandardItem_SortChildren(ptr.Pointer(), C.int(column), C.int(order))
	}
}

func (ptr *QStandardItem) StatusTip() string {
	defer qt.Recovering("QStandardItem::statusTip")

	if ptr.Pointer() != nil {
		return C.GoString(C.QStandardItem_StatusTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) TakeChild(row int, column int) *QStandardItem {
	defer qt.Recovering("QStandardItem::takeChild")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_TakeChild(ptr.Pointer(), C.int(row), C.int(column)))
	}
	return nil
}

func (ptr *QStandardItem) Text() string {
	defer qt.Recovering("QStandardItem::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QStandardItem_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) TextAlignment() core.Qt__AlignmentFlag {
	defer qt.Recovering("QStandardItem::textAlignment")

	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QStandardItem_TextAlignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) ToolTip() string {
	defer qt.Recovering("QStandardItem::toolTip")

	if ptr.Pointer() != nil {
		return C.GoString(C.QStandardItem_ToolTip(ptr.Pointer()))
	}
	return ""
}

//export callbackQStandardItem_Type
func callbackQStandardItem_Type(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QStandardItem::type")

	if signal := qt.GetSignal(C.GoString(ptrName), "type"); signal != nil {
		return C.int(signal.(func() int)())
	}

	return C.int(NewQStandardItemFromPointer(ptr).TypeDefault())
}

func (ptr *QStandardItem) ConnectType(f func() int) {
	defer qt.Recovering("connect QStandardItem::type")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "type", f)
	}
}

func (ptr *QStandardItem) DisconnectType() {
	defer qt.Recovering("disconnect QStandardItem::type")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "type")
	}
}

func (ptr *QStandardItem) Type() int {
	defer qt.Recovering("QStandardItem::type")

	if ptr.Pointer() != nil {
		return int(C.QStandardItem_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) TypeDefault() int {
	defer qt.Recovering("QStandardItem::type")

	if ptr.Pointer() != nil {
		return int(C.QStandardItem_TypeDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) WhatsThis() string {
	defer qt.Recovering("QStandardItem::whatsThis")

	if ptr.Pointer() != nil {
		return C.GoString(C.QStandardItem_WhatsThis(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) DestroyQStandardItem() {
	defer qt.Recovering("QStandardItem::~QStandardItem")

	if ptr.Pointer() != nil {
		C.QStandardItem_DestroyQStandardItem(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QStandardItem) ObjectNameAbs() string {
	defer qt.Recovering("QStandardItem::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QStandardItem_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) SetObjectNameAbs(name string) {
	defer qt.Recovering("QStandardItem::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QStandardItem_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

type QStandardItemModel struct {
	core.QAbstractItemModel
}

type QStandardItemModel_ITF interface {
	core.QAbstractItemModel_ITF
	QStandardItemModel_PTR() *QStandardItemModel
}

func (p *QStandardItemModel) QStandardItemModel_PTR() *QStandardItemModel {
	return p
}

func (p *QStandardItemModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractItemModel_PTR().Pointer()
	}
	return nil
}

func (p *QStandardItemModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractItemModel_PTR().SetPointer(ptr)
	}
}

func PointerFromQStandardItemModel(ptr QStandardItemModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStandardItemModel_PTR().Pointer()
	}
	return nil
}

func NewQStandardItemModelFromPointer(ptr unsafe.Pointer) *QStandardItemModel {
	var n = new(QStandardItemModel)
	n.SetPointer(ptr)
	return n
}

func newQStandardItemModelFromPointer(ptr unsafe.Pointer) *QStandardItemModel {
	var n = NewQStandardItemModelFromPointer(ptr)
	for len(n.ObjectName()) < len("QStandardItemModel_") {
		n.SetObjectName("QStandardItemModel_" + qt.Identifier())
	}
	return n
}

func (ptr *QStandardItemModel) SetSortRole(role int) {
	defer qt.Recovering("QStandardItemModel::setSortRole")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetSortRole(ptr.Pointer(), C.int(role))
	}
}

func (ptr *QStandardItemModel) SortRole() int {
	defer qt.Recovering("QStandardItemModel::sortRole")

	if ptr.Pointer() != nil {
		return int(C.QStandardItemModel_SortRole(ptr.Pointer()))
	}
	return 0
}

func NewQStandardItemModel(parent core.QObject_ITF) *QStandardItemModel {
	defer qt.Recovering("QStandardItemModel::QStandardItemModel")

	return newQStandardItemModelFromPointer(C.QStandardItemModel_NewQStandardItemModel(core.PointerFromQObject(parent)))
}

func NewQStandardItemModel2(rows int, columns int, parent core.QObject_ITF) *QStandardItemModel {
	defer qt.Recovering("QStandardItemModel::QStandardItemModel")

	return newQStandardItemModelFromPointer(C.QStandardItemModel_NewQStandardItemModel2(C.int(rows), C.int(columns), core.PointerFromQObject(parent)))
}

func (ptr *QStandardItemModel) AppendRow2(item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItemModel::appendRow")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_AppendRow2(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) Clear() {
	defer qt.Recovering("QStandardItemModel::clear")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_Clear(ptr.Pointer())
	}
}

//export callbackQStandardItemModel_ColumnCount
func callbackQStandardItemModel_ColumnCount(ptr unsafe.Pointer, ptrName *C.char, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::columnCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "columnCount"); signal != nil {
		return C.int(signal.(func(*core.QModelIndex) int)(core.NewQModelIndexFromPointer(parent)))
	}

	return C.int(NewQStandardItemModelFromPointer(ptr).ColumnCountDefault(core.NewQModelIndexFromPointer(parent)))
}

func (ptr *QStandardItemModel) ConnectColumnCount(f func(parent *core.QModelIndex) int) {
	defer qt.Recovering("connect QStandardItemModel::columnCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "columnCount", f)
	}
}

func (ptr *QStandardItemModel) DisconnectColumnCount() {
	defer qt.Recovering("disconnect QStandardItemModel::columnCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "columnCount")
	}
}

func (ptr *QStandardItemModel) ColumnCount(parent core.QModelIndex_ITF) int {
	defer qt.Recovering("QStandardItemModel::columnCount")

	if ptr.Pointer() != nil {
		return int(C.QStandardItemModel_ColumnCount(ptr.Pointer(), core.PointerFromQModelIndex(parent)))
	}
	return 0
}

func (ptr *QStandardItemModel) ColumnCountDefault(parent core.QModelIndex_ITF) int {
	defer qt.Recovering("QStandardItemModel::columnCount")

	if ptr.Pointer() != nil {
		return int(C.QStandardItemModel_ColumnCountDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent)))
	}
	return 0
}

//export callbackQStandardItemModel_Data
func callbackQStandardItemModel_Data(ptr unsafe.Pointer, ptrName *C.char, index unsafe.Pointer, role C.int) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItemModel::data")

	if signal := qt.GetSignal(C.GoString(ptrName), "data"); signal != nil {
		return core.PointerFromQVariant(signal.(func(*core.QModelIndex, int) *core.QVariant)(core.NewQModelIndexFromPointer(index), int(role)))
	}

	return core.PointerFromQVariant(NewQStandardItemModelFromPointer(ptr).DataDefault(core.NewQModelIndexFromPointer(index), int(role)))
}

func (ptr *QStandardItemModel) ConnectData(f func(index *core.QModelIndex, role int) *core.QVariant) {
	defer qt.Recovering("connect QStandardItemModel::data")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "data", f)
	}
}

func (ptr *QStandardItemModel) DisconnectData() {
	defer qt.Recovering("disconnect QStandardItemModel::data")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "data")
	}
}

func (ptr *QStandardItemModel) Data(index core.QModelIndex_ITF, role int) *core.QVariant {
	defer qt.Recovering("QStandardItemModel::data")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QStandardItemModel_Data(ptr.Pointer(), core.PointerFromQModelIndex(index), C.int(role)))
	}
	return nil
}

func (ptr *QStandardItemModel) DataDefault(index core.QModelIndex_ITF, role int) *core.QVariant {
	defer qt.Recovering("QStandardItemModel::data")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QStandardItemModel_DataDefault(ptr.Pointer(), core.PointerFromQModelIndex(index), C.int(role)))
	}
	return nil
}

//export callbackQStandardItemModel_DropMimeData
func callbackQStandardItemModel_DropMimeData(ptr unsafe.Pointer, ptrName *C.char, data unsafe.Pointer, action C.int, row C.int, column C.int, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::dropMimeData")

	if signal := qt.GetSignal(C.GoString(ptrName), "dropMimeData"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QMimeData, core.Qt__DropAction, int, int, *core.QModelIndex) bool)(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(row), int(column), core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).DropMimeDataDefault(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(row), int(column), core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectDropMimeData(f func(data *core.QMimeData, action core.Qt__DropAction, row int, column int, parent *core.QModelIndex) bool) {
	defer qt.Recovering("connect QStandardItemModel::dropMimeData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "dropMimeData", f)
	}
}

func (ptr *QStandardItemModel) DisconnectDropMimeData() {
	defer qt.Recovering("disconnect QStandardItemModel::dropMimeData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "dropMimeData")
	}
}

func (ptr *QStandardItemModel) DropMimeData(data core.QMimeData_ITF, action core.Qt__DropAction, row int, column int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::dropMimeData")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_DropMimeData(ptr.Pointer(), core.PointerFromQMimeData(data), C.int(action), C.int(row), C.int(column), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) DropMimeDataDefault(data core.QMimeData_ITF, action core.Qt__DropAction, row int, column int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::dropMimeData")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_DropMimeDataDefault(ptr.Pointer(), core.PointerFromQMimeData(data), C.int(action), C.int(row), C.int(column), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_Flags
func callbackQStandardItemModel_Flags(ptr unsafe.Pointer, ptrName *C.char, index unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::flags")

	if signal := qt.GetSignal(C.GoString(ptrName), "flags"); signal != nil {
		return C.int(signal.(func(*core.QModelIndex) core.Qt__ItemFlag)(core.NewQModelIndexFromPointer(index)))
	}

	return C.int(NewQStandardItemModelFromPointer(ptr).FlagsDefault(core.NewQModelIndexFromPointer(index)))
}

func (ptr *QStandardItemModel) ConnectFlags(f func(index *core.QModelIndex) core.Qt__ItemFlag) {
	defer qt.Recovering("connect QStandardItemModel::flags")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "flags", f)
	}
}

func (ptr *QStandardItemModel) DisconnectFlags() {
	defer qt.Recovering("disconnect QStandardItemModel::flags")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "flags")
	}
}

func (ptr *QStandardItemModel) Flags(index core.QModelIndex_ITF) core.Qt__ItemFlag {
	defer qt.Recovering("QStandardItemModel::flags")

	if ptr.Pointer() != nil {
		return core.Qt__ItemFlag(C.QStandardItemModel_Flags(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return 0
}

func (ptr *QStandardItemModel) FlagsDefault(index core.QModelIndex_ITF) core.Qt__ItemFlag {
	defer qt.Recovering("QStandardItemModel::flags")

	if ptr.Pointer() != nil {
		return core.Qt__ItemFlag(C.QStandardItemModel_FlagsDefault(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return 0
}

//export callbackQStandardItemModel_HasChildren
func callbackQStandardItemModel_HasChildren(ptr unsafe.Pointer, ptrName *C.char, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::hasChildren")

	if signal := qt.GetSignal(C.GoString(ptrName), "hasChildren"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QModelIndex) bool)(core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).HasChildrenDefault(core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectHasChildren(f func(parent *core.QModelIndex) bool) {
	defer qt.Recovering("connect QStandardItemModel::hasChildren")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "hasChildren", f)
	}
}

func (ptr *QStandardItemModel) DisconnectHasChildren() {
	defer qt.Recovering("disconnect QStandardItemModel::hasChildren")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "hasChildren")
	}
}

func (ptr *QStandardItemModel) HasChildren(parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::hasChildren")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_HasChildren(ptr.Pointer(), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) HasChildrenDefault(parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::hasChildren")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_HasChildrenDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_HeaderData
func callbackQStandardItemModel_HeaderData(ptr unsafe.Pointer, ptrName *C.char, section C.int, orientation C.int, role C.int) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItemModel::headerData")

	if signal := qt.GetSignal(C.GoString(ptrName), "headerData"); signal != nil {
		return core.PointerFromQVariant(signal.(func(int, core.Qt__Orientation, int) *core.QVariant)(int(section), core.Qt__Orientation(orientation), int(role)))
	}

	return core.PointerFromQVariant(NewQStandardItemModelFromPointer(ptr).HeaderDataDefault(int(section), core.Qt__Orientation(orientation), int(role)))
}

func (ptr *QStandardItemModel) ConnectHeaderData(f func(section int, orientation core.Qt__Orientation, role int) *core.QVariant) {
	defer qt.Recovering("connect QStandardItemModel::headerData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "headerData", f)
	}
}

func (ptr *QStandardItemModel) DisconnectHeaderData() {
	defer qt.Recovering("disconnect QStandardItemModel::headerData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "headerData")
	}
}

func (ptr *QStandardItemModel) HeaderData(section int, orientation core.Qt__Orientation, role int) *core.QVariant {
	defer qt.Recovering("QStandardItemModel::headerData")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QStandardItemModel_HeaderData(ptr.Pointer(), C.int(section), C.int(orientation), C.int(role)))
	}
	return nil
}

func (ptr *QStandardItemModel) HeaderDataDefault(section int, orientation core.Qt__Orientation, role int) *core.QVariant {
	defer qt.Recovering("QStandardItemModel::headerData")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QStandardItemModel_HeaderDataDefault(ptr.Pointer(), C.int(section), C.int(orientation), C.int(role)))
	}
	return nil
}

func (ptr *QStandardItemModel) HorizontalHeaderItem(column int) *QStandardItem {
	defer qt.Recovering("QStandardItemModel::horizontalHeaderItem")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_HorizontalHeaderItem(ptr.Pointer(), C.int(column)))
	}
	return nil
}

//export callbackQStandardItemModel_Index
func callbackQStandardItemModel_Index(ptr unsafe.Pointer, ptrName *C.char, row C.int, column C.int, parent unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItemModel::index")

	if signal := qt.GetSignal(C.GoString(ptrName), "index"); signal != nil {
		return core.PointerFromQModelIndex(signal.(func(int, int, *core.QModelIndex) *core.QModelIndex)(int(row), int(column), core.NewQModelIndexFromPointer(parent)))
	}

	return core.PointerFromQModelIndex(NewQStandardItemModelFromPointer(ptr).IndexDefault(int(row), int(column), core.NewQModelIndexFromPointer(parent)))
}

func (ptr *QStandardItemModel) ConnectIndex(f func(row int, column int, parent *core.QModelIndex) *core.QModelIndex) {
	defer qt.Recovering("connect QStandardItemModel::index")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "index", f)
	}
}

func (ptr *QStandardItemModel) DisconnectIndex() {
	defer qt.Recovering("disconnect QStandardItemModel::index")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "index")
	}
}

func (ptr *QStandardItemModel) Index(row int, column int, parent core.QModelIndex_ITF) *core.QModelIndex {
	defer qt.Recovering("QStandardItemModel::index")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItemModel_Index(ptr.Pointer(), C.int(row), C.int(column), core.PointerFromQModelIndex(parent)))
	}
	return nil
}

func (ptr *QStandardItemModel) IndexDefault(row int, column int, parent core.QModelIndex_ITF) *core.QModelIndex {
	defer qt.Recovering("QStandardItemModel::index")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItemModel_IndexDefault(ptr.Pointer(), C.int(row), C.int(column), core.PointerFromQModelIndex(parent)))
	}
	return nil
}

func (ptr *QStandardItemModel) IndexFromItem(item QStandardItem_ITF) *core.QModelIndex {
	defer qt.Recovering("QStandardItemModel::indexFromItem")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItemModel_IndexFromItem(ptr.Pointer(), PointerFromQStandardItem(item)))
	}
	return nil
}

func (ptr *QStandardItemModel) InsertColumn2(column int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::insertColumn")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertColumn2(ptr.Pointer(), C.int(column), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_InsertColumns
func callbackQStandardItemModel_InsertColumns(ptr unsafe.Pointer, ptrName *C.char, column C.int, count C.int, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::insertColumns")

	if signal := qt.GetSignal(C.GoString(ptrName), "insertColumns"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int, int, *core.QModelIndex) bool)(int(column), int(count), core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).InsertColumnsDefault(int(column), int(count), core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectInsertColumns(f func(column int, count int, parent *core.QModelIndex) bool) {
	defer qt.Recovering("connect QStandardItemModel::insertColumns")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "insertColumns", f)
	}
}

func (ptr *QStandardItemModel) DisconnectInsertColumns() {
	defer qt.Recovering("disconnect QStandardItemModel::insertColumns")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "insertColumns")
	}
}

func (ptr *QStandardItemModel) InsertColumns(column int, count int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::insertColumns")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertColumns(ptr.Pointer(), C.int(column), C.int(count), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) InsertColumnsDefault(column int, count int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::insertColumns")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertColumnsDefault(ptr.Pointer(), C.int(column), C.int(count), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) InsertRow2(row int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::insertRow")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertRow2(ptr.Pointer(), C.int(row), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) InsertRow3(row int, item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItemModel::insertRow")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_InsertRow3(ptr.Pointer(), C.int(row), PointerFromQStandardItem(item))
	}
}

//export callbackQStandardItemModel_InsertRows
func callbackQStandardItemModel_InsertRows(ptr unsafe.Pointer, ptrName *C.char, row C.int, count C.int, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::insertRows")

	if signal := qt.GetSignal(C.GoString(ptrName), "insertRows"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int, int, *core.QModelIndex) bool)(int(row), int(count), core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).InsertRowsDefault(int(row), int(count), core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectInsertRows(f func(row int, count int, parent *core.QModelIndex) bool) {
	defer qt.Recovering("connect QStandardItemModel::insertRows")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "insertRows", f)
	}
}

func (ptr *QStandardItemModel) DisconnectInsertRows() {
	defer qt.Recovering("disconnect QStandardItemModel::insertRows")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "insertRows")
	}
}

func (ptr *QStandardItemModel) InsertRows(row int, count int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::insertRows")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertRows(ptr.Pointer(), C.int(row), C.int(count), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) InsertRowsDefault(row int, count int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::insertRows")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertRowsDefault(ptr.Pointer(), C.int(row), C.int(count), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) InvisibleRootItem() *QStandardItem {
	defer qt.Recovering("QStandardItemModel::invisibleRootItem")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_InvisibleRootItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItemModel) Item(row int, column int) *QStandardItem {
	defer qt.Recovering("QStandardItemModel::item")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_Item(ptr.Pointer(), C.int(row), C.int(column)))
	}
	return nil
}

//export callbackQStandardItemModel_ItemChanged
func callbackQStandardItemModel_ItemChanged(ptr unsafe.Pointer, ptrName *C.char, item unsafe.Pointer) {
	defer qt.Recovering("callback QStandardItemModel::itemChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "itemChanged"); signal != nil {
		signal.(func(*QStandardItem))(NewQStandardItemFromPointer(item))
	}

}

func (ptr *QStandardItemModel) ConnectItemChanged(f func(item *QStandardItem)) {
	defer qt.Recovering("connect QStandardItemModel::itemChanged")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_ConnectItemChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "itemChanged", f)
	}
}

func (ptr *QStandardItemModel) DisconnectItemChanged() {
	defer qt.Recovering("disconnect QStandardItemModel::itemChanged")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_DisconnectItemChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "itemChanged")
	}
}

func (ptr *QStandardItemModel) ItemChanged(item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItemModel::itemChanged")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_ItemChanged(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) ItemFromIndex(index core.QModelIndex_ITF) *QStandardItem {
	defer qt.Recovering("QStandardItemModel::itemFromIndex")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_ItemFromIndex(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return nil
}

func (ptr *QStandardItemModel) ItemPrototype() *QStandardItem {
	defer qt.Recovering("QStandardItemModel::itemPrototype")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_ItemPrototype(ptr.Pointer()))
	}
	return nil
}

//export callbackQStandardItemModel_MimeTypes
func callbackQStandardItemModel_MimeTypes(ptr unsafe.Pointer, ptrName *C.char) *C.char {
	defer qt.Recovering("callback QStandardItemModel::mimeTypes")

	if signal := qt.GetSignal(C.GoString(ptrName), "mimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQStandardItemModelFromPointer(ptr).MimeTypesDefault(), "|"))
}

func (ptr *QStandardItemModel) ConnectMimeTypes(f func() []string) {
	defer qt.Recovering("connect QStandardItemModel::mimeTypes")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mimeTypes", f)
	}
}

func (ptr *QStandardItemModel) DisconnectMimeTypes() {
	defer qt.Recovering("disconnect QStandardItemModel::mimeTypes")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mimeTypes")
	}
}

func (ptr *QStandardItemModel) MimeTypes() []string {
	defer qt.Recovering("QStandardItemModel::mimeTypes")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QStandardItemModel_MimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QStandardItemModel) MimeTypesDefault() []string {
	defer qt.Recovering("QStandardItemModel::mimeTypes")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QStandardItemModel_MimeTypesDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQStandardItemModel_Parent
func callbackQStandardItemModel_Parent(ptr unsafe.Pointer, ptrName *C.char, child unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItemModel::parent")

	if signal := qt.GetSignal(C.GoString(ptrName), "parent"); signal != nil {
		return core.PointerFromQModelIndex(signal.(func(*core.QModelIndex) *core.QModelIndex)(core.NewQModelIndexFromPointer(child)))
	}

	return core.PointerFromQModelIndex(NewQStandardItemModelFromPointer(ptr).ParentDefault(core.NewQModelIndexFromPointer(child)))
}

func (ptr *QStandardItemModel) ConnectParent(f func(child *core.QModelIndex) *core.QModelIndex) {
	defer qt.Recovering("connect QStandardItemModel::parent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "parent", f)
	}
}

func (ptr *QStandardItemModel) DisconnectParent() {
	defer qt.Recovering("disconnect QStandardItemModel::parent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "parent")
	}
}

func (ptr *QStandardItemModel) Parent(child core.QModelIndex_ITF) *core.QModelIndex {
	defer qt.Recovering("QStandardItemModel::parent")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItemModel_Parent(ptr.Pointer(), core.PointerFromQModelIndex(child)))
	}
	return nil
}

func (ptr *QStandardItemModel) ParentDefault(child core.QModelIndex_ITF) *core.QModelIndex {
	defer qt.Recovering("QStandardItemModel::parent")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItemModel_ParentDefault(ptr.Pointer(), core.PointerFromQModelIndex(child)))
	}
	return nil
}

//export callbackQStandardItemModel_RemoveColumns
func callbackQStandardItemModel_RemoveColumns(ptr unsafe.Pointer, ptrName *C.char, column C.int, count C.int, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::removeColumns")

	if signal := qt.GetSignal(C.GoString(ptrName), "removeColumns"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int, int, *core.QModelIndex) bool)(int(column), int(count), core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).RemoveColumnsDefault(int(column), int(count), core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectRemoveColumns(f func(column int, count int, parent *core.QModelIndex) bool) {
	defer qt.Recovering("connect QStandardItemModel::removeColumns")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "removeColumns", f)
	}
}

func (ptr *QStandardItemModel) DisconnectRemoveColumns() {
	defer qt.Recovering("disconnect QStandardItemModel::removeColumns")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "removeColumns")
	}
}

func (ptr *QStandardItemModel) RemoveColumns(column int, count int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::removeColumns")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_RemoveColumns(ptr.Pointer(), C.int(column), C.int(count), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) RemoveColumnsDefault(column int, count int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::removeColumns")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_RemoveColumnsDefault(ptr.Pointer(), C.int(column), C.int(count), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_RemoveRows
func callbackQStandardItemModel_RemoveRows(ptr unsafe.Pointer, ptrName *C.char, row C.int, count C.int, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::removeRows")

	if signal := qt.GetSignal(C.GoString(ptrName), "removeRows"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int, int, *core.QModelIndex) bool)(int(row), int(count), core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).RemoveRowsDefault(int(row), int(count), core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectRemoveRows(f func(row int, count int, parent *core.QModelIndex) bool) {
	defer qt.Recovering("connect QStandardItemModel::removeRows")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "removeRows", f)
	}
}

func (ptr *QStandardItemModel) DisconnectRemoveRows() {
	defer qt.Recovering("disconnect QStandardItemModel::removeRows")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "removeRows")
	}
}

func (ptr *QStandardItemModel) RemoveRows(row int, count int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::removeRows")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_RemoveRows(ptr.Pointer(), C.int(row), C.int(count), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) RemoveRowsDefault(row int, count int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::removeRows")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_RemoveRowsDefault(ptr.Pointer(), C.int(row), C.int(count), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_RowCount
func callbackQStandardItemModel_RowCount(ptr unsafe.Pointer, ptrName *C.char, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::rowCount")

	if signal := qt.GetSignal(C.GoString(ptrName), "rowCount"); signal != nil {
		return C.int(signal.(func(*core.QModelIndex) int)(core.NewQModelIndexFromPointer(parent)))
	}

	return C.int(NewQStandardItemModelFromPointer(ptr).RowCountDefault(core.NewQModelIndexFromPointer(parent)))
}

func (ptr *QStandardItemModel) ConnectRowCount(f func(parent *core.QModelIndex) int) {
	defer qt.Recovering("connect QStandardItemModel::rowCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "rowCount", f)
	}
}

func (ptr *QStandardItemModel) DisconnectRowCount() {
	defer qt.Recovering("disconnect QStandardItemModel::rowCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "rowCount")
	}
}

func (ptr *QStandardItemModel) RowCount(parent core.QModelIndex_ITF) int {
	defer qt.Recovering("QStandardItemModel::rowCount")

	if ptr.Pointer() != nil {
		return int(C.QStandardItemModel_RowCount(ptr.Pointer(), core.PointerFromQModelIndex(parent)))
	}
	return 0
}

func (ptr *QStandardItemModel) RowCountDefault(parent core.QModelIndex_ITF) int {
	defer qt.Recovering("QStandardItemModel::rowCount")

	if ptr.Pointer() != nil {
		return int(C.QStandardItemModel_RowCountDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent)))
	}
	return 0
}

func (ptr *QStandardItemModel) SetColumnCount(columns int) {
	defer qt.Recovering("QStandardItemModel::setColumnCount")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetColumnCount(ptr.Pointer(), C.int(columns))
	}
}

//export callbackQStandardItemModel_SetData
func callbackQStandardItemModel_SetData(ptr unsafe.Pointer, ptrName *C.char, index unsafe.Pointer, value unsafe.Pointer, role C.int) C.int {
	defer qt.Recovering("callback QStandardItemModel::setData")

	if signal := qt.GetSignal(C.GoString(ptrName), "setData"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QModelIndex, *core.QVariant, int) bool)(core.NewQModelIndexFromPointer(index), core.NewQVariantFromPointer(value), int(role))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).SetDataDefault(core.NewQModelIndexFromPointer(index), core.NewQVariantFromPointer(value), int(role))))
}

func (ptr *QStandardItemModel) ConnectSetData(f func(index *core.QModelIndex, value *core.QVariant, role int) bool) {
	defer qt.Recovering("connect QStandardItemModel::setData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setData", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSetData() {
	defer qt.Recovering("disconnect QStandardItemModel::setData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setData")
	}
}

func (ptr *QStandardItemModel) SetData(index core.QModelIndex_ITF, value core.QVariant_ITF, role int) bool {
	defer qt.Recovering("QStandardItemModel::setData")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SetData(ptr.Pointer(), core.PointerFromQModelIndex(index), core.PointerFromQVariant(value), C.int(role)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) SetDataDefault(index core.QModelIndex_ITF, value core.QVariant_ITF, role int) bool {
	defer qt.Recovering("QStandardItemModel::setData")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SetDataDefault(ptr.Pointer(), core.PointerFromQModelIndex(index), core.PointerFromQVariant(value), C.int(role)) != 0
	}
	return false
}

//export callbackQStandardItemModel_SetHeaderData
func callbackQStandardItemModel_SetHeaderData(ptr unsafe.Pointer, ptrName *C.char, section C.int, orientation C.int, value unsafe.Pointer, role C.int) C.int {
	defer qt.Recovering("callback QStandardItemModel::setHeaderData")

	if signal := qt.GetSignal(C.GoString(ptrName), "setHeaderData"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(int, core.Qt__Orientation, *core.QVariant, int) bool)(int(section), core.Qt__Orientation(orientation), core.NewQVariantFromPointer(value), int(role))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).SetHeaderDataDefault(int(section), core.Qt__Orientation(orientation), core.NewQVariantFromPointer(value), int(role))))
}

func (ptr *QStandardItemModel) ConnectSetHeaderData(f func(section int, orientation core.Qt__Orientation, value *core.QVariant, role int) bool) {
	defer qt.Recovering("connect QStandardItemModel::setHeaderData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setHeaderData", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSetHeaderData() {
	defer qt.Recovering("disconnect QStandardItemModel::setHeaderData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setHeaderData")
	}
}

func (ptr *QStandardItemModel) SetHeaderData(section int, orientation core.Qt__Orientation, value core.QVariant_ITF, role int) bool {
	defer qt.Recovering("QStandardItemModel::setHeaderData")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SetHeaderData(ptr.Pointer(), C.int(section), C.int(orientation), core.PointerFromQVariant(value), C.int(role)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) SetHeaderDataDefault(section int, orientation core.Qt__Orientation, value core.QVariant_ITF, role int) bool {
	defer qt.Recovering("QStandardItemModel::setHeaderData")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SetHeaderDataDefault(ptr.Pointer(), C.int(section), C.int(orientation), core.PointerFromQVariant(value), C.int(role)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) SetHorizontalHeaderItem(column int, item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItemModel::setHorizontalHeaderItem")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetHorizontalHeaderItem(ptr.Pointer(), C.int(column), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetHorizontalHeaderLabels(labels []string) {
	defer qt.Recovering("QStandardItemModel::setHorizontalHeaderLabels")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetHorizontalHeaderLabels(ptr.Pointer(), C.CString(strings.Join(labels, "|")))
	}
}

func (ptr *QStandardItemModel) SetItem2(row int, item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItemModel::setItem")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItem2(ptr.Pointer(), C.int(row), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetItem(row int, column int, item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItemModel::setItem")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItem(ptr.Pointer(), C.int(row), C.int(column), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetItemPrototype(item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItemModel::setItemPrototype")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItemPrototype(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetRowCount(rows int) {
	defer qt.Recovering("QStandardItemModel::setRowCount")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetRowCount(ptr.Pointer(), C.int(rows))
	}
}

func (ptr *QStandardItemModel) SetVerticalHeaderItem(row int, item QStandardItem_ITF) {
	defer qt.Recovering("QStandardItemModel::setVerticalHeaderItem")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetVerticalHeaderItem(ptr.Pointer(), C.int(row), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetVerticalHeaderLabels(labels []string) {
	defer qt.Recovering("QStandardItemModel::setVerticalHeaderLabels")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetVerticalHeaderLabels(ptr.Pointer(), C.CString(strings.Join(labels, "|")))
	}
}

//export callbackQStandardItemModel_Sibling
func callbackQStandardItemModel_Sibling(ptr unsafe.Pointer, ptrName *C.char, row C.int, column C.int, idx unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItemModel::sibling")

	if signal := qt.GetSignal(C.GoString(ptrName), "sibling"); signal != nil {
		return core.PointerFromQModelIndex(signal.(func(int, int, *core.QModelIndex) *core.QModelIndex)(int(row), int(column), core.NewQModelIndexFromPointer(idx)))
	}

	return core.PointerFromQModelIndex(NewQStandardItemModelFromPointer(ptr).SiblingDefault(int(row), int(column), core.NewQModelIndexFromPointer(idx)))
}

func (ptr *QStandardItemModel) ConnectSibling(f func(row int, column int, idx *core.QModelIndex) *core.QModelIndex) {
	defer qt.Recovering("connect QStandardItemModel::sibling")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "sibling", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSibling() {
	defer qt.Recovering("disconnect QStandardItemModel::sibling")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "sibling")
	}
}

func (ptr *QStandardItemModel) Sibling(row int, column int, idx core.QModelIndex_ITF) *core.QModelIndex {
	defer qt.Recovering("QStandardItemModel::sibling")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItemModel_Sibling(ptr.Pointer(), C.int(row), C.int(column), core.PointerFromQModelIndex(idx)))
	}
	return nil
}

func (ptr *QStandardItemModel) SiblingDefault(row int, column int, idx core.QModelIndex_ITF) *core.QModelIndex {
	defer qt.Recovering("QStandardItemModel::sibling")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItemModel_SiblingDefault(ptr.Pointer(), C.int(row), C.int(column), core.PointerFromQModelIndex(idx)))
	}
	return nil
}

//export callbackQStandardItemModel_Sort
func callbackQStandardItemModel_Sort(ptr unsafe.Pointer, ptrName *C.char, column C.int, order C.int) {
	defer qt.Recovering("callback QStandardItemModel::sort")

	if signal := qt.GetSignal(C.GoString(ptrName), "sort"); signal != nil {
		signal.(func(int, core.Qt__SortOrder))(int(column), core.Qt__SortOrder(order))
	} else {
		NewQStandardItemModelFromPointer(ptr).SortDefault(int(column), core.Qt__SortOrder(order))
	}
}

func (ptr *QStandardItemModel) ConnectSort(f func(column int, order core.Qt__SortOrder)) {
	defer qt.Recovering("connect QStandardItemModel::sort")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "sort", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSort() {
	defer qt.Recovering("disconnect QStandardItemModel::sort")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "sort")
	}
}

func (ptr *QStandardItemModel) Sort(column int, order core.Qt__SortOrder) {
	defer qt.Recovering("QStandardItemModel::sort")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_Sort(ptr.Pointer(), C.int(column), C.int(order))
	}
}

func (ptr *QStandardItemModel) SortDefault(column int, order core.Qt__SortOrder) {
	defer qt.Recovering("QStandardItemModel::sort")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_SortDefault(ptr.Pointer(), C.int(column), C.int(order))
	}
}

//export callbackQStandardItemModel_SupportedDropActions
func callbackQStandardItemModel_SupportedDropActions(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QStandardItemModel::supportedDropActions")

	if signal := qt.GetSignal(C.GoString(ptrName), "supportedDropActions"); signal != nil {
		return C.int(signal.(func() core.Qt__DropAction)())
	}

	return C.int(NewQStandardItemModelFromPointer(ptr).SupportedDropActionsDefault())
}

func (ptr *QStandardItemModel) ConnectSupportedDropActions(f func() core.Qt__DropAction) {
	defer qt.Recovering("connect QStandardItemModel::supportedDropActions")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "supportedDropActions", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSupportedDropActions() {
	defer qt.Recovering("disconnect QStandardItemModel::supportedDropActions")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "supportedDropActions")
	}
}

func (ptr *QStandardItemModel) SupportedDropActions() core.Qt__DropAction {
	defer qt.Recovering("QStandardItemModel::supportedDropActions")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QStandardItemModel_SupportedDropActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItemModel) SupportedDropActionsDefault() core.Qt__DropAction {
	defer qt.Recovering("QStandardItemModel::supportedDropActions")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QStandardItemModel_SupportedDropActionsDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItemModel) TakeHorizontalHeaderItem(column int) *QStandardItem {
	defer qt.Recovering("QStandardItemModel::takeHorizontalHeaderItem")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_TakeHorizontalHeaderItem(ptr.Pointer(), C.int(column)))
	}
	return nil
}

func (ptr *QStandardItemModel) TakeItem(row int, column int) *QStandardItem {
	defer qt.Recovering("QStandardItemModel::takeItem")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_TakeItem(ptr.Pointer(), C.int(row), C.int(column)))
	}
	return nil
}

func (ptr *QStandardItemModel) TakeVerticalHeaderItem(row int) *QStandardItem {
	defer qt.Recovering("QStandardItemModel::takeVerticalHeaderItem")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_TakeVerticalHeaderItem(ptr.Pointer(), C.int(row)))
	}
	return nil
}

func (ptr *QStandardItemModel) VerticalHeaderItem(row int) *QStandardItem {
	defer qt.Recovering("QStandardItemModel::verticalHeaderItem")

	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_VerticalHeaderItem(ptr.Pointer(), C.int(row)))
	}
	return nil
}

func (ptr *QStandardItemModel) DestroyQStandardItemModel() {
	defer qt.Recovering("QStandardItemModel::~QStandardItemModel")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_DestroyQStandardItemModel(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQStandardItemModel_Buddy
func callbackQStandardItemModel_Buddy(ptr unsafe.Pointer, ptrName *C.char, index unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItemModel::buddy")

	if signal := qt.GetSignal(C.GoString(ptrName), "buddy"); signal != nil {
		return core.PointerFromQModelIndex(signal.(func(*core.QModelIndex) *core.QModelIndex)(core.NewQModelIndexFromPointer(index)))
	}

	return core.PointerFromQModelIndex(NewQStandardItemModelFromPointer(ptr).BuddyDefault(core.NewQModelIndexFromPointer(index)))
}

func (ptr *QStandardItemModel) ConnectBuddy(f func(index *core.QModelIndex) *core.QModelIndex) {
	defer qt.Recovering("connect QStandardItemModel::buddy")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "buddy", f)
	}
}

func (ptr *QStandardItemModel) DisconnectBuddy() {
	defer qt.Recovering("disconnect QStandardItemModel::buddy")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "buddy")
	}
}

func (ptr *QStandardItemModel) Buddy(index core.QModelIndex_ITF) *core.QModelIndex {
	defer qt.Recovering("QStandardItemModel::buddy")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItemModel_Buddy(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return nil
}

func (ptr *QStandardItemModel) BuddyDefault(index core.QModelIndex_ITF) *core.QModelIndex {
	defer qt.Recovering("QStandardItemModel::buddy")

	if ptr.Pointer() != nil {
		return core.NewQModelIndexFromPointer(C.QStandardItemModel_BuddyDefault(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return nil
}

//export callbackQStandardItemModel_CanDropMimeData
func callbackQStandardItemModel_CanDropMimeData(ptr unsafe.Pointer, ptrName *C.char, data unsafe.Pointer, action C.int, row C.int, column C.int, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::canDropMimeData")

	if signal := qt.GetSignal(C.GoString(ptrName), "canDropMimeData"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QMimeData, core.Qt__DropAction, int, int, *core.QModelIndex) bool)(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(row), int(column), core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).CanDropMimeDataDefault(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(row), int(column), core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectCanDropMimeData(f func(data *core.QMimeData, action core.Qt__DropAction, row int, column int, parent *core.QModelIndex) bool) {
	defer qt.Recovering("connect QStandardItemModel::canDropMimeData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "canDropMimeData", f)
	}
}

func (ptr *QStandardItemModel) DisconnectCanDropMimeData() {
	defer qt.Recovering("disconnect QStandardItemModel::canDropMimeData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "canDropMimeData")
	}
}

func (ptr *QStandardItemModel) CanDropMimeData(data core.QMimeData_ITF, action core.Qt__DropAction, row int, column int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::canDropMimeData")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanDropMimeData(ptr.Pointer(), core.PointerFromQMimeData(data), C.int(action), C.int(row), C.int(column), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) CanDropMimeDataDefault(data core.QMimeData_ITF, action core.Qt__DropAction, row int, column int, parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::canDropMimeData")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanDropMimeDataDefault(ptr.Pointer(), core.PointerFromQMimeData(data), C.int(action), C.int(row), C.int(column), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_CanFetchMore
func callbackQStandardItemModel_CanFetchMore(ptr unsafe.Pointer, ptrName *C.char, parent unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::canFetchMore")

	if signal := qt.GetSignal(C.GoString(ptrName), "canFetchMore"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QModelIndex) bool)(core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).CanFetchMoreDefault(core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectCanFetchMore(f func(parent *core.QModelIndex) bool) {
	defer qt.Recovering("connect QStandardItemModel::canFetchMore")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "canFetchMore", f)
	}
}

func (ptr *QStandardItemModel) DisconnectCanFetchMore() {
	defer qt.Recovering("disconnect QStandardItemModel::canFetchMore")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "canFetchMore")
	}
}

func (ptr *QStandardItemModel) CanFetchMore(parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::canFetchMore")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanFetchMore(ptr.Pointer(), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) CanFetchMoreDefault(parent core.QModelIndex_ITF) bool {
	defer qt.Recovering("QStandardItemModel::canFetchMore")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanFetchMoreDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_FetchMore
func callbackQStandardItemModel_FetchMore(ptr unsafe.Pointer, ptrName *C.char, parent unsafe.Pointer) {
	defer qt.Recovering("callback QStandardItemModel::fetchMore")

	if signal := qt.GetSignal(C.GoString(ptrName), "fetchMore"); signal != nil {
		signal.(func(*core.QModelIndex))(core.NewQModelIndexFromPointer(parent))
	} else {
		NewQStandardItemModelFromPointer(ptr).FetchMoreDefault(core.NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QStandardItemModel) ConnectFetchMore(f func(parent *core.QModelIndex)) {
	defer qt.Recovering("connect QStandardItemModel::fetchMore")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "fetchMore", f)
	}
}

func (ptr *QStandardItemModel) DisconnectFetchMore() {
	defer qt.Recovering("disconnect QStandardItemModel::fetchMore")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "fetchMore")
	}
}

func (ptr *QStandardItemModel) FetchMore(parent core.QModelIndex_ITF) {
	defer qt.Recovering("QStandardItemModel::fetchMore")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_FetchMore(ptr.Pointer(), core.PointerFromQModelIndex(parent))
	}
}

func (ptr *QStandardItemModel) FetchMoreDefault(parent core.QModelIndex_ITF) {
	defer qt.Recovering("QStandardItemModel::fetchMore")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_FetchMoreDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent))
	}
}

//export callbackQStandardItemModel_MoveColumns
func callbackQStandardItemModel_MoveColumns(ptr unsafe.Pointer, ptrName *C.char, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.int {
	defer qt.Recovering("callback QStandardItemModel::moveColumns")

	if signal := qt.GetSignal(C.GoString(ptrName), "moveColumns"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int) bool)(core.NewQModelIndexFromPointer(sourceParent), int(sourceColumn), int(count), core.NewQModelIndexFromPointer(destinationParent), int(destinationChild))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).MoveColumnsDefault(core.NewQModelIndexFromPointer(sourceParent), int(sourceColumn), int(count), core.NewQModelIndexFromPointer(destinationParent), int(destinationChild))))
}

func (ptr *QStandardItemModel) ConnectMoveColumns(f func(sourceParent *core.QModelIndex, sourceColumn int, count int, destinationParent *core.QModelIndex, destinationChild int) bool) {
	defer qt.Recovering("connect QStandardItemModel::moveColumns")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "moveColumns", f)
	}
}

func (ptr *QStandardItemModel) DisconnectMoveColumns() {
	defer qt.Recovering("disconnect QStandardItemModel::moveColumns")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "moveColumns")
	}
}

func (ptr *QStandardItemModel) MoveColumns(sourceParent core.QModelIndex_ITF, sourceColumn int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	defer qt.Recovering("QStandardItemModel::moveColumns")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveColumns(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(sourceColumn), C.int(count), core.PointerFromQModelIndex(destinationParent), C.int(destinationChild)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) MoveColumnsDefault(sourceParent core.QModelIndex_ITF, sourceColumn int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	defer qt.Recovering("QStandardItemModel::moveColumns")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveColumnsDefault(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(sourceColumn), C.int(count), core.PointerFromQModelIndex(destinationParent), C.int(destinationChild)) != 0
	}
	return false
}

//export callbackQStandardItemModel_MoveRows
func callbackQStandardItemModel_MoveRows(ptr unsafe.Pointer, ptrName *C.char, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.int {
	defer qt.Recovering("callback QStandardItemModel::moveRows")

	if signal := qt.GetSignal(C.GoString(ptrName), "moveRows"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int) bool)(core.NewQModelIndexFromPointer(sourceParent), int(sourceRow), int(count), core.NewQModelIndexFromPointer(destinationParent), int(destinationChild))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).MoveRowsDefault(core.NewQModelIndexFromPointer(sourceParent), int(sourceRow), int(count), core.NewQModelIndexFromPointer(destinationParent), int(destinationChild))))
}

func (ptr *QStandardItemModel) ConnectMoveRows(f func(sourceParent *core.QModelIndex, sourceRow int, count int, destinationParent *core.QModelIndex, destinationChild int) bool) {
	defer qt.Recovering("connect QStandardItemModel::moveRows")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "moveRows", f)
	}
}

func (ptr *QStandardItemModel) DisconnectMoveRows() {
	defer qt.Recovering("disconnect QStandardItemModel::moveRows")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "moveRows")
	}
}

func (ptr *QStandardItemModel) MoveRows(sourceParent core.QModelIndex_ITF, sourceRow int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	defer qt.Recovering("QStandardItemModel::moveRows")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveRows(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(sourceRow), C.int(count), core.PointerFromQModelIndex(destinationParent), C.int(destinationChild)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) MoveRowsDefault(sourceParent core.QModelIndex_ITF, sourceRow int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	defer qt.Recovering("QStandardItemModel::moveRows")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveRowsDefault(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(sourceRow), C.int(count), core.PointerFromQModelIndex(destinationParent), C.int(destinationChild)) != 0
	}
	return false
}

//export callbackQStandardItemModel_ResetInternalData
func callbackQStandardItemModel_ResetInternalData(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QStandardItemModel::resetInternalData")

	if signal := qt.GetSignal(C.GoString(ptrName), "resetInternalData"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QStandardItemModel) ConnectResetInternalData(f func()) {
	defer qt.Recovering("connect QStandardItemModel::resetInternalData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "resetInternalData", f)
	}
}

func (ptr *QStandardItemModel) DisconnectResetInternalData() {
	defer qt.Recovering("disconnect QStandardItemModel::resetInternalData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "resetInternalData")
	}
}

func (ptr *QStandardItemModel) ResetInternalData() {
	defer qt.Recovering("QStandardItemModel::resetInternalData")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_ResetInternalData(ptr.Pointer())
	}
}

//export callbackQStandardItemModel_Revert
func callbackQStandardItemModel_Revert(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QStandardItemModel::revert")

	if signal := qt.GetSignal(C.GoString(ptrName), "revert"); signal != nil {
		signal.(func())()
	} else {
		NewQStandardItemModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QStandardItemModel) ConnectRevert(f func()) {
	defer qt.Recovering("connect QStandardItemModel::revert")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "revert", f)
	}
}

func (ptr *QStandardItemModel) DisconnectRevert() {
	defer qt.Recovering("disconnect QStandardItemModel::revert")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "revert")
	}
}

func (ptr *QStandardItemModel) Revert() {
	defer qt.Recovering("QStandardItemModel::revert")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_Revert(ptr.Pointer())
	}
}

func (ptr *QStandardItemModel) RevertDefault() {
	defer qt.Recovering("QStandardItemModel::revert")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQStandardItemModel_Span
func callbackQStandardItemModel_Span(ptr unsafe.Pointer, ptrName *C.char, index unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItemModel::span")

	if signal := qt.GetSignal(C.GoString(ptrName), "span"); signal != nil {
		return core.PointerFromQSize(signal.(func(*core.QModelIndex) *core.QSize)(core.NewQModelIndexFromPointer(index)))
	}

	return core.PointerFromQSize(NewQStandardItemModelFromPointer(ptr).SpanDefault(core.NewQModelIndexFromPointer(index)))
}

func (ptr *QStandardItemModel) ConnectSpan(f func(index *core.QModelIndex) *core.QSize) {
	defer qt.Recovering("connect QStandardItemModel::span")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "span", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSpan() {
	defer qt.Recovering("disconnect QStandardItemModel::span")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "span")
	}
}

func (ptr *QStandardItemModel) Span(index core.QModelIndex_ITF) *core.QSize {
	defer qt.Recovering("QStandardItemModel::span")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QStandardItemModel_Span(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return nil
}

func (ptr *QStandardItemModel) SpanDefault(index core.QModelIndex_ITF) *core.QSize {
	defer qt.Recovering("QStandardItemModel::span")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QStandardItemModel_SpanDefault(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return nil
}

//export callbackQStandardItemModel_Submit
func callbackQStandardItemModel_Submit(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QStandardItemModel::submit")

	if signal := qt.GetSignal(C.GoString(ptrName), "submit"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).SubmitDefault()))
}

func (ptr *QStandardItemModel) ConnectSubmit(f func() bool) {
	defer qt.Recovering("connect QStandardItemModel::submit")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "submit", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSubmit() {
	defer qt.Recovering("disconnect QStandardItemModel::submit")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "submit")
	}
}

func (ptr *QStandardItemModel) Submit() bool {
	defer qt.Recovering("QStandardItemModel::submit")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_Submit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItemModel) SubmitDefault() bool {
	defer qt.Recovering("QStandardItemModel::submit")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQStandardItemModel_SupportedDragActions
func callbackQStandardItemModel_SupportedDragActions(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QStandardItemModel::supportedDragActions")

	if signal := qt.GetSignal(C.GoString(ptrName), "supportedDragActions"); signal != nil {
		return C.int(signal.(func() core.Qt__DropAction)())
	}

	return C.int(NewQStandardItemModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QStandardItemModel) ConnectSupportedDragActions(f func() core.Qt__DropAction) {
	defer qt.Recovering("connect QStandardItemModel::supportedDragActions")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "supportedDragActions", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSupportedDragActions() {
	defer qt.Recovering("disconnect QStandardItemModel::supportedDragActions")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "supportedDragActions")
	}
}

func (ptr *QStandardItemModel) SupportedDragActions() core.Qt__DropAction {
	defer qt.Recovering("QStandardItemModel::supportedDragActions")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QStandardItemModel_SupportedDragActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItemModel) SupportedDragActionsDefault() core.Qt__DropAction {
	defer qt.Recovering("QStandardItemModel::supportedDragActions")

	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QStandardItemModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQStandardItemModel_TimerEvent
func callbackQStandardItemModel_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QStandardItemModel::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQStandardItemModelFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QStandardItemModel) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QStandardItemModel::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QStandardItemModel) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QStandardItemModel::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QStandardItemModel) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QStandardItemModel::timerEvent")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QStandardItemModel) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QStandardItemModel::timerEvent")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQStandardItemModel_ChildEvent
func callbackQStandardItemModel_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QStandardItemModel::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQStandardItemModelFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QStandardItemModel) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QStandardItemModel::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QStandardItemModel) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QStandardItemModel::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QStandardItemModel) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QStandardItemModel::childEvent")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QStandardItemModel) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QStandardItemModel::childEvent")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQStandardItemModel_ConnectNotify
func callbackQStandardItemModel_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QStandardItemModel::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStandardItemModelFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStandardItemModel) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QStandardItemModel::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QStandardItemModel) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QStandardItemModel::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QStandardItemModel) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QStandardItemModel::connectNotify")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStandardItemModel) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QStandardItemModel::connectNotify")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStandardItemModel_CustomEvent
func callbackQStandardItemModel_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QStandardItemModel::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQStandardItemModelFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QStandardItemModel) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QStandardItemModel::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QStandardItemModel) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QStandardItemModel::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QStandardItemModel) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QStandardItemModel::customEvent")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QStandardItemModel) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QStandardItemModel::customEvent")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQStandardItemModel_DeleteLater
func callbackQStandardItemModel_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QStandardItemModel::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QStandardItemModel) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QStandardItemModel::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QStandardItemModel) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QStandardItemModel::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QStandardItemModel) DeleteLater() {
	defer qt.Recovering("QStandardItemModel::deleteLater")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQStandardItemModel_DisconnectNotify
func callbackQStandardItemModel_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QStandardItemModel::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStandardItemModelFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStandardItemModel) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QStandardItemModel::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QStandardItemModel) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QStandardItemModel::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QStandardItemModel) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QStandardItemModel::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStandardItemModel) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QStandardItemModel::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QStandardItemModel_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStandardItemModel_Event
func callbackQStandardItemModel_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QStandardItemModel) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QStandardItemModel::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QStandardItemModel) DisconnectEvent() {
	defer qt.Recovering("disconnect QStandardItemModel::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QStandardItemModel) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QStandardItemModel::event")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QStandardItemModel::event")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQStandardItemModel_EventFilter
func callbackQStandardItemModel_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStandardItemModel::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QStandardItemModel) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QStandardItemModel::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QStandardItemModel) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QStandardItemModel::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QStandardItemModel) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QStandardItemModel::eventFilter")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QStandardItemModel::eventFilter")

	if ptr.Pointer() != nil {
		return C.QStandardItemModel_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQStandardItemModel_MetaObject
func callbackQStandardItemModel_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QStandardItemModel::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQStandardItemModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QStandardItemModel) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QStandardItemModel::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QStandardItemModel) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QStandardItemModel::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QStandardItemModel) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QStandardItemModel::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStandardItemModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItemModel) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QStandardItemModel::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStandardItemModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QStaticText::PerformanceHint
type QStaticText__PerformanceHint int64

const (
	QStaticText__ModerateCaching   = QStaticText__PerformanceHint(0)
	QStaticText__AggressiveCaching = QStaticText__PerformanceHint(1)
)

type QStaticText struct {
	ptr unsafe.Pointer
}

type QStaticText_ITF interface {
	QStaticText_PTR() *QStaticText
}

func (p *QStaticText) QStaticText_PTR() *QStaticText {
	return p
}

func (p *QStaticText) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QStaticText) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQStaticText(ptr QStaticText_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStaticText_PTR().Pointer()
	}
	return nil
}

func NewQStaticTextFromPointer(ptr unsafe.Pointer) *QStaticText {
	var n = new(QStaticText)
	n.SetPointer(ptr)
	return n
}

func newQStaticTextFromPointer(ptr unsafe.Pointer) *QStaticText {
	var n = NewQStaticTextFromPointer(ptr)
	return n
}

func NewQStaticText() *QStaticText {
	defer qt.Recovering("QStaticText::QStaticText")

	return newQStaticTextFromPointer(C.QStaticText_NewQStaticText())
}

func NewQStaticText3(other QStaticText_ITF) *QStaticText {
	defer qt.Recovering("QStaticText::QStaticText")

	return newQStaticTextFromPointer(C.QStaticText_NewQStaticText3(PointerFromQStaticText(other)))
}

func NewQStaticText2(text string) *QStaticText {
	defer qt.Recovering("QStaticText::QStaticText")

	return newQStaticTextFromPointer(C.QStaticText_NewQStaticText2(C.CString(text)))
}

func (ptr *QStaticText) PerformanceHint() QStaticText__PerformanceHint {
	defer qt.Recovering("QStaticText::performanceHint")

	if ptr.Pointer() != nil {
		return QStaticText__PerformanceHint(C.QStaticText_PerformanceHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStaticText) Prepare(matrix QTransform_ITF, font QFont_ITF) {
	defer qt.Recovering("QStaticText::prepare")

	if ptr.Pointer() != nil {
		C.QStaticText_Prepare(ptr.Pointer(), PointerFromQTransform(matrix), PointerFromQFont(font))
	}
}

func (ptr *QStaticText) SetPerformanceHint(performanceHint QStaticText__PerformanceHint) {
	defer qt.Recovering("QStaticText::setPerformanceHint")

	if ptr.Pointer() != nil {
		C.QStaticText_SetPerformanceHint(ptr.Pointer(), C.int(performanceHint))
	}
}

func (ptr *QStaticText) SetText(text string) {
	defer qt.Recovering("QStaticText::setText")

	if ptr.Pointer() != nil {
		C.QStaticText_SetText(ptr.Pointer(), C.CString(text))
	}
}

func (ptr *QStaticText) SetTextFormat(textFormat core.Qt__TextFormat) {
	defer qt.Recovering("QStaticText::setTextFormat")

	if ptr.Pointer() != nil {
		C.QStaticText_SetTextFormat(ptr.Pointer(), C.int(textFormat))
	}
}

func (ptr *QStaticText) SetTextOption(textOption QTextOption_ITF) {
	defer qt.Recovering("QStaticText::setTextOption")

	if ptr.Pointer() != nil {
		C.QStaticText_SetTextOption(ptr.Pointer(), PointerFromQTextOption(textOption))
	}
}

func (ptr *QStaticText) SetTextWidth(textWidth float64) {
	defer qt.Recovering("QStaticText::setTextWidth")

	if ptr.Pointer() != nil {
		C.QStaticText_SetTextWidth(ptr.Pointer(), C.double(textWidth))
	}
}

func (ptr *QStaticText) Size() *core.QSizeF {
	defer qt.Recovering("QStaticText::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QStaticText_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStaticText) Swap(other QStaticText_ITF) {
	defer qt.Recovering("QStaticText::swap")

	if ptr.Pointer() != nil {
		C.QStaticText_Swap(ptr.Pointer(), PointerFromQStaticText(other))
	}
}

func (ptr *QStaticText) Text() string {
	defer qt.Recovering("QStaticText::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QStaticText_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStaticText) TextFormat() core.Qt__TextFormat {
	defer qt.Recovering("QStaticText::textFormat")

	if ptr.Pointer() != nil {
		return core.Qt__TextFormat(C.QStaticText_TextFormat(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStaticText) TextOption() *QTextOption {
	defer qt.Recovering("QStaticText::textOption")

	if ptr.Pointer() != nil {
		return NewQTextOptionFromPointer(C.QStaticText_TextOption(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStaticText) TextWidth() float64 {
	defer qt.Recovering("QStaticText::textWidth")

	if ptr.Pointer() != nil {
		return float64(C.QStaticText_TextWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStaticText) DestroyQStaticText() {
	defer qt.Recovering("QStaticText::~QStaticText")

	if ptr.Pointer() != nil {
		C.QStaticText_DestroyQStaticText(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QStatusTipEvent struct {
	core.QEvent
}

type QStatusTipEvent_ITF interface {
	core.QEvent_ITF
	QStatusTipEvent_PTR() *QStatusTipEvent
}

func (p *QStatusTipEvent) QStatusTipEvent_PTR() *QStatusTipEvent {
	return p
}

func (p *QStatusTipEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QStatusTipEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQStatusTipEvent(ptr QStatusTipEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStatusTipEvent_PTR().Pointer()
	}
	return nil
}

func NewQStatusTipEventFromPointer(ptr unsafe.Pointer) *QStatusTipEvent {
	var n = new(QStatusTipEvent)
	n.SetPointer(ptr)
	return n
}

func newQStatusTipEventFromPointer(ptr unsafe.Pointer) *QStatusTipEvent {
	var n = NewQStatusTipEventFromPointer(ptr)
	return n
}

func NewQStatusTipEvent(tip string) *QStatusTipEvent {
	defer qt.Recovering("QStatusTipEvent::QStatusTipEvent")

	return newQStatusTipEventFromPointer(C.QStatusTipEvent_NewQStatusTipEvent(C.CString(tip)))
}

func (ptr *QStatusTipEvent) Tip() string {
	defer qt.Recovering("QStatusTipEvent::tip")

	if ptr.Pointer() != nil {
		return C.GoString(C.QStatusTipEvent_Tip(ptr.Pointer()))
	}
	return ""
}

type QStyleHints struct {
	core.QObject
}

type QStyleHints_ITF interface {
	core.QObject_ITF
	QStyleHints_PTR() *QStyleHints
}

func (p *QStyleHints) QStyleHints_PTR() *QStyleHints {
	return p
}

func (p *QStyleHints) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QStyleHints) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQStyleHints(ptr QStyleHints_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleHints_PTR().Pointer()
	}
	return nil
}

func NewQStyleHintsFromPointer(ptr unsafe.Pointer) *QStyleHints {
	var n = new(QStyleHints)
	n.SetPointer(ptr)
	return n
}

func newQStyleHintsFromPointer(ptr unsafe.Pointer) *QStyleHints {
	var n = NewQStyleHintsFromPointer(ptr)
	for len(n.ObjectName()) < len("QStyleHints_") {
		n.SetObjectName("QStyleHints_" + qt.Identifier())
	}
	return n
}

func (ptr *QStyleHints) CursorFlashTime() int {
	defer qt.Recovering("QStyleHints::cursorFlashTime")

	if ptr.Pointer() != nil {
		return int(C.QStyleHints_CursorFlashTime(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) FontSmoothingGamma() float64 {
	defer qt.Recovering("QStyleHints::fontSmoothingGamma")

	if ptr.Pointer() != nil {
		return float64(C.QStyleHints_FontSmoothingGamma(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) KeyboardAutoRepeatRate() int {
	defer qt.Recovering("QStyleHints::keyboardAutoRepeatRate")

	if ptr.Pointer() != nil {
		return int(C.QStyleHints_KeyboardAutoRepeatRate(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) KeyboardInputInterval() int {
	defer qt.Recovering("QStyleHints::keyboardInputInterval")

	if ptr.Pointer() != nil {
		return int(C.QStyleHints_KeyboardInputInterval(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) MouseDoubleClickInterval() int {
	defer qt.Recovering("QStyleHints::mouseDoubleClickInterval")

	if ptr.Pointer() != nil {
		return int(C.QStyleHints_MouseDoubleClickInterval(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) MousePressAndHoldInterval() int {
	defer qt.Recovering("QStyleHints::mousePressAndHoldInterval")

	if ptr.Pointer() != nil {
		return int(C.QStyleHints_MousePressAndHoldInterval(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) PasswordMaskDelay() int {
	defer qt.Recovering("QStyleHints::passwordMaskDelay")

	if ptr.Pointer() != nil {
		return int(C.QStyleHints_PasswordMaskDelay(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) SetFocusOnTouchRelease() bool {
	defer qt.Recovering("QStyleHints::setFocusOnTouchRelease")

	if ptr.Pointer() != nil {
		return C.QStyleHints_SetFocusOnTouchRelease(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) ShowIsFullScreen() bool {
	defer qt.Recovering("QStyleHints::showIsFullScreen")

	if ptr.Pointer() != nil {
		return C.QStyleHints_ShowIsFullScreen(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) SingleClickActivation() bool {
	defer qt.Recovering("QStyleHints::singleClickActivation")

	if ptr.Pointer() != nil {
		return C.QStyleHints_SingleClickActivation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) StartDragDistance() int {
	defer qt.Recovering("QStyleHints::startDragDistance")

	if ptr.Pointer() != nil {
		return int(C.QStyleHints_StartDragDistance(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) StartDragTime() int {
	defer qt.Recovering("QStyleHints::startDragTime")

	if ptr.Pointer() != nil {
		return int(C.QStyleHints_StartDragTime(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) StartDragVelocity() int {
	defer qt.Recovering("QStyleHints::startDragVelocity")

	if ptr.Pointer() != nil {
		return int(C.QStyleHints_StartDragVelocity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) TabFocusBehavior() core.Qt__TabFocusBehavior {
	defer qt.Recovering("QStyleHints::tabFocusBehavior")

	if ptr.Pointer() != nil {
		return core.Qt__TabFocusBehavior(C.QStyleHints_TabFocusBehavior(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) UseRtlExtensions() bool {
	defer qt.Recovering("QStyleHints::useRtlExtensions")

	if ptr.Pointer() != nil {
		return C.QStyleHints_UseRtlExtensions(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQStyleHints_CursorFlashTimeChanged
func callbackQStyleHints_CursorFlashTimeChanged(ptr unsafe.Pointer, ptrName *C.char, cursorFlashTime C.int) {
	defer qt.Recovering("callback QStyleHints::cursorFlashTimeChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "cursorFlashTimeChanged"); signal != nil {
		signal.(func(int))(int(cursorFlashTime))
	}

}

func (ptr *QStyleHints) ConnectCursorFlashTimeChanged(f func(cursorFlashTime int)) {
	defer qt.Recovering("connect QStyleHints::cursorFlashTimeChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectCursorFlashTimeChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "cursorFlashTimeChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectCursorFlashTimeChanged() {
	defer qt.Recovering("disconnect QStyleHints::cursorFlashTimeChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectCursorFlashTimeChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "cursorFlashTimeChanged")
	}
}

func (ptr *QStyleHints) CursorFlashTimeChanged(cursorFlashTime int) {
	defer qt.Recovering("QStyleHints::cursorFlashTimeChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_CursorFlashTimeChanged(ptr.Pointer(), C.int(cursorFlashTime))
	}
}

//export callbackQStyleHints_KeyboardInputIntervalChanged
func callbackQStyleHints_KeyboardInputIntervalChanged(ptr unsafe.Pointer, ptrName *C.char, keyboardInputInterval C.int) {
	defer qt.Recovering("callback QStyleHints::keyboardInputIntervalChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "keyboardInputIntervalChanged"); signal != nil {
		signal.(func(int))(int(keyboardInputInterval))
	}

}

func (ptr *QStyleHints) ConnectKeyboardInputIntervalChanged(f func(keyboardInputInterval int)) {
	defer qt.Recovering("connect QStyleHints::keyboardInputIntervalChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectKeyboardInputIntervalChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "keyboardInputIntervalChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectKeyboardInputIntervalChanged() {
	defer qt.Recovering("disconnect QStyleHints::keyboardInputIntervalChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectKeyboardInputIntervalChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "keyboardInputIntervalChanged")
	}
}

func (ptr *QStyleHints) KeyboardInputIntervalChanged(keyboardInputInterval int) {
	defer qt.Recovering("QStyleHints::keyboardInputIntervalChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_KeyboardInputIntervalChanged(ptr.Pointer(), C.int(keyboardInputInterval))
	}
}

//export callbackQStyleHints_MouseDoubleClickIntervalChanged
func callbackQStyleHints_MouseDoubleClickIntervalChanged(ptr unsafe.Pointer, ptrName *C.char, mouseDoubleClickInterval C.int) {
	defer qt.Recovering("callback QStyleHints::mouseDoubleClickIntervalChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseDoubleClickIntervalChanged"); signal != nil {
		signal.(func(int))(int(mouseDoubleClickInterval))
	}

}

func (ptr *QStyleHints) ConnectMouseDoubleClickIntervalChanged(f func(mouseDoubleClickInterval int)) {
	defer qt.Recovering("connect QStyleHints::mouseDoubleClickIntervalChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectMouseDoubleClickIntervalChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "mouseDoubleClickIntervalChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectMouseDoubleClickIntervalChanged() {
	defer qt.Recovering("disconnect QStyleHints::mouseDoubleClickIntervalChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectMouseDoubleClickIntervalChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "mouseDoubleClickIntervalChanged")
	}
}

func (ptr *QStyleHints) MouseDoubleClickIntervalChanged(mouseDoubleClickInterval int) {
	defer qt.Recovering("QStyleHints::mouseDoubleClickIntervalChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_MouseDoubleClickIntervalChanged(ptr.Pointer(), C.int(mouseDoubleClickInterval))
	}
}

//export callbackQStyleHints_StartDragDistanceChanged
func callbackQStyleHints_StartDragDistanceChanged(ptr unsafe.Pointer, ptrName *C.char, startDragDistance C.int) {
	defer qt.Recovering("callback QStyleHints::startDragDistanceChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "startDragDistanceChanged"); signal != nil {
		signal.(func(int))(int(startDragDistance))
	}

}

func (ptr *QStyleHints) ConnectStartDragDistanceChanged(f func(startDragDistance int)) {
	defer qt.Recovering("connect QStyleHints::startDragDistanceChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectStartDragDistanceChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "startDragDistanceChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectStartDragDistanceChanged() {
	defer qt.Recovering("disconnect QStyleHints::startDragDistanceChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectStartDragDistanceChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "startDragDistanceChanged")
	}
}

func (ptr *QStyleHints) StartDragDistanceChanged(startDragDistance int) {
	defer qt.Recovering("QStyleHints::startDragDistanceChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_StartDragDistanceChanged(ptr.Pointer(), C.int(startDragDistance))
	}
}

//export callbackQStyleHints_StartDragTimeChanged
func callbackQStyleHints_StartDragTimeChanged(ptr unsafe.Pointer, ptrName *C.char, startDragTime C.int) {
	defer qt.Recovering("callback QStyleHints::startDragTimeChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "startDragTimeChanged"); signal != nil {
		signal.(func(int))(int(startDragTime))
	}

}

func (ptr *QStyleHints) ConnectStartDragTimeChanged(f func(startDragTime int)) {
	defer qt.Recovering("connect QStyleHints::startDragTimeChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectStartDragTimeChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "startDragTimeChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectStartDragTimeChanged() {
	defer qt.Recovering("disconnect QStyleHints::startDragTimeChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectStartDragTimeChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "startDragTimeChanged")
	}
}

func (ptr *QStyleHints) StartDragTimeChanged(startDragTime int) {
	defer qt.Recovering("QStyleHints::startDragTimeChanged")

	if ptr.Pointer() != nil {
		C.QStyleHints_StartDragTimeChanged(ptr.Pointer(), C.int(startDragTime))
	}
}

//export callbackQStyleHints_TimerEvent
func callbackQStyleHints_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QStyleHints::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQStyleHintsFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QStyleHints) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QStyleHints::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QStyleHints) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QStyleHints::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QStyleHints) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QStyleHints::timerEvent")

	if ptr.Pointer() != nil {
		C.QStyleHints_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QStyleHints) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QStyleHints::timerEvent")

	if ptr.Pointer() != nil {
		C.QStyleHints_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQStyleHints_ChildEvent
func callbackQStyleHints_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QStyleHints::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQStyleHintsFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QStyleHints) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QStyleHints::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QStyleHints) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QStyleHints::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QStyleHints) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QStyleHints::childEvent")

	if ptr.Pointer() != nil {
		C.QStyleHints_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QStyleHints) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QStyleHints::childEvent")

	if ptr.Pointer() != nil {
		C.QStyleHints_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQStyleHints_ConnectNotify
func callbackQStyleHints_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QStyleHints::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStyleHintsFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStyleHints) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QStyleHints::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QStyleHints) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QStyleHints::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QStyleHints) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QStyleHints::connectNotify")

	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStyleHints) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QStyleHints::connectNotify")

	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStyleHints_CustomEvent
func callbackQStyleHints_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QStyleHints::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQStyleHintsFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QStyleHints) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QStyleHints::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QStyleHints) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QStyleHints::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QStyleHints) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QStyleHints::customEvent")

	if ptr.Pointer() != nil {
		C.QStyleHints_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QStyleHints) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QStyleHints::customEvent")

	if ptr.Pointer() != nil {
		C.QStyleHints_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQStyleHints_DeleteLater
func callbackQStyleHints_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QStyleHints::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QStyleHints) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QStyleHints::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QStyleHints) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QStyleHints::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QStyleHints) DeleteLater() {
	defer qt.Recovering("QStyleHints::deleteLater")

	if ptr.Pointer() != nil {
		C.QStyleHints_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQStyleHints_DisconnectNotify
func callbackQStyleHints_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QStyleHints::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStyleHintsFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStyleHints) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QStyleHints::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QStyleHints) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QStyleHints::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QStyleHints) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QStyleHints::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStyleHints) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QStyleHints::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStyleHints_Event
func callbackQStyleHints_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStyleHints::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQStyleHintsFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QStyleHints) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QStyleHints::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QStyleHints) DisconnectEvent() {
	defer qt.Recovering("disconnect QStyleHints::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QStyleHints) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QStyleHints::event")

	if ptr.Pointer() != nil {
		return C.QStyleHints_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QStyleHints) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QStyleHints::event")

	if ptr.Pointer() != nil {
		return C.QStyleHints_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQStyleHints_EventFilter
func callbackQStyleHints_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QStyleHints::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQStyleHintsFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QStyleHints) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QStyleHints::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QStyleHints) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QStyleHints::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QStyleHints) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QStyleHints::eventFilter")

	if ptr.Pointer() != nil {
		return C.QStyleHints_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QStyleHints) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QStyleHints::eventFilter")

	if ptr.Pointer() != nil {
		return C.QStyleHints_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQStyleHints_MetaObject
func callbackQStyleHints_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QStyleHints::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQStyleHintsFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QStyleHints) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QStyleHints::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QStyleHints) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QStyleHints::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QStyleHints) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QStyleHints::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStyleHints_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStyleHints) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QStyleHints::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStyleHints_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QSupportedWritingSystems struct {
	ptr unsafe.Pointer
}

type QSupportedWritingSystems_ITF interface {
	QSupportedWritingSystems_PTR() *QSupportedWritingSystems
}

func (p *QSupportedWritingSystems) QSupportedWritingSystems_PTR() *QSupportedWritingSystems {
	return p
}

func (p *QSupportedWritingSystems) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSupportedWritingSystems) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSupportedWritingSystems(ptr QSupportedWritingSystems_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSupportedWritingSystems_PTR().Pointer()
	}
	return nil
}

func NewQSupportedWritingSystemsFromPointer(ptr unsafe.Pointer) *QSupportedWritingSystems {
	var n = new(QSupportedWritingSystems)
	n.SetPointer(ptr)
	return n
}

func newQSupportedWritingSystemsFromPointer(ptr unsafe.Pointer) *QSupportedWritingSystems {
	var n = NewQSupportedWritingSystemsFromPointer(ptr)
	return n
}

//QSurface::SurfaceClass
type QSurface__SurfaceClass int64

const (
	QSurface__Window    = QSurface__SurfaceClass(0)
	QSurface__Offscreen = QSurface__SurfaceClass(1)
)

//QSurface::SurfaceType
type QSurface__SurfaceType int64

const (
	QSurface__RasterSurface   = QSurface__SurfaceType(0)
	QSurface__OpenGLSurface   = QSurface__SurfaceType(1)
	QSurface__RasterGLSurface = QSurface__SurfaceType(2)
)

type QSurface struct {
	ptr unsafe.Pointer
}

type QSurface_ITF interface {
	QSurface_PTR() *QSurface
}

func (p *QSurface) QSurface_PTR() *QSurface {
	return p
}

func (p *QSurface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSurface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSurface(ptr QSurface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSurface_PTR().Pointer()
	}
	return nil
}

func NewQSurfaceFromPointer(ptr unsafe.Pointer) *QSurface {
	var n = new(QSurface)
	n.SetPointer(ptr)
	return n
}

func newQSurfaceFromPointer(ptr unsafe.Pointer) *QSurface {
	var n = NewQSurfaceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QSurface_") {
		n.SetObjectNameAbs("QSurface_" + qt.Identifier())
	}
	return n
}

//export callbackQSurface_Format
func callbackQSurface_Format(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QSurface::format")

	if signal := qt.GetSignal(C.GoString(ptrName), "format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(nil)
}

func (ptr *QSurface) ConnectFormat(f func() *QSurfaceFormat) {
	defer qt.Recovering("connect QSurface::format")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "format", f)
	}
}

func (ptr *QSurface) DisconnectFormat() {
	defer qt.Recovering("disconnect QSurface::format")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "format")
	}
}

func (ptr *QSurface) Format() *QSurfaceFormat {
	defer qt.Recovering("QSurface::format")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QSurface_Format(ptr.Pointer()))
	}
	return nil
}

//export callbackQSurface_Size
func callbackQSurface_Size(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QSurface::size")

	if signal := qt.GetSignal(C.GoString(ptrName), "size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(nil)
}

func (ptr *QSurface) ConnectSize(f func() *core.QSize) {
	defer qt.Recovering("connect QSurface::size")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "size", f)
	}
}

func (ptr *QSurface) DisconnectSize() {
	defer qt.Recovering("disconnect QSurface::size")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "size")
	}
}

func (ptr *QSurface) Size() *core.QSize {
	defer qt.Recovering("QSurface::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QSurface_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSurface) SupportsOpenGL() bool {
	defer qt.Recovering("QSurface::supportsOpenGL")

	if ptr.Pointer() != nil {
		return C.QSurface_SupportsOpenGL(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSurface) SurfaceClass() QSurface__SurfaceClass {
	defer qt.Recovering("QSurface::surfaceClass")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceClass(C.QSurface_SurfaceClass(ptr.Pointer()))
	}
	return 0
}

//export callbackQSurface_SurfaceType
func callbackQSurface_SurfaceType(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QSurface::surfaceType")

	if signal := qt.GetSignal(C.GoString(ptrName), "surfaceType"); signal != nil {
		return C.int(signal.(func() QSurface__SurfaceType)())
	}

	return C.int(0)
}

func (ptr *QSurface) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	defer qt.Recovering("connect QSurface::surfaceType")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "surfaceType", f)
	}
}

func (ptr *QSurface) DisconnectSurfaceType() {
	defer qt.Recovering("disconnect QSurface::surfaceType")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "surfaceType")
	}
}

func (ptr *QSurface) SurfaceType() QSurface__SurfaceType {
	defer qt.Recovering("QSurface::surfaceType")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QSurface_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurface) DestroyQSurface() {
	defer qt.Recovering("QSurface::~QSurface")

	if ptr.Pointer() != nil {
		C.QSurface_DestroyQSurface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QSurface) ObjectNameAbs() string {
	defer qt.Recovering("QSurface::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QSurface_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSurface) SetObjectNameAbs(name string) {
	defer qt.Recovering("QSurface::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QSurface_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

//QSurfaceFormat::FormatOption
type QSurfaceFormat__FormatOption int64

const (
	QSurfaceFormat__StereoBuffers       = QSurfaceFormat__FormatOption(0x0001)
	QSurfaceFormat__DebugContext        = QSurfaceFormat__FormatOption(0x0002)
	QSurfaceFormat__DeprecatedFunctions = QSurfaceFormat__FormatOption(0x0004)
	QSurfaceFormat__ResetNotification   = QSurfaceFormat__FormatOption(0x0008)
)

//QSurfaceFormat::OpenGLContextProfile
type QSurfaceFormat__OpenGLContextProfile int64

const (
	QSurfaceFormat__NoProfile            = QSurfaceFormat__OpenGLContextProfile(0)
	QSurfaceFormat__CoreProfile          = QSurfaceFormat__OpenGLContextProfile(1)
	QSurfaceFormat__CompatibilityProfile = QSurfaceFormat__OpenGLContextProfile(2)
)

//QSurfaceFormat::RenderableType
type QSurfaceFormat__RenderableType int64

const (
	QSurfaceFormat__DefaultRenderableType = QSurfaceFormat__RenderableType(0x0)
	QSurfaceFormat__OpenGL                = QSurfaceFormat__RenderableType(0x1)
	QSurfaceFormat__OpenGLES              = QSurfaceFormat__RenderableType(0x2)
	QSurfaceFormat__OpenVG                = QSurfaceFormat__RenderableType(0x4)
)

//QSurfaceFormat::SwapBehavior
type QSurfaceFormat__SwapBehavior int64

const (
	QSurfaceFormat__DefaultSwapBehavior = QSurfaceFormat__SwapBehavior(0)
	QSurfaceFormat__SingleBuffer        = QSurfaceFormat__SwapBehavior(1)
	QSurfaceFormat__DoubleBuffer        = QSurfaceFormat__SwapBehavior(2)
	QSurfaceFormat__TripleBuffer        = QSurfaceFormat__SwapBehavior(3)
)

type QSurfaceFormat struct {
	ptr unsafe.Pointer
}

type QSurfaceFormat_ITF interface {
	QSurfaceFormat_PTR() *QSurfaceFormat
}

func (p *QSurfaceFormat) QSurfaceFormat_PTR() *QSurfaceFormat {
	return p
}

func (p *QSurfaceFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSurfaceFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSurfaceFormat(ptr QSurfaceFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSurfaceFormat_PTR().Pointer()
	}
	return nil
}

func NewQSurfaceFormatFromPointer(ptr unsafe.Pointer) *QSurfaceFormat {
	var n = new(QSurfaceFormat)
	n.SetPointer(ptr)
	return n
}

func newQSurfaceFormatFromPointer(ptr unsafe.Pointer) *QSurfaceFormat {
	var n = NewQSurfaceFormatFromPointer(ptr)
	return n
}

func NewQSurfaceFormat() *QSurfaceFormat {
	defer qt.Recovering("QSurfaceFormat::QSurfaceFormat")

	return newQSurfaceFormatFromPointer(C.QSurfaceFormat_NewQSurfaceFormat())
}

func NewQSurfaceFormat2(options QSurfaceFormat__FormatOption) *QSurfaceFormat {
	defer qt.Recovering("QSurfaceFormat::QSurfaceFormat")

	return newQSurfaceFormatFromPointer(C.QSurfaceFormat_NewQSurfaceFormat2(C.int(options)))
}

func NewQSurfaceFormat3(other QSurfaceFormat_ITF) *QSurfaceFormat {
	defer qt.Recovering("QSurfaceFormat::QSurfaceFormat")

	return newQSurfaceFormatFromPointer(C.QSurfaceFormat_NewQSurfaceFormat3(PointerFromQSurfaceFormat(other)))
}

func (ptr *QSurfaceFormat) AlphaBufferSize() int {
	defer qt.Recovering("QSurfaceFormat::alphaBufferSize")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_AlphaBufferSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) BlueBufferSize() int {
	defer qt.Recovering("QSurfaceFormat::blueBufferSize")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_BlueBufferSize(ptr.Pointer()))
	}
	return 0
}

func QSurfaceFormat_DefaultFormat() *QSurfaceFormat {
	defer qt.Recovering("QSurfaceFormat::defaultFormat")

	return NewQSurfaceFormatFromPointer(C.QSurfaceFormat_QSurfaceFormat_DefaultFormat())
}

func (ptr *QSurfaceFormat) DefaultFormat() *QSurfaceFormat {
	defer qt.Recovering("QSurfaceFormat::defaultFormat")

	return NewQSurfaceFormatFromPointer(C.QSurfaceFormat_QSurfaceFormat_DefaultFormat())
}

func (ptr *QSurfaceFormat) DepthBufferSize() int {
	defer qt.Recovering("QSurfaceFormat::depthBufferSize")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_DepthBufferSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) GreenBufferSize() int {
	defer qt.Recovering("QSurfaceFormat::greenBufferSize")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_GreenBufferSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) HasAlpha() bool {
	defer qt.Recovering("QSurfaceFormat::hasAlpha")

	if ptr.Pointer() != nil {
		return C.QSurfaceFormat_HasAlpha(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSurfaceFormat) MajorVersion() int {
	defer qt.Recovering("QSurfaceFormat::majorVersion")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_MajorVersion(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) MinorVersion() int {
	defer qt.Recovering("QSurfaceFormat::minorVersion")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_MinorVersion(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) Options() QSurfaceFormat__FormatOption {
	defer qt.Recovering("QSurfaceFormat::options")

	if ptr.Pointer() != nil {
		return QSurfaceFormat__FormatOption(C.QSurfaceFormat_Options(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) Profile() QSurfaceFormat__OpenGLContextProfile {
	defer qt.Recovering("QSurfaceFormat::profile")

	if ptr.Pointer() != nil {
		return QSurfaceFormat__OpenGLContextProfile(C.QSurfaceFormat_Profile(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) RedBufferSize() int {
	defer qt.Recovering("QSurfaceFormat::redBufferSize")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_RedBufferSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) RenderableType() QSurfaceFormat__RenderableType {
	defer qt.Recovering("QSurfaceFormat::renderableType")

	if ptr.Pointer() != nil {
		return QSurfaceFormat__RenderableType(C.QSurfaceFormat_RenderableType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) Samples() int {
	defer qt.Recovering("QSurfaceFormat::samples")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_Samples(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) SetAlphaBufferSize(size int) {
	defer qt.Recovering("QSurfaceFormat::setAlphaBufferSize")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetAlphaBufferSize(ptr.Pointer(), C.int(size))
	}
}

func (ptr *QSurfaceFormat) SetBlueBufferSize(size int) {
	defer qt.Recovering("QSurfaceFormat::setBlueBufferSize")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetBlueBufferSize(ptr.Pointer(), C.int(size))
	}
}

func QSurfaceFormat_SetDefaultFormat(format QSurfaceFormat_ITF) {
	defer qt.Recovering("QSurfaceFormat::setDefaultFormat")

	C.QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(PointerFromQSurfaceFormat(format))
}

func (ptr *QSurfaceFormat) SetDefaultFormat(format QSurfaceFormat_ITF) {
	defer qt.Recovering("QSurfaceFormat::setDefaultFormat")

	C.QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(PointerFromQSurfaceFormat(format))
}

func (ptr *QSurfaceFormat) SetDepthBufferSize(size int) {
	defer qt.Recovering("QSurfaceFormat::setDepthBufferSize")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetDepthBufferSize(ptr.Pointer(), C.int(size))
	}
}

func (ptr *QSurfaceFormat) SetGreenBufferSize(size int) {
	defer qt.Recovering("QSurfaceFormat::setGreenBufferSize")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetGreenBufferSize(ptr.Pointer(), C.int(size))
	}
}

func (ptr *QSurfaceFormat) SetMajorVersion(major int) {
	defer qt.Recovering("QSurfaceFormat::setMajorVersion")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetMajorVersion(ptr.Pointer(), C.int(major))
	}
}

func (ptr *QSurfaceFormat) SetMinorVersion(minor int) {
	defer qt.Recovering("QSurfaceFormat::setMinorVersion")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetMinorVersion(ptr.Pointer(), C.int(minor))
	}
}

func (ptr *QSurfaceFormat) SetOption(option QSurfaceFormat__FormatOption, on bool) {
	defer qt.Recovering("QSurfaceFormat::setOption")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetOption(ptr.Pointer(), C.int(option), C.int(qt.GoBoolToInt(on)))
	}
}

func (ptr *QSurfaceFormat) SetOptions(options QSurfaceFormat__FormatOption) {
	defer qt.Recovering("QSurfaceFormat::setOptions")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetOptions(ptr.Pointer(), C.int(options))
	}
}

func (ptr *QSurfaceFormat) SetProfile(profile QSurfaceFormat__OpenGLContextProfile) {
	defer qt.Recovering("QSurfaceFormat::setProfile")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetProfile(ptr.Pointer(), C.int(profile))
	}
}

func (ptr *QSurfaceFormat) SetRedBufferSize(size int) {
	defer qt.Recovering("QSurfaceFormat::setRedBufferSize")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetRedBufferSize(ptr.Pointer(), C.int(size))
	}
}

func (ptr *QSurfaceFormat) SetRenderableType(ty QSurfaceFormat__RenderableType) {
	defer qt.Recovering("QSurfaceFormat::setRenderableType")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetRenderableType(ptr.Pointer(), C.int(ty))
	}
}

func (ptr *QSurfaceFormat) SetSamples(numSamples int) {
	defer qt.Recovering("QSurfaceFormat::setSamples")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetSamples(ptr.Pointer(), C.int(numSamples))
	}
}

func (ptr *QSurfaceFormat) SetStencilBufferSize(size int) {
	defer qt.Recovering("QSurfaceFormat::setStencilBufferSize")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetStencilBufferSize(ptr.Pointer(), C.int(size))
	}
}

func (ptr *QSurfaceFormat) SetStereo(enable bool) {
	defer qt.Recovering("QSurfaceFormat::setStereo")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetStereo(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QSurfaceFormat) SetSwapBehavior(behavior QSurfaceFormat__SwapBehavior) {
	defer qt.Recovering("QSurfaceFormat::setSwapBehavior")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetSwapBehavior(ptr.Pointer(), C.int(behavior))
	}
}

func (ptr *QSurfaceFormat) SetSwapInterval(interval int) {
	defer qt.Recovering("QSurfaceFormat::setSwapInterval")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetSwapInterval(ptr.Pointer(), C.int(interval))
	}
}

func (ptr *QSurfaceFormat) SetVersion(major int, minor int) {
	defer qt.Recovering("QSurfaceFormat::setVersion")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetVersion(ptr.Pointer(), C.int(major), C.int(minor))
	}
}

func (ptr *QSurfaceFormat) StencilBufferSize() int {
	defer qt.Recovering("QSurfaceFormat::stencilBufferSize")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_StencilBufferSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) Stereo() bool {
	defer qt.Recovering("QSurfaceFormat::stereo")

	if ptr.Pointer() != nil {
		return C.QSurfaceFormat_Stereo(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSurfaceFormat) SwapBehavior() QSurfaceFormat__SwapBehavior {
	defer qt.Recovering("QSurfaceFormat::swapBehavior")

	if ptr.Pointer() != nil {
		return QSurfaceFormat__SwapBehavior(C.QSurfaceFormat_SwapBehavior(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) SwapInterval() int {
	defer qt.Recovering("QSurfaceFormat::swapInterval")

	if ptr.Pointer() != nil {
		return int(C.QSurfaceFormat_SwapInterval(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) TestOption(option QSurfaceFormat__FormatOption) bool {
	defer qt.Recovering("QSurfaceFormat::testOption")

	if ptr.Pointer() != nil {
		return C.QSurfaceFormat_TestOption(ptr.Pointer(), C.int(option)) != 0
	}
	return false
}

func (ptr *QSurfaceFormat) DestroyQSurfaceFormat() {
	defer qt.Recovering("QSurfaceFormat::~QSurfaceFormat")

	if ptr.Pointer() != nil {
		C.QSurfaceFormat_DestroyQSurfaceFormat(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QSyntaxHighlighter struct {
	core.QObject
}

type QSyntaxHighlighter_ITF interface {
	core.QObject_ITF
	QSyntaxHighlighter_PTR() *QSyntaxHighlighter
}

func (p *QSyntaxHighlighter) QSyntaxHighlighter_PTR() *QSyntaxHighlighter {
	return p
}

func (p *QSyntaxHighlighter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSyntaxHighlighter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSyntaxHighlighter(ptr QSyntaxHighlighter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSyntaxHighlighter_PTR().Pointer()
	}
	return nil
}

func NewQSyntaxHighlighterFromPointer(ptr unsafe.Pointer) *QSyntaxHighlighter {
	var n = new(QSyntaxHighlighter)
	n.SetPointer(ptr)
	return n
}

func newQSyntaxHighlighterFromPointer(ptr unsafe.Pointer) *QSyntaxHighlighter {
	var n = NewQSyntaxHighlighterFromPointer(ptr)
	for len(n.ObjectName()) < len("QSyntaxHighlighter_") {
		n.SetObjectName("QSyntaxHighlighter_" + qt.Identifier())
	}
	return n
}

func NewQSyntaxHighlighter(parent core.QObject_ITF) *QSyntaxHighlighter {
	defer qt.Recovering("QSyntaxHighlighter::QSyntaxHighlighter")

	return newQSyntaxHighlighterFromPointer(C.QSyntaxHighlighter_NewQSyntaxHighlighter(core.PointerFromQObject(parent)))
}

func NewQSyntaxHighlighter2(parent QTextDocument_ITF) *QSyntaxHighlighter {
	defer qt.Recovering("QSyntaxHighlighter::QSyntaxHighlighter")

	return newQSyntaxHighlighterFromPointer(C.QSyntaxHighlighter_NewQSyntaxHighlighter2(PointerFromQTextDocument(parent)))
}

func (ptr *QSyntaxHighlighter) CurrentBlock() *QTextBlock {
	defer qt.Recovering("QSyntaxHighlighter::currentBlock")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QSyntaxHighlighter_CurrentBlock(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSyntaxHighlighter) CurrentBlockState() int {
	defer qt.Recovering("QSyntaxHighlighter::currentBlockState")

	if ptr.Pointer() != nil {
		return int(C.QSyntaxHighlighter_CurrentBlockState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSyntaxHighlighter) CurrentBlockUserData() *QTextBlockUserData {
	defer qt.Recovering("QSyntaxHighlighter::currentBlockUserData")

	if ptr.Pointer() != nil {
		return NewQTextBlockUserDataFromPointer(C.QSyntaxHighlighter_CurrentBlockUserData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSyntaxHighlighter) Document() *QTextDocument {
	defer qt.Recovering("QSyntaxHighlighter::document")

	if ptr.Pointer() != nil {
		return NewQTextDocumentFromPointer(C.QSyntaxHighlighter_Document(ptr.Pointer()))
	}
	return nil
}

//export callbackQSyntaxHighlighter_HighlightBlock
func callbackQSyntaxHighlighter_HighlightBlock(ptr unsafe.Pointer, ptrName *C.char, text *C.char) {
	defer qt.Recovering("callback QSyntaxHighlighter::highlightBlock")

	if signal := qt.GetSignal(C.GoString(ptrName), "highlightBlock"); signal != nil {
		signal.(func(string))(C.GoString(text))
	}

}

func (ptr *QSyntaxHighlighter) ConnectHighlightBlock(f func(text string)) {
	defer qt.Recovering("connect QSyntaxHighlighter::highlightBlock")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "highlightBlock", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectHighlightBlock(text string) {
	defer qt.Recovering("disconnect QSyntaxHighlighter::highlightBlock")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "highlightBlock")
	}
}

func (ptr *QSyntaxHighlighter) HighlightBlock(text string) {
	defer qt.Recovering("QSyntaxHighlighter::highlightBlock")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_HighlightBlock(ptr.Pointer(), C.CString(text))
	}
}

func (ptr *QSyntaxHighlighter) PreviousBlockState() int {
	defer qt.Recovering("QSyntaxHighlighter::previousBlockState")

	if ptr.Pointer() != nil {
		return int(C.QSyntaxHighlighter_PreviousBlockState(ptr.Pointer()))
	}
	return 0
}

//export callbackQSyntaxHighlighter_Rehighlight
func callbackQSyntaxHighlighter_Rehighlight(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QSyntaxHighlighter::rehighlight")

	if signal := qt.GetSignal(C.GoString(ptrName), "rehighlight"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSyntaxHighlighter) ConnectRehighlight(f func()) {
	defer qt.Recovering("connect QSyntaxHighlighter::rehighlight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "rehighlight", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectRehighlight() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::rehighlight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "rehighlight")
	}
}

func (ptr *QSyntaxHighlighter) Rehighlight() {
	defer qt.Recovering("QSyntaxHighlighter::rehighlight")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_Rehighlight(ptr.Pointer())
	}
}

//export callbackQSyntaxHighlighter_RehighlightBlock
func callbackQSyntaxHighlighter_RehighlightBlock(ptr unsafe.Pointer, ptrName *C.char, block unsafe.Pointer) {
	defer qt.Recovering("callback QSyntaxHighlighter::rehighlightBlock")

	if signal := qt.GetSignal(C.GoString(ptrName), "rehighlightBlock"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	}

}

func (ptr *QSyntaxHighlighter) ConnectRehighlightBlock(f func(block *QTextBlock)) {
	defer qt.Recovering("connect QSyntaxHighlighter::rehighlightBlock")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "rehighlightBlock", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectRehighlightBlock(block QTextBlock_ITF) {
	defer qt.Recovering("disconnect QSyntaxHighlighter::rehighlightBlock")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "rehighlightBlock")
	}
}

func (ptr *QSyntaxHighlighter) RehighlightBlock(block QTextBlock_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::rehighlightBlock")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_RehighlightBlock(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QSyntaxHighlighter) SetCurrentBlockState(newState int) {
	defer qt.Recovering("QSyntaxHighlighter::setCurrentBlockState")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetCurrentBlockState(ptr.Pointer(), C.int(newState))
	}
}

func (ptr *QSyntaxHighlighter) SetCurrentBlockUserData(data QTextBlockUserData_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::setCurrentBlockUserData")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetCurrentBlockUserData(ptr.Pointer(), PointerFromQTextBlockUserData(data))
	}
}

func (ptr *QSyntaxHighlighter) SetDocument(doc QTextDocument_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::setDocument")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetDocument(ptr.Pointer(), PointerFromQTextDocument(doc))
	}
}

func (ptr *QSyntaxHighlighter) SetFormat2(start int, count int, color QColor_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::setFormat")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetFormat2(ptr.Pointer(), C.int(start), C.int(count), PointerFromQColor(color))
	}
}

func (ptr *QSyntaxHighlighter) SetFormat3(start int, count int, font QFont_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::setFormat")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetFormat3(ptr.Pointer(), C.int(start), C.int(count), PointerFromQFont(font))
	}
}

func (ptr *QSyntaxHighlighter) SetFormat(start int, count int, format QTextCharFormat_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::setFormat")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetFormat(ptr.Pointer(), C.int(start), C.int(count), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QSyntaxHighlighter) DestroyQSyntaxHighlighter() {
	defer qt.Recovering("QSyntaxHighlighter::~QSyntaxHighlighter")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DestroyQSyntaxHighlighter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQSyntaxHighlighter_TimerEvent
func callbackQSyntaxHighlighter_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QSyntaxHighlighter::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSyntaxHighlighter) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QSyntaxHighlighter::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QSyntaxHighlighter) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::timerEvent")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QSyntaxHighlighter) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::timerEvent")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQSyntaxHighlighter_ChildEvent
func callbackQSyntaxHighlighter_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QSyntaxHighlighter::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QSyntaxHighlighter) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QSyntaxHighlighter::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QSyntaxHighlighter) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::childEvent")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QSyntaxHighlighter) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::childEvent")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQSyntaxHighlighter_ConnectNotify
func callbackQSyntaxHighlighter_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QSyntaxHighlighter::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSyntaxHighlighter) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QSyntaxHighlighter::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QSyntaxHighlighter) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::connectNotify")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSyntaxHighlighter) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::connectNotify")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSyntaxHighlighter_CustomEvent
func callbackQSyntaxHighlighter_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QSyntaxHighlighter::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QSyntaxHighlighter) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QSyntaxHighlighter::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QSyntaxHighlighter) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::customEvent")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QSyntaxHighlighter) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::customEvent")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQSyntaxHighlighter_DeleteLater
func callbackQSyntaxHighlighter_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QSyntaxHighlighter::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSyntaxHighlighter) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QSyntaxHighlighter::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QSyntaxHighlighter) DeleteLater() {
	defer qt.Recovering("QSyntaxHighlighter::deleteLater")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQSyntaxHighlighter_DisconnectNotify
func callbackQSyntaxHighlighter_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QSyntaxHighlighter::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSyntaxHighlighter) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QSyntaxHighlighter::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QSyntaxHighlighter) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSyntaxHighlighter) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSyntaxHighlighter::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSyntaxHighlighter_Event
func callbackQSyntaxHighlighter_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QSyntaxHighlighter::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQSyntaxHighlighterFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QSyntaxHighlighter) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QSyntaxHighlighter::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectEvent() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QSyntaxHighlighter) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QSyntaxHighlighter::event")

	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSyntaxHighlighter) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QSyntaxHighlighter::event")

	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSyntaxHighlighter_EventFilter
func callbackQSyntaxHighlighter_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QSyntaxHighlighter::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQSyntaxHighlighterFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QSyntaxHighlighter) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QSyntaxHighlighter::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QSyntaxHighlighter) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QSyntaxHighlighter::eventFilter")

	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSyntaxHighlighter) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QSyntaxHighlighter::eventFilter")

	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSyntaxHighlighter_MetaObject
func callbackQSyntaxHighlighter_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QSyntaxHighlighter::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQSyntaxHighlighterFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSyntaxHighlighter) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QSyntaxHighlighter::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QSyntaxHighlighter::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QSyntaxHighlighter) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QSyntaxHighlighter::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSyntaxHighlighter_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSyntaxHighlighter) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QSyntaxHighlighter::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSyntaxHighlighter_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QTabletEvent::PointerType
type QTabletEvent__PointerType int64

const (
	QTabletEvent__UnknownPointer = QTabletEvent__PointerType(0)
	QTabletEvent__Pen            = QTabletEvent__PointerType(1)
	QTabletEvent__Cursor         = QTabletEvent__PointerType(2)
	QTabletEvent__Eraser         = QTabletEvent__PointerType(3)
)

//QTabletEvent::TabletDevice
type QTabletEvent__TabletDevice int64

const (
	QTabletEvent__NoDevice       = QTabletEvent__TabletDevice(0)
	QTabletEvent__Puck           = QTabletEvent__TabletDevice(1)
	QTabletEvent__Stylus         = QTabletEvent__TabletDevice(2)
	QTabletEvent__Airbrush       = QTabletEvent__TabletDevice(3)
	QTabletEvent__FourDMouse     = QTabletEvent__TabletDevice(4)
	QTabletEvent__XFreeEraser    = QTabletEvent__TabletDevice(5)
	QTabletEvent__RotationStylus = QTabletEvent__TabletDevice(6)
)

type QTabletEvent struct {
	QInputEvent
}

type QTabletEvent_ITF interface {
	QInputEvent_ITF
	QTabletEvent_PTR() *QTabletEvent
}

func (p *QTabletEvent) QTabletEvent_PTR() *QTabletEvent {
	return p
}

func (p *QTabletEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QTabletEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQTabletEvent(ptr QTabletEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTabletEvent_PTR().Pointer()
	}
	return nil
}

func NewQTabletEventFromPointer(ptr unsafe.Pointer) *QTabletEvent {
	var n = new(QTabletEvent)
	n.SetPointer(ptr)
	return n
}

func newQTabletEventFromPointer(ptr unsafe.Pointer) *QTabletEvent {
	var n = NewQTabletEventFromPointer(ptr)
	return n
}

func NewQTabletEvent(ty core.QEvent__Type, pos core.QPointF_ITF, globalPos core.QPointF_ITF, device int, pointerType int, pressure float64, xTilt int, yTilt int, tangentialPressure float64, rotation float64, z int, keyState core.Qt__KeyboardModifier, uniqueID int64, button core.Qt__MouseButton, buttons core.Qt__MouseButton) *QTabletEvent {
	defer qt.Recovering("QTabletEvent::QTabletEvent")

	return newQTabletEventFromPointer(C.QTabletEvent_NewQTabletEvent(C.int(ty), core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), C.int(device), C.int(pointerType), C.double(pressure), C.int(xTilt), C.int(yTilt), C.double(tangentialPressure), C.double(rotation), C.int(z), C.int(keyState), C.longlong(uniqueID), C.int(button), C.int(buttons)))
}

func (ptr *QTabletEvent) Button() core.Qt__MouseButton {
	defer qt.Recovering("QTabletEvent::button")

	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QTabletEvent_Button(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Buttons() core.Qt__MouseButton {
	defer qt.Recovering("QTabletEvent::buttons")

	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QTabletEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Device() QTabletEvent__TabletDevice {
	defer qt.Recovering("QTabletEvent::device")

	if ptr.Pointer() != nil {
		return QTabletEvent__TabletDevice(C.QTabletEvent_Device(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) GlobalPos() *core.QPoint {
	defer qt.Recovering("QTabletEvent::globalPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QTabletEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) GlobalPosF() *core.QPointF {
	defer qt.Recovering("QTabletEvent::globalPosF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QTabletEvent_GlobalPosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) GlobalX() int {
	defer qt.Recovering("QTabletEvent::globalX")

	if ptr.Pointer() != nil {
		return int(C.QTabletEvent_GlobalX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) GlobalY() int {
	defer qt.Recovering("QTabletEvent::globalY")

	if ptr.Pointer() != nil {
		return int(C.QTabletEvent_GlobalY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) HiResGlobalX() float64 {
	defer qt.Recovering("QTabletEvent::hiResGlobalX")

	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_HiResGlobalX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) HiResGlobalY() float64 {
	defer qt.Recovering("QTabletEvent::hiResGlobalY")

	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_HiResGlobalY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) PointerType() QTabletEvent__PointerType {
	defer qt.Recovering("QTabletEvent::pointerType")

	if ptr.Pointer() != nil {
		return QTabletEvent__PointerType(C.QTabletEvent_PointerType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Pos() *core.QPoint {
	defer qt.Recovering("QTabletEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QTabletEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) PosF() *core.QPointF {
	defer qt.Recovering("QTabletEvent::posF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QTabletEvent_PosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) Pressure() float64 {
	defer qt.Recovering("QTabletEvent::pressure")

	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_Pressure(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Rotation() float64 {
	defer qt.Recovering("QTabletEvent::rotation")

	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_Rotation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) TangentialPressure() float64 {
	defer qt.Recovering("QTabletEvent::tangentialPressure")

	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_TangentialPressure(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) UniqueId() int64 {
	defer qt.Recovering("QTabletEvent::uniqueId")

	if ptr.Pointer() != nil {
		return int64(C.QTabletEvent_UniqueId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) X() int {
	defer qt.Recovering("QTabletEvent::x")

	if ptr.Pointer() != nil {
		return int(C.QTabletEvent_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) XTilt() int {
	defer qt.Recovering("QTabletEvent::xTilt")

	if ptr.Pointer() != nil {
		return int(C.QTabletEvent_XTilt(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Y() int {
	defer qt.Recovering("QTabletEvent::y")

	if ptr.Pointer() != nil {
		return int(C.QTabletEvent_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) YTilt() int {
	defer qt.Recovering("QTabletEvent::yTilt")

	if ptr.Pointer() != nil {
		return int(C.QTabletEvent_YTilt(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Z() int {
	defer qt.Recovering("QTabletEvent::z")

	if ptr.Pointer() != nil {
		return int(C.QTabletEvent_Z(ptr.Pointer()))
	}
	return 0
}

type QTextBlock struct {
	ptr unsafe.Pointer
}

type QTextBlock_ITF interface {
	QTextBlock_PTR() *QTextBlock
}

func (p *QTextBlock) QTextBlock_PTR() *QTextBlock {
	return p
}

func (p *QTextBlock) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextBlock) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextBlock(ptr QTextBlock_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlock_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockFromPointer(ptr unsafe.Pointer) *QTextBlock {
	var n = new(QTextBlock)
	n.SetPointer(ptr)
	return n
}

func newQTextBlockFromPointer(ptr unsafe.Pointer) *QTextBlock {
	var n = NewQTextBlockFromPointer(ptr)
	return n
}

func (ptr *QTextBlock) IsValid() bool {
	defer qt.Recovering("QTextBlock::isValid")

	if ptr.Pointer() != nil {
		return C.QTextBlock_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func NewQTextBlock(other QTextBlock_ITF) *QTextBlock {
	defer qt.Recovering("QTextBlock::QTextBlock")

	return newQTextBlockFromPointer(C.QTextBlock_NewQTextBlock(PointerFromQTextBlock(other)))
}

func (ptr *QTextBlock) BlockFormatIndex() int {
	defer qt.Recovering("QTextBlock::blockFormatIndex")

	if ptr.Pointer() != nil {
		return int(C.QTextBlock_BlockFormatIndex(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) CharFormatIndex() int {
	defer qt.Recovering("QTextBlock::charFormatIndex")

	if ptr.Pointer() != nil {
		return int(C.QTextBlock_CharFormatIndex(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) ClearLayout() {
	defer qt.Recovering("QTextBlock::clearLayout")

	if ptr.Pointer() != nil {
		C.QTextBlock_ClearLayout(ptr.Pointer())
	}
}

func (ptr *QTextBlock) Contains(position int) bool {
	defer qt.Recovering("QTextBlock::contains")

	if ptr.Pointer() != nil {
		return C.QTextBlock_Contains(ptr.Pointer(), C.int(position)) != 0
	}
	return false
}

func (ptr *QTextBlock) BlockNumber() int {
	defer qt.Recovering("QTextBlock::blockNumber")

	if ptr.Pointer() != nil {
		return int(C.QTextBlock_BlockNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) Document() *QTextDocument {
	defer qt.Recovering("QTextBlock::document")

	if ptr.Pointer() != nil {
		return NewQTextDocumentFromPointer(C.QTextBlock_Document(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) FirstLineNumber() int {
	defer qt.Recovering("QTextBlock::firstLineNumber")

	if ptr.Pointer() != nil {
		return int(C.QTextBlock_FirstLineNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) IsVisible() bool {
	defer qt.Recovering("QTextBlock::isVisible")

	if ptr.Pointer() != nil {
		return C.QTextBlock_IsVisible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBlock) Layout() *QTextLayout {
	defer qt.Recovering("QTextBlock::layout")

	if ptr.Pointer() != nil {
		return NewQTextLayoutFromPointer(C.QTextBlock_Layout(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) Length() int {
	defer qt.Recovering("QTextBlock::length")

	if ptr.Pointer() != nil {
		return int(C.QTextBlock_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) LineCount() int {
	defer qt.Recovering("QTextBlock::lineCount")

	if ptr.Pointer() != nil {
		return int(C.QTextBlock_LineCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) Next() *QTextBlock {
	defer qt.Recovering("QTextBlock::next")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextBlock_Next(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) Position() int {
	defer qt.Recovering("QTextBlock::position")

	if ptr.Pointer() != nil {
		return int(C.QTextBlock_Position(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) Previous() *QTextBlock {
	defer qt.Recovering("QTextBlock::previous")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextBlock_Previous(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) Revision() int {
	defer qt.Recovering("QTextBlock::revision")

	if ptr.Pointer() != nil {
		return int(C.QTextBlock_Revision(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) SetLineCount(count int) {
	defer qt.Recovering("QTextBlock::setLineCount")

	if ptr.Pointer() != nil {
		C.QTextBlock_SetLineCount(ptr.Pointer(), C.int(count))
	}
}

func (ptr *QTextBlock) SetRevision(rev int) {
	defer qt.Recovering("QTextBlock::setRevision")

	if ptr.Pointer() != nil {
		C.QTextBlock_SetRevision(ptr.Pointer(), C.int(rev))
	}
}

func (ptr *QTextBlock) SetUserData(data QTextBlockUserData_ITF) {
	defer qt.Recovering("QTextBlock::setUserData")

	if ptr.Pointer() != nil {
		C.QTextBlock_SetUserData(ptr.Pointer(), PointerFromQTextBlockUserData(data))
	}
}

func (ptr *QTextBlock) SetUserState(state int) {
	defer qt.Recovering("QTextBlock::setUserState")

	if ptr.Pointer() != nil {
		C.QTextBlock_SetUserState(ptr.Pointer(), C.int(state))
	}
}

func (ptr *QTextBlock) SetVisible(visible bool) {
	defer qt.Recovering("QTextBlock::setVisible")

	if ptr.Pointer() != nil {
		C.QTextBlock_SetVisible(ptr.Pointer(), C.int(qt.GoBoolToInt(visible)))
	}
}

func (ptr *QTextBlock) Text() string {
	defer qt.Recovering("QTextBlock::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextBlock_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextBlock) TextDirection() core.Qt__LayoutDirection {
	defer qt.Recovering("QTextBlock::textDirection")

	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextBlock_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) TextList() *QTextList {
	defer qt.Recovering("QTextBlock::textList")

	if ptr.Pointer() != nil {
		return NewQTextListFromPointer(C.QTextBlock_TextList(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) UserData() *QTextBlockUserData {
	defer qt.Recovering("QTextBlock::userData")

	if ptr.Pointer() != nil {
		return NewQTextBlockUserDataFromPointer(C.QTextBlock_UserData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) UserState() int {
	defer qt.Recovering("QTextBlock::userState")

	if ptr.Pointer() != nil {
		return int(C.QTextBlock_UserState(ptr.Pointer()))
	}
	return 0
}

//QTextBlockFormat::LineHeightTypes
type QTextBlockFormat__LineHeightTypes int64

const (
	QTextBlockFormat__SingleHeight       = QTextBlockFormat__LineHeightTypes(0)
	QTextBlockFormat__ProportionalHeight = QTextBlockFormat__LineHeightTypes(1)
	QTextBlockFormat__FixedHeight        = QTextBlockFormat__LineHeightTypes(2)
	QTextBlockFormat__MinimumHeight      = QTextBlockFormat__LineHeightTypes(3)
	QTextBlockFormat__LineDistanceHeight = QTextBlockFormat__LineHeightTypes(4)
)

type QTextBlockFormat struct {
	QTextFormat
}

type QTextBlockFormat_ITF interface {
	QTextFormat_ITF
	QTextBlockFormat_PTR() *QTextBlockFormat
}

func (p *QTextBlockFormat) QTextBlockFormat_PTR() *QTextBlockFormat {
	return p
}

func (p *QTextBlockFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextBlockFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextBlockFormat(ptr QTextBlockFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockFormatFromPointer(ptr unsafe.Pointer) *QTextBlockFormat {
	var n = new(QTextBlockFormat)
	n.SetPointer(ptr)
	return n
}

func newQTextBlockFormatFromPointer(ptr unsafe.Pointer) *QTextBlockFormat {
	var n = NewQTextBlockFormatFromPointer(ptr)
	return n
}

func NewQTextBlockFormat() *QTextBlockFormat {
	defer qt.Recovering("QTextBlockFormat::QTextBlockFormat")

	return newQTextBlockFormatFromPointer(C.QTextBlockFormat_NewQTextBlockFormat())
}

func (ptr *QTextBlockFormat) Alignment() core.Qt__AlignmentFlag {
	defer qt.Recovering("QTextBlockFormat::alignment")

	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QTextBlockFormat_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) BottomMargin() float64 {
	defer qt.Recovering("QTextBlockFormat::bottomMargin")

	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_BottomMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) Indent() int {
	defer qt.Recovering("QTextBlockFormat::indent")

	if ptr.Pointer() != nil {
		return int(C.QTextBlockFormat_Indent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) IsValid() bool {
	defer qt.Recovering("QTextBlockFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QTextBlockFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBlockFormat) LeftMargin() float64 {
	defer qt.Recovering("QTextBlockFormat::leftMargin")

	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_LeftMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) LineHeight2() float64 {
	defer qt.Recovering("QTextBlockFormat::lineHeight")

	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_LineHeight2(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) LineHeight(scriptLineHeight float64, scaling float64) float64 {
	defer qt.Recovering("QTextBlockFormat::lineHeight")

	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_LineHeight(ptr.Pointer(), C.double(scriptLineHeight), C.double(scaling)))
	}
	return 0
}

func (ptr *QTextBlockFormat) LineHeightType() int {
	defer qt.Recovering("QTextBlockFormat::lineHeightType")

	if ptr.Pointer() != nil {
		return int(C.QTextBlockFormat_LineHeightType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) NonBreakableLines() bool {
	defer qt.Recovering("QTextBlockFormat::nonBreakableLines")

	if ptr.Pointer() != nil {
		return C.QTextBlockFormat_NonBreakableLines(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBlockFormat) PageBreakPolicy() QTextFormat__PageBreakFlag {
	defer qt.Recovering("QTextBlockFormat::pageBreakPolicy")

	if ptr.Pointer() != nil {
		return QTextFormat__PageBreakFlag(C.QTextBlockFormat_PageBreakPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) RightMargin() float64 {
	defer qt.Recovering("QTextBlockFormat::rightMargin")

	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_RightMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) SetAlignment(alignment core.Qt__AlignmentFlag) {
	defer qt.Recovering("QTextBlockFormat::setAlignment")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetAlignment(ptr.Pointer(), C.int(alignment))
	}
}

func (ptr *QTextBlockFormat) SetBottomMargin(margin float64) {
	defer qt.Recovering("QTextBlockFormat::setBottomMargin")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetBottomMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) SetIndent(indentation int) {
	defer qt.Recovering("QTextBlockFormat::setIndent")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetIndent(ptr.Pointer(), C.int(indentation))
	}
}

func (ptr *QTextBlockFormat) SetLeftMargin(margin float64) {
	defer qt.Recovering("QTextBlockFormat::setLeftMargin")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetLeftMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) SetLineHeight(height float64, heightType int) {
	defer qt.Recovering("QTextBlockFormat::setLineHeight")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetLineHeight(ptr.Pointer(), C.double(height), C.int(heightType))
	}
}

func (ptr *QTextBlockFormat) SetNonBreakableLines(b bool) {
	defer qt.Recovering("QTextBlockFormat::setNonBreakableLines")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetNonBreakableLines(ptr.Pointer(), C.int(qt.GoBoolToInt(b)))
	}
}

func (ptr *QTextBlockFormat) SetPageBreakPolicy(policy QTextFormat__PageBreakFlag) {
	defer qt.Recovering("QTextBlockFormat::setPageBreakPolicy")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetPageBreakPolicy(ptr.Pointer(), C.int(policy))
	}
}

func (ptr *QTextBlockFormat) SetRightMargin(margin float64) {
	defer qt.Recovering("QTextBlockFormat::setRightMargin")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetRightMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) SetTextIndent(indent float64) {
	defer qt.Recovering("QTextBlockFormat::setTextIndent")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetTextIndent(ptr.Pointer(), C.double(indent))
	}
}

func (ptr *QTextBlockFormat) SetTopMargin(margin float64) {
	defer qt.Recovering("QTextBlockFormat::setTopMargin")

	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetTopMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) TextIndent() float64 {
	defer qt.Recovering("QTextBlockFormat::textIndent")

	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_TextIndent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) TopMargin() float64 {
	defer qt.Recovering("QTextBlockFormat::topMargin")

	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_TopMargin(ptr.Pointer()))
	}
	return 0
}

type QTextBlockGroup struct {
	QTextObject
}

type QTextBlockGroup_ITF interface {
	QTextObject_ITF
	QTextBlockGroup_PTR() *QTextBlockGroup
}

func (p *QTextBlockGroup) QTextBlockGroup_PTR() *QTextBlockGroup {
	return p
}

func (p *QTextBlockGroup) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextObject_PTR().Pointer()
	}
	return nil
}

func (p *QTextBlockGroup) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextBlockGroup(ptr QTextBlockGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockGroup_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockGroupFromPointer(ptr unsafe.Pointer) *QTextBlockGroup {
	var n = new(QTextBlockGroup)
	n.SetPointer(ptr)
	return n
}

func newQTextBlockGroupFromPointer(ptr unsafe.Pointer) *QTextBlockGroup {
	var n = NewQTextBlockGroupFromPointer(ptr)
	for len(n.ObjectName()) < len("QTextBlockGroup_") {
		n.SetObjectName("QTextBlockGroup_" + qt.Identifier())
	}
	return n
}

func NewQTextBlockGroup(document QTextDocument_ITF) *QTextBlockGroup {
	defer qt.Recovering("QTextBlockGroup::QTextBlockGroup")

	return newQTextBlockGroupFromPointer(C.QTextBlockGroup_NewQTextBlockGroup(PointerFromQTextDocument(document)))
}

//export callbackQTextBlockGroup_BlockFormatChanged
func callbackQTextBlockGroup_BlockFormatChanged(ptr unsafe.Pointer, ptrName *C.char, block unsafe.Pointer) {
	defer qt.Recovering("callback QTextBlockGroup::blockFormatChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "blockFormatChanged"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextBlockGroupFromPointer(ptr).BlockFormatChangedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextBlockGroup) ConnectBlockFormatChanged(f func(block *QTextBlock)) {
	defer qt.Recovering("connect QTextBlockGroup::blockFormatChanged")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "blockFormatChanged", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectBlockFormatChanged() {
	defer qt.Recovering("disconnect QTextBlockGroup::blockFormatChanged")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "blockFormatChanged")
	}
}

func (ptr *QTextBlockGroup) BlockFormatChanged(block QTextBlock_ITF) {
	defer qt.Recovering("QTextBlockGroup::blockFormatChanged")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockFormatChanged(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockFormatChangedDefault(block QTextBlock_ITF) {
	defer qt.Recovering("QTextBlockGroup::blockFormatChanged")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockFormatChangedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextBlockGroup_BlockInserted
func callbackQTextBlockGroup_BlockInserted(ptr unsafe.Pointer, ptrName *C.char, block unsafe.Pointer) {
	defer qt.Recovering("callback QTextBlockGroup::blockInserted")

	if signal := qt.GetSignal(C.GoString(ptrName), "blockInserted"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextBlockGroupFromPointer(ptr).BlockInsertedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextBlockGroup) ConnectBlockInserted(f func(block *QTextBlock)) {
	defer qt.Recovering("connect QTextBlockGroup::blockInserted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "blockInserted", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectBlockInserted() {
	defer qt.Recovering("disconnect QTextBlockGroup::blockInserted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "blockInserted")
	}
}

func (ptr *QTextBlockGroup) BlockInserted(block QTextBlock_ITF) {
	defer qt.Recovering("QTextBlockGroup::blockInserted")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockInserted(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockInsertedDefault(block QTextBlock_ITF) {
	defer qt.Recovering("QTextBlockGroup::blockInserted")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockInsertedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextBlockGroup_BlockRemoved
func callbackQTextBlockGroup_BlockRemoved(ptr unsafe.Pointer, ptrName *C.char, block unsafe.Pointer) {
	defer qt.Recovering("callback QTextBlockGroup::blockRemoved")

	if signal := qt.GetSignal(C.GoString(ptrName), "blockRemoved"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextBlockGroupFromPointer(ptr).BlockRemovedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextBlockGroup) ConnectBlockRemoved(f func(block *QTextBlock)) {
	defer qt.Recovering("connect QTextBlockGroup::blockRemoved")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "blockRemoved", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectBlockRemoved() {
	defer qt.Recovering("disconnect QTextBlockGroup::blockRemoved")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "blockRemoved")
	}
}

func (ptr *QTextBlockGroup) BlockRemoved(block QTextBlock_ITF) {
	defer qt.Recovering("QTextBlockGroup::blockRemoved")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockRemoved(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockRemovedDefault(block QTextBlock_ITF) {
	defer qt.Recovering("QTextBlockGroup::blockRemoved")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockRemovedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) DestroyQTextBlockGroup() {
	defer qt.Recovering("QTextBlockGroup::~QTextBlockGroup")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DestroyQTextBlockGroup(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextBlockGroup_TimerEvent
func callbackQTextBlockGroup_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextBlockGroup::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextBlockGroupFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextBlockGroup) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QTextBlockGroup::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QTextBlockGroup::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QTextBlockGroup) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextBlockGroup::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextBlockGroup) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextBlockGroup::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextBlockGroup_ChildEvent
func callbackQTextBlockGroup_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextBlockGroup::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextBlockGroupFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextBlockGroup) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QTextBlockGroup::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QTextBlockGroup::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QTextBlockGroup) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextBlockGroup::childEvent")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextBlockGroup) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextBlockGroup::childEvent")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextBlockGroup_ConnectNotify
func callbackQTextBlockGroup_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextBlockGroup::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextBlockGroupFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextBlockGroup) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextBlockGroup::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QTextBlockGroup::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QTextBlockGroup) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextBlockGroup::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextBlockGroup) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextBlockGroup::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextBlockGroup_CustomEvent
func callbackQTextBlockGroup_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextBlockGroup::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextBlockGroupFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextBlockGroup) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QTextBlockGroup::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QTextBlockGroup::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QTextBlockGroup) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QTextBlockGroup::customEvent")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextBlockGroup) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QTextBlockGroup::customEvent")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextBlockGroup_DeleteLater
func callbackQTextBlockGroup_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextBlockGroup::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextBlockGroup) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QTextBlockGroup::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QTextBlockGroup::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QTextBlockGroup) DeleteLater() {
	defer qt.Recovering("QTextBlockGroup::deleteLater")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextBlockGroup_DisconnectNotify
func callbackQTextBlockGroup_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextBlockGroup::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextBlockGroupFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextBlockGroup) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextBlockGroup::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QTextBlockGroup::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QTextBlockGroup) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextBlockGroup::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextBlockGroup) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextBlockGroup::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextBlockGroup_Event
func callbackQTextBlockGroup_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextBlockGroup::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQTextBlockGroupFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QTextBlockGroup) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QTextBlockGroup::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectEvent() {
	defer qt.Recovering("disconnect QTextBlockGroup::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QTextBlockGroup) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextBlockGroup::event")

	if ptr.Pointer() != nil {
		return C.QTextBlockGroup_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextBlockGroup) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextBlockGroup::event")

	if ptr.Pointer() != nil {
		return C.QTextBlockGroup_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextBlockGroup_EventFilter
func callbackQTextBlockGroup_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextBlockGroup::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQTextBlockGroupFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QTextBlockGroup) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QTextBlockGroup::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QTextBlockGroup::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QTextBlockGroup) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextBlockGroup::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextBlockGroup_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextBlockGroup) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextBlockGroup::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextBlockGroup_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextBlockGroup_MetaObject
func callbackQTextBlockGroup_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QTextBlockGroup::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextBlockGroupFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextBlockGroup) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QTextBlockGroup::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QTextBlockGroup::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QTextBlockGroup) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QTextBlockGroup::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextBlockGroup_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlockGroup) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QTextBlockGroup::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextBlockGroup_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextBlockUserData struct {
	ptr unsafe.Pointer
}

type QTextBlockUserData_ITF interface {
	QTextBlockUserData_PTR() *QTextBlockUserData
}

func (p *QTextBlockUserData) QTextBlockUserData_PTR() *QTextBlockUserData {
	return p
}

func (p *QTextBlockUserData) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextBlockUserData) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextBlockUserData(ptr QTextBlockUserData_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockUserData_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockUserDataFromPointer(ptr unsafe.Pointer) *QTextBlockUserData {
	var n = new(QTextBlockUserData)
	n.SetPointer(ptr)
	return n
}

func newQTextBlockUserDataFromPointer(ptr unsafe.Pointer) *QTextBlockUserData {
	var n = NewQTextBlockUserDataFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QTextBlockUserData_") {
		n.SetObjectNameAbs("QTextBlockUserData_" + qt.Identifier())
	}
	return n
}

func (ptr *QTextBlockUserData) DestroyQTextBlockUserData() {
	defer qt.Recovering("QTextBlockUserData::~QTextBlockUserData")

	if ptr.Pointer() != nil {
		C.QTextBlockUserData_DestroyQTextBlockUserData(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextBlockUserData) ObjectNameAbs() string {
	defer qt.Recovering("QTextBlockUserData::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextBlockUserData_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextBlockUserData) SetObjectNameAbs(name string) {
	defer qt.Recovering("QTextBlockUserData::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QTextBlockUserData_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

//QTextCharFormat::FontPropertiesInheritanceBehavior
type QTextCharFormat__FontPropertiesInheritanceBehavior int64

const (
	QTextCharFormat__FontPropertiesSpecifiedOnly = QTextCharFormat__FontPropertiesInheritanceBehavior(0)
	QTextCharFormat__FontPropertiesAll           = QTextCharFormat__FontPropertiesInheritanceBehavior(1)
)

//QTextCharFormat::UnderlineStyle
type QTextCharFormat__UnderlineStyle int64

var (
	QTextCharFormat__NoUnderline         = QTextCharFormat__UnderlineStyle(0)
	QTextCharFormat__SingleUnderline     = QTextCharFormat__UnderlineStyle(1)
	QTextCharFormat__DashUnderline       = QTextCharFormat__UnderlineStyle(2)
	QTextCharFormat__DotLine             = QTextCharFormat__UnderlineStyle(3)
	QTextCharFormat__DashDotLine         = QTextCharFormat__UnderlineStyle(4)
	QTextCharFormat__DashDotDotLine      = QTextCharFormat__UnderlineStyle(5)
	QTextCharFormat__WaveUnderline       = QTextCharFormat__UnderlineStyle(6)
	QTextCharFormat__SpellCheckUnderline = QTextCharFormat__UnderlineStyle(7)
)

//QTextCharFormat::VerticalAlignment
type QTextCharFormat__VerticalAlignment int64

const (
	QTextCharFormat__AlignNormal      = QTextCharFormat__VerticalAlignment(0)
	QTextCharFormat__AlignSuperScript = QTextCharFormat__VerticalAlignment(1)
	QTextCharFormat__AlignSubScript   = QTextCharFormat__VerticalAlignment(2)
	QTextCharFormat__AlignMiddle      = QTextCharFormat__VerticalAlignment(3)
	QTextCharFormat__AlignTop         = QTextCharFormat__VerticalAlignment(4)
	QTextCharFormat__AlignBottom      = QTextCharFormat__VerticalAlignment(5)
	QTextCharFormat__AlignBaseline    = QTextCharFormat__VerticalAlignment(6)
)

type QTextCharFormat struct {
	QTextFormat
}

type QTextCharFormat_ITF interface {
	QTextFormat_ITF
	QTextCharFormat_PTR() *QTextCharFormat
}

func (p *QTextCharFormat) QTextCharFormat_PTR() *QTextCharFormat {
	return p
}

func (p *QTextCharFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextCharFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextCharFormat(ptr QTextCharFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextCharFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextCharFormatFromPointer(ptr unsafe.Pointer) *QTextCharFormat {
	var n = new(QTextCharFormat)
	n.SetPointer(ptr)
	return n
}

func newQTextCharFormatFromPointer(ptr unsafe.Pointer) *QTextCharFormat {
	var n = NewQTextCharFormatFromPointer(ptr)
	return n
}

func NewQTextCharFormat() *QTextCharFormat {
	defer qt.Recovering("QTextCharFormat::QTextCharFormat")

	return newQTextCharFormatFromPointer(C.QTextCharFormat_NewQTextCharFormat())
}

func (ptr *QTextCharFormat) AnchorNames() []string {
	defer qt.Recovering("QTextCharFormat::anchorNames")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QTextCharFormat_AnchorNames(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QTextCharFormat) FontUnderline() bool {
	defer qt.Recovering("QTextCharFormat::fontUnderline")

	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontUnderline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) SetUnderlineStyle(style QTextCharFormat__UnderlineStyle) {
	defer qt.Recovering("QTextCharFormat::setUnderlineStyle")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetUnderlineStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QTextCharFormat) AnchorHref() string {
	defer qt.Recovering("QTextCharFormat::anchorHref")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextCharFormat_AnchorHref(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCharFormat) Font() *QFont {
	defer qt.Recovering("QTextCharFormat::font")

	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QTextCharFormat_Font(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextCharFormat) FontCapitalization() QFont__Capitalization {
	defer qt.Recovering("QTextCharFormat::fontCapitalization")

	if ptr.Pointer() != nil {
		return QFont__Capitalization(C.QTextCharFormat_FontCapitalization(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontFamily() string {
	defer qt.Recovering("QTextCharFormat::fontFamily")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextCharFormat_FontFamily(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCharFormat) FontFixedPitch() bool {
	defer qt.Recovering("QTextCharFormat::fontFixedPitch")

	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontFixedPitch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontHintingPreference() QFont__HintingPreference {
	defer qt.Recovering("QTextCharFormat::fontHintingPreference")

	if ptr.Pointer() != nil {
		return QFont__HintingPreference(C.QTextCharFormat_FontHintingPreference(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontItalic() bool {
	defer qt.Recovering("QTextCharFormat::fontItalic")

	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontItalic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontKerning() bool {
	defer qt.Recovering("QTextCharFormat::fontKerning")

	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontKerning(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontLetterSpacing() float64 {
	defer qt.Recovering("QTextCharFormat::fontLetterSpacing")

	if ptr.Pointer() != nil {
		return float64(C.QTextCharFormat_FontLetterSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontLetterSpacingType() QFont__SpacingType {
	defer qt.Recovering("QTextCharFormat::fontLetterSpacingType")

	if ptr.Pointer() != nil {
		return QFont__SpacingType(C.QTextCharFormat_FontLetterSpacingType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontOverline() bool {
	defer qt.Recovering("QTextCharFormat::fontOverline")

	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontOverline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontPointSize() float64 {
	defer qt.Recovering("QTextCharFormat::fontPointSize")

	if ptr.Pointer() != nil {
		return float64(C.QTextCharFormat_FontPointSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontStretch() int {
	defer qt.Recovering("QTextCharFormat::fontStretch")

	if ptr.Pointer() != nil {
		return int(C.QTextCharFormat_FontStretch(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontStrikeOut() bool {
	defer qt.Recovering("QTextCharFormat::fontStrikeOut")

	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontStrikeOut(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontStyleHint() QFont__StyleHint {
	defer qt.Recovering("QTextCharFormat::fontStyleHint")

	if ptr.Pointer() != nil {
		return QFont__StyleHint(C.QTextCharFormat_FontStyleHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontStyleStrategy() QFont__StyleStrategy {
	defer qt.Recovering("QTextCharFormat::fontStyleStrategy")

	if ptr.Pointer() != nil {
		return QFont__StyleStrategy(C.QTextCharFormat_FontStyleStrategy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontWeight() int {
	defer qt.Recovering("QTextCharFormat::fontWeight")

	if ptr.Pointer() != nil {
		return int(C.QTextCharFormat_FontWeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontWordSpacing() float64 {
	defer qt.Recovering("QTextCharFormat::fontWordSpacing")

	if ptr.Pointer() != nil {
		return float64(C.QTextCharFormat_FontWordSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) IsAnchor() bool {
	defer qt.Recovering("QTextCharFormat::isAnchor")

	if ptr.Pointer() != nil {
		return C.QTextCharFormat_IsAnchor(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) IsValid() bool {
	defer qt.Recovering("QTextCharFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QTextCharFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) SetAnchor(anchor bool) {
	defer qt.Recovering("QTextCharFormat::setAnchor")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetAnchor(ptr.Pointer(), C.int(qt.GoBoolToInt(anchor)))
	}
}

func (ptr *QTextCharFormat) SetAnchorHref(value string) {
	defer qt.Recovering("QTextCharFormat::setAnchorHref")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetAnchorHref(ptr.Pointer(), C.CString(value))
	}
}

func (ptr *QTextCharFormat) SetAnchorNames(names []string) {
	defer qt.Recovering("QTextCharFormat::setAnchorNames")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetAnchorNames(ptr.Pointer(), C.CString(strings.Join(names, "|")))
	}
}

func (ptr *QTextCharFormat) SetFont2(font QFont_ITF) {
	defer qt.Recovering("QTextCharFormat::setFont")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFont2(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QTextCharFormat) SetFont(font QFont_ITF, behavior QTextCharFormat__FontPropertiesInheritanceBehavior) {
	defer qt.Recovering("QTextCharFormat::setFont")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFont(ptr.Pointer(), PointerFromQFont(font), C.int(behavior))
	}
}

func (ptr *QTextCharFormat) SetFontCapitalization(capitalization QFont__Capitalization) {
	defer qt.Recovering("QTextCharFormat::setFontCapitalization")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontCapitalization(ptr.Pointer(), C.int(capitalization))
	}
}

func (ptr *QTextCharFormat) SetFontFamily(family string) {
	defer qt.Recovering("QTextCharFormat::setFontFamily")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontFamily(ptr.Pointer(), C.CString(family))
	}
}

func (ptr *QTextCharFormat) SetFontFixedPitch(fixedPitch bool) {
	defer qt.Recovering("QTextCharFormat::setFontFixedPitch")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontFixedPitch(ptr.Pointer(), C.int(qt.GoBoolToInt(fixedPitch)))
	}
}

func (ptr *QTextCharFormat) SetFontHintingPreference(hintingPreference QFont__HintingPreference) {
	defer qt.Recovering("QTextCharFormat::setFontHintingPreference")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontHintingPreference(ptr.Pointer(), C.int(hintingPreference))
	}
}

func (ptr *QTextCharFormat) SetFontItalic(italic bool) {
	defer qt.Recovering("QTextCharFormat::setFontItalic")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontItalic(ptr.Pointer(), C.int(qt.GoBoolToInt(italic)))
	}
}

func (ptr *QTextCharFormat) SetFontKerning(enable bool) {
	defer qt.Recovering("QTextCharFormat::setFontKerning")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontKerning(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QTextCharFormat) SetFontLetterSpacing(spacing float64) {
	defer qt.Recovering("QTextCharFormat::setFontLetterSpacing")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontLetterSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QTextCharFormat) SetFontLetterSpacingType(letterSpacingType QFont__SpacingType) {
	defer qt.Recovering("QTextCharFormat::setFontLetterSpacingType")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontLetterSpacingType(ptr.Pointer(), C.int(letterSpacingType))
	}
}

func (ptr *QTextCharFormat) SetFontOverline(overline bool) {
	defer qt.Recovering("QTextCharFormat::setFontOverline")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontOverline(ptr.Pointer(), C.int(qt.GoBoolToInt(overline)))
	}
}

func (ptr *QTextCharFormat) SetFontPointSize(size float64) {
	defer qt.Recovering("QTextCharFormat::setFontPointSize")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontPointSize(ptr.Pointer(), C.double(size))
	}
}

func (ptr *QTextCharFormat) SetFontStretch(factor int) {
	defer qt.Recovering("QTextCharFormat::setFontStretch")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStretch(ptr.Pointer(), C.int(factor))
	}
}

func (ptr *QTextCharFormat) SetFontStrikeOut(strikeOut bool) {
	defer qt.Recovering("QTextCharFormat::setFontStrikeOut")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStrikeOut(ptr.Pointer(), C.int(qt.GoBoolToInt(strikeOut)))
	}
}

func (ptr *QTextCharFormat) SetFontStyleHint(hint QFont__StyleHint, strategy QFont__StyleStrategy) {
	defer qt.Recovering("QTextCharFormat::setFontStyleHint")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStyleHint(ptr.Pointer(), C.int(hint), C.int(strategy))
	}
}

func (ptr *QTextCharFormat) SetFontStyleStrategy(strategy QFont__StyleStrategy) {
	defer qt.Recovering("QTextCharFormat::setFontStyleStrategy")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStyleStrategy(ptr.Pointer(), C.int(strategy))
	}
}

func (ptr *QTextCharFormat) SetFontUnderline(underline bool) {
	defer qt.Recovering("QTextCharFormat::setFontUnderline")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontUnderline(ptr.Pointer(), C.int(qt.GoBoolToInt(underline)))
	}
}

func (ptr *QTextCharFormat) SetFontWeight(weight int) {
	defer qt.Recovering("QTextCharFormat::setFontWeight")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontWeight(ptr.Pointer(), C.int(weight))
	}
}

func (ptr *QTextCharFormat) SetFontWordSpacing(spacing float64) {
	defer qt.Recovering("QTextCharFormat::setFontWordSpacing")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontWordSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QTextCharFormat) SetTextOutline(pen QPen_ITF) {
	defer qt.Recovering("QTextCharFormat::setTextOutline")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetTextOutline(ptr.Pointer(), PointerFromQPen(pen))
	}
}

func (ptr *QTextCharFormat) SetToolTip(text string) {
	defer qt.Recovering("QTextCharFormat::setToolTip")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetToolTip(ptr.Pointer(), C.CString(text))
	}
}

func (ptr *QTextCharFormat) SetUnderlineColor(color QColor_ITF) {
	defer qt.Recovering("QTextCharFormat::setUnderlineColor")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetUnderlineColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QTextCharFormat) SetVerticalAlignment(alignment QTextCharFormat__VerticalAlignment) {
	defer qt.Recovering("QTextCharFormat::setVerticalAlignment")

	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetVerticalAlignment(ptr.Pointer(), C.int(alignment))
	}
}

func (ptr *QTextCharFormat) TextOutline() *QPen {
	defer qt.Recovering("QTextCharFormat::textOutline")

	if ptr.Pointer() != nil {
		return NewQPenFromPointer(C.QTextCharFormat_TextOutline(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextCharFormat) ToolTip() string {
	defer qt.Recovering("QTextCharFormat::toolTip")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextCharFormat_ToolTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCharFormat) UnderlineColor() *QColor {
	defer qt.Recovering("QTextCharFormat::underlineColor")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QTextCharFormat_UnderlineColor(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextCharFormat) UnderlineStyle() QTextCharFormat__UnderlineStyle {
	defer qt.Recovering("QTextCharFormat::underlineStyle")

	if ptr.Pointer() != nil {
		return QTextCharFormat__UnderlineStyle(C.QTextCharFormat_UnderlineStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) VerticalAlignment() QTextCharFormat__VerticalAlignment {
	defer qt.Recovering("QTextCharFormat::verticalAlignment")

	if ptr.Pointer() != nil {
		return QTextCharFormat__VerticalAlignment(C.QTextCharFormat_VerticalAlignment(ptr.Pointer()))
	}
	return 0
}

//QTextCursor::MoveMode
type QTextCursor__MoveMode int64

const (
	QTextCursor__MoveAnchor = QTextCursor__MoveMode(0)
	QTextCursor__KeepAnchor = QTextCursor__MoveMode(1)
)

//QTextCursor::MoveOperation
type QTextCursor__MoveOperation int64

const (
	QTextCursor__NoMove            = QTextCursor__MoveOperation(0)
	QTextCursor__Start             = QTextCursor__MoveOperation(1)
	QTextCursor__Up                = QTextCursor__MoveOperation(2)
	QTextCursor__StartOfLine       = QTextCursor__MoveOperation(3)
	QTextCursor__StartOfBlock      = QTextCursor__MoveOperation(4)
	QTextCursor__StartOfWord       = QTextCursor__MoveOperation(5)
	QTextCursor__PreviousBlock     = QTextCursor__MoveOperation(6)
	QTextCursor__PreviousCharacter = QTextCursor__MoveOperation(7)
	QTextCursor__PreviousWord      = QTextCursor__MoveOperation(8)
	QTextCursor__Left              = QTextCursor__MoveOperation(9)
	QTextCursor__WordLeft          = QTextCursor__MoveOperation(10)
	QTextCursor__End               = QTextCursor__MoveOperation(11)
	QTextCursor__Down              = QTextCursor__MoveOperation(12)
	QTextCursor__EndOfLine         = QTextCursor__MoveOperation(13)
	QTextCursor__EndOfWord         = QTextCursor__MoveOperation(14)
	QTextCursor__EndOfBlock        = QTextCursor__MoveOperation(15)
	QTextCursor__NextBlock         = QTextCursor__MoveOperation(16)
	QTextCursor__NextCharacter     = QTextCursor__MoveOperation(17)
	QTextCursor__NextWord          = QTextCursor__MoveOperation(18)
	QTextCursor__Right             = QTextCursor__MoveOperation(19)
	QTextCursor__WordRight         = QTextCursor__MoveOperation(20)
	QTextCursor__NextCell          = QTextCursor__MoveOperation(21)
	QTextCursor__PreviousCell      = QTextCursor__MoveOperation(22)
	QTextCursor__NextRow           = QTextCursor__MoveOperation(23)
	QTextCursor__PreviousRow       = QTextCursor__MoveOperation(24)
)

//QTextCursor::SelectionType
type QTextCursor__SelectionType int64

const (
	QTextCursor__WordUnderCursor  = QTextCursor__SelectionType(0)
	QTextCursor__LineUnderCursor  = QTextCursor__SelectionType(1)
	QTextCursor__BlockUnderCursor = QTextCursor__SelectionType(2)
	QTextCursor__Document         = QTextCursor__SelectionType(3)
)

type QTextCursor struct {
	ptr unsafe.Pointer
}

type QTextCursor_ITF interface {
	QTextCursor_PTR() *QTextCursor
}

func (p *QTextCursor) QTextCursor_PTR() *QTextCursor {
	return p
}

func (p *QTextCursor) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextCursor) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextCursor(ptr QTextCursor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextCursor_PTR().Pointer()
	}
	return nil
}

func NewQTextCursorFromPointer(ptr unsafe.Pointer) *QTextCursor {
	var n = new(QTextCursor)
	n.SetPointer(ptr)
	return n
}

func newQTextCursorFromPointer(ptr unsafe.Pointer) *QTextCursor {
	var n = NewQTextCursorFromPointer(ptr)
	return n
}

func (ptr *QTextCursor) InsertBlock3(format QTextBlockFormat_ITF, charFormat QTextCharFormat_ITF) {
	defer qt.Recovering("QTextCursor::insertBlock")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertBlock3(ptr.Pointer(), PointerFromQTextBlockFormat(format), PointerFromQTextCharFormat(charFormat))
	}
}

func (ptr *QTextCursor) InsertTable2(rows int, columns int) *QTextTable {
	defer qt.Recovering("QTextCursor::insertTable")

	if ptr.Pointer() != nil {
		return NewQTextTableFromPointer(C.QTextCursor_InsertTable2(ptr.Pointer(), C.int(rows), C.int(columns)))
	}
	return nil
}

func (ptr *QTextCursor) InsertTable(rows int, columns int, format QTextTableFormat_ITF) *QTextTable {
	defer qt.Recovering("QTextCursor::insertTable")

	if ptr.Pointer() != nil {
		return NewQTextTableFromPointer(C.QTextCursor_InsertTable(ptr.Pointer(), C.int(rows), C.int(columns), PointerFromQTextTableFormat(format)))
	}
	return nil
}

func (ptr *QTextCursor) InsertText2(text string, format QTextCharFormat_ITF) {
	defer qt.Recovering("QTextCursor::insertText")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertText2(ptr.Pointer(), C.CString(text), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextCursor) MovePosition(operation QTextCursor__MoveOperation, mode QTextCursor__MoveMode, n int) bool {
	defer qt.Recovering("QTextCursor::movePosition")

	if ptr.Pointer() != nil {
		return C.QTextCursor_MovePosition(ptr.Pointer(), C.int(operation), C.int(mode), C.int(n)) != 0
	}
	return false
}

func NewQTextCursor() *QTextCursor {
	defer qt.Recovering("QTextCursor::QTextCursor")

	return newQTextCursorFromPointer(C.QTextCursor_NewQTextCursor())
}

func NewQTextCursor2(document QTextDocument_ITF) *QTextCursor {
	defer qt.Recovering("QTextCursor::QTextCursor")

	return newQTextCursorFromPointer(C.QTextCursor_NewQTextCursor2(PointerFromQTextDocument(document)))
}

func NewQTextCursor4(frame QTextFrame_ITF) *QTextCursor {
	defer qt.Recovering("QTextCursor::QTextCursor")

	return newQTextCursorFromPointer(C.QTextCursor_NewQTextCursor4(PointerFromQTextFrame(frame)))
}

func NewQTextCursor5(block QTextBlock_ITF) *QTextCursor {
	defer qt.Recovering("QTextCursor::QTextCursor")

	return newQTextCursorFromPointer(C.QTextCursor_NewQTextCursor5(PointerFromQTextBlock(block)))
}

func NewQTextCursor7(cursor QTextCursor_ITF) *QTextCursor {
	defer qt.Recovering("QTextCursor::QTextCursor")

	return newQTextCursorFromPointer(C.QTextCursor_NewQTextCursor7(PointerFromQTextCursor(cursor)))
}

func (ptr *QTextCursor) Anchor() int {
	defer qt.Recovering("QTextCursor::anchor")

	if ptr.Pointer() != nil {
		return int(C.QTextCursor_Anchor(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCursor) AtBlockEnd() bool {
	defer qt.Recovering("QTextCursor::atBlockEnd")

	if ptr.Pointer() != nil {
		return C.QTextCursor_AtBlockEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) AtBlockStart() bool {
	defer qt.Recovering("QTextCursor::atBlockStart")

	if ptr.Pointer() != nil {
		return C.QTextCursor_AtBlockStart(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) AtEnd() bool {
	defer qt.Recovering("QTextCursor::atEnd")

	if ptr.Pointer() != nil {
		return C.QTextCursor_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) AtStart() bool {
	defer qt.Recovering("QTextCursor::atStart")

	if ptr.Pointer() != nil {
		return C.QTextCursor_AtStart(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) BeginEditBlock() {
	defer qt.Recovering("QTextCursor::beginEditBlock")

	if ptr.Pointer() != nil {
		C.QTextCursor_BeginEditBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) Block() *QTextBlock {
	defer qt.Recovering("QTextCursor::block")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextCursor_Block(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextCursor) BlockNumber() int {
	defer qt.Recovering("QTextCursor::blockNumber")

	if ptr.Pointer() != nil {
		return int(C.QTextCursor_BlockNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCursor) ClearSelection() {
	defer qt.Recovering("QTextCursor::clearSelection")

	if ptr.Pointer() != nil {
		C.QTextCursor_ClearSelection(ptr.Pointer())
	}
}

func (ptr *QTextCursor) ColumnNumber() int {
	defer qt.Recovering("QTextCursor::columnNumber")

	if ptr.Pointer() != nil {
		return int(C.QTextCursor_ColumnNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCursor) CreateList2(style QTextListFormat__Style) *QTextList {
	defer qt.Recovering("QTextCursor::createList")

	if ptr.Pointer() != nil {
		return NewQTextListFromPointer(C.QTextCursor_CreateList2(ptr.Pointer(), C.int(style)))
	}
	return nil
}

func (ptr *QTextCursor) CreateList(format QTextListFormat_ITF) *QTextList {
	defer qt.Recovering("QTextCursor::createList")

	if ptr.Pointer() != nil {
		return NewQTextListFromPointer(C.QTextCursor_CreateList(ptr.Pointer(), PointerFromQTextListFormat(format)))
	}
	return nil
}

func (ptr *QTextCursor) CurrentFrame() *QTextFrame {
	defer qt.Recovering("QTextCursor::currentFrame")

	if ptr.Pointer() != nil {
		return NewQTextFrameFromPointer(C.QTextCursor_CurrentFrame(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextCursor) CurrentList() *QTextList {
	defer qt.Recovering("QTextCursor::currentList")

	if ptr.Pointer() != nil {
		return NewQTextListFromPointer(C.QTextCursor_CurrentList(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextCursor) CurrentTable() *QTextTable {
	defer qt.Recovering("QTextCursor::currentTable")

	if ptr.Pointer() != nil {
		return NewQTextTableFromPointer(C.QTextCursor_CurrentTable(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextCursor) DeleteChar() {
	defer qt.Recovering("QTextCursor::deleteChar")

	if ptr.Pointer() != nil {
		C.QTextCursor_DeleteChar(ptr.Pointer())
	}
}

func (ptr *QTextCursor) DeletePreviousChar() {
	defer qt.Recovering("QTextCursor::deletePreviousChar")

	if ptr.Pointer() != nil {
		C.QTextCursor_DeletePreviousChar(ptr.Pointer())
	}
}

func (ptr *QTextCursor) Document() *QTextDocument {
	defer qt.Recovering("QTextCursor::document")

	if ptr.Pointer() != nil {
		return NewQTextDocumentFromPointer(C.QTextCursor_Document(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextCursor) EndEditBlock() {
	defer qt.Recovering("QTextCursor::endEditBlock")

	if ptr.Pointer() != nil {
		C.QTextCursor_EndEditBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) HasComplexSelection() bool {
	defer qt.Recovering("QTextCursor::hasComplexSelection")

	if ptr.Pointer() != nil {
		return C.QTextCursor_HasComplexSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) HasSelection() bool {
	defer qt.Recovering("QTextCursor::hasSelection")

	if ptr.Pointer() != nil {
		return C.QTextCursor_HasSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) InsertBlock() {
	defer qt.Recovering("QTextCursor::insertBlock")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) InsertBlock2(format QTextBlockFormat_ITF) {
	defer qt.Recovering("QTextCursor::insertBlock")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertBlock2(ptr.Pointer(), PointerFromQTextBlockFormat(format))
	}
}

func (ptr *QTextCursor) InsertFragment(fragment QTextDocumentFragment_ITF) {
	defer qt.Recovering("QTextCursor::insertFragment")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertFragment(ptr.Pointer(), PointerFromQTextDocumentFragment(fragment))
	}
}

func (ptr *QTextCursor) InsertFrame(format QTextFrameFormat_ITF) *QTextFrame {
	defer qt.Recovering("QTextCursor::insertFrame")

	if ptr.Pointer() != nil {
		return NewQTextFrameFromPointer(C.QTextCursor_InsertFrame(ptr.Pointer(), PointerFromQTextFrameFormat(format)))
	}
	return nil
}

func (ptr *QTextCursor) InsertHtml(html string) {
	defer qt.Recovering("QTextCursor::insertHtml")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertHtml(ptr.Pointer(), C.CString(html))
	}
}

func (ptr *QTextCursor) InsertImage4(image QImage_ITF, name string) {
	defer qt.Recovering("QTextCursor::insertImage")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertImage4(ptr.Pointer(), PointerFromQImage(image), C.CString(name))
	}
}

func (ptr *QTextCursor) InsertImage3(name string) {
	defer qt.Recovering("QTextCursor::insertImage")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertImage3(ptr.Pointer(), C.CString(name))
	}
}

func (ptr *QTextCursor) InsertImage(format QTextImageFormat_ITF) {
	defer qt.Recovering("QTextCursor::insertImage")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertImage(ptr.Pointer(), PointerFromQTextImageFormat(format))
	}
}

func (ptr *QTextCursor) InsertImage2(format QTextImageFormat_ITF, alignment QTextFrameFormat__Position) {
	defer qt.Recovering("QTextCursor::insertImage")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertImage2(ptr.Pointer(), PointerFromQTextImageFormat(format), C.int(alignment))
	}
}

func (ptr *QTextCursor) InsertList2(style QTextListFormat__Style) *QTextList {
	defer qt.Recovering("QTextCursor::insertList")

	if ptr.Pointer() != nil {
		return NewQTextListFromPointer(C.QTextCursor_InsertList2(ptr.Pointer(), C.int(style)))
	}
	return nil
}

func (ptr *QTextCursor) InsertList(format QTextListFormat_ITF) *QTextList {
	defer qt.Recovering("QTextCursor::insertList")

	if ptr.Pointer() != nil {
		return NewQTextListFromPointer(C.QTextCursor_InsertList(ptr.Pointer(), PointerFromQTextListFormat(format)))
	}
	return nil
}

func (ptr *QTextCursor) InsertText(text string) {
	defer qt.Recovering("QTextCursor::insertText")

	if ptr.Pointer() != nil {
		C.QTextCursor_InsertText(ptr.Pointer(), C.CString(text))
	}
}

func (ptr *QTextCursor) IsCopyOf(other QTextCursor_ITF) bool {
	defer qt.Recovering("QTextCursor::isCopyOf")

	if ptr.Pointer() != nil {
		return C.QTextCursor_IsCopyOf(ptr.Pointer(), PointerFromQTextCursor(other)) != 0
	}
	return false
}

func (ptr *QTextCursor) IsNull() bool {
	defer qt.Recovering("QTextCursor::isNull")

	if ptr.Pointer() != nil {
		return C.QTextCursor_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) JoinPreviousEditBlock() {
	defer qt.Recovering("QTextCursor::joinPreviousEditBlock")

	if ptr.Pointer() != nil {
		C.QTextCursor_JoinPreviousEditBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) KeepPositionOnInsert() bool {
	defer qt.Recovering("QTextCursor::keepPositionOnInsert")

	if ptr.Pointer() != nil {
		return C.QTextCursor_KeepPositionOnInsert(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) MergeBlockCharFormat(modifier QTextCharFormat_ITF) {
	defer qt.Recovering("QTextCursor::mergeBlockCharFormat")

	if ptr.Pointer() != nil {
		C.QTextCursor_MergeBlockCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(modifier))
	}
}

func (ptr *QTextCursor) MergeBlockFormat(modifier QTextBlockFormat_ITF) {
	defer qt.Recovering("QTextCursor::mergeBlockFormat")

	if ptr.Pointer() != nil {
		C.QTextCursor_MergeBlockFormat(ptr.Pointer(), PointerFromQTextBlockFormat(modifier))
	}
}

func (ptr *QTextCursor) MergeCharFormat(modifier QTextCharFormat_ITF) {
	defer qt.Recovering("QTextCursor::mergeCharFormat")

	if ptr.Pointer() != nil {
		C.QTextCursor_MergeCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(modifier))
	}
}

func (ptr *QTextCursor) Position() int {
	defer qt.Recovering("QTextCursor::position")

	if ptr.Pointer() != nil {
		return int(C.QTextCursor_Position(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCursor) PositionInBlock() int {
	defer qt.Recovering("QTextCursor::positionInBlock")

	if ptr.Pointer() != nil {
		return int(C.QTextCursor_PositionInBlock(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCursor) RemoveSelectedText() {
	defer qt.Recovering("QTextCursor::removeSelectedText")

	if ptr.Pointer() != nil {
		C.QTextCursor_RemoveSelectedText(ptr.Pointer())
	}
}

func (ptr *QTextCursor) Select(selection QTextCursor__SelectionType) {
	defer qt.Recovering("QTextCursor::select")

	if ptr.Pointer() != nil {
		C.QTextCursor_Select(ptr.Pointer(), C.int(selection))
	}
}

func (ptr *QTextCursor) SelectedTableCells(firstRow int, numRows int, firstColumn int, numColumns int) {
	defer qt.Recovering("QTextCursor::selectedTableCells")

	if ptr.Pointer() != nil {
		C.QTextCursor_SelectedTableCells(ptr.Pointer(), C.int(firstRow), C.int(numRows), C.int(firstColumn), C.int(numColumns))
	}
}

func (ptr *QTextCursor) SelectedText() string {
	defer qt.Recovering("QTextCursor::selectedText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextCursor_SelectedText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCursor) Selection() *QTextDocumentFragment {
	defer qt.Recovering("QTextCursor::selection")

	if ptr.Pointer() != nil {
		return NewQTextDocumentFragmentFromPointer(C.QTextCursor_Selection(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextCursor) SelectionEnd() int {
	defer qt.Recovering("QTextCursor::selectionEnd")

	if ptr.Pointer() != nil {
		return int(C.QTextCursor_SelectionEnd(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCursor) SelectionStart() int {
	defer qt.Recovering("QTextCursor::selectionStart")

	if ptr.Pointer() != nil {
		return int(C.QTextCursor_SelectionStart(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCursor) SetBlockCharFormat(format QTextCharFormat_ITF) {
	defer qt.Recovering("QTextCursor::setBlockCharFormat")

	if ptr.Pointer() != nil {
		C.QTextCursor_SetBlockCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextCursor) SetBlockFormat(format QTextBlockFormat_ITF) {
	defer qt.Recovering("QTextCursor::setBlockFormat")

	if ptr.Pointer() != nil {
		C.QTextCursor_SetBlockFormat(ptr.Pointer(), PointerFromQTextBlockFormat(format))
	}
}

func (ptr *QTextCursor) SetCharFormat(format QTextCharFormat_ITF) {
	defer qt.Recovering("QTextCursor::setCharFormat")

	if ptr.Pointer() != nil {
		C.QTextCursor_SetCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextCursor) SetKeepPositionOnInsert(b bool) {
	defer qt.Recovering("QTextCursor::setKeepPositionOnInsert")

	if ptr.Pointer() != nil {
		C.QTextCursor_SetKeepPositionOnInsert(ptr.Pointer(), C.int(qt.GoBoolToInt(b)))
	}
}

func (ptr *QTextCursor) SetPosition(pos int, m QTextCursor__MoveMode) {
	defer qt.Recovering("QTextCursor::setPosition")

	if ptr.Pointer() != nil {
		C.QTextCursor_SetPosition(ptr.Pointer(), C.int(pos), C.int(m))
	}
}

func (ptr *QTextCursor) SetVerticalMovementX(x int) {
	defer qt.Recovering("QTextCursor::setVerticalMovementX")

	if ptr.Pointer() != nil {
		C.QTextCursor_SetVerticalMovementX(ptr.Pointer(), C.int(x))
	}
}

func (ptr *QTextCursor) SetVisualNavigation(b bool) {
	defer qt.Recovering("QTextCursor::setVisualNavigation")

	if ptr.Pointer() != nil {
		C.QTextCursor_SetVisualNavigation(ptr.Pointer(), C.int(qt.GoBoolToInt(b)))
	}
}

func (ptr *QTextCursor) Swap(other QTextCursor_ITF) {
	defer qt.Recovering("QTextCursor::swap")

	if ptr.Pointer() != nil {
		C.QTextCursor_Swap(ptr.Pointer(), PointerFromQTextCursor(other))
	}
}

func (ptr *QTextCursor) VerticalMovementX() int {
	defer qt.Recovering("QTextCursor::verticalMovementX")

	if ptr.Pointer() != nil {
		return int(C.QTextCursor_VerticalMovementX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCursor) VisualNavigation() bool {
	defer qt.Recovering("QTextCursor::visualNavigation")

	if ptr.Pointer() != nil {
		return C.QTextCursor_VisualNavigation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) DestroyQTextCursor() {
	defer qt.Recovering("QTextCursor::~QTextCursor")

	if ptr.Pointer() != nil {
		C.QTextCursor_DestroyQTextCursor(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QTextDocument::FindFlag
type QTextDocument__FindFlag int64

const (
	QTextDocument__FindBackward        = QTextDocument__FindFlag(0x00001)
	QTextDocument__FindCaseSensitively = QTextDocument__FindFlag(0x00002)
	QTextDocument__FindWholeWords      = QTextDocument__FindFlag(0x00004)
)

//QTextDocument::MetaInformation
type QTextDocument__MetaInformation int64

const (
	QTextDocument__DocumentTitle = QTextDocument__MetaInformation(0)
	QTextDocument__DocumentUrl   = QTextDocument__MetaInformation(1)
)

//QTextDocument::ResourceType
type QTextDocument__ResourceType int64

const (
	QTextDocument__HtmlResource       = QTextDocument__ResourceType(1)
	QTextDocument__ImageResource      = QTextDocument__ResourceType(2)
	QTextDocument__StyleSheetResource = QTextDocument__ResourceType(3)
	QTextDocument__UserResource       = QTextDocument__ResourceType(100)
)

//QTextDocument::Stacks
type QTextDocument__Stacks int64

const (
	QTextDocument__UndoStack         = QTextDocument__Stacks(0x01)
	QTextDocument__RedoStack         = QTextDocument__Stacks(0x02)
	QTextDocument__UndoAndRedoStacks = QTextDocument__Stacks(QTextDocument__UndoStack | QTextDocument__RedoStack)
)

type QTextDocument struct {
	core.QObject
}

type QTextDocument_ITF interface {
	core.QObject_ITF
	QTextDocument_PTR() *QTextDocument
}

func (p *QTextDocument) QTextDocument_PTR() *QTextDocument {
	return p
}

func (p *QTextDocument) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QTextDocument) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextDocument(ptr QTextDocument_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDocument_PTR().Pointer()
	}
	return nil
}

func NewQTextDocumentFromPointer(ptr unsafe.Pointer) *QTextDocument {
	var n = new(QTextDocument)
	n.SetPointer(ptr)
	return n
}

func newQTextDocumentFromPointer(ptr unsafe.Pointer) *QTextDocument {
	var n = NewQTextDocumentFromPointer(ptr)
	for len(n.ObjectName()) < len("QTextDocument_") {
		n.SetObjectName("QTextDocument_" + qt.Identifier())
	}
	return n
}

func (ptr *QTextDocument) BaseUrl() *core.QUrl {
	defer qt.Recovering("QTextDocument::baseUrl")

	if ptr.Pointer() != nil {
		return core.NewQUrlFromPointer(C.QTextDocument_BaseUrl(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) BlockCount() int {
	defer qt.Recovering("QTextDocument::blockCount")

	if ptr.Pointer() != nil {
		return int(C.QTextDocument_BlockCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQTextDocument_CreateObject
func callbackQTextDocument_CreateObject(ptr unsafe.Pointer, ptrName *C.char, format unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QTextDocument::createObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "createObject"); signal != nil {
		return PointerFromQTextObject(signal.(func(*QTextFormat) *QTextObject)(NewQTextFormatFromPointer(format)))
	}

	return PointerFromQTextObject(NewQTextDocumentFromPointer(ptr).CreateObjectDefault(NewQTextFormatFromPointer(format)))
}

func (ptr *QTextDocument) ConnectCreateObject(f func(format *QTextFormat) *QTextObject) {
	defer qt.Recovering("connect QTextDocument::createObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "createObject", f)
	}
}

func (ptr *QTextDocument) DisconnectCreateObject() {
	defer qt.Recovering("disconnect QTextDocument::createObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "createObject")
	}
}

func (ptr *QTextDocument) CreateObject(format QTextFormat_ITF) *QTextObject {
	defer qt.Recovering("QTextDocument::createObject")

	if ptr.Pointer() != nil {
		return NewQTextObjectFromPointer(C.QTextDocument_CreateObject(ptr.Pointer(), PointerFromQTextFormat(format)))
	}
	return nil
}

func (ptr *QTextDocument) CreateObjectDefault(format QTextFormat_ITF) *QTextObject {
	defer qt.Recovering("QTextDocument::createObject")

	if ptr.Pointer() != nil {
		return NewQTextObjectFromPointer(C.QTextDocument_CreateObjectDefault(ptr.Pointer(), PointerFromQTextFormat(format)))
	}
	return nil
}

func (ptr *QTextDocument) DefaultStyleSheet() string {
	defer qt.Recovering("QTextDocument::defaultStyleSheet")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextDocument_DefaultStyleSheet(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocument) DocumentMargin() float64 {
	defer qt.Recovering("QTextDocument::documentMargin")

	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_DocumentMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) Find4(subString string, position int, options QTextDocument__FindFlag) *QTextCursor {
	defer qt.Recovering("QTextDocument::find")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextDocument_Find4(ptr.Pointer(), C.CString(subString), C.int(position), C.int(options)))
	}
	return nil
}

func (ptr *QTextDocument) IndentWidth() float64 {
	defer qt.Recovering("QTextDocument::indentWidth")

	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_IndentWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) IsModified() bool {
	defer qt.Recovering("QTextDocument::isModified")

	if ptr.Pointer() != nil {
		return C.QTextDocument_IsModified(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsUndoRedoEnabled() bool {
	defer qt.Recovering("QTextDocument::isUndoRedoEnabled")

	if ptr.Pointer() != nil {
		return C.QTextDocument_IsUndoRedoEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) MarkContentsDirty(position int, length int) {
	defer qt.Recovering("QTextDocument::markContentsDirty")

	if ptr.Pointer() != nil {
		C.QTextDocument_MarkContentsDirty(ptr.Pointer(), C.int(position), C.int(length))
	}
}

func (ptr *QTextDocument) MaximumBlockCount() int {
	defer qt.Recovering("QTextDocument::maximumBlockCount")

	if ptr.Pointer() != nil {
		return int(C.QTextDocument_MaximumBlockCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) PageSize() *core.QSizeF {
	defer qt.Recovering("QTextDocument::pageSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QTextDocument_PageSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) SetBaseUrl(url core.QUrl_ITF) {
	defer qt.Recovering("QTextDocument::setBaseUrl")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetBaseUrl(ptr.Pointer(), core.PointerFromQUrl(url))
	}
}

func (ptr *QTextDocument) SetDefaultStyleSheet(sheet string) {
	defer qt.Recovering("QTextDocument::setDefaultStyleSheet")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultStyleSheet(ptr.Pointer(), C.CString(sheet))
	}
}

func (ptr *QTextDocument) SetDocumentMargin(margin float64) {
	defer qt.Recovering("QTextDocument::setDocumentMargin")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetDocumentMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextDocument) SetMaximumBlockCount(maximum int) {
	defer qt.Recovering("QTextDocument::setMaximumBlockCount")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetMaximumBlockCount(ptr.Pointer(), C.int(maximum))
	}
}

//export callbackQTextDocument_SetModified
func callbackQTextDocument_SetModified(ptr unsafe.Pointer, ptrName *C.char, m C.int) {
	defer qt.Recovering("callback QTextDocument::setModified")

	if signal := qt.GetSignal(C.GoString(ptrName), "setModified"); signal != nil {
		signal.(func(bool))(int(m) != 0)
	}

}

func (ptr *QTextDocument) ConnectSetModified(f func(m bool)) {
	defer qt.Recovering("connect QTextDocument::setModified")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setModified", f)
	}
}

func (ptr *QTextDocument) DisconnectSetModified(m bool) {
	defer qt.Recovering("disconnect QTextDocument::setModified")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setModified")
	}
}

func (ptr *QTextDocument) SetModified(m bool) {
	defer qt.Recovering("QTextDocument::setModified")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetModified(ptr.Pointer(), C.int(qt.GoBoolToInt(m)))
	}
}

func (ptr *QTextDocument) SetPageSize(size core.QSizeF_ITF) {
	defer qt.Recovering("QTextDocument::setPageSize")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetPageSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QTextDocument) SetTextWidth(width float64) {
	defer qt.Recovering("QTextDocument::setTextWidth")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetTextWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextDocument) SetUndoRedoEnabled(enable bool) {
	defer qt.Recovering("QTextDocument::setUndoRedoEnabled")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetUndoRedoEnabled(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QTextDocument) SetUseDesignMetrics(b bool) {
	defer qt.Recovering("QTextDocument::setUseDesignMetrics")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetUseDesignMetrics(ptr.Pointer(), C.int(qt.GoBoolToInt(b)))
	}
}

func (ptr *QTextDocument) Size() *core.QSizeF {
	defer qt.Recovering("QTextDocument::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QTextDocument_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) TextWidth() float64 {
	defer qt.Recovering("QTextDocument::textWidth")

	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_TextWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) UseDesignMetrics() bool {
	defer qt.Recovering("QTextDocument::useDesignMetrics")

	if ptr.Pointer() != nil {
		return C.QTextDocument_UseDesignMetrics(ptr.Pointer()) != 0
	}
	return false
}

func NewQTextDocument(parent core.QObject_ITF) *QTextDocument {
	defer qt.Recovering("QTextDocument::QTextDocument")

	return newQTextDocumentFromPointer(C.QTextDocument_NewQTextDocument(core.PointerFromQObject(parent)))
}

func NewQTextDocument2(text string, parent core.QObject_ITF) *QTextDocument {
	defer qt.Recovering("QTextDocument::QTextDocument")

	return newQTextDocumentFromPointer(C.QTextDocument_NewQTextDocument2(C.CString(text), core.PointerFromQObject(parent)))
}

func (ptr *QTextDocument) AddResource(ty int, name core.QUrl_ITF, resource core.QVariant_ITF) {
	defer qt.Recovering("QTextDocument::addResource")

	if ptr.Pointer() != nil {
		C.QTextDocument_AddResource(ptr.Pointer(), C.int(ty), core.PointerFromQUrl(name), core.PointerFromQVariant(resource))
	}
}

func (ptr *QTextDocument) AdjustSize() {
	defer qt.Recovering("QTextDocument::adjustSize")

	if ptr.Pointer() != nil {
		C.QTextDocument_AdjustSize(ptr.Pointer())
	}
}

func (ptr *QTextDocument) AvailableRedoSteps() int {
	defer qt.Recovering("QTextDocument::availableRedoSteps")

	if ptr.Pointer() != nil {
		return int(C.QTextDocument_AvailableRedoSteps(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) AvailableUndoSteps() int {
	defer qt.Recovering("QTextDocument::availableUndoSteps")

	if ptr.Pointer() != nil {
		return int(C.QTextDocument_AvailableUndoSteps(ptr.Pointer()))
	}
	return 0
}

//export callbackQTextDocument_BaseUrlChanged
func callbackQTextDocument_BaseUrlChanged(ptr unsafe.Pointer, ptrName *C.char, url unsafe.Pointer) {
	defer qt.Recovering("callback QTextDocument::baseUrlChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "baseUrlChanged"); signal != nil {
		signal.(func(*core.QUrl))(core.NewQUrlFromPointer(url))
	}

}

func (ptr *QTextDocument) ConnectBaseUrlChanged(f func(url *core.QUrl)) {
	defer qt.Recovering("connect QTextDocument::baseUrlChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectBaseUrlChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "baseUrlChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectBaseUrlChanged() {
	defer qt.Recovering("disconnect QTextDocument::baseUrlChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectBaseUrlChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "baseUrlChanged")
	}
}

func (ptr *QTextDocument) BaseUrlChanged(url core.QUrl_ITF) {
	defer qt.Recovering("QTextDocument::baseUrlChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_BaseUrlChanged(ptr.Pointer(), core.PointerFromQUrl(url))
	}
}

func (ptr *QTextDocument) Begin() *QTextBlock {
	defer qt.Recovering("QTextDocument::begin")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextDocument_Begin(ptr.Pointer()))
	}
	return nil
}

//export callbackQTextDocument_BlockCountChanged
func callbackQTextDocument_BlockCountChanged(ptr unsafe.Pointer, ptrName *C.char, newBlockCount C.int) {
	defer qt.Recovering("callback QTextDocument::blockCountChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "blockCountChanged"); signal != nil {
		signal.(func(int))(int(newBlockCount))
	}

}

func (ptr *QTextDocument) ConnectBlockCountChanged(f func(newBlockCount int)) {
	defer qt.Recovering("connect QTextDocument::blockCountChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectBlockCountChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "blockCountChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectBlockCountChanged() {
	defer qt.Recovering("disconnect QTextDocument::blockCountChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectBlockCountChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "blockCountChanged")
	}
}

func (ptr *QTextDocument) BlockCountChanged(newBlockCount int) {
	defer qt.Recovering("QTextDocument::blockCountChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_BlockCountChanged(ptr.Pointer(), C.int(newBlockCount))
	}
}

func (ptr *QTextDocument) CharacterCount() int {
	defer qt.Recovering("QTextDocument::characterCount")

	if ptr.Pointer() != nil {
		return int(C.QTextDocument_CharacterCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQTextDocument_Clear
func callbackQTextDocument_Clear(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextDocument::clear")

	if signal := qt.GetSignal(C.GoString(ptrName), "clear"); signal != nil {
		signal.(func())()
	} else {
		NewQTextDocumentFromPointer(ptr).ClearDefault()
	}
}

func (ptr *QTextDocument) ConnectClear(f func()) {
	defer qt.Recovering("connect QTextDocument::clear")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "clear", f)
	}
}

func (ptr *QTextDocument) DisconnectClear() {
	defer qt.Recovering("disconnect QTextDocument::clear")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "clear")
	}
}

func (ptr *QTextDocument) Clear() {
	defer qt.Recovering("QTextDocument::clear")

	if ptr.Pointer() != nil {
		C.QTextDocument_Clear(ptr.Pointer())
	}
}

func (ptr *QTextDocument) ClearDefault() {
	defer qt.Recovering("QTextDocument::clear")

	if ptr.Pointer() != nil {
		C.QTextDocument_ClearDefault(ptr.Pointer())
	}
}

func (ptr *QTextDocument) ClearUndoRedoStacks(stacksToClear QTextDocument__Stacks) {
	defer qt.Recovering("QTextDocument::clearUndoRedoStacks")

	if ptr.Pointer() != nil {
		C.QTextDocument_ClearUndoRedoStacks(ptr.Pointer(), C.int(stacksToClear))
	}
}

func (ptr *QTextDocument) Clone(parent core.QObject_ITF) *QTextDocument {
	defer qt.Recovering("QTextDocument::clone")

	if ptr.Pointer() != nil {
		return NewQTextDocumentFromPointer(C.QTextDocument_Clone(ptr.Pointer(), core.PointerFromQObject(parent)))
	}
	return nil
}

//export callbackQTextDocument_ContentsChange
func callbackQTextDocument_ContentsChange(ptr unsafe.Pointer, ptrName *C.char, position C.int, charsRemoved C.int, charsAdded C.int) {
	defer qt.Recovering("callback QTextDocument::contentsChange")

	if signal := qt.GetSignal(C.GoString(ptrName), "contentsChange"); signal != nil {
		signal.(func(int, int, int))(int(position), int(charsRemoved), int(charsAdded))
	}

}

func (ptr *QTextDocument) ConnectContentsChange(f func(position int, charsRemoved int, charsAdded int)) {
	defer qt.Recovering("connect QTextDocument::contentsChange")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectContentsChange(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "contentsChange", f)
	}
}

func (ptr *QTextDocument) DisconnectContentsChange() {
	defer qt.Recovering("disconnect QTextDocument::contentsChange")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectContentsChange(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "contentsChange")
	}
}

func (ptr *QTextDocument) ContentsChange(position int, charsRemoved int, charsAdded int) {
	defer qt.Recovering("QTextDocument::contentsChange")

	if ptr.Pointer() != nil {
		C.QTextDocument_ContentsChange(ptr.Pointer(), C.int(position), C.int(charsRemoved), C.int(charsAdded))
	}
}

//export callbackQTextDocument_ContentsChanged
func callbackQTextDocument_ContentsChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextDocument::contentsChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "contentsChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectContentsChanged(f func()) {
	defer qt.Recovering("connect QTextDocument::contentsChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectContentsChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "contentsChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectContentsChanged() {
	defer qt.Recovering("disconnect QTextDocument::contentsChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectContentsChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "contentsChanged")
	}
}

func (ptr *QTextDocument) ContentsChanged() {
	defer qt.Recovering("QTextDocument::contentsChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_ContentsChanged(ptr.Pointer())
	}
}

//export callbackQTextDocument_CursorPositionChanged
func callbackQTextDocument_CursorPositionChanged(ptr unsafe.Pointer, ptrName *C.char, cursor unsafe.Pointer) {
	defer qt.Recovering("callback QTextDocument::cursorPositionChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "cursorPositionChanged"); signal != nil {
		signal.(func(*QTextCursor))(NewQTextCursorFromPointer(cursor))
	}

}

func (ptr *QTextDocument) ConnectCursorPositionChanged(f func(cursor *QTextCursor)) {
	defer qt.Recovering("connect QTextDocument::cursorPositionChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectCursorPositionChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "cursorPositionChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectCursorPositionChanged() {
	defer qt.Recovering("disconnect QTextDocument::cursorPositionChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectCursorPositionChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "cursorPositionChanged")
	}
}

func (ptr *QTextDocument) CursorPositionChanged(cursor QTextCursor_ITF) {
	defer qt.Recovering("QTextDocument::cursorPositionChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_CursorPositionChanged(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

func (ptr *QTextDocument) DefaultCursorMoveStyle() core.Qt__CursorMoveStyle {
	defer qt.Recovering("QTextDocument::defaultCursorMoveStyle")

	if ptr.Pointer() != nil {
		return core.Qt__CursorMoveStyle(C.QTextDocument_DefaultCursorMoveStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) DefaultFont() *QFont {
	defer qt.Recovering("QTextDocument::defaultFont")

	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QTextDocument_DefaultFont(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) DefaultTextOption() *QTextOption {
	defer qt.Recovering("QTextDocument::defaultTextOption")

	if ptr.Pointer() != nil {
		return NewQTextOptionFromPointer(C.QTextDocument_DefaultTextOption(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) DocumentLayout() *QAbstractTextDocumentLayout {
	defer qt.Recovering("QTextDocument::documentLayout")

	if ptr.Pointer() != nil {
		return NewQAbstractTextDocumentLayoutFromPointer(C.QTextDocument_DocumentLayout(ptr.Pointer()))
	}
	return nil
}

//export callbackQTextDocument_DocumentLayoutChanged
func callbackQTextDocument_DocumentLayoutChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextDocument::documentLayoutChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "documentLayoutChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectDocumentLayoutChanged(f func()) {
	defer qt.Recovering("connect QTextDocument::documentLayoutChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectDocumentLayoutChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "documentLayoutChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectDocumentLayoutChanged() {
	defer qt.Recovering("disconnect QTextDocument::documentLayoutChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectDocumentLayoutChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "documentLayoutChanged")
	}
}

func (ptr *QTextDocument) DocumentLayoutChanged() {
	defer qt.Recovering("QTextDocument::documentLayoutChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_DocumentLayoutChanged(ptr.Pointer())
	}
}

func (ptr *QTextDocument) DrawContents(p QPainter_ITF, rect core.QRectF_ITF) {
	defer qt.Recovering("QTextDocument::drawContents")

	if ptr.Pointer() != nil {
		C.QTextDocument_DrawContents(ptr.Pointer(), PointerFromQPainter(p), core.PointerFromQRectF(rect))
	}
}

func (ptr *QTextDocument) End() *QTextBlock {
	defer qt.Recovering("QTextDocument::end")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextDocument_End(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) Find6(expr core.QRegExp_ITF, cursor QTextCursor_ITF, options QTextDocument__FindFlag) *QTextCursor {
	defer qt.Recovering("QTextDocument::find")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextDocument_Find6(ptr.Pointer(), core.PointerFromQRegExp(expr), PointerFromQTextCursor(cursor), C.int(options)))
	}
	return nil
}

func (ptr *QTextDocument) Find5(expr core.QRegExp_ITF, from int, options QTextDocument__FindFlag) *QTextCursor {
	defer qt.Recovering("QTextDocument::find")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextDocument_Find5(ptr.Pointer(), core.PointerFromQRegExp(expr), C.int(from), C.int(options)))
	}
	return nil
}

func (ptr *QTextDocument) Find3(expr core.QRegularExpression_ITF, cursor QTextCursor_ITF, options QTextDocument__FindFlag) *QTextCursor {
	defer qt.Recovering("QTextDocument::find")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextDocument_Find3(ptr.Pointer(), core.PointerFromQRegularExpression(expr), PointerFromQTextCursor(cursor), C.int(options)))
	}
	return nil
}

func (ptr *QTextDocument) Find2(expr core.QRegularExpression_ITF, from int, options QTextDocument__FindFlag) *QTextCursor {
	defer qt.Recovering("QTextDocument::find")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextDocument_Find2(ptr.Pointer(), core.PointerFromQRegularExpression(expr), C.int(from), C.int(options)))
	}
	return nil
}

func (ptr *QTextDocument) Find(subString string, cursor QTextCursor_ITF, options QTextDocument__FindFlag) *QTextCursor {
	defer qt.Recovering("QTextDocument::find")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextDocument_Find(ptr.Pointer(), C.CString(subString), PointerFromQTextCursor(cursor), C.int(options)))
	}
	return nil
}

func (ptr *QTextDocument) FindBlock(pos int) *QTextBlock {
	defer qt.Recovering("QTextDocument::findBlock")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextDocument_FindBlock(ptr.Pointer(), C.int(pos)))
	}
	return nil
}

func (ptr *QTextDocument) FindBlockByLineNumber(lineNumber int) *QTextBlock {
	defer qt.Recovering("QTextDocument::findBlockByLineNumber")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextDocument_FindBlockByLineNumber(ptr.Pointer(), C.int(lineNumber)))
	}
	return nil
}

func (ptr *QTextDocument) FindBlockByNumber(blockNumber int) *QTextBlock {
	defer qt.Recovering("QTextDocument::findBlockByNumber")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextDocument_FindBlockByNumber(ptr.Pointer(), C.int(blockNumber)))
	}
	return nil
}

func (ptr *QTextDocument) FirstBlock() *QTextBlock {
	defer qt.Recovering("QTextDocument::firstBlock")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextDocument_FirstBlock(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) IdealWidth() float64 {
	defer qt.Recovering("QTextDocument::idealWidth")

	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_IdealWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) IsEmpty() bool {
	defer qt.Recovering("QTextDocument::isEmpty")

	if ptr.Pointer() != nil {
		return C.QTextDocument_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsRedoAvailable() bool {
	defer qt.Recovering("QTextDocument::isRedoAvailable")

	if ptr.Pointer() != nil {
		return C.QTextDocument_IsRedoAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsUndoAvailable() bool {
	defer qt.Recovering("QTextDocument::isUndoAvailable")

	if ptr.Pointer() != nil {
		return C.QTextDocument_IsUndoAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) LastBlock() *QTextBlock {
	defer qt.Recovering("QTextDocument::lastBlock")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextDocument_LastBlock(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) LineCount() int {
	defer qt.Recovering("QTextDocument::lineCount")

	if ptr.Pointer() != nil {
		return int(C.QTextDocument_LineCount(ptr.Pointer()))
	}
	return 0
}

//export callbackQTextDocument_LoadResource
func callbackQTextDocument_LoadResource(ptr unsafe.Pointer, ptrName *C.char, ty C.int, name unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QTextDocument::loadResource")

	if signal := qt.GetSignal(C.GoString(ptrName), "loadResource"); signal != nil {
		return core.PointerFromQVariant(signal.(func(int, *core.QUrl) *core.QVariant)(int(ty), core.NewQUrlFromPointer(name)))
	}

	return core.PointerFromQVariant(NewQTextDocumentFromPointer(ptr).LoadResourceDefault(int(ty), core.NewQUrlFromPointer(name)))
}

func (ptr *QTextDocument) ConnectLoadResource(f func(ty int, name *core.QUrl) *core.QVariant) {
	defer qt.Recovering("connect QTextDocument::loadResource")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "loadResource", f)
	}
}

func (ptr *QTextDocument) DisconnectLoadResource() {
	defer qt.Recovering("disconnect QTextDocument::loadResource")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "loadResource")
	}
}

func (ptr *QTextDocument) LoadResource(ty int, name core.QUrl_ITF) *core.QVariant {
	defer qt.Recovering("QTextDocument::loadResource")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QTextDocument_LoadResource(ptr.Pointer(), C.int(ty), core.PointerFromQUrl(name)))
	}
	return nil
}

func (ptr *QTextDocument) LoadResourceDefault(ty int, name core.QUrl_ITF) *core.QVariant {
	defer qt.Recovering("QTextDocument::loadResource")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QTextDocument_LoadResourceDefault(ptr.Pointer(), C.int(ty), core.PointerFromQUrl(name)))
	}
	return nil
}

func (ptr *QTextDocument) MetaInformation(info QTextDocument__MetaInformation) string {
	defer qt.Recovering("QTextDocument::metaInformation")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextDocument_MetaInformation(ptr.Pointer(), C.int(info)))
	}
	return ""
}

//export callbackQTextDocument_ModificationChanged
func callbackQTextDocument_ModificationChanged(ptr unsafe.Pointer, ptrName *C.char, changed C.int) {
	defer qt.Recovering("callback QTextDocument::modificationChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "modificationChanged"); signal != nil {
		signal.(func(bool))(int(changed) != 0)
	}

}

func (ptr *QTextDocument) ConnectModificationChanged(f func(changed bool)) {
	defer qt.Recovering("connect QTextDocument::modificationChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectModificationChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "modificationChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectModificationChanged() {
	defer qt.Recovering("disconnect QTextDocument::modificationChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectModificationChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "modificationChanged")
	}
}

func (ptr *QTextDocument) ModificationChanged(changed bool) {
	defer qt.Recovering("QTextDocument::modificationChanged")

	if ptr.Pointer() != nil {
		C.QTextDocument_ModificationChanged(ptr.Pointer(), C.int(qt.GoBoolToInt(changed)))
	}
}

func (ptr *QTextDocument) Object(objectIndex int) *QTextObject {
	defer qt.Recovering("QTextDocument::object")

	if ptr.Pointer() != nil {
		return NewQTextObjectFromPointer(C.QTextDocument_Object(ptr.Pointer(), C.int(objectIndex)))
	}
	return nil
}

func (ptr *QTextDocument) ObjectForFormat(f QTextFormat_ITF) *QTextObject {
	defer qt.Recovering("QTextDocument::objectForFormat")

	if ptr.Pointer() != nil {
		return NewQTextObjectFromPointer(C.QTextDocument_ObjectForFormat(ptr.Pointer(), PointerFromQTextFormat(f)))
	}
	return nil
}

func (ptr *QTextDocument) PageCount() int {
	defer qt.Recovering("QTextDocument::pageCount")

	if ptr.Pointer() != nil {
		return int(C.QTextDocument_PageCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) Print(printer QPagedPaintDevice_ITF) {
	defer qt.Recovering("QTextDocument::print")

	if ptr.Pointer() != nil {
		C.QTextDocument_Print(ptr.Pointer(), PointerFromQPagedPaintDevice(printer))
	}
}

//export callbackQTextDocument_Redo2
func callbackQTextDocument_Redo2(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextDocument::redo")

	if signal := qt.GetSignal(C.GoString(ptrName), "redo2"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectRedo2(f func()) {
	defer qt.Recovering("connect QTextDocument::redo")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "redo2", f)
	}
}

func (ptr *QTextDocument) DisconnectRedo2() {
	defer qt.Recovering("disconnect QTextDocument::redo")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "redo2")
	}
}

func (ptr *QTextDocument) Redo2() {
	defer qt.Recovering("QTextDocument::redo")

	if ptr.Pointer() != nil {
		C.QTextDocument_Redo2(ptr.Pointer())
	}
}

func (ptr *QTextDocument) Redo(cursor QTextCursor_ITF) {
	defer qt.Recovering("QTextDocument::redo")

	if ptr.Pointer() != nil {
		C.QTextDocument_Redo(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

//export callbackQTextDocument_RedoAvailable
func callbackQTextDocument_RedoAvailable(ptr unsafe.Pointer, ptrName *C.char, available C.int) {
	defer qt.Recovering("callback QTextDocument::redoAvailable")

	if signal := qt.GetSignal(C.GoString(ptrName), "redoAvailable"); signal != nil {
		signal.(func(bool))(int(available) != 0)
	}

}

func (ptr *QTextDocument) ConnectRedoAvailable(f func(available bool)) {
	defer qt.Recovering("connect QTextDocument::redoAvailable")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectRedoAvailable(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "redoAvailable", f)
	}
}

func (ptr *QTextDocument) DisconnectRedoAvailable() {
	defer qt.Recovering("disconnect QTextDocument::redoAvailable")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectRedoAvailable(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "redoAvailable")
	}
}

func (ptr *QTextDocument) RedoAvailable(available bool) {
	defer qt.Recovering("QTextDocument::redoAvailable")

	if ptr.Pointer() != nil {
		C.QTextDocument_RedoAvailable(ptr.Pointer(), C.int(qt.GoBoolToInt(available)))
	}
}

func (ptr *QTextDocument) Resource(ty int, name core.QUrl_ITF) *core.QVariant {
	defer qt.Recovering("QTextDocument::resource")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QTextDocument_Resource(ptr.Pointer(), C.int(ty), core.PointerFromQUrl(name)))
	}
	return nil
}

func (ptr *QTextDocument) Revision() int {
	defer qt.Recovering("QTextDocument::revision")

	if ptr.Pointer() != nil {
		return int(C.QTextDocument_Revision(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) RootFrame() *QTextFrame {
	defer qt.Recovering("QTextDocument::rootFrame")

	if ptr.Pointer() != nil {
		return NewQTextFrameFromPointer(C.QTextDocument_RootFrame(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) SetDefaultCursorMoveStyle(style core.Qt__CursorMoveStyle) {
	defer qt.Recovering("QTextDocument::setDefaultCursorMoveStyle")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultCursorMoveStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QTextDocument) SetDefaultFont(font QFont_ITF) {
	defer qt.Recovering("QTextDocument::setDefaultFont")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QTextDocument) SetDefaultTextOption(option QTextOption_ITF) {
	defer qt.Recovering("QTextDocument::setDefaultTextOption")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultTextOption(ptr.Pointer(), PointerFromQTextOption(option))
	}
}

func (ptr *QTextDocument) SetDocumentLayout(layout QAbstractTextDocumentLayout_ITF) {
	defer qt.Recovering("QTextDocument::setDocumentLayout")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetDocumentLayout(ptr.Pointer(), PointerFromQAbstractTextDocumentLayout(layout))
	}
}

func (ptr *QTextDocument) SetHtml(html string) {
	defer qt.Recovering("QTextDocument::setHtml")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetHtml(ptr.Pointer(), C.CString(html))
	}
}

func (ptr *QTextDocument) SetIndentWidth(width float64) {
	defer qt.Recovering("QTextDocument::setIndentWidth")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetIndentWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextDocument) SetMetaInformation(info QTextDocument__MetaInformation, stri string) {
	defer qt.Recovering("QTextDocument::setMetaInformation")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetMetaInformation(ptr.Pointer(), C.int(info), C.CString(stri))
	}
}

func (ptr *QTextDocument) SetPlainText(text string) {
	defer qt.Recovering("QTextDocument::setPlainText")

	if ptr.Pointer() != nil {
		C.QTextDocument_SetPlainText(ptr.Pointer(), C.CString(text))
	}
}

func (ptr *QTextDocument) ToHtml(encoding string) string {
	defer qt.Recovering("QTextDocument::toHtml")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextDocument_ToHtml(ptr.Pointer(), C.CString(encoding)))
	}
	return ""
}

func (ptr *QTextDocument) ToPlainText() string {
	defer qt.Recovering("QTextDocument::toPlainText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextDocument_ToPlainText(ptr.Pointer()))
	}
	return ""
}

//export callbackQTextDocument_Undo2
func callbackQTextDocument_Undo2(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextDocument::undo")

	if signal := qt.GetSignal(C.GoString(ptrName), "undo2"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectUndo2(f func()) {
	defer qt.Recovering("connect QTextDocument::undo")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "undo2", f)
	}
}

func (ptr *QTextDocument) DisconnectUndo2() {
	defer qt.Recovering("disconnect QTextDocument::undo")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "undo2")
	}
}

func (ptr *QTextDocument) Undo2() {
	defer qt.Recovering("QTextDocument::undo")

	if ptr.Pointer() != nil {
		C.QTextDocument_Undo2(ptr.Pointer())
	}
}

func (ptr *QTextDocument) Undo(cursor QTextCursor_ITF) {
	defer qt.Recovering("QTextDocument::undo")

	if ptr.Pointer() != nil {
		C.QTextDocument_Undo(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

//export callbackQTextDocument_UndoAvailable
func callbackQTextDocument_UndoAvailable(ptr unsafe.Pointer, ptrName *C.char, available C.int) {
	defer qt.Recovering("callback QTextDocument::undoAvailable")

	if signal := qt.GetSignal(C.GoString(ptrName), "undoAvailable"); signal != nil {
		signal.(func(bool))(int(available) != 0)
	}

}

func (ptr *QTextDocument) ConnectUndoAvailable(f func(available bool)) {
	defer qt.Recovering("connect QTextDocument::undoAvailable")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectUndoAvailable(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "undoAvailable", f)
	}
}

func (ptr *QTextDocument) DisconnectUndoAvailable() {
	defer qt.Recovering("disconnect QTextDocument::undoAvailable")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectUndoAvailable(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "undoAvailable")
	}
}

func (ptr *QTextDocument) UndoAvailable(available bool) {
	defer qt.Recovering("QTextDocument::undoAvailable")

	if ptr.Pointer() != nil {
		C.QTextDocument_UndoAvailable(ptr.Pointer(), C.int(qt.GoBoolToInt(available)))
	}
}

//export callbackQTextDocument_UndoCommandAdded
func callbackQTextDocument_UndoCommandAdded(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextDocument::undoCommandAdded")

	if signal := qt.GetSignal(C.GoString(ptrName), "undoCommandAdded"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectUndoCommandAdded(f func()) {
	defer qt.Recovering("connect QTextDocument::undoCommandAdded")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectUndoCommandAdded(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "undoCommandAdded", f)
	}
}

func (ptr *QTextDocument) DisconnectUndoCommandAdded() {
	defer qt.Recovering("disconnect QTextDocument::undoCommandAdded")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectUndoCommandAdded(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "undoCommandAdded")
	}
}

func (ptr *QTextDocument) UndoCommandAdded() {
	defer qt.Recovering("QTextDocument::undoCommandAdded")

	if ptr.Pointer() != nil {
		C.QTextDocument_UndoCommandAdded(ptr.Pointer())
	}
}

func (ptr *QTextDocument) DestroyQTextDocument() {
	defer qt.Recovering("QTextDocument::~QTextDocument")

	if ptr.Pointer() != nil {
		C.QTextDocument_DestroyQTextDocument(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextDocument_TimerEvent
func callbackQTextDocument_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextDocument::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextDocumentFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextDocument) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QTextDocument::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QTextDocument) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QTextDocument::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QTextDocument) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextDocument::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextDocument_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextDocument) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextDocument::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextDocument_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextDocument_ChildEvent
func callbackQTextDocument_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextDocument::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextDocumentFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextDocument) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QTextDocument::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QTextDocument) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QTextDocument::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QTextDocument) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextDocument::childEvent")

	if ptr.Pointer() != nil {
		C.QTextDocument_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextDocument) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextDocument::childEvent")

	if ptr.Pointer() != nil {
		C.QTextDocument_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextDocument_ConnectNotify
func callbackQTextDocument_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextDocument::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextDocumentFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextDocument) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextDocument::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QTextDocument) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QTextDocument::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QTextDocument) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextDocument::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextDocument) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextDocument::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextDocument_CustomEvent
func callbackQTextDocument_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextDocument::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextDocumentFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextDocument) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QTextDocument::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QTextDocument) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QTextDocument::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QTextDocument) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QTextDocument::customEvent")

	if ptr.Pointer() != nil {
		C.QTextDocument_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextDocument) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QTextDocument::customEvent")

	if ptr.Pointer() != nil {
		C.QTextDocument_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextDocument_DeleteLater
func callbackQTextDocument_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextDocument::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QTextDocument::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QTextDocument) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QTextDocument::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QTextDocument) DeleteLater() {
	defer qt.Recovering("QTextDocument::deleteLater")

	if ptr.Pointer() != nil {
		C.QTextDocument_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextDocument_DisconnectNotify
func callbackQTextDocument_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextDocument::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextDocumentFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextDocument) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextDocument::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QTextDocument) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QTextDocument::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QTextDocument) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextDocument::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextDocument) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextDocument::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextDocument_Event
func callbackQTextDocument_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextDocument::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQTextDocumentFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QTextDocument) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QTextDocument::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QTextDocument) DisconnectEvent() {
	defer qt.Recovering("disconnect QTextDocument::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QTextDocument) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextDocument::event")

	if ptr.Pointer() != nil {
		return C.QTextDocument_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextDocument) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextDocument::event")

	if ptr.Pointer() != nil {
		return C.QTextDocument_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextDocument_EventFilter
func callbackQTextDocument_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextDocument::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQTextDocumentFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QTextDocument) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QTextDocument::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QTextDocument) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QTextDocument::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QTextDocument) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextDocument::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextDocument_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextDocument) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextDocument::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextDocument_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextDocument_MetaObject
func callbackQTextDocument_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QTextDocument::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextDocumentFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextDocument) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QTextDocument::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QTextDocument) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QTextDocument::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QTextDocument) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QTextDocument::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextDocument_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QTextDocument::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextDocument_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextDocumentFragment struct {
	ptr unsafe.Pointer
}

type QTextDocumentFragment_ITF interface {
	QTextDocumentFragment_PTR() *QTextDocumentFragment
}

func (p *QTextDocumentFragment) QTextDocumentFragment_PTR() *QTextDocumentFragment {
	return p
}

func (p *QTextDocumentFragment) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextDocumentFragment) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextDocumentFragment(ptr QTextDocumentFragment_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDocumentFragment_PTR().Pointer()
	}
	return nil
}

func NewQTextDocumentFragmentFromPointer(ptr unsafe.Pointer) *QTextDocumentFragment {
	var n = new(QTextDocumentFragment)
	n.SetPointer(ptr)
	return n
}

func newQTextDocumentFragmentFromPointer(ptr unsafe.Pointer) *QTextDocumentFragment {
	var n = NewQTextDocumentFragmentFromPointer(ptr)
	return n
}

func NewQTextDocumentFragment4(other QTextDocumentFragment_ITF) *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::QTextDocumentFragment")

	return newQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment4(PointerFromQTextDocumentFragment(other)))
}

func QTextDocumentFragment_FromHtml(text string) *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::fromHtml")

	return NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml(C.CString(text)))
}

func (ptr *QTextDocumentFragment) FromHtml(text string) *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::fromHtml")

	return NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml(C.CString(text)))
}

func QTextDocumentFragment_FromHtml2(text string, resourceProvider QTextDocument_ITF) *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::fromHtml")

	return NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml2(C.CString(text), PointerFromQTextDocument(resourceProvider)))
}

func (ptr *QTextDocumentFragment) FromHtml2(text string, resourceProvider QTextDocument_ITF) *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::fromHtml")

	return NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml2(C.CString(text), PointerFromQTextDocument(resourceProvider)))
}

func NewQTextDocumentFragment() *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::QTextDocumentFragment")

	return newQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment())
}

func NewQTextDocumentFragment3(cursor QTextCursor_ITF) *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::QTextDocumentFragment")

	return newQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment3(PointerFromQTextCursor(cursor)))
}

func NewQTextDocumentFragment2(document QTextDocument_ITF) *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::QTextDocumentFragment")

	return newQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment2(PointerFromQTextDocument(document)))
}

func QTextDocumentFragment_FromPlainText(plainText string) *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::fromPlainText")

	return NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromPlainText(C.CString(plainText)))
}

func (ptr *QTextDocumentFragment) FromPlainText(plainText string) *QTextDocumentFragment {
	defer qt.Recovering("QTextDocumentFragment::fromPlainText")

	return NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromPlainText(C.CString(plainText)))
}

func (ptr *QTextDocumentFragment) IsEmpty() bool {
	defer qt.Recovering("QTextDocumentFragment::isEmpty")

	if ptr.Pointer() != nil {
		return C.QTextDocumentFragment_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocumentFragment) ToHtml(encoding string) string {
	defer qt.Recovering("QTextDocumentFragment::toHtml")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextDocumentFragment_ToHtml(ptr.Pointer(), C.CString(encoding)))
	}
	return ""
}

func (ptr *QTextDocumentFragment) ToPlainText() string {
	defer qt.Recovering("QTextDocumentFragment::toPlainText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextDocumentFragment_ToPlainText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocumentFragment) DestroyQTextDocumentFragment() {
	defer qt.Recovering("QTextDocumentFragment::~QTextDocumentFragment")

	if ptr.Pointer() != nil {
		C.QTextDocumentFragment_DestroyQTextDocumentFragment(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTextDocumentWriter struct {
	ptr unsafe.Pointer
}

type QTextDocumentWriter_ITF interface {
	QTextDocumentWriter_PTR() *QTextDocumentWriter
}

func (p *QTextDocumentWriter) QTextDocumentWriter_PTR() *QTextDocumentWriter {
	return p
}

func (p *QTextDocumentWriter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextDocumentWriter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextDocumentWriter(ptr QTextDocumentWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDocumentWriter_PTR().Pointer()
	}
	return nil
}

func NewQTextDocumentWriterFromPointer(ptr unsafe.Pointer) *QTextDocumentWriter {
	var n = new(QTextDocumentWriter)
	n.SetPointer(ptr)
	return n
}

func newQTextDocumentWriterFromPointer(ptr unsafe.Pointer) *QTextDocumentWriter {
	var n = NewQTextDocumentWriterFromPointer(ptr)
	return n
}

func NewQTextDocumentWriter() *QTextDocumentWriter {
	defer qt.Recovering("QTextDocumentWriter::QTextDocumentWriter")

	return newQTextDocumentWriterFromPointer(C.QTextDocumentWriter_NewQTextDocumentWriter())
}

func NewQTextDocumentWriter2(device core.QIODevice_ITF, format string) *QTextDocumentWriter {
	defer qt.Recovering("QTextDocumentWriter::QTextDocumentWriter")

	return newQTextDocumentWriterFromPointer(C.QTextDocumentWriter_NewQTextDocumentWriter2(core.PointerFromQIODevice(device), C.CString(format)))
}

func NewQTextDocumentWriter3(fileName string, format string) *QTextDocumentWriter {
	defer qt.Recovering("QTextDocumentWriter::QTextDocumentWriter")

	return newQTextDocumentWriterFromPointer(C.QTextDocumentWriter_NewQTextDocumentWriter3(C.CString(fileName), C.CString(format)))
}

func (ptr *QTextDocumentWriter) Codec() *core.QTextCodec {
	defer qt.Recovering("QTextDocumentWriter::codec")

	if ptr.Pointer() != nil {
		return core.NewQTextCodecFromPointer(C.QTextDocumentWriter_Codec(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocumentWriter) Device() *core.QIODevice {
	defer qt.Recovering("QTextDocumentWriter::device")

	if ptr.Pointer() != nil {
		return core.NewQIODeviceFromPointer(C.QTextDocumentWriter_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocumentWriter) FileName() string {
	defer qt.Recovering("QTextDocumentWriter::fileName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextDocumentWriter_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocumentWriter) Format() string {
	defer qt.Recovering("QTextDocumentWriter::format")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextDocumentWriter_Format(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocumentWriter) SetCodec(codec core.QTextCodec_ITF) {
	defer qt.Recovering("QTextDocumentWriter::setCodec")

	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetCodec(ptr.Pointer(), core.PointerFromQTextCodec(codec))
	}
}

func (ptr *QTextDocumentWriter) SetDevice(device core.QIODevice_ITF) {
	defer qt.Recovering("QTextDocumentWriter::setDevice")

	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QTextDocumentWriter) SetFileName(fileName string) {
	defer qt.Recovering("QTextDocumentWriter::setFileName")

	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetFileName(ptr.Pointer(), C.CString(fileName))
	}
}

func (ptr *QTextDocumentWriter) SetFormat(format string) {
	defer qt.Recovering("QTextDocumentWriter::setFormat")

	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetFormat(ptr.Pointer(), C.CString(format))
	}
}

func (ptr *QTextDocumentWriter) Write(document QTextDocument_ITF) bool {
	defer qt.Recovering("QTextDocumentWriter::write")

	if ptr.Pointer() != nil {
		return C.QTextDocumentWriter_Write(ptr.Pointer(), PointerFromQTextDocument(document)) != 0
	}
	return false
}

func (ptr *QTextDocumentWriter) Write2(fragment QTextDocumentFragment_ITF) bool {
	defer qt.Recovering("QTextDocumentWriter::write")

	if ptr.Pointer() != nil {
		return C.QTextDocumentWriter_Write2(ptr.Pointer(), PointerFromQTextDocumentFragment(fragment)) != 0
	}
	return false
}

func (ptr *QTextDocumentWriter) DestroyQTextDocumentWriter() {
	defer qt.Recovering("QTextDocumentWriter::~QTextDocumentWriter")

	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_DestroyQTextDocumentWriter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QTextFormat::FormatType
type QTextFormat__FormatType int64

const (
	QTextFormat__InvalidFormat = QTextFormat__FormatType(-1)
	QTextFormat__BlockFormat   = QTextFormat__FormatType(1)
	QTextFormat__CharFormat    = QTextFormat__FormatType(2)
	QTextFormat__ListFormat    = QTextFormat__FormatType(3)
	QTextFormat__TableFormat   = QTextFormat__FormatType(4)
	QTextFormat__FrameFormat   = QTextFormat__FormatType(5)
	QTextFormat__UserFormat    = QTextFormat__FormatType(100)
)

//QTextFormat::ObjectTypes
type QTextFormat__ObjectTypes int64

const (
	QTextFormat__NoObject        = QTextFormat__ObjectTypes(0)
	QTextFormat__ImageObject     = QTextFormat__ObjectTypes(1)
	QTextFormat__TableObject     = QTextFormat__ObjectTypes(2)
	QTextFormat__TableCellObject = QTextFormat__ObjectTypes(3)
	QTextFormat__UserObject      = QTextFormat__ObjectTypes(0x1000)
)

//QTextFormat::PageBreakFlag
type QTextFormat__PageBreakFlag int64

const (
	QTextFormat__PageBreak_Auto         = QTextFormat__PageBreakFlag(0)
	QTextFormat__PageBreak_AlwaysBefore = QTextFormat__PageBreakFlag(0x001)
	QTextFormat__PageBreak_AlwaysAfter  = QTextFormat__PageBreakFlag(0x010)
)

//QTextFormat::Property
type QTextFormat__Property int64

const (
	QTextFormat__ObjectIndex                       = QTextFormat__Property(0x0)
	QTextFormat__CssFloat                          = QTextFormat__Property(0x0800)
	QTextFormat__LayoutDirection                   = QTextFormat__Property(0x0801)
	QTextFormat__OutlinePen                        = QTextFormat__Property(0x810)
	QTextFormat__BackgroundBrush                   = QTextFormat__Property(0x820)
	QTextFormat__ForegroundBrush                   = QTextFormat__Property(0x821)
	QTextFormat__BackgroundImageUrl                = QTextFormat__Property(0x823)
	QTextFormat__BlockAlignment                    = QTextFormat__Property(0x1010)
	QTextFormat__BlockTopMargin                    = QTextFormat__Property(0x1030)
	QTextFormat__BlockBottomMargin                 = QTextFormat__Property(0x1031)
	QTextFormat__BlockLeftMargin                   = QTextFormat__Property(0x1032)
	QTextFormat__BlockRightMargin                  = QTextFormat__Property(0x1033)
	QTextFormat__TextIndent                        = QTextFormat__Property(0x1034)
	QTextFormat__TabPositions                      = QTextFormat__Property(0x1035)
	QTextFormat__BlockIndent                       = QTextFormat__Property(0x1040)
	QTextFormat__LineHeight                        = QTextFormat__Property(0x1048)
	QTextFormat__LineHeightType                    = QTextFormat__Property(0x1049)
	QTextFormat__BlockNonBreakableLines            = QTextFormat__Property(0x1050)
	QTextFormat__BlockTrailingHorizontalRulerWidth = QTextFormat__Property(0x1060)
	QTextFormat__FirstFontProperty                 = QTextFormat__Property(0x1FE0)
	QTextFormat__FontCapitalization                = QTextFormat__Property(QTextFormat__FirstFontProperty)
	QTextFormat__FontLetterSpacingType             = QTextFormat__Property(0x2033)
	QTextFormat__FontLetterSpacing                 = QTextFormat__Property(0x1FE1)
	QTextFormat__FontWordSpacing                   = QTextFormat__Property(0x1FE2)
	QTextFormat__FontStretch                       = QTextFormat__Property(0x2034)
	QTextFormat__FontStyleHint                     = QTextFormat__Property(0x1FE3)
	QTextFormat__FontStyleStrategy                 = QTextFormat__Property(0x1FE4)
	QTextFormat__FontKerning                       = QTextFormat__Property(0x1FE5)
	QTextFormat__FontHintingPreference             = QTextFormat__Property(0x1FE6)
	QTextFormat__FontFamily                        = QTextFormat__Property(0x2000)
	QTextFormat__FontPointSize                     = QTextFormat__Property(0x2001)
	QTextFormat__FontSizeAdjustment                = QTextFormat__Property(0x2002)
	QTextFormat__FontSizeIncrement                 = QTextFormat__Property(QTextFormat__FontSizeAdjustment)
	QTextFormat__FontWeight                        = QTextFormat__Property(0x2003)
	QTextFormat__FontItalic                        = QTextFormat__Property(0x2004)
	QTextFormat__FontUnderline                     = QTextFormat__Property(0x2005)
	QTextFormat__FontOverline                      = QTextFormat__Property(0x2006)
	QTextFormat__FontStrikeOut                     = QTextFormat__Property(0x2007)
	QTextFormat__FontFixedPitch                    = QTextFormat__Property(0x2008)
	QTextFormat__FontPixelSize                     = QTextFormat__Property(0x2009)
	QTextFormat__LastFontProperty                  = QTextFormat__Property(QTextFormat__FontPixelSize)
	QTextFormat__TextUnderlineColor                = QTextFormat__Property(0x2010)
	QTextFormat__TextVerticalAlignment             = QTextFormat__Property(0x2021)
	QTextFormat__TextOutline                       = QTextFormat__Property(0x2022)
	QTextFormat__TextUnderlineStyle                = QTextFormat__Property(0x2023)
	QTextFormat__TextToolTip                       = QTextFormat__Property(0x2024)
	QTextFormat__IsAnchor                          = QTextFormat__Property(0x2030)
	QTextFormat__AnchorHref                        = QTextFormat__Property(0x2031)
	QTextFormat__AnchorName                        = QTextFormat__Property(0x2032)
	QTextFormat__ObjectType                        = QTextFormat__Property(0x2f00)
	QTextFormat__ListStyle                         = QTextFormat__Property(0x3000)
	QTextFormat__ListIndent                        = QTextFormat__Property(0x3001)
	QTextFormat__ListNumberPrefix                  = QTextFormat__Property(0x3002)
	QTextFormat__ListNumberSuffix                  = QTextFormat__Property(0x3003)
	QTextFormat__FrameBorder                       = QTextFormat__Property(0x4000)
	QTextFormat__FrameMargin                       = QTextFormat__Property(0x4001)
	QTextFormat__FramePadding                      = QTextFormat__Property(0x4002)
	QTextFormat__FrameWidth                        = QTextFormat__Property(0x4003)
	QTextFormat__FrameHeight                       = QTextFormat__Property(0x4004)
	QTextFormat__FrameTopMargin                    = QTextFormat__Property(0x4005)
	QTextFormat__FrameBottomMargin                 = QTextFormat__Property(0x4006)
	QTextFormat__FrameLeftMargin                   = QTextFormat__Property(0x4007)
	QTextFormat__FrameRightMargin                  = QTextFormat__Property(0x4008)
	QTextFormat__FrameBorderBrush                  = QTextFormat__Property(0x4009)
	QTextFormat__FrameBorderStyle                  = QTextFormat__Property(0x4010)
	QTextFormat__TableColumns                      = QTextFormat__Property(0x4100)
	QTextFormat__TableColumnWidthConstraints       = QTextFormat__Property(0x4101)
	QTextFormat__TableCellSpacing                  = QTextFormat__Property(0x4102)
	QTextFormat__TableCellPadding                  = QTextFormat__Property(0x4103)
	QTextFormat__TableHeaderRowCount               = QTextFormat__Property(0x4104)
	QTextFormat__TableCellRowSpan                  = QTextFormat__Property(0x4810)
	QTextFormat__TableCellColumnSpan               = QTextFormat__Property(0x4811)
	QTextFormat__TableCellTopPadding               = QTextFormat__Property(0x4812)
	QTextFormat__TableCellBottomPadding            = QTextFormat__Property(0x4813)
	QTextFormat__TableCellLeftPadding              = QTextFormat__Property(0x4814)
	QTextFormat__TableCellRightPadding             = QTextFormat__Property(0x4815)
	QTextFormat__ImageName                         = QTextFormat__Property(0x5000)
	QTextFormat__ImageWidth                        = QTextFormat__Property(0x5010)
	QTextFormat__ImageHeight                       = QTextFormat__Property(0x5011)
	QTextFormat__FullWidthSelection                = QTextFormat__Property(0x06000)
	QTextFormat__PageBreakPolicy                   = QTextFormat__Property(0x7000)
	QTextFormat__UserProperty                      = QTextFormat__Property(0x100000)
)

type QTextFormat struct {
	ptr unsafe.Pointer
}

type QTextFormat_ITF interface {
	QTextFormat_PTR() *QTextFormat
}

func (p *QTextFormat) QTextFormat_PTR() *QTextFormat {
	return p
}

func (p *QTextFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextFormat(ptr QTextFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextFormatFromPointer(ptr unsafe.Pointer) *QTextFormat {
	var n = new(QTextFormat)
	n.SetPointer(ptr)
	return n
}

func newQTextFormatFromPointer(ptr unsafe.Pointer) *QTextFormat {
	var n = NewQTextFormatFromPointer(ptr)
	return n
}

func NewQTextFormat3(other QTextFormat_ITF) *QTextFormat {
	defer qt.Recovering("QTextFormat::QTextFormat")

	return newQTextFormatFromPointer(C.QTextFormat_NewQTextFormat3(PointerFromQTextFormat(other)))
}

func (ptr *QTextFormat) SetObjectIndex(index int) {
	defer qt.Recovering("QTextFormat::setObjectIndex")

	if ptr.Pointer() != nil {
		C.QTextFormat_SetObjectIndex(ptr.Pointer(), C.int(index))
	}
}

func NewQTextFormat() *QTextFormat {
	defer qt.Recovering("QTextFormat::QTextFormat")

	return newQTextFormatFromPointer(C.QTextFormat_NewQTextFormat())
}

func NewQTextFormat2(ty int) *QTextFormat {
	defer qt.Recovering("QTextFormat::QTextFormat")

	return newQTextFormatFromPointer(C.QTextFormat_NewQTextFormat2(C.int(ty)))
}

func (ptr *QTextFormat) Background() *QBrush {
	defer qt.Recovering("QTextFormat::background")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QTextFormat_Background(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextFormat) BoolProperty(propertyId int) bool {
	defer qt.Recovering("QTextFormat::boolProperty")

	if ptr.Pointer() != nil {
		return C.QTextFormat_BoolProperty(ptr.Pointer(), C.int(propertyId)) != 0
	}
	return false
}

func (ptr *QTextFormat) BrushProperty(propertyId int) *QBrush {
	defer qt.Recovering("QTextFormat::brushProperty")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QTextFormat_BrushProperty(ptr.Pointer(), C.int(propertyId)))
	}
	return nil
}

func (ptr *QTextFormat) ClearBackground() {
	defer qt.Recovering("QTextFormat::clearBackground")

	if ptr.Pointer() != nil {
		C.QTextFormat_ClearBackground(ptr.Pointer())
	}
}

func (ptr *QTextFormat) ClearForeground() {
	defer qt.Recovering("QTextFormat::clearForeground")

	if ptr.Pointer() != nil {
		C.QTextFormat_ClearForeground(ptr.Pointer())
	}
}

func (ptr *QTextFormat) ClearProperty(propertyId int) {
	defer qt.Recovering("QTextFormat::clearProperty")

	if ptr.Pointer() != nil {
		C.QTextFormat_ClearProperty(ptr.Pointer(), C.int(propertyId))
	}
}

func (ptr *QTextFormat) ColorProperty(propertyId int) *QColor {
	defer qt.Recovering("QTextFormat::colorProperty")

	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QTextFormat_ColorProperty(ptr.Pointer(), C.int(propertyId)))
	}
	return nil
}

func (ptr *QTextFormat) DoubleProperty(propertyId int) float64 {
	defer qt.Recovering("QTextFormat::doubleProperty")

	if ptr.Pointer() != nil {
		return float64(C.QTextFormat_DoubleProperty(ptr.Pointer(), C.int(propertyId)))
	}
	return 0
}

func (ptr *QTextFormat) Foreground() *QBrush {
	defer qt.Recovering("QTextFormat::foreground")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QTextFormat_Foreground(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextFormat) HasProperty(propertyId int) bool {
	defer qt.Recovering("QTextFormat::hasProperty")

	if ptr.Pointer() != nil {
		return C.QTextFormat_HasProperty(ptr.Pointer(), C.int(propertyId)) != 0
	}
	return false
}

func (ptr *QTextFormat) IntProperty(propertyId int) int {
	defer qt.Recovering("QTextFormat::intProperty")

	if ptr.Pointer() != nil {
		return int(C.QTextFormat_IntProperty(ptr.Pointer(), C.int(propertyId)))
	}
	return 0
}

func (ptr *QTextFormat) IsBlockFormat() bool {
	defer qt.Recovering("QTextFormat::isBlockFormat")

	if ptr.Pointer() != nil {
		return C.QTextFormat_IsBlockFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsCharFormat() bool {
	defer qt.Recovering("QTextFormat::isCharFormat")

	if ptr.Pointer() != nil {
		return C.QTextFormat_IsCharFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsEmpty() bool {
	defer qt.Recovering("QTextFormat::isEmpty")

	if ptr.Pointer() != nil {
		return C.QTextFormat_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsFrameFormat() bool {
	defer qt.Recovering("QTextFormat::isFrameFormat")

	if ptr.Pointer() != nil {
		return C.QTextFormat_IsFrameFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsImageFormat() bool {
	defer qt.Recovering("QTextFormat::isImageFormat")

	if ptr.Pointer() != nil {
		return C.QTextFormat_IsImageFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsListFormat() bool {
	defer qt.Recovering("QTextFormat::isListFormat")

	if ptr.Pointer() != nil {
		return C.QTextFormat_IsListFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsTableCellFormat() bool {
	defer qt.Recovering("QTextFormat::isTableCellFormat")

	if ptr.Pointer() != nil {
		return C.QTextFormat_IsTableCellFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsTableFormat() bool {
	defer qt.Recovering("QTextFormat::isTableFormat")

	if ptr.Pointer() != nil {
		return C.QTextFormat_IsTableFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsValid() bool {
	defer qt.Recovering("QTextFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QTextFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) LayoutDirection() core.Qt__LayoutDirection {
	defer qt.Recovering("QTextFormat::layoutDirection")

	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextFormat_LayoutDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFormat) Merge(other QTextFormat_ITF) {
	defer qt.Recovering("QTextFormat::merge")

	if ptr.Pointer() != nil {
		C.QTextFormat_Merge(ptr.Pointer(), PointerFromQTextFormat(other))
	}
}

func (ptr *QTextFormat) ObjectIndex() int {
	defer qt.Recovering("QTextFormat::objectIndex")

	if ptr.Pointer() != nil {
		return int(C.QTextFormat_ObjectIndex(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFormat) ObjectType() int {
	defer qt.Recovering("QTextFormat::objectType")

	if ptr.Pointer() != nil {
		return int(C.QTextFormat_ObjectType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFormat) PenProperty(propertyId int) *QPen {
	defer qt.Recovering("QTextFormat::penProperty")

	if ptr.Pointer() != nil {
		return NewQPenFromPointer(C.QTextFormat_PenProperty(ptr.Pointer(), C.int(propertyId)))
	}
	return nil
}

func (ptr *QTextFormat) Property(propertyId int) *core.QVariant {
	defer qt.Recovering("QTextFormat::property")

	if ptr.Pointer() != nil {
		return core.NewQVariantFromPointer(C.QTextFormat_Property(ptr.Pointer(), C.int(propertyId)))
	}
	return nil
}

func (ptr *QTextFormat) PropertyCount() int {
	defer qt.Recovering("QTextFormat::propertyCount")

	if ptr.Pointer() != nil {
		return int(C.QTextFormat_PropertyCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFormat) SetBackground(brush QBrush_ITF) {
	defer qt.Recovering("QTextFormat::setBackground")

	if ptr.Pointer() != nil {
		C.QTextFormat_SetBackground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QTextFormat) SetForeground(brush QBrush_ITF) {
	defer qt.Recovering("QTextFormat::setForeground")

	if ptr.Pointer() != nil {
		C.QTextFormat_SetForeground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QTextFormat) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	defer qt.Recovering("QTextFormat::setLayoutDirection")

	if ptr.Pointer() != nil {
		C.QTextFormat_SetLayoutDirection(ptr.Pointer(), C.int(direction))
	}
}

func (ptr *QTextFormat) SetObjectType(ty int) {
	defer qt.Recovering("QTextFormat::setObjectType")

	if ptr.Pointer() != nil {
		C.QTextFormat_SetObjectType(ptr.Pointer(), C.int(ty))
	}
}

func (ptr *QTextFormat) SetProperty(propertyId int, value core.QVariant_ITF) {
	defer qt.Recovering("QTextFormat::setProperty")

	if ptr.Pointer() != nil {
		C.QTextFormat_SetProperty(ptr.Pointer(), C.int(propertyId), core.PointerFromQVariant(value))
	}
}

func (ptr *QTextFormat) StringProperty(propertyId int) string {
	defer qt.Recovering("QTextFormat::stringProperty")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextFormat_StringProperty(ptr.Pointer(), C.int(propertyId)))
	}
	return ""
}

func (ptr *QTextFormat) Swap(other QTextFormat_ITF) {
	defer qt.Recovering("QTextFormat::swap")

	if ptr.Pointer() != nil {
		C.QTextFormat_Swap(ptr.Pointer(), PointerFromQTextFormat(other))
	}
}

func (ptr *QTextFormat) Type() int {
	defer qt.Recovering("QTextFormat::type")

	if ptr.Pointer() != nil {
		return int(C.QTextFormat_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFormat) DestroyQTextFormat() {
	defer qt.Recovering("QTextFormat::~QTextFormat")

	if ptr.Pointer() != nil {
		C.QTextFormat_DestroyQTextFormat(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTextFragment struct {
	ptr unsafe.Pointer
}

type QTextFragment_ITF interface {
	QTextFragment_PTR() *QTextFragment
}

func (p *QTextFragment) QTextFragment_PTR() *QTextFragment {
	return p
}

func (p *QTextFragment) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextFragment) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextFragment(ptr QTextFragment_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFragment_PTR().Pointer()
	}
	return nil
}

func NewQTextFragmentFromPointer(ptr unsafe.Pointer) *QTextFragment {
	var n = new(QTextFragment)
	n.SetPointer(ptr)
	return n
}

func newQTextFragmentFromPointer(ptr unsafe.Pointer) *QTextFragment {
	var n = NewQTextFragmentFromPointer(ptr)
	return n
}

func NewQTextFragment() *QTextFragment {
	defer qt.Recovering("QTextFragment::QTextFragment")

	return newQTextFragmentFromPointer(C.QTextFragment_NewQTextFragment())
}

func NewQTextFragment3(other QTextFragment_ITF) *QTextFragment {
	defer qt.Recovering("QTextFragment::QTextFragment")

	return newQTextFragmentFromPointer(C.QTextFragment_NewQTextFragment3(PointerFromQTextFragment(other)))
}

func (ptr *QTextFragment) CharFormatIndex() int {
	defer qt.Recovering("QTextFragment::charFormatIndex")

	if ptr.Pointer() != nil {
		return int(C.QTextFragment_CharFormatIndex(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFragment) Contains(position int) bool {
	defer qt.Recovering("QTextFragment::contains")

	if ptr.Pointer() != nil {
		return C.QTextFragment_Contains(ptr.Pointer(), C.int(position)) != 0
	}
	return false
}

func (ptr *QTextFragment) IsValid() bool {
	defer qt.Recovering("QTextFragment::isValid")

	if ptr.Pointer() != nil {
		return C.QTextFragment_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFragment) Length() int {
	defer qt.Recovering("QTextFragment::length")

	if ptr.Pointer() != nil {
		return int(C.QTextFragment_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFragment) Position() int {
	defer qt.Recovering("QTextFragment::position")

	if ptr.Pointer() != nil {
		return int(C.QTextFragment_Position(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFragment) Text() string {
	defer qt.Recovering("QTextFragment::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextFragment_Text(ptr.Pointer()))
	}
	return ""
}

type QTextFrame struct {
	QTextObject
}

type QTextFrame_ITF interface {
	QTextObject_ITF
	QTextFrame_PTR() *QTextFrame
}

func (p *QTextFrame) QTextFrame_PTR() *QTextFrame {
	return p
}

func (p *QTextFrame) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextObject_PTR().Pointer()
	}
	return nil
}

func (p *QTextFrame) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextFrame(ptr QTextFrame_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFrame_PTR().Pointer()
	}
	return nil
}

func NewQTextFrameFromPointer(ptr unsafe.Pointer) *QTextFrame {
	var n = new(QTextFrame)
	n.SetPointer(ptr)
	return n
}

func newQTextFrameFromPointer(ptr unsafe.Pointer) *QTextFrame {
	var n = NewQTextFrameFromPointer(ptr)
	for len(n.ObjectName()) < len("QTextFrame_") {
		n.SetObjectName("QTextFrame_" + qt.Identifier())
	}
	return n
}

func NewQTextFrame(document QTextDocument_ITF) *QTextFrame {
	defer qt.Recovering("QTextFrame::QTextFrame")

	return newQTextFrameFromPointer(C.QTextFrame_NewQTextFrame(PointerFromQTextDocument(document)))
}

func (ptr *QTextFrame) FirstCursorPosition() *QTextCursor {
	defer qt.Recovering("QTextFrame::firstCursorPosition")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextFrame_FirstCursorPosition(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextFrame) FirstPosition() int {
	defer qt.Recovering("QTextFrame::firstPosition")

	if ptr.Pointer() != nil {
		return int(C.QTextFrame_FirstPosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrame) LastCursorPosition() *QTextCursor {
	defer qt.Recovering("QTextFrame::lastCursorPosition")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextFrame_LastCursorPosition(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextFrame) LastPosition() int {
	defer qt.Recovering("QTextFrame::lastPosition")

	if ptr.Pointer() != nil {
		return int(C.QTextFrame_LastPosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrame) ParentFrame() *QTextFrame {
	defer qt.Recovering("QTextFrame::parentFrame")

	if ptr.Pointer() != nil {
		return NewQTextFrameFromPointer(C.QTextFrame_ParentFrame(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextFrame) SetFrameFormat(format QTextFrameFormat_ITF) {
	defer qt.Recovering("QTextFrame::setFrameFormat")

	if ptr.Pointer() != nil {
		C.QTextFrame_SetFrameFormat(ptr.Pointer(), PointerFromQTextFrameFormat(format))
	}
}

func (ptr *QTextFrame) DestroyQTextFrame() {
	defer qt.Recovering("QTextFrame::~QTextFrame")

	if ptr.Pointer() != nil {
		C.QTextFrame_DestroyQTextFrame(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextFrame_TimerEvent
func callbackQTextFrame_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextFrame::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextFrameFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextFrame) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QTextFrame::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QTextFrame) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QTextFrame::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QTextFrame) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextFrame::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextFrame_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextFrame) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextFrame::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextFrame_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextFrame_ChildEvent
func callbackQTextFrame_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextFrame::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextFrameFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextFrame) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QTextFrame::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QTextFrame) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QTextFrame::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QTextFrame) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextFrame::childEvent")

	if ptr.Pointer() != nil {
		C.QTextFrame_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextFrame) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextFrame::childEvent")

	if ptr.Pointer() != nil {
		C.QTextFrame_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextFrame_ConnectNotify
func callbackQTextFrame_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextFrame::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextFrameFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextFrame) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextFrame::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QTextFrame) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QTextFrame::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QTextFrame) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextFrame::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextFrame_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextFrame) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextFrame::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextFrame_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextFrame_CustomEvent
func callbackQTextFrame_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextFrame::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextFrameFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextFrame) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QTextFrame::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QTextFrame) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QTextFrame::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QTextFrame) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QTextFrame::customEvent")

	if ptr.Pointer() != nil {
		C.QTextFrame_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextFrame) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QTextFrame::customEvent")

	if ptr.Pointer() != nil {
		C.QTextFrame_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextFrame_DeleteLater
func callbackQTextFrame_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextFrame::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextFrame) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QTextFrame::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QTextFrame) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QTextFrame::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QTextFrame) DeleteLater() {
	defer qt.Recovering("QTextFrame::deleteLater")

	if ptr.Pointer() != nil {
		C.QTextFrame_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextFrame_DisconnectNotify
func callbackQTextFrame_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextFrame::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextFrameFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextFrame) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextFrame::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QTextFrame) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QTextFrame::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QTextFrame) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextFrame::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextFrame_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextFrame) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextFrame::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextFrame_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextFrame_Event
func callbackQTextFrame_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextFrame::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQTextFrameFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QTextFrame) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QTextFrame::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QTextFrame) DisconnectEvent() {
	defer qt.Recovering("disconnect QTextFrame::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QTextFrame) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextFrame::event")

	if ptr.Pointer() != nil {
		return C.QTextFrame_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextFrame) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextFrame::event")

	if ptr.Pointer() != nil {
		return C.QTextFrame_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextFrame_EventFilter
func callbackQTextFrame_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextFrame::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQTextFrameFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QTextFrame) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QTextFrame::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QTextFrame) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QTextFrame::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QTextFrame) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextFrame::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextFrame_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextFrame) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextFrame::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextFrame_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextFrame_MetaObject
func callbackQTextFrame_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QTextFrame::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextFrameFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextFrame) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QTextFrame::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QTextFrame) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QTextFrame::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QTextFrame) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QTextFrame::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextFrame_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextFrame) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QTextFrame::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextFrame_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QTextFrameFormat::BorderStyle
type QTextFrameFormat__BorderStyle int64

var (
	QTextFrameFormat__BorderStyle_None       = QTextFrameFormat__BorderStyle(0)
	QTextFrameFormat__BorderStyle_Dotted     = QTextFrameFormat__BorderStyle(1)
	QTextFrameFormat__BorderStyle_Dashed     = QTextFrameFormat__BorderStyle(2)
	QTextFrameFormat__BorderStyle_Solid      = QTextFrameFormat__BorderStyle(3)
	QTextFrameFormat__BorderStyle_Double     = QTextFrameFormat__BorderStyle(4)
	QTextFrameFormat__BorderStyle_DotDash    = QTextFrameFormat__BorderStyle(5)
	QTextFrameFormat__BorderStyle_DotDotDash = QTextFrameFormat__BorderStyle(6)
	QTextFrameFormat__BorderStyle_Groove     = QTextFrameFormat__BorderStyle(7)
	QTextFrameFormat__BorderStyle_Ridge      = QTextFrameFormat__BorderStyle(8)
	QTextFrameFormat__BorderStyle_Inset      = QTextFrameFormat__BorderStyle(9)
	QTextFrameFormat__BorderStyle_Outset     = QTextFrameFormat__BorderStyle(10)
)

//QTextFrameFormat::Position
type QTextFrameFormat__Position int64

const (
	QTextFrameFormat__InFlow     = QTextFrameFormat__Position(0)
	QTextFrameFormat__FloatLeft  = QTextFrameFormat__Position(1)
	QTextFrameFormat__FloatRight = QTextFrameFormat__Position(2)
)

type QTextFrameFormat struct {
	QTextFormat
}

type QTextFrameFormat_ITF interface {
	QTextFormat_ITF
	QTextFrameFormat_PTR() *QTextFrameFormat
}

func (p *QTextFrameFormat) QTextFrameFormat_PTR() *QTextFrameFormat {
	return p
}

func (p *QTextFrameFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextFrameFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextFrameFormat(ptr QTextFrameFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFrameFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextFrameFormatFromPointer(ptr unsafe.Pointer) *QTextFrameFormat {
	var n = new(QTextFrameFormat)
	n.SetPointer(ptr)
	return n
}

func newQTextFrameFormatFromPointer(ptr unsafe.Pointer) *QTextFrameFormat {
	var n = NewQTextFrameFormatFromPointer(ptr)
	return n
}

func NewQTextFrameFormat() *QTextFrameFormat {
	defer qt.Recovering("QTextFrameFormat::QTextFrameFormat")

	return newQTextFrameFormatFromPointer(C.QTextFrameFormat_NewQTextFrameFormat())
}

func (ptr *QTextFrameFormat) BottomMargin() float64 {
	defer qt.Recovering("QTextFrameFormat::bottomMargin")

	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_BottomMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) LeftMargin() float64 {
	defer qt.Recovering("QTextFrameFormat::leftMargin")

	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_LeftMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) RightMargin() float64 {
	defer qt.Recovering("QTextFrameFormat::rightMargin")

	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_RightMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) SetMargin(margin float64) {
	defer qt.Recovering("QTextFrameFormat::setMargin")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) TopMargin() float64 {
	defer qt.Recovering("QTextFrameFormat::topMargin")

	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_TopMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Border() float64 {
	defer qt.Recovering("QTextFrameFormat::border")

	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_Border(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) BorderBrush() *QBrush {
	defer qt.Recovering("QTextFrameFormat::borderBrush")

	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QTextFrameFormat_BorderBrush(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextFrameFormat) BorderStyle() QTextFrameFormat__BorderStyle {
	defer qt.Recovering("QTextFrameFormat::borderStyle")

	if ptr.Pointer() != nil {
		return QTextFrameFormat__BorderStyle(C.QTextFrameFormat_BorderStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) IsValid() bool {
	defer qt.Recovering("QTextFrameFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QTextFrameFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFrameFormat) Margin() float64 {
	defer qt.Recovering("QTextFrameFormat::margin")

	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_Margin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Padding() float64 {
	defer qt.Recovering("QTextFrameFormat::padding")

	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_Padding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) PageBreakPolicy() QTextFormat__PageBreakFlag {
	defer qt.Recovering("QTextFrameFormat::pageBreakPolicy")

	if ptr.Pointer() != nil {
		return QTextFormat__PageBreakFlag(C.QTextFrameFormat_PageBreakPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Position() QTextFrameFormat__Position {
	defer qt.Recovering("QTextFrameFormat::position")

	if ptr.Pointer() != nil {
		return QTextFrameFormat__Position(C.QTextFrameFormat_Position(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) SetBorder(width float64) {
	defer qt.Recovering("QTextFrameFormat::setBorder")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBorder(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextFrameFormat) SetBorderBrush(brush QBrush_ITF) {
	defer qt.Recovering("QTextFrameFormat::setBorderBrush")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBorderBrush(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QTextFrameFormat) SetBorderStyle(style QTextFrameFormat__BorderStyle) {
	defer qt.Recovering("QTextFrameFormat::setBorderStyle")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBorderStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QTextFrameFormat) SetBottomMargin(margin float64) {
	defer qt.Recovering("QTextFrameFormat::setBottomMargin")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBottomMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetHeight(height QTextLength_ITF) {
	defer qt.Recovering("QTextFrameFormat::setHeight")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetHeight(ptr.Pointer(), PointerFromQTextLength(height))
	}
}

func (ptr *QTextFrameFormat) SetHeight2(height float64) {
	defer qt.Recovering("QTextFrameFormat::setHeight")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetHeight2(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QTextFrameFormat) SetLeftMargin(margin float64) {
	defer qt.Recovering("QTextFrameFormat::setLeftMargin")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetLeftMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetPadding(width float64) {
	defer qt.Recovering("QTextFrameFormat::setPadding")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetPadding(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextFrameFormat) SetPageBreakPolicy(policy QTextFormat__PageBreakFlag) {
	defer qt.Recovering("QTextFrameFormat::setPageBreakPolicy")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetPageBreakPolicy(ptr.Pointer(), C.int(policy))
	}
}

func (ptr *QTextFrameFormat) SetPosition(policy QTextFrameFormat__Position) {
	defer qt.Recovering("QTextFrameFormat::setPosition")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetPosition(ptr.Pointer(), C.int(policy))
	}
}

func (ptr *QTextFrameFormat) SetRightMargin(margin float64) {
	defer qt.Recovering("QTextFrameFormat::setRightMargin")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetRightMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetTopMargin(margin float64) {
	defer qt.Recovering("QTextFrameFormat::setTopMargin")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetTopMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetWidth(width QTextLength_ITF) {
	defer qt.Recovering("QTextFrameFormat::setWidth")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetWidth(ptr.Pointer(), PointerFromQTextLength(width))
	}
}

func (ptr *QTextFrameFormat) SetWidth2(width float64) {
	defer qt.Recovering("QTextFrameFormat::setWidth")

	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetWidth2(ptr.Pointer(), C.double(width))
	}
}

type QTextImageFormat struct {
	QTextCharFormat
}

type QTextImageFormat_ITF interface {
	QTextCharFormat_ITF
	QTextImageFormat_PTR() *QTextImageFormat
}

func (p *QTextImageFormat) QTextImageFormat_PTR() *QTextImageFormat {
	return p
}

func (p *QTextImageFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextCharFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextImageFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextCharFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextImageFormat(ptr QTextImageFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextImageFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextImageFormatFromPointer(ptr unsafe.Pointer) *QTextImageFormat {
	var n = new(QTextImageFormat)
	n.SetPointer(ptr)
	return n
}

func newQTextImageFormatFromPointer(ptr unsafe.Pointer) *QTextImageFormat {
	var n = NewQTextImageFormatFromPointer(ptr)
	return n
}

func NewQTextImageFormat() *QTextImageFormat {
	defer qt.Recovering("QTextImageFormat::QTextImageFormat")

	return newQTextImageFormatFromPointer(C.QTextImageFormat_NewQTextImageFormat())
}

func (ptr *QTextImageFormat) Height() float64 {
	defer qt.Recovering("QTextImageFormat::height")

	if ptr.Pointer() != nil {
		return float64(C.QTextImageFormat_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextImageFormat) IsValid() bool {
	defer qt.Recovering("QTextImageFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QTextImageFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextImageFormat) Name() string {
	defer qt.Recovering("QTextImageFormat::name")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextImageFormat_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextImageFormat) SetHeight(height float64) {
	defer qt.Recovering("QTextImageFormat::setHeight")

	if ptr.Pointer() != nil {
		C.QTextImageFormat_SetHeight(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QTextImageFormat) SetName(name string) {
	defer qt.Recovering("QTextImageFormat::setName")

	if ptr.Pointer() != nil {
		C.QTextImageFormat_SetName(ptr.Pointer(), C.CString(name))
	}
}

func (ptr *QTextImageFormat) SetWidth(width float64) {
	defer qt.Recovering("QTextImageFormat::setWidth")

	if ptr.Pointer() != nil {
		C.QTextImageFormat_SetWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextImageFormat) Width() float64 {
	defer qt.Recovering("QTextImageFormat::width")

	if ptr.Pointer() != nil {
		return float64(C.QTextImageFormat_Width(ptr.Pointer()))
	}
	return 0
}

type QTextInlineObject struct {
	ptr unsafe.Pointer
}

type QTextInlineObject_ITF interface {
	QTextInlineObject_PTR() *QTextInlineObject
}

func (p *QTextInlineObject) QTextInlineObject_PTR() *QTextInlineObject {
	return p
}

func (p *QTextInlineObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextInlineObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextInlineObject(ptr QTextInlineObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextInlineObject_PTR().Pointer()
	}
	return nil
}

func NewQTextInlineObjectFromPointer(ptr unsafe.Pointer) *QTextInlineObject {
	var n = new(QTextInlineObject)
	n.SetPointer(ptr)
	return n
}

func newQTextInlineObjectFromPointer(ptr unsafe.Pointer) *QTextInlineObject {
	var n = NewQTextInlineObjectFromPointer(ptr)
	return n
}

func (ptr *QTextInlineObject) Ascent() float64 {
	defer qt.Recovering("QTextInlineObject::ascent")

	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) Descent() float64 {
	defer qt.Recovering("QTextInlineObject::descent")

	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) Format() *QTextFormat {
	defer qt.Recovering("QTextInlineObject::format")

	if ptr.Pointer() != nil {
		return NewQTextFormatFromPointer(C.QTextInlineObject_Format(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextInlineObject) FormatIndex() int {
	defer qt.Recovering("QTextInlineObject::formatIndex")

	if ptr.Pointer() != nil {
		return int(C.QTextInlineObject_FormatIndex(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) Height() float64 {
	defer qt.Recovering("QTextInlineObject::height")

	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) IsValid() bool {
	defer qt.Recovering("QTextInlineObject::isValid")

	if ptr.Pointer() != nil {
		return C.QTextInlineObject_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextInlineObject) Rect() *core.QRectF {
	defer qt.Recovering("QTextInlineObject::rect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QTextInlineObject_Rect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextInlineObject) SetAscent(a float64) {
	defer qt.Recovering("QTextInlineObject::setAscent")

	if ptr.Pointer() != nil {
		C.QTextInlineObject_SetAscent(ptr.Pointer(), C.double(a))
	}
}

func (ptr *QTextInlineObject) SetDescent(d float64) {
	defer qt.Recovering("QTextInlineObject::setDescent")

	if ptr.Pointer() != nil {
		C.QTextInlineObject_SetDescent(ptr.Pointer(), C.double(d))
	}
}

func (ptr *QTextInlineObject) SetWidth(w float64) {
	defer qt.Recovering("QTextInlineObject::setWidth")

	if ptr.Pointer() != nil {
		C.QTextInlineObject_SetWidth(ptr.Pointer(), C.double(w))
	}
}

func (ptr *QTextInlineObject) TextDirection() core.Qt__LayoutDirection {
	defer qt.Recovering("QTextInlineObject::textDirection")

	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextInlineObject_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) TextPosition() int {
	defer qt.Recovering("QTextInlineObject::textPosition")

	if ptr.Pointer() != nil {
		return int(C.QTextInlineObject_TextPosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) Width() float64 {
	defer qt.Recovering("QTextInlineObject::width")

	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Width(ptr.Pointer()))
	}
	return 0
}

//QTextItem::RenderFlag
type QTextItem__RenderFlag int64

const (
	QTextItem__RightToLeft = QTextItem__RenderFlag(0x1)
	QTextItem__Overline    = QTextItem__RenderFlag(0x10)
	QTextItem__Underline   = QTextItem__RenderFlag(0x20)
	QTextItem__StrikeOut   = QTextItem__RenderFlag(0x40)
	QTextItem__Dummy       = QTextItem__RenderFlag(0xffffffff)
)

type QTextItem struct {
	ptr unsafe.Pointer
}

type QTextItem_ITF interface {
	QTextItem_PTR() *QTextItem
}

func (p *QTextItem) QTextItem_PTR() *QTextItem {
	return p
}

func (p *QTextItem) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextItem) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextItem(ptr QTextItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextItem_PTR().Pointer()
	}
	return nil
}

func NewQTextItemFromPointer(ptr unsafe.Pointer) *QTextItem {
	var n = new(QTextItem)
	n.SetPointer(ptr)
	return n
}

func newQTextItemFromPointer(ptr unsafe.Pointer) *QTextItem {
	var n = NewQTextItemFromPointer(ptr)
	return n
}

func (ptr *QTextItem) Ascent() float64 {
	defer qt.Recovering("QTextItem::ascent")

	if ptr.Pointer() != nil {
		return float64(C.QTextItem_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextItem) Descent() float64 {
	defer qt.Recovering("QTextItem::descent")

	if ptr.Pointer() != nil {
		return float64(C.QTextItem_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextItem) Font() *QFont {
	defer qt.Recovering("QTextItem::font")

	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QTextItem_Font(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextItem) RenderFlags() QTextItem__RenderFlag {
	defer qt.Recovering("QTextItem::renderFlags")

	if ptr.Pointer() != nil {
		return QTextItem__RenderFlag(C.QTextItem_RenderFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextItem) Text() string {
	defer qt.Recovering("QTextItem::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextItem_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextItem) Width() float64 {
	defer qt.Recovering("QTextItem::width")

	if ptr.Pointer() != nil {
		return float64(C.QTextItem_Width(ptr.Pointer()))
	}
	return 0
}

//QTextLayout::CursorMode
type QTextLayout__CursorMode int64

const (
	QTextLayout__SkipCharacters = QTextLayout__CursorMode(0)
	QTextLayout__SkipWords      = QTextLayout__CursorMode(1)
)

type QTextLayout struct {
	ptr unsafe.Pointer
}

type QTextLayout_ITF interface {
	QTextLayout_PTR() *QTextLayout
}

func (p *QTextLayout) QTextLayout_PTR() *QTextLayout {
	return p
}

func (p *QTextLayout) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextLayout) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextLayout(ptr QTextLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextLayout_PTR().Pointer()
	}
	return nil
}

func NewQTextLayoutFromPointer(ptr unsafe.Pointer) *QTextLayout {
	var n = new(QTextLayout)
	n.SetPointer(ptr)
	return n
}

func newQTextLayoutFromPointer(ptr unsafe.Pointer) *QTextLayout {
	var n = NewQTextLayoutFromPointer(ptr)
	return n
}

func (ptr *QTextLayout) DrawCursor2(painter QPainter_ITF, position core.QPointF_ITF, cursorPosition int) {
	defer qt.Recovering("QTextLayout::drawCursor")

	if ptr.Pointer() != nil {
		C.QTextLayout_DrawCursor2(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQPointF(position), C.int(cursorPosition))
	}
}

func (ptr *QTextLayout) DrawCursor(painter QPainter_ITF, position core.QPointF_ITF, cursorPosition int, width int) {
	defer qt.Recovering("QTextLayout::drawCursor")

	if ptr.Pointer() != nil {
		C.QTextLayout_DrawCursor(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQPointF(position), C.int(cursorPosition), C.int(width))
	}
}

func NewQTextLayout() *QTextLayout {
	defer qt.Recovering("QTextLayout::QTextLayout")

	return newQTextLayoutFromPointer(C.QTextLayout_NewQTextLayout())
}

func NewQTextLayout2(text string) *QTextLayout {
	defer qt.Recovering("QTextLayout::QTextLayout")

	return newQTextLayoutFromPointer(C.QTextLayout_NewQTextLayout2(C.CString(text)))
}

func NewQTextLayout3(text string, font QFont_ITF, paintdevice QPaintDevice_ITF) *QTextLayout {
	defer qt.Recovering("QTextLayout::QTextLayout")

	return newQTextLayoutFromPointer(C.QTextLayout_NewQTextLayout3(C.CString(text), PointerFromQFont(font), PointerFromQPaintDevice(paintdevice)))
}

func (ptr *QTextLayout) BeginLayout() {
	defer qt.Recovering("QTextLayout::beginLayout")

	if ptr.Pointer() != nil {
		C.QTextLayout_BeginLayout(ptr.Pointer())
	}
}

func (ptr *QTextLayout) BoundingRect() *core.QRectF {
	defer qt.Recovering("QTextLayout::boundingRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QTextLayout_BoundingRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextLayout) CacheEnabled() bool {
	defer qt.Recovering("QTextLayout::cacheEnabled")

	if ptr.Pointer() != nil {
		return C.QTextLayout_CacheEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextLayout) ClearAdditionalFormats() {
	defer qt.Recovering("QTextLayout::clearAdditionalFormats")

	if ptr.Pointer() != nil {
		C.QTextLayout_ClearAdditionalFormats(ptr.Pointer())
	}
}

func (ptr *QTextLayout) ClearLayout() {
	defer qt.Recovering("QTextLayout::clearLayout")

	if ptr.Pointer() != nil {
		C.QTextLayout_ClearLayout(ptr.Pointer())
	}
}

func (ptr *QTextLayout) CursorMoveStyle() core.Qt__CursorMoveStyle {
	defer qt.Recovering("QTextLayout::cursorMoveStyle")

	if ptr.Pointer() != nil {
		return core.Qt__CursorMoveStyle(C.QTextLayout_CursorMoveStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) EndLayout() {
	defer qt.Recovering("QTextLayout::endLayout")

	if ptr.Pointer() != nil {
		C.QTextLayout_EndLayout(ptr.Pointer())
	}
}

func (ptr *QTextLayout) Font() *QFont {
	defer qt.Recovering("QTextLayout::font")

	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QTextLayout_Font(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextLayout) IsValidCursorPosition(pos int) bool {
	defer qt.Recovering("QTextLayout::isValidCursorPosition")

	if ptr.Pointer() != nil {
		return C.QTextLayout_IsValidCursorPosition(ptr.Pointer(), C.int(pos)) != 0
	}
	return false
}

func (ptr *QTextLayout) LeftCursorPosition(oldPos int) int {
	defer qt.Recovering("QTextLayout::leftCursorPosition")

	if ptr.Pointer() != nil {
		return int(C.QTextLayout_LeftCursorPosition(ptr.Pointer(), C.int(oldPos)))
	}
	return 0
}

func (ptr *QTextLayout) LineCount() int {
	defer qt.Recovering("QTextLayout::lineCount")

	if ptr.Pointer() != nil {
		return int(C.QTextLayout_LineCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) MaximumWidth() float64 {
	defer qt.Recovering("QTextLayout::maximumWidth")

	if ptr.Pointer() != nil {
		return float64(C.QTextLayout_MaximumWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) MinimumWidth() float64 {
	defer qt.Recovering("QTextLayout::minimumWidth")

	if ptr.Pointer() != nil {
		return float64(C.QTextLayout_MinimumWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) NextCursorPosition(oldPos int, mode QTextLayout__CursorMode) int {
	defer qt.Recovering("QTextLayout::nextCursorPosition")

	if ptr.Pointer() != nil {
		return int(C.QTextLayout_NextCursorPosition(ptr.Pointer(), C.int(oldPos), C.int(mode)))
	}
	return 0
}

func (ptr *QTextLayout) Position() *core.QPointF {
	defer qt.Recovering("QTextLayout::position")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QTextLayout_Position(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextLayout) PreeditAreaPosition() int {
	defer qt.Recovering("QTextLayout::preeditAreaPosition")

	if ptr.Pointer() != nil {
		return int(C.QTextLayout_PreeditAreaPosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) PreeditAreaText() string {
	defer qt.Recovering("QTextLayout::preeditAreaText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextLayout_PreeditAreaText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextLayout) PreviousCursorPosition(oldPos int, mode QTextLayout__CursorMode) int {
	defer qt.Recovering("QTextLayout::previousCursorPosition")

	if ptr.Pointer() != nil {
		return int(C.QTextLayout_PreviousCursorPosition(ptr.Pointer(), C.int(oldPos), C.int(mode)))
	}
	return 0
}

func (ptr *QTextLayout) RightCursorPosition(oldPos int) int {
	defer qt.Recovering("QTextLayout::rightCursorPosition")

	if ptr.Pointer() != nil {
		return int(C.QTextLayout_RightCursorPosition(ptr.Pointer(), C.int(oldPos)))
	}
	return 0
}

func (ptr *QTextLayout) SetCacheEnabled(enable bool) {
	defer qt.Recovering("QTextLayout::setCacheEnabled")

	if ptr.Pointer() != nil {
		C.QTextLayout_SetCacheEnabled(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QTextLayout) SetCursorMoveStyle(style core.Qt__CursorMoveStyle) {
	defer qt.Recovering("QTextLayout::setCursorMoveStyle")

	if ptr.Pointer() != nil {
		C.QTextLayout_SetCursorMoveStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QTextLayout) SetFont(font QFont_ITF) {
	defer qt.Recovering("QTextLayout::setFont")

	if ptr.Pointer() != nil {
		C.QTextLayout_SetFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QTextLayout) SetPosition(p core.QPointF_ITF) {
	defer qt.Recovering("QTextLayout::setPosition")

	if ptr.Pointer() != nil {
		C.QTextLayout_SetPosition(ptr.Pointer(), core.PointerFromQPointF(p))
	}
}

func (ptr *QTextLayout) SetPreeditArea(position int, text string) {
	defer qt.Recovering("QTextLayout::setPreeditArea")

	if ptr.Pointer() != nil {
		C.QTextLayout_SetPreeditArea(ptr.Pointer(), C.int(position), C.CString(text))
	}
}

func (ptr *QTextLayout) SetText(stri string) {
	defer qt.Recovering("QTextLayout::setText")

	if ptr.Pointer() != nil {
		C.QTextLayout_SetText(ptr.Pointer(), C.CString(stri))
	}
}

func (ptr *QTextLayout) SetTextOption(option QTextOption_ITF) {
	defer qt.Recovering("QTextLayout::setTextOption")

	if ptr.Pointer() != nil {
		C.QTextLayout_SetTextOption(ptr.Pointer(), PointerFromQTextOption(option))
	}
}

func (ptr *QTextLayout) Text() string {
	defer qt.Recovering("QTextLayout::text")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextLayout_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextLayout) TextOption() *QTextOption {
	defer qt.Recovering("QTextLayout::textOption")

	if ptr.Pointer() != nil {
		return NewQTextOptionFromPointer(C.QTextLayout_TextOption(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextLayout) DestroyQTextLayout() {
	defer qt.Recovering("QTextLayout::~QTextLayout")

	if ptr.Pointer() != nil {
		C.QTextLayout_DestroyQTextLayout(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QTextLength::Type
type QTextLength__Type int64

const (
	QTextLength__VariableLength   = QTextLength__Type(0)
	QTextLength__FixedLength      = QTextLength__Type(1)
	QTextLength__PercentageLength = QTextLength__Type(2)
)

type QTextLength struct {
	ptr unsafe.Pointer
}

type QTextLength_ITF interface {
	QTextLength_PTR() *QTextLength
}

func (p *QTextLength) QTextLength_PTR() *QTextLength {
	return p
}

func (p *QTextLength) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextLength) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextLength(ptr QTextLength_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextLength_PTR().Pointer()
	}
	return nil
}

func NewQTextLengthFromPointer(ptr unsafe.Pointer) *QTextLength {
	var n = new(QTextLength)
	n.SetPointer(ptr)
	return n
}

func newQTextLengthFromPointer(ptr unsafe.Pointer) *QTextLength {
	var n = NewQTextLengthFromPointer(ptr)
	return n
}

func NewQTextLength() *QTextLength {
	defer qt.Recovering("QTextLength::QTextLength")

	return newQTextLengthFromPointer(C.QTextLength_NewQTextLength())
}

func NewQTextLength2(ty QTextLength__Type, value float64) *QTextLength {
	defer qt.Recovering("QTextLength::QTextLength")

	return newQTextLengthFromPointer(C.QTextLength_NewQTextLength2(C.int(ty), C.double(value)))
}

func (ptr *QTextLength) RawValue() float64 {
	defer qt.Recovering("QTextLength::rawValue")

	if ptr.Pointer() != nil {
		return float64(C.QTextLength_RawValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLength) Type() QTextLength__Type {
	defer qt.Recovering("QTextLength::type")

	if ptr.Pointer() != nil {
		return QTextLength__Type(C.QTextLength_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLength) Value(maximumLength float64) float64 {
	defer qt.Recovering("QTextLength::value")

	if ptr.Pointer() != nil {
		return float64(C.QTextLength_Value(ptr.Pointer(), C.double(maximumLength)))
	}
	return 0
}

//QTextLine::CursorPosition
type QTextLine__CursorPosition int64

const (
	QTextLine__CursorBetweenCharacters = QTextLine__CursorPosition(0)
	QTextLine__CursorOnCharacter       = QTextLine__CursorPosition(1)
)

//QTextLine::Edge
type QTextLine__Edge int64

const (
	QTextLine__Leading  = QTextLine__Edge(0)
	QTextLine__Trailing = QTextLine__Edge(1)
)

type QTextLine struct {
	ptr unsafe.Pointer
}

type QTextLine_ITF interface {
	QTextLine_PTR() *QTextLine
}

func (p *QTextLine) QTextLine_PTR() *QTextLine {
	return p
}

func (p *QTextLine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextLine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextLine(ptr QTextLine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextLine_PTR().Pointer()
	}
	return nil
}

func NewQTextLineFromPointer(ptr unsafe.Pointer) *QTextLine {
	var n = new(QTextLine)
	n.SetPointer(ptr)
	return n
}

func newQTextLineFromPointer(ptr unsafe.Pointer) *QTextLine {
	var n = NewQTextLineFromPointer(ptr)
	return n
}

func (ptr *QTextLine) XToCursor(x float64, cpos QTextLine__CursorPosition) int {
	defer qt.Recovering("QTextLine::xToCursor")

	if ptr.Pointer() != nil {
		return int(C.QTextLine_XToCursor(ptr.Pointer(), C.double(x), C.int(cpos)))
	}
	return 0
}

func NewQTextLine() *QTextLine {
	defer qt.Recovering("QTextLine::QTextLine")

	return newQTextLineFromPointer(C.QTextLine_NewQTextLine())
}

func (ptr *QTextLine) Ascent() float64 {
	defer qt.Recovering("QTextLine::ascent")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) CursorToX(cursorPos int, edge QTextLine__Edge) float64 {
	defer qt.Recovering("QTextLine::cursorToX")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_CursorToX(ptr.Pointer(), C.int(cursorPos), C.int(edge)))
	}
	return 0
}

func (ptr *QTextLine) CursorToX2(cursorPos int, edge QTextLine__Edge) float64 {
	defer qt.Recovering("QTextLine::cursorToX")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_CursorToX2(ptr.Pointer(), C.int(cursorPos), C.int(edge)))
	}
	return 0
}

func (ptr *QTextLine) Descent() float64 {
	defer qt.Recovering("QTextLine::descent")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Height() float64 {
	defer qt.Recovering("QTextLine::height")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) HorizontalAdvance() float64 {
	defer qt.Recovering("QTextLine::horizontalAdvance")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_HorizontalAdvance(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) IsValid() bool {
	defer qt.Recovering("QTextLine::isValid")

	if ptr.Pointer() != nil {
		return C.QTextLine_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextLine) Leading() float64 {
	defer qt.Recovering("QTextLine::leading")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) LeadingIncluded() bool {
	defer qt.Recovering("QTextLine::leadingIncluded")

	if ptr.Pointer() != nil {
		return C.QTextLine_LeadingIncluded(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextLine) LineNumber() int {
	defer qt.Recovering("QTextLine::lineNumber")

	if ptr.Pointer() != nil {
		return int(C.QTextLine_LineNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) NaturalTextRect() *core.QRectF {
	defer qt.Recovering("QTextLine::naturalTextRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QTextLine_NaturalTextRect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextLine) NaturalTextWidth() float64 {
	defer qt.Recovering("QTextLine::naturalTextWidth")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_NaturalTextWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Position() *core.QPointF {
	defer qt.Recovering("QTextLine::position")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QTextLine_Position(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextLine) Rect() *core.QRectF {
	defer qt.Recovering("QTextLine::rect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QTextLine_Rect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextLine) SetLeadingIncluded(included bool) {
	defer qt.Recovering("QTextLine::setLeadingIncluded")

	if ptr.Pointer() != nil {
		C.QTextLine_SetLeadingIncluded(ptr.Pointer(), C.int(qt.GoBoolToInt(included)))
	}
}

func (ptr *QTextLine) SetLineWidth(width float64) {
	defer qt.Recovering("QTextLine::setLineWidth")

	if ptr.Pointer() != nil {
		C.QTextLine_SetLineWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextLine) SetNumColumns(numColumns int) {
	defer qt.Recovering("QTextLine::setNumColumns")

	if ptr.Pointer() != nil {
		C.QTextLine_SetNumColumns(ptr.Pointer(), C.int(numColumns))
	}
}

func (ptr *QTextLine) SetNumColumns2(numColumns int, alignmentWidth float64) {
	defer qt.Recovering("QTextLine::setNumColumns")

	if ptr.Pointer() != nil {
		C.QTextLine_SetNumColumns2(ptr.Pointer(), C.int(numColumns), C.double(alignmentWidth))
	}
}

func (ptr *QTextLine) SetPosition(pos core.QPointF_ITF) {
	defer qt.Recovering("QTextLine::setPosition")

	if ptr.Pointer() != nil {
		C.QTextLine_SetPosition(ptr.Pointer(), core.PointerFromQPointF(pos))
	}
}

func (ptr *QTextLine) TextLength() int {
	defer qt.Recovering("QTextLine::textLength")

	if ptr.Pointer() != nil {
		return int(C.QTextLine_TextLength(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) TextStart() int {
	defer qt.Recovering("QTextLine::textStart")

	if ptr.Pointer() != nil {
		return int(C.QTextLine_TextStart(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Width() float64 {
	defer qt.Recovering("QTextLine::width")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) X() float64 {
	defer qt.Recovering("QTextLine::x")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Y() float64 {
	defer qt.Recovering("QTextLine::y")

	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Y(ptr.Pointer()))
	}
	return 0
}

type QTextList struct {
	QTextBlockGroup
}

type QTextList_ITF interface {
	QTextBlockGroup_ITF
	QTextList_PTR() *QTextList
}

func (p *QTextList) QTextList_PTR() *QTextList {
	return p
}

func (p *QTextList) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextBlockGroup_PTR().Pointer()
	}
	return nil
}

func (p *QTextList) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextBlockGroup_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextList(ptr QTextList_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextList_PTR().Pointer()
	}
	return nil
}

func NewQTextListFromPointer(ptr unsafe.Pointer) *QTextList {
	var n = new(QTextList)
	n.SetPointer(ptr)
	return n
}

func newQTextListFromPointer(ptr unsafe.Pointer) *QTextList {
	var n = NewQTextListFromPointer(ptr)
	for len(n.ObjectName()) < len("QTextList_") {
		n.SetObjectName("QTextList_" + qt.Identifier())
	}
	return n
}

func (ptr *QTextList) ItemNumber(block QTextBlock_ITF) int {
	defer qt.Recovering("QTextList::itemNumber")

	if ptr.Pointer() != nil {
		return int(C.QTextList_ItemNumber(ptr.Pointer(), PointerFromQTextBlock(block)))
	}
	return 0
}

func (ptr *QTextList) ItemText(block QTextBlock_ITF) string {
	defer qt.Recovering("QTextList::itemText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextList_ItemText(ptr.Pointer(), PointerFromQTextBlock(block)))
	}
	return ""
}

func (ptr *QTextList) Add(block QTextBlock_ITF) {
	defer qt.Recovering("QTextList::add")

	if ptr.Pointer() != nil {
		C.QTextList_Add(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) Count() int {
	defer qt.Recovering("QTextList::count")

	if ptr.Pointer() != nil {
		return int(C.QTextList_Count(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextList) Item(i int) *QTextBlock {
	defer qt.Recovering("QTextList::item")

	if ptr.Pointer() != nil {
		return NewQTextBlockFromPointer(C.QTextList_Item(ptr.Pointer(), C.int(i)))
	}
	return nil
}

func (ptr *QTextList) Remove(block QTextBlock_ITF) {
	defer qt.Recovering("QTextList::remove")

	if ptr.Pointer() != nil {
		C.QTextList_Remove(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) RemoveItem(i int) {
	defer qt.Recovering("QTextList::removeItem")

	if ptr.Pointer() != nil {
		C.QTextList_RemoveItem(ptr.Pointer(), C.int(i))
	}
}

func (ptr *QTextList) SetFormat(format QTextListFormat_ITF) {
	defer qt.Recovering("QTextList::setFormat")

	if ptr.Pointer() != nil {
		C.QTextList_SetFormat(ptr.Pointer(), PointerFromQTextListFormat(format))
	}
}

//export callbackQTextList_BlockFormatChanged
func callbackQTextList_BlockFormatChanged(ptr unsafe.Pointer, ptrName *C.char, block unsafe.Pointer) {
	defer qt.Recovering("callback QTextList::blockFormatChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "blockFormatChanged"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextListFromPointer(ptr).BlockFormatChangedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextList) ConnectBlockFormatChanged(f func(block *QTextBlock)) {
	defer qt.Recovering("connect QTextList::blockFormatChanged")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "blockFormatChanged", f)
	}
}

func (ptr *QTextList) DisconnectBlockFormatChanged() {
	defer qt.Recovering("disconnect QTextList::blockFormatChanged")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "blockFormatChanged")
	}
}

func (ptr *QTextList) BlockFormatChanged(block QTextBlock_ITF) {
	defer qt.Recovering("QTextList::blockFormatChanged")

	if ptr.Pointer() != nil {
		C.QTextList_BlockFormatChanged(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) BlockFormatChangedDefault(block QTextBlock_ITF) {
	defer qt.Recovering("QTextList::blockFormatChanged")

	if ptr.Pointer() != nil {
		C.QTextList_BlockFormatChangedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextList_BlockInserted
func callbackQTextList_BlockInserted(ptr unsafe.Pointer, ptrName *C.char, block unsafe.Pointer) {
	defer qt.Recovering("callback QTextList::blockInserted")

	if signal := qt.GetSignal(C.GoString(ptrName), "blockInserted"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextListFromPointer(ptr).BlockInsertedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextList) ConnectBlockInserted(f func(block *QTextBlock)) {
	defer qt.Recovering("connect QTextList::blockInserted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "blockInserted", f)
	}
}

func (ptr *QTextList) DisconnectBlockInserted() {
	defer qt.Recovering("disconnect QTextList::blockInserted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "blockInserted")
	}
}

func (ptr *QTextList) BlockInserted(block QTextBlock_ITF) {
	defer qt.Recovering("QTextList::blockInserted")

	if ptr.Pointer() != nil {
		C.QTextList_BlockInserted(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) BlockInsertedDefault(block QTextBlock_ITF) {
	defer qt.Recovering("QTextList::blockInserted")

	if ptr.Pointer() != nil {
		C.QTextList_BlockInsertedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextList_BlockRemoved
func callbackQTextList_BlockRemoved(ptr unsafe.Pointer, ptrName *C.char, block unsafe.Pointer) {
	defer qt.Recovering("callback QTextList::blockRemoved")

	if signal := qt.GetSignal(C.GoString(ptrName), "blockRemoved"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextListFromPointer(ptr).BlockRemovedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextList) ConnectBlockRemoved(f func(block *QTextBlock)) {
	defer qt.Recovering("connect QTextList::blockRemoved")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "blockRemoved", f)
	}
}

func (ptr *QTextList) DisconnectBlockRemoved() {
	defer qt.Recovering("disconnect QTextList::blockRemoved")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "blockRemoved")
	}
}

func (ptr *QTextList) BlockRemoved(block QTextBlock_ITF) {
	defer qt.Recovering("QTextList::blockRemoved")

	if ptr.Pointer() != nil {
		C.QTextList_BlockRemoved(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) BlockRemovedDefault(block QTextBlock_ITF) {
	defer qt.Recovering("QTextList::blockRemoved")

	if ptr.Pointer() != nil {
		C.QTextList_BlockRemovedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextList_TimerEvent
func callbackQTextList_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextList::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextListFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextList) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QTextList::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QTextList) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QTextList::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QTextList) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextList::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextList_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextList) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextList::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextList_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextList_ChildEvent
func callbackQTextList_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextList::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextListFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextList) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QTextList::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QTextList) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QTextList::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QTextList) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextList::childEvent")

	if ptr.Pointer() != nil {
		C.QTextList_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextList) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextList::childEvent")

	if ptr.Pointer() != nil {
		C.QTextList_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextList_ConnectNotify
func callbackQTextList_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextList::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextListFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextList) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextList::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QTextList) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QTextList::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QTextList) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextList::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextList_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextList) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextList::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextList_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextList_CustomEvent
func callbackQTextList_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextList::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextListFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextList) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QTextList::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QTextList) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QTextList::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QTextList) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QTextList::customEvent")

	if ptr.Pointer() != nil {
		C.QTextList_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextList) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QTextList::customEvent")

	if ptr.Pointer() != nil {
		C.QTextList_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextList_DeleteLater
func callbackQTextList_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextList::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextList) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QTextList::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QTextList) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QTextList::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QTextList) DeleteLater() {
	defer qt.Recovering("QTextList::deleteLater")

	if ptr.Pointer() != nil {
		C.QTextList_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextList_DisconnectNotify
func callbackQTextList_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextList::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextListFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextList) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextList::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QTextList) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QTextList::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QTextList) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextList::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextList_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextList) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextList::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextList_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextList_Event
func callbackQTextList_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextList::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQTextListFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QTextList) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QTextList::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QTextList) DisconnectEvent() {
	defer qt.Recovering("disconnect QTextList::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QTextList) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextList::event")

	if ptr.Pointer() != nil {
		return C.QTextList_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextList) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextList::event")

	if ptr.Pointer() != nil {
		return C.QTextList_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextList_EventFilter
func callbackQTextList_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextList::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQTextListFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QTextList) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QTextList::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QTextList) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QTextList::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QTextList) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextList::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextList_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextList) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextList::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextList_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextList_MetaObject
func callbackQTextList_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QTextList::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextListFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextList) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QTextList::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QTextList) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QTextList::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QTextList) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QTextList::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextList_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextList) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QTextList::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextList_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QTextListFormat::Style
type QTextListFormat__Style int64

var (
	QTextListFormat__ListDisc           = QTextListFormat__Style(-1)
	QTextListFormat__ListCircle         = QTextListFormat__Style(-2)
	QTextListFormat__ListSquare         = QTextListFormat__Style(-3)
	QTextListFormat__ListDecimal        = QTextListFormat__Style(-4)
	QTextListFormat__ListLowerAlpha     = QTextListFormat__Style(-5)
	QTextListFormat__ListUpperAlpha     = QTextListFormat__Style(-6)
	QTextListFormat__ListLowerRoman     = QTextListFormat__Style(-7)
	QTextListFormat__ListUpperRoman     = QTextListFormat__Style(-8)
	QTextListFormat__ListStyleUndefined = QTextListFormat__Style(0)
)

type QTextListFormat struct {
	QTextFormat
}

type QTextListFormat_ITF interface {
	QTextFormat_ITF
	QTextListFormat_PTR() *QTextListFormat
}

func (p *QTextListFormat) QTextListFormat_PTR() *QTextListFormat {
	return p
}

func (p *QTextListFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextListFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextListFormat(ptr QTextListFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextListFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextListFormatFromPointer(ptr unsafe.Pointer) *QTextListFormat {
	var n = new(QTextListFormat)
	n.SetPointer(ptr)
	return n
}

func newQTextListFormatFromPointer(ptr unsafe.Pointer) *QTextListFormat {
	var n = NewQTextListFormatFromPointer(ptr)
	return n
}

func NewQTextListFormat() *QTextListFormat {
	defer qt.Recovering("QTextListFormat::QTextListFormat")

	return newQTextListFormatFromPointer(C.QTextListFormat_NewQTextListFormat())
}

func (ptr *QTextListFormat) Indent() int {
	defer qt.Recovering("QTextListFormat::indent")

	if ptr.Pointer() != nil {
		return int(C.QTextListFormat_Indent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextListFormat) IsValid() bool {
	defer qt.Recovering("QTextListFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QTextListFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextListFormat) NumberPrefix() string {
	defer qt.Recovering("QTextListFormat::numberPrefix")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextListFormat_NumberPrefix(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextListFormat) NumberSuffix() string {
	defer qt.Recovering("QTextListFormat::numberSuffix")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextListFormat_NumberSuffix(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextListFormat) SetIndent(indentation int) {
	defer qt.Recovering("QTextListFormat::setIndent")

	if ptr.Pointer() != nil {
		C.QTextListFormat_SetIndent(ptr.Pointer(), C.int(indentation))
	}
}

func (ptr *QTextListFormat) SetNumberPrefix(numberPrefix string) {
	defer qt.Recovering("QTextListFormat::setNumberPrefix")

	if ptr.Pointer() != nil {
		C.QTextListFormat_SetNumberPrefix(ptr.Pointer(), C.CString(numberPrefix))
	}
}

func (ptr *QTextListFormat) SetNumberSuffix(numberSuffix string) {
	defer qt.Recovering("QTextListFormat::setNumberSuffix")

	if ptr.Pointer() != nil {
		C.QTextListFormat_SetNumberSuffix(ptr.Pointer(), C.CString(numberSuffix))
	}
}

func (ptr *QTextListFormat) SetStyle(style QTextListFormat__Style) {
	defer qt.Recovering("QTextListFormat::setStyle")

	if ptr.Pointer() != nil {
		C.QTextListFormat_SetStyle(ptr.Pointer(), C.int(style))
	}
}

func (ptr *QTextListFormat) Style() QTextListFormat__Style {
	defer qt.Recovering("QTextListFormat::style")

	if ptr.Pointer() != nil {
		return QTextListFormat__Style(C.QTextListFormat_Style(ptr.Pointer()))
	}
	return 0
}

type QTextObject struct {
	core.QObject
}

type QTextObject_ITF interface {
	core.QObject_ITF
	QTextObject_PTR() *QTextObject
}

func (p *QTextObject) QTextObject_PTR() *QTextObject {
	return p
}

func (p *QTextObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QTextObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextObject(ptr QTextObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextObject_PTR().Pointer()
	}
	return nil
}

func NewQTextObjectFromPointer(ptr unsafe.Pointer) *QTextObject {
	var n = new(QTextObject)
	n.SetPointer(ptr)
	return n
}

func newQTextObjectFromPointer(ptr unsafe.Pointer) *QTextObject {
	var n = NewQTextObjectFromPointer(ptr)
	for len(n.ObjectName()) < len("QTextObject_") {
		n.SetObjectName("QTextObject_" + qt.Identifier())
	}
	return n
}

func NewQTextObject(document QTextDocument_ITF) *QTextObject {
	defer qt.Recovering("QTextObject::QTextObject")

	return newQTextObjectFromPointer(C.QTextObject_NewQTextObject(PointerFromQTextDocument(document)))
}

func (ptr *QTextObject) Document() *QTextDocument {
	defer qt.Recovering("QTextObject::document")

	if ptr.Pointer() != nil {
		return NewQTextDocumentFromPointer(C.QTextObject_Document(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextObject) Format() *QTextFormat {
	defer qt.Recovering("QTextObject::format")

	if ptr.Pointer() != nil {
		return NewQTextFormatFromPointer(C.QTextObject_Format(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextObject) FormatIndex() int {
	defer qt.Recovering("QTextObject::formatIndex")

	if ptr.Pointer() != nil {
		return int(C.QTextObject_FormatIndex(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextObject) ObjectIndex() int {
	defer qt.Recovering("QTextObject::objectIndex")

	if ptr.Pointer() != nil {
		return int(C.QTextObject_ObjectIndex(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextObject) SetFormat(format QTextFormat_ITF) {
	defer qt.Recovering("QTextObject::setFormat")

	if ptr.Pointer() != nil {
		C.QTextObject_SetFormat(ptr.Pointer(), PointerFromQTextFormat(format))
	}
}

func (ptr *QTextObject) DestroyQTextObject() {
	defer qt.Recovering("QTextObject::~QTextObject")

	if ptr.Pointer() != nil {
		C.QTextObject_DestroyQTextObject(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextObject_TimerEvent
func callbackQTextObject_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextObject::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextObjectFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextObject) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QTextObject::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QTextObject) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QTextObject::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QTextObject) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextObject::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextObject_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextObject) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextObject::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextObject_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextObject_ChildEvent
func callbackQTextObject_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextObject::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextObjectFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextObject) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QTextObject::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QTextObject) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QTextObject::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QTextObject) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextObject::childEvent")

	if ptr.Pointer() != nil {
		C.QTextObject_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextObject) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextObject::childEvent")

	if ptr.Pointer() != nil {
		C.QTextObject_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextObject_ConnectNotify
func callbackQTextObject_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextObject::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextObjectFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextObject) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextObject::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QTextObject) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QTextObject::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QTextObject) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextObject::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextObject_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextObject) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextObject::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextObject_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextObject_CustomEvent
func callbackQTextObject_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextObject::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextObjectFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextObject) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QTextObject::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QTextObject) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QTextObject::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QTextObject) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QTextObject::customEvent")

	if ptr.Pointer() != nil {
		C.QTextObject_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextObject) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QTextObject::customEvent")

	if ptr.Pointer() != nil {
		C.QTextObject_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextObject_DeleteLater
func callbackQTextObject_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextObject::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextObject) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QTextObject::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QTextObject) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QTextObject::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QTextObject) DeleteLater() {
	defer qt.Recovering("QTextObject::deleteLater")

	if ptr.Pointer() != nil {
		C.QTextObject_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextObject_DisconnectNotify
func callbackQTextObject_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextObject::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextObjectFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextObject) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextObject::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QTextObject) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QTextObject::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QTextObject) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextObject::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextObject_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextObject) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextObject::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextObject_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextObject_Event
func callbackQTextObject_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextObject::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQTextObjectFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QTextObject) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QTextObject::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QTextObject) DisconnectEvent() {
	defer qt.Recovering("disconnect QTextObject::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QTextObject) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextObject::event")

	if ptr.Pointer() != nil {
		return C.QTextObject_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextObject) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextObject::event")

	if ptr.Pointer() != nil {
		return C.QTextObject_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextObject_EventFilter
func callbackQTextObject_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextObject::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQTextObjectFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QTextObject) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QTextObject::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QTextObject) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QTextObject::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QTextObject) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextObject::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextObject_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextObject) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextObject::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextObject_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextObject_MetaObject
func callbackQTextObject_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QTextObject::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextObjectFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextObject) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QTextObject::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QTextObject) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QTextObject::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QTextObject) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QTextObject::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextObject_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextObject) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QTextObject::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextObject_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextObjectInterface struct {
	ptr unsafe.Pointer
}

type QTextObjectInterface_ITF interface {
	QTextObjectInterface_PTR() *QTextObjectInterface
}

func (p *QTextObjectInterface) QTextObjectInterface_PTR() *QTextObjectInterface {
	return p
}

func (p *QTextObjectInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextObjectInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextObjectInterface(ptr QTextObjectInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextObjectInterface_PTR().Pointer()
	}
	return nil
}

func NewQTextObjectInterfaceFromPointer(ptr unsafe.Pointer) *QTextObjectInterface {
	var n = new(QTextObjectInterface)
	n.SetPointer(ptr)
	return n
}

func newQTextObjectInterfaceFromPointer(ptr unsafe.Pointer) *QTextObjectInterface {
	var n = NewQTextObjectInterfaceFromPointer(ptr)
	for len(n.ObjectNameAbs()) < len("QTextObjectInterface_") {
		n.SetObjectNameAbs("QTextObjectInterface_" + qt.Identifier())
	}
	return n
}

//export callbackQTextObjectInterface_DrawObject
func callbackQTextObjectInterface_DrawObject(ptr unsafe.Pointer, ptrName *C.char, painter unsafe.Pointer, rect unsafe.Pointer, doc unsafe.Pointer, posInDocument C.int, format unsafe.Pointer) {
	defer qt.Recovering("callback QTextObjectInterface::drawObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "drawObject"); signal != nil {
		signal.(func(*QPainter, *core.QRectF, *QTextDocument, int, *QTextFormat))(NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect), NewQTextDocumentFromPointer(doc), int(posInDocument), NewQTextFormatFromPointer(format))
	}

}

func (ptr *QTextObjectInterface) ConnectDrawObject(f func(painter *QPainter, rect *core.QRectF, doc *QTextDocument, posInDocument int, format *QTextFormat)) {
	defer qt.Recovering("connect QTextObjectInterface::drawObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "drawObject", f)
	}
}

func (ptr *QTextObjectInterface) DisconnectDrawObject(painter QPainter_ITF, rect core.QRectF_ITF, doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) {
	defer qt.Recovering("disconnect QTextObjectInterface::drawObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "drawObject")
	}
}

func (ptr *QTextObjectInterface) DrawObject(painter QPainter_ITF, rect core.QRectF_ITF, doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) {
	defer qt.Recovering("QTextObjectInterface::drawObject")

	if ptr.Pointer() != nil {
		C.QTextObjectInterface_DrawObject(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRectF(rect), PointerFromQTextDocument(doc), C.int(posInDocument), PointerFromQTextFormat(format))
	}
}

//export callbackQTextObjectInterface_IntrinsicSize
func callbackQTextObjectInterface_IntrinsicSize(ptr unsafe.Pointer, ptrName *C.char, doc unsafe.Pointer, posInDocument C.int, format unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QTextObjectInterface::intrinsicSize")

	if signal := qt.GetSignal(C.GoString(ptrName), "intrinsicSize"); signal != nil {
		return core.PointerFromQSizeF(signal.(func(*QTextDocument, int, *QTextFormat) *core.QSizeF)(NewQTextDocumentFromPointer(doc), int(posInDocument), NewQTextFormatFromPointer(format)))
	}

	return core.PointerFromQSizeF(nil)
}

func (ptr *QTextObjectInterface) ConnectIntrinsicSize(f func(doc *QTextDocument, posInDocument int, format *QTextFormat) *core.QSizeF) {
	defer qt.Recovering("connect QTextObjectInterface::intrinsicSize")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectNameAbs(), "intrinsicSize", f)
	}
}

func (ptr *QTextObjectInterface) DisconnectIntrinsicSize(doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) {
	defer qt.Recovering("disconnect QTextObjectInterface::intrinsicSize")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectNameAbs(), "intrinsicSize")
	}
}

func (ptr *QTextObjectInterface) IntrinsicSize(doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) *core.QSizeF {
	defer qt.Recovering("QTextObjectInterface::intrinsicSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFFromPointer(C.QTextObjectInterface_IntrinsicSize(ptr.Pointer(), PointerFromQTextDocument(doc), C.int(posInDocument), PointerFromQTextFormat(format)))
	}
	return nil
}

func (ptr *QTextObjectInterface) DestroyQTextObjectInterface() {
	defer qt.Recovering("QTextObjectInterface::~QTextObjectInterface")

	if ptr.Pointer() != nil {
		C.QTextObjectInterface_DestroyQTextObjectInterface(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextObjectInterface) ObjectNameAbs() string {
	defer qt.Recovering("QTextObjectInterface::objectNameAbs")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTextObjectInterface_ObjectNameAbs(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextObjectInterface) SetObjectNameAbs(name string) {
	defer qt.Recovering("QTextObjectInterface::setObjectNameAbs")

	if ptr.Pointer() != nil {
		C.QTextObjectInterface_SetObjectNameAbs(ptr.Pointer(), C.CString(name))
	}
}

//QTextOption::Flag
type QTextOption__Flag int64

const (
	QTextOption__ShowTabsAndSpaces                     = QTextOption__Flag(0x1)
	QTextOption__ShowLineAndParagraphSeparators        = QTextOption__Flag(0x2)
	QTextOption__AddSpaceForLineAndParagraphSeparators = QTextOption__Flag(0x4)
	QTextOption__SuppressColors                        = QTextOption__Flag(0x8)
	QTextOption__IncludeTrailingSpaces                 = QTextOption__Flag(0x80000000)
)

//QTextOption::TabType
type QTextOption__TabType int64

const (
	QTextOption__LeftTab      = QTextOption__TabType(0)
	QTextOption__RightTab     = QTextOption__TabType(1)
	QTextOption__CenterTab    = QTextOption__TabType(2)
	QTextOption__DelimiterTab = QTextOption__TabType(3)
)

//QTextOption::WrapMode
type QTextOption__WrapMode int64

const (
	QTextOption__NoWrap                       = QTextOption__WrapMode(0)
	QTextOption__WordWrap                     = QTextOption__WrapMode(1)
	QTextOption__ManualWrap                   = QTextOption__WrapMode(2)
	QTextOption__WrapAnywhere                 = QTextOption__WrapMode(3)
	QTextOption__WrapAtWordBoundaryOrAnywhere = QTextOption__WrapMode(4)
)

type QTextOption struct {
	ptr unsafe.Pointer
}

type QTextOption_ITF interface {
	QTextOption_PTR() *QTextOption
}

func (p *QTextOption) QTextOption_PTR() *QTextOption {
	return p
}

func (p *QTextOption) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextOption) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextOption(ptr QTextOption_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextOption_PTR().Pointer()
	}
	return nil
}

func NewQTextOptionFromPointer(ptr unsafe.Pointer) *QTextOption {
	var n = new(QTextOption)
	n.SetPointer(ptr)
	return n
}

func newQTextOptionFromPointer(ptr unsafe.Pointer) *QTextOption {
	var n = NewQTextOptionFromPointer(ptr)
	return n
}

func NewQTextOption3(other QTextOption_ITF) *QTextOption {
	defer qt.Recovering("QTextOption::QTextOption")

	return newQTextOptionFromPointer(C.QTextOption_NewQTextOption3(PointerFromQTextOption(other)))
}

func NewQTextOption() *QTextOption {
	defer qt.Recovering("QTextOption::QTextOption")

	return newQTextOptionFromPointer(C.QTextOption_NewQTextOption())
}

func NewQTextOption2(alignment core.Qt__AlignmentFlag) *QTextOption {
	defer qt.Recovering("QTextOption::QTextOption")

	return newQTextOptionFromPointer(C.QTextOption_NewQTextOption2(C.int(alignment)))
}

func (ptr *QTextOption) Alignment() core.Qt__AlignmentFlag {
	defer qt.Recovering("QTextOption::alignment")

	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QTextOption_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) Flags() QTextOption__Flag {
	defer qt.Recovering("QTextOption::flags")

	if ptr.Pointer() != nil {
		return QTextOption__Flag(C.QTextOption_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) SetAlignment(alignment core.Qt__AlignmentFlag) {
	defer qt.Recovering("QTextOption::setAlignment")

	if ptr.Pointer() != nil {
		C.QTextOption_SetAlignment(ptr.Pointer(), C.int(alignment))
	}
}

func (ptr *QTextOption) SetFlags(flags QTextOption__Flag) {
	defer qt.Recovering("QTextOption::setFlags")

	if ptr.Pointer() != nil {
		C.QTextOption_SetFlags(ptr.Pointer(), C.int(flags))
	}
}

func (ptr *QTextOption) SetTabStop(tabStop float64) {
	defer qt.Recovering("QTextOption::setTabStop")

	if ptr.Pointer() != nil {
		C.QTextOption_SetTabStop(ptr.Pointer(), C.double(tabStop))
	}
}

func (ptr *QTextOption) SetTextDirection(direction core.Qt__LayoutDirection) {
	defer qt.Recovering("QTextOption::setTextDirection")

	if ptr.Pointer() != nil {
		C.QTextOption_SetTextDirection(ptr.Pointer(), C.int(direction))
	}
}

func (ptr *QTextOption) SetUseDesignMetrics(enable bool) {
	defer qt.Recovering("QTextOption::setUseDesignMetrics")

	if ptr.Pointer() != nil {
		C.QTextOption_SetUseDesignMetrics(ptr.Pointer(), C.int(qt.GoBoolToInt(enable)))
	}
}

func (ptr *QTextOption) SetWrapMode(mode QTextOption__WrapMode) {
	defer qt.Recovering("QTextOption::setWrapMode")

	if ptr.Pointer() != nil {
		C.QTextOption_SetWrapMode(ptr.Pointer(), C.int(mode))
	}
}

func (ptr *QTextOption) TabStop() float64 {
	defer qt.Recovering("QTextOption::tabStop")

	if ptr.Pointer() != nil {
		return float64(C.QTextOption_TabStop(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) TextDirection() core.Qt__LayoutDirection {
	defer qt.Recovering("QTextOption::textDirection")

	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextOption_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) UseDesignMetrics() bool {
	defer qt.Recovering("QTextOption::useDesignMetrics")

	if ptr.Pointer() != nil {
		return C.QTextOption_UseDesignMetrics(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextOption) WrapMode() QTextOption__WrapMode {
	defer qt.Recovering("QTextOption::wrapMode")

	if ptr.Pointer() != nil {
		return QTextOption__WrapMode(C.QTextOption_WrapMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) DestroyQTextOption() {
	defer qt.Recovering("QTextOption::~QTextOption")

	if ptr.Pointer() != nil {
		C.QTextOption_DestroyQTextOption(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTextTable struct {
	QTextFrame
}

type QTextTable_ITF interface {
	QTextFrame_ITF
	QTextTable_PTR() *QTextTable
}

func (p *QTextTable) QTextTable_PTR() *QTextTable {
	return p
}

func (p *QTextTable) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFrame_PTR().Pointer()
	}
	return nil
}

func (p *QTextTable) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFrame_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextTable(ptr QTextTable_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTable_PTR().Pointer()
	}
	return nil
}

func NewQTextTableFromPointer(ptr unsafe.Pointer) *QTextTable {
	var n = new(QTextTable)
	n.SetPointer(ptr)
	return n
}

func newQTextTableFromPointer(ptr unsafe.Pointer) *QTextTable {
	var n = NewQTextTableFromPointer(ptr)
	for len(n.ObjectName()) < len("QTextTable_") {
		n.SetObjectName("QTextTable_" + qt.Identifier())
	}
	return n
}

func (ptr *QTextTable) CellAt3(cursor QTextCursor_ITF) *QTextTableCell {
	defer qt.Recovering("QTextTable::cellAt")

	if ptr.Pointer() != nil {
		return NewQTextTableCellFromPointer(C.QTextTable_CellAt3(ptr.Pointer(), PointerFromQTextCursor(cursor)))
	}
	return nil
}

func (ptr *QTextTable) CellAt(row int, column int) *QTextTableCell {
	defer qt.Recovering("QTextTable::cellAt")

	if ptr.Pointer() != nil {
		return NewQTextTableCellFromPointer(C.QTextTable_CellAt(ptr.Pointer(), C.int(row), C.int(column)))
	}
	return nil
}

func (ptr *QTextTable) InsertColumns(index int, columns int) {
	defer qt.Recovering("QTextTable::insertColumns")

	if ptr.Pointer() != nil {
		C.QTextTable_InsertColumns(ptr.Pointer(), C.int(index), C.int(columns))
	}
}

func (ptr *QTextTable) InsertRows(index int, rows int) {
	defer qt.Recovering("QTextTable::insertRows")

	if ptr.Pointer() != nil {
		C.QTextTable_InsertRows(ptr.Pointer(), C.int(index), C.int(rows))
	}
}

func (ptr *QTextTable) RemoveColumns(index int, columns int) {
	defer qt.Recovering("QTextTable::removeColumns")

	if ptr.Pointer() != nil {
		C.QTextTable_RemoveColumns(ptr.Pointer(), C.int(index), C.int(columns))
	}
}

func (ptr *QTextTable) RemoveRows(index int, rows int) {
	defer qt.Recovering("QTextTable::removeRows")

	if ptr.Pointer() != nil {
		C.QTextTable_RemoveRows(ptr.Pointer(), C.int(index), C.int(rows))
	}
}

func (ptr *QTextTable) Resize(rows int, columns int) {
	defer qt.Recovering("QTextTable::resize")

	if ptr.Pointer() != nil {
		C.QTextTable_Resize(ptr.Pointer(), C.int(rows), C.int(columns))
	}
}

func (ptr *QTextTable) RowEnd(cursor QTextCursor_ITF) *QTextCursor {
	defer qt.Recovering("QTextTable::rowEnd")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextTable_RowEnd(ptr.Pointer(), PointerFromQTextCursor(cursor)))
	}
	return nil
}

func (ptr *QTextTable) RowStart(cursor QTextCursor_ITF) *QTextCursor {
	defer qt.Recovering("QTextTable::rowStart")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextTable_RowStart(ptr.Pointer(), PointerFromQTextCursor(cursor)))
	}
	return nil
}

func (ptr *QTextTable) SetFormat(format QTextTableFormat_ITF) {
	defer qt.Recovering("QTextTable::setFormat")

	if ptr.Pointer() != nil {
		C.QTextTable_SetFormat(ptr.Pointer(), PointerFromQTextTableFormat(format))
	}
}

func (ptr *QTextTable) AppendColumns(count int) {
	defer qt.Recovering("QTextTable::appendColumns")

	if ptr.Pointer() != nil {
		C.QTextTable_AppendColumns(ptr.Pointer(), C.int(count))
	}
}

func (ptr *QTextTable) AppendRows(count int) {
	defer qt.Recovering("QTextTable::appendRows")

	if ptr.Pointer() != nil {
		C.QTextTable_AppendRows(ptr.Pointer(), C.int(count))
	}
}

func (ptr *QTextTable) CellAt2(position int) *QTextTableCell {
	defer qt.Recovering("QTextTable::cellAt")

	if ptr.Pointer() != nil {
		return NewQTextTableCellFromPointer(C.QTextTable_CellAt2(ptr.Pointer(), C.int(position)))
	}
	return nil
}

func (ptr *QTextTable) Columns() int {
	defer qt.Recovering("QTextTable::columns")

	if ptr.Pointer() != nil {
		return int(C.QTextTable_Columns(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTable) MergeCells2(cursor QTextCursor_ITF) {
	defer qt.Recovering("QTextTable::mergeCells")

	if ptr.Pointer() != nil {
		C.QTextTable_MergeCells2(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

func (ptr *QTextTable) MergeCells(row int, column int, numRows int, numCols int) {
	defer qt.Recovering("QTextTable::mergeCells")

	if ptr.Pointer() != nil {
		C.QTextTable_MergeCells(ptr.Pointer(), C.int(row), C.int(column), C.int(numRows), C.int(numCols))
	}
}

func (ptr *QTextTable) Rows() int {
	defer qt.Recovering("QTextTable::rows")

	if ptr.Pointer() != nil {
		return int(C.QTextTable_Rows(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTable) SplitCell(row int, column int, numRows int, numCols int) {
	defer qt.Recovering("QTextTable::splitCell")

	if ptr.Pointer() != nil {
		C.QTextTable_SplitCell(ptr.Pointer(), C.int(row), C.int(column), C.int(numRows), C.int(numCols))
	}
}

//export callbackQTextTable_TimerEvent
func callbackQTextTable_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextTable::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextTableFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextTable) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QTextTable::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QTextTable) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QTextTable::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QTextTable) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextTable::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextTable_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextTable) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QTextTable::timerEvent")

	if ptr.Pointer() != nil {
		C.QTextTable_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextTable_ChildEvent
func callbackQTextTable_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextTable::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextTableFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextTable) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QTextTable::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QTextTable) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QTextTable::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QTextTable) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextTable::childEvent")

	if ptr.Pointer() != nil {
		C.QTextTable_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextTable) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QTextTable::childEvent")

	if ptr.Pointer() != nil {
		C.QTextTable_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextTable_ConnectNotify
func callbackQTextTable_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextTable::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextTableFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextTable) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextTable::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QTextTable) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QTextTable::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QTextTable) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextTable::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextTable_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextTable) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextTable::connectNotify")

	if ptr.Pointer() != nil {
		C.QTextTable_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextTable_CustomEvent
func callbackQTextTable_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QTextTable::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextTableFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextTable) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QTextTable::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QTextTable) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QTextTable::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QTextTable) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QTextTable::customEvent")

	if ptr.Pointer() != nil {
		C.QTextTable_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextTable) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QTextTable::customEvent")

	if ptr.Pointer() != nil {
		C.QTextTable_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextTable_DeleteLater
func callbackQTextTable_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QTextTable::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextTable) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QTextTable::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QTextTable) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QTextTable::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QTextTable) DeleteLater() {
	defer qt.Recovering("QTextTable::deleteLater")

	if ptr.Pointer() != nil {
		C.QTextTable_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQTextTable_DisconnectNotify
func callbackQTextTable_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QTextTable::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextTableFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextTable) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QTextTable::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QTextTable) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QTextTable::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QTextTable) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextTable::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextTable_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextTable) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QTextTable::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QTextTable_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextTable_Event
func callbackQTextTable_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextTable::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQTextTableFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QTextTable) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QTextTable::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QTextTable) DisconnectEvent() {
	defer qt.Recovering("disconnect QTextTable::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QTextTable) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextTable::event")

	if ptr.Pointer() != nil {
		return C.QTextTable_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextTable) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QTextTable::event")

	if ptr.Pointer() != nil {
		return C.QTextTable_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextTable_EventFilter
func callbackQTextTable_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QTextTable::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQTextTableFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QTextTable) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QTextTable::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QTextTable) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QTextTable::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QTextTable) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextTable::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextTable_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextTable) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QTextTable::eventFilter")

	if ptr.Pointer() != nil {
		return C.QTextTable_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextTable_MetaObject
func callbackQTextTable_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QTextTable::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextTableFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextTable) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QTextTable::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QTextTable) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QTextTable::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QTextTable) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QTextTable::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextTable_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextTable) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QTextTable::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextTable_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextTableCell struct {
	ptr unsafe.Pointer
}

type QTextTableCell_ITF interface {
	QTextTableCell_PTR() *QTextTableCell
}

func (p *QTextTableCell) QTextTableCell_PTR() *QTextTableCell {
	return p
}

func (p *QTextTableCell) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextTableCell) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextTableCell(ptr QTextTableCell_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTableCell_PTR().Pointer()
	}
	return nil
}

func NewQTextTableCellFromPointer(ptr unsafe.Pointer) *QTextTableCell {
	var n = new(QTextTableCell)
	n.SetPointer(ptr)
	return n
}

func newQTextTableCellFromPointer(ptr unsafe.Pointer) *QTextTableCell {
	var n = NewQTextTableCellFromPointer(ptr)
	return n
}

func NewQTextTableCell() *QTextTableCell {
	defer qt.Recovering("QTextTableCell::QTextTableCell")

	return newQTextTableCellFromPointer(C.QTextTableCell_NewQTextTableCell())
}

func NewQTextTableCell2(other QTextTableCell_ITF) *QTextTableCell {
	defer qt.Recovering("QTextTableCell::QTextTableCell")

	return newQTextTableCellFromPointer(C.QTextTableCell_NewQTextTableCell2(PointerFromQTextTableCell(other)))
}

func (ptr *QTextTableCell) Column() int {
	defer qt.Recovering("QTextTableCell::column")

	if ptr.Pointer() != nil {
		return int(C.QTextTableCell_Column(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCell) ColumnSpan() int {
	defer qt.Recovering("QTextTableCell::columnSpan")

	if ptr.Pointer() != nil {
		return int(C.QTextTableCell_ColumnSpan(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCell) FirstCursorPosition() *QTextCursor {
	defer qt.Recovering("QTextTableCell::firstCursorPosition")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextTableCell_FirstCursorPosition(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextTableCell) IsValid() bool {
	defer qt.Recovering("QTextTableCell::isValid")

	if ptr.Pointer() != nil {
		return C.QTextTableCell_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextTableCell) LastCursorPosition() *QTextCursor {
	defer qt.Recovering("QTextTableCell::lastCursorPosition")

	if ptr.Pointer() != nil {
		return NewQTextCursorFromPointer(C.QTextTableCell_LastCursorPosition(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextTableCell) Row() int {
	defer qt.Recovering("QTextTableCell::row")

	if ptr.Pointer() != nil {
		return int(C.QTextTableCell_Row(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCell) RowSpan() int {
	defer qt.Recovering("QTextTableCell::rowSpan")

	if ptr.Pointer() != nil {
		return int(C.QTextTableCell_RowSpan(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCell) SetFormat(format QTextCharFormat_ITF) {
	defer qt.Recovering("QTextTableCell::setFormat")

	if ptr.Pointer() != nil {
		C.QTextTableCell_SetFormat(ptr.Pointer(), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextTableCell) TableCellFormatIndex() int {
	defer qt.Recovering("QTextTableCell::tableCellFormatIndex")

	if ptr.Pointer() != nil {
		return int(C.QTextTableCell_TableCellFormatIndex(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCell) DestroyQTextTableCell() {
	defer qt.Recovering("QTextTableCell::~QTextTableCell")

	if ptr.Pointer() != nil {
		C.QTextTableCell_DestroyQTextTableCell(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTextTableCellFormat struct {
	QTextCharFormat
}

type QTextTableCellFormat_ITF interface {
	QTextCharFormat_ITF
	QTextTableCellFormat_PTR() *QTextTableCellFormat
}

func (p *QTextTableCellFormat) QTextTableCellFormat_PTR() *QTextTableCellFormat {
	return p
}

func (p *QTextTableCellFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextCharFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextTableCellFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextCharFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextTableCellFormat(ptr QTextTableCellFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTableCellFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextTableCellFormatFromPointer(ptr unsafe.Pointer) *QTextTableCellFormat {
	var n = new(QTextTableCellFormat)
	n.SetPointer(ptr)
	return n
}

func newQTextTableCellFormatFromPointer(ptr unsafe.Pointer) *QTextTableCellFormat {
	var n = NewQTextTableCellFormatFromPointer(ptr)
	return n
}

func NewQTextTableCellFormat() *QTextTableCellFormat {
	defer qt.Recovering("QTextTableCellFormat::QTextTableCellFormat")

	return newQTextTableCellFormatFromPointer(C.QTextTableCellFormat_NewQTextTableCellFormat())
}

func (ptr *QTextTableCellFormat) BottomPadding() float64 {
	defer qt.Recovering("QTextTableCellFormat::bottomPadding")

	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_BottomPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCellFormat) IsValid() bool {
	defer qt.Recovering("QTextTableCellFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QTextTableCellFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextTableCellFormat) LeftPadding() float64 {
	defer qt.Recovering("QTextTableCellFormat::leftPadding")

	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_LeftPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCellFormat) RightPadding() float64 {
	defer qt.Recovering("QTextTableCellFormat::rightPadding")

	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_RightPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCellFormat) SetBottomPadding(padding float64) {
	defer qt.Recovering("QTextTableCellFormat::setBottomPadding")

	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetBottomPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetLeftPadding(padding float64) {
	defer qt.Recovering("QTextTableCellFormat::setLeftPadding")

	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetLeftPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetPadding(padding float64) {
	defer qt.Recovering("QTextTableCellFormat::setPadding")

	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetRightPadding(padding float64) {
	defer qt.Recovering("QTextTableCellFormat::setRightPadding")

	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetRightPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetTopPadding(padding float64) {
	defer qt.Recovering("QTextTableCellFormat::setTopPadding")

	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetTopPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) TopPadding() float64 {
	defer qt.Recovering("QTextTableCellFormat::topPadding")

	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_TopPadding(ptr.Pointer()))
	}
	return 0
}

type QTextTableFormat struct {
	QTextFrameFormat
}

type QTextTableFormat_ITF interface {
	QTextFrameFormat_ITF
	QTextTableFormat_PTR() *QTextTableFormat
}

func (p *QTextTableFormat) QTextTableFormat_PTR() *QTextTableFormat {
	return p
}

func (p *QTextTableFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFrameFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextTableFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFrameFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextTableFormat(ptr QTextTableFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTableFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextTableFormatFromPointer(ptr unsafe.Pointer) *QTextTableFormat {
	var n = new(QTextTableFormat)
	n.SetPointer(ptr)
	return n
}

func newQTextTableFormatFromPointer(ptr unsafe.Pointer) *QTextTableFormat {
	var n = NewQTextTableFormatFromPointer(ptr)
	return n
}

func NewQTextTableFormat() *QTextTableFormat {
	defer qt.Recovering("QTextTableFormat::QTextTableFormat")

	return newQTextTableFormatFromPointer(C.QTextTableFormat_NewQTextTableFormat())
}

func (ptr *QTextTableFormat) Alignment() core.Qt__AlignmentFlag {
	defer qt.Recovering("QTextTableFormat::alignment")

	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QTextTableFormat_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) CellPadding() float64 {
	defer qt.Recovering("QTextTableFormat::cellPadding")

	if ptr.Pointer() != nil {
		return float64(C.QTextTableFormat_CellPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) CellSpacing() float64 {
	defer qt.Recovering("QTextTableFormat::cellSpacing")

	if ptr.Pointer() != nil {
		return float64(C.QTextTableFormat_CellSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) ClearColumnWidthConstraints() {
	defer qt.Recovering("QTextTableFormat::clearColumnWidthConstraints")

	if ptr.Pointer() != nil {
		C.QTextTableFormat_ClearColumnWidthConstraints(ptr.Pointer())
	}
}

func (ptr *QTextTableFormat) Columns() int {
	defer qt.Recovering("QTextTableFormat::columns")

	if ptr.Pointer() != nil {
		return int(C.QTextTableFormat_Columns(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) HeaderRowCount() int {
	defer qt.Recovering("QTextTableFormat::headerRowCount")

	if ptr.Pointer() != nil {
		return int(C.QTextTableFormat_HeaderRowCount(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) IsValid() bool {
	defer qt.Recovering("QTextTableFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QTextTableFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextTableFormat) SetAlignment(alignment core.Qt__AlignmentFlag) {
	defer qt.Recovering("QTextTableFormat::setAlignment")

	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetAlignment(ptr.Pointer(), C.int(alignment))
	}
}

func (ptr *QTextTableFormat) SetCellPadding(padding float64) {
	defer qt.Recovering("QTextTableFormat::setCellPadding")

	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetCellPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableFormat) SetCellSpacing(spacing float64) {
	defer qt.Recovering("QTextTableFormat::setCellSpacing")

	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetCellSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QTextTableFormat) SetHeaderRowCount(count int) {
	defer qt.Recovering("QTextTableFormat::setHeaderRowCount")

	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetHeaderRowCount(ptr.Pointer(), C.int(count))
	}
}

//QTouchDevice::CapabilityFlag
type QTouchDevice__CapabilityFlag int64

const (
	QTouchDevice__Position           = QTouchDevice__CapabilityFlag(0x0001)
	QTouchDevice__Area               = QTouchDevice__CapabilityFlag(0x0002)
	QTouchDevice__Pressure           = QTouchDevice__CapabilityFlag(0x0004)
	QTouchDevice__Velocity           = QTouchDevice__CapabilityFlag(0x0008)
	QTouchDevice__RawPositions       = QTouchDevice__CapabilityFlag(0x0010)
	QTouchDevice__NormalizedPosition = QTouchDevice__CapabilityFlag(0x0020)
	QTouchDevice__MouseEmulation     = QTouchDevice__CapabilityFlag(0x0040)
)

//QTouchDevice::DeviceType
type QTouchDevice__DeviceType int64

const (
	QTouchDevice__TouchScreen = QTouchDevice__DeviceType(0)
	QTouchDevice__TouchPad    = QTouchDevice__DeviceType(1)
)

type QTouchDevice struct {
	ptr unsafe.Pointer
}

type QTouchDevice_ITF interface {
	QTouchDevice_PTR() *QTouchDevice
}

func (p *QTouchDevice) QTouchDevice_PTR() *QTouchDevice {
	return p
}

func (p *QTouchDevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTouchDevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTouchDevice(ptr QTouchDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTouchDevice_PTR().Pointer()
	}
	return nil
}

func NewQTouchDeviceFromPointer(ptr unsafe.Pointer) *QTouchDevice {
	var n = new(QTouchDevice)
	n.SetPointer(ptr)
	return n
}

func newQTouchDeviceFromPointer(ptr unsafe.Pointer) *QTouchDevice {
	var n = NewQTouchDeviceFromPointer(ptr)
	return n
}

func NewQTouchDevice() *QTouchDevice {
	defer qt.Recovering("QTouchDevice::QTouchDevice")

	return newQTouchDeviceFromPointer(C.QTouchDevice_NewQTouchDevice())
}

func (ptr *QTouchDevice) Capabilities() QTouchDevice__CapabilityFlag {
	defer qt.Recovering("QTouchDevice::capabilities")

	if ptr.Pointer() != nil {
		return QTouchDevice__CapabilityFlag(C.QTouchDevice_Capabilities(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchDevice) MaximumTouchPoints() int {
	defer qt.Recovering("QTouchDevice::maximumTouchPoints")

	if ptr.Pointer() != nil {
		return int(C.QTouchDevice_MaximumTouchPoints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchDevice) Name() string {
	defer qt.Recovering("QTouchDevice::name")

	if ptr.Pointer() != nil {
		return C.GoString(C.QTouchDevice_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTouchDevice) SetCapabilities(caps QTouchDevice__CapabilityFlag) {
	defer qt.Recovering("QTouchDevice::setCapabilities")

	if ptr.Pointer() != nil {
		C.QTouchDevice_SetCapabilities(ptr.Pointer(), C.int(caps))
	}
}

func (ptr *QTouchDevice) SetMaximumTouchPoints(max int) {
	defer qt.Recovering("QTouchDevice::setMaximumTouchPoints")

	if ptr.Pointer() != nil {
		C.QTouchDevice_SetMaximumTouchPoints(ptr.Pointer(), C.int(max))
	}
}

func (ptr *QTouchDevice) SetName(name string) {
	defer qt.Recovering("QTouchDevice::setName")

	if ptr.Pointer() != nil {
		C.QTouchDevice_SetName(ptr.Pointer(), C.CString(name))
	}
}

func (ptr *QTouchDevice) SetType(devType QTouchDevice__DeviceType) {
	defer qt.Recovering("QTouchDevice::setType")

	if ptr.Pointer() != nil {
		C.QTouchDevice_SetType(ptr.Pointer(), C.int(devType))
	}
}

func (ptr *QTouchDevice) Type() QTouchDevice__DeviceType {
	defer qt.Recovering("QTouchDevice::type")

	if ptr.Pointer() != nil {
		return QTouchDevice__DeviceType(C.QTouchDevice_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchDevice) DestroyQTouchDevice() {
	defer qt.Recovering("QTouchDevice::~QTouchDevice")

	if ptr.Pointer() != nil {
		C.QTouchDevice_DestroyQTouchDevice(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTouchEvent struct {
	QInputEvent
}

type QTouchEvent_ITF interface {
	QInputEvent_ITF
	QTouchEvent_PTR() *QTouchEvent
}

func (p *QTouchEvent) QTouchEvent_PTR() *QTouchEvent {
	return p
}

func (p *QTouchEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QTouchEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQTouchEvent(ptr QTouchEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTouchEvent_PTR().Pointer()
	}
	return nil
}

func NewQTouchEventFromPointer(ptr unsafe.Pointer) *QTouchEvent {
	var n = new(QTouchEvent)
	n.SetPointer(ptr)
	return n
}

func newQTouchEventFromPointer(ptr unsafe.Pointer) *QTouchEvent {
	var n = NewQTouchEventFromPointer(ptr)
	return n
}

func (ptr *QTouchEvent) Device() *QTouchDevice {
	defer qt.Recovering("QTouchEvent::device")

	if ptr.Pointer() != nil {
		return NewQTouchDeviceFromPointer(C.QTouchEvent_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTouchEvent) Target() *core.QObject {
	defer qt.Recovering("QTouchEvent::target")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QTouchEvent_Target(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTouchEvent) TouchPointStates() core.Qt__TouchPointState {
	defer qt.Recovering("QTouchEvent::touchPointStates")

	if ptr.Pointer() != nil {
		return core.Qt__TouchPointState(C.QTouchEvent_TouchPointStates(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchEvent) Window() *QWindow {
	defer qt.Recovering("QTouchEvent::window")

	if ptr.Pointer() != nil {
		return NewQWindowFromPointer(C.QTouchEvent_Window(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTouchEvent) DestroyQTouchEvent() {
	defer qt.Recovering("QTouchEvent::~QTouchEvent")

	if ptr.Pointer() != nil {
		C.QTouchEvent_DestroyQTouchEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QTransform::TransformationType
type QTransform__TransformationType int64

const (
	QTransform__TxNone      = QTransform__TransformationType(0x00)
	QTransform__TxTranslate = QTransform__TransformationType(0x01)
	QTransform__TxScale     = QTransform__TransformationType(0x02)
	QTransform__TxRotate    = QTransform__TransformationType(0x04)
	QTransform__TxShear     = QTransform__TransformationType(0x08)
	QTransform__TxProject   = QTransform__TransformationType(0x10)
)

type QTransform struct {
	ptr unsafe.Pointer
}

type QTransform_ITF interface {
	QTransform_PTR() *QTransform
}

func (p *QTransform) QTransform_PTR() *QTransform {
	return p
}

func (p *QTransform) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTransform) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTransform(ptr QTransform_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTransform_PTR().Pointer()
	}
	return nil
}

func NewQTransformFromPointer(ptr unsafe.Pointer) *QTransform {
	var n = new(QTransform)
	n.SetPointer(ptr)
	return n
}

func newQTransformFromPointer(ptr unsafe.Pointer) *QTransform {
	var n = NewQTransformFromPointer(ptr)
	return n
}

func NewQTransform3(m11 float64, m12 float64, m13 float64, m21 float64, m22 float64, m23 float64, m31 float64, m32 float64, m33 float64) *QTransform {
	defer qt.Recovering("QTransform::QTransform")

	return newQTransformFromPointer(C.QTransform_NewQTransform3(C.double(m11), C.double(m12), C.double(m13), C.double(m21), C.double(m22), C.double(m23), C.double(m31), C.double(m32), C.double(m33)))
}

func NewQTransform4(m11 float64, m12 float64, m21 float64, m22 float64, dx float64, dy float64) *QTransform {
	defer qt.Recovering("QTransform::QTransform")

	return newQTransformFromPointer(C.QTransform_NewQTransform4(C.double(m11), C.double(m12), C.double(m21), C.double(m22), C.double(dx), C.double(dy)))
}

func (ptr *QTransform) Map5(line core.QLineF_ITF) *core.QLineF {
	defer qt.Recovering("QTransform::map")

	if ptr.Pointer() != nil {
		return core.NewQLineFFromPointer(C.QTransform_Map5(ptr.Pointer(), core.PointerFromQLineF(line)))
	}
	return nil
}

func (ptr *QTransform) Map3(point core.QPoint_ITF) *core.QPoint {
	defer qt.Recovering("QTransform::map")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QTransform_Map3(ptr.Pointer(), core.PointerFromQPoint(point)))
	}
	return nil
}

func (ptr *QTransform) Map7(polygon QPolygon_ITF) *QPolygon {
	defer qt.Recovering("QTransform::map")

	if ptr.Pointer() != nil {
		return NewQPolygonFromPointer(C.QTransform_Map7(ptr.Pointer(), PointerFromQPolygon(polygon)))
	}
	return nil
}

func (ptr *QTransform) Map6(polygon QPolygonF_ITF) *QPolygonF {
	defer qt.Recovering("QTransform::map")

	if ptr.Pointer() != nil {
		return NewQPolygonFFromPointer(C.QTransform_Map6(ptr.Pointer(), PointerFromQPolygonF(polygon)))
	}
	return nil
}

func (ptr *QTransform) Map8(region QRegion_ITF) *QRegion {
	defer qt.Recovering("QTransform::map")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QTransform_Map8(ptr.Pointer(), PointerFromQRegion(region)))
	}
	return nil
}

func (ptr *QTransform) MapRect2(rectangle core.QRect_ITF) *core.QRect {
	defer qt.Recovering("QTransform::mapRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QTransform_MapRect2(ptr.Pointer(), core.PointerFromQRect(rectangle)))
	}
	return nil
}

func (ptr *QTransform) MapRect(rectangle core.QRectF_ITF) *core.QRectF {
	defer qt.Recovering("QTransform::mapRect")

	if ptr.Pointer() != nil {
		return core.NewQRectFFromPointer(C.QTransform_MapRect(ptr.Pointer(), core.PointerFromQRectF(rectangle)))
	}
	return nil
}

func (ptr *QTransform) MapToPolygon(rectangle core.QRect_ITF) *QPolygon {
	defer qt.Recovering("QTransform::mapToPolygon")

	if ptr.Pointer() != nil {
		return NewQPolygonFromPointer(C.QTransform_MapToPolygon(ptr.Pointer(), core.PointerFromQRect(rectangle)))
	}
	return nil
}

func QTransform_QuadToSquare(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	defer qt.Recovering("QTransform::quadToSquare")

	return C.QTransform_QTransform_QuadToSquare(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) QuadToSquare(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	defer qt.Recovering("QTransform::quadToSquare")

	return C.QTransform_QTransform_QuadToSquare(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func NewQTransform() *QTransform {
	defer qt.Recovering("QTransform::QTransform")

	return newQTransformFromPointer(C.QTransform_NewQTransform())
}

func (ptr *QTransform) Determinant() float64 {
	defer qt.Recovering("QTransform::determinant")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_Determinant(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) Dx() float64 {
	defer qt.Recovering("QTransform::dx")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_Dx(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) Dy() float64 {
	defer qt.Recovering("QTransform::dy")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_Dy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) IsAffine() bool {
	defer qt.Recovering("QTransform::isAffine")

	if ptr.Pointer() != nil {
		return C.QTransform_IsAffine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsIdentity() bool {
	defer qt.Recovering("QTransform::isIdentity")

	if ptr.Pointer() != nil {
		return C.QTransform_IsIdentity(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsInvertible() bool {
	defer qt.Recovering("QTransform::isInvertible")

	if ptr.Pointer() != nil {
		return C.QTransform_IsInvertible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsRotating() bool {
	defer qt.Recovering("QTransform::isRotating")

	if ptr.Pointer() != nil {
		return C.QTransform_IsRotating(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsScaling() bool {
	defer qt.Recovering("QTransform::isScaling")

	if ptr.Pointer() != nil {
		return C.QTransform_IsScaling(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsTranslating() bool {
	defer qt.Recovering("QTransform::isTranslating")

	if ptr.Pointer() != nil {
		return C.QTransform_IsTranslating(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) M11() float64 {
	defer qt.Recovering("QTransform::m11")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_M11(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M12() float64 {
	defer qt.Recovering("QTransform::m12")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_M12(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M13() float64 {
	defer qt.Recovering("QTransform::m13")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_M13(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M21() float64 {
	defer qt.Recovering("QTransform::m21")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_M21(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M22() float64 {
	defer qt.Recovering("QTransform::m22")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_M22(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M23() float64 {
	defer qt.Recovering("QTransform::m23")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_M23(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M31() float64 {
	defer qt.Recovering("QTransform::m31")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_M31(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M32() float64 {
	defer qt.Recovering("QTransform::m32")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_M32(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M33() float64 {
	defer qt.Recovering("QTransform::m33")

	if ptr.Pointer() != nil {
		return float64(C.QTransform_M33(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) Map4(l core.QLine_ITF) *core.QLine {
	defer qt.Recovering("QTransform::map")

	if ptr.Pointer() != nil {
		return core.NewQLineFromPointer(C.QTransform_Map4(ptr.Pointer(), core.PointerFromQLine(l)))
	}
	return nil
}

func (ptr *QTransform) Map9(path QPainterPath_ITF) *QPainterPath {
	defer qt.Recovering("QTransform::map")

	if ptr.Pointer() != nil {
		return NewQPainterPathFromPointer(C.QTransform_Map9(ptr.Pointer(), PointerFromQPainterPath(path)))
	}
	return nil
}

func (ptr *QTransform) Map2(p core.QPointF_ITF) *core.QPointF {
	defer qt.Recovering("QTransform::map")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QTransform_Map2(ptr.Pointer(), core.PointerFromQPointF(p)))
	}
	return nil
}

func (ptr *QTransform) Map10(x int, y int, tx int, ty int) {
	defer qt.Recovering("QTransform::map")

	if ptr.Pointer() != nil {
		C.QTransform_Map10(ptr.Pointer(), C.int(x), C.int(y), C.int(tx), C.int(ty))
	}
}

func QTransform_QuadToQuad(one QPolygonF_ITF, two QPolygonF_ITF, trans QTransform_ITF) bool {
	defer qt.Recovering("QTransform::quadToQuad")

	return C.QTransform_QTransform_QuadToQuad(PointerFromQPolygonF(one), PointerFromQPolygonF(two), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) QuadToQuad(one QPolygonF_ITF, two QPolygonF_ITF, trans QTransform_ITF) bool {
	defer qt.Recovering("QTransform::quadToQuad")

	return C.QTransform_QTransform_QuadToQuad(PointerFromQPolygonF(one), PointerFromQPolygonF(two), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) Reset() {
	defer qt.Recovering("QTransform::reset")

	if ptr.Pointer() != nil {
		C.QTransform_Reset(ptr.Pointer())
	}
}

func (ptr *QTransform) SetMatrix(m11 float64, m12 float64, m13 float64, m21 float64, m22 float64, m23 float64, m31 float64, m32 float64, m33 float64) {
	defer qt.Recovering("QTransform::setMatrix")

	if ptr.Pointer() != nil {
		C.QTransform_SetMatrix(ptr.Pointer(), C.double(m11), C.double(m12), C.double(m13), C.double(m21), C.double(m22), C.double(m23), C.double(m31), C.double(m32), C.double(m33))
	}
}

func QTransform_SquareToQuad(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	defer qt.Recovering("QTransform::squareToQuad")

	return C.QTransform_QTransform_SquareToQuad(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) SquareToQuad(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	defer qt.Recovering("QTransform::squareToQuad")

	return C.QTransform_QTransform_SquareToQuad(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) Type() QTransform__TransformationType {
	defer qt.Recovering("QTransform::type")

	if ptr.Pointer() != nil {
		return QTransform__TransformationType(C.QTransform_Type(ptr.Pointer()))
	}
	return 0
}

//QValidator::State
type QValidator__State int64

const (
	QValidator__Invalid      = QValidator__State(0)
	QValidator__Intermediate = QValidator__State(1)
	QValidator__Acceptable   = QValidator__State(2)
)

type QValidator struct {
	core.QObject
}

type QValidator_ITF interface {
	core.QObject_ITF
	QValidator_PTR() *QValidator
}

func (p *QValidator) QValidator_PTR() *QValidator {
	return p
}

func (p *QValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQValidator(ptr QValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QValidator_PTR().Pointer()
	}
	return nil
}

func NewQValidatorFromPointer(ptr unsafe.Pointer) *QValidator {
	var n = new(QValidator)
	n.SetPointer(ptr)
	return n
}

func newQValidatorFromPointer(ptr unsafe.Pointer) *QValidator {
	var n = NewQValidatorFromPointer(ptr)
	for len(n.ObjectName()) < len("QValidator_") {
		n.SetObjectName("QValidator_" + qt.Identifier())
	}
	return n
}

//export callbackQValidator_Fixup
func callbackQValidator_Fixup(ptr unsafe.Pointer, ptrName *C.char, input *C.char) {
	defer qt.Recovering("callback QValidator::fixup")

	if signal := qt.GetSignal(C.GoString(ptrName), "fixup"); signal != nil {
		signal.(func(string))(C.GoString(input))
	} else {
		NewQValidatorFromPointer(ptr).FixupDefault(C.GoString(input))
	}
}

func (ptr *QValidator) ConnectFixup(f func(input string)) {
	defer qt.Recovering("connect QValidator::fixup")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "fixup", f)
	}
}

func (ptr *QValidator) DisconnectFixup() {
	defer qt.Recovering("disconnect QValidator::fixup")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "fixup")
	}
}

func (ptr *QValidator) Fixup(input string) {
	defer qt.Recovering("QValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

func (ptr *QValidator) FixupDefault(input string) {
	defer qt.Recovering("QValidator::fixup")

	if ptr.Pointer() != nil {

	}
}

//export callbackQValidator_Changed
func callbackQValidator_Changed(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QValidator::changed")

	if signal := qt.GetSignal(C.GoString(ptrName), "changed"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QValidator) ConnectChanged(f func()) {
	defer qt.Recovering("connect QValidator::changed")

	if ptr.Pointer() != nil {
		C.QValidator_ConnectChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "changed", f)
	}
}

func (ptr *QValidator) DisconnectChanged() {
	defer qt.Recovering("disconnect QValidator::changed")

	if ptr.Pointer() != nil {
		C.QValidator_DisconnectChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "changed")
	}
}

func (ptr *QValidator) Changed() {
	defer qt.Recovering("QValidator::changed")

	if ptr.Pointer() != nil {
		C.QValidator_Changed(ptr.Pointer())
	}
}

func (ptr *QValidator) Locale() *core.QLocale {
	defer qt.Recovering("QValidator::locale")

	if ptr.Pointer() != nil {
		return core.NewQLocaleFromPointer(C.QValidator_Locale(ptr.Pointer()))
	}
	return nil
}

func (ptr *QValidator) SetLocale(locale core.QLocale_ITF) {
	defer qt.Recovering("QValidator::setLocale")

	if ptr.Pointer() != nil {
		C.QValidator_SetLocale(ptr.Pointer(), core.PointerFromQLocale(locale))
	}
}

//export callbackQValidator_Validate
func callbackQValidator_Validate(ptr unsafe.Pointer, ptrName *C.char, input *C.char, pos C.int) C.int {
	defer qt.Recovering("callback QValidator::validate")

	if signal := qt.GetSignal(C.GoString(ptrName), "validate"); signal != nil {
		return C.int(signal.(func(string, int) QValidator__State)(C.GoString(input), int(pos)))
	}

	return C.int(0)
}

func (ptr *QValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	defer qt.Recovering("connect QValidator::validate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "validate", f)
	}
}

func (ptr *QValidator) DisconnectValidate(input string, pos int) {
	defer qt.Recovering("disconnect QValidator::validate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "validate")
	}
}

func (ptr *QValidator) Validate(input string, pos int) QValidator__State {
	defer qt.Recovering("QValidator::validate")

	if ptr.Pointer() != nil {

	}
	return 0
}

func (ptr *QValidator) DestroyQValidator() {
	defer qt.Recovering("QValidator::~QValidator")

	if ptr.Pointer() != nil {
		C.QValidator_DestroyQValidator(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQValidator_TimerEvent
func callbackQValidator_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QValidator::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QValidator) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QValidator::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QValidator) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QValidator::timerEvent")

	if ptr.Pointer() != nil {
		C.QValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQValidator_ChildEvent
func callbackQValidator_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QValidator::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QValidator) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QValidator::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QValidator) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QValidator::childEvent")

	if ptr.Pointer() != nil {
		C.QValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQValidator_ConnectNotify
func callbackQValidator_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QValidator::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QValidator) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QValidator::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QValidator::connectNotify")

	if ptr.Pointer() != nil {
		C.QValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQValidator_CustomEvent
func callbackQValidator_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QValidator::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QValidator) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QValidator::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QValidator) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QValidator) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QValidator::customEvent")

	if ptr.Pointer() != nil {
		C.QValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQValidator_DeleteLater
func callbackQValidator_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QValidator::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QValidator) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QValidator) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QValidator::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QValidator) DeleteLater() {
	defer qt.Recovering("QValidator::deleteLater")

	if ptr.Pointer() != nil {
		C.QValidator_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQValidator_DisconnectNotify
func callbackQValidator_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QValidator::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QValidator) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QValidator::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QValidator::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQValidator_Event
func callbackQValidator_Event(ptr unsafe.Pointer, ptrName *C.char, e unsafe.Pointer) C.int {
	defer qt.Recovering("callback QValidator::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e))))
	}

	return C.int(qt.GoBoolToInt(NewQValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e))))
}

func (ptr *QValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QValidator::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QValidator) DisconnectEvent() {
	defer qt.Recovering("disconnect QValidator::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QValidator) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QValidator::event")

	if ptr.Pointer() != nil {
		return C.QValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QValidator) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QValidator::event")

	if ptr.Pointer() != nil {
		return C.QValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQValidator_EventFilter
func callbackQValidator_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QValidator::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QValidator) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QValidator::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QValidator::eventFilter")

	if ptr.Pointer() != nil {
		return C.QValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQValidator_MetaObject
func callbackQValidator_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QValidator::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QValidator) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QValidator::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QValidator) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QValidator) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QValidator::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QVector2D struct {
	ptr unsafe.Pointer
}

type QVector2D_ITF interface {
	QVector2D_PTR() *QVector2D
}

func (p *QVector2D) QVector2D_PTR() *QVector2D {
	return p
}

func (p *QVector2D) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVector2D) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVector2D(ptr QVector2D_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector2D_PTR().Pointer()
	}
	return nil
}

func NewQVector2DFromPointer(ptr unsafe.Pointer) *QVector2D {
	var n = new(QVector2D)
	n.SetPointer(ptr)
	return n
}

func newQVector2DFromPointer(ptr unsafe.Pointer) *QVector2D {
	var n = NewQVector2DFromPointer(ptr)
	return n
}

func NewQVector2D() *QVector2D {
	defer qt.Recovering("QVector2D::QVector2D")

	return newQVector2DFromPointer(C.QVector2D_NewQVector2D())
}

func NewQVector2D4(point core.QPoint_ITF) *QVector2D {
	defer qt.Recovering("QVector2D::QVector2D")

	return newQVector2DFromPointer(C.QVector2D_NewQVector2D4(core.PointerFromQPoint(point)))
}

func NewQVector2D5(point core.QPointF_ITF) *QVector2D {
	defer qt.Recovering("QVector2D::QVector2D")

	return newQVector2DFromPointer(C.QVector2D_NewQVector2D5(core.PointerFromQPointF(point)))
}

func NewQVector2D6(vector QVector3D_ITF) *QVector2D {
	defer qt.Recovering("QVector2D::QVector2D")

	return newQVector2DFromPointer(C.QVector2D_NewQVector2D6(PointerFromQVector3D(vector)))
}

func NewQVector2D7(vector QVector4D_ITF) *QVector2D {
	defer qt.Recovering("QVector2D::QVector2D")

	return newQVector2DFromPointer(C.QVector2D_NewQVector2D7(PointerFromQVector4D(vector)))
}

func (ptr *QVector2D) IsNull() bool {
	defer qt.Recovering("QVector2D::isNull")

	if ptr.Pointer() != nil {
		return C.QVector2D_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVector2D) Normalize() {
	defer qt.Recovering("QVector2D::normalize")

	if ptr.Pointer() != nil {
		C.QVector2D_Normalize(ptr.Pointer())
	}
}

func (ptr *QVector2D) ToPoint() *core.QPoint {
	defer qt.Recovering("QVector2D::toPoint")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QVector2D_ToPoint(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVector2D) ToPointF() *core.QPointF {
	defer qt.Recovering("QVector2D::toPointF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QVector2D_ToPointF(ptr.Pointer()))
	}
	return nil
}

type QVector3D struct {
	ptr unsafe.Pointer
}

type QVector3D_ITF interface {
	QVector3D_PTR() *QVector3D
}

func (p *QVector3D) QVector3D_PTR() *QVector3D {
	return p
}

func (p *QVector3D) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVector3D) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVector3D(ptr QVector3D_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector3D_PTR().Pointer()
	}
	return nil
}

func NewQVector3DFromPointer(ptr unsafe.Pointer) *QVector3D {
	var n = new(QVector3D)
	n.SetPointer(ptr)
	return n
}

func newQVector3DFromPointer(ptr unsafe.Pointer) *QVector3D {
	var n = NewQVector3DFromPointer(ptr)
	return n
}

func NewQVector3D() *QVector3D {
	defer qt.Recovering("QVector3D::QVector3D")

	return newQVector3DFromPointer(C.QVector3D_NewQVector3D())
}

func NewQVector3D4(point core.QPoint_ITF) *QVector3D {
	defer qt.Recovering("QVector3D::QVector3D")

	return newQVector3DFromPointer(C.QVector3D_NewQVector3D4(core.PointerFromQPoint(point)))
}

func NewQVector3D5(point core.QPointF_ITF) *QVector3D {
	defer qt.Recovering("QVector3D::QVector3D")

	return newQVector3DFromPointer(C.QVector3D_NewQVector3D5(core.PointerFromQPointF(point)))
}

func NewQVector3D6(vector QVector2D_ITF) *QVector3D {
	defer qt.Recovering("QVector3D::QVector3D")

	return newQVector3DFromPointer(C.QVector3D_NewQVector3D6(PointerFromQVector2D(vector)))
}

func NewQVector3D8(vector QVector4D_ITF) *QVector3D {
	defer qt.Recovering("QVector3D::QVector3D")

	return newQVector3DFromPointer(C.QVector3D_NewQVector3D8(PointerFromQVector4D(vector)))
}

func (ptr *QVector3D) IsNull() bool {
	defer qt.Recovering("QVector3D::isNull")

	if ptr.Pointer() != nil {
		return C.QVector3D_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVector3D) Normalize() {
	defer qt.Recovering("QVector3D::normalize")

	if ptr.Pointer() != nil {
		C.QVector3D_Normalize(ptr.Pointer())
	}
}

func (ptr *QVector3D) ToPoint() *core.QPoint {
	defer qt.Recovering("QVector3D::toPoint")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QVector3D_ToPoint(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVector3D) ToPointF() *core.QPointF {
	defer qt.Recovering("QVector3D::toPointF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QVector3D_ToPointF(ptr.Pointer()))
	}
	return nil
}

type QVector4D struct {
	ptr unsafe.Pointer
}

type QVector4D_ITF interface {
	QVector4D_PTR() *QVector4D
}

func (p *QVector4D) QVector4D_PTR() *QVector4D {
	return p
}

func (p *QVector4D) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVector4D) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVector4D(ptr QVector4D_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector4D_PTR().Pointer()
	}
	return nil
}

func NewQVector4DFromPointer(ptr unsafe.Pointer) *QVector4D {
	var n = new(QVector4D)
	n.SetPointer(ptr)
	return n
}

func newQVector4DFromPointer(ptr unsafe.Pointer) *QVector4D {
	var n = NewQVector4DFromPointer(ptr)
	return n
}

func NewQVector4D() *QVector4D {
	defer qt.Recovering("QVector4D::QVector4D")

	return newQVector4DFromPointer(C.QVector4D_NewQVector4D())
}

func NewQVector4D4(point core.QPoint_ITF) *QVector4D {
	defer qt.Recovering("QVector4D::QVector4D")

	return newQVector4DFromPointer(C.QVector4D_NewQVector4D4(core.PointerFromQPoint(point)))
}

func NewQVector4D5(point core.QPointF_ITF) *QVector4D {
	defer qt.Recovering("QVector4D::QVector4D")

	return newQVector4DFromPointer(C.QVector4D_NewQVector4D5(core.PointerFromQPointF(point)))
}

func NewQVector4D6(vector QVector2D_ITF) *QVector4D {
	defer qt.Recovering("QVector4D::QVector4D")

	return newQVector4DFromPointer(C.QVector4D_NewQVector4D6(PointerFromQVector2D(vector)))
}

func NewQVector4D8(vector QVector3D_ITF) *QVector4D {
	defer qt.Recovering("QVector4D::QVector4D")

	return newQVector4DFromPointer(C.QVector4D_NewQVector4D8(PointerFromQVector3D(vector)))
}

func (ptr *QVector4D) IsNull() bool {
	defer qt.Recovering("QVector4D::isNull")

	if ptr.Pointer() != nil {
		return C.QVector4D_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVector4D) Normalize() {
	defer qt.Recovering("QVector4D::normalize")

	if ptr.Pointer() != nil {
		C.QVector4D_Normalize(ptr.Pointer())
	}
}

func (ptr *QVector4D) ToPoint() *core.QPoint {
	defer qt.Recovering("QVector4D::toPoint")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QVector4D_ToPoint(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVector4D) ToPointF() *core.QPointF {
	defer qt.Recovering("QVector4D::toPointF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QVector4D_ToPointF(ptr.Pointer()))
	}
	return nil
}

type QWhatsThisClickedEvent struct {
	core.QEvent
}

type QWhatsThisClickedEvent_ITF interface {
	core.QEvent_ITF
	QWhatsThisClickedEvent_PTR() *QWhatsThisClickedEvent
}

func (p *QWhatsThisClickedEvent) QWhatsThisClickedEvent_PTR() *QWhatsThisClickedEvent {
	return p
}

func (p *QWhatsThisClickedEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QWhatsThisClickedEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQWhatsThisClickedEvent(ptr QWhatsThisClickedEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWhatsThisClickedEvent_PTR().Pointer()
	}
	return nil
}

func NewQWhatsThisClickedEventFromPointer(ptr unsafe.Pointer) *QWhatsThisClickedEvent {
	var n = new(QWhatsThisClickedEvent)
	n.SetPointer(ptr)
	return n
}

func newQWhatsThisClickedEventFromPointer(ptr unsafe.Pointer) *QWhatsThisClickedEvent {
	var n = NewQWhatsThisClickedEventFromPointer(ptr)
	return n
}

func NewQWhatsThisClickedEvent(href string) *QWhatsThisClickedEvent {
	defer qt.Recovering("QWhatsThisClickedEvent::QWhatsThisClickedEvent")

	return newQWhatsThisClickedEventFromPointer(C.QWhatsThisClickedEvent_NewQWhatsThisClickedEvent(C.CString(href)))
}

func (ptr *QWhatsThisClickedEvent) Href() string {
	defer qt.Recovering("QWhatsThisClickedEvent::href")

	if ptr.Pointer() != nil {
		return C.GoString(C.QWhatsThisClickedEvent_Href(ptr.Pointer()))
	}
	return ""
}

type QWheelEvent struct {
	QInputEvent
}

type QWheelEvent_ITF interface {
	QInputEvent_ITF
	QWheelEvent_PTR() *QWheelEvent
}

func (p *QWheelEvent) QWheelEvent_PTR() *QWheelEvent {
	return p
}

func (p *QWheelEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QWheelEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQWheelEvent(ptr QWheelEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWheelEvent_PTR().Pointer()
	}
	return nil
}

func NewQWheelEventFromPointer(ptr unsafe.Pointer) *QWheelEvent {
	var n = new(QWheelEvent)
	n.SetPointer(ptr)
	return n
}

func newQWheelEventFromPointer(ptr unsafe.Pointer) *QWheelEvent {
	var n = NewQWheelEventFromPointer(ptr)
	return n
}

func NewQWheelEvent(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QWheelEvent {
	defer qt.Recovering("QWheelEvent::QWheelEvent")

	return newQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(qt4Delta), C.int(qt4Orientation), C.int(buttons), C.int(modifiers)))
}

func NewQWheelEvent4(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, phase core.Qt__ScrollPhase) *QWheelEvent {
	defer qt.Recovering("QWheelEvent::QWheelEvent")

	return newQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent4(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(qt4Delta), C.int(qt4Orientation), C.int(buttons), C.int(modifiers), C.int(phase)))
}

func NewQWheelEvent5(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, phase core.Qt__ScrollPhase, source core.Qt__MouseEventSource) *QWheelEvent {
	defer qt.Recovering("QWheelEvent::QWheelEvent")

	return newQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent5(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(qt4Delta), C.int(qt4Orientation), C.int(buttons), C.int(modifiers), C.int(phase), C.int(source)))
}

func (ptr *QWheelEvent) AngleDelta() *core.QPoint {
	defer qt.Recovering("QWheelEvent::angleDelta")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QWheelEvent_AngleDelta(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) Buttons() core.Qt__MouseButton {
	defer qt.Recovering("QWheelEvent::buttons")

	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QWheelEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) GlobalPos() *core.QPoint {
	defer qt.Recovering("QWheelEvent::globalPos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QWheelEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) GlobalPosF() *core.QPointF {
	defer qt.Recovering("QWheelEvent::globalPosF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QWheelEvent_GlobalPosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) GlobalX() int {
	defer qt.Recovering("QWheelEvent::globalX")

	if ptr.Pointer() != nil {
		return int(C.QWheelEvent_GlobalX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) GlobalY() int {
	defer qt.Recovering("QWheelEvent::globalY")

	if ptr.Pointer() != nil {
		return int(C.QWheelEvent_GlobalY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) Phase() core.Qt__ScrollPhase {
	defer qt.Recovering("QWheelEvent::phase")

	if ptr.Pointer() != nil {
		return core.Qt__ScrollPhase(C.QWheelEvent_Phase(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) PixelDelta() *core.QPoint {
	defer qt.Recovering("QWheelEvent::pixelDelta")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QWheelEvent_PixelDelta(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) Pos() *core.QPoint {
	defer qt.Recovering("QWheelEvent::pos")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QWheelEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) PosF() *core.QPointF {
	defer qt.Recovering("QWheelEvent::posF")

	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QWheelEvent_PosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) Source() core.Qt__MouseEventSource {
	defer qt.Recovering("QWheelEvent::source")

	if ptr.Pointer() != nil {
		return core.Qt__MouseEventSource(C.QWheelEvent_Source(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) X() int {
	defer qt.Recovering("QWheelEvent::x")

	if ptr.Pointer() != nil {
		return int(C.QWheelEvent_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) Y() int {
	defer qt.Recovering("QWheelEvent::y")

	if ptr.Pointer() != nil {
		return int(C.QWheelEvent_Y(ptr.Pointer()))
	}
	return 0
}

//QWindow::AncestorMode
type QWindow__AncestorMode int64

const (
	QWindow__ExcludeTransients = QWindow__AncestorMode(0)
	QWindow__IncludeTransients = QWindow__AncestorMode(1)
)

//QWindow::Visibility
type QWindow__Visibility int64

const (
	QWindow__Hidden              = QWindow__Visibility(0)
	QWindow__AutomaticVisibility = QWindow__Visibility(1)
	QWindow__Windowed            = QWindow__Visibility(2)
	QWindow__Minimized           = QWindow__Visibility(3)
	QWindow__Maximized           = QWindow__Visibility(4)
	QWindow__FullScreen          = QWindow__Visibility(5)
)

type QWindow struct {
	core.QObject
	QSurface
}

type QWindow_ITF interface {
	core.QObject_ITF
	QSurface_ITF
	QWindow_PTR() *QWindow
}

func (p *QWindow) QWindow_PTR() *QWindow {
	return p
}

func (p *QWindow) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QWindow) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QSurface_PTR().SetPointer(ptr)
	}
}

func PointerFromQWindow(ptr QWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWindow_PTR().Pointer()
	}
	return nil
}

func NewQWindowFromPointer(ptr unsafe.Pointer) *QWindow {
	var n = new(QWindow)
	n.SetPointer(ptr)
	return n
}

func newQWindowFromPointer(ptr unsafe.Pointer) *QWindow {
	var n = NewQWindowFromPointer(ptr)
	for len(n.ObjectName()) < len("QWindow_") {
		n.SetObjectName("QWindow_" + qt.Identifier())
	}
	return n
}

func (ptr *QWindow) ContentOrientation() core.Qt__ScreenOrientation {
	defer qt.Recovering("QWindow::contentOrientation")

	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QWindow_ContentOrientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) Flags() core.Qt__WindowType {
	defer qt.Recovering("QWindow::flags")

	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QWindow_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) IsVisible() bool {
	defer qt.Recovering("QWindow::isVisible")

	if ptr.Pointer() != nil {
		return C.QWindow_IsVisible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) MapFromGlobal(pos core.QPoint_ITF) *core.QPoint {
	defer qt.Recovering("QWindow::mapFromGlobal")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QWindow_MapFromGlobal(ptr.Pointer(), core.PointerFromQPoint(pos)))
	}
	return nil
}

func (ptr *QWindow) MapToGlobal(pos core.QPoint_ITF) *core.QPoint {
	defer qt.Recovering("QWindow::mapToGlobal")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QWindow_MapToGlobal(ptr.Pointer(), core.PointerFromQPoint(pos)))
	}
	return nil
}

func (ptr *QWindow) Modality() core.Qt__WindowModality {
	defer qt.Recovering("QWindow::modality")

	if ptr.Pointer() != nil {
		return core.Qt__WindowModality(C.QWindow_Modality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) Opacity() float64 {
	defer qt.Recovering("QWindow::opacity")

	if ptr.Pointer() != nil {
		return float64(C.QWindow_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) ReportContentOrientationChange(orientation core.Qt__ScreenOrientation) {
	defer qt.Recovering("QWindow::reportContentOrientationChange")

	if ptr.Pointer() != nil {
		C.QWindow_ReportContentOrientationChange(ptr.Pointer(), C.int(orientation))
	}
}

func (ptr *QWindow) SetFlags(flags core.Qt__WindowType) {
	defer qt.Recovering("QWindow::setFlags")

	if ptr.Pointer() != nil {
		C.QWindow_SetFlags(ptr.Pointer(), C.int(flags))
	}
}

//export callbackQWindow_SetHeight
func callbackQWindow_SetHeight(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::setHeight")

	if signal := qt.GetSignal(C.GoString(ptrName), "setHeight"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectSetHeight(f func(arg int)) {
	defer qt.Recovering("connect QWindow::setHeight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setHeight", f)
	}
}

func (ptr *QWindow) DisconnectSetHeight(arg int) {
	defer qt.Recovering("disconnect QWindow::setHeight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setHeight")
	}
}

func (ptr *QWindow) SetHeight(arg int) {
	defer qt.Recovering("QWindow::setHeight")

	if ptr.Pointer() != nil {
		C.QWindow_SetHeight(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQWindow_SetMaximumHeight
func callbackQWindow_SetMaximumHeight(ptr unsafe.Pointer, ptrName *C.char, h C.int) {
	defer qt.Recovering("callback QWindow::setMaximumHeight")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMaximumHeight"); signal != nil {
		signal.(func(int))(int(h))
	}

}

func (ptr *QWindow) ConnectSetMaximumHeight(f func(h int)) {
	defer qt.Recovering("connect QWindow::setMaximumHeight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMaximumHeight", f)
	}
}

func (ptr *QWindow) DisconnectSetMaximumHeight(h int) {
	defer qt.Recovering("disconnect QWindow::setMaximumHeight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMaximumHeight")
	}
}

func (ptr *QWindow) SetMaximumHeight(h int) {
	defer qt.Recovering("QWindow::setMaximumHeight")

	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumHeight(ptr.Pointer(), C.int(h))
	}
}

//export callbackQWindow_SetMaximumWidth
func callbackQWindow_SetMaximumWidth(ptr unsafe.Pointer, ptrName *C.char, w C.int) {
	defer qt.Recovering("callback QWindow::setMaximumWidth")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMaximumWidth"); signal != nil {
		signal.(func(int))(int(w))
	}

}

func (ptr *QWindow) ConnectSetMaximumWidth(f func(w int)) {
	defer qt.Recovering("connect QWindow::setMaximumWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMaximumWidth", f)
	}
}

func (ptr *QWindow) DisconnectSetMaximumWidth(w int) {
	defer qt.Recovering("disconnect QWindow::setMaximumWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMaximumWidth")
	}
}

func (ptr *QWindow) SetMaximumWidth(w int) {
	defer qt.Recovering("QWindow::setMaximumWidth")

	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumWidth(ptr.Pointer(), C.int(w))
	}
}

//export callbackQWindow_SetMinimumHeight
func callbackQWindow_SetMinimumHeight(ptr unsafe.Pointer, ptrName *C.char, h C.int) {
	defer qt.Recovering("callback QWindow::setMinimumHeight")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMinimumHeight"); signal != nil {
		signal.(func(int))(int(h))
	}

}

func (ptr *QWindow) ConnectSetMinimumHeight(f func(h int)) {
	defer qt.Recovering("connect QWindow::setMinimumHeight")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMinimumHeight", f)
	}
}

func (ptr *QWindow) DisconnectSetMinimumHeight(h int) {
	defer qt.Recovering("disconnect QWindow::setMinimumHeight")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMinimumHeight")
	}
}

func (ptr *QWindow) SetMinimumHeight(h int) {
	defer qt.Recovering("QWindow::setMinimumHeight")

	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumHeight(ptr.Pointer(), C.int(h))
	}
}

//export callbackQWindow_SetMinimumWidth
func callbackQWindow_SetMinimumWidth(ptr unsafe.Pointer, ptrName *C.char, w C.int) {
	defer qt.Recovering("callback QWindow::setMinimumWidth")

	if signal := qt.GetSignal(C.GoString(ptrName), "setMinimumWidth"); signal != nil {
		signal.(func(int))(int(w))
	}

}

func (ptr *QWindow) ConnectSetMinimumWidth(f func(w int)) {
	defer qt.Recovering("connect QWindow::setMinimumWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setMinimumWidth", f)
	}
}

func (ptr *QWindow) DisconnectSetMinimumWidth(w int) {
	defer qt.Recovering("disconnect QWindow::setMinimumWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setMinimumWidth")
	}
}

func (ptr *QWindow) SetMinimumWidth(w int) {
	defer qt.Recovering("QWindow::setMinimumWidth")

	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumWidth(ptr.Pointer(), C.int(w))
	}
}

func (ptr *QWindow) SetModality(modality core.Qt__WindowModality) {
	defer qt.Recovering("QWindow::setModality")

	if ptr.Pointer() != nil {
		C.QWindow_SetModality(ptr.Pointer(), C.int(modality))
	}
}

func (ptr *QWindow) SetOpacity(level float64) {
	defer qt.Recovering("QWindow::setOpacity")

	if ptr.Pointer() != nil {
		C.QWindow_SetOpacity(ptr.Pointer(), C.double(level))
	}
}

//export callbackQWindow_SetTitle
func callbackQWindow_SetTitle(ptr unsafe.Pointer, ptrName *C.char, vqs *C.char) {
	defer qt.Recovering("callback QWindow::setTitle")

	if signal := qt.GetSignal(C.GoString(ptrName), "setTitle"); signal != nil {
		signal.(func(string))(C.GoString(vqs))
	}

}

func (ptr *QWindow) ConnectSetTitle(f func(vqs string)) {
	defer qt.Recovering("connect QWindow::setTitle")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setTitle", f)
	}
}

func (ptr *QWindow) DisconnectSetTitle(vqs string) {
	defer qt.Recovering("disconnect QWindow::setTitle")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setTitle")
	}
}

func (ptr *QWindow) SetTitle(vqs string) {
	defer qt.Recovering("QWindow::setTitle")

	if ptr.Pointer() != nil {
		C.QWindow_SetTitle(ptr.Pointer(), C.CString(vqs))
	}
}

func (ptr *QWindow) SetVisibility(v QWindow__Visibility) {
	defer qt.Recovering("QWindow::setVisibility")

	if ptr.Pointer() != nil {
		C.QWindow_SetVisibility(ptr.Pointer(), C.int(v))
	}
}

//export callbackQWindow_SetVisible
func callbackQWindow_SetVisible(ptr unsafe.Pointer, ptrName *C.char, visible C.int) {
	defer qt.Recovering("callback QWindow::setVisible")

	if signal := qt.GetSignal(C.GoString(ptrName), "setVisible"); signal != nil {
		signal.(func(bool))(int(visible) != 0)
	}

}

func (ptr *QWindow) ConnectSetVisible(f func(visible bool)) {
	defer qt.Recovering("connect QWindow::setVisible")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setVisible", f)
	}
}

func (ptr *QWindow) DisconnectSetVisible(visible bool) {
	defer qt.Recovering("disconnect QWindow::setVisible")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setVisible")
	}
}

func (ptr *QWindow) SetVisible(visible bool) {
	defer qt.Recovering("QWindow::setVisible")

	if ptr.Pointer() != nil {
		C.QWindow_SetVisible(ptr.Pointer(), C.int(qt.GoBoolToInt(visible)))
	}
}

//export callbackQWindow_SetWidth
func callbackQWindow_SetWidth(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::setWidth")

	if signal := qt.GetSignal(C.GoString(ptrName), "setWidth"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectSetWidth(f func(arg int)) {
	defer qt.Recovering("connect QWindow::setWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setWidth", f)
	}
}

func (ptr *QWindow) DisconnectSetWidth(arg int) {
	defer qt.Recovering("disconnect QWindow::setWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setWidth")
	}
}

func (ptr *QWindow) SetWidth(arg int) {
	defer qt.Recovering("QWindow::setWidth")

	if ptr.Pointer() != nil {
		C.QWindow_SetWidth(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQWindow_SetX
func callbackQWindow_SetX(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::setX")

	if signal := qt.GetSignal(C.GoString(ptrName), "setX"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectSetX(f func(arg int)) {
	defer qt.Recovering("connect QWindow::setX")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setX", f)
	}
}

func (ptr *QWindow) DisconnectSetX(arg int) {
	defer qt.Recovering("disconnect QWindow::setX")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setX")
	}
}

func (ptr *QWindow) SetX(arg int) {
	defer qt.Recovering("QWindow::setX")

	if ptr.Pointer() != nil {
		C.QWindow_SetX(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQWindow_SetY
func callbackQWindow_SetY(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::setY")

	if signal := qt.GetSignal(C.GoString(ptrName), "setY"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectSetY(f func(arg int)) {
	defer qt.Recovering("connect QWindow::setY")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "setY", f)
	}
}

func (ptr *QWindow) DisconnectSetY(arg int) {
	defer qt.Recovering("disconnect QWindow::setY")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "setY")
	}
}

func (ptr *QWindow) SetY(arg int) {
	defer qt.Recovering("QWindow::setY")

	if ptr.Pointer() != nil {
		C.QWindow_SetY(ptr.Pointer(), C.int(arg))
	}
}

func (ptr *QWindow) Title() string {
	defer qt.Recovering("QWindow::title")

	if ptr.Pointer() != nil {
		return C.GoString(C.QWindow_Title(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWindow) Visibility() QWindow__Visibility {
	defer qt.Recovering("QWindow::visibility")

	if ptr.Pointer() != nil {
		return QWindow__Visibility(C.QWindow_Visibility(ptr.Pointer()))
	}
	return 0
}

func NewQWindow(targetScreen QScreen_ITF) *QWindow {
	defer qt.Recovering("QWindow::QWindow")

	return newQWindowFromPointer(C.QWindow_NewQWindow(PointerFromQScreen(targetScreen)))
}

func NewQWindow2(parent QWindow_ITF) *QWindow {
	defer qt.Recovering("QWindow::QWindow")

	return newQWindowFromPointer(C.QWindow_NewQWindow2(PointerFromQWindow(parent)))
}

//export callbackQWindow_ActiveChanged
func callbackQWindow_ActiveChanged(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::activeChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "activeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectActiveChanged(f func()) {
	defer qt.Recovering("connect QWindow::activeChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectActiveChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "activeChanged", f)
	}
}

func (ptr *QWindow) DisconnectActiveChanged() {
	defer qt.Recovering("disconnect QWindow::activeChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectActiveChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "activeChanged")
	}
}

func (ptr *QWindow) ActiveChanged() {
	defer qt.Recovering("QWindow::activeChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ActiveChanged(ptr.Pointer())
	}
}

//export callbackQWindow_Alert
func callbackQWindow_Alert(ptr unsafe.Pointer, ptrName *C.char, msec C.int) {
	defer qt.Recovering("callback QWindow::alert")

	if signal := qt.GetSignal(C.GoString(ptrName), "alert"); signal != nil {
		signal.(func(int))(int(msec))
	}

}

func (ptr *QWindow) ConnectAlert(f func(msec int)) {
	defer qt.Recovering("connect QWindow::alert")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "alert", f)
	}
}

func (ptr *QWindow) DisconnectAlert(msec int) {
	defer qt.Recovering("disconnect QWindow::alert")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "alert")
	}
}

func (ptr *QWindow) Alert(msec int) {
	defer qt.Recovering("QWindow::alert")

	if ptr.Pointer() != nil {
		C.QWindow_Alert(ptr.Pointer(), C.int(msec))
	}
}

func (ptr *QWindow) BaseSize() *core.QSize {
	defer qt.Recovering("QWindow::baseSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QWindow_BaseSize(ptr.Pointer()))
	}
	return nil
}

//export callbackQWindow_Close
func callbackQWindow_Close(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QWindow::close")

	if signal := qt.GetSignal(C.GoString(ptrName), "close"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func() bool)()))
	}

	return C.int(qt.GoBoolToInt(false))
}

func (ptr *QWindow) ConnectClose(f func() bool) {
	defer qt.Recovering("connect QWindow::close")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "close", f)
	}
}

func (ptr *QWindow) DisconnectClose() {
	defer qt.Recovering("disconnect QWindow::close")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "close")
	}
}

func (ptr *QWindow) Close() bool {
	defer qt.Recovering("QWindow::close")

	if ptr.Pointer() != nil {
		return C.QWindow_Close(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQWindow_ContentOrientationChanged
func callbackQWindow_ContentOrientationChanged(ptr unsafe.Pointer, ptrName *C.char, orientation C.int) {
	defer qt.Recovering("callback QWindow::contentOrientationChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "contentOrientationChanged"); signal != nil {
		signal.(func(core.Qt__ScreenOrientation))(core.Qt__ScreenOrientation(orientation))
	}

}

func (ptr *QWindow) ConnectContentOrientationChanged(f func(orientation core.Qt__ScreenOrientation)) {
	defer qt.Recovering("connect QWindow::contentOrientationChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectContentOrientationChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "contentOrientationChanged", f)
	}
}

func (ptr *QWindow) DisconnectContentOrientationChanged() {
	defer qt.Recovering("disconnect QWindow::contentOrientationChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectContentOrientationChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "contentOrientationChanged")
	}
}

func (ptr *QWindow) ContentOrientationChanged(orientation core.Qt__ScreenOrientation) {
	defer qt.Recovering("QWindow::contentOrientationChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ContentOrientationChanged(ptr.Pointer(), C.int(orientation))
	}
}

func (ptr *QWindow) Create() {
	defer qt.Recovering("QWindow::create")

	if ptr.Pointer() != nil {
		C.QWindow_Create(ptr.Pointer())
	}
}

func (ptr *QWindow) Cursor() *QCursor {
	defer qt.Recovering("QWindow::cursor")

	if ptr.Pointer() != nil {
		return NewQCursorFromPointer(C.QWindow_Cursor(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) Destroy() {
	defer qt.Recovering("QWindow::destroy")

	if ptr.Pointer() != nil {
		C.QWindow_Destroy(ptr.Pointer())
	}
}

func (ptr *QWindow) DevicePixelRatio() float64 {
	defer qt.Recovering("QWindow::devicePixelRatio")

	if ptr.Pointer() != nil {
		return float64(C.QWindow_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_Event
func callbackQWindow_Event(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) C.int {
	defer qt.Recovering("callback QWindow::event")

	if signal := qt.GetSignal(C.GoString(ptrName), "event"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(ev))))
	}

	return C.int(qt.GoBoolToInt(NewQWindowFromPointer(ptr).EventDefault(core.NewQEventFromPointer(ev))))
}

func (ptr *QWindow) ConnectEvent(f func(ev *core.QEvent) bool) {
	defer qt.Recovering("connect QWindow::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "event", f)
	}
}

func (ptr *QWindow) DisconnectEvent() {
	defer qt.Recovering("disconnect QWindow::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "event")
	}
}

func (ptr *QWindow) Event(ev core.QEvent_ITF) bool {
	defer qt.Recovering("QWindow::event")

	if ptr.Pointer() != nil {
		return C.QWindow_Event(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

func (ptr *QWindow) EventDefault(ev core.QEvent_ITF) bool {
	defer qt.Recovering("QWindow::event")

	if ptr.Pointer() != nil {
		return C.QWindow_EventDefault(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

//export callbackQWindow_ExposeEvent
func callbackQWindow_ExposeEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::exposeEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "exposeEvent"); signal != nil {
		signal.(func(*QExposeEvent))(NewQExposeEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).ExposeEventDefault(NewQExposeEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectExposeEvent(f func(ev *QExposeEvent)) {
	defer qt.Recovering("connect QWindow::exposeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "exposeEvent", f)
	}
}

func (ptr *QWindow) DisconnectExposeEvent() {
	defer qt.Recovering("disconnect QWindow::exposeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "exposeEvent")
	}
}

func (ptr *QWindow) ExposeEvent(ev QExposeEvent_ITF) {
	defer qt.Recovering("QWindow::exposeEvent")

	if ptr.Pointer() != nil {
		C.QWindow_ExposeEvent(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

func (ptr *QWindow) ExposeEventDefault(ev QExposeEvent_ITF) {
	defer qt.Recovering("QWindow::exposeEvent")

	if ptr.Pointer() != nil {
		C.QWindow_ExposeEventDefault(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

func (ptr *QWindow) FilePath() string {
	defer qt.Recovering("QWindow::filePath")

	if ptr.Pointer() != nil {
		return C.GoString(C.QWindow_FilePath(ptr.Pointer()))
	}
	return ""
}

//export callbackQWindow_FocusInEvent
func callbackQWindow_FocusInEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::focusInEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusInEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).FocusInEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectFocusInEvent(f func(ev *QFocusEvent)) {
	defer qt.Recovering("connect QWindow::focusInEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "focusInEvent", f)
	}
}

func (ptr *QWindow) DisconnectFocusInEvent() {
	defer qt.Recovering("disconnect QWindow::focusInEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "focusInEvent")
	}
}

func (ptr *QWindow) FocusInEvent(ev QFocusEvent_ITF) {
	defer qt.Recovering("QWindow::focusInEvent")

	if ptr.Pointer() != nil {
		C.QWindow_FocusInEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QWindow) FocusInEventDefault(ev QFocusEvent_ITF) {
	defer qt.Recovering("QWindow::focusInEvent")

	if ptr.Pointer() != nil {
		C.QWindow_FocusInEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQWindow_FocusObject
func callbackQWindow_FocusObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QWindow::focusObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusObject"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQWindowFromPointer(ptr).FocusObjectDefault())
}

func (ptr *QWindow) ConnectFocusObject(f func() *core.QObject) {
	defer qt.Recovering("connect QWindow::focusObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "focusObject", f)
	}
}

func (ptr *QWindow) DisconnectFocusObject() {
	defer qt.Recovering("disconnect QWindow::focusObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "focusObject")
	}
}

func (ptr *QWindow) FocusObject() *core.QObject {
	defer qt.Recovering("QWindow::focusObject")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QWindow_FocusObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) FocusObjectDefault() *core.QObject {
	defer qt.Recovering("QWindow::focusObject")

	if ptr.Pointer() != nil {
		return core.NewQObjectFromPointer(C.QWindow_FocusObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQWindow_FocusObjectChanged
func callbackQWindow_FocusObjectChanged(ptr unsafe.Pointer, ptrName *C.char, object unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::focusObjectChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusObjectChanged"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(object))
	}

}

func (ptr *QWindow) ConnectFocusObjectChanged(f func(object *core.QObject)) {
	defer qt.Recovering("connect QWindow::focusObjectChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectFocusObjectChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "focusObjectChanged", f)
	}
}

func (ptr *QWindow) DisconnectFocusObjectChanged() {
	defer qt.Recovering("disconnect QWindow::focusObjectChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectFocusObjectChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "focusObjectChanged")
	}
}

func (ptr *QWindow) FocusObjectChanged(object core.QObject_ITF) {
	defer qt.Recovering("QWindow::focusObjectChanged")

	if ptr.Pointer() != nil {
		C.QWindow_FocusObjectChanged(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

//export callbackQWindow_FocusOutEvent
func callbackQWindow_FocusOutEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::focusOutEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "focusOutEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).FocusOutEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectFocusOutEvent(f func(ev *QFocusEvent)) {
	defer qt.Recovering("connect QWindow::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "focusOutEvent", f)
	}
}

func (ptr *QWindow) DisconnectFocusOutEvent() {
	defer qt.Recovering("disconnect QWindow::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "focusOutEvent")
	}
}

func (ptr *QWindow) FocusOutEvent(ev QFocusEvent_ITF) {
	defer qt.Recovering("QWindow::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QWindow_FocusOutEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QWindow) FocusOutEventDefault(ev QFocusEvent_ITF) {
	defer qt.Recovering("QWindow::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QWindow_FocusOutEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQWindow_Format
func callbackQWindow_Format(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QWindow::format")

	if signal := qt.GetSignal(C.GoString(ptrName), "format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQWindowFromPointer(ptr).FormatDefault())
}

func (ptr *QWindow) ConnectFormat(f func() *QSurfaceFormat) {
	defer qt.Recovering("connect QWindow::format")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "format", f)
	}
}

func (ptr *QWindow) DisconnectFormat() {
	defer qt.Recovering("disconnect QWindow::format")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "format")
	}
}

func (ptr *QWindow) Format() *QSurfaceFormat {
	defer qt.Recovering("QWindow::format")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QWindow_Format(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) FormatDefault() *QSurfaceFormat {
	defer qt.Recovering("QWindow::format")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QWindow_FormatDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) FrameGeometry() *core.QRect {
	defer qt.Recovering("QWindow::frameGeometry")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QWindow_FrameGeometry(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) FrameMargins() *core.QMargins {
	defer qt.Recovering("QWindow::frameMargins")

	if ptr.Pointer() != nil {
		return core.NewQMarginsFromPointer(C.QWindow_FrameMargins(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) FramePosition() *core.QPoint {
	defer qt.Recovering("QWindow::framePosition")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QWindow_FramePosition(ptr.Pointer()))
	}
	return nil
}

func QWindow_FromWinId(id uintptr) *QWindow {
	defer qt.Recovering("QWindow::fromWinId")

	return NewQWindowFromPointer(C.QWindow_QWindow_FromWinId(C.ulonglong(id)))
}

func (ptr *QWindow) FromWinId(id uintptr) *QWindow {
	defer qt.Recovering("QWindow::fromWinId")

	return NewQWindowFromPointer(C.QWindow_QWindow_FromWinId(C.ulonglong(id)))
}

func (ptr *QWindow) Geometry() *core.QRect {
	defer qt.Recovering("QWindow::geometry")

	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QWindow_Geometry(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) Height() int {
	defer qt.Recovering("QWindow::height")

	if ptr.Pointer() != nil {
		return int(C.QWindow_Height(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_HeightChanged
func callbackQWindow_HeightChanged(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::heightChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "heightChanged"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectHeightChanged(f func(arg int)) {
	defer qt.Recovering("connect QWindow::heightChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectHeightChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "heightChanged", f)
	}
}

func (ptr *QWindow) DisconnectHeightChanged() {
	defer qt.Recovering("disconnect QWindow::heightChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectHeightChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "heightChanged")
	}
}

func (ptr *QWindow) HeightChanged(arg int) {
	defer qt.Recovering("QWindow::heightChanged")

	if ptr.Pointer() != nil {
		C.QWindow_HeightChanged(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQWindow_Hide
func callbackQWindow_Hide(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::hide")

	if signal := qt.GetSignal(C.GoString(ptrName), "hide"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectHide(f func()) {
	defer qt.Recovering("connect QWindow::hide")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "hide", f)
	}
}

func (ptr *QWindow) DisconnectHide() {
	defer qt.Recovering("disconnect QWindow::hide")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "hide")
	}
}

func (ptr *QWindow) Hide() {
	defer qt.Recovering("QWindow::hide")

	if ptr.Pointer() != nil {
		C.QWindow_Hide(ptr.Pointer())
	}
}

//export callbackQWindow_HideEvent
func callbackQWindow_HideEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::hideEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "hideEvent"); signal != nil {
		signal.(func(*QHideEvent))(NewQHideEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).HideEventDefault(NewQHideEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectHideEvent(f func(ev *QHideEvent)) {
	defer qt.Recovering("connect QWindow::hideEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "hideEvent", f)
	}
}

func (ptr *QWindow) DisconnectHideEvent() {
	defer qt.Recovering("disconnect QWindow::hideEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "hideEvent")
	}
}

func (ptr *QWindow) HideEvent(ev QHideEvent_ITF) {
	defer qt.Recovering("QWindow::hideEvent")

	if ptr.Pointer() != nil {
		C.QWindow_HideEvent(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

func (ptr *QWindow) HideEventDefault(ev QHideEvent_ITF) {
	defer qt.Recovering("QWindow::hideEvent")

	if ptr.Pointer() != nil {
		C.QWindow_HideEventDefault(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

func (ptr *QWindow) Icon() *QIcon {
	defer qt.Recovering("QWindow::icon")

	if ptr.Pointer() != nil {
		return NewQIconFromPointer(C.QWindow_Icon(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) IsActive() bool {
	defer qt.Recovering("QWindow::isActive")

	if ptr.Pointer() != nil {
		return C.QWindow_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsAncestorOf(child QWindow_ITF, mode QWindow__AncestorMode) bool {
	defer qt.Recovering("QWindow::isAncestorOf")

	if ptr.Pointer() != nil {
		return C.QWindow_IsAncestorOf(ptr.Pointer(), PointerFromQWindow(child), C.int(mode)) != 0
	}
	return false
}

func (ptr *QWindow) IsExposed() bool {
	defer qt.Recovering("QWindow::isExposed")

	if ptr.Pointer() != nil {
		return C.QWindow_IsExposed(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsModal() bool {
	defer qt.Recovering("QWindow::isModal")

	if ptr.Pointer() != nil {
		return C.QWindow_IsModal(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsTopLevel() bool {
	defer qt.Recovering("QWindow::isTopLevel")

	if ptr.Pointer() != nil {
		return C.QWindow_IsTopLevel(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQWindow_KeyPressEvent
func callbackQWindow_KeyPressEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::keyPressEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "keyPressEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).KeyPressEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectKeyPressEvent(f func(ev *QKeyEvent)) {
	defer qt.Recovering("connect QWindow::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "keyPressEvent", f)
	}
}

func (ptr *QWindow) DisconnectKeyPressEvent() {
	defer qt.Recovering("disconnect QWindow::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "keyPressEvent")
	}
}

func (ptr *QWindow) KeyPressEvent(ev QKeyEvent_ITF) {
	defer qt.Recovering("QWindow::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QWindow_KeyPressEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QWindow) KeyPressEventDefault(ev QKeyEvent_ITF) {
	defer qt.Recovering("QWindow::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QWindow_KeyPressEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQWindow_KeyReleaseEvent
func callbackQWindow_KeyReleaseEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::keyReleaseEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "keyReleaseEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).KeyReleaseEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectKeyReleaseEvent(f func(ev *QKeyEvent)) {
	defer qt.Recovering("connect QWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "keyReleaseEvent", f)
	}
}

func (ptr *QWindow) DisconnectKeyReleaseEvent() {
	defer qt.Recovering("disconnect QWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "keyReleaseEvent")
	}
}

func (ptr *QWindow) KeyReleaseEvent(ev QKeyEvent_ITF) {
	defer qt.Recovering("QWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QWindow_KeyReleaseEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QWindow) KeyReleaseEventDefault(ev QKeyEvent_ITF) {
	defer qt.Recovering("QWindow::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QWindow_KeyReleaseEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQWindow_Lower
func callbackQWindow_Lower(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::lower")

	if signal := qt.GetSignal(C.GoString(ptrName), "lower"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectLower(f func()) {
	defer qt.Recovering("connect QWindow::lower")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "lower", f)
	}
}

func (ptr *QWindow) DisconnectLower() {
	defer qt.Recovering("disconnect QWindow::lower")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "lower")
	}
}

func (ptr *QWindow) Lower() {
	defer qt.Recovering("QWindow::lower")

	if ptr.Pointer() != nil {
		C.QWindow_Lower(ptr.Pointer())
	}
}

func (ptr *QWindow) Mask() *QRegion {
	defer qt.Recovering("QWindow::mask")

	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QWindow_Mask(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) MaximumHeight() int {
	defer qt.Recovering("QWindow::maximumHeight")

	if ptr.Pointer() != nil {
		return int(C.QWindow_MaximumHeight(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_MaximumHeightChanged
func callbackQWindow_MaximumHeightChanged(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::maximumHeightChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "maximumHeightChanged"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectMaximumHeightChanged(f func(arg int)) {
	defer qt.Recovering("connect QWindow::maximumHeightChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectMaximumHeightChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "maximumHeightChanged", f)
	}
}

func (ptr *QWindow) DisconnectMaximumHeightChanged() {
	defer qt.Recovering("disconnect QWindow::maximumHeightChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMaximumHeightChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "maximumHeightChanged")
	}
}

func (ptr *QWindow) MaximumHeightChanged(arg int) {
	defer qt.Recovering("QWindow::maximumHeightChanged")

	if ptr.Pointer() != nil {
		C.QWindow_MaximumHeightChanged(ptr.Pointer(), C.int(arg))
	}
}

func (ptr *QWindow) MaximumSize() *core.QSize {
	defer qt.Recovering("QWindow::maximumSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QWindow_MaximumSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) MaximumWidth() int {
	defer qt.Recovering("QWindow::maximumWidth")

	if ptr.Pointer() != nil {
		return int(C.QWindow_MaximumWidth(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_MaximumWidthChanged
func callbackQWindow_MaximumWidthChanged(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::maximumWidthChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "maximumWidthChanged"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectMaximumWidthChanged(f func(arg int)) {
	defer qt.Recovering("connect QWindow::maximumWidthChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectMaximumWidthChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "maximumWidthChanged", f)
	}
}

func (ptr *QWindow) DisconnectMaximumWidthChanged() {
	defer qt.Recovering("disconnect QWindow::maximumWidthChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMaximumWidthChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "maximumWidthChanged")
	}
}

func (ptr *QWindow) MaximumWidthChanged(arg int) {
	defer qt.Recovering("QWindow::maximumWidthChanged")

	if ptr.Pointer() != nil {
		C.QWindow_MaximumWidthChanged(ptr.Pointer(), C.int(arg))
	}
}

func (ptr *QWindow) MinimumHeight() int {
	defer qt.Recovering("QWindow::minimumHeight")

	if ptr.Pointer() != nil {
		return int(C.QWindow_MinimumHeight(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_MinimumHeightChanged
func callbackQWindow_MinimumHeightChanged(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::minimumHeightChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "minimumHeightChanged"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectMinimumHeightChanged(f func(arg int)) {
	defer qt.Recovering("connect QWindow::minimumHeightChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectMinimumHeightChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "minimumHeightChanged", f)
	}
}

func (ptr *QWindow) DisconnectMinimumHeightChanged() {
	defer qt.Recovering("disconnect QWindow::minimumHeightChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMinimumHeightChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "minimumHeightChanged")
	}
}

func (ptr *QWindow) MinimumHeightChanged(arg int) {
	defer qt.Recovering("QWindow::minimumHeightChanged")

	if ptr.Pointer() != nil {
		C.QWindow_MinimumHeightChanged(ptr.Pointer(), C.int(arg))
	}
}

func (ptr *QWindow) MinimumSize() *core.QSize {
	defer qt.Recovering("QWindow::minimumSize")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QWindow_MinimumSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) MinimumWidth() int {
	defer qt.Recovering("QWindow::minimumWidth")

	if ptr.Pointer() != nil {
		return int(C.QWindow_MinimumWidth(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_MinimumWidthChanged
func callbackQWindow_MinimumWidthChanged(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::minimumWidthChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "minimumWidthChanged"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectMinimumWidthChanged(f func(arg int)) {
	defer qt.Recovering("connect QWindow::minimumWidthChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectMinimumWidthChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "minimumWidthChanged", f)
	}
}

func (ptr *QWindow) DisconnectMinimumWidthChanged() {
	defer qt.Recovering("disconnect QWindow::minimumWidthChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMinimumWidthChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "minimumWidthChanged")
	}
}

func (ptr *QWindow) MinimumWidthChanged(arg int) {
	defer qt.Recovering("QWindow::minimumWidthChanged")

	if ptr.Pointer() != nil {
		C.QWindow_MinimumWidthChanged(ptr.Pointer(), C.int(arg))
	}
}

//export callbackQWindow_ModalityChanged
func callbackQWindow_ModalityChanged(ptr unsafe.Pointer, ptrName *C.char, modality C.int) {
	defer qt.Recovering("callback QWindow::modalityChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "modalityChanged"); signal != nil {
		signal.(func(core.Qt__WindowModality))(core.Qt__WindowModality(modality))
	}

}

func (ptr *QWindow) ConnectModalityChanged(f func(modality core.Qt__WindowModality)) {
	defer qt.Recovering("connect QWindow::modalityChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectModalityChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "modalityChanged", f)
	}
}

func (ptr *QWindow) DisconnectModalityChanged() {
	defer qt.Recovering("disconnect QWindow::modalityChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectModalityChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "modalityChanged")
	}
}

func (ptr *QWindow) ModalityChanged(modality core.Qt__WindowModality) {
	defer qt.Recovering("QWindow::modalityChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ModalityChanged(ptr.Pointer(), C.int(modality))
	}
}

//export callbackQWindow_MouseDoubleClickEvent
func callbackQWindow_MouseDoubleClickEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::mouseDoubleClickEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseDoubleClickEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MouseDoubleClickEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMouseDoubleClickEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mouseDoubleClickEvent", f)
	}
}

func (ptr *QWindow) DisconnectMouseDoubleClickEvent() {
	defer qt.Recovering("disconnect QWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mouseDoubleClickEvent")
	}
}

func (ptr *QWindow) MouseDoubleClickEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MouseDoubleClickEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MouseDoubleClickEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QWindow::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MouseDoubleClickEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MouseMoveEvent
func callbackQWindow_MouseMoveEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::mouseMoveEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseMoveEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MouseMoveEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMouseMoveEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mouseMoveEvent", f)
	}
}

func (ptr *QWindow) DisconnectMouseMoveEvent() {
	defer qt.Recovering("disconnect QWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mouseMoveEvent")
	}
}

func (ptr *QWindow) MouseMoveEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MouseMoveEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MouseMoveEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QWindow::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MouseMoveEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MousePressEvent
func callbackQWindow_MousePressEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::mousePressEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mousePressEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MousePressEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMousePressEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QWindow::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mousePressEvent", f)
	}
}

func (ptr *QWindow) DisconnectMousePressEvent() {
	defer qt.Recovering("disconnect QWindow::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mousePressEvent")
	}
}

func (ptr *QWindow) MousePressEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QWindow::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MousePressEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MousePressEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QWindow::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MousePressEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MouseReleaseEvent
func callbackQWindow_MouseReleaseEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::mouseReleaseEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "mouseReleaseEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MouseReleaseEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMouseReleaseEvent(f func(ev *QMouseEvent)) {
	defer qt.Recovering("connect QWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "mouseReleaseEvent", f)
	}
}

func (ptr *QWindow) DisconnectMouseReleaseEvent() {
	defer qt.Recovering("disconnect QWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "mouseReleaseEvent")
	}
}

func (ptr *QWindow) MouseReleaseEvent(ev QMouseEvent_ITF) {
	defer qt.Recovering("QWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MouseReleaseEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MouseReleaseEventDefault(ev QMouseEvent_ITF) {
	defer qt.Recovering("QWindow::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MouseReleaseEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MoveEvent
func callbackQWindow_MoveEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::moveEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "moveEvent"); signal != nil {
		signal.(func(*QMoveEvent))(NewQMoveEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MoveEventDefault(NewQMoveEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMoveEvent(f func(ev *QMoveEvent)) {
	defer qt.Recovering("connect QWindow::moveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "moveEvent", f)
	}
}

func (ptr *QWindow) DisconnectMoveEvent() {
	defer qt.Recovering("disconnect QWindow::moveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "moveEvent")
	}
}

func (ptr *QWindow) MoveEvent(ev QMoveEvent_ITF) {
	defer qt.Recovering("QWindow::moveEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MoveEvent(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

func (ptr *QWindow) MoveEventDefault(ev QMoveEvent_ITF) {
	defer qt.Recovering("QWindow::moveEvent")

	if ptr.Pointer() != nil {
		C.QWindow_MoveEventDefault(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

//export callbackQWindow_NativeEvent
func callbackQWindow_NativeEvent(ptr unsafe.Pointer, ptrName *C.char, eventType *C.char, message unsafe.Pointer, result C.long) C.int {
	defer qt.Recovering("callback QWindow::nativeEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "nativeEvent"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(string, unsafe.Pointer, int) bool)(C.GoString(eventType), message, int(result))))
	}

	return C.int(qt.GoBoolToInt(NewQWindowFromPointer(ptr).NativeEventDefault(C.GoString(eventType), message, int(result))))
}

func (ptr *QWindow) ConnectNativeEvent(f func(eventType string, message unsafe.Pointer, result int) bool) {
	defer qt.Recovering("connect QWindow::nativeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "nativeEvent", f)
	}
}

func (ptr *QWindow) DisconnectNativeEvent() {
	defer qt.Recovering("disconnect QWindow::nativeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "nativeEvent")
	}
}

func (ptr *QWindow) NativeEvent(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QWindow::nativeEvent")

	if ptr.Pointer() != nil {
		return C.QWindow_NativeEvent(ptr.Pointer(), C.CString(eventType), message, C.long(result)) != 0
	}
	return false
}

func (ptr *QWindow) NativeEventDefault(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QWindow::nativeEvent")

	if ptr.Pointer() != nil {
		return C.QWindow_NativeEventDefault(ptr.Pointer(), C.CString(eventType), message, C.long(result)) != 0
	}
	return false
}

//export callbackQWindow_OpacityChanged
func callbackQWindow_OpacityChanged(ptr unsafe.Pointer, ptrName *C.char, opacity C.double) {
	defer qt.Recovering("callback QWindow::opacityChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "opacityChanged"); signal != nil {
		signal.(func(float64))(float64(opacity))
	}

}

func (ptr *QWindow) ConnectOpacityChanged(f func(opacity float64)) {
	defer qt.Recovering("connect QWindow::opacityChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectOpacityChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "opacityChanged", f)
	}
}

func (ptr *QWindow) DisconnectOpacityChanged() {
	defer qt.Recovering("disconnect QWindow::opacityChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectOpacityChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "opacityChanged")
	}
}

func (ptr *QWindow) OpacityChanged(opacity float64) {
	defer qt.Recovering("QWindow::opacityChanged")

	if ptr.Pointer() != nil {
		C.QWindow_OpacityChanged(ptr.Pointer(), C.double(opacity))
	}
}

func (ptr *QWindow) Parent() *QWindow {
	defer qt.Recovering("QWindow::parent")

	if ptr.Pointer() != nil {
		return NewQWindowFromPointer(C.QWindow_Parent(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) Position() *core.QPoint {
	defer qt.Recovering("QWindow::position")

	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QWindow_Position(ptr.Pointer()))
	}
	return nil
}

//export callbackQWindow_Raise
func callbackQWindow_Raise(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::raise")

	if signal := qt.GetSignal(C.GoString(ptrName), "raise"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectRaise(f func()) {
	defer qt.Recovering("connect QWindow::raise")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "raise", f)
	}
}

func (ptr *QWindow) DisconnectRaise() {
	defer qt.Recovering("disconnect QWindow::raise")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "raise")
	}
}

func (ptr *QWindow) Raise() {
	defer qt.Recovering("QWindow::raise")

	if ptr.Pointer() != nil {
		C.QWindow_Raise(ptr.Pointer())
	}
}

//export callbackQWindow_RequestActivate
func callbackQWindow_RequestActivate(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::requestActivate")

	if signal := qt.GetSignal(C.GoString(ptrName), "requestActivate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectRequestActivate(f func()) {
	defer qt.Recovering("connect QWindow::requestActivate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "requestActivate", f)
	}
}

func (ptr *QWindow) DisconnectRequestActivate() {
	defer qt.Recovering("disconnect QWindow::requestActivate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "requestActivate")
	}
}

func (ptr *QWindow) RequestActivate() {
	defer qt.Recovering("QWindow::requestActivate")

	if ptr.Pointer() != nil {
		C.QWindow_RequestActivate(ptr.Pointer())
	}
}

//export callbackQWindow_RequestUpdate
func callbackQWindow_RequestUpdate(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::requestUpdate")

	if signal := qt.GetSignal(C.GoString(ptrName), "requestUpdate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectRequestUpdate(f func()) {
	defer qt.Recovering("connect QWindow::requestUpdate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "requestUpdate", f)
	}
}

func (ptr *QWindow) DisconnectRequestUpdate() {
	defer qt.Recovering("disconnect QWindow::requestUpdate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "requestUpdate")
	}
}

func (ptr *QWindow) RequestUpdate() {
	defer qt.Recovering("QWindow::requestUpdate")

	if ptr.Pointer() != nil {
		C.QWindow_RequestUpdate(ptr.Pointer())
	}
}

func (ptr *QWindow) RequestedFormat() *QSurfaceFormat {
	defer qt.Recovering("QWindow::requestedFormat")

	if ptr.Pointer() != nil {
		return NewQSurfaceFormatFromPointer(C.QWindow_RequestedFormat(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) Resize(newSize core.QSize_ITF) {
	defer qt.Recovering("QWindow::resize")

	if ptr.Pointer() != nil {
		C.QWindow_Resize(ptr.Pointer(), core.PointerFromQSize(newSize))
	}
}

func (ptr *QWindow) Resize2(w int, h int) {
	defer qt.Recovering("QWindow::resize")

	if ptr.Pointer() != nil {
		C.QWindow_Resize2(ptr.Pointer(), C.int(w), C.int(h))
	}
}

//export callbackQWindow_ResizeEvent
func callbackQWindow_ResizeEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::resizeEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "resizeEvent"); signal != nil {
		signal.(func(*QResizeEvent))(NewQResizeEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).ResizeEventDefault(NewQResizeEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectResizeEvent(f func(ev *QResizeEvent)) {
	defer qt.Recovering("connect QWindow::resizeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "resizeEvent", f)
	}
}

func (ptr *QWindow) DisconnectResizeEvent() {
	defer qt.Recovering("disconnect QWindow::resizeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "resizeEvent")
	}
}

func (ptr *QWindow) ResizeEvent(ev QResizeEvent_ITF) {
	defer qt.Recovering("QWindow::resizeEvent")

	if ptr.Pointer() != nil {
		C.QWindow_ResizeEvent(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

func (ptr *QWindow) ResizeEventDefault(ev QResizeEvent_ITF) {
	defer qt.Recovering("QWindow::resizeEvent")

	if ptr.Pointer() != nil {
		C.QWindow_ResizeEventDefault(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

func (ptr *QWindow) Screen() *QScreen {
	defer qt.Recovering("QWindow::screen")

	if ptr.Pointer() != nil {
		return NewQScreenFromPointer(C.QWindow_Screen(ptr.Pointer()))
	}
	return nil
}

//export callbackQWindow_ScreenChanged
func callbackQWindow_ScreenChanged(ptr unsafe.Pointer, ptrName *C.char, screen unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::screenChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "screenChanged"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QWindow) ConnectScreenChanged(f func(screen *QScreen)) {
	defer qt.Recovering("connect QWindow::screenChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectScreenChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "screenChanged", f)
	}
}

func (ptr *QWindow) DisconnectScreenChanged() {
	defer qt.Recovering("disconnect QWindow::screenChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "screenChanged")
	}
}

func (ptr *QWindow) ScreenChanged(screen QScreen_ITF) {
	defer qt.Recovering("QWindow::screenChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ScreenChanged(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func (ptr *QWindow) SetBaseSize(size core.QSize_ITF) {
	defer qt.Recovering("QWindow::setBaseSize")

	if ptr.Pointer() != nil {
		C.QWindow_SetBaseSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetCursor(cursor QCursor_ITF) {
	defer qt.Recovering("QWindow::setCursor")

	if ptr.Pointer() != nil {
		C.QWindow_SetCursor(ptr.Pointer(), PointerFromQCursor(cursor))
	}
}

func (ptr *QWindow) SetFilePath(filePath string) {
	defer qt.Recovering("QWindow::setFilePath")

	if ptr.Pointer() != nil {
		C.QWindow_SetFilePath(ptr.Pointer(), C.CString(filePath))
	}
}

func (ptr *QWindow) SetFormat(format QSurfaceFormat_ITF) {
	defer qt.Recovering("QWindow::setFormat")

	if ptr.Pointer() != nil {
		C.QWindow_SetFormat(ptr.Pointer(), PointerFromQSurfaceFormat(format))
	}
}

func (ptr *QWindow) SetFramePosition(point core.QPoint_ITF) {
	defer qt.Recovering("QWindow::setFramePosition")

	if ptr.Pointer() != nil {
		C.QWindow_SetFramePosition(ptr.Pointer(), core.PointerFromQPoint(point))
	}
}

func (ptr *QWindow) SetGeometry2(rect core.QRect_ITF) {
	defer qt.Recovering("QWindow::setGeometry")

	if ptr.Pointer() != nil {
		C.QWindow_SetGeometry2(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QWindow) SetGeometry(posx int, posy int, w int, h int) {
	defer qt.Recovering("QWindow::setGeometry")

	if ptr.Pointer() != nil {
		C.QWindow_SetGeometry(ptr.Pointer(), C.int(posx), C.int(posy), C.int(w), C.int(h))
	}
}

func (ptr *QWindow) SetIcon(icon QIcon_ITF) {
	defer qt.Recovering("QWindow::setIcon")

	if ptr.Pointer() != nil {
		C.QWindow_SetIcon(ptr.Pointer(), PointerFromQIcon(icon))
	}
}

func (ptr *QWindow) SetKeyboardGrabEnabled(grab bool) bool {
	defer qt.Recovering("QWindow::setKeyboardGrabEnabled")

	if ptr.Pointer() != nil {
		return C.QWindow_SetKeyboardGrabEnabled(ptr.Pointer(), C.int(qt.GoBoolToInt(grab))) != 0
	}
	return false
}

func (ptr *QWindow) SetMask(region QRegion_ITF) {
	defer qt.Recovering("QWindow::setMask")

	if ptr.Pointer() != nil {
		C.QWindow_SetMask(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QWindow) SetMaximumSize(size core.QSize_ITF) {
	defer qt.Recovering("QWindow::setMaximumSize")

	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetMinimumSize(size core.QSize_ITF) {
	defer qt.Recovering("QWindow::setMinimumSize")

	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetMouseGrabEnabled(grab bool) bool {
	defer qt.Recovering("QWindow::setMouseGrabEnabled")

	if ptr.Pointer() != nil {
		return C.QWindow_SetMouseGrabEnabled(ptr.Pointer(), C.int(qt.GoBoolToInt(grab))) != 0
	}
	return false
}

func (ptr *QWindow) SetParent(parent QWindow_ITF) {
	defer qt.Recovering("QWindow::setParent")

	if ptr.Pointer() != nil {
		C.QWindow_SetParent(ptr.Pointer(), PointerFromQWindow(parent))
	}
}

func (ptr *QWindow) SetPosition(pt core.QPoint_ITF) {
	defer qt.Recovering("QWindow::setPosition")

	if ptr.Pointer() != nil {
		C.QWindow_SetPosition(ptr.Pointer(), core.PointerFromQPoint(pt))
	}
}

func (ptr *QWindow) SetPosition2(posx int, posy int) {
	defer qt.Recovering("QWindow::setPosition")

	if ptr.Pointer() != nil {
		C.QWindow_SetPosition2(ptr.Pointer(), C.int(posx), C.int(posy))
	}
}

func (ptr *QWindow) SetScreen(newScreen QScreen_ITF) {
	defer qt.Recovering("QWindow::setScreen")

	if ptr.Pointer() != nil {
		C.QWindow_SetScreen(ptr.Pointer(), PointerFromQScreen(newScreen))
	}
}

func (ptr *QWindow) SetSizeIncrement(size core.QSize_ITF) {
	defer qt.Recovering("QWindow::setSizeIncrement")

	if ptr.Pointer() != nil {
		C.QWindow_SetSizeIncrement(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetSurfaceType(surfaceType QSurface__SurfaceType) {
	defer qt.Recovering("QWindow::setSurfaceType")

	if ptr.Pointer() != nil {
		C.QWindow_SetSurfaceType(ptr.Pointer(), C.int(surfaceType))
	}
}

func (ptr *QWindow) SetTransientParent(parent QWindow_ITF) {
	defer qt.Recovering("QWindow::setTransientParent")

	if ptr.Pointer() != nil {
		C.QWindow_SetTransientParent(ptr.Pointer(), PointerFromQWindow(parent))
	}
}

func (ptr *QWindow) SetWindowState(state core.Qt__WindowState) {
	defer qt.Recovering("QWindow::setWindowState")

	if ptr.Pointer() != nil {
		C.QWindow_SetWindowState(ptr.Pointer(), C.int(state))
	}
}

//export callbackQWindow_Show
func callbackQWindow_Show(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::show")

	if signal := qt.GetSignal(C.GoString(ptrName), "show"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShow(f func()) {
	defer qt.Recovering("connect QWindow::show")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "show", f)
	}
}

func (ptr *QWindow) DisconnectShow() {
	defer qt.Recovering("disconnect QWindow::show")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "show")
	}
}

func (ptr *QWindow) Show() {
	defer qt.Recovering("QWindow::show")

	if ptr.Pointer() != nil {
		C.QWindow_Show(ptr.Pointer())
	}
}

//export callbackQWindow_ShowEvent
func callbackQWindow_ShowEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::showEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "showEvent"); signal != nil {
		signal.(func(*QShowEvent))(NewQShowEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).ShowEventDefault(NewQShowEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectShowEvent(f func(ev *QShowEvent)) {
	defer qt.Recovering("connect QWindow::showEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showEvent", f)
	}
}

func (ptr *QWindow) DisconnectShowEvent() {
	defer qt.Recovering("disconnect QWindow::showEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showEvent")
	}
}

func (ptr *QWindow) ShowEvent(ev QShowEvent_ITF) {
	defer qt.Recovering("QWindow::showEvent")

	if ptr.Pointer() != nil {
		C.QWindow_ShowEvent(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

func (ptr *QWindow) ShowEventDefault(ev QShowEvent_ITF) {
	defer qt.Recovering("QWindow::showEvent")

	if ptr.Pointer() != nil {
		C.QWindow_ShowEventDefault(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

//export callbackQWindow_ShowFullScreen
func callbackQWindow_ShowFullScreen(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::showFullScreen")

	if signal := qt.GetSignal(C.GoString(ptrName), "showFullScreen"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShowFullScreen(f func()) {
	defer qt.Recovering("connect QWindow::showFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showFullScreen", f)
	}
}

func (ptr *QWindow) DisconnectShowFullScreen() {
	defer qt.Recovering("disconnect QWindow::showFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showFullScreen")
	}
}

func (ptr *QWindow) ShowFullScreen() {
	defer qt.Recovering("QWindow::showFullScreen")

	if ptr.Pointer() != nil {
		C.QWindow_ShowFullScreen(ptr.Pointer())
	}
}

//export callbackQWindow_ShowMaximized
func callbackQWindow_ShowMaximized(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::showMaximized")

	if signal := qt.GetSignal(C.GoString(ptrName), "showMaximized"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShowMaximized(f func()) {
	defer qt.Recovering("connect QWindow::showMaximized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showMaximized", f)
	}
}

func (ptr *QWindow) DisconnectShowMaximized() {
	defer qt.Recovering("disconnect QWindow::showMaximized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showMaximized")
	}
}

func (ptr *QWindow) ShowMaximized() {
	defer qt.Recovering("QWindow::showMaximized")

	if ptr.Pointer() != nil {
		C.QWindow_ShowMaximized(ptr.Pointer())
	}
}

//export callbackQWindow_ShowMinimized
func callbackQWindow_ShowMinimized(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::showMinimized")

	if signal := qt.GetSignal(C.GoString(ptrName), "showMinimized"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShowMinimized(f func()) {
	defer qt.Recovering("connect QWindow::showMinimized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showMinimized", f)
	}
}

func (ptr *QWindow) DisconnectShowMinimized() {
	defer qt.Recovering("disconnect QWindow::showMinimized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showMinimized")
	}
}

func (ptr *QWindow) ShowMinimized() {
	defer qt.Recovering("QWindow::showMinimized")

	if ptr.Pointer() != nil {
		C.QWindow_ShowMinimized(ptr.Pointer())
	}
}

//export callbackQWindow_ShowNormal
func callbackQWindow_ShowNormal(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::showNormal")

	if signal := qt.GetSignal(C.GoString(ptrName), "showNormal"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShowNormal(f func()) {
	defer qt.Recovering("connect QWindow::showNormal")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "showNormal", f)
	}
}

func (ptr *QWindow) DisconnectShowNormal() {
	defer qt.Recovering("disconnect QWindow::showNormal")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "showNormal")
	}
}

func (ptr *QWindow) ShowNormal() {
	defer qt.Recovering("QWindow::showNormal")

	if ptr.Pointer() != nil {
		C.QWindow_ShowNormal(ptr.Pointer())
	}
}

//export callbackQWindow_Size
func callbackQWindow_Size(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QWindow::size")

	if signal := qt.GetSignal(C.GoString(ptrName), "size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQWindowFromPointer(ptr).SizeDefault())
}

func (ptr *QWindow) ConnectSize(f func() *core.QSize) {
	defer qt.Recovering("connect QWindow::size")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "size", f)
	}
}

func (ptr *QWindow) DisconnectSize() {
	defer qt.Recovering("disconnect QWindow::size")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "size")
	}
}

func (ptr *QWindow) Size() *core.QSize {
	defer qt.Recovering("QWindow::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QWindow_Size(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) SizeDefault() *core.QSize {
	defer qt.Recovering("QWindow::size")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QWindow_SizeDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) SizeIncrement() *core.QSize {
	defer qt.Recovering("QWindow::sizeIncrement")

	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QWindow_SizeIncrement(ptr.Pointer()))
	}
	return nil
}

//export callbackQWindow_SurfaceType
func callbackQWindow_SurfaceType(ptr unsafe.Pointer, ptrName *C.char) C.int {
	defer qt.Recovering("callback QWindow::surfaceType")

	if signal := qt.GetSignal(C.GoString(ptrName), "surfaceType"); signal != nil {
		return C.int(signal.(func() QSurface__SurfaceType)())
	}

	return C.int(NewQWindowFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QWindow) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	defer qt.Recovering("connect QWindow::surfaceType")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "surfaceType", f)
	}
}

func (ptr *QWindow) DisconnectSurfaceType() {
	defer qt.Recovering("disconnect QWindow::surfaceType")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "surfaceType")
	}
}

func (ptr *QWindow) SurfaceType() QSurface__SurfaceType {
	defer qt.Recovering("QWindow::surfaceType")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QWindow_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) SurfaceTypeDefault() QSurface__SurfaceType {
	defer qt.Recovering("QWindow::surfaceType")

	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QWindow_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_TabletEvent
func callbackQWindow_TabletEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::tabletEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "tabletEvent"); signal != nil {
		signal.(func(*QTabletEvent))(NewQTabletEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).TabletEventDefault(NewQTabletEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectTabletEvent(f func(ev *QTabletEvent)) {
	defer qt.Recovering("connect QWindow::tabletEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "tabletEvent", f)
	}
}

func (ptr *QWindow) DisconnectTabletEvent() {
	defer qt.Recovering("disconnect QWindow::tabletEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "tabletEvent")
	}
}

func (ptr *QWindow) TabletEvent(ev QTabletEvent_ITF) {
	defer qt.Recovering("QWindow::tabletEvent")

	if ptr.Pointer() != nil {
		C.QWindow_TabletEvent(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

func (ptr *QWindow) TabletEventDefault(ev QTabletEvent_ITF) {
	defer qt.Recovering("QWindow::tabletEvent")

	if ptr.Pointer() != nil {
		C.QWindow_TabletEventDefault(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

//export callbackQWindow_TouchEvent
func callbackQWindow_TouchEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::touchEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "touchEvent"); signal != nil {
		signal.(func(*QTouchEvent))(NewQTouchEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).TouchEventDefault(NewQTouchEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectTouchEvent(f func(ev *QTouchEvent)) {
	defer qt.Recovering("connect QWindow::touchEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "touchEvent", f)
	}
}

func (ptr *QWindow) DisconnectTouchEvent() {
	defer qt.Recovering("disconnect QWindow::touchEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "touchEvent")
	}
}

func (ptr *QWindow) TouchEvent(ev QTouchEvent_ITF) {
	defer qt.Recovering("QWindow::touchEvent")

	if ptr.Pointer() != nil {
		C.QWindow_TouchEvent(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QWindow) TouchEventDefault(ev QTouchEvent_ITF) {
	defer qt.Recovering("QWindow::touchEvent")

	if ptr.Pointer() != nil {
		C.QWindow_TouchEventDefault(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QWindow) TransientParent() *QWindow {
	defer qt.Recovering("QWindow::transientParent")

	if ptr.Pointer() != nil {
		return NewQWindowFromPointer(C.QWindow_TransientParent(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) Type() core.Qt__WindowType {
	defer qt.Recovering("QWindow::type")

	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QWindow_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) UnsetCursor() {
	defer qt.Recovering("QWindow::unsetCursor")

	if ptr.Pointer() != nil {
		C.QWindow_UnsetCursor(ptr.Pointer())
	}
}

//export callbackQWindow_VisibilityChanged
func callbackQWindow_VisibilityChanged(ptr unsafe.Pointer, ptrName *C.char, visibility C.int) {
	defer qt.Recovering("callback QWindow::visibilityChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "visibilityChanged"); signal != nil {
		signal.(func(QWindow__Visibility))(QWindow__Visibility(visibility))
	}

}

func (ptr *QWindow) ConnectVisibilityChanged(f func(visibility QWindow__Visibility)) {
	defer qt.Recovering("connect QWindow::visibilityChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectVisibilityChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "visibilityChanged", f)
	}
}

func (ptr *QWindow) DisconnectVisibilityChanged() {
	defer qt.Recovering("disconnect QWindow::visibilityChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectVisibilityChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "visibilityChanged")
	}
}

func (ptr *QWindow) VisibilityChanged(visibility QWindow__Visibility) {
	defer qt.Recovering("QWindow::visibilityChanged")

	if ptr.Pointer() != nil {
		C.QWindow_VisibilityChanged(ptr.Pointer(), C.int(visibility))
	}
}

//export callbackQWindow_VisibleChanged
func callbackQWindow_VisibleChanged(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::visibleChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "visibleChanged"); signal != nil {
		signal.(func(bool))(int(arg) != 0)
	}

}

func (ptr *QWindow) ConnectVisibleChanged(f func(arg bool)) {
	defer qt.Recovering("connect QWindow::visibleChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectVisibleChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "visibleChanged", f)
	}
}

func (ptr *QWindow) DisconnectVisibleChanged() {
	defer qt.Recovering("disconnect QWindow::visibleChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectVisibleChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "visibleChanged")
	}
}

func (ptr *QWindow) VisibleChanged(arg bool) {
	defer qt.Recovering("QWindow::visibleChanged")

	if ptr.Pointer() != nil {
		C.QWindow_VisibleChanged(ptr.Pointer(), C.int(qt.GoBoolToInt(arg)))
	}
}

//export callbackQWindow_WheelEvent
func callbackQWindow_WheelEvent(ptr unsafe.Pointer, ptrName *C.char, ev unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::wheelEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "wheelEvent"); signal != nil {
		signal.(func(*QWheelEvent))(NewQWheelEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).WheelEventDefault(NewQWheelEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectWheelEvent(f func(ev *QWheelEvent)) {
	defer qt.Recovering("connect QWindow::wheelEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "wheelEvent", f)
	}
}

func (ptr *QWindow) DisconnectWheelEvent() {
	defer qt.Recovering("disconnect QWindow::wheelEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "wheelEvent")
	}
}

func (ptr *QWindow) WheelEvent(ev QWheelEvent_ITF) {
	defer qt.Recovering("QWindow::wheelEvent")

	if ptr.Pointer() != nil {
		C.QWindow_WheelEvent(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

func (ptr *QWindow) WheelEventDefault(ev QWheelEvent_ITF) {
	defer qt.Recovering("QWindow::wheelEvent")

	if ptr.Pointer() != nil {
		C.QWindow_WheelEventDefault(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

func (ptr *QWindow) Width() int {
	defer qt.Recovering("QWindow::width")

	if ptr.Pointer() != nil {
		return int(C.QWindow_Width(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_WidthChanged
func callbackQWindow_WidthChanged(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::widthChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "widthChanged"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectWidthChanged(f func(arg int)) {
	defer qt.Recovering("connect QWindow::widthChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectWidthChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "widthChanged", f)
	}
}

func (ptr *QWindow) DisconnectWidthChanged() {
	defer qt.Recovering("disconnect QWindow::widthChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectWidthChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "widthChanged")
	}
}

func (ptr *QWindow) WidthChanged(arg int) {
	defer qt.Recovering("QWindow::widthChanged")

	if ptr.Pointer() != nil {
		C.QWindow_WidthChanged(ptr.Pointer(), C.int(arg))
	}
}

func (ptr *QWindow) WinId() uintptr {
	defer qt.Recovering("QWindow::winId")

	if ptr.Pointer() != nil {
		return uintptr(C.QWindow_WinId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) WindowState() core.Qt__WindowState {
	defer qt.Recovering("QWindow::windowState")

	if ptr.Pointer() != nil {
		return core.Qt__WindowState(C.QWindow_WindowState(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_WindowStateChanged
func callbackQWindow_WindowStateChanged(ptr unsafe.Pointer, ptrName *C.char, windowState C.int) {
	defer qt.Recovering("callback QWindow::windowStateChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "windowStateChanged"); signal != nil {
		signal.(func(core.Qt__WindowState))(core.Qt__WindowState(windowState))
	}

}

func (ptr *QWindow) ConnectWindowStateChanged(f func(windowState core.Qt__WindowState)) {
	defer qt.Recovering("connect QWindow::windowStateChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectWindowStateChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "windowStateChanged", f)
	}
}

func (ptr *QWindow) DisconnectWindowStateChanged() {
	defer qt.Recovering("disconnect QWindow::windowStateChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectWindowStateChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "windowStateChanged")
	}
}

func (ptr *QWindow) WindowStateChanged(windowState core.Qt__WindowState) {
	defer qt.Recovering("QWindow::windowStateChanged")

	if ptr.Pointer() != nil {
		C.QWindow_WindowStateChanged(ptr.Pointer(), C.int(windowState))
	}
}

//export callbackQWindow_WindowTitleChanged
func callbackQWindow_WindowTitleChanged(ptr unsafe.Pointer, ptrName *C.char, title *C.char) {
	defer qt.Recovering("callback QWindow::windowTitleChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "windowTitleChanged"); signal != nil {
		signal.(func(string))(C.GoString(title))
	}

}

func (ptr *QWindow) ConnectWindowTitleChanged(f func(title string)) {
	defer qt.Recovering("connect QWindow::windowTitleChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectWindowTitleChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "windowTitleChanged", f)
	}
}

func (ptr *QWindow) DisconnectWindowTitleChanged() {
	defer qt.Recovering("disconnect QWindow::windowTitleChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectWindowTitleChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "windowTitleChanged")
	}
}

func (ptr *QWindow) WindowTitleChanged(title string) {
	defer qt.Recovering("QWindow::windowTitleChanged")

	if ptr.Pointer() != nil {
		C.QWindow_WindowTitleChanged(ptr.Pointer(), C.CString(title))
	}
}

func (ptr *QWindow) X() int {
	defer qt.Recovering("QWindow::x")

	if ptr.Pointer() != nil {
		return int(C.QWindow_X(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_XChanged
func callbackQWindow_XChanged(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::xChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "xChanged"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectXChanged(f func(arg int)) {
	defer qt.Recovering("connect QWindow::xChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectXChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "xChanged", f)
	}
}

func (ptr *QWindow) DisconnectXChanged() {
	defer qt.Recovering("disconnect QWindow::xChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectXChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "xChanged")
	}
}

func (ptr *QWindow) XChanged(arg int) {
	defer qt.Recovering("QWindow::xChanged")

	if ptr.Pointer() != nil {
		C.QWindow_XChanged(ptr.Pointer(), C.int(arg))
	}
}

func (ptr *QWindow) Y() int {
	defer qt.Recovering("QWindow::y")

	if ptr.Pointer() != nil {
		return int(C.QWindow_Y(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_YChanged
func callbackQWindow_YChanged(ptr unsafe.Pointer, ptrName *C.char, arg C.int) {
	defer qt.Recovering("callback QWindow::yChanged")

	if signal := qt.GetSignal(C.GoString(ptrName), "yChanged"); signal != nil {
		signal.(func(int))(int(arg))
	}

}

func (ptr *QWindow) ConnectYChanged(f func(arg int)) {
	defer qt.Recovering("connect QWindow::yChanged")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectYChanged(ptr.Pointer())
		qt.ConnectSignal(ptr.ObjectName(), "yChanged", f)
	}
}

func (ptr *QWindow) DisconnectYChanged() {
	defer qt.Recovering("disconnect QWindow::yChanged")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectYChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.ObjectName(), "yChanged")
	}
}

func (ptr *QWindow) YChanged(arg int) {
	defer qt.Recovering("QWindow::yChanged")

	if ptr.Pointer() != nil {
		C.QWindow_YChanged(ptr.Pointer(), C.int(arg))
	}
}

func (ptr *QWindow) DestroyQWindow() {
	defer qt.Recovering("QWindow::~QWindow")

	if ptr.Pointer() != nil {
		C.QWindow_DestroyQWindow(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQWindow_TimerEvent
func callbackQWindow_TimerEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::timerEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQWindowFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QWindow) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QWindow::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "timerEvent", f)
	}
}

func (ptr *QWindow) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QWindow::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "timerEvent")
	}
}

func (ptr *QWindow) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QWindow::timerEvent")

	if ptr.Pointer() != nil {
		C.QWindow_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QWindow) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QWindow::timerEvent")

	if ptr.Pointer() != nil {
		C.QWindow_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQWindow_ChildEvent
func callbackQWindow_ChildEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::childEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQWindowFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QWindow) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QWindow::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "childEvent", f)
	}
}

func (ptr *QWindow) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QWindow::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "childEvent")
	}
}

func (ptr *QWindow) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QWindow::childEvent")

	if ptr.Pointer() != nil {
		C.QWindow_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QWindow) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QWindow::childEvent")

	if ptr.Pointer() != nil {
		C.QWindow_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQWindow_ConnectNotify
func callbackQWindow_ConnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::connectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQWindowFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QWindow) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QWindow::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "connectNotify", f)
	}
}

func (ptr *QWindow) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QWindow::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "connectNotify")
	}
}

func (ptr *QWindow) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QWindow::connectNotify")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QWindow) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QWindow::connectNotify")

	if ptr.Pointer() != nil {
		C.QWindow_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQWindow_CustomEvent
func callbackQWindow_CustomEvent(ptr unsafe.Pointer, ptrName *C.char, event unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::customEvent")

	if signal := qt.GetSignal(C.GoString(ptrName), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQWindowFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QWindow) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QWindow::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "customEvent", f)
	}
}

func (ptr *QWindow) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QWindow::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "customEvent")
	}
}

func (ptr *QWindow) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QWindow::customEvent")

	if ptr.Pointer() != nil {
		C.QWindow_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QWindow) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QWindow::customEvent")

	if ptr.Pointer() != nil {
		C.QWindow_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQWindow_DeleteLater
func callbackQWindow_DeleteLater(ptr unsafe.Pointer, ptrName *C.char) {
	defer qt.Recovering("callback QWindow::deleteLater")

	if signal := qt.GetSignal(C.GoString(ptrName), "deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QWindow::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "deleteLater", f)
	}
}

func (ptr *QWindow) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QWindow::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "deleteLater")
	}
}

func (ptr *QWindow) DeleteLater() {
	defer qt.Recovering("QWindow::deleteLater")

	if ptr.Pointer() != nil {
		C.QWindow_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQWindow_DisconnectNotify
func callbackQWindow_DisconnectNotify(ptr unsafe.Pointer, ptrName *C.char, sign unsafe.Pointer) {
	defer qt.Recovering("callback QWindow::disconnectNotify")

	if signal := qt.GetSignal(C.GoString(ptrName), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQWindowFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QWindow) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QWindow::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "disconnectNotify", f)
	}
}

func (ptr *QWindow) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QWindow::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "disconnectNotify")
	}
}

func (ptr *QWindow) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QWindow::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QWindow) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QWindow::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QWindow_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQWindow_EventFilter
func callbackQWindow_EventFilter(ptr unsafe.Pointer, ptrName *C.char, watched unsafe.Pointer, event unsafe.Pointer) C.int {
	defer qt.Recovering("callback QWindow::eventFilter")

	if signal := qt.GetSignal(C.GoString(ptrName), "eventFilter"); signal != nil {
		return C.int(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
	}

	return C.int(qt.GoBoolToInt(NewQWindowFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event))))
}

func (ptr *QWindow) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QWindow::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "eventFilter", f)
	}
}

func (ptr *QWindow) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QWindow::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "eventFilter")
	}
}

func (ptr *QWindow) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QWindow::eventFilter")

	if ptr.Pointer() != nil {
		return C.QWindow_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QWindow) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QWindow::eventFilter")

	if ptr.Pointer() != nil {
		return C.QWindow_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQWindow_MetaObject
func callbackQWindow_MetaObject(ptr unsafe.Pointer, ptrName *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QWindow::metaObject")

	if signal := qt.GetSignal(C.GoString(ptrName), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQWindowFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QWindow) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QWindow::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(ptr.ObjectName(), "metaObject", f)
	}
}

func (ptr *QWindow) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QWindow::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.ObjectName(), "metaObject")
	}
}

func (ptr *QWindow) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QWindow::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QWindow_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QWindow::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QWindow_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QWindowStateChangeEvent struct {
	core.QEvent
}

type QWindowStateChangeEvent_ITF interface {
	core.QEvent_ITF
	QWindowStateChangeEvent_PTR() *QWindowStateChangeEvent
}

func (p *QWindowStateChangeEvent) QWindowStateChangeEvent_PTR() *QWindowStateChangeEvent {
	return p
}

func (p *QWindowStateChangeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QWindowStateChangeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQWindowStateChangeEvent(ptr QWindowStateChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWindowStateChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQWindowStateChangeEventFromPointer(ptr unsafe.Pointer) *QWindowStateChangeEvent {
	var n = new(QWindowStateChangeEvent)
	n.SetPointer(ptr)
	return n
}

func newQWindowStateChangeEventFromPointer(ptr unsafe.Pointer) *QWindowStateChangeEvent {
	var n = NewQWindowStateChangeEventFromPointer(ptr)
	return n
}

func (ptr *QWindowStateChangeEvent) OldState() core.Qt__WindowState {
	defer qt.Recovering("QWindowStateChangeEvent::oldState")

	if ptr.Pointer() != nil {
		return core.Qt__WindowState(C.QWindowStateChangeEvent_OldState(ptr.Pointer()))
	}
	return 0
}
