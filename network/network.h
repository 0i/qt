#ifdef __cplusplus
extern "C" {
#endif

void QAbstractNetworkCache_Clear(void* ptr);
void* QAbstractNetworkCache_Data(void* ptr, void* url);
void* QAbstractNetworkCache_Prepare(void* ptr, void* metaData);
void QAbstractNetworkCache_UpdateMetaData(void* ptr, void* metaData);
void QAbstractNetworkCache_DestroyQAbstractNetworkCache(void* ptr);
void* QAbstractSocket_NewQAbstractSocket(int socketType, void* parent);
void QAbstractSocket_Abort(void* ptr);
int QAbstractSocket_AtEnd(void* ptr);
int QAbstractSocket_CanReadLine(void* ptr);
void QAbstractSocket_Close(void* ptr);
void QAbstractSocket_ConnectConnected(void* ptr);
void QAbstractSocket_DisconnectConnected(void* ptr);
void QAbstractSocket_DisconnectFromHost(void* ptr);
void QAbstractSocket_ConnectDisconnected(void* ptr);
void QAbstractSocket_DisconnectDisconnected(void* ptr);
int QAbstractSocket_Error(void* ptr);
int QAbstractSocket_Flush(void* ptr);
void QAbstractSocket_ConnectHostFound(void* ptr);
void QAbstractSocket_DisconnectHostFound(void* ptr);
int QAbstractSocket_IsSequential(void* ptr);
int QAbstractSocket_IsValid(void* ptr);
int QAbstractSocket_PauseMode(void* ptr);
char* QAbstractSocket_PeerName(void* ptr);
void QAbstractSocket_Resume(void* ptr);
void QAbstractSocket_SetPauseMode(void* ptr, int pauseMode);
void QAbstractSocket_SetProxy(void* ptr, void* networkProxy);
void QAbstractSocket_SetSocketOption(void* ptr, int option, void* value);
void* QAbstractSocket_SocketOption(void* ptr, int option);
int QAbstractSocket_SocketType(void* ptr);
void QAbstractSocket_ConnectStateChanged(void* ptr);
void QAbstractSocket_DisconnectStateChanged(void* ptr);
int QAbstractSocket_WaitForBytesWritten(void* ptr, int msecs);
int QAbstractSocket_WaitForConnected(void* ptr, int msecs);
int QAbstractSocket_WaitForDisconnected(void* ptr, int msecs);
int QAbstractSocket_WaitForReadyRead(void* ptr, int msecs);
void QAbstractSocket_DestroyQAbstractSocket(void* ptr);
void* QAuthenticator_NewQAuthenticator();
void* QAuthenticator_NewQAuthenticator2(void* other);
int QAuthenticator_IsNull(void* ptr);
void* QAuthenticator_Option(void* ptr, char* opt);
char* QAuthenticator_Password(void* ptr);
char* QAuthenticator_Realm(void* ptr);
void QAuthenticator_SetOption(void* ptr, char* opt, void* value);
void QAuthenticator_SetPassword(void* ptr, char* password);
void QAuthenticator_SetUser(void* ptr, char* user);
char* QAuthenticator_User(void* ptr);
void QAuthenticator_DestroyQAuthenticator(void* ptr);
void* QDnsDomainNameRecord_NewQDnsDomainNameRecord();
void* QDnsDomainNameRecord_NewQDnsDomainNameRecord2(void* other);
char* QDnsDomainNameRecord_Name(void* ptr);
void QDnsDomainNameRecord_Swap(void* ptr, void* other);
char* QDnsDomainNameRecord_Value(void* ptr);
void QDnsDomainNameRecord_DestroyQDnsDomainNameRecord(void* ptr);
void* QDnsHostAddressRecord_NewQDnsHostAddressRecord();
void* QDnsHostAddressRecord_NewQDnsHostAddressRecord2(void* other);
char* QDnsHostAddressRecord_Name(void* ptr);
void QDnsHostAddressRecord_Swap(void* ptr, void* other);
void QDnsHostAddressRecord_DestroyQDnsHostAddressRecord(void* ptr);
void* QDnsLookup_NewQDnsLookup3(int ty, char* name, void* nameserver, void* parent);
int QDnsLookup_Error(void* ptr);
char* QDnsLookup_ErrorString(void* ptr);
char* QDnsLookup_Name(void* ptr);
void QDnsLookup_SetName(void* ptr, char* name);
void QDnsLookup_SetNameserver(void* ptr, void* nameserver);
void QDnsLookup_SetType(void* ptr, int v);
int QDnsLookup_Type(void* ptr);
void* QDnsLookup_NewQDnsLookup(void* parent);
void* QDnsLookup_NewQDnsLookup2(int ty, char* name, void* parent);
void QDnsLookup_Abort(void* ptr);
void QDnsLookup_ConnectFinished(void* ptr);
void QDnsLookup_DisconnectFinished(void* ptr);
int QDnsLookup_IsFinished(void* ptr);
void QDnsLookup_Lookup(void* ptr);
void QDnsLookup_ConnectNameChanged(void* ptr);
void QDnsLookup_DisconnectNameChanged(void* ptr);
void QDnsLookup_ConnectTypeChanged(void* ptr);
void QDnsLookup_DisconnectTypeChanged(void* ptr);
void QDnsLookup_DestroyQDnsLookup(void* ptr);
void* QDnsMailExchangeRecord_NewQDnsMailExchangeRecord();
void* QDnsMailExchangeRecord_NewQDnsMailExchangeRecord2(void* other);
char* QDnsMailExchangeRecord_Exchange(void* ptr);
char* QDnsMailExchangeRecord_Name(void* ptr);
void QDnsMailExchangeRecord_Swap(void* ptr, void* other);
void QDnsMailExchangeRecord_DestroyQDnsMailExchangeRecord(void* ptr);
void* QDnsServiceRecord_NewQDnsServiceRecord();
void* QDnsServiceRecord_NewQDnsServiceRecord2(void* other);
char* QDnsServiceRecord_Name(void* ptr);
void QDnsServiceRecord_Swap(void* ptr, void* other);
char* QDnsServiceRecord_Target(void* ptr);
void QDnsServiceRecord_DestroyQDnsServiceRecord(void* ptr);
void* QDnsTextRecord_NewQDnsTextRecord();
void* QDnsTextRecord_NewQDnsTextRecord2(void* other);
char* QDnsTextRecord_Name(void* ptr);
void QDnsTextRecord_Swap(void* ptr, void* other);
void QDnsTextRecord_DestroyQDnsTextRecord(void* ptr);
void* QHostAddress_NewQHostAddress();
void* QHostAddress_NewQHostAddress9(int address);
void* QHostAddress_NewQHostAddress8(void* address);
void* QHostAddress_NewQHostAddress7(char* address);
void QHostAddress_Clear(void* ptr);
int QHostAddress_IsInSubnet(void* ptr, void* subnet, int netmask);
int QHostAddress_IsLoopback(void* ptr);
int QHostAddress_IsNull(void* ptr);
int QHostAddress_Protocol(void* ptr);
char* QHostAddress_ScopeId(void* ptr);
int QHostAddress_SetAddress5(void* ptr, char* address);
void QHostAddress_SetScopeId(void* ptr, char* id);
char* QHostAddress_ToString(void* ptr);
void QHostAddress_DestroyQHostAddress(void* ptr);
void* QHostInfo_NewQHostInfo2(void* other);
void* QHostInfo_NewQHostInfo(int id);
void QHostInfo_QHostInfo_AbortHostLookup(int id);
int QHostInfo_Error(void* ptr);
char* QHostInfo_ErrorString(void* ptr);
char* QHostInfo_HostName(void* ptr);
int QHostInfo_QHostInfo_LookupHost(char* name, void* receiver, char* member);
int QHostInfo_LookupId(void* ptr);
void QHostInfo_SetError(void* ptr, int error);
void QHostInfo_SetErrorString(void* ptr, char* str);
void QHostInfo_SetHostName(void* ptr, char* hostName);
void QHostInfo_SetLookupId(void* ptr, int id);
void QHostInfo_DestroyQHostInfo(void* ptr);
char* QHostInfo_QHostInfo_LocalHostName();
char* QHostInfo_QHostInfo_LocalDomainName();
void* QHttpMultiPart_NewQHttpMultiPart2(int contentType, void* parent);
void* QHttpMultiPart_NewQHttpMultiPart(void* parent);
void QHttpMultiPart_Append(void* ptr, void* httpPart);
void* QHttpMultiPart_Boundary(void* ptr);
void QHttpMultiPart_SetBoundary(void* ptr, void* boundary);
void QHttpMultiPart_SetContentType(void* ptr, int contentType);
void QHttpMultiPart_DestroyQHttpMultiPart(void* ptr);
void* QHttpPart_NewQHttpPart();
void* QHttpPart_NewQHttpPart2(void* other);
void QHttpPart_SetBody(void* ptr, void* body);
void QHttpPart_SetBodyDevice(void* ptr, void* device);
void QHttpPart_SetHeader(void* ptr, int header, void* value);
void QHttpPart_SetRawHeader(void* ptr, void* headerName, void* headerValue);
void QHttpPart_Swap(void* ptr, void* other);
void QHttpPart_DestroyQHttpPart(void* ptr);
void QLocalServer_SetSocketOptions(void* ptr, int options);
void* QLocalServer_NewQLocalServer(void* parent);
void QLocalServer_Close(void* ptr);
char* QLocalServer_ErrorString(void* ptr);
char* QLocalServer_FullServerName(void* ptr);
int QLocalServer_HasPendingConnections(void* ptr);
int QLocalServer_IsListening(void* ptr);
int QLocalServer_Listen(void* ptr, char* name);
int QLocalServer_MaxPendingConnections(void* ptr);
void QLocalServer_ConnectNewConnection(void* ptr);
void QLocalServer_DisconnectNewConnection(void* ptr);
void* QLocalServer_NextPendingConnection(void* ptr);
int QLocalServer_QLocalServer_RemoveServer(char* name);
int QLocalServer_ServerError(void* ptr);
char* QLocalServer_ServerName(void* ptr);
void QLocalServer_SetMaxPendingConnections(void* ptr, int numConnections);
int QLocalServer_SocketOptions(void* ptr);
int QLocalServer_WaitForNewConnection(void* ptr, int msec, int timedOut);
void QLocalServer_DestroyQLocalServer(void* ptr);
int QLocalSocket_Open(void* ptr, int openMode);
void* QLocalSocket_NewQLocalSocket(void* parent);
void QLocalSocket_ConnectToServer2(void* ptr, char* name, int openMode);
void QLocalSocket_ConnectConnected(void* ptr);
void QLocalSocket_DisconnectConnected(void* ptr);
void QLocalSocket_ConnectDisconnected(void* ptr);
void QLocalSocket_DisconnectDisconnected(void* ptr);
char* QLocalSocket_FullServerName(void* ptr);
int QLocalSocket_IsSequential(void* ptr);
char* QLocalSocket_ServerName(void* ptr);
void QLocalSocket_SetServerName(void* ptr, char* name);
void QLocalSocket_ConnectStateChanged(void* ptr);
void QLocalSocket_DisconnectStateChanged(void* ptr);
void QLocalSocket_DestroyQLocalSocket(void* ptr);
void QLocalSocket_Abort(void* ptr);
int QLocalSocket_CanReadLine(void* ptr);
void QLocalSocket_Close(void* ptr);
void QLocalSocket_ConnectToServer(void* ptr, int openMode);
void QLocalSocket_DisconnectFromServer(void* ptr);
int QLocalSocket_Error(void* ptr);
int QLocalSocket_Flush(void* ptr);
int QLocalSocket_IsValid(void* ptr);
int QLocalSocket_WaitForBytesWritten(void* ptr, int msecs);
int QLocalSocket_WaitForConnected(void* ptr, int msecs);
int QLocalSocket_WaitForDisconnected(void* ptr, int msecs);
int QLocalSocket_WaitForReadyRead(void* ptr, int msecs);
void* QNetworkAccessManager_ProxyFactory(void* ptr);
void* QNetworkAccessManager_NewQNetworkAccessManager(void* parent);
void QNetworkAccessManager_ConnectAuthenticationRequired(void* ptr);
void QNetworkAccessManager_DisconnectAuthenticationRequired(void* ptr);
void* QNetworkAccessManager_Cache(void* ptr);
void QNetworkAccessManager_ClearAccessCache(void* ptr);
void* QNetworkAccessManager_CookieJar(void* ptr);
void* QNetworkAccessManager_DeleteResource(void* ptr, void* request);
void QNetworkAccessManager_ConnectEncrypted(void* ptr);
void QNetworkAccessManager_DisconnectEncrypted(void* ptr);
void QNetworkAccessManager_ConnectFinished(void* ptr);
void QNetworkAccessManager_DisconnectFinished(void* ptr);
void* QNetworkAccessManager_Get(void* ptr, void* request);
void* QNetworkAccessManager_Head(void* ptr, void* request);
int QNetworkAccessManager_NetworkAccessible(void* ptr);
void QNetworkAccessManager_ConnectNetworkAccessibleChanged(void* ptr);
void QNetworkAccessManager_DisconnectNetworkAccessibleChanged(void* ptr);
void* QNetworkAccessManager_Post3(void* ptr, void* request, void* multiPart);
void* QNetworkAccessManager_Post(void* ptr, void* request, void* data);
void* QNetworkAccessManager_Post2(void* ptr, void* request, void* data);
void QNetworkAccessManager_ConnectPreSharedKeyAuthenticationRequired(void* ptr);
void QNetworkAccessManager_DisconnectPreSharedKeyAuthenticationRequired(void* ptr);
void* QNetworkAccessManager_Put2(void* ptr, void* request, void* multiPart);
void* QNetworkAccessManager_Put(void* ptr, void* request, void* data);
void* QNetworkAccessManager_Put3(void* ptr, void* request, void* data);
void* QNetworkAccessManager_SendCustomRequest(void* ptr, void* request, void* verb, void* data);
void QNetworkAccessManager_SetCache(void* ptr, void* cache);
void QNetworkAccessManager_SetConfiguration(void* ptr, void* config);
void QNetworkAccessManager_SetCookieJar(void* ptr, void* cookieJar);
void QNetworkAccessManager_SetNetworkAccessible(void* ptr, int accessible);
void QNetworkAccessManager_SetProxy(void* ptr, void* proxy);
void QNetworkAccessManager_SetProxyFactory(void* ptr, void* factory);
char* QNetworkAccessManager_SupportedSchemes(void* ptr);
void QNetworkAccessManager_DestroyQNetworkAccessManager(void* ptr);
void* QNetworkAddressEntry_NewQNetworkAddressEntry();
void* QNetworkAddressEntry_NewQNetworkAddressEntry2(void* other);
int QNetworkAddressEntry_PrefixLength(void* ptr);
void QNetworkAddressEntry_SetBroadcast(void* ptr, void* newBroadcast);
void QNetworkAddressEntry_SetIp(void* ptr, void* newIp);
void QNetworkAddressEntry_SetNetmask(void* ptr, void* newNetmask);
void QNetworkAddressEntry_SetPrefixLength(void* ptr, int length);
void QNetworkAddressEntry_Swap(void* ptr, void* other);
void QNetworkAddressEntry_DestroyQNetworkAddressEntry(void* ptr);
void* QNetworkCacheMetaData_NewQNetworkCacheMetaData();
void* QNetworkCacheMetaData_NewQNetworkCacheMetaData2(void* other);
void* QNetworkCacheMetaData_ExpirationDate(void* ptr);
int QNetworkCacheMetaData_IsValid(void* ptr);
void* QNetworkCacheMetaData_LastModified(void* ptr);
int QNetworkCacheMetaData_SaveToDisk(void* ptr);
void QNetworkCacheMetaData_SetExpirationDate(void* ptr, void* dateTime);
void QNetworkCacheMetaData_SetLastModified(void* ptr, void* dateTime);
void QNetworkCacheMetaData_SetSaveToDisk(void* ptr, int allow);
void QNetworkCacheMetaData_SetUrl(void* ptr, void* url);
void QNetworkCacheMetaData_Swap(void* ptr, void* other);
void QNetworkCacheMetaData_DestroyQNetworkCacheMetaData(void* ptr);
void* QNetworkConfiguration_NewQNetworkConfiguration();
void* QNetworkConfiguration_NewQNetworkConfiguration2(void* other);
int QNetworkConfiguration_BearerType(void* ptr);
int QNetworkConfiguration_BearerTypeFamily(void* ptr);
char* QNetworkConfiguration_BearerTypeName(void* ptr);
char* QNetworkConfiguration_Identifier(void* ptr);
int QNetworkConfiguration_IsRoamingAvailable(void* ptr);
int QNetworkConfiguration_IsValid(void* ptr);
char* QNetworkConfiguration_Name(void* ptr);
int QNetworkConfiguration_Purpose(void* ptr);
void QNetworkConfiguration_Swap(void* ptr, void* other);
int QNetworkConfiguration_Type(void* ptr);
void QNetworkConfiguration_DestroyQNetworkConfiguration(void* ptr);
void* QNetworkConfigurationManager_NewQNetworkConfigurationManager(void* parent);
int QNetworkConfigurationManager_Capabilities(void* ptr);
int QNetworkConfigurationManager_IsOnline(void* ptr);
void QNetworkConfigurationManager_ConnectOnlineStateChanged(void* ptr);
void QNetworkConfigurationManager_DisconnectOnlineStateChanged(void* ptr);
void QNetworkConfigurationManager_ConnectUpdateCompleted(void* ptr);
void QNetworkConfigurationManager_DisconnectUpdateCompleted(void* ptr);
void QNetworkConfigurationManager_UpdateConfigurations(void* ptr);
void QNetworkConfigurationManager_DestroyQNetworkConfigurationManager(void* ptr);
void* QNetworkCookie_NewQNetworkCookie(void* name, void* value);
void* QNetworkCookie_NewQNetworkCookie2(void* other);
char* QNetworkCookie_Domain(void* ptr);
void* QNetworkCookie_ExpirationDate(void* ptr);
int QNetworkCookie_HasSameIdentifier(void* ptr, void* other);
int QNetworkCookie_IsHttpOnly(void* ptr);
int QNetworkCookie_IsSecure(void* ptr);
int QNetworkCookie_IsSessionCookie(void* ptr);
void* QNetworkCookie_Name(void* ptr);
void QNetworkCookie_Normalize(void* ptr, void* url);
char* QNetworkCookie_Path(void* ptr);
void QNetworkCookie_SetDomain(void* ptr, char* domain);
void QNetworkCookie_SetExpirationDate(void* ptr, void* date);
void QNetworkCookie_SetHttpOnly(void* ptr, int enable);
void QNetworkCookie_SetName(void* ptr, void* cookieName);
void QNetworkCookie_SetPath(void* ptr, char* path);
void QNetworkCookie_SetSecure(void* ptr, int enable);
void QNetworkCookie_SetValue(void* ptr, void* value);
void QNetworkCookie_Swap(void* ptr, void* other);
void* QNetworkCookie_ToRawForm(void* ptr, int form);
void* QNetworkCookie_Value(void* ptr);
void QNetworkCookie_DestroyQNetworkCookie(void* ptr);
void* QNetworkCookieJar_NewQNetworkCookieJar(void* parent);
int QNetworkCookieJar_DeleteCookie(void* ptr, void* cookie);
int QNetworkCookieJar_InsertCookie(void* ptr, void* cookie);
int QNetworkCookieJar_UpdateCookie(void* ptr, void* cookie);
void QNetworkCookieJar_DestroyQNetworkCookieJar(void* ptr);
void* QNetworkDiskCache_NewQNetworkDiskCache(void* parent);
char* QNetworkDiskCache_CacheDirectory(void* ptr);
void QNetworkDiskCache_Clear(void* ptr);
void* QNetworkDiskCache_Data(void* ptr, void* url);
void* QNetworkDiskCache_Prepare(void* ptr, void* metaData);
void QNetworkDiskCache_SetCacheDirectory(void* ptr, char* cacheDir);
void QNetworkDiskCache_UpdateMetaData(void* ptr, void* metaData);
void QNetworkDiskCache_DestroyQNetworkDiskCache(void* ptr);
void* QNetworkInterface_NewQNetworkInterface();
void* QNetworkInterface_NewQNetworkInterface2(void* other);
int QNetworkInterface_Flags(void* ptr);
char* QNetworkInterface_HardwareAddress(void* ptr);
char* QNetworkInterface_HumanReadableName(void* ptr);
int QNetworkInterface_Index(void* ptr);
int QNetworkInterface_IsValid(void* ptr);
char* QNetworkInterface_Name(void* ptr);
void QNetworkInterface_Swap(void* ptr, void* other);
void QNetworkInterface_DestroyQNetworkInterface(void* ptr);
void* QNetworkProxy_NewQNetworkProxy();
void* QNetworkProxy_NewQNetworkProxy3(void* other);
int QNetworkProxy_Capabilities(void* ptr);
int QNetworkProxy_HasRawHeader(void* ptr, void* headerName);
void* QNetworkProxy_Header(void* ptr, int header);
char* QNetworkProxy_HostName(void* ptr);
int QNetworkProxy_IsCachingProxy(void* ptr);
int QNetworkProxy_IsTransparentProxy(void* ptr);
char* QNetworkProxy_Password(void* ptr);
void* QNetworkProxy_RawHeader(void* ptr, void* headerName);
void QNetworkProxy_QNetworkProxy_SetApplicationProxy(void* networkProxy);
void QNetworkProxy_SetCapabilities(void* ptr, int capabilities);
void QNetworkProxy_SetHeader(void* ptr, int header, void* value);
void QNetworkProxy_SetHostName(void* ptr, char* hostName);
void QNetworkProxy_SetPassword(void* ptr, char* password);
void QNetworkProxy_SetRawHeader(void* ptr, void* headerName, void* headerValue);
void QNetworkProxy_SetType(void* ptr, int ty);
void QNetworkProxy_SetUser(void* ptr, char* user);
void QNetworkProxy_Swap(void* ptr, void* other);
int QNetworkProxy_Type(void* ptr);
char* QNetworkProxy_User(void* ptr);
void QNetworkProxy_DestroyQNetworkProxy(void* ptr);
void QNetworkProxyFactory_QNetworkProxyFactory_SetApplicationProxyFactory(void* factory);
void QNetworkProxyFactory_QNetworkProxyFactory_SetUseSystemConfiguration(int enable);
void QNetworkProxyFactory_DestroyQNetworkProxyFactory(void* ptr);
void* QNetworkProxyQuery_NewQNetworkProxyQuery();
void* QNetworkProxyQuery_NewQNetworkProxyQuery7(void* networkConfiguration, char* hostname, int port, char* protocolTag, int queryType);
void* QNetworkProxyQuery_NewQNetworkProxyQuery6(void* networkConfiguration, void* requestUrl, int queryType);
void* QNetworkProxyQuery_NewQNetworkProxyQuery5(void* other);
void* QNetworkProxyQuery_NewQNetworkProxyQuery3(char* hostname, int port, char* protocolTag, int queryType);
void* QNetworkProxyQuery_NewQNetworkProxyQuery2(void* requestUrl, int queryType);
int QNetworkProxyQuery_LocalPort(void* ptr);
char* QNetworkProxyQuery_PeerHostName(void* ptr);
int QNetworkProxyQuery_PeerPort(void* ptr);
char* QNetworkProxyQuery_ProtocolTag(void* ptr);
int QNetworkProxyQuery_QueryType(void* ptr);
void QNetworkProxyQuery_SetLocalPort(void* ptr, int port);
void QNetworkProxyQuery_SetNetworkConfiguration(void* ptr, void* networkConfiguration);
void QNetworkProxyQuery_SetPeerHostName(void* ptr, char* hostname);
void QNetworkProxyQuery_SetPeerPort(void* ptr, int port);
void QNetworkProxyQuery_SetProtocolTag(void* ptr, char* protocolTag);
void QNetworkProxyQuery_SetQueryType(void* ptr, int ty);
void QNetworkProxyQuery_SetUrl(void* ptr, void* url);
void QNetworkProxyQuery_Swap(void* ptr, void* other);
void QNetworkProxyQuery_DestroyQNetworkProxyQuery(void* ptr);
void QNetworkReply_Abort(void* ptr);
void* QNetworkReply_Attribute(void* ptr, int code);
void QNetworkReply_Close(void* ptr);
void QNetworkReply_ConnectEncrypted(void* ptr);
void QNetworkReply_DisconnectEncrypted(void* ptr);
int QNetworkReply_Error(void* ptr);
void QNetworkReply_ConnectFinished(void* ptr);
void QNetworkReply_DisconnectFinished(void* ptr);
int QNetworkReply_HasRawHeader(void* ptr, void* headerName);
void* QNetworkReply_Header(void* ptr, int header);
void QNetworkReply_IgnoreSslErrors(void* ptr);
int QNetworkReply_IsFinished(void* ptr);
int QNetworkReply_IsRunning(void* ptr);
void* QNetworkReply_Manager(void* ptr);
void QNetworkReply_ConnectMetaDataChanged(void* ptr);
void QNetworkReply_DisconnectMetaDataChanged(void* ptr);
int QNetworkReply_Operation(void* ptr);
void QNetworkReply_ConnectPreSharedKeyAuthenticationRequired(void* ptr);
void QNetworkReply_DisconnectPreSharedKeyAuthenticationRequired(void* ptr);
void* QNetworkReply_RawHeader(void* ptr, void* headerName);
void QNetworkReply_SetSslConfiguration(void* ptr, void* config);
void QNetworkReply_DestroyQNetworkReply(void* ptr);
void* QNetworkRequest_NewQNetworkRequest2(void* other);
void* QNetworkRequest_NewQNetworkRequest(void* url);
void* QNetworkRequest_Attribute(void* ptr, int code, void* defaultValue);
int QNetworkRequest_HasRawHeader(void* ptr, void* headerName);
void* QNetworkRequest_Header(void* ptr, int header);
void* QNetworkRequest_OriginatingObject(void* ptr);
int QNetworkRequest_Priority(void* ptr);
void* QNetworkRequest_RawHeader(void* ptr, void* headerName);
void QNetworkRequest_SetAttribute(void* ptr, int code, void* value);
void QNetworkRequest_SetHeader(void* ptr, int header, void* value);
void QNetworkRequest_SetOriginatingObject(void* ptr, void* object);
void QNetworkRequest_SetPriority(void* ptr, int priority);
void QNetworkRequest_SetRawHeader(void* ptr, void* headerName, void* headerValue);
void QNetworkRequest_SetSslConfiguration(void* ptr, void* config);
void QNetworkRequest_SetUrl(void* ptr, void* url);
void QNetworkRequest_Swap(void* ptr, void* other);
void QNetworkRequest_DestroyQNetworkRequest(void* ptr);
void* QNetworkSession_NewQNetworkSession(void* connectionConfig, void* parent);
void QNetworkSession_Accept(void* ptr);
void QNetworkSession_Close(void* ptr);
void QNetworkSession_ConnectClosed(void* ptr);
void QNetworkSession_DisconnectClosed(void* ptr);
int QNetworkSession_Error(void* ptr);
char* QNetworkSession_ErrorString(void* ptr);
void QNetworkSession_Ignore(void* ptr);
int QNetworkSession_IsOpen(void* ptr);
void QNetworkSession_Migrate(void* ptr);
void QNetworkSession_ConnectNewConfigurationActivated(void* ptr);
void QNetworkSession_DisconnectNewConfigurationActivated(void* ptr);
void QNetworkSession_Open(void* ptr);
void QNetworkSession_ConnectOpened(void* ptr);
void QNetworkSession_DisconnectOpened(void* ptr);
void QNetworkSession_Reject(void* ptr);
void* QNetworkSession_SessionProperty(void* ptr, char* key);
void QNetworkSession_SetSessionProperty(void* ptr, char* key, void* value);
void QNetworkSession_ConnectStateChanged(void* ptr);
void QNetworkSession_DisconnectStateChanged(void* ptr);
void QNetworkSession_Stop(void* ptr);
int QNetworkSession_UsagePolicies(void* ptr);
void QNetworkSession_ConnectUsagePoliciesChanged(void* ptr);
void QNetworkSession_DisconnectUsagePoliciesChanged(void* ptr);
int QNetworkSession_WaitForOpened(void* ptr, int msecs);
void QNetworkSession_DestroyQNetworkSession(void* ptr);
void* QSslCertificate_NewQSslCertificate3(void* other);
void QSslCertificate_Clear(void* ptr);
void* QSslCertificate_Digest(void* ptr, int algorithm);
int QSslCertificate_IsBlacklisted(void* ptr);
void QSslCertificate_Swap(void* ptr, void* other);
void QSslCertificate_DestroyQSslCertificate(void* ptr);
void* QSslCertificate_EffectiveDate(void* ptr);
void* QSslCertificate_ExpiryDate(void* ptr);
int QSslCertificate_IsNull(void* ptr);
int QSslCertificate_IsSelfSigned(void* ptr);
char* QSslCertificate_IssuerInfo(void* ptr, int subject);
char* QSslCertificate_IssuerInfo2(void* ptr, void* attribute);
void* QSslCertificate_SerialNumber(void* ptr);
char* QSslCertificate_SubjectInfo(void* ptr, int subject);
char* QSslCertificate_SubjectInfo2(void* ptr, void* attribute);
void* QSslCertificate_ToDer(void* ptr);
void* QSslCertificate_ToPem(void* ptr);
char* QSslCertificate_ToText(void* ptr);
void* QSslCertificate_Version(void* ptr);
void* QSslCertificateExtension_NewQSslCertificateExtension();
void* QSslCertificateExtension_NewQSslCertificateExtension2(void* other);
int QSslCertificateExtension_IsCritical(void* ptr);
int QSslCertificateExtension_IsSupported(void* ptr);
char* QSslCertificateExtension_Name(void* ptr);
char* QSslCertificateExtension_Oid(void* ptr);
void QSslCertificateExtension_Swap(void* ptr, void* other);
void* QSslCertificateExtension_Value(void* ptr);
void QSslCertificateExtension_DestroyQSslCertificateExtension(void* ptr);
void* QSslCipher_NewQSslCipher();
void* QSslCipher_NewQSslCipher4(void* other);
void* QSslCipher_NewQSslCipher2(char* name);
char* QSslCipher_AuthenticationMethod(void* ptr);
char* QSslCipher_EncryptionMethod(void* ptr);
int QSslCipher_IsNull(void* ptr);
char* QSslCipher_KeyExchangeMethod(void* ptr);
char* QSslCipher_Name(void* ptr);
char* QSslCipher_ProtocolString(void* ptr);
int QSslCipher_SupportedBits(void* ptr);
void QSslCipher_Swap(void* ptr, void* other);
int QSslCipher_UsedBits(void* ptr);
void QSslCipher_DestroyQSslCipher(void* ptr);
void* QSslConfiguration_NewQSslConfiguration();
void* QSslConfiguration_NewQSslConfiguration2(void* other);
int QSslConfiguration_IsNull(void* ptr);
void* QSslConfiguration_NextNegotiatedProtocol(void* ptr);
int QSslConfiguration_NextProtocolNegotiationStatus(void* ptr);
int QSslConfiguration_PeerVerifyDepth(void* ptr);
int QSslConfiguration_PeerVerifyMode(void* ptr);
void* QSslConfiguration_SessionTicket(void* ptr);
int QSslConfiguration_SessionTicketLifeTimeHint(void* ptr);
void QSslConfiguration_QSslConfiguration_SetDefaultConfiguration(void* configuration);
void QSslConfiguration_SetLocalCertificate(void* ptr, void* certificate);
void QSslConfiguration_SetPeerVerifyDepth(void* ptr, int depth);
void QSslConfiguration_SetPeerVerifyMode(void* ptr, int mode);
void QSslConfiguration_SetPrivateKey(void* ptr, void* key);
void QSslConfiguration_SetSessionTicket(void* ptr, void* sessionTicket);
void QSslConfiguration_Swap(void* ptr, void* other);
void QSslConfiguration_DestroyQSslConfiguration(void* ptr);
void* QSslEllipticCurve_NewQSslEllipticCurve();
int QSslEllipticCurve_IsValid(void* ptr);
int QSslEllipticCurve_IsTlsNamedCurve(void* ptr);
char* QSslEllipticCurve_LongName(void* ptr);
char* QSslEllipticCurve_ShortName(void* ptr);
void* QSslError_NewQSslError();
void* QSslError_NewQSslError2(int error);
void* QSslError_NewQSslError3(int error, void* certificate);
void* QSslError_NewQSslError4(void* other);
int QSslError_Error(void* ptr);
char* QSslError_ErrorString(void* ptr);
void QSslError_Swap(void* ptr, void* other);
void QSslError_DestroyQSslError(void* ptr);
void* QSslKey_NewQSslKey();
void* QSslKey_NewQSslKey5(void* other);
void QSslKey_Clear(void* ptr);
int QSslKey_IsNull(void* ptr);
int QSslKey_Length(void* ptr);
void QSslKey_Swap(void* ptr, void* other);
void* QSslKey_ToDer(void* ptr, void* passPhrase);
void* QSslKey_ToPem(void* ptr, void* passPhrase);
void QSslKey_DestroyQSslKey(void* ptr);
void* QSslPreSharedKeyAuthenticator_NewQSslPreSharedKeyAuthenticator();
void* QSslPreSharedKeyAuthenticator_NewQSslPreSharedKeyAuthenticator2(void* authenticator);
void* QSslPreSharedKeyAuthenticator_Identity(void* ptr);
void* QSslPreSharedKeyAuthenticator_IdentityHint(void* ptr);
int QSslPreSharedKeyAuthenticator_MaximumIdentityLength(void* ptr);
int QSslPreSharedKeyAuthenticator_MaximumPreSharedKeyLength(void* ptr);
void* QSslPreSharedKeyAuthenticator_PreSharedKey(void* ptr);
void QSslPreSharedKeyAuthenticator_SetIdentity(void* ptr, void* identity);
void QSslPreSharedKeyAuthenticator_SetPreSharedKey(void* ptr, void* preSharedKey);
void QSslPreSharedKeyAuthenticator_Swap(void* ptr, void* authenticator);
void QSslPreSharedKeyAuthenticator_DestroyQSslPreSharedKeyAuthenticator(void* ptr);
void* QSslSocket_NewQSslSocket(void* parent);
void QSslSocket_Abort(void* ptr);
void QSslSocket_AddCaCertificate(void* ptr, void* certificate);
void QSslSocket_QSslSocket_AddDefaultCaCertificate(void* certificate);
int QSslSocket_AtEnd(void* ptr);
int QSslSocket_CanReadLine(void* ptr);
void QSslSocket_Close(void* ptr);
void QSslSocket_ConnectEncrypted(void* ptr);
void QSslSocket_DisconnectEncrypted(void* ptr);
int QSslSocket_Flush(void* ptr);
void QSslSocket_IgnoreSslErrors(void* ptr);
int QSslSocket_IsEncrypted(void* ptr);
int QSslSocket_Mode(void* ptr);
void QSslSocket_ConnectModeChanged(void* ptr);
void QSslSocket_DisconnectModeChanged(void* ptr);
int QSslSocket_PeerVerifyDepth(void* ptr);
int QSslSocket_PeerVerifyMode(void* ptr);
char* QSslSocket_PeerVerifyName(void* ptr);
void QSslSocket_ConnectPreSharedKeyAuthenticationRequired(void* ptr);
void QSslSocket_DisconnectPreSharedKeyAuthenticationRequired(void* ptr);
void QSslSocket_Resume(void* ptr);
void QSslSocket_SetLocalCertificate(void* ptr, void* certificate);
void QSslSocket_SetPeerVerifyDepth(void* ptr, int depth);
void QSslSocket_SetPeerVerifyMode(void* ptr, int mode);
void QSslSocket_SetPeerVerifyName(void* ptr, char* hostName);
void QSslSocket_SetPrivateKey(void* ptr, void* key);
void QSslSocket_SetSocketOption(void* ptr, int option, void* value);
void QSslSocket_SetSslConfiguration(void* ptr, void* configuration);
void* QSslSocket_SocketOption(void* ptr, int option);
char* QSslSocket_QSslSocket_SslLibraryBuildVersionString();
char* QSslSocket_QSslSocket_SslLibraryVersionString();
void QSslSocket_StartClientEncryption(void* ptr);
void QSslSocket_StartServerEncryption(void* ptr);
int QSslSocket_QSslSocket_SupportsSsl();
int QSslSocket_WaitForBytesWritten(void* ptr, int msecs);
int QSslSocket_WaitForConnected(void* ptr, int msecs);
int QSslSocket_WaitForDisconnected(void* ptr, int msecs);
int QSslSocket_WaitForEncrypted(void* ptr, int msecs);
int QSslSocket_WaitForReadyRead(void* ptr, int msecs);
void QSslSocket_DestroyQSslSocket(void* ptr);
void* QTcpServer_NewQTcpServer(void* parent);
void QTcpServer_ConnectAcceptError(void* ptr);
void QTcpServer_DisconnectAcceptError(void* ptr);
void QTcpServer_Close(void* ptr);
char* QTcpServer_ErrorString(void* ptr);
int QTcpServer_HasPendingConnections(void* ptr);
int QTcpServer_IsListening(void* ptr);
int QTcpServer_MaxPendingConnections(void* ptr);
void QTcpServer_ConnectNewConnection(void* ptr);
void QTcpServer_DisconnectNewConnection(void* ptr);
void* QTcpServer_NextPendingConnection(void* ptr);
void QTcpServer_PauseAccepting(void* ptr);
void QTcpServer_ResumeAccepting(void* ptr);
int QTcpServer_ServerError(void* ptr);
void QTcpServer_SetMaxPendingConnections(void* ptr, int numConnections);
void QTcpServer_SetProxy(void* ptr, void* networkProxy);
int QTcpServer_WaitForNewConnection(void* ptr, int msec, int timedOut);
void QTcpServer_DestroyQTcpServer(void* ptr);
void* QTcpSocket_NewQTcpSocket(void* parent);
void QTcpSocket_DestroyQTcpSocket(void* ptr);
void* QUdpSocket_NewQUdpSocket(void* parent);
int QUdpSocket_HasPendingDatagrams(void* ptr);
int QUdpSocket_JoinMulticastGroup(void* ptr, void* groupAddress);
int QUdpSocket_JoinMulticastGroup2(void* ptr, void* groupAddress, void* iface);
int QUdpSocket_LeaveMulticastGroup(void* ptr, void* groupAddress);
int QUdpSocket_LeaveMulticastGroup2(void* ptr, void* groupAddress, void* iface);
void QUdpSocket_SetMulticastInterface(void* ptr, void* iface);
void QUdpSocket_DestroyQUdpSocket(void* ptr);

#ifdef __cplusplus
}
#endif