#pragma once

#ifndef GO_QTPOSITIONING_H
#define GO_QTPOSITIONING_H

#ifdef __cplusplus
extern "C" {
#endif

void* QGeoAddress_NewQGeoAddress();
void* QGeoAddress_NewQGeoAddress2(void* other);
char* QGeoAddress_City(void* ptr);
void QGeoAddress_Clear(void* ptr);
char* QGeoAddress_Country(void* ptr);
char* QGeoAddress_CountryCode(void* ptr);
char* QGeoAddress_County(void* ptr);
char* QGeoAddress_District(void* ptr);
int QGeoAddress_IsEmpty(void* ptr);
int QGeoAddress_IsTextGenerated(void* ptr);
char* QGeoAddress_PostalCode(void* ptr);
void QGeoAddress_SetCity(void* ptr, char* city);
void QGeoAddress_SetCountry(void* ptr, char* country);
void QGeoAddress_SetCountryCode(void* ptr, char* countryCode);
void QGeoAddress_SetCounty(void* ptr, char* county);
void QGeoAddress_SetDistrict(void* ptr, char* district);
void QGeoAddress_SetPostalCode(void* ptr, char* postalCode);
void QGeoAddress_SetState(void* ptr, char* state);
void QGeoAddress_SetStreet(void* ptr, char* street);
void QGeoAddress_SetText(void* ptr, char* text);
char* QGeoAddress_State(void* ptr);
char* QGeoAddress_Street(void* ptr);
char* QGeoAddress_Text(void* ptr);
void QGeoAddress_DestroyQGeoAddress(void* ptr);
void* QGeoAreaMonitorInfo_NewQGeoAreaMonitorInfo2(void* other);
void* QGeoAreaMonitorInfo_NewQGeoAreaMonitorInfo(char* name);
void* QGeoAreaMonitorInfo_Expiration(void* ptr);
char* QGeoAreaMonitorInfo_Identifier(void* ptr);
int QGeoAreaMonitorInfo_IsPersistent(void* ptr);
int QGeoAreaMonitorInfo_IsValid(void* ptr);
char* QGeoAreaMonitorInfo_Name(void* ptr);
void QGeoAreaMonitorInfo_SetArea(void* ptr, void* newShape);
void QGeoAreaMonitorInfo_SetExpiration(void* ptr, void* expiry);
void QGeoAreaMonitorInfo_SetName(void* ptr, char* name);
void QGeoAreaMonitorInfo_SetPersistent(void* ptr, int isPersistent);
void QGeoAreaMonitorInfo_DestroyQGeoAreaMonitorInfo(void* ptr);
char* QGeoAreaMonitorSource_QGeoAreaMonitorSource_AvailableSources();
void* QGeoAreaMonitorSource_QGeoAreaMonitorSource_CreateDefaultSource(void* parent);
void* QGeoAreaMonitorSource_QGeoAreaMonitorSource_CreateSource(char* sourceName, void* parent);
void QGeoAreaMonitorSource_ConnectError2(void* ptr);
void QGeoAreaMonitorSource_DisconnectError2(void* ptr);
void QGeoAreaMonitorSource_Error2(void* ptr, int areaMonitoringError);
int QGeoAreaMonitorSource_Error(void* ptr);
void* QGeoAreaMonitorSource_PositionInfoSource(void* ptr);
void* QGeoAreaMonitorSource_PositionInfoSourceDefault(void* ptr);
int QGeoAreaMonitorSource_RequestUpdate(void* ptr, void* monitor, char* signal);
void QGeoAreaMonitorSource_SetPositionInfoSource(void* ptr, void* newSource);
void QGeoAreaMonitorSource_SetPositionInfoSourceDefault(void* ptr, void* newSource);
char* QGeoAreaMonitorSource_SourceName(void* ptr);
int QGeoAreaMonitorSource_StartMonitoring(void* ptr, void* monitor);
int QGeoAreaMonitorSource_StopMonitoring(void* ptr, void* monitor);
int QGeoAreaMonitorSource_SupportedAreaMonitorFeatures(void* ptr);
void QGeoAreaMonitorSource_DestroyQGeoAreaMonitorSource(void* ptr);
void QGeoAreaMonitorSource_TimerEvent(void* ptr, void* event);
void QGeoAreaMonitorSource_TimerEventDefault(void* ptr, void* event);
void QGeoAreaMonitorSource_ChildEvent(void* ptr, void* event);
void QGeoAreaMonitorSource_ChildEventDefault(void* ptr, void* event);
void QGeoAreaMonitorSource_CustomEvent(void* ptr, void* event);
void QGeoAreaMonitorSource_CustomEventDefault(void* ptr, void* event);
void* QGeoCircle_NewQGeoCircle();
void* QGeoCircle_NewQGeoCircle3(void* other);
void* QGeoCircle_NewQGeoCircle2(void* center, double radius);
void* QGeoCircle_NewQGeoCircle4(void* other);
double QGeoCircle_Radius(void* ptr);
void QGeoCircle_SetCenter(void* ptr, void* center);
void QGeoCircle_SetRadius(void* ptr, double radius);
char* QGeoCircle_ToString(void* ptr);
void QGeoCircle_DestroyQGeoCircle(void* ptr);
void* QGeoCoordinate_NewQGeoCoordinate();
void* QGeoCoordinate_NewQGeoCoordinate4(void* other);
double QGeoCoordinate_AzimuthTo(void* ptr, void* other);
double QGeoCoordinate_DistanceTo(void* ptr, void* other);
int QGeoCoordinate_IsValid(void* ptr);
char* QGeoCoordinate_ToString(void* ptr, int format);
int QGeoCoordinate_Type(void* ptr);
void QGeoCoordinate_DestroyQGeoCoordinate(void* ptr);
void* QGeoPositionInfo_NewQGeoPositionInfo();
void* QGeoPositionInfo_NewQGeoPositionInfo2(void* coordinate, void* timestamp);
void* QGeoPositionInfo_NewQGeoPositionInfo3(void* other);
double QGeoPositionInfo_Attribute(void* ptr, int attribute);
int QGeoPositionInfo_HasAttribute(void* ptr, int attribute);
int QGeoPositionInfo_IsValid(void* ptr);
void QGeoPositionInfo_RemoveAttribute(void* ptr, int attribute);
void QGeoPositionInfo_SetAttribute(void* ptr, int attribute, double value);
void QGeoPositionInfo_SetCoordinate(void* ptr, void* coordinate);
void QGeoPositionInfo_SetTimestamp(void* ptr, void* timestamp);
void* QGeoPositionInfo_Timestamp(void* ptr);
void QGeoPositionInfo_DestroyQGeoPositionInfo(void* ptr);
void QGeoPositionInfoSource_SetUpdateInterval(void* ptr, int msec);
void QGeoPositionInfoSource_SetUpdateIntervalDefault(void* ptr, int msec);
char* QGeoPositionInfoSource_SourceName(void* ptr);
int QGeoPositionInfoSource_UpdateInterval(void* ptr);
char* QGeoPositionInfoSource_QGeoPositionInfoSource_AvailableSources();
void* QGeoPositionInfoSource_QGeoPositionInfoSource_CreateDefaultSource(void* parent);
void* QGeoPositionInfoSource_QGeoPositionInfoSource_CreateSource(char* sourceName, void* parent);
void QGeoPositionInfoSource_ConnectError2(void* ptr);
void QGeoPositionInfoSource_DisconnectError2(void* ptr);
void QGeoPositionInfoSource_Error2(void* ptr, int positioningError);
int QGeoPositionInfoSource_Error(void* ptr);
int QGeoPositionInfoSource_MinimumUpdateInterval(void* ptr);
int QGeoPositionInfoSource_PreferredPositioningMethods(void* ptr);
void QGeoPositionInfoSource_RequestUpdate(void* ptr, int timeout);
void QGeoPositionInfoSource_SetPreferredPositioningMethods(void* ptr, int methods);
void QGeoPositionInfoSource_SetPreferredPositioningMethodsDefault(void* ptr, int methods);
void QGeoPositionInfoSource_StartUpdates(void* ptr);
void QGeoPositionInfoSource_StopUpdates(void* ptr);
int QGeoPositionInfoSource_SupportedPositioningMethods(void* ptr);
void QGeoPositionInfoSource_ConnectUpdateTimeout(void* ptr);
void QGeoPositionInfoSource_DisconnectUpdateTimeout(void* ptr);
void QGeoPositionInfoSource_UpdateTimeout(void* ptr);
void QGeoPositionInfoSource_DestroyQGeoPositionInfoSource(void* ptr);
void QGeoPositionInfoSource_TimerEvent(void* ptr, void* event);
void QGeoPositionInfoSource_TimerEventDefault(void* ptr, void* event);
void QGeoPositionInfoSource_ChildEvent(void* ptr, void* event);
void QGeoPositionInfoSource_ChildEventDefault(void* ptr, void* event);
void QGeoPositionInfoSource_CustomEvent(void* ptr, void* event);
void QGeoPositionInfoSource_CustomEventDefault(void* ptr, void* event);
void* QGeoPositionInfoSourceFactory_AreaMonitor(void* ptr, void* parent);
void* QGeoPositionInfoSourceFactory_PositionInfoSource(void* ptr, void* parent);
void* QGeoPositionInfoSourceFactory_SatelliteInfoSource(void* ptr, void* parent);
void QGeoPositionInfoSourceFactory_DestroyQGeoPositionInfoSourceFactory(void* ptr);
char* QGeoPositionInfoSourceFactory_ObjectNameAbs(void* ptr);
void QGeoPositionInfoSourceFactory_SetObjectNameAbs(void* ptr, char* name);
void* QGeoRectangle_NewQGeoRectangle();
void* QGeoRectangle_NewQGeoRectangle3(void* topLeft, void* bottomRight);
void* QGeoRectangle_NewQGeoRectangle5(void* other);
void* QGeoRectangle_NewQGeoRectangle6(void* other);
int QGeoRectangle_Contains(void* ptr, void* rectangle);
int QGeoRectangle_Intersects(void* ptr, void* rectangle);
void QGeoRectangle_SetBottomLeft(void* ptr, void* bottomLeft);
void QGeoRectangle_SetBottomRight(void* ptr, void* bottomRight);
void QGeoRectangle_SetCenter(void* ptr, void* center);
void QGeoRectangle_SetTopLeft(void* ptr, void* topLeft);
void QGeoRectangle_SetTopRight(void* ptr, void* topRight);
char* QGeoRectangle_ToString(void* ptr);
void QGeoRectangle_DestroyQGeoRectangle(void* ptr);
void* QGeoSatelliteInfo_NewQGeoSatelliteInfo();
void* QGeoSatelliteInfo_NewQGeoSatelliteInfo2(void* other);
double QGeoSatelliteInfo_Attribute(void* ptr, int attribute);
int QGeoSatelliteInfo_HasAttribute(void* ptr, int attribute);
void QGeoSatelliteInfo_RemoveAttribute(void* ptr, int attribute);
int QGeoSatelliteInfo_SatelliteIdentifier(void* ptr);
int QGeoSatelliteInfo_SatelliteSystem(void* ptr);
void QGeoSatelliteInfo_SetAttribute(void* ptr, int attribute, double value);
void QGeoSatelliteInfo_SetSatelliteIdentifier(void* ptr, int satId);
void QGeoSatelliteInfo_SetSatelliteSystem(void* ptr, int system);
void QGeoSatelliteInfo_SetSignalStrength(void* ptr, int signalStrength);
int QGeoSatelliteInfo_SignalStrength(void* ptr);
void QGeoSatelliteInfo_DestroyQGeoSatelliteInfo(void* ptr);
void QGeoSatelliteInfoSource_SetUpdateInterval(void* ptr, int msec);
void QGeoSatelliteInfoSource_SetUpdateIntervalDefault(void* ptr, int msec);
int QGeoSatelliteInfoSource_UpdateInterval(void* ptr);
char* QGeoSatelliteInfoSource_QGeoSatelliteInfoSource_AvailableSources();
void* QGeoSatelliteInfoSource_QGeoSatelliteInfoSource_CreateDefaultSource(void* parent);
void* QGeoSatelliteInfoSource_QGeoSatelliteInfoSource_CreateSource(char* sourceName, void* parent);
void QGeoSatelliteInfoSource_ConnectError2(void* ptr);
void QGeoSatelliteInfoSource_DisconnectError2(void* ptr);
void QGeoSatelliteInfoSource_Error2(void* ptr, int satelliteError);
int QGeoSatelliteInfoSource_Error(void* ptr);
int QGeoSatelliteInfoSource_MinimumUpdateInterval(void* ptr);
void QGeoSatelliteInfoSource_ConnectRequestTimeout(void* ptr);
void QGeoSatelliteInfoSource_DisconnectRequestTimeout(void* ptr);
void QGeoSatelliteInfoSource_RequestTimeout(void* ptr);
void QGeoSatelliteInfoSource_RequestUpdate(void* ptr, int timeout);
char* QGeoSatelliteInfoSource_SourceName(void* ptr);
void QGeoSatelliteInfoSource_StartUpdates(void* ptr);
void QGeoSatelliteInfoSource_StopUpdates(void* ptr);
void QGeoSatelliteInfoSource_DestroyQGeoSatelliteInfoSource(void* ptr);
void QGeoSatelliteInfoSource_TimerEvent(void* ptr, void* event);
void QGeoSatelliteInfoSource_TimerEventDefault(void* ptr, void* event);
void QGeoSatelliteInfoSource_ChildEvent(void* ptr, void* event);
void QGeoSatelliteInfoSource_ChildEventDefault(void* ptr, void* event);
void QGeoSatelliteInfoSource_CustomEvent(void* ptr, void* event);
void QGeoSatelliteInfoSource_CustomEventDefault(void* ptr, void* event);
void* QGeoShape_NewQGeoShape();
void* QGeoShape_NewQGeoShape2(void* other);
int QGeoShape_Contains(void* ptr, void* coordinate);
void QGeoShape_ExtendShape(void* ptr, void* coordinate);
int QGeoShape_IsEmpty(void* ptr);
int QGeoShape_IsValid(void* ptr);
char* QGeoShape_ToString(void* ptr);
int QGeoShape_Type(void* ptr);
void QGeoShape_DestroyQGeoShape(void* ptr);
void* QNmeaPositionInfoSource_NewQNmeaPositionInfoSource(int updateMode, void* parent);
void* QNmeaPositionInfoSource_Device(void* ptr);
int QNmeaPositionInfoSource_Error(void* ptr);
int QNmeaPositionInfoSource_ErrorDefault(void* ptr);
int QNmeaPositionInfoSource_MinimumUpdateInterval(void* ptr);
int QNmeaPositionInfoSource_MinimumUpdateIntervalDefault(void* ptr);
int QNmeaPositionInfoSource_ParsePosInfoFromNmeaData(void* ptr, char* data, int size, void* posInfo, int hasFix);
int QNmeaPositionInfoSource_ParsePosInfoFromNmeaDataDefault(void* ptr, char* data, int size, void* posInfo, int hasFix);
void QNmeaPositionInfoSource_RequestUpdate(void* ptr, int msec);
void QNmeaPositionInfoSource_RequestUpdateDefault(void* ptr, int msec);
void QNmeaPositionInfoSource_SetDevice(void* ptr, void* device);
void QNmeaPositionInfoSource_SetUpdateInterval(void* ptr, int msec);
void QNmeaPositionInfoSource_SetUpdateIntervalDefault(void* ptr, int msec);
void QNmeaPositionInfoSource_StartUpdates(void* ptr);
void QNmeaPositionInfoSource_StartUpdatesDefault(void* ptr);
void QNmeaPositionInfoSource_StopUpdates(void* ptr);
void QNmeaPositionInfoSource_StopUpdatesDefault(void* ptr);
int QNmeaPositionInfoSource_SupportedPositioningMethods(void* ptr);
int QNmeaPositionInfoSource_SupportedPositioningMethodsDefault(void* ptr);
int QNmeaPositionInfoSource_UpdateMode(void* ptr);
void QNmeaPositionInfoSource_DestroyQNmeaPositionInfoSource(void* ptr);
void QNmeaPositionInfoSource_SetPreferredPositioningMethods(void* ptr, int methods);
void QNmeaPositionInfoSource_SetPreferredPositioningMethodsDefault(void* ptr, int methods);
void QNmeaPositionInfoSource_TimerEvent(void* ptr, void* event);
void QNmeaPositionInfoSource_TimerEventDefault(void* ptr, void* event);
void QNmeaPositionInfoSource_ChildEvent(void* ptr, void* event);
void QNmeaPositionInfoSource_ChildEventDefault(void* ptr, void* event);
void QNmeaPositionInfoSource_CustomEvent(void* ptr, void* event);
void QNmeaPositionInfoSource_CustomEventDefault(void* ptr, void* event);

#ifdef __cplusplus
}
#endif

#endif