#define protected public

#include "widgets.h"
#include "_cgo_export.h"

#include <QAbstractButton>
#include <QAbstractGraphicsShapeItem>
#include <QAbstractItemDelegate>
#include <QAbstractItemModel>
#include <QAbstractItemView>
#include <QAbstractProxyModel>
#include <QAbstractScrollArea>
#include <QAbstractSlider>
#include <QAbstractSpinBox>
#include <QAccessible>
#include <QAccessibleInterface>
#include <QAccessibleWidget>
#include <QAction>
#include <QActionEvent>
#include <QActionGroup>
#include <QApplication>
#include <QBitmap>
#include <QBoxLayout>
#include <QBrush>
#include <QButtonGroup>
#include <QByteArray>
#include <QCalendarWidget>
#include <QCheckBox>
#include <QChildEvent>
#include <QCloseEvent>
#include <QColor>
#include <QColorDialog>
#include <QColormap>
#include <QColumnView>
#include <QComboBox>
#include <QCommandLinkButton>
#include <QCommonStyle>
#include <QCompleter>
#include <QContextMenuEvent>
#include <QCursor>
#include <QDataWidgetMapper>
#include <QDate>
#include <QDateEdit>
#include <QDateTime>
#include <QDateTimeEdit>
#include <QDesktopWidget>
#include <QDial>
#include <QDialog>
#include <QDialogButtonBox>
#include <QDir>
#include <QDockWidget>
#include <QDoubleSpinBox>
#include <QDrag>
#include <QDragEnterEvent>
#include <QDragLeaveEvent>
#include <QDragMoveEvent>
#include <QDropEvent>
#include <QErrorMessage>
#include <QEvent>
#include <QFile>
#include <QFileDialog>
#include <QFileIconProvider>
#include <QFileInfo>
#include <QFileSystemModel>
#include <QFocusEvent>
#include <QFocusFrame>
#include <QFont>
#include <QFontComboBox>
#include <QFontDatabase>
#include <QFontDialog>
#include <QFontInfo>
#include <QFontMetrics>
#include <QFormLayout>
#include <QFrame>
#include <QGesture>
#include <QGestureEvent>
#include <QGraphicsAnchor>
#include <QGraphicsAnchorLayout>
#include <QGraphicsBlurEffect>
#include <QGraphicsColorizeEffect>
#include <QGraphicsDropShadowEffect>
#include <QGraphicsEffect>
#include <QGraphicsEllipseItem>
#include <QGraphicsGridLayout>
#include <QGraphicsItem>
#include <QGraphicsItemGroup>
#include <QGraphicsLayout>
#include <QGraphicsLayoutItem>
#include <QGraphicsLineItem>
#include <QGraphicsLinearLayout>
#include <QGraphicsObject>
#include <QGraphicsOpacityEffect>
#include <QGraphicsPathItem>
#include <QGraphicsPixmapItem>
#include <QGraphicsPolygonItem>
#include <QGraphicsProxyWidget>
#include <QGraphicsRectItem>
#include <QGraphicsRotation>
#include <QGraphicsScale>
#include <QGraphicsScene>
#include <QGraphicsSceneContextMenuEvent>
#include <QGraphicsSceneDragDropEvent>
#include <QGraphicsSceneEvent>
#include <QGraphicsSceneHelpEvent>
#include <QGraphicsSceneHoverEvent>
#include <QGraphicsSceneMouseEvent>
#include <QGraphicsSceneMoveEvent>
#include <QGraphicsSceneResizeEvent>
#include <QGraphicsSceneWheelEvent>
#include <QGraphicsSimpleTextItem>
#include <QGraphicsTextItem>
#include <QGraphicsView>
#include <QGraphicsWidget>
#include <QGridLayout>
#include <QGroupBox>
#include <QHBoxLayout>
#include <QHeaderView>
#include <QHelpEvent>
#include <QHideEvent>
#include <QIcon>
#include <QInputDialog>
#include <QInputMethod>
#include <QInputMethodEvent>
#include <QItemDelegate>
#include <QItemEditorCreator>
#include <QItemEditorCreatorBase>
#include <QItemEditorFactory>
#include <QItemSelection>
#include <QItemSelectionModel>
#include <QKeyEvent>
#include <QKeyEventTransition>
#include <QKeySequence>
#include <QKeySequenceEdit>
#include <QLCDNumber>
#include <QLabel>
#include <QLayout>
#include <QLayoutItem>
#include <QLine>
#include <QLineEdit>
#include <QLineF>
#include <QList>
#include <QListView>
#include <QListWidget>
#include <QListWidgetItem>
#include <QLocale>
#include <QMacCocoaViewContainer>
#include <QMacNativeWidget>
#include <QMainWindow>
#include <QMargins>
#include <QMatrix4x4>
#include <QMdiArea>
#include <QMdiSubWindow>
#include <QMenu>
#include <QMenuBar>
#include <QMessageBox>
#include <QMetaObject>
#include <QMimeData>
#include <QModelIndex>
#include <QMouseEvent>
#include <QMouseEventTransition>
#include <QMoveEvent>
#include <QMovie>
#include <QObject>
#include <QPagedPaintDevice>
#include <QPaintDevice>
#include <QPaintEvent>
#include <QPainter>
#include <QPainterPath>
#include <QPalette>
#include <QPanGesture>
#include <QPen>
#include <QPicture>
#include <QPinchGesture>
#include <QPixmap>
#include <QPlainTextDocumentLayout>
#include <QPlainTextEdit>
#include <QPoint>
#include <QPointF>
#include <QPolygon>
#include <QPolygonF>
#include <QProgressBar>
#include <QProgressDialog>
#include <QProxyStyle>
#include <QPushButton>
#include <QRadioButton>
#include <QRect>
#include <QRectF>
#include <QRegion>
#include <QResizeEvent>
#include <QRubberBand>
#include <QScrollArea>
#include <QScrollBar>
#include <QScroller>
#include <QScrollerProperties>
#include <QShortcut>
#include <QShowEvent>
#include <QSize>
#include <QSizeF>
#include <QSizeGrip>
#include <QSizePolicy>
#include <QSlider>
#include <QSpacerItem>
#include <QSpinBox>
#include <QSplashScreen>
#include <QSplitter>
#include <QSplitterHandle>
#include <QStack>
#include <QStackedLayout>
#include <QStackedWidget>
#include <QState>
#include <QStatusBar>
#include <QString>
#include <QStringList>
#include <QStyle>
#include <QStyleFactory>
#include <QStyleHintReturn>
#include <QStyleHintReturnMask>
#include <QStyleHintReturnVariant>
#include <QStyleOption>
#include <QStyleOptionButton>
#include <QStyleOptionComboBox>
#include <QStyleOptionComplex>
#include <QStyleOptionDockWidget>
#include <QStyleOptionFocusRect>
#include <QStyleOptionFrame>
#include <QStyleOptionGraphicsItem>
#include <QStyleOptionGroupBox>
#include <QStyleOptionHeader>
#include <QStyleOptionMenuItem>
#include <QStyleOptionProgressBar>
#include <QStyleOptionRubberBand>
#include <QStyleOptionSizeGrip>
#include <QStyleOptionSlider>
#include <QStyleOptionSpinBox>
#include <QStyleOptionTab>
#include <QStyleOptionTabBarBase>
#include <QStyleOptionTabWidgetFrame>
#include <QStyleOptionTitleBar>
#include <QStyleOptionToolBar>
#include <QStyleOptionToolBox>
#include <QStyleOptionToolButton>
#include <QStyleOptionViewItem>
#include <QStylePainter>
#include <QStylePlugin>
#include <QStyledItemDelegate>
#include <QSwipeGesture>
#include <QSystemTrayIcon>
#include <QTabBar>
#include <QTabWidget>
#include <QTableView>
#include <QTableWidget>
#include <QTableWidgetItem>
#include <QTableWidgetSelectionRange>
#include <QTabletEvent>
#include <QTapAndHoldGesture>
#include <QTapGesture>
#include <QTextBlock>
#include <QTextBrowser>
#include <QTextCharFormat>
#include <QTextCursor>
#include <QTextDocument>
#include <QTextEdit>
#include <QTextOption>
#include <QTileRules>
#include <QTime>
#include <QTimeEdit>
#include <QTimer>
#include <QTimerEvent>
#include <QToolBar>
#include <QToolBox>
#include <QToolButton>
#include <QToolTip>
#include <QTransform>
#include <QTreeView>
#include <QTreeWidget>
#include <QTreeWidgetItem>
#include <QUndoCommand>
#include <QUndoGroup>
#include <QUndoStack>
#include <QUndoView>
#include <QUrl>
#include <QVBoxLayout>
#include <QValidator>
#include <QVariant>
#include <QVector>
#include <QVector3D>
#include <QWhatsThis>
#include <QWheelEvent>
#include <QWidget>
#include <QWidgetAction>
#include <QWidgetItem>
#include <QWindow>
#include <QWizard>
#include <QWizardPage>

class MyQAbstractButton: public QAbstractButton {
public:
	void changeEvent(QEvent * e) { callbackQAbstractButtonChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void checkStateSet() { callbackQAbstractButtonCheckStateSet(this, this->objectName().toUtf8().data()); };
	void Signal_Clicked(bool checked) { callbackQAbstractButtonClicked(this, this->objectName().toUtf8().data(), checked); };
	void focusInEvent(QFocusEvent * e) { callbackQAbstractButtonFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQAbstractButtonFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQAbstractButtonKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQAbstractButtonKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQAbstractButtonMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQAbstractButtonMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQAbstractButtonMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void nextCheckState() { callbackQAbstractButtonNextCheckState(this, this->objectName().toUtf8().data()); };
	void Signal_Pressed() { callbackQAbstractButtonPressed(this, this->objectName().toUtf8().data()); };
	void Signal_Released() { callbackQAbstractButtonReleased(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * e) { callbackQAbstractButtonTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_Toggled(bool checked) { callbackQAbstractButtonToggled(this, this->objectName().toUtf8().data(), checked); };
	void actionEvent(QActionEvent * event) { callbackQAbstractButtonActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQAbstractButtonDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQAbstractButtonDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQAbstractButtonDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQAbstractButtonDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQAbstractButtonEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQAbstractButtonHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQAbstractButtonLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQAbstractButtonMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQAbstractButtonSetVisible(this, this->objectName().toUtf8().data(), visible)) { QAbstractButton::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQAbstractButtonShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQAbstractButtonCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQAbstractButtonContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQAbstractButtonInitPainter(const_cast<MyQAbstractButton*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQAbstractButtonInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQAbstractButtonMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQAbstractButtonResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQAbstractButtonTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQAbstractButtonWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQAbstractButtonChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQAbstractButtonCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QAbstractButton_AutoExclusive(void* ptr){
	return static_cast<QAbstractButton*>(ptr)->autoExclusive();
}

int QAbstractButton_AutoRepeat(void* ptr){
	return static_cast<QAbstractButton*>(ptr)->autoRepeat();
}

int QAbstractButton_AutoRepeatDelay(void* ptr){
	return static_cast<QAbstractButton*>(ptr)->autoRepeatDelay();
}

int QAbstractButton_AutoRepeatInterval(void* ptr){
	return static_cast<QAbstractButton*>(ptr)->autoRepeatInterval();
}

void* QAbstractButton_Icon(void* ptr){
	return new QIcon(static_cast<QAbstractButton*>(ptr)->icon());
}

void* QAbstractButton_IconSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QAbstractButton*>(ptr)->iconSize()).width(), static_cast<QSize>(static_cast<QAbstractButton*>(ptr)->iconSize()).height());
}

int QAbstractButton_IsCheckable(void* ptr){
	return static_cast<QAbstractButton*>(ptr)->isCheckable();
}

int QAbstractButton_IsChecked(void* ptr){
	return static_cast<QAbstractButton*>(ptr)->isChecked();
}

int QAbstractButton_IsDown(void* ptr){
	return static_cast<QAbstractButton*>(ptr)->isDown();
}

void QAbstractButton_SetAutoExclusive(void* ptr, int v){
	static_cast<QAbstractButton*>(ptr)->setAutoExclusive(v != 0);
}

void QAbstractButton_SetAutoRepeat(void* ptr, int v){
	static_cast<QAbstractButton*>(ptr)->setAutoRepeat(v != 0);
}

void QAbstractButton_SetAutoRepeatDelay(void* ptr, int v){
	static_cast<QAbstractButton*>(ptr)->setAutoRepeatDelay(v);
}

void QAbstractButton_SetAutoRepeatInterval(void* ptr, int v){
	static_cast<QAbstractButton*>(ptr)->setAutoRepeatInterval(v);
}

void QAbstractButton_SetCheckable(void* ptr, int v){
	static_cast<QAbstractButton*>(ptr)->setCheckable(v != 0);
}

void QAbstractButton_SetChecked(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QAbstractButton*>(ptr), "setChecked", Q_ARG(bool, v != 0));
}

void QAbstractButton_SetDown(void* ptr, int v){
	static_cast<QAbstractButton*>(ptr)->setDown(v != 0);
}

void QAbstractButton_SetIcon(void* ptr, void* icon){
	static_cast<QAbstractButton*>(ptr)->setIcon(*static_cast<QIcon*>(icon));
}

void QAbstractButton_SetIconSize(void* ptr, void* size){
	QMetaObject::invokeMethod(static_cast<QAbstractButton*>(ptr), "setIconSize", Q_ARG(QSize, *static_cast<QSize*>(size)));
}

void QAbstractButton_SetShortcut(void* ptr, void* key){
	static_cast<QAbstractButton*>(ptr)->setShortcut(*static_cast<QKeySequence*>(key));
}

void QAbstractButton_SetText(void* ptr, char* text){
	static_cast<QAbstractButton*>(ptr)->setText(QString(text));
}

void* QAbstractButton_Shortcut(void* ptr){
	return new QKeySequence(static_cast<QAbstractButton*>(ptr)->shortcut());
}

char* QAbstractButton_Text(void* ptr){
	return static_cast<QAbstractButton*>(ptr)->text().toUtf8().data();
}

void QAbstractButton_Toggle(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractButton*>(ptr), "toggle");
}

void QAbstractButton_AnimateClick(void* ptr, int msec){
	QMetaObject::invokeMethod(static_cast<QAbstractButton*>(ptr), "animateClick", Q_ARG(int, msec));
}

void QAbstractButton_ChangeEvent(void* ptr, void* e){
	static_cast<MyQAbstractButton*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QAbstractButton_ChangeEventDefault(void* ptr, void* e){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::changeEvent(static_cast<QEvent*>(e));
}

void QAbstractButton_CheckStateSet(void* ptr){
	static_cast<MyQAbstractButton*>(ptr)->checkStateSet();
}

void QAbstractButton_CheckStateSetDefault(void* ptr){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::checkStateSet();
}

void QAbstractButton_Click(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractButton*>(ptr), "click");
}

void QAbstractButton_ConnectClicked(void* ptr){
	QObject::connect(static_cast<QAbstractButton*>(ptr), static_cast<void (QAbstractButton::*)(bool)>(&QAbstractButton::clicked), static_cast<MyQAbstractButton*>(ptr), static_cast<void (MyQAbstractButton::*)(bool)>(&MyQAbstractButton::Signal_Clicked));;
}

void QAbstractButton_DisconnectClicked(void* ptr){
	QObject::disconnect(static_cast<QAbstractButton*>(ptr), static_cast<void (QAbstractButton::*)(bool)>(&QAbstractButton::clicked), static_cast<MyQAbstractButton*>(ptr), static_cast<void (MyQAbstractButton::*)(bool)>(&MyQAbstractButton::Signal_Clicked));;
}

void QAbstractButton_Clicked(void* ptr, int checked){
	static_cast<QAbstractButton*>(ptr)->clicked(checked != 0);
}

int QAbstractButton_Event(void* ptr, void* e){
	return static_cast<QAbstractButton*>(ptr)->event(static_cast<QEvent*>(e));
}

void QAbstractButton_FocusInEvent(void* ptr, void* e){
	static_cast<MyQAbstractButton*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QAbstractButton_FocusInEventDefault(void* ptr, void* e){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QAbstractButton_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQAbstractButton*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QAbstractButton_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::focusOutEvent(static_cast<QFocusEvent*>(e));
}

void* QAbstractButton_Group(void* ptr){
	return static_cast<QAbstractButton*>(ptr)->group();
}

int QAbstractButton_HitButton(void* ptr, void* pos){
	return static_cast<QAbstractButton*>(ptr)->hitButton(*static_cast<QPoint*>(pos));
}

void QAbstractButton_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQAbstractButton*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QAbstractButton_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QAbstractButton_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQAbstractButton*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QAbstractButton_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QAbstractButton_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQAbstractButton*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractButton_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractButton_MousePressEvent(void* ptr, void* e){
	static_cast<MyQAbstractButton*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractButton_MousePressEventDefault(void* ptr, void* e){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractButton_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQAbstractButton*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractButton_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractButton_NextCheckState(void* ptr){
	static_cast<MyQAbstractButton*>(ptr)->nextCheckState();
}

void QAbstractButton_NextCheckStateDefault(void* ptr){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::nextCheckState();
}

void QAbstractButton_ConnectPressed(void* ptr){
	QObject::connect(static_cast<QAbstractButton*>(ptr), static_cast<void (QAbstractButton::*)()>(&QAbstractButton::pressed), static_cast<MyQAbstractButton*>(ptr), static_cast<void (MyQAbstractButton::*)()>(&MyQAbstractButton::Signal_Pressed));;
}

void QAbstractButton_DisconnectPressed(void* ptr){
	QObject::disconnect(static_cast<QAbstractButton*>(ptr), static_cast<void (QAbstractButton::*)()>(&QAbstractButton::pressed), static_cast<MyQAbstractButton*>(ptr), static_cast<void (MyQAbstractButton::*)()>(&MyQAbstractButton::Signal_Pressed));;
}

void QAbstractButton_Pressed(void* ptr){
	static_cast<QAbstractButton*>(ptr)->pressed();
}

void QAbstractButton_ConnectReleased(void* ptr){
	QObject::connect(static_cast<QAbstractButton*>(ptr), static_cast<void (QAbstractButton::*)()>(&QAbstractButton::released), static_cast<MyQAbstractButton*>(ptr), static_cast<void (MyQAbstractButton::*)()>(&MyQAbstractButton::Signal_Released));;
}

void QAbstractButton_DisconnectReleased(void* ptr){
	QObject::disconnect(static_cast<QAbstractButton*>(ptr), static_cast<void (QAbstractButton::*)()>(&QAbstractButton::released), static_cast<MyQAbstractButton*>(ptr), static_cast<void (MyQAbstractButton::*)()>(&MyQAbstractButton::Signal_Released));;
}

void QAbstractButton_Released(void* ptr){
	static_cast<QAbstractButton*>(ptr)->released();
}

void QAbstractButton_TimerEvent(void* ptr, void* e){
	static_cast<MyQAbstractButton*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QAbstractButton_TimerEventDefault(void* ptr, void* e){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::timerEvent(static_cast<QTimerEvent*>(e));
}

void QAbstractButton_ConnectToggled(void* ptr){
	QObject::connect(static_cast<QAbstractButton*>(ptr), static_cast<void (QAbstractButton::*)(bool)>(&QAbstractButton::toggled), static_cast<MyQAbstractButton*>(ptr), static_cast<void (MyQAbstractButton::*)(bool)>(&MyQAbstractButton::Signal_Toggled));;
}

void QAbstractButton_DisconnectToggled(void* ptr){
	QObject::disconnect(static_cast<QAbstractButton*>(ptr), static_cast<void (QAbstractButton::*)(bool)>(&QAbstractButton::toggled), static_cast<MyQAbstractButton*>(ptr), static_cast<void (MyQAbstractButton::*)(bool)>(&MyQAbstractButton::Signal_Toggled));;
}

void QAbstractButton_Toggled(void* ptr, int checked){
	static_cast<QAbstractButton*>(ptr)->toggled(checked != 0);
}

void QAbstractButton_DestroyQAbstractButton(void* ptr){
	static_cast<QAbstractButton*>(ptr)->~QAbstractButton();
}

void QAbstractButton_ActionEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractButton_ActionEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractButton_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractButton_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractButton_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QAbstractButton_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QAbstractButton_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractButton_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractButton_DropEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QAbstractButton_DropEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::dropEvent(static_cast<QDropEvent*>(event));
}

void QAbstractButton_EnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QAbstractButton_EnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::enterEvent(static_cast<QEvent*>(event));
}

void QAbstractButton_HideEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QAbstractButton_HideEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::hideEvent(static_cast<QHideEvent*>(event));
}

void QAbstractButton_LeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractButton_LeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractButton_MoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractButton_MoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractButton_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQAbstractButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractButton_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QAbstractButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractButton_ShowEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QAbstractButton_ShowEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::showEvent(static_cast<QShowEvent*>(event));
}

void QAbstractButton_CloseEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractButton_CloseEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractButton_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QAbstractButton_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QAbstractButton_InitPainter(void* ptr, void* painter){
	static_cast<MyQAbstractButton*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QAbstractButton_InitPainterDefault(void* ptr, void* painter){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::initPainter(static_cast<QPainter*>(painter));
}

void QAbstractButton_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QAbstractButton_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QAbstractButton_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractButton_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractButton_ResizeEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractButton_ResizeEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractButton_TabletEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractButton_TabletEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractButton_WheelEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QAbstractButton_WheelEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QAbstractButton_ChildEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractButton_ChildEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractButton_CustomEvent(void* ptr, void* event){
	static_cast<MyQAbstractButton*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QAbstractButton_CustomEventDefault(void* ptr, void* event){
	static_cast<QAbstractButton*>(ptr)->QAbstractButton::customEvent(static_cast<QEvent*>(event));
}

class MyQAbstractGraphicsShapeItem: public QAbstractGraphicsShapeItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
};

void* QAbstractGraphicsShapeItem_Brush(void* ptr){
	return new QBrush(static_cast<QAbstractGraphicsShapeItem*>(ptr)->brush());
}

int QAbstractGraphicsShapeItem_IsObscuredBy(void* ptr, void* item){
	return static_cast<QAbstractGraphicsShapeItem*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void* QAbstractGraphicsShapeItem_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QAbstractGraphicsShapeItem*>(ptr)->opaqueArea());
}

void* QAbstractGraphicsShapeItem_Pen(void* ptr){
	return new QPen(static_cast<QAbstractGraphicsShapeItem*>(ptr)->pen());
}

void QAbstractGraphicsShapeItem_SetBrush(void* ptr, void* brush){
	static_cast<QAbstractGraphicsShapeItem*>(ptr)->setBrush(*static_cast<QBrush*>(brush));
}

void QAbstractGraphicsShapeItem_SetPen(void* ptr, void* pen){
	static_cast<QAbstractGraphicsShapeItem*>(ptr)->setPen(*static_cast<QPen*>(pen));
}

void QAbstractGraphicsShapeItem_DestroyQAbstractGraphicsShapeItem(void* ptr){
	static_cast<QAbstractGraphicsShapeItem*>(ptr)->~QAbstractGraphicsShapeItem();
}

char* QAbstractGraphicsShapeItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQAbstractGraphicsShapeItem*>(static_cast<QAbstractGraphicsShapeItem*>(ptr))) {
		return static_cast<MyQAbstractGraphicsShapeItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QAbstractGraphicsShapeItem_BASE").toUtf8().data();
}

void QAbstractGraphicsShapeItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQAbstractGraphicsShapeItem*>(static_cast<QAbstractGraphicsShapeItem*>(ptr))) {
		static_cast<MyQAbstractGraphicsShapeItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQAbstractItemDelegate: public QAbstractItemDelegate {
public:
	void Signal_CloseEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { callbackQAbstractItemDelegateCloseEditor(this, this->objectName().toUtf8().data(), editor, hint); };
	void Signal_CommitData(QWidget * editor) { callbackQAbstractItemDelegateCommitData(this, this->objectName().toUtf8().data(), editor); };
	void timerEvent(QTimerEvent * event) { callbackQAbstractItemDelegateTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQAbstractItemDelegateChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQAbstractItemDelegateCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QAbstractItemDelegate_ConnectCloseEditor(void* ptr){
	QObject::connect(static_cast<QAbstractItemDelegate*>(ptr), static_cast<void (QAbstractItemDelegate::*)(QWidget *, QAbstractItemDelegate::EndEditHint)>(&QAbstractItemDelegate::closeEditor), static_cast<MyQAbstractItemDelegate*>(ptr), static_cast<void (MyQAbstractItemDelegate::*)(QWidget *, QAbstractItemDelegate::EndEditHint)>(&MyQAbstractItemDelegate::Signal_CloseEditor));;
}

void QAbstractItemDelegate_DisconnectCloseEditor(void* ptr){
	QObject::disconnect(static_cast<QAbstractItemDelegate*>(ptr), static_cast<void (QAbstractItemDelegate::*)(QWidget *, QAbstractItemDelegate::EndEditHint)>(&QAbstractItemDelegate::closeEditor), static_cast<MyQAbstractItemDelegate*>(ptr), static_cast<void (MyQAbstractItemDelegate::*)(QWidget *, QAbstractItemDelegate::EndEditHint)>(&MyQAbstractItemDelegate::Signal_CloseEditor));;
}

void QAbstractItemDelegate_CloseEditor(void* ptr, void* editor, int hint){
	static_cast<QAbstractItemDelegate*>(ptr)->closeEditor(static_cast<QWidget*>(editor), static_cast<QAbstractItemDelegate::EndEditHint>(hint));
}

void QAbstractItemDelegate_ConnectCommitData(void* ptr){
	QObject::connect(static_cast<QAbstractItemDelegate*>(ptr), static_cast<void (QAbstractItemDelegate::*)(QWidget *)>(&QAbstractItemDelegate::commitData), static_cast<MyQAbstractItemDelegate*>(ptr), static_cast<void (MyQAbstractItemDelegate::*)(QWidget *)>(&MyQAbstractItemDelegate::Signal_CommitData));;
}

void QAbstractItemDelegate_DisconnectCommitData(void* ptr){
	QObject::disconnect(static_cast<QAbstractItemDelegate*>(ptr), static_cast<void (QAbstractItemDelegate::*)(QWidget *)>(&QAbstractItemDelegate::commitData), static_cast<MyQAbstractItemDelegate*>(ptr), static_cast<void (MyQAbstractItemDelegate::*)(QWidget *)>(&MyQAbstractItemDelegate::Signal_CommitData));;
}

void QAbstractItemDelegate_CommitData(void* ptr, void* editor){
	static_cast<QAbstractItemDelegate*>(ptr)->commitData(static_cast<QWidget*>(editor));
}

void* QAbstractItemDelegate_CreateEditor(void* ptr, void* parent, void* option, void* index){
	return static_cast<QAbstractItemDelegate*>(ptr)->createEditor(static_cast<QWidget*>(parent), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index));
}

int QAbstractItemDelegate_EditorEvent(void* ptr, void* event, void* model, void* option, void* index){
	return static_cast<QAbstractItemDelegate*>(ptr)->editorEvent(static_cast<QEvent*>(event), static_cast<QAbstractItemModel*>(model), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index));
}

int QAbstractItemDelegate_HelpEvent(void* ptr, void* event, void* view, void* option, void* index){
	return static_cast<QAbstractItemDelegate*>(ptr)->helpEvent(static_cast<QHelpEvent*>(event), static_cast<QAbstractItemView*>(view), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index));
}

void QAbstractItemDelegate_Paint(void* ptr, void* painter, void* option, void* index){
	static_cast<QAbstractItemDelegate*>(ptr)->paint(static_cast<QPainter*>(painter), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index));
}

void* QAbstractItemDelegate_SizeHint(void* ptr, void* option, void* index){
	return new QSize(static_cast<QSize>(static_cast<QAbstractItemDelegate*>(ptr)->sizeHint(*static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index))).width(), static_cast<QSize>(static_cast<QAbstractItemDelegate*>(ptr)->sizeHint(*static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index))).height());
}

void QAbstractItemDelegate_DestroyQAbstractItemDelegate(void* ptr){
	static_cast<QAbstractItemDelegate*>(ptr)->~QAbstractItemDelegate();
}

void QAbstractItemDelegate_TimerEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemDelegate*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QAbstractItemDelegate_TimerEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemDelegate*>(ptr)->QAbstractItemDelegate::timerEvent(static_cast<QTimerEvent*>(event));
}

void QAbstractItemDelegate_ChildEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemDelegate*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractItemDelegate_ChildEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemDelegate*>(ptr)->QAbstractItemDelegate::childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractItemDelegate_CustomEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemDelegate*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QAbstractItemDelegate_CustomEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemDelegate*>(ptr)->QAbstractItemDelegate::customEvent(static_cast<QEvent*>(event));
}

class MyQAbstractItemView: public QAbstractItemView {
public:
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQAbstractItemViewDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { if (!callbackQAbstractItemViewCloseEditor(this, this->objectName().toUtf8().data(), editor, hint)) { QAbstractItemView::closeEditor(editor, hint); }; };
	void commitData(QWidget * editor) { if (!callbackQAbstractItemViewCommitData(this, this->objectName().toUtf8().data(), editor)) { QAbstractItemView::commitData(editor); }; };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQAbstractItemViewDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQAbstractItemViewDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQAbstractItemViewDropEvent(this, this->objectName().toUtf8().data(), event); };
	void editorDestroyed(QObject * editor) { if (!callbackQAbstractItemViewEditorDestroyed(this, this->objectName().toUtf8().data(), editor)) { QAbstractItemView::editorDestroyed(editor); }; };
	void focusInEvent(QFocusEvent * event) { callbackQAbstractItemViewFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQAbstractItemViewFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_IconSizeChanged(const QSize & size) { callbackQAbstractItemViewIconSizeChanged(this, this->objectName().toUtf8().data(), new QSize(static_cast<QSize>(size).width(), static_cast<QSize>(size).height())); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQAbstractItemViewInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQAbstractItemViewKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyboardSearch(const QString & search) { callbackQAbstractItemViewKeyboardSearch(this, this->objectName().toUtf8().data(), search.toUtf8().data()); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQAbstractItemViewMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQAbstractItemViewMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQAbstractItemViewMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQAbstractItemViewMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void reset() { if (!callbackQAbstractItemViewReset(this, this->objectName().toUtf8().data())) { QAbstractItemView::reset(); }; };
	void resizeEvent(QResizeEvent * event) { callbackQAbstractItemViewResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void selectAll() { if (!callbackQAbstractItemViewSelectAll(this, this->objectName().toUtf8().data())) { QAbstractItemView::selectAll(); }; };
	void setModel(QAbstractItemModel * model) { callbackQAbstractItemViewSetModel(this, this->objectName().toUtf8().data(), model); };
	void setSelectionModel(QItemSelectionModel * selectionModel) { callbackQAbstractItemViewSetSelectionModel(this, this->objectName().toUtf8().data(), selectionModel); };
	void startDrag(Qt::DropActions supportedActions) { callbackQAbstractItemViewStartDrag(this, this->objectName().toUtf8().data(), supportedActions); };
	void timerEvent(QTimerEvent * event) { callbackQAbstractItemViewTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void updateGeometries() { if (!callbackQAbstractItemViewUpdateGeometries(this, this->objectName().toUtf8().data())) { QAbstractItemView::updateGeometries(); }; };
	void Signal_ViewportEntered() { callbackQAbstractItemViewViewportEntered(this, this->objectName().toUtf8().data()); };
	void paintEvent(QPaintEvent * event) { callbackQAbstractItemViewPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQAbstractItemViewContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQAbstractItemViewScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void setupViewport(QWidget * viewport) { callbackQAbstractItemViewSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQAbstractItemViewWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQAbstractItemViewChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQAbstractItemViewActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQAbstractItemViewEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQAbstractItemViewHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQAbstractItemViewLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQAbstractItemViewMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQAbstractItemViewSetVisible(this, this->objectName().toUtf8().data(), visible)) { QAbstractItemView::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQAbstractItemViewShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQAbstractItemViewCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQAbstractItemViewInitPainter(const_cast<MyQAbstractItemView*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQAbstractItemViewKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQAbstractItemViewTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQAbstractItemViewChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQAbstractItemViewCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QAbstractItemView_AlternatingRowColors(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->alternatingRowColors();
}

int QAbstractItemView_AutoScrollMargin(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->autoScrollMargin();
}

int QAbstractItemView_DefaultDropAction(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->defaultDropAction();
}

int QAbstractItemView_DragDropMode(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->dragDropMode();
}

int QAbstractItemView_DragDropOverwriteMode(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->dragDropOverwriteMode();
}

int QAbstractItemView_DragEnabled(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->dragEnabled();
}

void QAbstractItemView_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QAbstractItemView_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

int QAbstractItemView_EditTriggers(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->editTriggers();
}

int QAbstractItemView_HasAutoScroll(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->hasAutoScroll();
}

int QAbstractItemView_HorizontalScrollMode(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->horizontalScrollMode();
}

void* QAbstractItemView_IconSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QAbstractItemView*>(ptr)->iconSize()).width(), static_cast<QSize>(static_cast<QAbstractItemView*>(ptr)->iconSize()).height());
}

int QAbstractItemView_SelectionBehavior(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->selectionBehavior();
}

int QAbstractItemView_SelectionMode(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->selectionMode();
}

void QAbstractItemView_SetAlternatingRowColors(void* ptr, int enable){
	static_cast<QAbstractItemView*>(ptr)->setAlternatingRowColors(enable != 0);
}

void QAbstractItemView_SetAutoScroll(void* ptr, int enable){
	static_cast<QAbstractItemView*>(ptr)->setAutoScroll(enable != 0);
}

void QAbstractItemView_SetAutoScrollMargin(void* ptr, int margin){
	static_cast<QAbstractItemView*>(ptr)->setAutoScrollMargin(margin);
}

void QAbstractItemView_SetDefaultDropAction(void* ptr, int dropAction){
	static_cast<QAbstractItemView*>(ptr)->setDefaultDropAction(static_cast<Qt::DropAction>(dropAction));
}

void QAbstractItemView_SetDragDropMode(void* ptr, int behavior){
	static_cast<QAbstractItemView*>(ptr)->setDragDropMode(static_cast<QAbstractItemView::DragDropMode>(behavior));
}

void QAbstractItemView_SetDragDropOverwriteMode(void* ptr, int overwrite){
	static_cast<QAbstractItemView*>(ptr)->setDragDropOverwriteMode(overwrite != 0);
}

void QAbstractItemView_SetDragEnabled(void* ptr, int enable){
	static_cast<QAbstractItemView*>(ptr)->setDragEnabled(enable != 0);
}

void QAbstractItemView_SetDropIndicatorShown(void* ptr, int enable){
	static_cast<QAbstractItemView*>(ptr)->setDropIndicatorShown(enable != 0);
}

void QAbstractItemView_SetEditTriggers(void* ptr, int triggers){
	static_cast<QAbstractItemView*>(ptr)->setEditTriggers(static_cast<QAbstractItemView::EditTrigger>(triggers));
}

void QAbstractItemView_SetHorizontalScrollMode(void* ptr, int mode){
	static_cast<QAbstractItemView*>(ptr)->setHorizontalScrollMode(static_cast<QAbstractItemView::ScrollMode>(mode));
}

void QAbstractItemView_SetIconSize(void* ptr, void* size){
	static_cast<QAbstractItemView*>(ptr)->setIconSize(*static_cast<QSize*>(size));
}

void QAbstractItemView_SetSelectionBehavior(void* ptr, int behavior){
	static_cast<QAbstractItemView*>(ptr)->setSelectionBehavior(static_cast<QAbstractItemView::SelectionBehavior>(behavior));
}

void QAbstractItemView_SetSelectionMode(void* ptr, int mode){
	static_cast<QAbstractItemView*>(ptr)->setSelectionMode(static_cast<QAbstractItemView::SelectionMode>(mode));
}

void QAbstractItemView_SetTabKeyNavigation(void* ptr, int enable){
	static_cast<QAbstractItemView*>(ptr)->setTabKeyNavigation(enable != 0);
}

void QAbstractItemView_SetTextElideMode(void* ptr, int mode){
	static_cast<QAbstractItemView*>(ptr)->setTextElideMode(static_cast<Qt::TextElideMode>(mode));
}

void QAbstractItemView_SetVerticalScrollMode(void* ptr, int mode){
	static_cast<QAbstractItemView*>(ptr)->setVerticalScrollMode(static_cast<QAbstractItemView::ScrollMode>(mode));
}

int QAbstractItemView_ShowDropIndicator(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->showDropIndicator();
}

int QAbstractItemView_TabKeyNavigation(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->tabKeyNavigation();
}

int QAbstractItemView_TextElideMode(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->textElideMode();
}

int QAbstractItemView_VerticalScrollMode(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->verticalScrollMode();
}

int QAbstractItemView_ViewportEvent(void* ptr, void* event){
	return static_cast<QAbstractItemView*>(ptr)->viewportEvent(static_cast<QEvent*>(event));
}

void QAbstractItemView_ClearSelection(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "clearSelection");
}

void QAbstractItemView_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<MyQAbstractItemView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QAbstractItemView_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QAbstractItemView_ClosePersistentEditor(void* ptr, void* index){
	static_cast<QAbstractItemView*>(ptr)->closePersistentEditor(*static_cast<QModelIndex*>(index));
}

void QAbstractItemView_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQAbstractItemView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QAbstractItemView_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QAbstractItemView_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractItemView_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractItemView_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractItemView_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractItemView_DropEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QAbstractItemView_DropEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::dropEvent(static_cast<QDropEvent*>(event));
}

void QAbstractItemView_Edit(void* ptr, void* index){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "edit", Q_ARG(QModelIndex, *static_cast<QModelIndex*>(index)));
}

void QAbstractItemView_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQAbstractItemView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QAbstractItemView_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

int QAbstractItemView_Event(void* ptr, void* event){
	return static_cast<QAbstractItemView*>(ptr)->event(static_cast<QEvent*>(event));
}

void QAbstractItemView_FocusInEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractItemView_FocusInEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::focusInEvent(static_cast<QFocusEvent*>(event));
}

int QAbstractItemView_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QAbstractItemView*>(ptr)->focusNextPrevChild(next != 0);
}

void QAbstractItemView_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractItemView_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractItemView_ConnectIconSizeChanged(void* ptr){
	QObject::connect(static_cast<QAbstractItemView*>(ptr), static_cast<void (QAbstractItemView::*)(const QSize &)>(&QAbstractItemView::iconSizeChanged), static_cast<MyQAbstractItemView*>(ptr), static_cast<void (MyQAbstractItemView::*)(const QSize &)>(&MyQAbstractItemView::Signal_IconSizeChanged));;
}

void QAbstractItemView_DisconnectIconSizeChanged(void* ptr){
	QObject::disconnect(static_cast<QAbstractItemView*>(ptr), static_cast<void (QAbstractItemView::*)(const QSize &)>(&QAbstractItemView::iconSizeChanged), static_cast<MyQAbstractItemView*>(ptr), static_cast<void (MyQAbstractItemView::*)(const QSize &)>(&MyQAbstractItemView::Signal_IconSizeChanged));;
}

void QAbstractItemView_IconSizeChanged(void* ptr, void* size){
	static_cast<QAbstractItemView*>(ptr)->iconSizeChanged(*static_cast<QSize*>(size));
}

void* QAbstractItemView_IndexWidget(void* ptr, void* index){
	return static_cast<QAbstractItemView*>(ptr)->indexWidget(*static_cast<QModelIndex*>(index));
}

void QAbstractItemView_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QAbstractItemView_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void* QAbstractItemView_InputMethodQuery(void* ptr, int query){
	return new QVariant(static_cast<QAbstractItemView*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(query)));
}

void* QAbstractItemView_ItemDelegate(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->itemDelegate();
}

void* QAbstractItemView_ItemDelegate2(void* ptr, void* index){
	return static_cast<QAbstractItemView*>(ptr)->itemDelegate(*static_cast<QModelIndex*>(index));
}

void* QAbstractItemView_ItemDelegateForColumn(void* ptr, int column){
	return static_cast<QAbstractItemView*>(ptr)->itemDelegateForColumn(column);
}

void* QAbstractItemView_ItemDelegateForRow(void* ptr, int row){
	return static_cast<QAbstractItemView*>(ptr)->itemDelegateForRow(row);
}

void QAbstractItemView_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractItemView_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractItemView_KeyboardSearch(void* ptr, char* search){
	static_cast<MyQAbstractItemView*>(ptr)->keyboardSearch(QString(search));
}

void QAbstractItemView_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::keyboardSearch(QString(search));
}

void* QAbstractItemView_Model(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->model();
}

void QAbstractItemView_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractItemView_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractItemView_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractItemView_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractItemView_MousePressEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractItemView_MousePressEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractItemView_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractItemView_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractItemView_OpenPersistentEditor(void* ptr, void* index){
	static_cast<QAbstractItemView*>(ptr)->openPersistentEditor(*static_cast<QModelIndex*>(index));
}

void QAbstractItemView_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQAbstractItemView*>(ptr), "reset");
}

void QAbstractItemView_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "reset");
}

void QAbstractItemView_ResizeEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractItemView_ResizeEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractItemView_ScrollTo(void* ptr, void* index, int hint){
	static_cast<QAbstractItemView*>(ptr)->scrollTo(*static_cast<QModelIndex*>(index), static_cast<QAbstractItemView::ScrollHint>(hint));
}

void QAbstractItemView_ScrollToBottom(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "scrollToBottom");
}

void QAbstractItemView_ScrollToTop(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "scrollToTop");
}

void QAbstractItemView_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQAbstractItemView*>(ptr), "selectAll");
}

void QAbstractItemView_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "selectAll");
}

int QAbstractItemView_SelectionCommand(void* ptr, void* index, void* event){
	return static_cast<QAbstractItemView*>(ptr)->selectionCommand(*static_cast<QModelIndex*>(index), static_cast<QEvent*>(event));
}

void* QAbstractItemView_SelectionModel(void* ptr){
	return static_cast<QAbstractItemView*>(ptr)->selectionModel();
}

void QAbstractItemView_SetCurrentIndex(void* ptr, void* index){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "setCurrentIndex", Q_ARG(QModelIndex, *static_cast<QModelIndex*>(index)));
}

void QAbstractItemView_SetIndexWidget(void* ptr, void* index, void* widget){
	static_cast<QAbstractItemView*>(ptr)->setIndexWidget(*static_cast<QModelIndex*>(index), static_cast<QWidget*>(widget));
}

void QAbstractItemView_SetItemDelegate(void* ptr, void* delegate){
	static_cast<QAbstractItemView*>(ptr)->setItemDelegate(static_cast<QAbstractItemDelegate*>(delegate));
}

void QAbstractItemView_SetItemDelegateForColumn(void* ptr, int column, void* delegate){
	static_cast<QAbstractItemView*>(ptr)->setItemDelegateForColumn(column, static_cast<QAbstractItemDelegate*>(delegate));
}

void QAbstractItemView_SetItemDelegateForRow(void* ptr, int row, void* delegate){
	static_cast<QAbstractItemView*>(ptr)->setItemDelegateForRow(row, static_cast<QAbstractItemDelegate*>(delegate));
}

void QAbstractItemView_SetModel(void* ptr, void* model){
	static_cast<MyQAbstractItemView*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QAbstractItemView_SetModelDefault(void* ptr, void* model){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::setModel(static_cast<QAbstractItemModel*>(model));
}

void QAbstractItemView_SetSelectionModel(void* ptr, void* selectionModel){
	static_cast<MyQAbstractItemView*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QAbstractItemView_SetSelectionModelDefault(void* ptr, void* selectionModel){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

int QAbstractItemView_SizeHintForColumn(void* ptr, int column){
	return static_cast<QAbstractItemView*>(ptr)->sizeHintForColumn(column);
}

void* QAbstractItemView_SizeHintForIndex(void* ptr, void* index){
	return new QSize(static_cast<QSize>(static_cast<QAbstractItemView*>(ptr)->sizeHintForIndex(*static_cast<QModelIndex*>(index))).width(), static_cast<QSize>(static_cast<QAbstractItemView*>(ptr)->sizeHintForIndex(*static_cast<QModelIndex*>(index))).height());
}

int QAbstractItemView_SizeHintForRow(void* ptr, int row){
	return static_cast<QAbstractItemView*>(ptr)->sizeHintForRow(row);
}

void QAbstractItemView_StartDrag(void* ptr, int supportedActions){
	static_cast<MyQAbstractItemView*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QAbstractItemView_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QAbstractItemView_TimerEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QAbstractItemView_TimerEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::timerEvent(static_cast<QTimerEvent*>(event));
}

void QAbstractItemView_Update(void* ptr, void* index){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "update", Q_ARG(QModelIndex, *static_cast<QModelIndex*>(index)));
}

void QAbstractItemView_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQAbstractItemView*>(ptr), "updateGeometries");
}

void QAbstractItemView_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "updateGeometries");
}

void* QAbstractItemView_ViewOptions(void* ptr){
	return new QStyleOptionViewItem(static_cast<QAbstractItemView*>(ptr)->viewOptions());
}

void QAbstractItemView_ConnectViewportEntered(void* ptr){
	QObject::connect(static_cast<QAbstractItemView*>(ptr), static_cast<void (QAbstractItemView::*)()>(&QAbstractItemView::viewportEntered), static_cast<MyQAbstractItemView*>(ptr), static_cast<void (MyQAbstractItemView::*)()>(&MyQAbstractItemView::Signal_ViewportEntered));;
}

void QAbstractItemView_DisconnectViewportEntered(void* ptr){
	QObject::disconnect(static_cast<QAbstractItemView*>(ptr), static_cast<void (QAbstractItemView::*)()>(&QAbstractItemView::viewportEntered), static_cast<MyQAbstractItemView*>(ptr), static_cast<void (MyQAbstractItemView::*)()>(&MyQAbstractItemView::Signal_ViewportEntered));;
}

void QAbstractItemView_ViewportEntered(void* ptr){
	static_cast<QAbstractItemView*>(ptr)->viewportEntered();
}

void* QAbstractItemView_ViewportSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QAbstractItemView*>(ptr)->viewportSizeHint()).width(), static_cast<QSize>(static_cast<QAbstractItemView*>(ptr)->viewportSizeHint()).height());
}

void* QAbstractItemView_VisualRect(void* ptr, void* index){
	return new QRect(static_cast<QRect>(static_cast<QAbstractItemView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).x(), static_cast<QRect>(static_cast<QAbstractItemView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).y(), static_cast<QRect>(static_cast<QAbstractItemView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).width(), static_cast<QRect>(static_cast<QAbstractItemView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).height());
}

void QAbstractItemView_DestroyQAbstractItemView(void* ptr){
	static_cast<QAbstractItemView*>(ptr)->~QAbstractItemView();
}

void QAbstractItemView_PaintEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QAbstractItemView_PaintEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::paintEvent(static_cast<QPaintEvent*>(event));
}

void QAbstractItemView_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQAbstractItemView*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QAbstractItemView_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QAbstractItemView_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQAbstractItemView*>(ptr)->scrollContentsBy(dx, dy);
}

void QAbstractItemView_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::scrollContentsBy(dx, dy);
}

void QAbstractItemView_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQAbstractItemView*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QAbstractItemView_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::setupViewport(static_cast<QWidget*>(viewport));
}

void QAbstractItemView_WheelEvent(void* ptr, void* e){
	static_cast<MyQAbstractItemView*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QAbstractItemView_WheelEventDefault(void* ptr, void* e){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QAbstractItemView_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQAbstractItemView*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QAbstractItemView_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::changeEvent(static_cast<QEvent*>(ev));
}

void QAbstractItemView_ActionEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractItemView_ActionEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractItemView_EnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QAbstractItemView_EnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::enterEvent(static_cast<QEvent*>(event));
}

void QAbstractItemView_HideEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QAbstractItemView_HideEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::hideEvent(static_cast<QHideEvent*>(event));
}

void QAbstractItemView_LeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractItemView_LeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractItemView_MoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractItemView_MoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractItemView_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQAbstractItemView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractItemView_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QAbstractItemView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractItemView_ShowEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QAbstractItemView_ShowEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::showEvent(static_cast<QShowEvent*>(event));
}

void QAbstractItemView_CloseEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractItemView_CloseEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractItemView_InitPainter(void* ptr, void* painter){
	static_cast<MyQAbstractItemView*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QAbstractItemView_InitPainterDefault(void* ptr, void* painter){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::initPainter(static_cast<QPainter*>(painter));
}

void QAbstractItemView_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractItemView_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractItemView_TabletEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractItemView_TabletEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractItemView_ChildEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractItemView_ChildEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractItemView_CustomEvent(void* ptr, void* event){
	static_cast<MyQAbstractItemView*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QAbstractItemView_CustomEventDefault(void* ptr, void* event){
	static_cast<QAbstractItemView*>(ptr)->QAbstractItemView::customEvent(static_cast<QEvent*>(event));
}

class MyQAbstractScrollArea: public QAbstractScrollArea {
public:
	MyQAbstractScrollArea(QWidget *parent) : QAbstractScrollArea(parent) {};
	void dragEnterEvent(QDragEnterEvent * event) { callbackQAbstractScrollAreaDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQAbstractScrollAreaDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQAbstractScrollAreaDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQAbstractScrollAreaDropEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQAbstractScrollAreaPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQAbstractScrollAreaResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQAbstractScrollAreaContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQAbstractScrollAreaKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseDoubleClickEvent(QMouseEvent * e) { callbackQAbstractScrollAreaMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQAbstractScrollAreaMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQAbstractScrollAreaMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQAbstractScrollAreaMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQAbstractScrollAreaScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void setupViewport(QWidget * viewport) { callbackQAbstractScrollAreaSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQAbstractScrollAreaWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQAbstractScrollAreaChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQAbstractScrollAreaActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQAbstractScrollAreaEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQAbstractScrollAreaFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQAbstractScrollAreaFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQAbstractScrollAreaHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQAbstractScrollAreaLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQAbstractScrollAreaMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQAbstractScrollAreaSetVisible(this, this->objectName().toUtf8().data(), visible)) { QAbstractScrollArea::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQAbstractScrollAreaShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQAbstractScrollAreaCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQAbstractScrollAreaInitPainter(const_cast<MyQAbstractScrollArea*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQAbstractScrollAreaInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQAbstractScrollAreaKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQAbstractScrollAreaTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQAbstractScrollAreaTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQAbstractScrollAreaChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQAbstractScrollAreaCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QAbstractScrollArea_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractScrollArea_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractScrollArea_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QAbstractScrollArea_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QAbstractScrollArea_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractScrollArea_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractScrollArea_DropEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QAbstractScrollArea_DropEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::dropEvent(static_cast<QDropEvent*>(event));
}

int QAbstractScrollArea_Event(void* ptr, void* event){
	return static_cast<QAbstractScrollArea*>(ptr)->event(static_cast<QEvent*>(event));
}

int QAbstractScrollArea_HorizontalScrollBarPolicy(void* ptr){
	return static_cast<QAbstractScrollArea*>(ptr)->horizontalScrollBarPolicy();
}

void QAbstractScrollArea_PaintEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QAbstractScrollArea_PaintEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::paintEvent(static_cast<QPaintEvent*>(event));
}

void QAbstractScrollArea_ResizeEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractScrollArea_ResizeEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractScrollArea_SetHorizontalScrollBarPolicy(void* ptr, int v){
	static_cast<QAbstractScrollArea*>(ptr)->setHorizontalScrollBarPolicy(static_cast<Qt::ScrollBarPolicy>(v));
}

void QAbstractScrollArea_SetSizeAdjustPolicy(void* ptr, int policy){
	static_cast<QAbstractScrollArea*>(ptr)->setSizeAdjustPolicy(static_cast<QAbstractScrollArea::SizeAdjustPolicy>(policy));
}

void QAbstractScrollArea_SetVerticalScrollBarPolicy(void* ptr, int v){
	static_cast<QAbstractScrollArea*>(ptr)->setVerticalScrollBarPolicy(static_cast<Qt::ScrollBarPolicy>(v));
}

int QAbstractScrollArea_SizeAdjustPolicy(void* ptr){
	return static_cast<QAbstractScrollArea*>(ptr)->sizeAdjustPolicy();
}

int QAbstractScrollArea_VerticalScrollBarPolicy(void* ptr){
	return static_cast<QAbstractScrollArea*>(ptr)->verticalScrollBarPolicy();
}

int QAbstractScrollArea_ViewportEvent(void* ptr, void* event){
	return static_cast<QAbstractScrollArea*>(ptr)->viewportEvent(static_cast<QEvent*>(event));
}

void* QAbstractScrollArea_NewQAbstractScrollArea(void* parent){
	return new MyQAbstractScrollArea(static_cast<QWidget*>(parent));
}

void QAbstractScrollArea_AddScrollBarWidget(void* ptr, void* widget, int alignment){
	static_cast<QAbstractScrollArea*>(ptr)->addScrollBarWidget(static_cast<QWidget*>(widget), static_cast<Qt::AlignmentFlag>(alignment));
}

void QAbstractScrollArea_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQAbstractScrollArea*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QAbstractScrollArea_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void* QAbstractScrollArea_CornerWidget(void* ptr){
	return static_cast<QAbstractScrollArea*>(ptr)->cornerWidget();
}

void* QAbstractScrollArea_HorizontalScrollBar(void* ptr){
	return static_cast<QAbstractScrollArea*>(ptr)->horizontalScrollBar();
}

void QAbstractScrollArea_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQAbstractScrollArea*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QAbstractScrollArea_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void* QAbstractScrollArea_MaximumViewportSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QAbstractScrollArea*>(ptr)->maximumViewportSize()).width(), static_cast<QSize>(static_cast<QAbstractScrollArea*>(ptr)->maximumViewportSize()).height());
}

void* QAbstractScrollArea_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QAbstractScrollArea*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QAbstractScrollArea*>(ptr)->minimumSizeHint()).height());
}

void QAbstractScrollArea_MouseDoubleClickEvent(void* ptr, void* e){
	static_cast<MyQAbstractScrollArea*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractScrollArea_MouseDoubleClickEventDefault(void* ptr, void* e){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractScrollArea_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQAbstractScrollArea*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractScrollArea_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractScrollArea_MousePressEvent(void* ptr, void* e){
	static_cast<MyQAbstractScrollArea*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractScrollArea_MousePressEventDefault(void* ptr, void* e){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractScrollArea_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQAbstractScrollArea*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractScrollArea_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QAbstractScrollArea_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQAbstractScrollArea*>(ptr)->scrollContentsBy(dx, dy);
}

void QAbstractScrollArea_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::scrollContentsBy(dx, dy);
}

void QAbstractScrollArea_SetCornerWidget(void* ptr, void* widget){
	static_cast<QAbstractScrollArea*>(ptr)->setCornerWidget(static_cast<QWidget*>(widget));
}

void QAbstractScrollArea_SetHorizontalScrollBar(void* ptr, void* scrollBar){
	static_cast<QAbstractScrollArea*>(ptr)->setHorizontalScrollBar(static_cast<QScrollBar*>(scrollBar));
}

void QAbstractScrollArea_SetVerticalScrollBar(void* ptr, void* scrollBar){
	static_cast<QAbstractScrollArea*>(ptr)->setVerticalScrollBar(static_cast<QScrollBar*>(scrollBar));
}

void QAbstractScrollArea_SetViewport(void* ptr, void* widget){
	static_cast<QAbstractScrollArea*>(ptr)->setViewport(static_cast<QWidget*>(widget));
}

void QAbstractScrollArea_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQAbstractScrollArea*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QAbstractScrollArea_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::setupViewport(static_cast<QWidget*>(viewport));
}

void* QAbstractScrollArea_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QAbstractScrollArea*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QAbstractScrollArea*>(ptr)->sizeHint()).height());
}

void* QAbstractScrollArea_VerticalScrollBar(void* ptr){
	return static_cast<QAbstractScrollArea*>(ptr)->verticalScrollBar();
}

void* QAbstractScrollArea_Viewport(void* ptr){
	return static_cast<QAbstractScrollArea*>(ptr)->viewport();
}

void* QAbstractScrollArea_ViewportSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QAbstractScrollArea*>(ptr)->viewportSizeHint()).width(), static_cast<QSize>(static_cast<QAbstractScrollArea*>(ptr)->viewportSizeHint()).height());
}

void QAbstractScrollArea_WheelEvent(void* ptr, void* e){
	static_cast<MyQAbstractScrollArea*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QAbstractScrollArea_WheelEventDefault(void* ptr, void* e){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QAbstractScrollArea_DestroyQAbstractScrollArea(void* ptr){
	static_cast<QAbstractScrollArea*>(ptr)->~QAbstractScrollArea();
}

void QAbstractScrollArea_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQAbstractScrollArea*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QAbstractScrollArea_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::changeEvent(static_cast<QEvent*>(ev));
}

void QAbstractScrollArea_ActionEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractScrollArea_ActionEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractScrollArea_EnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QAbstractScrollArea_EnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::enterEvent(static_cast<QEvent*>(event));
}

void QAbstractScrollArea_FocusInEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractScrollArea_FocusInEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractScrollArea_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractScrollArea_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractScrollArea_HideEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QAbstractScrollArea_HideEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::hideEvent(static_cast<QHideEvent*>(event));
}

void QAbstractScrollArea_LeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractScrollArea_LeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractScrollArea_MoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractScrollArea_MoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractScrollArea_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQAbstractScrollArea*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractScrollArea_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QAbstractScrollArea*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractScrollArea_ShowEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QAbstractScrollArea_ShowEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::showEvent(static_cast<QShowEvent*>(event));
}

void QAbstractScrollArea_CloseEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractScrollArea_CloseEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractScrollArea_InitPainter(void* ptr, void* painter){
	static_cast<MyQAbstractScrollArea*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QAbstractScrollArea_InitPainterDefault(void* ptr, void* painter){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::initPainter(static_cast<QPainter*>(painter));
}

void QAbstractScrollArea_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QAbstractScrollArea_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QAbstractScrollArea_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractScrollArea_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractScrollArea_TabletEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractScrollArea_TabletEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractScrollArea_TimerEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QAbstractScrollArea_TimerEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::timerEvent(static_cast<QTimerEvent*>(event));
}

void QAbstractScrollArea_ChildEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractScrollArea_ChildEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractScrollArea_CustomEvent(void* ptr, void* event){
	static_cast<MyQAbstractScrollArea*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QAbstractScrollArea_CustomEventDefault(void* ptr, void* event){
	static_cast<QAbstractScrollArea*>(ptr)->QAbstractScrollArea::customEvent(static_cast<QEvent*>(event));
}

class MyQAbstractSlider: public QAbstractSlider {
public:
	MyQAbstractSlider(QWidget *parent) : QAbstractSlider(parent) {};
	void Signal_ActionTriggered(int action) { callbackQAbstractSliderActionTriggered(this, this->objectName().toUtf8().data(), action); };
	void changeEvent(QEvent * ev) { callbackQAbstractSliderChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void keyPressEvent(QKeyEvent * ev) { callbackQAbstractSliderKeyPressEvent(this, this->objectName().toUtf8().data(), ev); };
	void Signal_RangeChanged(int min, int max) { callbackQAbstractSliderRangeChanged(this, this->objectName().toUtf8().data(), min, max); };
	void sliderChange(QAbstractSlider::SliderChange change) { callbackQAbstractSliderSliderChange(this, this->objectName().toUtf8().data(), change); };
	void Signal_SliderMoved(int value) { callbackQAbstractSliderSliderMoved(this, this->objectName().toUtf8().data(), value); };
	void Signal_SliderPressed() { callbackQAbstractSliderSliderPressed(this, this->objectName().toUtf8().data()); };
	void Signal_SliderReleased() { callbackQAbstractSliderSliderReleased(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * e) { callbackQAbstractSliderTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_ValueChanged(int value) { callbackQAbstractSliderValueChanged(this, this->objectName().toUtf8().data(), value); };
	void wheelEvent(QWheelEvent * e) { callbackQAbstractSliderWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQAbstractSliderActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQAbstractSliderDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQAbstractSliderDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQAbstractSliderDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQAbstractSliderDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQAbstractSliderEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQAbstractSliderFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQAbstractSliderFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQAbstractSliderHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQAbstractSliderLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQAbstractSliderMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQAbstractSliderPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQAbstractSliderSetVisible(this, this->objectName().toUtf8().data(), visible)) { QAbstractSlider::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQAbstractSliderShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQAbstractSliderCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQAbstractSliderContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQAbstractSliderInitPainter(const_cast<MyQAbstractSlider*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQAbstractSliderInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQAbstractSliderKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQAbstractSliderMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQAbstractSliderMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQAbstractSliderMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQAbstractSliderMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQAbstractSliderResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQAbstractSliderTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQAbstractSliderChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQAbstractSliderCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QAbstractSlider_HasTracking(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->hasTracking();
}

int QAbstractSlider_InvertedAppearance(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->invertedAppearance();
}

int QAbstractSlider_InvertedControls(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->invertedControls();
}

int QAbstractSlider_IsSliderDown(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->isSliderDown();
}

int QAbstractSlider_Maximum(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->maximum();
}

int QAbstractSlider_Minimum(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->minimum();
}

int QAbstractSlider_Orientation(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->orientation();
}

int QAbstractSlider_PageStep(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->pageStep();
}

void QAbstractSlider_SetInvertedAppearance(void* ptr, int v){
	static_cast<QAbstractSlider*>(ptr)->setInvertedAppearance(v != 0);
}

void QAbstractSlider_SetInvertedControls(void* ptr, int v){
	static_cast<QAbstractSlider*>(ptr)->setInvertedControls(v != 0);
}

void QAbstractSlider_SetMaximum(void* ptr, int v){
	static_cast<QAbstractSlider*>(ptr)->setMaximum(v);
}

void QAbstractSlider_SetMinimum(void* ptr, int v){
	static_cast<QAbstractSlider*>(ptr)->setMinimum(v);
}

void QAbstractSlider_SetOrientation(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QAbstractSlider*>(ptr), "setOrientation", Q_ARG(Qt::Orientation, static_cast<Qt::Orientation>(v)));
}

void QAbstractSlider_SetPageStep(void* ptr, int v){
	static_cast<QAbstractSlider*>(ptr)->setPageStep(v);
}

void QAbstractSlider_SetSingleStep(void* ptr, int v){
	static_cast<QAbstractSlider*>(ptr)->setSingleStep(v);
}

void QAbstractSlider_SetSliderDown(void* ptr, int v){
	static_cast<QAbstractSlider*>(ptr)->setSliderDown(v != 0);
}

void QAbstractSlider_SetSliderPosition(void* ptr, int v){
	static_cast<QAbstractSlider*>(ptr)->setSliderPosition(v);
}

void QAbstractSlider_SetTracking(void* ptr, int enable){
	static_cast<QAbstractSlider*>(ptr)->setTracking(enable != 0);
}

void QAbstractSlider_SetValue(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QAbstractSlider*>(ptr), "setValue", Q_ARG(int, v));
}

int QAbstractSlider_SingleStep(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->singleStep();
}

int QAbstractSlider_SliderPosition(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->sliderPosition();
}

int QAbstractSlider_Value(void* ptr){
	return static_cast<QAbstractSlider*>(ptr)->value();
}

void* QAbstractSlider_NewQAbstractSlider(void* parent){
	return new MyQAbstractSlider(static_cast<QWidget*>(parent));
}

void QAbstractSlider_ConnectActionTriggered(void* ptr){
	QObject::connect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)(int)>(&QAbstractSlider::actionTriggered), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)(int)>(&MyQAbstractSlider::Signal_ActionTriggered));;
}

void QAbstractSlider_DisconnectActionTriggered(void* ptr){
	QObject::disconnect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)(int)>(&QAbstractSlider::actionTriggered), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)(int)>(&MyQAbstractSlider::Signal_ActionTriggered));;
}

void QAbstractSlider_ActionTriggered(void* ptr, int action){
	static_cast<QAbstractSlider*>(ptr)->actionTriggered(action);
}

void QAbstractSlider_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQAbstractSlider*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QAbstractSlider_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::changeEvent(static_cast<QEvent*>(ev));
}

int QAbstractSlider_Event(void* ptr, void* e){
	return static_cast<QAbstractSlider*>(ptr)->event(static_cast<QEvent*>(e));
}

void QAbstractSlider_KeyPressEvent(void* ptr, void* ev){
	static_cast<MyQAbstractSlider*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QAbstractSlider_KeyPressEventDefault(void* ptr, void* ev){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QAbstractSlider_ConnectRangeChanged(void* ptr){
	QObject::connect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)(int, int)>(&QAbstractSlider::rangeChanged), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)(int, int)>(&MyQAbstractSlider::Signal_RangeChanged));;
}

void QAbstractSlider_DisconnectRangeChanged(void* ptr){
	QObject::disconnect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)(int, int)>(&QAbstractSlider::rangeChanged), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)(int, int)>(&MyQAbstractSlider::Signal_RangeChanged));;
}

void QAbstractSlider_RangeChanged(void* ptr, int min, int max){
	static_cast<QAbstractSlider*>(ptr)->rangeChanged(min, max);
}

void QAbstractSlider_SetRange(void* ptr, int min, int max){
	QMetaObject::invokeMethod(static_cast<QAbstractSlider*>(ptr), "setRange", Q_ARG(int, min), Q_ARG(int, max));
}

void QAbstractSlider_SliderChange(void* ptr, int change){
	static_cast<MyQAbstractSlider*>(ptr)->sliderChange(static_cast<QAbstractSlider::SliderChange>(change));
}

void QAbstractSlider_SliderChangeDefault(void* ptr, int change){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::sliderChange(static_cast<QAbstractSlider::SliderChange>(change));
}

void QAbstractSlider_ConnectSliderMoved(void* ptr){
	QObject::connect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)(int)>(&QAbstractSlider::sliderMoved), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)(int)>(&MyQAbstractSlider::Signal_SliderMoved));;
}

void QAbstractSlider_DisconnectSliderMoved(void* ptr){
	QObject::disconnect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)(int)>(&QAbstractSlider::sliderMoved), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)(int)>(&MyQAbstractSlider::Signal_SliderMoved));;
}

void QAbstractSlider_SliderMoved(void* ptr, int value){
	static_cast<QAbstractSlider*>(ptr)->sliderMoved(value);
}

void QAbstractSlider_ConnectSliderPressed(void* ptr){
	QObject::connect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)()>(&QAbstractSlider::sliderPressed), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)()>(&MyQAbstractSlider::Signal_SliderPressed));;
}

void QAbstractSlider_DisconnectSliderPressed(void* ptr){
	QObject::disconnect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)()>(&QAbstractSlider::sliderPressed), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)()>(&MyQAbstractSlider::Signal_SliderPressed));;
}

void QAbstractSlider_SliderPressed(void* ptr){
	static_cast<QAbstractSlider*>(ptr)->sliderPressed();
}

void QAbstractSlider_ConnectSliderReleased(void* ptr){
	QObject::connect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)()>(&QAbstractSlider::sliderReleased), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)()>(&MyQAbstractSlider::Signal_SliderReleased));;
}

void QAbstractSlider_DisconnectSliderReleased(void* ptr){
	QObject::disconnect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)()>(&QAbstractSlider::sliderReleased), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)()>(&MyQAbstractSlider::Signal_SliderReleased));;
}

void QAbstractSlider_SliderReleased(void* ptr){
	static_cast<QAbstractSlider*>(ptr)->sliderReleased();
}

void QAbstractSlider_TimerEvent(void* ptr, void* e){
	static_cast<MyQAbstractSlider*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QAbstractSlider_TimerEventDefault(void* ptr, void* e){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::timerEvent(static_cast<QTimerEvent*>(e));
}

void QAbstractSlider_TriggerAction(void* ptr, int action){
	static_cast<QAbstractSlider*>(ptr)->triggerAction(static_cast<QAbstractSlider::SliderAction>(action));
}

void QAbstractSlider_ConnectValueChanged(void* ptr){
	QObject::connect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)(int)>(&QAbstractSlider::valueChanged), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)(int)>(&MyQAbstractSlider::Signal_ValueChanged));;
}

void QAbstractSlider_DisconnectValueChanged(void* ptr){
	QObject::disconnect(static_cast<QAbstractSlider*>(ptr), static_cast<void (QAbstractSlider::*)(int)>(&QAbstractSlider::valueChanged), static_cast<MyQAbstractSlider*>(ptr), static_cast<void (MyQAbstractSlider::*)(int)>(&MyQAbstractSlider::Signal_ValueChanged));;
}

void QAbstractSlider_ValueChanged(void* ptr, int value){
	static_cast<QAbstractSlider*>(ptr)->valueChanged(value);
}

void QAbstractSlider_WheelEvent(void* ptr, void* e){
	static_cast<MyQAbstractSlider*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QAbstractSlider_WheelEventDefault(void* ptr, void* e){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QAbstractSlider_DestroyQAbstractSlider(void* ptr){
	static_cast<QAbstractSlider*>(ptr)->~QAbstractSlider();
}

void QAbstractSlider_ActionEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractSlider_ActionEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractSlider_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractSlider_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractSlider_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QAbstractSlider_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QAbstractSlider_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractSlider_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractSlider_DropEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QAbstractSlider_DropEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::dropEvent(static_cast<QDropEvent*>(event));
}

void QAbstractSlider_EnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QAbstractSlider_EnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::enterEvent(static_cast<QEvent*>(event));
}

void QAbstractSlider_FocusInEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractSlider_FocusInEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractSlider_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractSlider_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractSlider_HideEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QAbstractSlider_HideEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::hideEvent(static_cast<QHideEvent*>(event));
}

void QAbstractSlider_LeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractSlider_LeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractSlider_MoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractSlider_MoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractSlider_PaintEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QAbstractSlider_PaintEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::paintEvent(static_cast<QPaintEvent*>(event));
}

void QAbstractSlider_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQAbstractSlider*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractSlider_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QAbstractSlider*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractSlider_ShowEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QAbstractSlider_ShowEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::showEvent(static_cast<QShowEvent*>(event));
}

void QAbstractSlider_CloseEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractSlider_CloseEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractSlider_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QAbstractSlider_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QAbstractSlider_InitPainter(void* ptr, void* painter){
	static_cast<MyQAbstractSlider*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QAbstractSlider_InitPainterDefault(void* ptr, void* painter){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::initPainter(static_cast<QPainter*>(painter));
}

void QAbstractSlider_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QAbstractSlider_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QAbstractSlider_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractSlider_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractSlider_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSlider_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSlider_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSlider_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSlider_MousePressEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSlider_MousePressEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSlider_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSlider_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSlider_ResizeEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractSlider_ResizeEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractSlider_TabletEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractSlider_TabletEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractSlider_ChildEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractSlider_ChildEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractSlider_CustomEvent(void* ptr, void* event){
	static_cast<MyQAbstractSlider*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QAbstractSlider_CustomEventDefault(void* ptr, void* event){
	static_cast<QAbstractSlider*>(ptr)->QAbstractSlider::customEvent(static_cast<QEvent*>(event));
}

class MyQAbstractSpinBox: public QAbstractSpinBox {
public:
	MyQAbstractSpinBox(QWidget *parent) : QAbstractSpinBox(parent) {};
	void changeEvent(QEvent * event) { callbackQAbstractSpinBoxChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void clear() { if (!callbackQAbstractSpinBoxClear(this, this->objectName().toUtf8().data())) { QAbstractSpinBox::clear(); }; };
	void closeEvent(QCloseEvent * event) { callbackQAbstractSpinBoxCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQAbstractSpinBoxContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_EditingFinished() { callbackQAbstractSpinBoxEditingFinished(this, this->objectName().toUtf8().data()); };
	void focusInEvent(QFocusEvent * event) { callbackQAbstractSpinBoxFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQAbstractSpinBoxFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQAbstractSpinBoxHideEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQAbstractSpinBoxKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQAbstractSpinBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQAbstractSpinBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQAbstractSpinBoxMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQAbstractSpinBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQAbstractSpinBoxPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQAbstractSpinBoxResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void showEvent(QShowEvent * event) { callbackQAbstractSpinBoxShowEvent(this, this->objectName().toUtf8().data(), event); };
	void stepBy(int steps) { callbackQAbstractSpinBoxStepBy(this, this->objectName().toUtf8().data(), steps); };
	void timerEvent(QTimerEvent * event) { callbackQAbstractSpinBoxTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQAbstractSpinBoxWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQAbstractSpinBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQAbstractSpinBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQAbstractSpinBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQAbstractSpinBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQAbstractSpinBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQAbstractSpinBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQAbstractSpinBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQAbstractSpinBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQAbstractSpinBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QAbstractSpinBox::setVisible(visible); }; };
	void initPainter(QPainter * painter) const { callbackQAbstractSpinBoxInitPainter(const_cast<MyQAbstractSpinBox*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQAbstractSpinBoxInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQAbstractSpinBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQAbstractSpinBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQAbstractSpinBoxChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQAbstractSpinBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QAbstractSpinBox_Alignment(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->alignment();
}

int QAbstractSpinBox_ButtonSymbols(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->buttonSymbols();
}

int QAbstractSpinBox_CorrectionMode(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->correctionMode();
}

int QAbstractSpinBox_HasAcceptableInput(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->hasAcceptableInput();
}

int QAbstractSpinBox_HasFrame(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->hasFrame();
}

int QAbstractSpinBox_IsAccelerated(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->isAccelerated();
}

int QAbstractSpinBox_IsGroupSeparatorShown(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->isGroupSeparatorShown();
}

int QAbstractSpinBox_IsReadOnly(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->isReadOnly();
}

int QAbstractSpinBox_KeyboardTracking(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->keyboardTracking();
}

void QAbstractSpinBox_SetAccelerated(void* ptr, int on){
	static_cast<QAbstractSpinBox*>(ptr)->setAccelerated(on != 0);
}

void QAbstractSpinBox_SetAlignment(void* ptr, int flag){
	static_cast<QAbstractSpinBox*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(flag));
}

void QAbstractSpinBox_SetButtonSymbols(void* ptr, int bs){
	static_cast<QAbstractSpinBox*>(ptr)->setButtonSymbols(static_cast<QAbstractSpinBox::ButtonSymbols>(bs));
}

void QAbstractSpinBox_SetCorrectionMode(void* ptr, int cm){
	static_cast<QAbstractSpinBox*>(ptr)->setCorrectionMode(static_cast<QAbstractSpinBox::CorrectionMode>(cm));
}

void QAbstractSpinBox_SetFrame(void* ptr, int v){
	static_cast<QAbstractSpinBox*>(ptr)->setFrame(v != 0);
}

void QAbstractSpinBox_SetGroupSeparatorShown(void* ptr, int shown){
	static_cast<QAbstractSpinBox*>(ptr)->setGroupSeparatorShown(shown != 0);
}

void QAbstractSpinBox_SetKeyboardTracking(void* ptr, int kt){
	static_cast<QAbstractSpinBox*>(ptr)->setKeyboardTracking(kt != 0);
}

void QAbstractSpinBox_SetReadOnly(void* ptr, int r){
	static_cast<QAbstractSpinBox*>(ptr)->setReadOnly(r != 0);
}

void QAbstractSpinBox_SetSpecialValueText(void* ptr, char* txt){
	static_cast<QAbstractSpinBox*>(ptr)->setSpecialValueText(QString(txt));
}

void QAbstractSpinBox_SetWrapping(void* ptr, int w){
	static_cast<QAbstractSpinBox*>(ptr)->setWrapping(w != 0);
}

char* QAbstractSpinBox_SpecialValueText(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->specialValueText().toUtf8().data();
}

char* QAbstractSpinBox_Text(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->text().toUtf8().data();
}

int QAbstractSpinBox_Wrapping(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->wrapping();
}

void* QAbstractSpinBox_NewQAbstractSpinBox(void* parent){
	return new MyQAbstractSpinBox(static_cast<QWidget*>(parent));
}

void QAbstractSpinBox_ChangeEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QAbstractSpinBox_ChangeEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::changeEvent(static_cast<QEvent*>(event));
}

void QAbstractSpinBox_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQAbstractSpinBox*>(ptr), "clear");
}

void QAbstractSpinBox_ClearDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractSpinBox*>(ptr), "clear");
}

void QAbstractSpinBox_CloseEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractSpinBox_CloseEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::closeEvent(static_cast<QCloseEvent*>(event));
}

void QAbstractSpinBox_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QAbstractSpinBox_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QAbstractSpinBox_ConnectEditingFinished(void* ptr){
	QObject::connect(static_cast<QAbstractSpinBox*>(ptr), static_cast<void (QAbstractSpinBox::*)()>(&QAbstractSpinBox::editingFinished), static_cast<MyQAbstractSpinBox*>(ptr), static_cast<void (MyQAbstractSpinBox::*)()>(&MyQAbstractSpinBox::Signal_EditingFinished));;
}

void QAbstractSpinBox_DisconnectEditingFinished(void* ptr){
	QObject::disconnect(static_cast<QAbstractSpinBox*>(ptr), static_cast<void (QAbstractSpinBox::*)()>(&QAbstractSpinBox::editingFinished), static_cast<MyQAbstractSpinBox*>(ptr), static_cast<void (MyQAbstractSpinBox::*)()>(&MyQAbstractSpinBox::Signal_EditingFinished));;
}

void QAbstractSpinBox_EditingFinished(void* ptr){
	static_cast<QAbstractSpinBox*>(ptr)->editingFinished();
}

int QAbstractSpinBox_Event(void* ptr, void* event){
	return static_cast<QAbstractSpinBox*>(ptr)->event(static_cast<QEvent*>(event));
}

void QAbstractSpinBox_FocusInEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractSpinBox_FocusInEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractSpinBox_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractSpinBox_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QAbstractSpinBox_HideEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QAbstractSpinBox_HideEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::hideEvent(static_cast<QHideEvent*>(event));
}

void* QAbstractSpinBox_InputMethodQuery(void* ptr, int query){
	return new QVariant(static_cast<QAbstractSpinBox*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(query)));
}

void QAbstractSpinBox_InterpretText(void* ptr){
	static_cast<QAbstractSpinBox*>(ptr)->interpretText();
}

void QAbstractSpinBox_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractSpinBox_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractSpinBox_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QAbstractSpinBox_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void* QAbstractSpinBox_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QAbstractSpinBox*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QAbstractSpinBox*>(ptr)->minimumSizeHint()).height());
}

void QAbstractSpinBox_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSpinBox_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSpinBox_MousePressEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSpinBox_MousePressEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSpinBox_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSpinBox_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSpinBox_PaintEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QAbstractSpinBox_PaintEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::paintEvent(static_cast<QPaintEvent*>(event));
}

void QAbstractSpinBox_ResizeEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractSpinBox_ResizeEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QAbstractSpinBox_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractSpinBox*>(ptr), "selectAll");
}

void QAbstractSpinBox_ShowEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QAbstractSpinBox_ShowEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::showEvent(static_cast<QShowEvent*>(event));
}

void* QAbstractSpinBox_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QAbstractSpinBox*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QAbstractSpinBox*>(ptr)->sizeHint()).height());
}

void QAbstractSpinBox_StepBy(void* ptr, int steps){
	static_cast<MyQAbstractSpinBox*>(ptr)->stepBy(steps);
}

void QAbstractSpinBox_StepByDefault(void* ptr, int steps){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::stepBy(steps);
}

void QAbstractSpinBox_StepDown(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractSpinBox*>(ptr), "stepDown");
}

int QAbstractSpinBox_StepEnabled(void* ptr){
	return static_cast<QAbstractSpinBox*>(ptr)->stepEnabled();
}

void QAbstractSpinBox_StepUp(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAbstractSpinBox*>(ptr), "stepUp");
}

void QAbstractSpinBox_TimerEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QAbstractSpinBox_TimerEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::timerEvent(static_cast<QTimerEvent*>(event));
}

void QAbstractSpinBox_WheelEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QAbstractSpinBox_WheelEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QAbstractSpinBox_DestroyQAbstractSpinBox(void* ptr){
	static_cast<QAbstractSpinBox*>(ptr)->~QAbstractSpinBox();
}

void QAbstractSpinBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractSpinBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QAbstractSpinBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractSpinBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QAbstractSpinBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QAbstractSpinBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QAbstractSpinBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractSpinBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QAbstractSpinBox_DropEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QAbstractSpinBox_DropEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QAbstractSpinBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QAbstractSpinBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::enterEvent(static_cast<QEvent*>(event));
}

void QAbstractSpinBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractSpinBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::leaveEvent(static_cast<QEvent*>(event));
}

void QAbstractSpinBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractSpinBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QAbstractSpinBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQAbstractSpinBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractSpinBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QAbstractSpinBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QAbstractSpinBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQAbstractSpinBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QAbstractSpinBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::initPainter(static_cast<QPainter*>(painter));
}

void QAbstractSpinBox_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QAbstractSpinBox_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QAbstractSpinBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSpinBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QAbstractSpinBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractSpinBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QAbstractSpinBox_ChildEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractSpinBox_ChildEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractSpinBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQAbstractSpinBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QAbstractSpinBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QAbstractSpinBox*>(ptr)->QAbstractSpinBox::customEvent(static_cast<QEvent*>(event));
}

class MyQAccessibleWidget: public QAccessibleWidget {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQAccessibleWidget(QWidget *w, QAccessible::Role role, const QString &name) : QAccessibleWidget(w, role, name) {};
	void doAction(const QString & actionName) { callbackQAccessibleWidgetDoAction(this, this->objectNameAbs().toUtf8().data(), actionName.toUtf8().data()); };
	void setText(QAccessible::Text t, const QString & text) { callbackQAccessibleWidgetSetText(this, this->objectNameAbs().toUtf8().data(), t, text.toUtf8().data()); };
};

void* QAccessibleWidget_NewQAccessibleWidget(void* w, int role, char* name){
	return new MyQAccessibleWidget(static_cast<QWidget*>(w), static_cast<QAccessible::Role>(role), QString(name));
}

char* QAccessibleWidget_ActionNames(void* ptr){
	return static_cast<QAccessibleWidget*>(ptr)->actionNames().join("|").toUtf8().data();
}

void* QAccessibleWidget_BackgroundColor(void* ptr){
	return new QColor(static_cast<QAccessibleWidget*>(ptr)->backgroundColor());
}

void* QAccessibleWidget_Child(void* ptr, int index){
	return static_cast<QAccessibleWidget*>(ptr)->child(index);
}

int QAccessibleWidget_ChildCount(void* ptr){
	return static_cast<QAccessibleWidget*>(ptr)->childCount();
}

void QAccessibleWidget_DoAction(void* ptr, char* actionName){
	static_cast<MyQAccessibleWidget*>(ptr)->doAction(QString(actionName));
}

void QAccessibleWidget_DoActionDefault(void* ptr, char* actionName){
	static_cast<QAccessibleWidget*>(ptr)->QAccessibleWidget::doAction(QString(actionName));
}

void* QAccessibleWidget_FocusChild(void* ptr){
	return static_cast<QAccessibleWidget*>(ptr)->focusChild();
}

void* QAccessibleWidget_ForegroundColor(void* ptr){
	return new QColor(static_cast<QAccessibleWidget*>(ptr)->foregroundColor());
}

int QAccessibleWidget_IndexOfChild(void* ptr, void* child){
	return static_cast<QAccessibleWidget*>(ptr)->indexOfChild(static_cast<QAccessibleInterface*>(child));
}

void* QAccessibleWidget_Interface_cast(void* ptr, int t){
	return static_cast<QAccessibleWidget*>(ptr)->interface_cast(static_cast<QAccessible::InterfaceType>(t));
}

int QAccessibleWidget_IsValid(void* ptr){
	return static_cast<QAccessibleWidget*>(ptr)->isValid();
}

char* QAccessibleWidget_KeyBindingsForAction(void* ptr, char* actionName){
	return static_cast<QAccessibleWidget*>(ptr)->keyBindingsForAction(QString(actionName)).join("|").toUtf8().data();
}

void* QAccessibleWidget_Parent(void* ptr){
	return static_cast<QAccessibleWidget*>(ptr)->parent();
}

void* QAccessibleWidget_Rect(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QAccessibleWidget*>(ptr)->rect()).x(), static_cast<QRect>(static_cast<QAccessibleWidget*>(ptr)->rect()).y(), static_cast<QRect>(static_cast<QAccessibleWidget*>(ptr)->rect()).width(), static_cast<QRect>(static_cast<QAccessibleWidget*>(ptr)->rect()).height());
}

int QAccessibleWidget_Role(void* ptr){
	return static_cast<QAccessibleWidget*>(ptr)->role();
}

char* QAccessibleWidget_Text(void* ptr, int t){
	return static_cast<QAccessibleWidget*>(ptr)->text(static_cast<QAccessible::Text>(t)).toUtf8().data();
}

void* QAccessibleWidget_Window(void* ptr){
	return static_cast<QAccessibleWidget*>(ptr)->window();
}

char* QAccessibleWidget_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQAccessibleWidget*>(static_cast<QAccessibleWidget*>(ptr))) {
		return static_cast<MyQAccessibleWidget*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QAccessibleWidget_BASE").toUtf8().data();
}

void QAccessibleWidget_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQAccessibleWidget*>(static_cast<QAccessibleWidget*>(ptr))) {
		static_cast<MyQAccessibleWidget*>(ptr)->setObjectNameAbs(QString(name));
	}
}

void QAccessibleWidget_SetText(void* ptr, int t, char* text){
	static_cast<MyQAccessibleWidget*>(ptr)->setText(static_cast<QAccessible::Text>(t), QString(text));
}

void QAccessibleWidget_SetTextDefault(void* ptr, int t, char* text){
	static_cast<QAccessibleWidget*>(ptr)->QAccessibleWidget::setText(static_cast<QAccessible::Text>(t), QString(text));
}

class MyQAction: public QAction {
public:
	MyQAction(QObject *parent) : QAction(parent) {};
	MyQAction(const QIcon &icon, const QString &text, QObject *parent) : QAction(icon, text, parent) {};
	MyQAction(const QString &text, QObject *parent) : QAction(text, parent) {};
	void Signal_Changed() { callbackQActionChanged(this, this->objectName().toUtf8().data()); };
	void Signal_Hovered() { callbackQActionHovered(this, this->objectName().toUtf8().data()); };
	void Signal_Toggled(bool checked) { callbackQActionToggled(this, this->objectName().toUtf8().data(), checked); };
	void Signal_Triggered(bool checked) { callbackQActionTriggered(this, this->objectName().toUtf8().data(), checked); };
	void timerEvent(QTimerEvent * event) { callbackQActionTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQActionChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQActionCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QAction_AutoRepeat(void* ptr){
	return static_cast<QAction*>(ptr)->autoRepeat();
}

void* QAction_Font(void* ptr){
	return new QFont(static_cast<QAction*>(ptr)->font());
}

void* QAction_Icon(void* ptr){
	return new QIcon(static_cast<QAction*>(ptr)->icon());
}

char* QAction_IconText(void* ptr){
	return static_cast<QAction*>(ptr)->iconText().toUtf8().data();
}

int QAction_IsCheckable(void* ptr){
	return static_cast<QAction*>(ptr)->isCheckable();
}

int QAction_IsChecked(void* ptr){
	return static_cast<QAction*>(ptr)->isChecked();
}

int QAction_IsEnabled(void* ptr){
	return static_cast<QAction*>(ptr)->isEnabled();
}

int QAction_IsIconVisibleInMenu(void* ptr){
	return static_cast<QAction*>(ptr)->isIconVisibleInMenu();
}

int QAction_IsVisible(void* ptr){
	return static_cast<QAction*>(ptr)->isVisible();
}

int QAction_MenuRole(void* ptr){
	return static_cast<QAction*>(ptr)->menuRole();
}

int QAction_Priority(void* ptr){
	return static_cast<QAction*>(ptr)->priority();
}

void QAction_SetAutoRepeat(void* ptr, int v){
	static_cast<QAction*>(ptr)->setAutoRepeat(v != 0);
}

void QAction_SetCheckable(void* ptr, int v){
	static_cast<QAction*>(ptr)->setCheckable(v != 0);
}

void QAction_SetChecked(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QAction*>(ptr), "setChecked", Q_ARG(bool, v != 0));
}

void QAction_SetData(void* ptr, void* userData){
	static_cast<QAction*>(ptr)->setData(*static_cast<QVariant*>(userData));
}

void QAction_SetEnabled(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QAction*>(ptr), "setEnabled", Q_ARG(bool, v != 0));
}

void QAction_SetFont(void* ptr, void* font){
	static_cast<QAction*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QAction_SetIcon(void* ptr, void* icon){
	static_cast<QAction*>(ptr)->setIcon(*static_cast<QIcon*>(icon));
}

void QAction_SetIconText(void* ptr, char* text){
	static_cast<QAction*>(ptr)->setIconText(QString(text));
}

void QAction_SetIconVisibleInMenu(void* ptr, int visible){
	static_cast<QAction*>(ptr)->setIconVisibleInMenu(visible != 0);
}

void QAction_SetMenuRole(void* ptr, int menuRole){
	static_cast<QAction*>(ptr)->setMenuRole(static_cast<QAction::MenuRole>(menuRole));
}

void QAction_SetPriority(void* ptr, int priority){
	static_cast<QAction*>(ptr)->setPriority(static_cast<QAction::Priority>(priority));
}

void QAction_SetShortcut(void* ptr, void* shortcut){
	static_cast<QAction*>(ptr)->setShortcut(*static_cast<QKeySequence*>(shortcut));
}

void QAction_SetShortcutContext(void* ptr, int context){
	static_cast<QAction*>(ptr)->setShortcutContext(static_cast<Qt::ShortcutContext>(context));
}

void QAction_SetStatusTip(void* ptr, char* statusTip){
	static_cast<QAction*>(ptr)->setStatusTip(QString(statusTip));
}

void QAction_SetText(void* ptr, char* text){
	static_cast<QAction*>(ptr)->setText(QString(text));
}

void QAction_SetToolTip(void* ptr, char* tip){
	static_cast<QAction*>(ptr)->setToolTip(QString(tip));
}

void QAction_SetVisible(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QAction*>(ptr), "setVisible", Q_ARG(bool, v != 0));
}

void QAction_SetWhatsThis(void* ptr, char* what){
	static_cast<QAction*>(ptr)->setWhatsThis(QString(what));
}

int QAction_ShortcutContext(void* ptr){
	return static_cast<QAction*>(ptr)->shortcutContext();
}

char* QAction_StatusTip(void* ptr){
	return static_cast<QAction*>(ptr)->statusTip().toUtf8().data();
}

char* QAction_Text(void* ptr){
	return static_cast<QAction*>(ptr)->text().toUtf8().data();
}

void QAction_Toggle(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAction*>(ptr), "toggle");
}

char* QAction_ToolTip(void* ptr){
	return static_cast<QAction*>(ptr)->toolTip().toUtf8().data();
}

char* QAction_WhatsThis(void* ptr){
	return static_cast<QAction*>(ptr)->whatsThis().toUtf8().data();
}

void* QAction_NewQAction(void* parent){
	return new MyQAction(static_cast<QObject*>(parent));
}

void* QAction_NewQAction3(void* icon, char* text, void* parent){
	return new MyQAction(*static_cast<QIcon*>(icon), QString(text), static_cast<QObject*>(parent));
}

void* QAction_NewQAction2(char* text, void* parent){
	return new MyQAction(QString(text), static_cast<QObject*>(parent));
}

void* QAction_ActionGroup(void* ptr){
	return static_cast<QAction*>(ptr)->actionGroup();
}

void QAction_Activate(void* ptr, int event){
	static_cast<QAction*>(ptr)->activate(static_cast<QAction::ActionEvent>(event));
}

void QAction_ConnectChanged(void* ptr){
	QObject::connect(static_cast<QAction*>(ptr), static_cast<void (QAction::*)()>(&QAction::changed), static_cast<MyQAction*>(ptr), static_cast<void (MyQAction::*)()>(&MyQAction::Signal_Changed));;
}

void QAction_DisconnectChanged(void* ptr){
	QObject::disconnect(static_cast<QAction*>(ptr), static_cast<void (QAction::*)()>(&QAction::changed), static_cast<MyQAction*>(ptr), static_cast<void (MyQAction::*)()>(&MyQAction::Signal_Changed));;
}

void QAction_Changed(void* ptr){
	static_cast<QAction*>(ptr)->changed();
}

void* QAction_Data(void* ptr){
	return new QVariant(static_cast<QAction*>(ptr)->data());
}

int QAction_Event(void* ptr, void* e){
	return static_cast<QAction*>(ptr)->event(static_cast<QEvent*>(e));
}

void QAction_Hover(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAction*>(ptr), "hover");
}

void QAction_ConnectHovered(void* ptr){
	QObject::connect(static_cast<QAction*>(ptr), static_cast<void (QAction::*)()>(&QAction::hovered), static_cast<MyQAction*>(ptr), static_cast<void (MyQAction::*)()>(&MyQAction::Signal_Hovered));;
}

void QAction_DisconnectHovered(void* ptr){
	QObject::disconnect(static_cast<QAction*>(ptr), static_cast<void (QAction::*)()>(&QAction::hovered), static_cast<MyQAction*>(ptr), static_cast<void (MyQAction::*)()>(&MyQAction::Signal_Hovered));;
}

void QAction_Hovered(void* ptr){
	static_cast<QAction*>(ptr)->hovered();
}

int QAction_IsSeparator(void* ptr){
	return static_cast<QAction*>(ptr)->isSeparator();
}

void* QAction_Menu(void* ptr){
	return static_cast<QAction*>(ptr)->menu();
}

void* QAction_ParentWidget(void* ptr){
	return static_cast<QAction*>(ptr)->parentWidget();
}

void QAction_SetActionGroup(void* ptr, void* group){
	static_cast<QAction*>(ptr)->setActionGroup(static_cast<QActionGroup*>(group));
}

void QAction_SetDisabled(void* ptr, int b){
	QMetaObject::invokeMethod(static_cast<QAction*>(ptr), "setDisabled", Q_ARG(bool, b != 0));
}

void QAction_SetMenu(void* ptr, void* menu){
	static_cast<QAction*>(ptr)->setMenu(static_cast<QMenu*>(menu));
}

void QAction_SetSeparator(void* ptr, int b){
	static_cast<QAction*>(ptr)->setSeparator(b != 0);
}

void QAction_SetShortcuts2(void* ptr, int key){
	static_cast<QAction*>(ptr)->setShortcuts(static_cast<QKeySequence::StandardKey>(key));
}

void* QAction_Shortcut(void* ptr){
	return new QKeySequence(static_cast<QAction*>(ptr)->shortcut());
}

int QAction_ShowStatusText(void* ptr, void* widget){
	return static_cast<QAction*>(ptr)->showStatusText(static_cast<QWidget*>(widget));
}

void QAction_ConnectToggled(void* ptr){
	QObject::connect(static_cast<QAction*>(ptr), static_cast<void (QAction::*)(bool)>(&QAction::toggled), static_cast<MyQAction*>(ptr), static_cast<void (MyQAction::*)(bool)>(&MyQAction::Signal_Toggled));;
}

void QAction_DisconnectToggled(void* ptr){
	QObject::disconnect(static_cast<QAction*>(ptr), static_cast<void (QAction::*)(bool)>(&QAction::toggled), static_cast<MyQAction*>(ptr), static_cast<void (MyQAction::*)(bool)>(&MyQAction::Signal_Toggled));;
}

void QAction_Toggled(void* ptr, int checked){
	static_cast<QAction*>(ptr)->toggled(checked != 0);
}

void QAction_Trigger(void* ptr){
	QMetaObject::invokeMethod(static_cast<QAction*>(ptr), "trigger");
}

void QAction_ConnectTriggered(void* ptr){
	QObject::connect(static_cast<QAction*>(ptr), static_cast<void (QAction::*)(bool)>(&QAction::triggered), static_cast<MyQAction*>(ptr), static_cast<void (MyQAction::*)(bool)>(&MyQAction::Signal_Triggered));;
}

void QAction_DisconnectTriggered(void* ptr){
	QObject::disconnect(static_cast<QAction*>(ptr), static_cast<void (QAction::*)(bool)>(&QAction::triggered), static_cast<MyQAction*>(ptr), static_cast<void (MyQAction::*)(bool)>(&MyQAction::Signal_Triggered));;
}

void QAction_Triggered(void* ptr, int checked){
	static_cast<QAction*>(ptr)->triggered(checked != 0);
}

void QAction_DestroyQAction(void* ptr){
	static_cast<QAction*>(ptr)->~QAction();
}

void QAction_TimerEvent(void* ptr, void* event){
	static_cast<MyQAction*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QAction_TimerEventDefault(void* ptr, void* event){
	static_cast<QAction*>(ptr)->QAction::timerEvent(static_cast<QTimerEvent*>(event));
}

void QAction_ChildEvent(void* ptr, void* event){
	static_cast<MyQAction*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QAction_ChildEventDefault(void* ptr, void* event){
	static_cast<QAction*>(ptr)->QAction::childEvent(static_cast<QChildEvent*>(event));
}

void QAction_CustomEvent(void* ptr, void* event){
	static_cast<MyQAction*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QAction_CustomEventDefault(void* ptr, void* event){
	static_cast<QAction*>(ptr)->QAction::customEvent(static_cast<QEvent*>(event));
}

class MyQActionGroup: public QActionGroup {
public:
	void Signal_Hovered(QAction * action) { callbackQActionGroupHovered(this, this->objectName().toUtf8().data(), action); };
	void Signal_Triggered(QAction * action) { callbackQActionGroupTriggered(this, this->objectName().toUtf8().data(), action); };
	void timerEvent(QTimerEvent * event) { callbackQActionGroupTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQActionGroupChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQActionGroupCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QActionGroup_AddAction(void* ptr, void* action){
	return static_cast<QActionGroup*>(ptr)->addAction(static_cast<QAction*>(action));
}

int QActionGroup_IsEnabled(void* ptr){
	return static_cast<QActionGroup*>(ptr)->isEnabled();
}

int QActionGroup_IsExclusive(void* ptr){
	return static_cast<QActionGroup*>(ptr)->isExclusive();
}

int QActionGroup_IsVisible(void* ptr){
	return static_cast<QActionGroup*>(ptr)->isVisible();
}

void QActionGroup_SetEnabled(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QActionGroup*>(ptr), "setEnabled", Q_ARG(bool, v != 0));
}

void QActionGroup_SetExclusive(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QActionGroup*>(ptr), "setExclusive", Q_ARG(bool, v != 0));
}

void QActionGroup_SetVisible(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QActionGroup*>(ptr), "setVisible", Q_ARG(bool, v != 0));
}

void* QActionGroup_NewQActionGroup(void* parent){
	return new QActionGroup(static_cast<QObject*>(parent));
}

void* QActionGroup_AddAction3(void* ptr, void* icon, char* text){
	return static_cast<QActionGroup*>(ptr)->addAction(*static_cast<QIcon*>(icon), QString(text));
}

void* QActionGroup_AddAction2(void* ptr, char* text){
	return static_cast<QActionGroup*>(ptr)->addAction(QString(text));
}

void* QActionGroup_CheckedAction(void* ptr){
	return static_cast<QActionGroup*>(ptr)->checkedAction();
}

void QActionGroup_ConnectHovered(void* ptr){
	QObject::connect(static_cast<QActionGroup*>(ptr), static_cast<void (QActionGroup::*)(QAction *)>(&QActionGroup::hovered), static_cast<MyQActionGroup*>(ptr), static_cast<void (MyQActionGroup::*)(QAction *)>(&MyQActionGroup::Signal_Hovered));;
}

void QActionGroup_DisconnectHovered(void* ptr){
	QObject::disconnect(static_cast<QActionGroup*>(ptr), static_cast<void (QActionGroup::*)(QAction *)>(&QActionGroup::hovered), static_cast<MyQActionGroup*>(ptr), static_cast<void (MyQActionGroup::*)(QAction *)>(&MyQActionGroup::Signal_Hovered));;
}

void QActionGroup_Hovered(void* ptr, void* action){
	static_cast<QActionGroup*>(ptr)->hovered(static_cast<QAction*>(action));
}

void QActionGroup_RemoveAction(void* ptr, void* action){
	static_cast<QActionGroup*>(ptr)->removeAction(static_cast<QAction*>(action));
}

void QActionGroup_SetDisabled(void* ptr, int b){
	QMetaObject::invokeMethod(static_cast<QActionGroup*>(ptr), "setDisabled", Q_ARG(bool, b != 0));
}

void QActionGroup_ConnectTriggered(void* ptr){
	QObject::connect(static_cast<QActionGroup*>(ptr), static_cast<void (QActionGroup::*)(QAction *)>(&QActionGroup::triggered), static_cast<MyQActionGroup*>(ptr), static_cast<void (MyQActionGroup::*)(QAction *)>(&MyQActionGroup::Signal_Triggered));;
}

void QActionGroup_DisconnectTriggered(void* ptr){
	QObject::disconnect(static_cast<QActionGroup*>(ptr), static_cast<void (QActionGroup::*)(QAction *)>(&QActionGroup::triggered), static_cast<MyQActionGroup*>(ptr), static_cast<void (MyQActionGroup::*)(QAction *)>(&MyQActionGroup::Signal_Triggered));;
}

void QActionGroup_Triggered(void* ptr, void* action){
	static_cast<QActionGroup*>(ptr)->triggered(static_cast<QAction*>(action));
}

void QActionGroup_DestroyQActionGroup(void* ptr){
	static_cast<QActionGroup*>(ptr)->~QActionGroup();
}

void QActionGroup_TimerEvent(void* ptr, void* event){
	static_cast<MyQActionGroup*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QActionGroup_TimerEventDefault(void* ptr, void* event){
	static_cast<QActionGroup*>(ptr)->QActionGroup::timerEvent(static_cast<QTimerEvent*>(event));
}

void QActionGroup_ChildEvent(void* ptr, void* event){
	static_cast<MyQActionGroup*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QActionGroup_ChildEventDefault(void* ptr, void* event){
	static_cast<QActionGroup*>(ptr)->QActionGroup::childEvent(static_cast<QChildEvent*>(event));
}

void QActionGroup_CustomEvent(void* ptr, void* event){
	static_cast<MyQActionGroup*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QActionGroup_CustomEventDefault(void* ptr, void* event){
	static_cast<QActionGroup*>(ptr)->QActionGroup::customEvent(static_cast<QEvent*>(event));
}

class MyQApplication: public QApplication {
public:
	MyQApplication(int &argc, char **argv) : QApplication(argc, argv) {};
	void Signal_FocusChanged(QWidget * old, QWidget * now) { callbackQApplicationFocusChanged(this, this->objectName().toUtf8().data(), old, now); };
	void timerEvent(QTimerEvent * event) { callbackQApplicationTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQApplicationChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQApplicationCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QApplication_QApplication_Alert(void* widget, int msec){
	QApplication::alert(static_cast<QWidget*>(widget), msec);
}

int QApplication_AutoMaximizeThreshold(void* ptr){
	return QMetaObject::invokeMethod(static_cast<QApplication*>(ptr), "autoMaximizeThreshold");
}

int QApplication_AutoSipEnabled(void* ptr){
	return QMetaObject::invokeMethod(static_cast<QApplication*>(ptr), "autoSipEnabled");
}

void QApplication_QApplication_Beep(){
	QApplication::beep();
}

int QApplication_QApplication_CursorFlashTime(){
	return QApplication::cursorFlashTime();
}

int QApplication_QApplication_DoubleClickInterval(){
	return QApplication::doubleClickInterval();
}

void* QApplication_QApplication_GlobalStrut(){
	return new QSize(static_cast<QSize>(QApplication::globalStrut()).width(), static_cast<QSize>(QApplication::globalStrut()).height());
}

int QApplication_QApplication_IsEffectEnabled(int effect){
	return QApplication::isEffectEnabled(static_cast<Qt::UIEffect>(effect));
}

int QApplication_QApplication_KeyboardInputInterval(){
	return QApplication::keyboardInputInterval();
}

void* QApplication_QApplication_Palette(void* widget){
	return new QPalette(QApplication::palette(static_cast<QWidget*>(widget)));
}

void QApplication_QApplication_SetActiveWindow(void* active){
	QApplication::setActiveWindow(static_cast<QWidget*>(active));
}

void QApplication_SetAutoMaximizeThreshold(void* ptr, int threshold){
	QMetaObject::invokeMethod(static_cast<QApplication*>(ptr), "setAutoMaximizeThreshold", Q_ARG(int, threshold));
}

void QApplication_SetAutoSipEnabled(void* ptr, int enabled){
	QMetaObject::invokeMethod(static_cast<QApplication*>(ptr), "setAutoSipEnabled", Q_ARG(bool, enabled != 0));
}

void QApplication_QApplication_SetCursorFlashTime(int v){
	QApplication::setCursorFlashTime(v);
}

void QApplication_QApplication_SetDoubleClickInterval(int v){
	QApplication::setDoubleClickInterval(v);
}

void QApplication_QApplication_SetEffectEnabled(int effect, int enable){
	QApplication::setEffectEnabled(static_cast<Qt::UIEffect>(effect), enable != 0);
}

void QApplication_QApplication_SetGlobalStrut(void* v){
	QApplication::setGlobalStrut(*static_cast<QSize*>(v));
}

void QApplication_QApplication_SetKeyboardInputInterval(int v){
	QApplication::setKeyboardInputInterval(v);
}

void QApplication_QApplication_SetStartDragDistance(int l){
	QApplication::setStartDragDistance(l);
}

void QApplication_QApplication_SetStartDragTime(int ms){
	QApplication::setStartDragTime(ms);
}

void QApplication_SetStyleSheet(void* ptr, char* sheet){
	QMetaObject::invokeMethod(static_cast<QApplication*>(ptr), "setStyleSheet", Q_ARG(QString, QString(sheet)));
}

void QApplication_QApplication_SetWheelScrollLines(int v){
	QApplication::setWheelScrollLines(v);
}

void QApplication_QApplication_SetWindowIcon(void* icon){
	QApplication::setWindowIcon(*static_cast<QIcon*>(icon));
}

int QApplication_QApplication_StartDragDistance(){
	return QApplication::startDragDistance();
}

int QApplication_QApplication_StartDragTime(){
	return QApplication::startDragTime();
}

char* QApplication_StyleSheet(void* ptr){
	return static_cast<QApplication*>(ptr)->styleSheet().toUtf8().data();
}

void* QApplication_QApplication_TopLevelAt(void* point){
	return QApplication::topLevelAt(*static_cast<QPoint*>(point));
}

int QApplication_QApplication_WheelScrollLines(){
	return QApplication::wheelScrollLines();
}

void* QApplication_QApplication_WidgetAt(void* point){
	return QApplication::widgetAt(*static_cast<QPoint*>(point));
}

void* QApplication_QApplication_WindowIcon(){
	return new QIcon(QApplication::windowIcon());
}

void* QApplication_NewQApplication(int argc, char* argv){
	QList<QByteArray> aList = QByteArray(argv).split('|');
	char *argvs[argc];
	static int argcs = argc;
	for (int i = 0; i < argc; i++)
		argvs[i] = aList[i].data();

	return new MyQApplication(argcs, argvs);
}

void QApplication_QApplication_AboutQt(){
	QMetaObject::invokeMethod(QApplication::instance(), "aboutQt");
}

void* QApplication_QApplication_ActiveModalWidget(){
	return QApplication::activeModalWidget();
}

void* QApplication_QApplication_ActivePopupWidget(){
	return QApplication::activePopupWidget();
}

void* QApplication_QApplication_ActiveWindow(){
	return QApplication::activeWindow();
}

void QApplication_QApplication_CloseAllWindows(){
	QMetaObject::invokeMethod(QApplication::instance(), "closeAllWindows");
}

int QApplication_QApplication_ColorSpec(){
	return QApplication::colorSpec();
}

void* QApplication_QApplication_Desktop(){
	return QApplication::desktop();
}

int QApplication_Event(void* ptr, void* e){
	return static_cast<QApplication*>(ptr)->event(static_cast<QEvent*>(e));
}

int QApplication_QApplication_Exec(){
	return QApplication::exec();
}

void QApplication_ConnectFocusChanged(void* ptr){
	QObject::connect(static_cast<QApplication*>(ptr), static_cast<void (QApplication::*)(QWidget *, QWidget *)>(&QApplication::focusChanged), static_cast<MyQApplication*>(ptr), static_cast<void (MyQApplication::*)(QWidget *, QWidget *)>(&MyQApplication::Signal_FocusChanged));;
}

void QApplication_DisconnectFocusChanged(void* ptr){
	QObject::disconnect(static_cast<QApplication*>(ptr), static_cast<void (QApplication::*)(QWidget *, QWidget *)>(&QApplication::focusChanged), static_cast<MyQApplication*>(ptr), static_cast<void (MyQApplication::*)(QWidget *, QWidget *)>(&MyQApplication::Signal_FocusChanged));;
}

void QApplication_FocusChanged(void* ptr, void* old, void* now){
	static_cast<QApplication*>(ptr)->focusChanged(static_cast<QWidget*>(old), static_cast<QWidget*>(now));
}

void* QApplication_QApplication_FocusWidget(){
	return QApplication::focusWidget();
}

void* QApplication_QApplication_Font(){
	return new QFont(QApplication::font());
}

void* QApplication_QApplication_Font2(void* widget){
	return new QFont(QApplication::font(static_cast<QWidget*>(widget)));
}

void* QApplication_QApplication_Font3(char* className){
	return new QFont(QApplication::font(const_cast<const char*>(className)));
}

void* QApplication_QApplication_FontMetrics(){
	return new QFontMetrics(QApplication::fontMetrics());
}

int QApplication_Notify(void* ptr, void* receiver, void* e){
	return static_cast<QApplication*>(ptr)->notify(static_cast<QObject*>(receiver), static_cast<QEvent*>(e));
}

void* QApplication_QApplication_Palette2(char* className){
	return new QPalette(QApplication::palette(const_cast<const char*>(className)));
}

void QApplication_QApplication_SetColorSpec(int spec){
	QApplication::setColorSpec(spec);
}

void QApplication_QApplication_SetFont(void* font, char* className){
	QApplication::setFont(*static_cast<QFont*>(font), const_cast<const char*>(className));
}

void QApplication_QApplication_SetPalette(void* palette, char* className){
	QApplication::setPalette(*static_cast<QPalette*>(palette), const_cast<const char*>(className));
}

void* QApplication_QApplication_SetStyle2(char* style){
	return QApplication::setStyle(QString(style));
}

void QApplication_QApplication_SetStyle(void* style){
	QApplication::setStyle(static_cast<QStyle*>(style));
}

void* QApplication_QApplication_Style(){
	return QApplication::style();
}

void* QApplication_QApplication_TopLevelAt2(int x, int y){
	return QApplication::topLevelAt(x, y);
}

void* QApplication_QApplication_WidgetAt2(int x, int y){
	return QApplication::widgetAt(x, y);
}

void QApplication_DestroyQApplication(void* ptr){
	static_cast<QApplication*>(ptr)->~QApplication();
}

void QApplication_TimerEvent(void* ptr, void* event){
	static_cast<MyQApplication*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QApplication_TimerEventDefault(void* ptr, void* event){
	static_cast<QApplication*>(ptr)->QApplication::timerEvent(static_cast<QTimerEvent*>(event));
}

void QApplication_ChildEvent(void* ptr, void* event){
	static_cast<MyQApplication*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QApplication_ChildEventDefault(void* ptr, void* event){
	static_cast<QApplication*>(ptr)->QApplication::childEvent(static_cast<QChildEvent*>(event));
}

void QApplication_CustomEvent(void* ptr, void* event){
	static_cast<MyQApplication*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QApplication_CustomEventDefault(void* ptr, void* event){
	static_cast<QApplication*>(ptr)->QApplication::customEvent(static_cast<QEvent*>(event));
}

class MyQBoxLayout: public QBoxLayout {
public:
	MyQBoxLayout(Direction dir, QWidget *parent) : QBoxLayout(dir, parent) {};
	void addItem(QLayoutItem * item) { callbackQBoxLayoutAddItem(this, this->objectName().toUtf8().data(), item); };
	void invalidate() { callbackQBoxLayoutInvalidate(this, this->objectName().toUtf8().data()); };
	void setGeometry(const QRect & r) { callbackQBoxLayoutSetGeometry(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(r).x(), static_cast<QRect>(r).y(), static_cast<QRect>(r).width(), static_cast<QRect>(r).height())); };
	void childEvent(QChildEvent * e) { callbackQBoxLayoutChildEvent(this, this->objectName().toUtf8().data(), e); };
	void timerEvent(QTimerEvent * event) { callbackQBoxLayoutTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQBoxLayoutCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QBoxLayout_Direction(void* ptr){
	return static_cast<QBoxLayout*>(ptr)->direction();
}

void* QBoxLayout_NewQBoxLayout(int dir, void* parent){
	return new MyQBoxLayout(static_cast<QBoxLayout::Direction>(dir), static_cast<QWidget*>(parent));
}

void QBoxLayout_AddItem(void* ptr, void* item){
	static_cast<MyQBoxLayout*>(ptr)->addItem(static_cast<QLayoutItem*>(item));
}

void QBoxLayout_AddItemDefault(void* ptr, void* item){
	static_cast<QBoxLayout*>(ptr)->QBoxLayout::addItem(static_cast<QLayoutItem*>(item));
}

void QBoxLayout_AddLayout(void* ptr, void* layout, int stretch){
	static_cast<QBoxLayout*>(ptr)->addLayout(static_cast<QLayout*>(layout), stretch);
}

void QBoxLayout_AddSpacerItem(void* ptr, void* spacerItem){
	static_cast<QBoxLayout*>(ptr)->addSpacerItem(static_cast<QSpacerItem*>(spacerItem));
}

void QBoxLayout_AddSpacing(void* ptr, int size){
	static_cast<QBoxLayout*>(ptr)->addSpacing(size);
}

void QBoxLayout_AddStretch(void* ptr, int stretch){
	static_cast<QBoxLayout*>(ptr)->addStretch(stretch);
}

void QBoxLayout_AddStrut(void* ptr, int size){
	static_cast<QBoxLayout*>(ptr)->addStrut(size);
}

void QBoxLayout_AddWidget(void* ptr, void* widget, int stretch, int alignment){
	static_cast<QBoxLayout*>(ptr)->addWidget(static_cast<QWidget*>(widget), stretch, static_cast<Qt::AlignmentFlag>(alignment));
}

int QBoxLayout_Count(void* ptr){
	return static_cast<QBoxLayout*>(ptr)->count();
}

int QBoxLayout_ExpandingDirections(void* ptr){
	return static_cast<QBoxLayout*>(ptr)->expandingDirections();
}

int QBoxLayout_HasHeightForWidth(void* ptr){
	return static_cast<QBoxLayout*>(ptr)->hasHeightForWidth();
}

int QBoxLayout_HeightForWidth(void* ptr, int w){
	return static_cast<QBoxLayout*>(ptr)->heightForWidth(w);
}

void QBoxLayout_InsertItem(void* ptr, int index, void* item){
	static_cast<QBoxLayout*>(ptr)->insertItem(index, static_cast<QLayoutItem*>(item));
}

void QBoxLayout_InsertLayout(void* ptr, int index, void* layout, int stretch){
	static_cast<QBoxLayout*>(ptr)->insertLayout(index, static_cast<QLayout*>(layout), stretch);
}

void QBoxLayout_InsertSpacerItem(void* ptr, int index, void* spacerItem){
	static_cast<QBoxLayout*>(ptr)->insertSpacerItem(index, static_cast<QSpacerItem*>(spacerItem));
}

void QBoxLayout_InsertSpacing(void* ptr, int index, int size){
	static_cast<QBoxLayout*>(ptr)->insertSpacing(index, size);
}

void QBoxLayout_InsertStretch(void* ptr, int index, int stretch){
	static_cast<QBoxLayout*>(ptr)->insertStretch(index, stretch);
}

void QBoxLayout_InsertWidget(void* ptr, int index, void* widget, int stretch, int alignment){
	static_cast<QBoxLayout*>(ptr)->insertWidget(index, static_cast<QWidget*>(widget), stretch, static_cast<Qt::AlignmentFlag>(alignment));
}

void QBoxLayout_Invalidate(void* ptr){
	static_cast<MyQBoxLayout*>(ptr)->invalidate();
}

void QBoxLayout_InvalidateDefault(void* ptr){
	static_cast<QBoxLayout*>(ptr)->QBoxLayout::invalidate();
}

void* QBoxLayout_ItemAt(void* ptr, int index){
	return static_cast<QBoxLayout*>(ptr)->itemAt(index);
}

void* QBoxLayout_MaximumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QBoxLayout*>(ptr)->maximumSize()).width(), static_cast<QSize>(static_cast<QBoxLayout*>(ptr)->maximumSize()).height());
}

int QBoxLayout_MinimumHeightForWidth(void* ptr, int w){
	return static_cast<QBoxLayout*>(ptr)->minimumHeightForWidth(w);
}

void* QBoxLayout_MinimumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QBoxLayout*>(ptr)->minimumSize()).width(), static_cast<QSize>(static_cast<QBoxLayout*>(ptr)->minimumSize()).height());
}

void QBoxLayout_SetDirection(void* ptr, int direction){
	static_cast<QBoxLayout*>(ptr)->setDirection(static_cast<QBoxLayout::Direction>(direction));
}

void QBoxLayout_SetGeometry(void* ptr, void* r){
	static_cast<MyQBoxLayout*>(ptr)->setGeometry(*static_cast<QRect*>(r));
}

void QBoxLayout_SetGeometryDefault(void* ptr, void* r){
	static_cast<QBoxLayout*>(ptr)->QBoxLayout::setGeometry(*static_cast<QRect*>(r));
}

void QBoxLayout_SetSpacing(void* ptr, int spacing){
	static_cast<QBoxLayout*>(ptr)->setSpacing(spacing);
}

void QBoxLayout_SetStretch(void* ptr, int index, int stretch){
	static_cast<QBoxLayout*>(ptr)->setStretch(index, stretch);
}

int QBoxLayout_SetStretchFactor2(void* ptr, void* layout, int stretch){
	return static_cast<QBoxLayout*>(ptr)->setStretchFactor(static_cast<QLayout*>(layout), stretch);
}

int QBoxLayout_SetStretchFactor(void* ptr, void* widget, int stretch){
	return static_cast<QBoxLayout*>(ptr)->setStretchFactor(static_cast<QWidget*>(widget), stretch);
}

void* QBoxLayout_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QBoxLayout*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QBoxLayout*>(ptr)->sizeHint()).height());
}

int QBoxLayout_Spacing(void* ptr){
	return static_cast<QBoxLayout*>(ptr)->spacing();
}

int QBoxLayout_Stretch(void* ptr, int index){
	return static_cast<QBoxLayout*>(ptr)->stretch(index);
}

void* QBoxLayout_TakeAt(void* ptr, int index){
	return static_cast<QBoxLayout*>(ptr)->takeAt(index);
}

void QBoxLayout_DestroyQBoxLayout(void* ptr){
	static_cast<QBoxLayout*>(ptr)->~QBoxLayout();
}

void QBoxLayout_ChildEvent(void* ptr, void* e){
	static_cast<MyQBoxLayout*>(ptr)->childEvent(static_cast<QChildEvent*>(e));
}

void QBoxLayout_ChildEventDefault(void* ptr, void* e){
	static_cast<QBoxLayout*>(ptr)->QBoxLayout::childEvent(static_cast<QChildEvent*>(e));
}

void QBoxLayout_TimerEvent(void* ptr, void* event){
	static_cast<MyQBoxLayout*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QBoxLayout_TimerEventDefault(void* ptr, void* event){
	static_cast<QBoxLayout*>(ptr)->QBoxLayout::timerEvent(static_cast<QTimerEvent*>(event));
}

void QBoxLayout_CustomEvent(void* ptr, void* event){
	static_cast<MyQBoxLayout*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QBoxLayout_CustomEventDefault(void* ptr, void* event){
	static_cast<QBoxLayout*>(ptr)->QBoxLayout::customEvent(static_cast<QEvent*>(event));
}

class MyQButtonGroup: public QButtonGroup {
public:
	void Signal_ButtonClicked(QAbstractButton * button) { callbackQButtonGroupButtonClicked(this, this->objectName().toUtf8().data(), button); };
	void Signal_ButtonClicked2(int id) { callbackQButtonGroupButtonClicked2(this, this->objectName().toUtf8().data(), id); };
	void Signal_ButtonPressed(QAbstractButton * button) { callbackQButtonGroupButtonPressed(this, this->objectName().toUtf8().data(), button); };
	void Signal_ButtonPressed2(int id) { callbackQButtonGroupButtonPressed2(this, this->objectName().toUtf8().data(), id); };
	void Signal_ButtonReleased(QAbstractButton * button) { callbackQButtonGroupButtonReleased(this, this->objectName().toUtf8().data(), button); };
	void Signal_ButtonReleased2(int id) { callbackQButtonGroupButtonReleased2(this, this->objectName().toUtf8().data(), id); };
	void Signal_ButtonToggled(QAbstractButton * button, bool checked) { callbackQButtonGroupButtonToggled(this, this->objectName().toUtf8().data(), button, checked); };
	void Signal_ButtonToggled2(int id, bool checked) { callbackQButtonGroupButtonToggled2(this, this->objectName().toUtf8().data(), id, checked); };
	void timerEvent(QTimerEvent * event) { callbackQButtonGroupTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQButtonGroupChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQButtonGroupCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QButtonGroup_NewQButtonGroup(void* parent){
	return new QButtonGroup(static_cast<QObject*>(parent));
}

void QButtonGroup_AddButton(void* ptr, void* button, int id){
	static_cast<QButtonGroup*>(ptr)->addButton(static_cast<QAbstractButton*>(button), id);
}

void* QButtonGroup_Button(void* ptr, int id){
	return static_cast<QButtonGroup*>(ptr)->button(id);
}

void* QButtonGroup_CheckedButton(void* ptr){
	return static_cast<QButtonGroup*>(ptr)->checkedButton();
}

int QButtonGroup_CheckedId(void* ptr){
	return static_cast<QButtonGroup*>(ptr)->checkedId();
}

int QButtonGroup_Exclusive(void* ptr){
	return static_cast<QButtonGroup*>(ptr)->exclusive();
}

int QButtonGroup_Id(void* ptr, void* button){
	return static_cast<QButtonGroup*>(ptr)->id(static_cast<QAbstractButton*>(button));
}

void QButtonGroup_RemoveButton(void* ptr, void* button){
	static_cast<QButtonGroup*>(ptr)->removeButton(static_cast<QAbstractButton*>(button));
}

void QButtonGroup_SetExclusive(void* ptr, int v){
	static_cast<QButtonGroup*>(ptr)->setExclusive(v != 0);
}

void QButtonGroup_SetId(void* ptr, void* button, int id){
	static_cast<QButtonGroup*>(ptr)->setId(static_cast<QAbstractButton*>(button), id);
}

void QButtonGroup_DestroyQButtonGroup(void* ptr){
	static_cast<QButtonGroup*>(ptr)->~QButtonGroup();
}

void QButtonGroup_ConnectButtonClicked(void* ptr){
	QObject::connect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(QAbstractButton *)>(&QButtonGroup::buttonClicked), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(QAbstractButton *)>(&MyQButtonGroup::Signal_ButtonClicked));;
}

void QButtonGroup_DisconnectButtonClicked(void* ptr){
	QObject::disconnect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(QAbstractButton *)>(&QButtonGroup::buttonClicked), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(QAbstractButton *)>(&MyQButtonGroup::Signal_ButtonClicked));;
}

void QButtonGroup_ButtonClicked(void* ptr, void* button){
	static_cast<QButtonGroup*>(ptr)->buttonClicked(static_cast<QAbstractButton*>(button));
}

void QButtonGroup_ConnectButtonClicked2(void* ptr){
	QObject::connect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonClicked), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(int)>(&MyQButtonGroup::Signal_ButtonClicked2));;
}

void QButtonGroup_DisconnectButtonClicked2(void* ptr){
	QObject::disconnect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonClicked), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(int)>(&MyQButtonGroup::Signal_ButtonClicked2));;
}

void QButtonGroup_ButtonClicked2(void* ptr, int id){
	static_cast<QButtonGroup*>(ptr)->buttonClicked(id);
}

void QButtonGroup_ConnectButtonPressed(void* ptr){
	QObject::connect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(QAbstractButton *)>(&QButtonGroup::buttonPressed), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(QAbstractButton *)>(&MyQButtonGroup::Signal_ButtonPressed));;
}

void QButtonGroup_DisconnectButtonPressed(void* ptr){
	QObject::disconnect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(QAbstractButton *)>(&QButtonGroup::buttonPressed), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(QAbstractButton *)>(&MyQButtonGroup::Signal_ButtonPressed));;
}

void QButtonGroup_ButtonPressed(void* ptr, void* button){
	static_cast<QButtonGroup*>(ptr)->buttonPressed(static_cast<QAbstractButton*>(button));
}

void QButtonGroup_ConnectButtonPressed2(void* ptr){
	QObject::connect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonPressed), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(int)>(&MyQButtonGroup::Signal_ButtonPressed2));;
}

void QButtonGroup_DisconnectButtonPressed2(void* ptr){
	QObject::disconnect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonPressed), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(int)>(&MyQButtonGroup::Signal_ButtonPressed2));;
}

void QButtonGroup_ButtonPressed2(void* ptr, int id){
	static_cast<QButtonGroup*>(ptr)->buttonPressed(id);
}

void QButtonGroup_ConnectButtonReleased(void* ptr){
	QObject::connect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(QAbstractButton *)>(&QButtonGroup::buttonReleased), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(QAbstractButton *)>(&MyQButtonGroup::Signal_ButtonReleased));;
}

void QButtonGroup_DisconnectButtonReleased(void* ptr){
	QObject::disconnect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(QAbstractButton *)>(&QButtonGroup::buttonReleased), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(QAbstractButton *)>(&MyQButtonGroup::Signal_ButtonReleased));;
}

void QButtonGroup_ButtonReleased(void* ptr, void* button){
	static_cast<QButtonGroup*>(ptr)->buttonReleased(static_cast<QAbstractButton*>(button));
}

void QButtonGroup_ConnectButtonReleased2(void* ptr){
	QObject::connect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonReleased), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(int)>(&MyQButtonGroup::Signal_ButtonReleased2));;
}

void QButtonGroup_DisconnectButtonReleased2(void* ptr){
	QObject::disconnect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonReleased), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(int)>(&MyQButtonGroup::Signal_ButtonReleased2));;
}

void QButtonGroup_ButtonReleased2(void* ptr, int id){
	static_cast<QButtonGroup*>(ptr)->buttonReleased(id);
}

void QButtonGroup_ConnectButtonToggled(void* ptr){
	QObject::connect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(QAbstractButton *, bool)>(&QButtonGroup::buttonToggled), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(QAbstractButton *, bool)>(&MyQButtonGroup::Signal_ButtonToggled));;
}

void QButtonGroup_DisconnectButtonToggled(void* ptr){
	QObject::disconnect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(QAbstractButton *, bool)>(&QButtonGroup::buttonToggled), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(QAbstractButton *, bool)>(&MyQButtonGroup::Signal_ButtonToggled));;
}

void QButtonGroup_ButtonToggled(void* ptr, void* button, int checked){
	static_cast<QButtonGroup*>(ptr)->buttonToggled(static_cast<QAbstractButton*>(button), checked != 0);
}

void QButtonGroup_ConnectButtonToggled2(void* ptr){
	QObject::connect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(int, bool)>(&QButtonGroup::buttonToggled), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(int, bool)>(&MyQButtonGroup::Signal_ButtonToggled2));;
}

void QButtonGroup_DisconnectButtonToggled2(void* ptr){
	QObject::disconnect(static_cast<QButtonGroup*>(ptr), static_cast<void (QButtonGroup::*)(int, bool)>(&QButtonGroup::buttonToggled), static_cast<MyQButtonGroup*>(ptr), static_cast<void (MyQButtonGroup::*)(int, bool)>(&MyQButtonGroup::Signal_ButtonToggled2));;
}

void QButtonGroup_ButtonToggled2(void* ptr, int id, int checked){
	static_cast<QButtonGroup*>(ptr)->buttonToggled(id, checked != 0);
}

void QButtonGroup_TimerEvent(void* ptr, void* event){
	static_cast<MyQButtonGroup*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QButtonGroup_TimerEventDefault(void* ptr, void* event){
	static_cast<QButtonGroup*>(ptr)->QButtonGroup::timerEvent(static_cast<QTimerEvent*>(event));
}

void QButtonGroup_ChildEvent(void* ptr, void* event){
	static_cast<MyQButtonGroup*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QButtonGroup_ChildEventDefault(void* ptr, void* event){
	static_cast<QButtonGroup*>(ptr)->QButtonGroup::childEvent(static_cast<QChildEvent*>(event));
}

void QButtonGroup_CustomEvent(void* ptr, void* event){
	static_cast<MyQButtonGroup*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QButtonGroup_CustomEventDefault(void* ptr, void* event){
	static_cast<QButtonGroup*>(ptr)->QButtonGroup::customEvent(static_cast<QEvent*>(event));
}

class MyQCalendarWidget: public QCalendarWidget {
public:
	MyQCalendarWidget(QWidget *parent) : QCalendarWidget(parent) {};
	void Signal_CurrentPageChanged(int year, int month) { callbackQCalendarWidgetCurrentPageChanged(this, this->objectName().toUtf8().data(), year, month); };
	void keyPressEvent(QKeyEvent * event) { callbackQCalendarWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQCalendarWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQCalendarWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_SelectionChanged() { callbackQCalendarWidgetSelectionChanged(this, this->objectName().toUtf8().data()); };
	void actionEvent(QActionEvent * event) { callbackQCalendarWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQCalendarWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQCalendarWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQCalendarWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQCalendarWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQCalendarWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQCalendarWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQCalendarWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQCalendarWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQCalendarWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQCalendarWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQCalendarWidgetPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQCalendarWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QCalendarWidget::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQCalendarWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQCalendarWidgetChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQCalendarWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQCalendarWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQCalendarWidgetInitPainter(const_cast<MyQCalendarWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQCalendarWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQCalendarWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQCalendarWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQCalendarWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQCalendarWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQCalendarWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQCalendarWidgetWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQCalendarWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQCalendarWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQCalendarWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QCalendarWidget_DateEditAcceptDelay(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->dateEditAcceptDelay();
}

int QCalendarWidget_FirstDayOfWeek(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->firstDayOfWeek();
}

int QCalendarWidget_HorizontalHeaderFormat(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->horizontalHeaderFormat();
}

int QCalendarWidget_IsDateEditEnabled(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->isDateEditEnabled();
}

int QCalendarWidget_IsGridVisible(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->isGridVisible();
}

int QCalendarWidget_IsNavigationBarVisible(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->isNavigationBarVisible();
}

int QCalendarWidget_SelectionMode(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->selectionMode();
}

void QCalendarWidget_SetDateEditAcceptDelay(void* ptr, int delay){
	static_cast<QCalendarWidget*>(ptr)->setDateEditAcceptDelay(delay);
}

void QCalendarWidget_SetDateEditEnabled(void* ptr, int enable){
	static_cast<QCalendarWidget*>(ptr)->setDateEditEnabled(enable != 0);
}

void QCalendarWidget_SetFirstDayOfWeek(void* ptr, int dayOfWeek){
	static_cast<QCalendarWidget*>(ptr)->setFirstDayOfWeek(static_cast<Qt::DayOfWeek>(dayOfWeek));
}

void QCalendarWidget_SetGridVisible(void* ptr, int show){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "setGridVisible", Q_ARG(bool, show != 0));
}

void QCalendarWidget_SetHorizontalHeaderFormat(void* ptr, int format){
	static_cast<QCalendarWidget*>(ptr)->setHorizontalHeaderFormat(static_cast<QCalendarWidget::HorizontalHeaderFormat>(format));
}

void QCalendarWidget_SetMaximumDate(void* ptr, void* date){
	static_cast<QCalendarWidget*>(ptr)->setMaximumDate(*static_cast<QDate*>(date));
}

void QCalendarWidget_SetMinimumDate(void* ptr, void* date){
	static_cast<QCalendarWidget*>(ptr)->setMinimumDate(*static_cast<QDate*>(date));
}

void QCalendarWidget_SetNavigationBarVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "setNavigationBarVisible", Q_ARG(bool, visible != 0));
}

void QCalendarWidget_SetSelectedDate(void* ptr, void* date){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "setSelectedDate", Q_ARG(QDate, *static_cast<QDate*>(date)));
}

void QCalendarWidget_SetSelectionMode(void* ptr, int mode){
	static_cast<QCalendarWidget*>(ptr)->setSelectionMode(static_cast<QCalendarWidget::SelectionMode>(mode));
}

void QCalendarWidget_SetVerticalHeaderFormat(void* ptr, int format){
	static_cast<QCalendarWidget*>(ptr)->setVerticalHeaderFormat(static_cast<QCalendarWidget::VerticalHeaderFormat>(format));
}

int QCalendarWidget_VerticalHeaderFormat(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->verticalHeaderFormat();
}

void* QCalendarWidget_NewQCalendarWidget(void* parent){
	return new MyQCalendarWidget(static_cast<QWidget*>(parent));
}

void QCalendarWidget_ConnectCurrentPageChanged(void* ptr){
	QObject::connect(static_cast<QCalendarWidget*>(ptr), static_cast<void (QCalendarWidget::*)(int, int)>(&QCalendarWidget::currentPageChanged), static_cast<MyQCalendarWidget*>(ptr), static_cast<void (MyQCalendarWidget::*)(int, int)>(&MyQCalendarWidget::Signal_CurrentPageChanged));;
}

void QCalendarWidget_DisconnectCurrentPageChanged(void* ptr){
	QObject::disconnect(static_cast<QCalendarWidget*>(ptr), static_cast<void (QCalendarWidget::*)(int, int)>(&QCalendarWidget::currentPageChanged), static_cast<MyQCalendarWidget*>(ptr), static_cast<void (MyQCalendarWidget::*)(int, int)>(&MyQCalendarWidget::Signal_CurrentPageChanged));;
}

void QCalendarWidget_CurrentPageChanged(void* ptr, int year, int month){
	static_cast<QCalendarWidget*>(ptr)->currentPageChanged(year, month);
}

int QCalendarWidget_Event(void* ptr, void* event){
	return static_cast<QCalendarWidget*>(ptr)->event(static_cast<QEvent*>(event));
}

int QCalendarWidget_EventFilter(void* ptr, void* watched, void* event){
	return static_cast<QCalendarWidget*>(ptr)->eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
}

void QCalendarWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QCalendarWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void* QCalendarWidget_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QCalendarWidget*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QCalendarWidget*>(ptr)->minimumSizeHint()).height());
}

int QCalendarWidget_MonthShown(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->monthShown();
}

void QCalendarWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QCalendarWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QCalendarWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QCalendarWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QCalendarWidget_ConnectSelectionChanged(void* ptr){
	QObject::connect(static_cast<QCalendarWidget*>(ptr), static_cast<void (QCalendarWidget::*)()>(&QCalendarWidget::selectionChanged), static_cast<MyQCalendarWidget*>(ptr), static_cast<void (MyQCalendarWidget::*)()>(&MyQCalendarWidget::Signal_SelectionChanged));;
}

void QCalendarWidget_DisconnectSelectionChanged(void* ptr){
	QObject::disconnect(static_cast<QCalendarWidget*>(ptr), static_cast<void (QCalendarWidget::*)()>(&QCalendarWidget::selectionChanged), static_cast<MyQCalendarWidget*>(ptr), static_cast<void (MyQCalendarWidget::*)()>(&MyQCalendarWidget::Signal_SelectionChanged));;
}

void QCalendarWidget_SelectionChanged(void* ptr){
	static_cast<QCalendarWidget*>(ptr)->selectionChanged();
}

void QCalendarWidget_SetCurrentPage(void* ptr, int year, int month){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "setCurrentPage", Q_ARG(int, year), Q_ARG(int, month));
}

void QCalendarWidget_SetDateRange(void* ptr, void* min, void* max){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "setDateRange", Q_ARG(QDate, *static_cast<QDate*>(min)), Q_ARG(QDate, *static_cast<QDate*>(max)));
}

void QCalendarWidget_SetDateTextFormat(void* ptr, void* date, void* format){
	static_cast<QCalendarWidget*>(ptr)->setDateTextFormat(*static_cast<QDate*>(date), *static_cast<QTextCharFormat*>(format));
}

void QCalendarWidget_SetHeaderTextFormat(void* ptr, void* format){
	static_cast<QCalendarWidget*>(ptr)->setHeaderTextFormat(*static_cast<QTextCharFormat*>(format));
}

void QCalendarWidget_SetWeekdayTextFormat(void* ptr, int dayOfWeek, void* format){
	static_cast<QCalendarWidget*>(ptr)->setWeekdayTextFormat(static_cast<Qt::DayOfWeek>(dayOfWeek), *static_cast<QTextCharFormat*>(format));
}

void QCalendarWidget_ShowNextMonth(void* ptr){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "showNextMonth");
}

void QCalendarWidget_ShowNextYear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "showNextYear");
}

void QCalendarWidget_ShowPreviousMonth(void* ptr){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "showPreviousMonth");
}

void QCalendarWidget_ShowPreviousYear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "showPreviousYear");
}

void QCalendarWidget_ShowSelectedDate(void* ptr){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "showSelectedDate");
}

void QCalendarWidget_ShowToday(void* ptr){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "showToday");
}

void* QCalendarWidget_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QCalendarWidget*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QCalendarWidget*>(ptr)->sizeHint()).height());
}

int QCalendarWidget_YearShown(void* ptr){
	return static_cast<QCalendarWidget*>(ptr)->yearShown();
}

void QCalendarWidget_DestroyQCalendarWidget(void* ptr){
	static_cast<QCalendarWidget*>(ptr)->~QCalendarWidget();
}

void QCalendarWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QCalendarWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QCalendarWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QCalendarWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QCalendarWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QCalendarWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QCalendarWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QCalendarWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QCalendarWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QCalendarWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::dropEvent(static_cast<QDropEvent*>(event));
}

void QCalendarWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QCalendarWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::enterEvent(static_cast<QEvent*>(event));
}

void QCalendarWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QCalendarWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QCalendarWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QCalendarWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QCalendarWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QCalendarWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QCalendarWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QCalendarWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::leaveEvent(static_cast<QEvent*>(event));
}

void QCalendarWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QCalendarWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void QCalendarWidget_PaintEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QCalendarWidget_PaintEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::paintEvent(static_cast<QPaintEvent*>(event));
}

void QCalendarWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQCalendarWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QCalendarWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QCalendarWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QCalendarWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QCalendarWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::showEvent(static_cast<QShowEvent*>(event));
}

void QCalendarWidget_ChangeEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QCalendarWidget_ChangeEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::changeEvent(static_cast<QEvent*>(event));
}

void QCalendarWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QCalendarWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QCalendarWidget_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QCalendarWidget_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QCalendarWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQCalendarWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QCalendarWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::initPainter(static_cast<QPainter*>(painter));
}

void QCalendarWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QCalendarWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QCalendarWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QCalendarWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QCalendarWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QCalendarWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QCalendarWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QCalendarWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QCalendarWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QCalendarWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QCalendarWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QCalendarWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QCalendarWidget_WheelEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QCalendarWidget_WheelEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QCalendarWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QCalendarWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QCalendarWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QCalendarWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QCalendarWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQCalendarWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QCalendarWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QCalendarWidget*>(ptr)->QCalendarWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQCheckBox: public QCheckBox {
public:
	MyQCheckBox(QWidget *parent) : QCheckBox(parent) {};
	MyQCheckBox(const QString &text, QWidget *parent) : QCheckBox(text, parent) {};
	void checkStateSet() { callbackQCheckBoxCheckStateSet(this, this->objectName().toUtf8().data()); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQCheckBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void nextCheckState() { callbackQCheckBoxNextCheckState(this, this->objectName().toUtf8().data()); };
	void paintEvent(QPaintEvent * v) { callbackQCheckBoxPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_StateChanged(int state) { callbackQCheckBoxStateChanged(this, this->objectName().toUtf8().data(), state); };
	void changeEvent(QEvent * e) { callbackQCheckBoxChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void focusInEvent(QFocusEvent * e) { callbackQCheckBoxFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQCheckBoxFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQCheckBoxKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQCheckBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQCheckBoxMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQCheckBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void timerEvent(QTimerEvent * e) { callbackQCheckBoxTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQCheckBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQCheckBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQCheckBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQCheckBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQCheckBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQCheckBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQCheckBoxHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQCheckBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQCheckBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQCheckBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QCheckBox::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQCheckBoxShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQCheckBoxCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQCheckBoxContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQCheckBoxInitPainter(const_cast<MyQCheckBox*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQCheckBoxInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQCheckBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQCheckBoxResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQCheckBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQCheckBoxWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQCheckBoxChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQCheckBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QCheckBox_IsTristate(void* ptr){
	return static_cast<QCheckBox*>(ptr)->isTristate();
}

void QCheckBox_SetTristate(void* ptr, int y){
	static_cast<QCheckBox*>(ptr)->setTristate(y != 0);
}

void* QCheckBox_NewQCheckBox(void* parent){
	return new MyQCheckBox(static_cast<QWidget*>(parent));
}

void* QCheckBox_NewQCheckBox2(char* text, void* parent){
	return new MyQCheckBox(QString(text), static_cast<QWidget*>(parent));
}

int QCheckBox_CheckState(void* ptr){
	return static_cast<QCheckBox*>(ptr)->checkState();
}

void QCheckBox_CheckStateSet(void* ptr){
	static_cast<MyQCheckBox*>(ptr)->checkStateSet();
}

void QCheckBox_CheckStateSetDefault(void* ptr){
	static_cast<QCheckBox*>(ptr)->QCheckBox::checkStateSet();
}

int QCheckBox_Event(void* ptr, void* e){
	return static_cast<QCheckBox*>(ptr)->event(static_cast<QEvent*>(e));
}

int QCheckBox_HitButton(void* ptr, void* pos){
	return static_cast<QCheckBox*>(ptr)->hitButton(*static_cast<QPoint*>(pos));
}

void* QCheckBox_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QCheckBox*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QCheckBox*>(ptr)->minimumSizeHint()).height());
}

void QCheckBox_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQCheckBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QCheckBox_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QCheckBox*>(ptr)->QCheckBox::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QCheckBox_NextCheckState(void* ptr){
	static_cast<MyQCheckBox*>(ptr)->nextCheckState();
}

void QCheckBox_NextCheckStateDefault(void* ptr){
	static_cast<QCheckBox*>(ptr)->QCheckBox::nextCheckState();
}

void QCheckBox_PaintEvent(void* ptr, void* v){
	static_cast<MyQCheckBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QCheckBox_PaintEventDefault(void* ptr, void* v){
	static_cast<QCheckBox*>(ptr)->QCheckBox::paintEvent(static_cast<QPaintEvent*>(v));
}

void QCheckBox_SetCheckState(void* ptr, int state){
	static_cast<QCheckBox*>(ptr)->setCheckState(static_cast<Qt::CheckState>(state));
}

void* QCheckBox_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QCheckBox*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QCheckBox*>(ptr)->sizeHint()).height());
}

void QCheckBox_ConnectStateChanged(void* ptr){
	QObject::connect(static_cast<QCheckBox*>(ptr), static_cast<void (QCheckBox::*)(int)>(&QCheckBox::stateChanged), static_cast<MyQCheckBox*>(ptr), static_cast<void (MyQCheckBox::*)(int)>(&MyQCheckBox::Signal_StateChanged));;
}

void QCheckBox_DisconnectStateChanged(void* ptr){
	QObject::disconnect(static_cast<QCheckBox*>(ptr), static_cast<void (QCheckBox::*)(int)>(&QCheckBox::stateChanged), static_cast<MyQCheckBox*>(ptr), static_cast<void (MyQCheckBox::*)(int)>(&MyQCheckBox::Signal_StateChanged));;
}

void QCheckBox_StateChanged(void* ptr, int state){
	static_cast<QCheckBox*>(ptr)->stateChanged(state);
}

void QCheckBox_DestroyQCheckBox(void* ptr){
	static_cast<QCheckBox*>(ptr)->~QCheckBox();
}

void QCheckBox_ChangeEvent(void* ptr, void* e){
	static_cast<MyQCheckBox*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QCheckBox_ChangeEventDefault(void* ptr, void* e){
	static_cast<QCheckBox*>(ptr)->QCheckBox::changeEvent(static_cast<QEvent*>(e));
}

void QCheckBox_FocusInEvent(void* ptr, void* e){
	static_cast<MyQCheckBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QCheckBox_FocusInEventDefault(void* ptr, void* e){
	static_cast<QCheckBox*>(ptr)->QCheckBox::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QCheckBox_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQCheckBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QCheckBox_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QCheckBox*>(ptr)->QCheckBox::focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QCheckBox_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQCheckBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QCheckBox_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QCheckBox*>(ptr)->QCheckBox::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QCheckBox_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQCheckBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QCheckBox_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QCheckBox*>(ptr)->QCheckBox::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QCheckBox_MousePressEvent(void* ptr, void* e){
	static_cast<MyQCheckBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QCheckBox_MousePressEventDefault(void* ptr, void* e){
	static_cast<QCheckBox*>(ptr)->QCheckBox::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QCheckBox_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQCheckBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QCheckBox_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QCheckBox*>(ptr)->QCheckBox::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QCheckBox_TimerEvent(void* ptr, void* e){
	static_cast<MyQCheckBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QCheckBox_TimerEventDefault(void* ptr, void* e){
	static_cast<QCheckBox*>(ptr)->QCheckBox::timerEvent(static_cast<QTimerEvent*>(e));
}

void QCheckBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QCheckBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QCheckBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QCheckBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QCheckBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QCheckBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QCheckBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QCheckBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QCheckBox_DropEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QCheckBox_DropEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QCheckBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QCheckBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::enterEvent(static_cast<QEvent*>(event));
}

void QCheckBox_HideEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QCheckBox_HideEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::hideEvent(static_cast<QHideEvent*>(event));
}

void QCheckBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QCheckBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::leaveEvent(static_cast<QEvent*>(event));
}

void QCheckBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QCheckBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QCheckBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQCheckBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QCheckBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QCheckBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QCheckBox_ShowEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QCheckBox_ShowEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::showEvent(static_cast<QShowEvent*>(event));
}

void QCheckBox_CloseEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QCheckBox_CloseEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::closeEvent(static_cast<QCloseEvent*>(event));
}

void QCheckBox_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QCheckBox_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QCheckBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQCheckBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QCheckBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QCheckBox*>(ptr)->QCheckBox::initPainter(static_cast<QPainter*>(painter));
}

void QCheckBox_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QCheckBox_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QCheckBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QCheckBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QCheckBox_ResizeEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QCheckBox_ResizeEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QCheckBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QCheckBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QCheckBox_WheelEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QCheckBox_WheelEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QCheckBox_ChildEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QCheckBox_ChildEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::childEvent(static_cast<QChildEvent*>(event));
}

void QCheckBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQCheckBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QCheckBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QCheckBox*>(ptr)->QCheckBox::customEvent(static_cast<QEvent*>(event));
}

class MyQColorDialog: public QColorDialog {
public:
	MyQColorDialog(QWidget *parent) : QColorDialog(parent) {};
	MyQColorDialog(const QColor &initial, QWidget *parent) : QColorDialog(initial, parent) {};
	void changeEvent(QEvent * e) { callbackQColorDialogChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_ColorSelected(const QColor & color) { callbackQColorDialogColorSelected(this, this->objectName().toUtf8().data(), new QColor(color)); };
	void Signal_CurrentColorChanged(const QColor & color) { callbackQColorDialogCurrentColorChanged(this, this->objectName().toUtf8().data(), new QColor(color)); };
	void done(int result) { if (!callbackQColorDialogDone(this, this->objectName().toUtf8().data(), result)) { QColorDialog::done(result); }; };
	void setVisible(bool visible) { if (!callbackQColorDialogSetVisible(this, this->objectName().toUtf8().data(), visible)) { QColorDialog::setVisible(visible); }; };
	void accept() { if (!callbackQColorDialogAccept(this, this->objectName().toUtf8().data())) { QColorDialog::accept(); }; };
	void closeEvent(QCloseEvent * e) { callbackQColorDialogCloseEvent(this, this->objectName().toUtf8().data(), e); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQColorDialogContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQColorDialogKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void reject() { if (!callbackQColorDialogReject(this, this->objectName().toUtf8().data())) { QColorDialog::reject(); }; };
	void resizeEvent(QResizeEvent * v) { callbackQColorDialogResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void showEvent(QShowEvent * event) { callbackQColorDialogShowEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQColorDialogActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQColorDialogDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQColorDialogDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQColorDialogDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQColorDialogDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQColorDialogEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQColorDialogFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQColorDialogFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQColorDialogHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQColorDialogLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQColorDialogMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQColorDialogPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQColorDialogInitPainter(const_cast<MyQColorDialog*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQColorDialogInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQColorDialogKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQColorDialogMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQColorDialogMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQColorDialogMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQColorDialogMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQColorDialogTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQColorDialogWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQColorDialogTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQColorDialogChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQColorDialogCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QColorDialog_CurrentColor(void* ptr){
	return new QColor(static_cast<QColorDialog*>(ptr)->currentColor());
}

int QColorDialog_Options(void* ptr){
	return static_cast<QColorDialog*>(ptr)->options();
}

void QColorDialog_SetCurrentColor(void* ptr, void* color){
	static_cast<QColorDialog*>(ptr)->setCurrentColor(*static_cast<QColor*>(color));
}

void QColorDialog_SetOptions(void* ptr, int options){
	static_cast<QColorDialog*>(ptr)->setOptions(static_cast<QColorDialog::ColorDialogOption>(options));
}

void* QColorDialog_NewQColorDialog(void* parent){
	return new MyQColorDialog(static_cast<QWidget*>(parent));
}

void* QColorDialog_NewQColorDialog2(void* initial, void* parent){
	return new MyQColorDialog(*static_cast<QColor*>(initial), static_cast<QWidget*>(parent));
}

void QColorDialog_ChangeEvent(void* ptr, void* e){
	static_cast<MyQColorDialog*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QColorDialog_ChangeEventDefault(void* ptr, void* e){
	static_cast<QColorDialog*>(ptr)->QColorDialog::changeEvent(static_cast<QEvent*>(e));
}

void QColorDialog_ConnectColorSelected(void* ptr){
	QObject::connect(static_cast<QColorDialog*>(ptr), static_cast<void (QColorDialog::*)(const QColor &)>(&QColorDialog::colorSelected), static_cast<MyQColorDialog*>(ptr), static_cast<void (MyQColorDialog::*)(const QColor &)>(&MyQColorDialog::Signal_ColorSelected));;
}

void QColorDialog_DisconnectColorSelected(void* ptr){
	QObject::disconnect(static_cast<QColorDialog*>(ptr), static_cast<void (QColorDialog::*)(const QColor &)>(&QColorDialog::colorSelected), static_cast<MyQColorDialog*>(ptr), static_cast<void (MyQColorDialog::*)(const QColor &)>(&MyQColorDialog::Signal_ColorSelected));;
}

void QColorDialog_ColorSelected(void* ptr, void* color){
	static_cast<QColorDialog*>(ptr)->colorSelected(*static_cast<QColor*>(color));
}

void QColorDialog_ConnectCurrentColorChanged(void* ptr){
	QObject::connect(static_cast<QColorDialog*>(ptr), static_cast<void (QColorDialog::*)(const QColor &)>(&QColorDialog::currentColorChanged), static_cast<MyQColorDialog*>(ptr), static_cast<void (MyQColorDialog::*)(const QColor &)>(&MyQColorDialog::Signal_CurrentColorChanged));;
}

void QColorDialog_DisconnectCurrentColorChanged(void* ptr){
	QObject::disconnect(static_cast<QColorDialog*>(ptr), static_cast<void (QColorDialog::*)(const QColor &)>(&QColorDialog::currentColorChanged), static_cast<MyQColorDialog*>(ptr), static_cast<void (MyQColorDialog::*)(const QColor &)>(&MyQColorDialog::Signal_CurrentColorChanged));;
}

void QColorDialog_CurrentColorChanged(void* ptr, void* color){
	static_cast<QColorDialog*>(ptr)->currentColorChanged(*static_cast<QColor*>(color));
}

void* QColorDialog_QColorDialog_CustomColor(int index){
	return new QColor(QColorDialog::customColor(index));
}

int QColorDialog_QColorDialog_CustomCount(){
	return QColorDialog::customCount();
}

void QColorDialog_Done(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<MyQColorDialog*>(ptr), "done", Q_ARG(int, result));
}

void QColorDialog_DoneDefault(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<QColorDialog*>(ptr), "done", Q_ARG(int, result));
}

void* QColorDialog_QColorDialog_GetColor(void* initial, void* parent, char* title, int options){
	return new QColor(QColorDialog::getColor(*static_cast<QColor*>(initial), static_cast<QWidget*>(parent), QString(title), static_cast<QColorDialog::ColorDialogOption>(options)));
}

void QColorDialog_Open(void* ptr, void* receiver, char* member){
	static_cast<QColorDialog*>(ptr)->open(static_cast<QObject*>(receiver), const_cast<const char*>(member));
}

void* QColorDialog_SelectedColor(void* ptr){
	return new QColor(static_cast<QColorDialog*>(ptr)->selectedColor());
}

void QColorDialog_QColorDialog_SetCustomColor(int index, void* color){
	QColorDialog::setCustomColor(index, *static_cast<QColor*>(color));
}

void QColorDialog_SetOption(void* ptr, int option, int on){
	static_cast<QColorDialog*>(ptr)->setOption(static_cast<QColorDialog::ColorDialogOption>(option), on != 0);
}

void QColorDialog_QColorDialog_SetStandardColor(int index, void* color){
	QColorDialog::setStandardColor(index, *static_cast<QColor*>(color));
}

void QColorDialog_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQColorDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QColorDialog_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QColorDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void* QColorDialog_QColorDialog_StandardColor(int index){
	return new QColor(QColorDialog::standardColor(index));
}

int QColorDialog_TestOption(void* ptr, int option){
	return static_cast<QColorDialog*>(ptr)->testOption(static_cast<QColorDialog::ColorDialogOption>(option));
}

void QColorDialog_DestroyQColorDialog(void* ptr){
	static_cast<QColorDialog*>(ptr)->~QColorDialog();
}

void QColorDialog_Accept(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQColorDialog*>(ptr), "accept");
}

void QColorDialog_AcceptDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QColorDialog*>(ptr), "accept");
}

void QColorDialog_CloseEvent(void* ptr, void* e){
	static_cast<MyQColorDialog*>(ptr)->closeEvent(static_cast<QCloseEvent*>(e));
}

void QColorDialog_CloseEventDefault(void* ptr, void* e){
	static_cast<QColorDialog*>(ptr)->QColorDialog::closeEvent(static_cast<QCloseEvent*>(e));
}

void QColorDialog_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQColorDialog*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QColorDialog_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QColorDialog*>(ptr)->QColorDialog::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QColorDialog_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQColorDialog*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QColorDialog_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QColorDialog*>(ptr)->QColorDialog::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QColorDialog_Reject(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQColorDialog*>(ptr), "reject");
}

void QColorDialog_RejectDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QColorDialog*>(ptr), "reject");
}

void QColorDialog_ResizeEvent(void* ptr, void* v){
	static_cast<MyQColorDialog*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QColorDialog_ResizeEventDefault(void* ptr, void* v){
	static_cast<QColorDialog*>(ptr)->QColorDialog::resizeEvent(static_cast<QResizeEvent*>(v));
}

void QColorDialog_ShowEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QColorDialog_ShowEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::showEvent(static_cast<QShowEvent*>(event));
}

void QColorDialog_ActionEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QColorDialog_ActionEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::actionEvent(static_cast<QActionEvent*>(event));
}

void QColorDialog_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QColorDialog_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QColorDialog_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QColorDialog_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QColorDialog_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QColorDialog_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QColorDialog_DropEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QColorDialog_DropEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::dropEvent(static_cast<QDropEvent*>(event));
}

void QColorDialog_EnterEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QColorDialog_EnterEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::enterEvent(static_cast<QEvent*>(event));
}

void QColorDialog_FocusInEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QColorDialog_FocusInEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QColorDialog_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QColorDialog_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QColorDialog_HideEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QColorDialog_HideEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::hideEvent(static_cast<QHideEvent*>(event));
}

void QColorDialog_LeaveEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QColorDialog_LeaveEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::leaveEvent(static_cast<QEvent*>(event));
}

void QColorDialog_MoveEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QColorDialog_MoveEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::moveEvent(static_cast<QMoveEvent*>(event));
}

void QColorDialog_PaintEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QColorDialog_PaintEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::paintEvent(static_cast<QPaintEvent*>(event));
}

void QColorDialog_InitPainter(void* ptr, void* painter){
	static_cast<MyQColorDialog*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QColorDialog_InitPainterDefault(void* ptr, void* painter){
	static_cast<QColorDialog*>(ptr)->QColorDialog::initPainter(static_cast<QPainter*>(painter));
}

void QColorDialog_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QColorDialog_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QColorDialog_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QColorDialog_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QColorDialog_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QColorDialog_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QColorDialog_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QColorDialog_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QColorDialog_MousePressEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QColorDialog_MousePressEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QColorDialog_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QColorDialog_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QColorDialog_TabletEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QColorDialog_TabletEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QColorDialog_WheelEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QColorDialog_WheelEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QColorDialog_TimerEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QColorDialog_TimerEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::timerEvent(static_cast<QTimerEvent*>(event));
}

void QColorDialog_ChildEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QColorDialog_ChildEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::childEvent(static_cast<QChildEvent*>(event));
}

void QColorDialog_CustomEvent(void* ptr, void* event){
	static_cast<MyQColorDialog*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QColorDialog_CustomEventDefault(void* ptr, void* event){
	static_cast<QColorDialog*>(ptr)->QColorDialog::customEvent(static_cast<QEvent*>(event));
}

void* QColormap_NewQColormap(void* colormap){
	return new QColormap(*static_cast<QColormap*>(colormap));
}

int QColormap_Depth(void* ptr){
	return static_cast<QColormap*>(ptr)->depth();
}

void* QColormap_QColormap_Instance(int screen){
	return new QColormap(QColormap::instance(screen));
}

int QColormap_Mode(void* ptr){
	return static_cast<QColormap*>(ptr)->mode();
}

int QColormap_Size(void* ptr){
	return static_cast<QColormap*>(ptr)->size();
}

void QColormap_DestroyQColormap(void* ptr){
	static_cast<QColormap*>(ptr)->~QColormap();
}

class MyQColumnView: public QColumnView {
public:
	MyQColumnView(QWidget *parent) : QColumnView(parent) {};
	void resizeEvent(QResizeEvent * event) { callbackQColumnViewResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void scrollContentsBy(int dx, int dy) { callbackQColumnViewScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void selectAll() { if (!callbackQColumnViewSelectAll(this, this->objectName().toUtf8().data())) { QColumnView::selectAll(); }; };
	void setModel(QAbstractItemModel * model) { callbackQColumnViewSetModel(this, this->objectName().toUtf8().data(), model); };
	void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags command) { callbackQColumnViewSetSelection(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), command); };
	void setSelectionModel(QItemSelectionModel * newSelectionModel) { callbackQColumnViewSetSelectionModel(this, this->objectName().toUtf8().data(), newSelectionModel); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQColumnViewDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { if (!callbackQColumnViewCloseEditor(this, this->objectName().toUtf8().data(), editor, hint)) { QColumnView::closeEditor(editor, hint); }; };
	void commitData(QWidget * editor) { if (!callbackQColumnViewCommitData(this, this->objectName().toUtf8().data(), editor)) { QColumnView::commitData(editor); }; };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQColumnViewDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQColumnViewDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQColumnViewDropEvent(this, this->objectName().toUtf8().data(), event); };
	void editorDestroyed(QObject * editor) { if (!callbackQColumnViewEditorDestroyed(this, this->objectName().toUtf8().data(), editor)) { QColumnView::editorDestroyed(editor); }; };
	void focusInEvent(QFocusEvent * event) { callbackQColumnViewFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQColumnViewFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQColumnViewInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQColumnViewKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyboardSearch(const QString & search) { callbackQColumnViewKeyboardSearch(this, this->objectName().toUtf8().data(), search.toUtf8().data()); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQColumnViewMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQColumnViewMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQColumnViewMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQColumnViewMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void reset() { if (!callbackQColumnViewReset(this, this->objectName().toUtf8().data())) { QColumnView::reset(); }; };
	void startDrag(Qt::DropActions supportedActions) { callbackQColumnViewStartDrag(this, this->objectName().toUtf8().data(), supportedActions); };
	void timerEvent(QTimerEvent * event) { callbackQColumnViewTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void updateGeometries() { if (!callbackQColumnViewUpdateGeometries(this, this->objectName().toUtf8().data())) { QColumnView::updateGeometries(); }; };
	void paintEvent(QPaintEvent * event) { callbackQColumnViewPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQColumnViewContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void setupViewport(QWidget * viewport) { callbackQColumnViewSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQColumnViewWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQColumnViewChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQColumnViewActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQColumnViewEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQColumnViewHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQColumnViewLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQColumnViewMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQColumnViewSetVisible(this, this->objectName().toUtf8().data(), visible)) { QColumnView::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQColumnViewShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQColumnViewCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQColumnViewInitPainter(const_cast<MyQColumnView*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQColumnViewKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQColumnViewTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQColumnViewChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQColumnViewCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QColumnView_ResizeGripsVisible(void* ptr){
	return static_cast<QColumnView*>(ptr)->resizeGripsVisible();
}

void QColumnView_SetResizeGripsVisible(void* ptr, int visible){
	static_cast<QColumnView*>(ptr)->setResizeGripsVisible(visible != 0);
}

void* QColumnView_NewQColumnView(void* parent){
	return new MyQColumnView(static_cast<QWidget*>(parent));
}

void* QColumnView_CreateColumn(void* ptr, void* index){
	return static_cast<QColumnView*>(ptr)->createColumn(*static_cast<QModelIndex*>(index));
}

int QColumnView_HorizontalOffset(void* ptr){
	return static_cast<QColumnView*>(ptr)->horizontalOffset();
}

int QColumnView_IsIndexHidden(void* ptr, void* index){
	return static_cast<QColumnView*>(ptr)->isIndexHidden(*static_cast<QModelIndex*>(index));
}

void* QColumnView_PreviewWidget(void* ptr){
	return static_cast<QColumnView*>(ptr)->previewWidget();
}

void QColumnView_ResizeEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QColumnView_ResizeEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QColumnView_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQColumnView*>(ptr)->scrollContentsBy(dx, dy);
}

void QColumnView_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QColumnView*>(ptr)->QColumnView::scrollContentsBy(dx, dy);
}

void QColumnView_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQColumnView*>(ptr), "selectAll");
}

void QColumnView_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QColumnView*>(ptr), "selectAll");
}

void QColumnView_SetModel(void* ptr, void* model){
	static_cast<MyQColumnView*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QColumnView_SetModelDefault(void* ptr, void* model){
	static_cast<QColumnView*>(ptr)->QColumnView::setModel(static_cast<QAbstractItemModel*>(model));
}

void QColumnView_SetPreviewWidget(void* ptr, void* widget){
	static_cast<QColumnView*>(ptr)->setPreviewWidget(static_cast<QWidget*>(widget));
}

void QColumnView_SetSelection(void* ptr, void* rect, int command){
	static_cast<MyQColumnView*>(ptr)->setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QColumnView_SetSelectionDefault(void* ptr, void* rect, int command){
	static_cast<QColumnView*>(ptr)->QColumnView::setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QColumnView_SetSelectionModel(void* ptr, void* newSelectionModel){
	static_cast<MyQColumnView*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(newSelectionModel));
}

void QColumnView_SetSelectionModelDefault(void* ptr, void* newSelectionModel){
	static_cast<QColumnView*>(ptr)->QColumnView::setSelectionModel(static_cast<QItemSelectionModel*>(newSelectionModel));
}

void* QColumnView_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QColumnView*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QColumnView*>(ptr)->sizeHint()).height());
}

int QColumnView_VerticalOffset(void* ptr){
	return static_cast<QColumnView*>(ptr)->verticalOffset();
}

void* QColumnView_VisualRect(void* ptr, void* index){
	return new QRect(static_cast<QRect>(static_cast<QColumnView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).x(), static_cast<QRect>(static_cast<QColumnView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).y(), static_cast<QRect>(static_cast<QColumnView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).width(), static_cast<QRect>(static_cast<QColumnView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).height());
}

void* QColumnView_VisualRegionForSelection(void* ptr, void* selection){
	return new QRegion(static_cast<QColumnView*>(ptr)->visualRegionForSelection(*static_cast<QItemSelection*>(selection)));
}

void QColumnView_DestroyQColumnView(void* ptr){
	static_cast<QColumnView*>(ptr)->~QColumnView();
}

void QColumnView_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QColumnView_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QColumnView_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<MyQColumnView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QColumnView_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QColumnView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QColumnView_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQColumnView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QColumnView_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QColumnView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QColumnView_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QColumnView_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QColumnView_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QColumnView_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QColumnView_DropEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QColumnView_DropEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::dropEvent(static_cast<QDropEvent*>(event));
}

void QColumnView_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQColumnView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QColumnView_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QColumnView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QColumnView_FocusInEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QColumnView_FocusInEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QColumnView_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QColumnView_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QColumnView_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QColumnView_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QColumnView_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QColumnView_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QColumnView_KeyboardSearch(void* ptr, char* search){
	static_cast<MyQColumnView*>(ptr)->keyboardSearch(QString(search));
}

void QColumnView_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QColumnView*>(ptr)->QColumnView::keyboardSearch(QString(search));
}

void QColumnView_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QColumnView_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QColumnView_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QColumnView_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QColumnView_MousePressEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QColumnView_MousePressEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QColumnView_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QColumnView_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QColumnView_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQColumnView*>(ptr), "reset");
}

void QColumnView_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QColumnView*>(ptr), "reset");
}

void QColumnView_StartDrag(void* ptr, int supportedActions){
	static_cast<MyQColumnView*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QColumnView_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QColumnView*>(ptr)->QColumnView::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QColumnView_TimerEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QColumnView_TimerEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::timerEvent(static_cast<QTimerEvent*>(event));
}

void QColumnView_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQColumnView*>(ptr), "updateGeometries");
}

void QColumnView_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QColumnView*>(ptr), "updateGeometries");
}

void QColumnView_PaintEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QColumnView_PaintEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::paintEvent(static_cast<QPaintEvent*>(event));
}

void QColumnView_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQColumnView*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QColumnView_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QColumnView*>(ptr)->QColumnView::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QColumnView_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQColumnView*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QColumnView_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QColumnView*>(ptr)->QColumnView::setupViewport(static_cast<QWidget*>(viewport));
}

void QColumnView_WheelEvent(void* ptr, void* e){
	static_cast<MyQColumnView*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QColumnView_WheelEventDefault(void* ptr, void* e){
	static_cast<QColumnView*>(ptr)->QColumnView::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QColumnView_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQColumnView*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QColumnView_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QColumnView*>(ptr)->QColumnView::changeEvent(static_cast<QEvent*>(ev));
}

void QColumnView_ActionEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QColumnView_ActionEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::actionEvent(static_cast<QActionEvent*>(event));
}

void QColumnView_EnterEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QColumnView_EnterEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::enterEvent(static_cast<QEvent*>(event));
}

void QColumnView_HideEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QColumnView_HideEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::hideEvent(static_cast<QHideEvent*>(event));
}

void QColumnView_LeaveEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QColumnView_LeaveEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::leaveEvent(static_cast<QEvent*>(event));
}

void QColumnView_MoveEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QColumnView_MoveEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::moveEvent(static_cast<QMoveEvent*>(event));
}

void QColumnView_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQColumnView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QColumnView_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QColumnView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QColumnView_ShowEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QColumnView_ShowEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::showEvent(static_cast<QShowEvent*>(event));
}

void QColumnView_CloseEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QColumnView_CloseEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::closeEvent(static_cast<QCloseEvent*>(event));
}

void QColumnView_InitPainter(void* ptr, void* painter){
	static_cast<MyQColumnView*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QColumnView_InitPainterDefault(void* ptr, void* painter){
	static_cast<QColumnView*>(ptr)->QColumnView::initPainter(static_cast<QPainter*>(painter));
}

void QColumnView_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QColumnView_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QColumnView_TabletEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QColumnView_TabletEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QColumnView_ChildEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QColumnView_ChildEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::childEvent(static_cast<QChildEvent*>(event));
}

void QColumnView_CustomEvent(void* ptr, void* event){
	static_cast<MyQColumnView*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QColumnView_CustomEventDefault(void* ptr, void* event){
	static_cast<QColumnView*>(ptr)->QColumnView::customEvent(static_cast<QEvent*>(event));
}

class MyQComboBox: public QComboBox {
public:
	MyQComboBox(QWidget *parent) : QComboBox(parent) {};
	void Signal_Activated2(const QString & text) { callbackQComboBoxActivated2(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void Signal_Activated(int index) { callbackQComboBoxActivated(this, this->objectName().toUtf8().data(), index); };
	void changeEvent(QEvent * e) { callbackQComboBoxChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQComboBoxContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_CurrentIndexChanged2(const QString & text) { callbackQComboBoxCurrentIndexChanged2(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void Signal_CurrentIndexChanged(int index) { callbackQComboBoxCurrentIndexChanged(this, this->objectName().toUtf8().data(), index); };
	void Signal_CurrentTextChanged(const QString & text) { callbackQComboBoxCurrentTextChanged(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void Signal_EditTextChanged(const QString & text) { callbackQComboBoxEditTextChanged(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void focusInEvent(QFocusEvent * e) { callbackQComboBoxFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQComboBoxFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void hideEvent(QHideEvent * e) { callbackQComboBoxHideEvent(this, this->objectName().toUtf8().data(), e); };
	void hidePopup() { callbackQComboBoxHidePopup(this, this->objectName().toUtf8().data()); };
	void Signal_Highlighted2(const QString & text) { callbackQComboBoxHighlighted2(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void Signal_Highlighted(int index) { callbackQComboBoxHighlighted(this, this->objectName().toUtf8().data(), index); };
	void inputMethodEvent(QInputMethodEvent * e) { callbackQComboBoxInputMethodEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQComboBoxKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQComboBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQComboBoxMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQComboBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * e) { callbackQComboBoxPaintEvent(this, this->objectName().toUtf8().data(), e); };
	void resizeEvent(QResizeEvent * e) { callbackQComboBoxResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void showEvent(QShowEvent * e) { callbackQComboBoxShowEvent(this, this->objectName().toUtf8().data(), e); };
	void showPopup() { callbackQComboBoxShowPopup(this, this->objectName().toUtf8().data()); };
	void wheelEvent(QWheelEvent * e) { callbackQComboBoxWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQComboBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQComboBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQComboBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQComboBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQComboBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQComboBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQComboBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQComboBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQComboBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QComboBox::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQComboBoxCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQComboBoxInitPainter(const_cast<MyQComboBox*>(this), this->objectName().toUtf8().data(), painter); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQComboBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQComboBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQComboBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQComboBoxTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQComboBoxChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQComboBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QComboBox_Count(void* ptr){
	return static_cast<QComboBox*>(ptr)->count();
}

void* QComboBox_CurrentData(void* ptr, int role){
	return new QVariant(static_cast<QComboBox*>(ptr)->currentData(role));
}

int QComboBox_CurrentIndex(void* ptr){
	return static_cast<QComboBox*>(ptr)->currentIndex();
}

char* QComboBox_CurrentText(void* ptr){
	return static_cast<QComboBox*>(ptr)->currentText().toUtf8().data();
}

int QComboBox_DuplicatesEnabled(void* ptr){
	return static_cast<QComboBox*>(ptr)->duplicatesEnabled();
}

int QComboBox_HasFrame(void* ptr){
	return static_cast<QComboBox*>(ptr)->hasFrame();
}

void* QComboBox_IconSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QComboBox*>(ptr)->iconSize()).width(), static_cast<QSize>(static_cast<QComboBox*>(ptr)->iconSize()).height());
}

int QComboBox_InsertPolicy(void* ptr){
	return static_cast<QComboBox*>(ptr)->insertPolicy();
}

int QComboBox_IsEditable(void* ptr){
	return static_cast<QComboBox*>(ptr)->isEditable();
}

int QComboBox_MaxCount(void* ptr){
	return static_cast<QComboBox*>(ptr)->maxCount();
}

int QComboBox_MaxVisibleItems(void* ptr){
	return static_cast<QComboBox*>(ptr)->maxVisibleItems();
}

int QComboBox_MinimumContentsLength(void* ptr){
	return static_cast<QComboBox*>(ptr)->minimumContentsLength();
}

int QComboBox_ModelColumn(void* ptr){
	return static_cast<QComboBox*>(ptr)->modelColumn();
}

void QComboBox_SetCompleter(void* ptr, void* completer){
	static_cast<QComboBox*>(ptr)->setCompleter(static_cast<QCompleter*>(completer));
}

void QComboBox_SetCurrentIndex(void* ptr, int index){
	QMetaObject::invokeMethod(static_cast<QComboBox*>(ptr), "setCurrentIndex", Q_ARG(int, index));
}

void QComboBox_SetCurrentText(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QComboBox*>(ptr), "setCurrentText", Q_ARG(QString, QString(text)));
}

void QComboBox_SetDuplicatesEnabled(void* ptr, int enable){
	static_cast<QComboBox*>(ptr)->setDuplicatesEnabled(enable != 0);
}

void QComboBox_SetEditable(void* ptr, int editable){
	static_cast<QComboBox*>(ptr)->setEditable(editable != 0);
}

void QComboBox_SetFrame(void* ptr, int v){
	static_cast<QComboBox*>(ptr)->setFrame(v != 0);
}

void QComboBox_SetIconSize(void* ptr, void* size){
	static_cast<QComboBox*>(ptr)->setIconSize(*static_cast<QSize*>(size));
}

void QComboBox_SetInsertPolicy(void* ptr, int policy){
	static_cast<QComboBox*>(ptr)->setInsertPolicy(static_cast<QComboBox::InsertPolicy>(policy));
}

void QComboBox_SetMaxCount(void* ptr, int max){
	static_cast<QComboBox*>(ptr)->setMaxCount(max);
}

void QComboBox_SetMaxVisibleItems(void* ptr, int maxItems){
	static_cast<QComboBox*>(ptr)->setMaxVisibleItems(maxItems);
}

void QComboBox_SetMinimumContentsLength(void* ptr, int characters){
	static_cast<QComboBox*>(ptr)->setMinimumContentsLength(characters);
}

void QComboBox_SetModelColumn(void* ptr, int visibleColumn){
	static_cast<QComboBox*>(ptr)->setModelColumn(visibleColumn);
}

void QComboBox_SetSizeAdjustPolicy(void* ptr, int policy){
	static_cast<QComboBox*>(ptr)->setSizeAdjustPolicy(static_cast<QComboBox::SizeAdjustPolicy>(policy));
}

void QComboBox_SetValidator(void* ptr, void* validator){
	static_cast<QComboBox*>(ptr)->setValidator(static_cast<QValidator*>(validator));
}

int QComboBox_SizeAdjustPolicy(void* ptr){
	return static_cast<QComboBox*>(ptr)->sizeAdjustPolicy();
}

void* QComboBox_NewQComboBox(void* parent){
	return new MyQComboBox(static_cast<QWidget*>(parent));
}

void QComboBox_ConnectActivated2(void* ptr){
	QObject::connect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::activated), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_Activated2));;
}

void QComboBox_DisconnectActivated2(void* ptr){
	QObject::disconnect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::activated), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_Activated2));;
}

void QComboBox_Activated2(void* ptr, char* text){
	static_cast<QComboBox*>(ptr)->activated(QString(text));
}

void QComboBox_ConnectActivated(void* ptr){
	QObject::connect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(int)>(&MyQComboBox::Signal_Activated));;
}

void QComboBox_DisconnectActivated(void* ptr){
	QObject::disconnect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(int)>(&MyQComboBox::Signal_Activated));;
}

void QComboBox_Activated(void* ptr, int index){
	static_cast<QComboBox*>(ptr)->activated(index);
}

void QComboBox_AddItem2(void* ptr, void* icon, char* text, void* userData){
	static_cast<QComboBox*>(ptr)->addItem(*static_cast<QIcon*>(icon), QString(text), *static_cast<QVariant*>(userData));
}

void QComboBox_AddItem(void* ptr, char* text, void* userData){
	static_cast<QComboBox*>(ptr)->addItem(QString(text), *static_cast<QVariant*>(userData));
}

void QComboBox_AddItems(void* ptr, char* texts){
	static_cast<QComboBox*>(ptr)->addItems(QString(texts).split("|", QString::SkipEmptyParts));
}

void QComboBox_ChangeEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QComboBox_ChangeEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::changeEvent(static_cast<QEvent*>(e));
}

void QComboBox_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QComboBox*>(ptr), "clear");
}

void QComboBox_ClearEditText(void* ptr){
	QMetaObject::invokeMethod(static_cast<QComboBox*>(ptr), "clearEditText");
}

void* QComboBox_Completer(void* ptr){
	return static_cast<QComboBox*>(ptr)->completer();
}

void QComboBox_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QComboBox_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QComboBox_ConnectCurrentIndexChanged2(void* ptr){
	QObject::connect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::currentIndexChanged), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_CurrentIndexChanged2));;
}

void QComboBox_DisconnectCurrentIndexChanged2(void* ptr){
	QObject::disconnect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::currentIndexChanged), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_CurrentIndexChanged2));;
}

void QComboBox_CurrentIndexChanged2(void* ptr, char* text){
	static_cast<QComboBox*>(ptr)->currentIndexChanged(QString(text));
}

void QComboBox_ConnectCurrentIndexChanged(void* ptr){
	QObject::connect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(int)>(&QComboBox::currentIndexChanged), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(int)>(&MyQComboBox::Signal_CurrentIndexChanged));;
}

void QComboBox_DisconnectCurrentIndexChanged(void* ptr){
	QObject::disconnect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(int)>(&QComboBox::currentIndexChanged), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(int)>(&MyQComboBox::Signal_CurrentIndexChanged));;
}

void QComboBox_CurrentIndexChanged(void* ptr, int index){
	static_cast<QComboBox*>(ptr)->currentIndexChanged(index);
}

void QComboBox_ConnectCurrentTextChanged(void* ptr){
	QObject::connect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::currentTextChanged), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_CurrentTextChanged));;
}

void QComboBox_DisconnectCurrentTextChanged(void* ptr){
	QObject::disconnect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::currentTextChanged), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_CurrentTextChanged));;
}

void QComboBox_CurrentTextChanged(void* ptr, char* text){
	static_cast<QComboBox*>(ptr)->currentTextChanged(QString(text));
}

void QComboBox_ConnectEditTextChanged(void* ptr){
	QObject::connect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::editTextChanged), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_EditTextChanged));;
}

void QComboBox_DisconnectEditTextChanged(void* ptr){
	QObject::disconnect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::editTextChanged), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_EditTextChanged));;
}

void QComboBox_EditTextChanged(void* ptr, char* text){
	static_cast<QComboBox*>(ptr)->editTextChanged(QString(text));
}

int QComboBox_Event(void* ptr, void* event){
	return static_cast<QComboBox*>(ptr)->event(static_cast<QEvent*>(event));
}

int QComboBox_FindData(void* ptr, void* data, int role, int flags){
	return static_cast<QComboBox*>(ptr)->findData(*static_cast<QVariant*>(data), role, static_cast<Qt::MatchFlag>(flags));
}

int QComboBox_FindText(void* ptr, char* text, int flags){
	return static_cast<QComboBox*>(ptr)->findText(QString(text), static_cast<Qt::MatchFlag>(flags));
}

void QComboBox_FocusInEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QComboBox_FocusInEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QComboBox_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QComboBox_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QComboBox_HideEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(e));
}

void QComboBox_HideEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::hideEvent(static_cast<QHideEvent*>(e));
}

void QComboBox_HidePopup(void* ptr){
	static_cast<MyQComboBox*>(ptr)->hidePopup();
}

void QComboBox_HidePopupDefault(void* ptr){
	static_cast<QComboBox*>(ptr)->QComboBox::hidePopup();
}

void QComboBox_ConnectHighlighted2(void* ptr){
	QObject::connect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::highlighted), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_Highlighted2));;
}

void QComboBox_DisconnectHighlighted2(void* ptr){
	QObject::disconnect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(const QString &)>(&QComboBox::highlighted), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(const QString &)>(&MyQComboBox::Signal_Highlighted2));;
}

void QComboBox_Highlighted2(void* ptr, char* text){
	static_cast<QComboBox*>(ptr)->highlighted(QString(text));
}

void QComboBox_ConnectHighlighted(void* ptr){
	QObject::connect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(int)>(&QComboBox::highlighted), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(int)>(&MyQComboBox::Signal_Highlighted));;
}

void QComboBox_DisconnectHighlighted(void* ptr){
	QObject::disconnect(static_cast<QComboBox*>(ptr), static_cast<void (QComboBox::*)(int)>(&QComboBox::highlighted), static_cast<MyQComboBox*>(ptr), static_cast<void (MyQComboBox::*)(int)>(&MyQComboBox::Signal_Highlighted));;
}

void QComboBox_Highlighted(void* ptr, int index){
	static_cast<QComboBox*>(ptr)->highlighted(index);
}

void QComboBox_InputMethodEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void QComboBox_InputMethodEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void* QComboBox_InputMethodQuery(void* ptr, int query){
	return new QVariant(static_cast<QComboBox*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(query)));
}

void QComboBox_InsertItem2(void* ptr, int index, void* icon, char* text, void* userData){
	static_cast<QComboBox*>(ptr)->insertItem(index, *static_cast<QIcon*>(icon), QString(text), *static_cast<QVariant*>(userData));
}

void QComboBox_InsertItem(void* ptr, int index, char* text, void* userData){
	static_cast<QComboBox*>(ptr)->insertItem(index, QString(text), *static_cast<QVariant*>(userData));
}

void QComboBox_InsertItems(void* ptr, int index, char* list){
	static_cast<QComboBox*>(ptr)->insertItems(index, QString(list).split("|", QString::SkipEmptyParts));
}

void QComboBox_InsertSeparator(void* ptr, int index){
	static_cast<QComboBox*>(ptr)->insertSeparator(index);
}

void* QComboBox_ItemData(void* ptr, int index, int role){
	return new QVariant(static_cast<QComboBox*>(ptr)->itemData(index, role));
}

void* QComboBox_ItemDelegate(void* ptr){
	return static_cast<QComboBox*>(ptr)->itemDelegate();
}

void* QComboBox_ItemIcon(void* ptr, int index){
	return new QIcon(static_cast<QComboBox*>(ptr)->itemIcon(index));
}

char* QComboBox_ItemText(void* ptr, int index){
	return static_cast<QComboBox*>(ptr)->itemText(index).toUtf8().data();
}

void QComboBox_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QComboBox_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QComboBox_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QComboBox_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void* QComboBox_LineEdit(void* ptr){
	return static_cast<QComboBox*>(ptr)->lineEdit();
}

void* QComboBox_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QComboBox*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QComboBox*>(ptr)->minimumSizeHint()).height());
}

void* QComboBox_Model(void* ptr){
	return static_cast<QComboBox*>(ptr)->model();
}

void QComboBox_MousePressEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QComboBox_MousePressEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QComboBox_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QComboBox_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QComboBox_PaintEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QComboBox_PaintEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::paintEvent(static_cast<QPaintEvent*>(e));
}

void QComboBox_RemoveItem(void* ptr, int index){
	static_cast<QComboBox*>(ptr)->removeItem(index);
}

void QComboBox_ResizeEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QComboBox_ResizeEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QComboBox_SetEditText(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QComboBox*>(ptr), "setEditText", Q_ARG(QString, QString(text)));
}

void QComboBox_SetItemData(void* ptr, int index, void* value, int role){
	static_cast<QComboBox*>(ptr)->setItemData(index, *static_cast<QVariant*>(value), role);
}

void QComboBox_SetItemDelegate(void* ptr, void* delegate){
	static_cast<QComboBox*>(ptr)->setItemDelegate(static_cast<QAbstractItemDelegate*>(delegate));
}

void QComboBox_SetItemIcon(void* ptr, int index, void* icon){
	static_cast<QComboBox*>(ptr)->setItemIcon(index, *static_cast<QIcon*>(icon));
}

void QComboBox_SetItemText(void* ptr, int index, char* text){
	static_cast<QComboBox*>(ptr)->setItemText(index, QString(text));
}

void QComboBox_SetLineEdit(void* ptr, void* edit){
	static_cast<QComboBox*>(ptr)->setLineEdit(static_cast<QLineEdit*>(edit));
}

void QComboBox_SetModel(void* ptr, void* model){
	static_cast<QComboBox*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QComboBox_SetRootModelIndex(void* ptr, void* index){
	static_cast<QComboBox*>(ptr)->setRootModelIndex(*static_cast<QModelIndex*>(index));
}

void QComboBox_SetView(void* ptr, void* itemView){
	static_cast<QComboBox*>(ptr)->setView(static_cast<QAbstractItemView*>(itemView));
}

void QComboBox_ShowEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->showEvent(static_cast<QShowEvent*>(e));
}

void QComboBox_ShowEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::showEvent(static_cast<QShowEvent*>(e));
}

void QComboBox_ShowPopup(void* ptr){
	static_cast<MyQComboBox*>(ptr)->showPopup();
}

void QComboBox_ShowPopupDefault(void* ptr){
	static_cast<QComboBox*>(ptr)->QComboBox::showPopup();
}

void* QComboBox_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QComboBox*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QComboBox*>(ptr)->sizeHint()).height());
}

void* QComboBox_Validator(void* ptr){
	return const_cast<QValidator*>(static_cast<QComboBox*>(ptr)->validator());
}

void* QComboBox_View(void* ptr){
	return static_cast<QComboBox*>(ptr)->view();
}

void QComboBox_WheelEvent(void* ptr, void* e){
	static_cast<MyQComboBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QComboBox_WheelEventDefault(void* ptr, void* e){
	static_cast<QComboBox*>(ptr)->QComboBox::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QComboBox_DestroyQComboBox(void* ptr){
	static_cast<QComboBox*>(ptr)->~QComboBox();
}

void QComboBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QComboBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QComboBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QComboBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QComboBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QComboBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QComboBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QComboBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QComboBox_DropEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QComboBox_DropEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QComboBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QComboBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::enterEvent(static_cast<QEvent*>(event));
}

void QComboBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QComboBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::leaveEvent(static_cast<QEvent*>(event));
}

void QComboBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QComboBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QComboBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQComboBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QComboBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QComboBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QComboBox_CloseEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QComboBox_CloseEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::closeEvent(static_cast<QCloseEvent*>(event));
}

void QComboBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQComboBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QComboBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QComboBox*>(ptr)->QComboBox::initPainter(static_cast<QPainter*>(painter));
}

void QComboBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QComboBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QComboBox_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QComboBox_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QComboBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QComboBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QComboBox_TimerEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QComboBox_TimerEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::timerEvent(static_cast<QTimerEvent*>(event));
}

void QComboBox_ChildEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QComboBox_ChildEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::childEvent(static_cast<QChildEvent*>(event));
}

void QComboBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQComboBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QComboBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QComboBox*>(ptr)->QComboBox::customEvent(static_cast<QEvent*>(event));
}

class MyQCommandLinkButton: public QCommandLinkButton {
public:
	MyQCommandLinkButton(QWidget *parent) : QCommandLinkButton(parent) {};
	MyQCommandLinkButton(const QString &text, QWidget *parent) : QCommandLinkButton(text, parent) {};
	MyQCommandLinkButton(const QString &text, const QString &description, QWidget *parent) : QCommandLinkButton(text, description, parent) {};
	void paintEvent(QPaintEvent * v) { callbackQCommandLinkButtonPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void focusInEvent(QFocusEvent * e) { callbackQCommandLinkButtonFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQCommandLinkButtonFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQCommandLinkButtonKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * e) { callbackQCommandLinkButtonChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void checkStateSet() { callbackQCommandLinkButtonCheckStateSet(this, this->objectName().toUtf8().data()); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQCommandLinkButtonKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQCommandLinkButtonMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQCommandLinkButtonMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQCommandLinkButtonMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void nextCheckState() { callbackQCommandLinkButtonNextCheckState(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * e) { callbackQCommandLinkButtonTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQCommandLinkButtonActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQCommandLinkButtonDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQCommandLinkButtonDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQCommandLinkButtonDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQCommandLinkButtonDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQCommandLinkButtonEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQCommandLinkButtonHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQCommandLinkButtonLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQCommandLinkButtonMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQCommandLinkButtonSetVisible(this, this->objectName().toUtf8().data(), visible)) { QCommandLinkButton::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQCommandLinkButtonShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQCommandLinkButtonCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQCommandLinkButtonContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQCommandLinkButtonInitPainter(const_cast<MyQCommandLinkButton*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQCommandLinkButtonInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQCommandLinkButtonMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQCommandLinkButtonResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQCommandLinkButtonTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQCommandLinkButtonWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQCommandLinkButtonChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQCommandLinkButtonCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

char* QCommandLinkButton_Description(void* ptr){
	return static_cast<QCommandLinkButton*>(ptr)->description().toUtf8().data();
}

void QCommandLinkButton_SetDescription(void* ptr, char* description){
	static_cast<QCommandLinkButton*>(ptr)->setDescription(QString(description));
}

void* QCommandLinkButton_NewQCommandLinkButton(void* parent){
	return new MyQCommandLinkButton(static_cast<QWidget*>(parent));
}

void* QCommandLinkButton_NewQCommandLinkButton2(char* text, void* parent){
	return new MyQCommandLinkButton(QString(text), static_cast<QWidget*>(parent));
}

void* QCommandLinkButton_NewQCommandLinkButton3(char* text, char* description, void* parent){
	return new MyQCommandLinkButton(QString(text), QString(description), static_cast<QWidget*>(parent));
}

int QCommandLinkButton_Event(void* ptr, void* e){
	return static_cast<QCommandLinkButton*>(ptr)->event(static_cast<QEvent*>(e));
}

int QCommandLinkButton_HeightForWidth(void* ptr, int width){
	return static_cast<QCommandLinkButton*>(ptr)->heightForWidth(width);
}

void* QCommandLinkButton_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QCommandLinkButton*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QCommandLinkButton*>(ptr)->minimumSizeHint()).height());
}

void QCommandLinkButton_PaintEvent(void* ptr, void* v){
	static_cast<MyQCommandLinkButton*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QCommandLinkButton_PaintEventDefault(void* ptr, void* v){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::paintEvent(static_cast<QPaintEvent*>(v));
}

void* QCommandLinkButton_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QCommandLinkButton*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QCommandLinkButton*>(ptr)->sizeHint()).height());
}

void QCommandLinkButton_DestroyQCommandLinkButton(void* ptr){
	static_cast<QCommandLinkButton*>(ptr)->~QCommandLinkButton();
}

void QCommandLinkButton_FocusInEvent(void* ptr, void* e){
	static_cast<MyQCommandLinkButton*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QCommandLinkButton_FocusInEventDefault(void* ptr, void* e){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QCommandLinkButton_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQCommandLinkButton*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QCommandLinkButton_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QCommandLinkButton_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQCommandLinkButton*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QCommandLinkButton_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QCommandLinkButton_ChangeEvent(void* ptr, void* e){
	static_cast<MyQCommandLinkButton*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QCommandLinkButton_ChangeEventDefault(void* ptr, void* e){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::changeEvent(static_cast<QEvent*>(e));
}

void QCommandLinkButton_CheckStateSet(void* ptr){
	static_cast<MyQCommandLinkButton*>(ptr)->checkStateSet();
}

void QCommandLinkButton_CheckStateSetDefault(void* ptr){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::checkStateSet();
}

void QCommandLinkButton_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQCommandLinkButton*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QCommandLinkButton_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QCommandLinkButton_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQCommandLinkButton*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QCommandLinkButton_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QCommandLinkButton_MousePressEvent(void* ptr, void* e){
	static_cast<MyQCommandLinkButton*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QCommandLinkButton_MousePressEventDefault(void* ptr, void* e){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QCommandLinkButton_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQCommandLinkButton*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QCommandLinkButton_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QCommandLinkButton_NextCheckState(void* ptr){
	static_cast<MyQCommandLinkButton*>(ptr)->nextCheckState();
}

void QCommandLinkButton_NextCheckStateDefault(void* ptr){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::nextCheckState();
}

void QCommandLinkButton_TimerEvent(void* ptr, void* e){
	static_cast<MyQCommandLinkButton*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QCommandLinkButton_TimerEventDefault(void* ptr, void* e){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::timerEvent(static_cast<QTimerEvent*>(e));
}

void QCommandLinkButton_ActionEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QCommandLinkButton_ActionEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::actionEvent(static_cast<QActionEvent*>(event));
}

void QCommandLinkButton_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QCommandLinkButton_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QCommandLinkButton_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QCommandLinkButton_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QCommandLinkButton_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QCommandLinkButton_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QCommandLinkButton_DropEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QCommandLinkButton_DropEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::dropEvent(static_cast<QDropEvent*>(event));
}

void QCommandLinkButton_EnterEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QCommandLinkButton_EnterEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::enterEvent(static_cast<QEvent*>(event));
}

void QCommandLinkButton_HideEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QCommandLinkButton_HideEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::hideEvent(static_cast<QHideEvent*>(event));
}

void QCommandLinkButton_LeaveEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QCommandLinkButton_LeaveEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::leaveEvent(static_cast<QEvent*>(event));
}

void QCommandLinkButton_MoveEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QCommandLinkButton_MoveEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::moveEvent(static_cast<QMoveEvent*>(event));
}

void QCommandLinkButton_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQCommandLinkButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QCommandLinkButton_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QCommandLinkButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QCommandLinkButton_ShowEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QCommandLinkButton_ShowEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::showEvent(static_cast<QShowEvent*>(event));
}

void QCommandLinkButton_CloseEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QCommandLinkButton_CloseEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::closeEvent(static_cast<QCloseEvent*>(event));
}

void QCommandLinkButton_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QCommandLinkButton_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QCommandLinkButton_InitPainter(void* ptr, void* painter){
	static_cast<MyQCommandLinkButton*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QCommandLinkButton_InitPainterDefault(void* ptr, void* painter){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::initPainter(static_cast<QPainter*>(painter));
}

void QCommandLinkButton_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QCommandLinkButton_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QCommandLinkButton_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QCommandLinkButton_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QCommandLinkButton_ResizeEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QCommandLinkButton_ResizeEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QCommandLinkButton_TabletEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QCommandLinkButton_TabletEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QCommandLinkButton_WheelEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QCommandLinkButton_WheelEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QCommandLinkButton_ChildEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QCommandLinkButton_ChildEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::childEvent(static_cast<QChildEvent*>(event));
}

void QCommandLinkButton_CustomEvent(void* ptr, void* event){
	static_cast<MyQCommandLinkButton*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QCommandLinkButton_CustomEventDefault(void* ptr, void* event){
	static_cast<QCommandLinkButton*>(ptr)->QCommandLinkButton::customEvent(static_cast<QEvent*>(event));
}

class MyQCommonStyle: public QCommonStyle {
public:
	void drawControl(QStyle::ControlElement element, const QStyleOption * opt, QPainter * p, const QWidget * widget) const { callbackQCommonStyleDrawControl(const_cast<MyQCommonStyle*>(this), this->objectName().toUtf8().data(), element, const_cast<QStyleOption*>(opt), p, const_cast<QWidget*>(widget)); };
	void drawPrimitive(QStyle::PrimitiveElement pe, const QStyleOption * opt, QPainter * p, const QWidget * widget) const { callbackQCommonStyleDrawPrimitive(const_cast<MyQCommonStyle*>(this), this->objectName().toUtf8().data(), pe, const_cast<QStyleOption*>(opt), p, const_cast<QWidget*>(widget)); };
	void drawComplexControl(QStyle::ComplexControl cc, const QStyleOptionComplex * opt, QPainter * p, const QWidget * widget) const { callbackQCommonStyleDrawComplexControl(const_cast<MyQCommonStyle*>(this), this->objectName().toUtf8().data(), cc, const_cast<QStyleOptionComplex*>(opt), p, const_cast<QWidget*>(widget)); };
	void polish(QPalette & pal) { callbackQCommonStylePolish(this, this->objectName().toUtf8().data(), new QPalette(pal)); };
	void unpolish(QWidget * widget) { callbackQCommonStyleUnpolish(this, this->objectName().toUtf8().data(), widget); };
	void drawItemPixmap(QPainter * painter, const QRect & rectangle, int alignment, const QPixmap & pixmap) const { callbackQCommonStyleDrawItemPixmap(const_cast<MyQCommonStyle*>(this), this->objectName().toUtf8().data(), painter, new QRect(static_cast<QRect>(rectangle).x(), static_cast<QRect>(rectangle).y(), static_cast<QRect>(rectangle).width(), static_cast<QRect>(rectangle).height()), alignment, new QPixmap(pixmap)); };
	void drawItemText(QPainter * painter, const QRect & rectangle, int alignment, const QPalette & palette, bool enabled, const QString & text, QPalette::ColorRole textRole) const { callbackQCommonStyleDrawItemText(const_cast<MyQCommonStyle*>(this), this->objectName().toUtf8().data(), painter, new QRect(static_cast<QRect>(rectangle).x(), static_cast<QRect>(rectangle).y(), static_cast<QRect>(rectangle).width(), static_cast<QRect>(rectangle).height()), alignment, new QPalette(palette), enabled, text.toUtf8().data(), textRole); };
	void timerEvent(QTimerEvent * event) { callbackQCommonStyleTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQCommonStyleChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQCommonStyleCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QCommonStyle_DrawControl(void* ptr, int element, void* opt, void* p, void* widget){
	static_cast<MyQCommonStyle*>(ptr)->drawControl(static_cast<QStyle::ControlElement>(element), static_cast<QStyleOption*>(opt), static_cast<QPainter*>(p), static_cast<QWidget*>(widget));
}

void QCommonStyle_DrawControlDefault(void* ptr, int element, void* opt, void* p, void* widget){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::drawControl(static_cast<QStyle::ControlElement>(element), static_cast<QStyleOption*>(opt), static_cast<QPainter*>(p), static_cast<QWidget*>(widget));
}

void QCommonStyle_DrawPrimitive(void* ptr, int pe, void* opt, void* p, void* widget){
	static_cast<MyQCommonStyle*>(ptr)->drawPrimitive(static_cast<QStyle::PrimitiveElement>(pe), static_cast<QStyleOption*>(opt), static_cast<QPainter*>(p), static_cast<QWidget*>(widget));
}

void QCommonStyle_DrawPrimitiveDefault(void* ptr, int pe, void* opt, void* p, void* widget){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::drawPrimitive(static_cast<QStyle::PrimitiveElement>(pe), static_cast<QStyleOption*>(opt), static_cast<QPainter*>(p), static_cast<QWidget*>(widget));
}

void QCommonStyle_DrawComplexControl(void* ptr, int cc, void* opt, void* p, void* widget){
	static_cast<MyQCommonStyle*>(ptr)->drawComplexControl(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(opt), static_cast<QPainter*>(p), static_cast<QWidget*>(widget));
}

void QCommonStyle_DrawComplexControlDefault(void* ptr, int cc, void* opt, void* p, void* widget){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::drawComplexControl(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(opt), static_cast<QPainter*>(p), static_cast<QWidget*>(widget));
}

void* QCommonStyle_GeneratedIconPixmap(void* ptr, int iconMode, void* pixmap, void* opt){
	return new QPixmap(static_cast<QCommonStyle*>(ptr)->generatedIconPixmap(static_cast<QIcon::Mode>(iconMode), *static_cast<QPixmap*>(pixmap), static_cast<QStyleOption*>(opt)));
}

int QCommonStyle_HitTestComplexControl(void* ptr, int cc, void* opt, void* pt, void* widget){
	return static_cast<QCommonStyle*>(ptr)->hitTestComplexControl(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(opt), *static_cast<QPoint*>(pt), static_cast<QWidget*>(widget));
}

int QCommonStyle_LayoutSpacing(void* ptr, int control1, int control2, int orientation, void* option, void* widget){
	return static_cast<QCommonStyle*>(ptr)->layoutSpacing(static_cast<QSizePolicy::ControlType>(control1), static_cast<QSizePolicy::ControlType>(control2), static_cast<Qt::Orientation>(orientation), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget));
}

int QCommonStyle_PixelMetric(void* ptr, int m, void* opt, void* widget){
	return static_cast<QCommonStyle*>(ptr)->pixelMetric(static_cast<QStyle::PixelMetric>(m), static_cast<QStyleOption*>(opt), static_cast<QWidget*>(widget));
}

void QCommonStyle_Polish(void* ptr, void* pal){
	static_cast<MyQCommonStyle*>(ptr)->polish(*static_cast<QPalette*>(pal));
}

void QCommonStyle_PolishDefault(void* ptr, void* pal){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::polish(*static_cast<QPalette*>(pal));
}

void* QCommonStyle_SizeFromContents(void* ptr, int ct, void* opt, void* csz, void* widget){
	return new QSize(static_cast<QSize>(static_cast<QCommonStyle*>(ptr)->sizeFromContents(static_cast<QStyle::ContentsType>(ct), static_cast<QStyleOption*>(opt), *static_cast<QSize*>(csz), static_cast<QWidget*>(widget))).width(), static_cast<QSize>(static_cast<QCommonStyle*>(ptr)->sizeFromContents(static_cast<QStyle::ContentsType>(ct), static_cast<QStyleOption*>(opt), *static_cast<QSize*>(csz), static_cast<QWidget*>(widget))).height());
}

void* QCommonStyle_StandardPixmap(void* ptr, int sp, void* option, void* widget){
	return new QPixmap(static_cast<QCommonStyle*>(ptr)->standardPixmap(static_cast<QStyle::StandardPixmap>(sp), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget)));
}

int QCommonStyle_StyleHint(void* ptr, int sh, void* opt, void* widget, void* hret){
	return static_cast<QCommonStyle*>(ptr)->styleHint(static_cast<QStyle::StyleHint>(sh), static_cast<QStyleOption*>(opt), static_cast<QWidget*>(widget), static_cast<QStyleHintReturn*>(hret));
}

void* QCommonStyle_SubControlRect(void* ptr, int cc, void* opt, int sc, void* widget){
	return new QRect(static_cast<QRect>(static_cast<QCommonStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(opt), static_cast<QStyle::SubControl>(sc), static_cast<QWidget*>(widget))).x(), static_cast<QRect>(static_cast<QCommonStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(opt), static_cast<QStyle::SubControl>(sc), static_cast<QWidget*>(widget))).y(), static_cast<QRect>(static_cast<QCommonStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(opt), static_cast<QStyle::SubControl>(sc), static_cast<QWidget*>(widget))).width(), static_cast<QRect>(static_cast<QCommonStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(opt), static_cast<QStyle::SubControl>(sc), static_cast<QWidget*>(widget))).height());
}

void* QCommonStyle_SubElementRect(void* ptr, int sr, void* opt, void* widget){
	return new QRect(static_cast<QRect>(static_cast<QCommonStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(sr), static_cast<QStyleOption*>(opt), static_cast<QWidget*>(widget))).x(), static_cast<QRect>(static_cast<QCommonStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(sr), static_cast<QStyleOption*>(opt), static_cast<QWidget*>(widget))).y(), static_cast<QRect>(static_cast<QCommonStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(sr), static_cast<QStyleOption*>(opt), static_cast<QWidget*>(widget))).width(), static_cast<QRect>(static_cast<QCommonStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(sr), static_cast<QStyleOption*>(opt), static_cast<QWidget*>(widget))).height());
}

void QCommonStyle_Unpolish(void* ptr, void* widget){
	static_cast<MyQCommonStyle*>(ptr)->unpolish(static_cast<QWidget*>(widget));
}

void QCommonStyle_UnpolishDefault(void* ptr, void* widget){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::unpolish(static_cast<QWidget*>(widget));
}

void QCommonStyle_DestroyQCommonStyle(void* ptr){
	static_cast<QCommonStyle*>(ptr)->~QCommonStyle();
}

void QCommonStyle_DrawItemPixmap(void* ptr, void* painter, void* rectangle, int alignment, void* pixmap){
	static_cast<MyQCommonStyle*>(ptr)->drawItemPixmap(static_cast<QPainter*>(painter), *static_cast<QRect*>(rectangle), alignment, *static_cast<QPixmap*>(pixmap));
}

void QCommonStyle_DrawItemPixmapDefault(void* ptr, void* painter, void* rectangle, int alignment, void* pixmap){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::drawItemPixmap(static_cast<QPainter*>(painter), *static_cast<QRect*>(rectangle), alignment, *static_cast<QPixmap*>(pixmap));
}

void QCommonStyle_DrawItemText(void* ptr, void* painter, void* rectangle, int alignment, void* palette, int enabled, char* text, int textRole){
	static_cast<MyQCommonStyle*>(ptr)->drawItemText(static_cast<QPainter*>(painter), *static_cast<QRect*>(rectangle), alignment, *static_cast<QPalette*>(palette), enabled != 0, QString(text), static_cast<QPalette::ColorRole>(textRole));
}

void QCommonStyle_DrawItemTextDefault(void* ptr, void* painter, void* rectangle, int alignment, void* palette, int enabled, char* text, int textRole){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::drawItemText(static_cast<QPainter*>(painter), *static_cast<QRect*>(rectangle), alignment, *static_cast<QPalette*>(palette), enabled != 0, QString(text), static_cast<QPalette::ColorRole>(textRole));
}

void QCommonStyle_TimerEvent(void* ptr, void* event){
	static_cast<MyQCommonStyle*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QCommonStyle_TimerEventDefault(void* ptr, void* event){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::timerEvent(static_cast<QTimerEvent*>(event));
}

void QCommonStyle_ChildEvent(void* ptr, void* event){
	static_cast<MyQCommonStyle*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QCommonStyle_ChildEventDefault(void* ptr, void* event){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::childEvent(static_cast<QChildEvent*>(event));
}

void QCommonStyle_CustomEvent(void* ptr, void* event){
	static_cast<MyQCommonStyle*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QCommonStyle_CustomEventDefault(void* ptr, void* event){
	static_cast<QCommonStyle*>(ptr)->QCommonStyle::customEvent(static_cast<QEvent*>(event));
}

class MyQCompleter: public QCompleter {
public:
	MyQCompleter(QAbstractItemModel *model, QObject *parent) : QCompleter(model, parent) {};
	MyQCompleter(QObject *parent) : QCompleter(parent) {};
	MyQCompleter(const QStringList &list, QObject *parent) : QCompleter(list, parent) {};
	void Signal_Activated(const QString & text) { callbackQCompleterActivated(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void Signal_Highlighted(const QString & text) { callbackQCompleterHighlighted(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQCompleterTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQCompleterChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQCompleterCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QCompleter_CaseSensitivity(void* ptr){
	return static_cast<QCompleter*>(ptr)->caseSensitivity();
}

int QCompleter_CompletionColumn(void* ptr){
	return static_cast<QCompleter*>(ptr)->completionColumn();
}

int QCompleter_CompletionMode(void* ptr){
	return static_cast<QCompleter*>(ptr)->completionMode();
}

char* QCompleter_CompletionPrefix(void* ptr){
	return static_cast<QCompleter*>(ptr)->completionPrefix().toUtf8().data();
}

int QCompleter_CompletionRole(void* ptr){
	return static_cast<QCompleter*>(ptr)->completionRole();
}

int QCompleter_FilterMode(void* ptr){
	return static_cast<QCompleter*>(ptr)->filterMode();
}

int QCompleter_MaxVisibleItems(void* ptr){
	return static_cast<QCompleter*>(ptr)->maxVisibleItems();
}

int QCompleter_ModelSorting(void* ptr){
	return static_cast<QCompleter*>(ptr)->modelSorting();
}

void QCompleter_SetCaseSensitivity(void* ptr, int caseSensitivity){
	static_cast<QCompleter*>(ptr)->setCaseSensitivity(static_cast<Qt::CaseSensitivity>(caseSensitivity));
}

void QCompleter_SetCompletionColumn(void* ptr, int column){
	static_cast<QCompleter*>(ptr)->setCompletionColumn(column);
}

void QCompleter_SetCompletionMode(void* ptr, int mode){
	static_cast<QCompleter*>(ptr)->setCompletionMode(static_cast<QCompleter::CompletionMode>(mode));
}

void QCompleter_SetCompletionPrefix(void* ptr, char* prefix){
	QMetaObject::invokeMethod(static_cast<QCompleter*>(ptr), "setCompletionPrefix", Q_ARG(QString, QString(prefix)));
}

void QCompleter_SetCompletionRole(void* ptr, int role){
	static_cast<QCompleter*>(ptr)->setCompletionRole(role);
}

void QCompleter_SetFilterMode(void* ptr, int filterMode){
	static_cast<QCompleter*>(ptr)->setFilterMode(static_cast<Qt::MatchFlag>(filterMode));
}

void QCompleter_SetMaxVisibleItems(void* ptr, int maxItems){
	static_cast<QCompleter*>(ptr)->setMaxVisibleItems(maxItems);
}

void QCompleter_SetModelSorting(void* ptr, int sorting){
	static_cast<QCompleter*>(ptr)->setModelSorting(static_cast<QCompleter::ModelSorting>(sorting));
}

void QCompleter_SetWrapAround(void* ptr, int wrap){
	QMetaObject::invokeMethod(static_cast<QCompleter*>(ptr), "setWrapAround", Q_ARG(bool, wrap != 0));
}

int QCompleter_WrapAround(void* ptr){
	return static_cast<QCompleter*>(ptr)->wrapAround();
}

void* QCompleter_NewQCompleter2(void* model, void* parent){
	return new MyQCompleter(static_cast<QAbstractItemModel*>(model), static_cast<QObject*>(parent));
}

void* QCompleter_NewQCompleter(void* parent){
	return new MyQCompleter(static_cast<QObject*>(parent));
}

void* QCompleter_NewQCompleter3(char* list, void* parent){
	return new MyQCompleter(QString(list).split("|", QString::SkipEmptyParts), static_cast<QObject*>(parent));
}

void QCompleter_ConnectActivated(void* ptr){
	QObject::connect(static_cast<QCompleter*>(ptr), static_cast<void (QCompleter::*)(const QString &)>(&QCompleter::activated), static_cast<MyQCompleter*>(ptr), static_cast<void (MyQCompleter::*)(const QString &)>(&MyQCompleter::Signal_Activated));;
}

void QCompleter_DisconnectActivated(void* ptr){
	QObject::disconnect(static_cast<QCompleter*>(ptr), static_cast<void (QCompleter::*)(const QString &)>(&QCompleter::activated), static_cast<MyQCompleter*>(ptr), static_cast<void (MyQCompleter::*)(const QString &)>(&MyQCompleter::Signal_Activated));;
}

void QCompleter_Activated(void* ptr, char* text){
	static_cast<QCompleter*>(ptr)->activated(QString(text));
}

void QCompleter_Complete(void* ptr, void* rect){
	QMetaObject::invokeMethod(static_cast<QCompleter*>(ptr), "complete", Q_ARG(QRect, *static_cast<QRect*>(rect)));
}

int QCompleter_CompletionCount(void* ptr){
	return static_cast<QCompleter*>(ptr)->completionCount();
}

void* QCompleter_CompletionModel(void* ptr){
	return static_cast<QCompleter*>(ptr)->completionModel();
}

char* QCompleter_CurrentCompletion(void* ptr){
	return static_cast<QCompleter*>(ptr)->currentCompletion().toUtf8().data();
}

int QCompleter_CurrentRow(void* ptr){
	return static_cast<QCompleter*>(ptr)->currentRow();
}

int QCompleter_Event(void* ptr, void* ev){
	return static_cast<QCompleter*>(ptr)->event(static_cast<QEvent*>(ev));
}

int QCompleter_EventFilter(void* ptr, void* o, void* e){
	return static_cast<QCompleter*>(ptr)->eventFilter(static_cast<QObject*>(o), static_cast<QEvent*>(e));
}

void QCompleter_ConnectHighlighted(void* ptr){
	QObject::connect(static_cast<QCompleter*>(ptr), static_cast<void (QCompleter::*)(const QString &)>(&QCompleter::highlighted), static_cast<MyQCompleter*>(ptr), static_cast<void (MyQCompleter::*)(const QString &)>(&MyQCompleter::Signal_Highlighted));;
}

void QCompleter_DisconnectHighlighted(void* ptr){
	QObject::disconnect(static_cast<QCompleter*>(ptr), static_cast<void (QCompleter::*)(const QString &)>(&QCompleter::highlighted), static_cast<MyQCompleter*>(ptr), static_cast<void (MyQCompleter::*)(const QString &)>(&MyQCompleter::Signal_Highlighted));;
}

void QCompleter_Highlighted(void* ptr, char* text){
	static_cast<QCompleter*>(ptr)->highlighted(QString(text));
}

void* QCompleter_Model(void* ptr){
	return static_cast<QCompleter*>(ptr)->model();
}

char* QCompleter_PathFromIndex(void* ptr, void* index){
	return static_cast<QCompleter*>(ptr)->pathFromIndex(*static_cast<QModelIndex*>(index)).toUtf8().data();
}

void* QCompleter_Popup(void* ptr){
	return static_cast<QCompleter*>(ptr)->popup();
}

int QCompleter_SetCurrentRow(void* ptr, int row){
	return static_cast<QCompleter*>(ptr)->setCurrentRow(row);
}

void QCompleter_SetModel(void* ptr, void* model){
	static_cast<QCompleter*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QCompleter_SetPopup(void* ptr, void* popup){
	static_cast<QCompleter*>(ptr)->setPopup(static_cast<QAbstractItemView*>(popup));
}

void QCompleter_SetWidget(void* ptr, void* widget){
	static_cast<QCompleter*>(ptr)->setWidget(static_cast<QWidget*>(widget));
}

char* QCompleter_SplitPath(void* ptr, char* path){
	return static_cast<QCompleter*>(ptr)->splitPath(QString(path)).join("|").toUtf8().data();
}

void* QCompleter_Widget(void* ptr){
	return static_cast<QCompleter*>(ptr)->widget();
}

void QCompleter_DestroyQCompleter(void* ptr){
	static_cast<QCompleter*>(ptr)->~QCompleter();
}

void QCompleter_TimerEvent(void* ptr, void* event){
	static_cast<MyQCompleter*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QCompleter_TimerEventDefault(void* ptr, void* event){
	static_cast<QCompleter*>(ptr)->QCompleter::timerEvent(static_cast<QTimerEvent*>(event));
}

void QCompleter_ChildEvent(void* ptr, void* event){
	static_cast<MyQCompleter*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QCompleter_ChildEventDefault(void* ptr, void* event){
	static_cast<QCompleter*>(ptr)->QCompleter::childEvent(static_cast<QChildEvent*>(event));
}

void QCompleter_CustomEvent(void* ptr, void* event){
	static_cast<MyQCompleter*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QCompleter_CustomEventDefault(void* ptr, void* event){
	static_cast<QCompleter*>(ptr)->QCompleter::customEvent(static_cast<QEvent*>(event));
}

class MyQDataWidgetMapper: public QDataWidgetMapper {
public:
	MyQDataWidgetMapper(QObject *parent) : QDataWidgetMapper(parent) {};
	void setCurrentIndex(int index) { if (!callbackQDataWidgetMapperSetCurrentIndex(this, this->objectName().toUtf8().data(), index)) { QDataWidgetMapper::setCurrentIndex(index); }; };
	void Signal_CurrentIndexChanged(int index) { callbackQDataWidgetMapperCurrentIndexChanged(this, this->objectName().toUtf8().data(), index); };
	void timerEvent(QTimerEvent * event) { callbackQDataWidgetMapperTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQDataWidgetMapperChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQDataWidgetMapperCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QDataWidgetMapper_CurrentIndex(void* ptr){
	return static_cast<QDataWidgetMapper*>(ptr)->currentIndex();
}

int QDataWidgetMapper_Orientation(void* ptr){
	return static_cast<QDataWidgetMapper*>(ptr)->orientation();
}

void QDataWidgetMapper_SetCurrentIndex(void* ptr, int index){
	QMetaObject::invokeMethod(static_cast<MyQDataWidgetMapper*>(ptr), "setCurrentIndex", Q_ARG(int, index));
}

void QDataWidgetMapper_SetCurrentIndexDefault(void* ptr, int index){
	QMetaObject::invokeMethod(static_cast<QDataWidgetMapper*>(ptr), "setCurrentIndex", Q_ARG(int, index));
}

void QDataWidgetMapper_SetOrientation(void* ptr, int aOrientation){
	static_cast<QDataWidgetMapper*>(ptr)->setOrientation(static_cast<Qt::Orientation>(aOrientation));
}

void QDataWidgetMapper_SetSubmitPolicy(void* ptr, int policy){
	static_cast<QDataWidgetMapper*>(ptr)->setSubmitPolicy(static_cast<QDataWidgetMapper::SubmitPolicy>(policy));
}

int QDataWidgetMapper_SubmitPolicy(void* ptr){
	return static_cast<QDataWidgetMapper*>(ptr)->submitPolicy();
}

void* QDataWidgetMapper_NewQDataWidgetMapper(void* parent){
	return new MyQDataWidgetMapper(static_cast<QObject*>(parent));
}

void QDataWidgetMapper_AddMapping(void* ptr, void* widget, int section){
	static_cast<QDataWidgetMapper*>(ptr)->addMapping(static_cast<QWidget*>(widget), section);
}

void QDataWidgetMapper_AddMapping2(void* ptr, void* widget, int section, char* propertyName){
	static_cast<QDataWidgetMapper*>(ptr)->addMapping(static_cast<QWidget*>(widget), section, QByteArray(propertyName));
}

void QDataWidgetMapper_ClearMapping(void* ptr){
	static_cast<QDataWidgetMapper*>(ptr)->clearMapping();
}

void QDataWidgetMapper_ConnectCurrentIndexChanged(void* ptr){
	QObject::connect(static_cast<QDataWidgetMapper*>(ptr), static_cast<void (QDataWidgetMapper::*)(int)>(&QDataWidgetMapper::currentIndexChanged), static_cast<MyQDataWidgetMapper*>(ptr), static_cast<void (MyQDataWidgetMapper::*)(int)>(&MyQDataWidgetMapper::Signal_CurrentIndexChanged));;
}

void QDataWidgetMapper_DisconnectCurrentIndexChanged(void* ptr){
	QObject::disconnect(static_cast<QDataWidgetMapper*>(ptr), static_cast<void (QDataWidgetMapper::*)(int)>(&QDataWidgetMapper::currentIndexChanged), static_cast<MyQDataWidgetMapper*>(ptr), static_cast<void (MyQDataWidgetMapper::*)(int)>(&MyQDataWidgetMapper::Signal_CurrentIndexChanged));;
}

void QDataWidgetMapper_CurrentIndexChanged(void* ptr, int index){
	static_cast<QDataWidgetMapper*>(ptr)->currentIndexChanged(index);
}

void* QDataWidgetMapper_ItemDelegate(void* ptr){
	return static_cast<QDataWidgetMapper*>(ptr)->itemDelegate();
}

char* QDataWidgetMapper_MappedPropertyName(void* ptr, void* widget){
	return QString(static_cast<QDataWidgetMapper*>(ptr)->mappedPropertyName(static_cast<QWidget*>(widget))).toUtf8().data();
}

int QDataWidgetMapper_MappedSection(void* ptr, void* widget){
	return static_cast<QDataWidgetMapper*>(ptr)->mappedSection(static_cast<QWidget*>(widget));
}

void* QDataWidgetMapper_MappedWidgetAt(void* ptr, int section){
	return static_cast<QDataWidgetMapper*>(ptr)->mappedWidgetAt(section);
}

void* QDataWidgetMapper_Model(void* ptr){
	return static_cast<QDataWidgetMapper*>(ptr)->model();
}

void QDataWidgetMapper_RemoveMapping(void* ptr, void* widget){
	static_cast<QDataWidgetMapper*>(ptr)->removeMapping(static_cast<QWidget*>(widget));
}

void QDataWidgetMapper_Revert(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDataWidgetMapper*>(ptr), "revert");
}

void QDataWidgetMapper_SetCurrentModelIndex(void* ptr, void* index){
	QMetaObject::invokeMethod(static_cast<QDataWidgetMapper*>(ptr), "setCurrentModelIndex", Q_ARG(QModelIndex, *static_cast<QModelIndex*>(index)));
}

void QDataWidgetMapper_SetItemDelegate(void* ptr, void* delegate){
	static_cast<QDataWidgetMapper*>(ptr)->setItemDelegate(static_cast<QAbstractItemDelegate*>(delegate));
}

void QDataWidgetMapper_SetModel(void* ptr, void* model){
	static_cast<QDataWidgetMapper*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QDataWidgetMapper_SetRootIndex(void* ptr, void* index){
	static_cast<QDataWidgetMapper*>(ptr)->setRootIndex(*static_cast<QModelIndex*>(index));
}

int QDataWidgetMapper_Submit(void* ptr){
	return QMetaObject::invokeMethod(static_cast<QDataWidgetMapper*>(ptr), "submit");
}

void QDataWidgetMapper_ToFirst(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDataWidgetMapper*>(ptr), "toFirst");
}

void QDataWidgetMapper_ToLast(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDataWidgetMapper*>(ptr), "toLast");
}

void QDataWidgetMapper_ToNext(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDataWidgetMapper*>(ptr), "toNext");
}

void QDataWidgetMapper_ToPrevious(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDataWidgetMapper*>(ptr), "toPrevious");
}

void QDataWidgetMapper_DestroyQDataWidgetMapper(void* ptr){
	static_cast<QDataWidgetMapper*>(ptr)->~QDataWidgetMapper();
}

void QDataWidgetMapper_TimerEvent(void* ptr, void* event){
	static_cast<MyQDataWidgetMapper*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QDataWidgetMapper_TimerEventDefault(void* ptr, void* event){
	static_cast<QDataWidgetMapper*>(ptr)->QDataWidgetMapper::timerEvent(static_cast<QTimerEvent*>(event));
}

void QDataWidgetMapper_ChildEvent(void* ptr, void* event){
	static_cast<MyQDataWidgetMapper*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QDataWidgetMapper_ChildEventDefault(void* ptr, void* event){
	static_cast<QDataWidgetMapper*>(ptr)->QDataWidgetMapper::childEvent(static_cast<QChildEvent*>(event));
}

void QDataWidgetMapper_CustomEvent(void* ptr, void* event){
	static_cast<MyQDataWidgetMapper*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QDataWidgetMapper_CustomEventDefault(void* ptr, void* event){
	static_cast<QDataWidgetMapper*>(ptr)->QDataWidgetMapper::customEvent(static_cast<QEvent*>(event));
}

void* QDateEdit_NewQDateEdit(void* parent){
	return new QDateEdit(static_cast<QWidget*>(parent));
}

void* QDateEdit_NewQDateEdit2(void* date, void* parent){
	return new QDateEdit(*static_cast<QDate*>(date), static_cast<QWidget*>(parent));
}

void QDateEdit_DestroyQDateEdit(void* ptr){
	static_cast<QDateEdit*>(ptr)->~QDateEdit();
}

void QDateEdit_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDateEdit*>(ptr), "clear");
}

void QDateEdit_ClearDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDateEdit*>(ptr), "clear");
}

void QDateEdit_FocusInEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDateEdit_FocusInEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDateEdit_KeyPressEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDateEdit_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDateEdit_MousePressEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDateEdit_MousePressEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDateEdit_PaintEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QDateEdit_PaintEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::paintEvent(static_cast<QPaintEvent*>(event));
}

void QDateEdit_StepBy(void* ptr, int steps){
	static_cast<QDateEdit*>(ptr)->stepBy(steps);
}

void QDateEdit_StepByDefault(void* ptr, int steps){
	static_cast<QDateEdit*>(ptr)->QDateEdit::stepBy(steps);
}

void QDateEdit_WheelEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDateEdit_WheelEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDateEdit_ChangeEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QDateEdit_ChangeEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::changeEvent(static_cast<QEvent*>(event));
}

void QDateEdit_CloseEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QDateEdit_CloseEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::closeEvent(static_cast<QCloseEvent*>(event));
}

void QDateEdit_ContextMenuEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDateEdit_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDateEdit_FocusOutEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDateEdit_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDateEdit_HideEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QDateEdit_HideEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::hideEvent(static_cast<QHideEvent*>(event));
}

void QDateEdit_KeyReleaseEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDateEdit_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDateEdit_MouseMoveEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDateEdit_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDateEdit_MouseReleaseEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDateEdit_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDateEdit_ResizeEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDateEdit_ResizeEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDateEdit_ShowEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QDateEdit_ShowEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::showEvent(static_cast<QShowEvent*>(event));
}

void QDateEdit_TimerEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QDateEdit_TimerEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::timerEvent(static_cast<QTimerEvent*>(event));
}

void QDateEdit_ActionEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QDateEdit_ActionEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::actionEvent(static_cast<QActionEvent*>(event));
}

void QDateEdit_DragEnterEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDateEdit_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDateEdit_DragLeaveEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDateEdit_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDateEdit_DragMoveEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDateEdit_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDateEdit_DropEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QDateEdit_DropEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::dropEvent(static_cast<QDropEvent*>(event));
}

void QDateEdit_EnterEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QDateEdit_EnterEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::enterEvent(static_cast<QEvent*>(event));
}

void QDateEdit_LeaveEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QDateEdit_LeaveEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::leaveEvent(static_cast<QEvent*>(event));
}

void QDateEdit_MoveEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QDateEdit_MoveEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::moveEvent(static_cast<QMoveEvent*>(event));
}

void QDateEdit_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDateEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDateEdit_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDateEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDateEdit_InitPainter(void* ptr, void* painter){
	static_cast<QDateEdit*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QDateEdit_InitPainterDefault(void* ptr, void* painter){
	static_cast<QDateEdit*>(ptr)->QDateEdit::initPainter(static_cast<QPainter*>(painter));
}

void QDateEdit_InputMethodEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDateEdit_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDateEdit_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDateEdit_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDateEdit_TabletEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDateEdit_TabletEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDateEdit_ChildEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QDateEdit_ChildEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::childEvent(static_cast<QChildEvent*>(event));
}

void QDateEdit_CustomEvent(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QDateEdit_CustomEventDefault(void* ptr, void* event){
	static_cast<QDateEdit*>(ptr)->QDateEdit::customEvent(static_cast<QEvent*>(event));
}

class MyQDateTimeEdit: public QDateTimeEdit {
public:
	MyQDateTimeEdit(const QDate &date, QWidget *parent) : QDateTimeEdit(date, parent) {};
	MyQDateTimeEdit(const QTime &time, QWidget *parent) : QDateTimeEdit(time, parent) {};
	MyQDateTimeEdit(QWidget *parent) : QDateTimeEdit(parent) {};
	MyQDateTimeEdit(const QDateTime &datetime, QWidget *parent) : QDateTimeEdit(datetime, parent) {};
	void clear() { if (!callbackQDateTimeEditClear(this, this->objectName().toUtf8().data())) { QDateTimeEdit::clear(); }; };
	void Signal_DateTimeChanged(const QDateTime & datetime) { callbackQDateTimeEditDateTimeChanged(this, this->objectName().toUtf8().data(), new QDateTime(datetime)); };
	void focusInEvent(QFocusEvent * event) { callbackQDateTimeEditFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQDateTimeEditKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQDateTimeEditMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQDateTimeEditPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void stepBy(int steps) { callbackQDateTimeEditStepBy(this, this->objectName().toUtf8().data(), steps); };
	void wheelEvent(QWheelEvent * event) { callbackQDateTimeEditWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQDateTimeEditChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQDateTimeEditCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQDateTimeEditContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQDateTimeEditFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQDateTimeEditHideEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQDateTimeEditKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQDateTimeEditMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQDateTimeEditMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQDateTimeEditResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void showEvent(QShowEvent * event) { callbackQDateTimeEditShowEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQDateTimeEditTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQDateTimeEditActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQDateTimeEditDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQDateTimeEditDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQDateTimeEditDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQDateTimeEditDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQDateTimeEditEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQDateTimeEditLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQDateTimeEditMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQDateTimeEditSetVisible(this, this->objectName().toUtf8().data(), visible)) { QDateTimeEdit::setVisible(visible); }; };
	void initPainter(QPainter * painter) const { callbackQDateTimeEditInitPainter(const_cast<MyQDateTimeEdit*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQDateTimeEditInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQDateTimeEditMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQDateTimeEditTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQDateTimeEditChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQDateTimeEditCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QDateTimeEdit_NewQDateTimeEdit3(void* date, void* parent){
	return new MyQDateTimeEdit(*static_cast<QDate*>(date), static_cast<QWidget*>(parent));
}

void* QDateTimeEdit_NewQDateTimeEdit4(void* time, void* parent){
	return new MyQDateTimeEdit(*static_cast<QTime*>(time), static_cast<QWidget*>(parent));
}

int QDateTimeEdit_CalendarPopup(void* ptr){
	return static_cast<QDateTimeEdit*>(ptr)->calendarPopup();
}

void QDateTimeEdit_ClearMaximumDate(void* ptr){
	static_cast<QDateTimeEdit*>(ptr)->clearMaximumDate();
}

void QDateTimeEdit_ClearMaximumDateTime(void* ptr){
	static_cast<QDateTimeEdit*>(ptr)->clearMaximumDateTime();
}

void QDateTimeEdit_ClearMaximumTime(void* ptr){
	static_cast<QDateTimeEdit*>(ptr)->clearMaximumTime();
}

void QDateTimeEdit_ClearMinimumDate(void* ptr){
	static_cast<QDateTimeEdit*>(ptr)->clearMinimumDate();
}

void QDateTimeEdit_ClearMinimumDateTime(void* ptr){
	static_cast<QDateTimeEdit*>(ptr)->clearMinimumDateTime();
}

void QDateTimeEdit_ClearMinimumTime(void* ptr){
	static_cast<QDateTimeEdit*>(ptr)->clearMinimumTime();
}

int QDateTimeEdit_CurrentSection(void* ptr){
	return static_cast<QDateTimeEdit*>(ptr)->currentSection();
}

int QDateTimeEdit_CurrentSectionIndex(void* ptr){
	return static_cast<QDateTimeEdit*>(ptr)->currentSectionIndex();
}

void* QDateTimeEdit_DateTime(void* ptr){
	return new QDateTime(static_cast<QDateTimeEdit*>(ptr)->dateTime());
}

char* QDateTimeEdit_DisplayFormat(void* ptr){
	return static_cast<QDateTimeEdit*>(ptr)->displayFormat().toUtf8().data();
}

int QDateTimeEdit_DisplayedSections(void* ptr){
	return static_cast<QDateTimeEdit*>(ptr)->displayedSections();
}

void* QDateTimeEdit_MaximumDateTime(void* ptr){
	return new QDateTime(static_cast<QDateTimeEdit*>(ptr)->maximumDateTime());
}

void* QDateTimeEdit_MinimumDateTime(void* ptr){
	return new QDateTime(static_cast<QDateTimeEdit*>(ptr)->minimumDateTime());
}

int QDateTimeEdit_SectionCount(void* ptr){
	return static_cast<QDateTimeEdit*>(ptr)->sectionCount();
}

char* QDateTimeEdit_SectionText(void* ptr, int section){
	return static_cast<QDateTimeEdit*>(ptr)->sectionText(static_cast<QDateTimeEdit::Section>(section)).toUtf8().data();
}

void QDateTimeEdit_SetCalendarPopup(void* ptr, int enable){
	static_cast<QDateTimeEdit*>(ptr)->setCalendarPopup(enable != 0);
}

void QDateTimeEdit_SetCurrentSection(void* ptr, int section){
	static_cast<QDateTimeEdit*>(ptr)->setCurrentSection(static_cast<QDateTimeEdit::Section>(section));
}

void QDateTimeEdit_SetCurrentSectionIndex(void* ptr, int index){
	static_cast<QDateTimeEdit*>(ptr)->setCurrentSectionIndex(index);
}

void QDateTimeEdit_SetDate(void* ptr, void* date){
	QMetaObject::invokeMethod(static_cast<QDateTimeEdit*>(ptr), "setDate", Q_ARG(QDate, *static_cast<QDate*>(date)));
}

void QDateTimeEdit_SetDateTime(void* ptr, void* dateTime){
	QMetaObject::invokeMethod(static_cast<QDateTimeEdit*>(ptr), "setDateTime", Q_ARG(QDateTime, *static_cast<QDateTime*>(dateTime)));
}

void QDateTimeEdit_SetDisplayFormat(void* ptr, char* format){
	static_cast<QDateTimeEdit*>(ptr)->setDisplayFormat(QString(format));
}

void QDateTimeEdit_SetMaximumDate(void* ptr, void* max){
	static_cast<QDateTimeEdit*>(ptr)->setMaximumDate(*static_cast<QDate*>(max));
}

void QDateTimeEdit_SetMaximumDateTime(void* ptr, void* dt){
	static_cast<QDateTimeEdit*>(ptr)->setMaximumDateTime(*static_cast<QDateTime*>(dt));
}

void QDateTimeEdit_SetMaximumTime(void* ptr, void* max){
	static_cast<QDateTimeEdit*>(ptr)->setMaximumTime(*static_cast<QTime*>(max));
}

void QDateTimeEdit_SetMinimumDate(void* ptr, void* min){
	static_cast<QDateTimeEdit*>(ptr)->setMinimumDate(*static_cast<QDate*>(min));
}

void QDateTimeEdit_SetMinimumDateTime(void* ptr, void* dt){
	static_cast<QDateTimeEdit*>(ptr)->setMinimumDateTime(*static_cast<QDateTime*>(dt));
}

void QDateTimeEdit_SetMinimumTime(void* ptr, void* min){
	static_cast<QDateTimeEdit*>(ptr)->setMinimumTime(*static_cast<QTime*>(min));
}

void QDateTimeEdit_SetTime(void* ptr, void* time){
	QMetaObject::invokeMethod(static_cast<QDateTimeEdit*>(ptr), "setTime", Q_ARG(QTime, *static_cast<QTime*>(time)));
}

void QDateTimeEdit_SetTimeSpec(void* ptr, int spec){
	static_cast<QDateTimeEdit*>(ptr)->setTimeSpec(static_cast<Qt::TimeSpec>(spec));
}

int QDateTimeEdit_TimeSpec(void* ptr){
	return static_cast<QDateTimeEdit*>(ptr)->timeSpec();
}

void* QDateTimeEdit_NewQDateTimeEdit(void* parent){
	return new MyQDateTimeEdit(static_cast<QWidget*>(parent));
}

void* QDateTimeEdit_NewQDateTimeEdit2(void* datetime, void* parent){
	return new MyQDateTimeEdit(*static_cast<QDateTime*>(datetime), static_cast<QWidget*>(parent));
}

void* QDateTimeEdit_CalendarWidget(void* ptr){
	return static_cast<QDateTimeEdit*>(ptr)->calendarWidget();
}

void QDateTimeEdit_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQDateTimeEdit*>(ptr), "clear");
}

void QDateTimeEdit_ClearDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDateTimeEdit*>(ptr), "clear");
}

void QDateTimeEdit_ConnectDateTimeChanged(void* ptr){
	QObject::connect(static_cast<QDateTimeEdit*>(ptr), static_cast<void (QDateTimeEdit::*)(const QDateTime &)>(&QDateTimeEdit::dateTimeChanged), static_cast<MyQDateTimeEdit*>(ptr), static_cast<void (MyQDateTimeEdit::*)(const QDateTime &)>(&MyQDateTimeEdit::Signal_DateTimeChanged));;
}

void QDateTimeEdit_DisconnectDateTimeChanged(void* ptr){
	QObject::disconnect(static_cast<QDateTimeEdit*>(ptr), static_cast<void (QDateTimeEdit::*)(const QDateTime &)>(&QDateTimeEdit::dateTimeChanged), static_cast<MyQDateTimeEdit*>(ptr), static_cast<void (MyQDateTimeEdit::*)(const QDateTime &)>(&MyQDateTimeEdit::Signal_DateTimeChanged));;
}

void QDateTimeEdit_DateTimeChanged(void* ptr, void* datetime){
	static_cast<QDateTimeEdit*>(ptr)->dateTimeChanged(*static_cast<QDateTime*>(datetime));
}

void* QDateTimeEdit_DateTimeFromText(void* ptr, char* text){
	return new QDateTime(static_cast<QDateTimeEdit*>(ptr)->dateTimeFromText(QString(text)));
}

int QDateTimeEdit_Event(void* ptr, void* event){
	return static_cast<QDateTimeEdit*>(ptr)->event(static_cast<QEvent*>(event));
}

void QDateTimeEdit_FocusInEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDateTimeEdit_FocusInEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::focusInEvent(static_cast<QFocusEvent*>(event));
}

int QDateTimeEdit_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QDateTimeEdit*>(ptr)->focusNextPrevChild(next != 0);
}

void QDateTimeEdit_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDateTimeEdit_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDateTimeEdit_MousePressEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDateTimeEdit_MousePressEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDateTimeEdit_PaintEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QDateTimeEdit_PaintEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::paintEvent(static_cast<QPaintEvent*>(event));
}

int QDateTimeEdit_SectionAt(void* ptr, int index){
	return static_cast<QDateTimeEdit*>(ptr)->sectionAt(index);
}

void QDateTimeEdit_SetCalendarWidget(void* ptr, void* calendarWidget){
	static_cast<QDateTimeEdit*>(ptr)->setCalendarWidget(static_cast<QCalendarWidget*>(calendarWidget));
}

void QDateTimeEdit_SetDateRange(void* ptr, void* min, void* max){
	static_cast<QDateTimeEdit*>(ptr)->setDateRange(*static_cast<QDate*>(min), *static_cast<QDate*>(max));
}

void QDateTimeEdit_SetDateTimeRange(void* ptr, void* min, void* max){
	static_cast<QDateTimeEdit*>(ptr)->setDateTimeRange(*static_cast<QDateTime*>(min), *static_cast<QDateTime*>(max));
}

void QDateTimeEdit_SetSelectedSection(void* ptr, int section){
	static_cast<QDateTimeEdit*>(ptr)->setSelectedSection(static_cast<QDateTimeEdit::Section>(section));
}

void QDateTimeEdit_SetTimeRange(void* ptr, void* min, void* max){
	static_cast<QDateTimeEdit*>(ptr)->setTimeRange(*static_cast<QTime*>(min), *static_cast<QTime*>(max));
}

void* QDateTimeEdit_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QDateTimeEdit*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QDateTimeEdit*>(ptr)->sizeHint()).height());
}

void QDateTimeEdit_StepBy(void* ptr, int steps){
	static_cast<MyQDateTimeEdit*>(ptr)->stepBy(steps);
}

void QDateTimeEdit_StepByDefault(void* ptr, int steps){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::stepBy(steps);
}

int QDateTimeEdit_StepEnabled(void* ptr){
	return static_cast<QDateTimeEdit*>(ptr)->stepEnabled();
}

char* QDateTimeEdit_TextFromDateTime(void* ptr, void* dateTime){
	return static_cast<QDateTimeEdit*>(ptr)->textFromDateTime(*static_cast<QDateTime*>(dateTime)).toUtf8().data();
}

void QDateTimeEdit_WheelEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDateTimeEdit_WheelEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDateTimeEdit_DestroyQDateTimeEdit(void* ptr){
	static_cast<QDateTimeEdit*>(ptr)->~QDateTimeEdit();
}

void QDateTimeEdit_ChangeEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QDateTimeEdit_ChangeEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::changeEvent(static_cast<QEvent*>(event));
}

void QDateTimeEdit_CloseEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QDateTimeEdit_CloseEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::closeEvent(static_cast<QCloseEvent*>(event));
}

void QDateTimeEdit_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDateTimeEdit_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDateTimeEdit_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDateTimeEdit_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDateTimeEdit_HideEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QDateTimeEdit_HideEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::hideEvent(static_cast<QHideEvent*>(event));
}

void QDateTimeEdit_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDateTimeEdit_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDateTimeEdit_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDateTimeEdit_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDateTimeEdit_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDateTimeEdit_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDateTimeEdit_ResizeEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDateTimeEdit_ResizeEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDateTimeEdit_ShowEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QDateTimeEdit_ShowEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::showEvent(static_cast<QShowEvent*>(event));
}

void QDateTimeEdit_TimerEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QDateTimeEdit_TimerEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::timerEvent(static_cast<QTimerEvent*>(event));
}

void QDateTimeEdit_ActionEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QDateTimeEdit_ActionEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::actionEvent(static_cast<QActionEvent*>(event));
}

void QDateTimeEdit_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDateTimeEdit_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDateTimeEdit_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDateTimeEdit_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDateTimeEdit_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDateTimeEdit_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDateTimeEdit_DropEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QDateTimeEdit_DropEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::dropEvent(static_cast<QDropEvent*>(event));
}

void QDateTimeEdit_EnterEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QDateTimeEdit_EnterEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::enterEvent(static_cast<QEvent*>(event));
}

void QDateTimeEdit_LeaveEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QDateTimeEdit_LeaveEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::leaveEvent(static_cast<QEvent*>(event));
}

void QDateTimeEdit_MoveEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QDateTimeEdit_MoveEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::moveEvent(static_cast<QMoveEvent*>(event));
}

void QDateTimeEdit_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQDateTimeEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDateTimeEdit_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDateTimeEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDateTimeEdit_InitPainter(void* ptr, void* painter){
	static_cast<MyQDateTimeEdit*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QDateTimeEdit_InitPainterDefault(void* ptr, void* painter){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::initPainter(static_cast<QPainter*>(painter));
}

void QDateTimeEdit_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDateTimeEdit_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDateTimeEdit_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDateTimeEdit_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDateTimeEdit_TabletEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDateTimeEdit_TabletEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDateTimeEdit_ChildEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QDateTimeEdit_ChildEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::childEvent(static_cast<QChildEvent*>(event));
}

void QDateTimeEdit_CustomEvent(void* ptr, void* event){
	static_cast<MyQDateTimeEdit*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QDateTimeEdit_CustomEventDefault(void* ptr, void* event){
	static_cast<QDateTimeEdit*>(ptr)->QDateTimeEdit::customEvent(static_cast<QEvent*>(event));
}

class MyQDesktopWidget: public QDesktopWidget {
public:
	void resizeEvent(QResizeEvent * event) { callbackQDesktopWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_Resized(int screen) { callbackQDesktopWidgetResized(this, this->objectName().toUtf8().data(), screen); };
	void Signal_ScreenCountChanged(int newCount) { callbackQDesktopWidgetScreenCountChanged(this, this->objectName().toUtf8().data(), newCount); };
	void Signal_WorkAreaResized(int screen) { callbackQDesktopWidgetWorkAreaResized(this, this->objectName().toUtf8().data(), screen); };
	void actionEvent(QActionEvent * event) { callbackQDesktopWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQDesktopWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQDesktopWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQDesktopWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQDesktopWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQDesktopWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQDesktopWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQDesktopWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQDesktopWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQDesktopWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQDesktopWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQDesktopWidgetPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQDesktopWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QDesktopWidget::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQDesktopWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQDesktopWidgetChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQDesktopWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQDesktopWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQDesktopWidgetInitPainter(const_cast<MyQDesktopWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQDesktopWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQDesktopWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQDesktopWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQDesktopWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQDesktopWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQDesktopWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQDesktopWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQDesktopWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQDesktopWidgetWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQDesktopWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQDesktopWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQDesktopWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QDesktopWidget_AvailableGeometry2(void* ptr, void* widget){
	return new QRect(static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(static_cast<QWidget*>(widget))).x(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(static_cast<QWidget*>(widget))).y(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(static_cast<QWidget*>(widget))).width(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(static_cast<QWidget*>(widget))).height());
}

void* QDesktopWidget_AvailableGeometry(void* ptr, int screen){
	return new QRect(static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(screen)).x(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(screen)).y(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(screen)).width(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(screen)).height());
}

int QDesktopWidget_IsVirtualDesktop(void* ptr){
	return static_cast<QDesktopWidget*>(ptr)->isVirtualDesktop();
}

int QDesktopWidget_PrimaryScreen(void* ptr){
	return static_cast<QDesktopWidget*>(ptr)->primaryScreen();
}

void QDesktopWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDesktopWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::resizeEvent(static_cast<QResizeEvent*>(event));
}

void* QDesktopWidget_Screen(void* ptr, int screen){
	return static_cast<QDesktopWidget*>(ptr)->screen(screen);
}

void* QDesktopWidget_ScreenGeometry2(void* ptr, void* widget){
	return new QRect(static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(static_cast<QWidget*>(widget))).x(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(static_cast<QWidget*>(widget))).y(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(static_cast<QWidget*>(widget))).width(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(static_cast<QWidget*>(widget))).height());
}

void* QDesktopWidget_ScreenGeometry(void* ptr, int screen){
	return new QRect(static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(screen)).x(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(screen)).y(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(screen)).width(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(screen)).height());
}

int QDesktopWidget_ScreenNumber2(void* ptr, void* point){
	return static_cast<QDesktopWidget*>(ptr)->screenNumber(*static_cast<QPoint*>(point));
}

int QDesktopWidget_ScreenNumber(void* ptr, void* widget){
	return static_cast<QDesktopWidget*>(ptr)->screenNumber(static_cast<QWidget*>(widget));
}

void* QDesktopWidget_AvailableGeometry3(void* ptr, void* p){
	return new QRect(static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(*static_cast<QPoint*>(p))).x(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(*static_cast<QPoint*>(p))).y(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(*static_cast<QPoint*>(p))).width(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->availableGeometry(*static_cast<QPoint*>(p))).height());
}

void QDesktopWidget_ConnectResized(void* ptr){
	QObject::connect(static_cast<QDesktopWidget*>(ptr), static_cast<void (QDesktopWidget::*)(int)>(&QDesktopWidget::resized), static_cast<MyQDesktopWidget*>(ptr), static_cast<void (MyQDesktopWidget::*)(int)>(&MyQDesktopWidget::Signal_Resized));;
}

void QDesktopWidget_DisconnectResized(void* ptr){
	QObject::disconnect(static_cast<QDesktopWidget*>(ptr), static_cast<void (QDesktopWidget::*)(int)>(&QDesktopWidget::resized), static_cast<MyQDesktopWidget*>(ptr), static_cast<void (MyQDesktopWidget::*)(int)>(&MyQDesktopWidget::Signal_Resized));;
}

void QDesktopWidget_Resized(void* ptr, int screen){
	static_cast<QDesktopWidget*>(ptr)->resized(screen);
}

int QDesktopWidget_ScreenCount(void* ptr){
	return static_cast<QDesktopWidget*>(ptr)->screenCount();
}

void QDesktopWidget_ConnectScreenCountChanged(void* ptr){
	QObject::connect(static_cast<QDesktopWidget*>(ptr), static_cast<void (QDesktopWidget::*)(int)>(&QDesktopWidget::screenCountChanged), static_cast<MyQDesktopWidget*>(ptr), static_cast<void (MyQDesktopWidget::*)(int)>(&MyQDesktopWidget::Signal_ScreenCountChanged));;
}

void QDesktopWidget_DisconnectScreenCountChanged(void* ptr){
	QObject::disconnect(static_cast<QDesktopWidget*>(ptr), static_cast<void (QDesktopWidget::*)(int)>(&QDesktopWidget::screenCountChanged), static_cast<MyQDesktopWidget*>(ptr), static_cast<void (MyQDesktopWidget::*)(int)>(&MyQDesktopWidget::Signal_ScreenCountChanged));;
}

void QDesktopWidget_ScreenCountChanged(void* ptr, int newCount){
	static_cast<QDesktopWidget*>(ptr)->screenCountChanged(newCount);
}

void* QDesktopWidget_ScreenGeometry3(void* ptr, void* p){
	return new QRect(static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(*static_cast<QPoint*>(p))).x(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(*static_cast<QPoint*>(p))).y(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(*static_cast<QPoint*>(p))).width(), static_cast<QRect>(static_cast<QDesktopWidget*>(ptr)->screenGeometry(*static_cast<QPoint*>(p))).height());
}

void QDesktopWidget_ConnectWorkAreaResized(void* ptr){
	QObject::connect(static_cast<QDesktopWidget*>(ptr), static_cast<void (QDesktopWidget::*)(int)>(&QDesktopWidget::workAreaResized), static_cast<MyQDesktopWidget*>(ptr), static_cast<void (MyQDesktopWidget::*)(int)>(&MyQDesktopWidget::Signal_WorkAreaResized));;
}

void QDesktopWidget_DisconnectWorkAreaResized(void* ptr){
	QObject::disconnect(static_cast<QDesktopWidget*>(ptr), static_cast<void (QDesktopWidget::*)(int)>(&QDesktopWidget::workAreaResized), static_cast<MyQDesktopWidget*>(ptr), static_cast<void (MyQDesktopWidget::*)(int)>(&MyQDesktopWidget::Signal_WorkAreaResized));;
}

void QDesktopWidget_WorkAreaResized(void* ptr, int screen){
	static_cast<QDesktopWidget*>(ptr)->workAreaResized(screen);
}

void QDesktopWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QDesktopWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QDesktopWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDesktopWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDesktopWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDesktopWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDesktopWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDesktopWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDesktopWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QDesktopWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::dropEvent(static_cast<QDropEvent*>(event));
}

void QDesktopWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QDesktopWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::enterEvent(static_cast<QEvent*>(event));
}

void QDesktopWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDesktopWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDesktopWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDesktopWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDesktopWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QDesktopWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QDesktopWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QDesktopWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::leaveEvent(static_cast<QEvent*>(event));
}

void QDesktopWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QDesktopWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void QDesktopWidget_PaintEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QDesktopWidget_PaintEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::paintEvent(static_cast<QPaintEvent*>(event));
}

void QDesktopWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQDesktopWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDesktopWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDesktopWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDesktopWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QDesktopWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::showEvent(static_cast<QShowEvent*>(event));
}

void QDesktopWidget_ChangeEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QDesktopWidget_ChangeEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::changeEvent(static_cast<QEvent*>(event));
}

void QDesktopWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QDesktopWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QDesktopWidget_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDesktopWidget_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDesktopWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQDesktopWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QDesktopWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::initPainter(static_cast<QPainter*>(painter));
}

void QDesktopWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDesktopWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDesktopWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDesktopWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDesktopWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDesktopWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDesktopWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDesktopWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDesktopWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDesktopWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDesktopWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDesktopWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDesktopWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDesktopWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDesktopWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDesktopWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDesktopWidget_WheelEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDesktopWidget_WheelEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDesktopWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QDesktopWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QDesktopWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QDesktopWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QDesktopWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQDesktopWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QDesktopWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QDesktopWidget*>(ptr)->QDesktopWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQDial: public QDial {
public:
	MyQDial(QWidget *parent) : QDial(parent) {};
	void mouseMoveEvent(QMouseEvent * e) { callbackQDialMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQDialMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQDialMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * pe) { callbackQDialPaintEvent(this, this->objectName().toUtf8().data(), pe); };
	void resizeEvent(QResizeEvent * e) { callbackQDialResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void sliderChange(QAbstractSlider::SliderChange change) { callbackQDialSliderChange(this, this->objectName().toUtf8().data(), change); };
	void changeEvent(QEvent * ev) { callbackQDialChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void keyPressEvent(QKeyEvent * ev) { callbackQDialKeyPressEvent(this, this->objectName().toUtf8().data(), ev); };
	void timerEvent(QTimerEvent * e) { callbackQDialTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void wheelEvent(QWheelEvent * e) { callbackQDialWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQDialActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQDialDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQDialDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQDialDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQDialDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQDialEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQDialFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQDialFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQDialHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQDialLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQDialMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQDialSetVisible(this, this->objectName().toUtf8().data(), visible)) { QDial::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQDialShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQDialCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQDialContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQDialInitPainter(const_cast<MyQDial*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQDialInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQDialKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQDialMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQDialTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQDialChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQDialCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QDial_NotchSize(void* ptr){
	return static_cast<QDial*>(ptr)->notchSize();
}

double QDial_NotchTarget(void* ptr){
	return static_cast<double>(static_cast<QDial*>(ptr)->notchTarget());
}

int QDial_NotchesVisible(void* ptr){
	return static_cast<QDial*>(ptr)->notchesVisible();
}

void QDial_SetNotchesVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDial*>(ptr), "setNotchesVisible", Q_ARG(bool, visible != 0));
}

void QDial_SetWrapping(void* ptr, int on){
	QMetaObject::invokeMethod(static_cast<QDial*>(ptr), "setWrapping", Q_ARG(bool, on != 0));
}

int QDial_Wrapping(void* ptr){
	return static_cast<QDial*>(ptr)->wrapping();
}

void* QDial_NewQDial(void* parent){
	return new MyQDial(static_cast<QWidget*>(parent));
}

int QDial_Event(void* ptr, void* e){
	return static_cast<QDial*>(ptr)->event(static_cast<QEvent*>(e));
}

void* QDial_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QDial*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QDial*>(ptr)->minimumSizeHint()).height());
}

void QDial_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQDial*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QDial_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QDial*>(ptr)->QDial::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QDial_MousePressEvent(void* ptr, void* e){
	static_cast<MyQDial*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QDial_MousePressEventDefault(void* ptr, void* e){
	static_cast<QDial*>(ptr)->QDial::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QDial_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQDial*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QDial_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QDial*>(ptr)->QDial::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QDial_PaintEvent(void* ptr, void* pe){
	static_cast<MyQDial*>(ptr)->paintEvent(static_cast<QPaintEvent*>(pe));
}

void QDial_PaintEventDefault(void* ptr, void* pe){
	static_cast<QDial*>(ptr)->QDial::paintEvent(static_cast<QPaintEvent*>(pe));
}

void QDial_ResizeEvent(void* ptr, void* e){
	static_cast<MyQDial*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QDial_ResizeEventDefault(void* ptr, void* e){
	static_cast<QDial*>(ptr)->QDial::resizeEvent(static_cast<QResizeEvent*>(e));
}

void* QDial_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QDial*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QDial*>(ptr)->sizeHint()).height());
}

void QDial_SliderChange(void* ptr, int change){
	static_cast<MyQDial*>(ptr)->sliderChange(static_cast<QAbstractSlider::SliderChange>(change));
}

void QDial_SliderChangeDefault(void* ptr, int change){
	static_cast<QDial*>(ptr)->QDial::sliderChange(static_cast<QAbstractSlider::SliderChange>(change));
}

void QDial_DestroyQDial(void* ptr){
	static_cast<QDial*>(ptr)->~QDial();
}

void QDial_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQDial*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QDial_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QDial*>(ptr)->QDial::changeEvent(static_cast<QEvent*>(ev));
}

void QDial_KeyPressEvent(void* ptr, void* ev){
	static_cast<MyQDial*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QDial_KeyPressEventDefault(void* ptr, void* ev){
	static_cast<QDial*>(ptr)->QDial::keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QDial_TimerEvent(void* ptr, void* e){
	static_cast<MyQDial*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QDial_TimerEventDefault(void* ptr, void* e){
	static_cast<QDial*>(ptr)->QDial::timerEvent(static_cast<QTimerEvent*>(e));
}

void QDial_WheelEvent(void* ptr, void* e){
	static_cast<MyQDial*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QDial_WheelEventDefault(void* ptr, void* e){
	static_cast<QDial*>(ptr)->QDial::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QDial_ActionEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QDial_ActionEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::actionEvent(static_cast<QActionEvent*>(event));
}

void QDial_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDial_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDial_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDial_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDial_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDial_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDial_DropEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QDial_DropEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::dropEvent(static_cast<QDropEvent*>(event));
}

void QDial_EnterEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QDial_EnterEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::enterEvent(static_cast<QEvent*>(event));
}

void QDial_FocusInEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDial_FocusInEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDial_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDial_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDial_HideEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QDial_HideEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::hideEvent(static_cast<QHideEvent*>(event));
}

void QDial_LeaveEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QDial_LeaveEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::leaveEvent(static_cast<QEvent*>(event));
}

void QDial_MoveEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QDial_MoveEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::moveEvent(static_cast<QMoveEvent*>(event));
}

void QDial_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQDial*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDial_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDial*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDial_ShowEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QDial_ShowEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::showEvent(static_cast<QShowEvent*>(event));
}

void QDial_CloseEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QDial_CloseEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::closeEvent(static_cast<QCloseEvent*>(event));
}

void QDial_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDial_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDial_InitPainter(void* ptr, void* painter){
	static_cast<MyQDial*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QDial_InitPainterDefault(void* ptr, void* painter){
	static_cast<QDial*>(ptr)->QDial::initPainter(static_cast<QPainter*>(painter));
}

void QDial_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDial_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDial_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDial_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDial_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDial_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDial_TabletEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDial_TabletEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDial_ChildEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QDial_ChildEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::childEvent(static_cast<QChildEvent*>(event));
}

void QDial_CustomEvent(void* ptr, void* event){
	static_cast<MyQDial*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QDial_CustomEventDefault(void* ptr, void* event){
	static_cast<QDial*>(ptr)->QDial::customEvent(static_cast<QEvent*>(event));
}

class MyQDialog: public QDialog {
public:
	MyQDialog(QWidget *parent, Qt::WindowFlags f) : QDialog(parent, f) {};
	void accept() { if (!callbackQDialogAccept(this, this->objectName().toUtf8().data())) { QDialog::accept(); }; };
	void Signal_Accepted() { callbackQDialogAccepted(this, this->objectName().toUtf8().data()); };
	void closeEvent(QCloseEvent * e) { callbackQDialogCloseEvent(this, this->objectName().toUtf8().data(), e); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQDialogContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void done(int r) { if (!callbackQDialogDone(this, this->objectName().toUtf8().data(), r)) { QDialog::done(r); }; };
	void Signal_Finished(int result) { callbackQDialogFinished(this, this->objectName().toUtf8().data(), result); };
	void keyPressEvent(QKeyEvent * e) { callbackQDialogKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void open() { if (!callbackQDialogOpen(this, this->objectName().toUtf8().data())) { QDialog::open(); }; };
	void reject() { if (!callbackQDialogReject(this, this->objectName().toUtf8().data())) { QDialog::reject(); }; };
	void Signal_Rejected() { callbackQDialogRejected(this, this->objectName().toUtf8().data()); };
	void resizeEvent(QResizeEvent * v) { callbackQDialogResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void setVisible(bool visible) { if (!callbackQDialogSetVisible(this, this->objectName().toUtf8().data(), visible)) { QDialog::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQDialogShowEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQDialogActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQDialogDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQDialogDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQDialogDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQDialogDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQDialogEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQDialogFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQDialogFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQDialogHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQDialogLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQDialogMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQDialogPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQDialogChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQDialogInitPainter(const_cast<MyQDialog*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQDialogInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQDialogKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQDialogMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQDialogMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQDialogMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQDialogMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQDialogTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQDialogWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQDialogTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQDialogChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQDialogCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QDialog_IsSizeGripEnabled(void* ptr){
	return static_cast<QDialog*>(ptr)->isSizeGripEnabled();
}

void QDialog_SetModal(void* ptr, int modal){
	static_cast<QDialog*>(ptr)->setModal(modal != 0);
}

void QDialog_SetResult(void* ptr, int i){
	static_cast<QDialog*>(ptr)->setResult(i);
}

void QDialog_SetSizeGripEnabled(void* ptr, int v){
	static_cast<QDialog*>(ptr)->setSizeGripEnabled(v != 0);
}

void* QDialog_NewQDialog(void* parent, int f){
	return new MyQDialog(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

void QDialog_Accept(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQDialog*>(ptr), "accept");
}

void QDialog_AcceptDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDialog*>(ptr), "accept");
}

void QDialog_ConnectAccepted(void* ptr){
	QObject::connect(static_cast<QDialog*>(ptr), static_cast<void (QDialog::*)()>(&QDialog::accepted), static_cast<MyQDialog*>(ptr), static_cast<void (MyQDialog::*)()>(&MyQDialog::Signal_Accepted));;
}

void QDialog_DisconnectAccepted(void* ptr){
	QObject::disconnect(static_cast<QDialog*>(ptr), static_cast<void (QDialog::*)()>(&QDialog::accepted), static_cast<MyQDialog*>(ptr), static_cast<void (MyQDialog::*)()>(&MyQDialog::Signal_Accepted));;
}

void QDialog_Accepted(void* ptr){
	static_cast<QDialog*>(ptr)->accepted();
}

void QDialog_CloseEvent(void* ptr, void* e){
	static_cast<MyQDialog*>(ptr)->closeEvent(static_cast<QCloseEvent*>(e));
}

void QDialog_CloseEventDefault(void* ptr, void* e){
	static_cast<QDialog*>(ptr)->QDialog::closeEvent(static_cast<QCloseEvent*>(e));
}

void QDialog_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQDialog*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QDialog_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QDialog*>(ptr)->QDialog::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QDialog_Done(void* ptr, int r){
	QMetaObject::invokeMethod(static_cast<MyQDialog*>(ptr), "done", Q_ARG(int, r));
}

void QDialog_DoneDefault(void* ptr, int r){
	QMetaObject::invokeMethod(static_cast<QDialog*>(ptr), "done", Q_ARG(int, r));
}

int QDialog_Event(void* ptr, void* e){
	return static_cast<QDialog*>(ptr)->event(static_cast<QEvent*>(e));
}

int QDialog_EventFilter(void* ptr, void* o, void* e){
	return static_cast<QDialog*>(ptr)->eventFilter(static_cast<QObject*>(o), static_cast<QEvent*>(e));
}

int QDialog_Exec(void* ptr){
	return QMetaObject::invokeMethod(static_cast<QDialog*>(ptr), "exec");
}

void QDialog_ConnectFinished(void* ptr){
	QObject::connect(static_cast<QDialog*>(ptr), static_cast<void (QDialog::*)(int)>(&QDialog::finished), static_cast<MyQDialog*>(ptr), static_cast<void (MyQDialog::*)(int)>(&MyQDialog::Signal_Finished));;
}

void QDialog_DisconnectFinished(void* ptr){
	QObject::disconnect(static_cast<QDialog*>(ptr), static_cast<void (QDialog::*)(int)>(&QDialog::finished), static_cast<MyQDialog*>(ptr), static_cast<void (MyQDialog::*)(int)>(&MyQDialog::Signal_Finished));;
}

void QDialog_Finished(void* ptr, int result){
	static_cast<QDialog*>(ptr)->finished(result);
}

void QDialog_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQDialog*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QDialog_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QDialog*>(ptr)->QDialog::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void* QDialog_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QDialog*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QDialog*>(ptr)->minimumSizeHint()).height());
}

void QDialog_Open(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQDialog*>(ptr), "open");
}

void QDialog_OpenDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDialog*>(ptr), "open");
}

void QDialog_Reject(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQDialog*>(ptr), "reject");
}

void QDialog_RejectDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDialog*>(ptr), "reject");
}

void QDialog_ConnectRejected(void* ptr){
	QObject::connect(static_cast<QDialog*>(ptr), static_cast<void (QDialog::*)()>(&QDialog::rejected), static_cast<MyQDialog*>(ptr), static_cast<void (MyQDialog::*)()>(&MyQDialog::Signal_Rejected));;
}

void QDialog_DisconnectRejected(void* ptr){
	QObject::disconnect(static_cast<QDialog*>(ptr), static_cast<void (QDialog::*)()>(&QDialog::rejected), static_cast<MyQDialog*>(ptr), static_cast<void (MyQDialog::*)()>(&MyQDialog::Signal_Rejected));;
}

void QDialog_Rejected(void* ptr){
	static_cast<QDialog*>(ptr)->rejected();
}

void QDialog_ResizeEvent(void* ptr, void* v){
	static_cast<MyQDialog*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QDialog_ResizeEventDefault(void* ptr, void* v){
	static_cast<QDialog*>(ptr)->QDialog::resizeEvent(static_cast<QResizeEvent*>(v));
}

int QDialog_Result(void* ptr){
	return static_cast<QDialog*>(ptr)->result();
}

void QDialog_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDialog_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDialog_ShowEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QDialog_ShowEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::showEvent(static_cast<QShowEvent*>(event));
}

void* QDialog_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QDialog*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QDialog*>(ptr)->sizeHint()).height());
}

void QDialog_DestroyQDialog(void* ptr){
	static_cast<QDialog*>(ptr)->~QDialog();
}

void QDialog_ActionEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QDialog_ActionEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::actionEvent(static_cast<QActionEvent*>(event));
}

void QDialog_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDialog_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDialog_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDialog_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDialog_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDialog_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDialog_DropEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QDialog_DropEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::dropEvent(static_cast<QDropEvent*>(event));
}

void QDialog_EnterEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QDialog_EnterEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::enterEvent(static_cast<QEvent*>(event));
}

void QDialog_FocusInEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDialog_FocusInEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDialog_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDialog_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDialog_HideEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QDialog_HideEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::hideEvent(static_cast<QHideEvent*>(event));
}

void QDialog_LeaveEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QDialog_LeaveEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::leaveEvent(static_cast<QEvent*>(event));
}

void QDialog_MoveEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QDialog_MoveEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::moveEvent(static_cast<QMoveEvent*>(event));
}

void QDialog_PaintEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QDialog_PaintEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::paintEvent(static_cast<QPaintEvent*>(event));
}

void QDialog_ChangeEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QDialog_ChangeEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::changeEvent(static_cast<QEvent*>(event));
}

void QDialog_InitPainter(void* ptr, void* painter){
	static_cast<MyQDialog*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QDialog_InitPainterDefault(void* ptr, void* painter){
	static_cast<QDialog*>(ptr)->QDialog::initPainter(static_cast<QPainter*>(painter));
}

void QDialog_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDialog_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDialog_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDialog_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDialog_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDialog_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDialog_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDialog_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDialog_MousePressEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDialog_MousePressEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDialog_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDialog_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDialog_TabletEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDialog_TabletEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDialog_WheelEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDialog_WheelEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDialog_TimerEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QDialog_TimerEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::timerEvent(static_cast<QTimerEvent*>(event));
}

void QDialog_ChildEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QDialog_ChildEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::childEvent(static_cast<QChildEvent*>(event));
}

void QDialog_CustomEvent(void* ptr, void* event){
	static_cast<MyQDialog*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QDialog_CustomEventDefault(void* ptr, void* event){
	static_cast<QDialog*>(ptr)->QDialog::customEvent(static_cast<QEvent*>(event));
}

class MyQDialogButtonBox: public QDialogButtonBox {
public:
	MyQDialogButtonBox(QWidget *parent) : QDialogButtonBox(parent) {};
	MyQDialogButtonBox(Qt::Orientation orientation, QWidget *parent) : QDialogButtonBox(orientation, parent) {};
	MyQDialogButtonBox(StandardButtons buttons, QWidget *parent) : QDialogButtonBox(buttons, parent) {};
	MyQDialogButtonBox(StandardButtons buttons, Qt::Orientation orientation, QWidget *parent) : QDialogButtonBox(buttons, orientation, parent) {};
	void Signal_Accepted() { callbackQDialogButtonBoxAccepted(this, this->objectName().toUtf8().data()); };
	void changeEvent(QEvent * event) { callbackQDialogButtonBoxChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_Clicked(QAbstractButton * button) { callbackQDialogButtonBoxClicked(this, this->objectName().toUtf8().data(), button); };
	void Signal_HelpRequested() { callbackQDialogButtonBoxHelpRequested(this, this->objectName().toUtf8().data()); };
	void Signal_Rejected() { callbackQDialogButtonBoxRejected(this, this->objectName().toUtf8().data()); };
	void actionEvent(QActionEvent * event) { callbackQDialogButtonBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQDialogButtonBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQDialogButtonBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQDialogButtonBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQDialogButtonBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQDialogButtonBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQDialogButtonBoxFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQDialogButtonBoxFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQDialogButtonBoxHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQDialogButtonBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQDialogButtonBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQDialogButtonBoxPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQDialogButtonBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QDialogButtonBox::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQDialogButtonBoxShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQDialogButtonBoxCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQDialogButtonBoxContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQDialogButtonBoxInitPainter(const_cast<MyQDialogButtonBox*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQDialogButtonBoxInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQDialogButtonBoxKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQDialogButtonBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQDialogButtonBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQDialogButtonBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQDialogButtonBoxMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQDialogButtonBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQDialogButtonBoxResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQDialogButtonBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQDialogButtonBoxWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQDialogButtonBoxTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQDialogButtonBoxChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQDialogButtonBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QDialogButtonBox_CenterButtons(void* ptr){
	return static_cast<QDialogButtonBox*>(ptr)->centerButtons();
}

int QDialogButtonBox_Orientation(void* ptr){
	return static_cast<QDialogButtonBox*>(ptr)->orientation();
}

void QDialogButtonBox_SetCenterButtons(void* ptr, int center){
	static_cast<QDialogButtonBox*>(ptr)->setCenterButtons(center != 0);
}

void QDialogButtonBox_SetOrientation(void* ptr, int orientation){
	static_cast<QDialogButtonBox*>(ptr)->setOrientation(static_cast<Qt::Orientation>(orientation));
}

void QDialogButtonBox_SetStandardButtons(void* ptr, int buttons){
	static_cast<QDialogButtonBox*>(ptr)->setStandardButtons(static_cast<QDialogButtonBox::StandardButton>(buttons));
}

int QDialogButtonBox_StandardButtons(void* ptr){
	return static_cast<QDialogButtonBox*>(ptr)->standardButtons();
}

void* QDialogButtonBox_NewQDialogButtonBox(void* parent){
	return new MyQDialogButtonBox(static_cast<QWidget*>(parent));
}

void* QDialogButtonBox_NewQDialogButtonBox2(int orientation, void* parent){
	return new MyQDialogButtonBox(static_cast<Qt::Orientation>(orientation), static_cast<QWidget*>(parent));
}

void* QDialogButtonBox_NewQDialogButtonBox3(int buttons, void* parent){
	return new MyQDialogButtonBox(static_cast<QDialogButtonBox::StandardButton>(buttons), static_cast<QWidget*>(parent));
}

void* QDialogButtonBox_NewQDialogButtonBox4(int buttons, int orientation, void* parent){
	return new MyQDialogButtonBox(static_cast<QDialogButtonBox::StandardButton>(buttons), static_cast<Qt::Orientation>(orientation), static_cast<QWidget*>(parent));
}

void QDialogButtonBox_ConnectAccepted(void* ptr){
	QObject::connect(static_cast<QDialogButtonBox*>(ptr), static_cast<void (QDialogButtonBox::*)()>(&QDialogButtonBox::accepted), static_cast<MyQDialogButtonBox*>(ptr), static_cast<void (MyQDialogButtonBox::*)()>(&MyQDialogButtonBox::Signal_Accepted));;
}

void QDialogButtonBox_DisconnectAccepted(void* ptr){
	QObject::disconnect(static_cast<QDialogButtonBox*>(ptr), static_cast<void (QDialogButtonBox::*)()>(&QDialogButtonBox::accepted), static_cast<MyQDialogButtonBox*>(ptr), static_cast<void (MyQDialogButtonBox::*)()>(&MyQDialogButtonBox::Signal_Accepted));;
}

void QDialogButtonBox_Accepted(void* ptr){
	static_cast<QDialogButtonBox*>(ptr)->accepted();
}

void* QDialogButtonBox_AddButton3(void* ptr, int button){
	return static_cast<QDialogButtonBox*>(ptr)->addButton(static_cast<QDialogButtonBox::StandardButton>(button));
}

void* QDialogButtonBox_AddButton2(void* ptr, char* text, int role){
	return static_cast<QDialogButtonBox*>(ptr)->addButton(QString(text), static_cast<QDialogButtonBox::ButtonRole>(role));
}

void QDialogButtonBox_AddButton(void* ptr, void* button, int role){
	static_cast<QDialogButtonBox*>(ptr)->addButton(static_cast<QAbstractButton*>(button), static_cast<QDialogButtonBox::ButtonRole>(role));
}

void* QDialogButtonBox_Button(void* ptr, int which){
	return static_cast<QDialogButtonBox*>(ptr)->button(static_cast<QDialogButtonBox::StandardButton>(which));
}

int QDialogButtonBox_ButtonRole(void* ptr, void* button){
	return static_cast<QDialogButtonBox*>(ptr)->buttonRole(static_cast<QAbstractButton*>(button));
}

void QDialogButtonBox_ChangeEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QDialogButtonBox_ChangeEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::changeEvent(static_cast<QEvent*>(event));
}

void QDialogButtonBox_Clear(void* ptr){
	static_cast<QDialogButtonBox*>(ptr)->clear();
}

void QDialogButtonBox_ConnectClicked(void* ptr){
	QObject::connect(static_cast<QDialogButtonBox*>(ptr), static_cast<void (QDialogButtonBox::*)(QAbstractButton *)>(&QDialogButtonBox::clicked), static_cast<MyQDialogButtonBox*>(ptr), static_cast<void (MyQDialogButtonBox::*)(QAbstractButton *)>(&MyQDialogButtonBox::Signal_Clicked));;
}

void QDialogButtonBox_DisconnectClicked(void* ptr){
	QObject::disconnect(static_cast<QDialogButtonBox*>(ptr), static_cast<void (QDialogButtonBox::*)(QAbstractButton *)>(&QDialogButtonBox::clicked), static_cast<MyQDialogButtonBox*>(ptr), static_cast<void (MyQDialogButtonBox::*)(QAbstractButton *)>(&MyQDialogButtonBox::Signal_Clicked));;
}

void QDialogButtonBox_Clicked(void* ptr, void* button){
	static_cast<QDialogButtonBox*>(ptr)->clicked(static_cast<QAbstractButton*>(button));
}

int QDialogButtonBox_Event(void* ptr, void* event){
	return static_cast<QDialogButtonBox*>(ptr)->event(static_cast<QEvent*>(event));
}

void QDialogButtonBox_ConnectHelpRequested(void* ptr){
	QObject::connect(static_cast<QDialogButtonBox*>(ptr), static_cast<void (QDialogButtonBox::*)()>(&QDialogButtonBox::helpRequested), static_cast<MyQDialogButtonBox*>(ptr), static_cast<void (MyQDialogButtonBox::*)()>(&MyQDialogButtonBox::Signal_HelpRequested));;
}

void QDialogButtonBox_DisconnectHelpRequested(void* ptr){
	QObject::disconnect(static_cast<QDialogButtonBox*>(ptr), static_cast<void (QDialogButtonBox::*)()>(&QDialogButtonBox::helpRequested), static_cast<MyQDialogButtonBox*>(ptr), static_cast<void (MyQDialogButtonBox::*)()>(&MyQDialogButtonBox::Signal_HelpRequested));;
}

void QDialogButtonBox_HelpRequested(void* ptr){
	static_cast<QDialogButtonBox*>(ptr)->helpRequested();
}

void QDialogButtonBox_ConnectRejected(void* ptr){
	QObject::connect(static_cast<QDialogButtonBox*>(ptr), static_cast<void (QDialogButtonBox::*)()>(&QDialogButtonBox::rejected), static_cast<MyQDialogButtonBox*>(ptr), static_cast<void (MyQDialogButtonBox::*)()>(&MyQDialogButtonBox::Signal_Rejected));;
}

void QDialogButtonBox_DisconnectRejected(void* ptr){
	QObject::disconnect(static_cast<QDialogButtonBox*>(ptr), static_cast<void (QDialogButtonBox::*)()>(&QDialogButtonBox::rejected), static_cast<MyQDialogButtonBox*>(ptr), static_cast<void (MyQDialogButtonBox::*)()>(&MyQDialogButtonBox::Signal_Rejected));;
}

void QDialogButtonBox_Rejected(void* ptr){
	static_cast<QDialogButtonBox*>(ptr)->rejected();
}

void QDialogButtonBox_RemoveButton(void* ptr, void* button){
	static_cast<QDialogButtonBox*>(ptr)->removeButton(static_cast<QAbstractButton*>(button));
}

int QDialogButtonBox_StandardButton(void* ptr, void* button){
	return static_cast<QDialogButtonBox*>(ptr)->standardButton(static_cast<QAbstractButton*>(button));
}

void QDialogButtonBox_DestroyQDialogButtonBox(void* ptr){
	static_cast<QDialogButtonBox*>(ptr)->~QDialogButtonBox();
}

void QDialogButtonBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QDialogButtonBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QDialogButtonBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDialogButtonBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDialogButtonBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDialogButtonBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDialogButtonBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDialogButtonBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDialogButtonBox_DropEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QDialogButtonBox_DropEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QDialogButtonBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QDialogButtonBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::enterEvent(static_cast<QEvent*>(event));
}

void QDialogButtonBox_FocusInEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDialogButtonBox_FocusInEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDialogButtonBox_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDialogButtonBox_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDialogButtonBox_HideEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QDialogButtonBox_HideEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::hideEvent(static_cast<QHideEvent*>(event));
}

void QDialogButtonBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QDialogButtonBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::leaveEvent(static_cast<QEvent*>(event));
}

void QDialogButtonBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QDialogButtonBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QDialogButtonBox_PaintEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QDialogButtonBox_PaintEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::paintEvent(static_cast<QPaintEvent*>(event));
}

void QDialogButtonBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQDialogButtonBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDialogButtonBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDialogButtonBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDialogButtonBox_ShowEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QDialogButtonBox_ShowEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::showEvent(static_cast<QShowEvent*>(event));
}

void QDialogButtonBox_CloseEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QDialogButtonBox_CloseEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::closeEvent(static_cast<QCloseEvent*>(event));
}

void QDialogButtonBox_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDialogButtonBox_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDialogButtonBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQDialogButtonBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QDialogButtonBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::initPainter(static_cast<QPainter*>(painter));
}

void QDialogButtonBox_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDialogButtonBox_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDialogButtonBox_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDialogButtonBox_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDialogButtonBox_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDialogButtonBox_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDialogButtonBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDialogButtonBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDialogButtonBox_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDialogButtonBox_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDialogButtonBox_MousePressEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDialogButtonBox_MousePressEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDialogButtonBox_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDialogButtonBox_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDialogButtonBox_ResizeEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDialogButtonBox_ResizeEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDialogButtonBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDialogButtonBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDialogButtonBox_WheelEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDialogButtonBox_WheelEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDialogButtonBox_TimerEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QDialogButtonBox_TimerEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::timerEvent(static_cast<QTimerEvent*>(event));
}

void QDialogButtonBox_ChildEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QDialogButtonBox_ChildEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::childEvent(static_cast<QChildEvent*>(event));
}

void QDialogButtonBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQDialogButtonBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QDialogButtonBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QDialogButtonBox*>(ptr)->QDialogButtonBox::customEvent(static_cast<QEvent*>(event));
}

class MyQDockWidget: public QDockWidget {
public:
	MyQDockWidget(QWidget *parent, Qt::WindowFlags flags) : QDockWidget(parent, flags) {};
	MyQDockWidget(const QString &title, QWidget *parent, Qt::WindowFlags flags) : QDockWidget(title, parent, flags) {};
	void Signal_AllowedAreasChanged(Qt::DockWidgetAreas allowedAreas) { callbackQDockWidgetAllowedAreasChanged(this, this->objectName().toUtf8().data(), allowedAreas); };
	void changeEvent(QEvent * event) { callbackQDockWidgetChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQDockWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_DockLocationChanged(Qt::DockWidgetArea area) { callbackQDockWidgetDockLocationChanged(this, this->objectName().toUtf8().data(), area); };
	void Signal_FeaturesChanged(QDockWidget::DockWidgetFeatures features) { callbackQDockWidgetFeaturesChanged(this, this->objectName().toUtf8().data(), features); };
	void paintEvent(QPaintEvent * event) { callbackQDockWidgetPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_TopLevelChanged(bool topLevel) { callbackQDockWidgetTopLevelChanged(this, this->objectName().toUtf8().data(), topLevel); };
	void Signal_VisibilityChanged(bool visible) { callbackQDockWidgetVisibilityChanged(this, this->objectName().toUtf8().data(), visible); };
	void actionEvent(QActionEvent * event) { callbackQDockWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQDockWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQDockWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQDockWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQDockWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQDockWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQDockWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQDockWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQDockWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQDockWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQDockWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQDockWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QDockWidget::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQDockWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQDockWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQDockWidgetInitPainter(const_cast<MyQDockWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQDockWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQDockWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQDockWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQDockWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQDockWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQDockWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQDockWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQDockWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQDockWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQDockWidgetWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQDockWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQDockWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQDockWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QDockWidget_AllowedAreas(void* ptr){
	return static_cast<QDockWidget*>(ptr)->allowedAreas();
}

int QDockWidget_Features(void* ptr){
	return static_cast<QDockWidget*>(ptr)->features();
}

void QDockWidget_SetAllowedAreas(void* ptr, int areas){
	static_cast<QDockWidget*>(ptr)->setAllowedAreas(static_cast<Qt::DockWidgetArea>(areas));
}

void QDockWidget_SetFeatures(void* ptr, int features){
	static_cast<QDockWidget*>(ptr)->setFeatures(static_cast<QDockWidget::DockWidgetFeature>(features));
}

void QDockWidget_SetFloating(void* ptr, int floating){
	static_cast<QDockWidget*>(ptr)->setFloating(floating != 0);
}

void* QDockWidget_NewQDockWidget2(void* parent, int flags){
	return new MyQDockWidget(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(flags));
}

void* QDockWidget_NewQDockWidget(char* title, void* parent, int flags){
	return new MyQDockWidget(QString(title), static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(flags));
}

void QDockWidget_ConnectAllowedAreasChanged(void* ptr){
	QObject::connect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(Qt::DockWidgetAreas)>(&QDockWidget::allowedAreasChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(Qt::DockWidgetAreas)>(&MyQDockWidget::Signal_AllowedAreasChanged));;
}

void QDockWidget_DisconnectAllowedAreasChanged(void* ptr){
	QObject::disconnect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(Qt::DockWidgetAreas)>(&QDockWidget::allowedAreasChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(Qt::DockWidgetAreas)>(&MyQDockWidget::Signal_AllowedAreasChanged));;
}

void QDockWidget_AllowedAreasChanged(void* ptr, int allowedAreas){
	static_cast<QDockWidget*>(ptr)->allowedAreasChanged(static_cast<Qt::DockWidgetArea>(allowedAreas));
}

void QDockWidget_ChangeEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QDockWidget_ChangeEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::changeEvent(static_cast<QEvent*>(event));
}

void QDockWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QDockWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QDockWidget_ConnectDockLocationChanged(void* ptr){
	QObject::connect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(Qt::DockWidgetArea)>(&QDockWidget::dockLocationChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(Qt::DockWidgetArea)>(&MyQDockWidget::Signal_DockLocationChanged));;
}

void QDockWidget_DisconnectDockLocationChanged(void* ptr){
	QObject::disconnect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(Qt::DockWidgetArea)>(&QDockWidget::dockLocationChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(Qt::DockWidgetArea)>(&MyQDockWidget::Signal_DockLocationChanged));;
}

void QDockWidget_DockLocationChanged(void* ptr, int area){
	static_cast<QDockWidget*>(ptr)->dockLocationChanged(static_cast<Qt::DockWidgetArea>(area));
}

int QDockWidget_Event(void* ptr, void* event){
	return static_cast<QDockWidget*>(ptr)->event(static_cast<QEvent*>(event));
}

void QDockWidget_ConnectFeaturesChanged(void* ptr){
	QObject::connect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(QDockWidget::DockWidgetFeatures)>(&QDockWidget::featuresChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(QDockWidget::DockWidgetFeatures)>(&MyQDockWidget::Signal_FeaturesChanged));;
}

void QDockWidget_DisconnectFeaturesChanged(void* ptr){
	QObject::disconnect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(QDockWidget::DockWidgetFeatures)>(&QDockWidget::featuresChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(QDockWidget::DockWidgetFeatures)>(&MyQDockWidget::Signal_FeaturesChanged));;
}

void QDockWidget_FeaturesChanged(void* ptr, int features){
	static_cast<QDockWidget*>(ptr)->featuresChanged(static_cast<QDockWidget::DockWidgetFeature>(features));
}

int QDockWidget_IsAreaAllowed(void* ptr, int area){
	return static_cast<QDockWidget*>(ptr)->isAreaAllowed(static_cast<Qt::DockWidgetArea>(area));
}

int QDockWidget_IsFloating(void* ptr){
	return static_cast<QDockWidget*>(ptr)->isFloating();
}

void QDockWidget_PaintEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QDockWidget_PaintEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::paintEvent(static_cast<QPaintEvent*>(event));
}

void QDockWidget_SetTitleBarWidget(void* ptr, void* widget){
	static_cast<QDockWidget*>(ptr)->setTitleBarWidget(static_cast<QWidget*>(widget));
}

void QDockWidget_SetWidget(void* ptr, void* widget){
	static_cast<QDockWidget*>(ptr)->setWidget(static_cast<QWidget*>(widget));
}

void* QDockWidget_TitleBarWidget(void* ptr){
	return static_cast<QDockWidget*>(ptr)->titleBarWidget();
}

void* QDockWidget_ToggleViewAction(void* ptr){
	return static_cast<QDockWidget*>(ptr)->toggleViewAction();
}

void QDockWidget_ConnectTopLevelChanged(void* ptr){
	QObject::connect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(bool)>(&QDockWidget::topLevelChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(bool)>(&MyQDockWidget::Signal_TopLevelChanged));;
}

void QDockWidget_DisconnectTopLevelChanged(void* ptr){
	QObject::disconnect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(bool)>(&QDockWidget::topLevelChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(bool)>(&MyQDockWidget::Signal_TopLevelChanged));;
}

void QDockWidget_TopLevelChanged(void* ptr, int topLevel){
	static_cast<QDockWidget*>(ptr)->topLevelChanged(topLevel != 0);
}

void QDockWidget_ConnectVisibilityChanged(void* ptr){
	QObject::connect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(bool)>(&QDockWidget::visibilityChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(bool)>(&MyQDockWidget::Signal_VisibilityChanged));;
}

void QDockWidget_DisconnectVisibilityChanged(void* ptr){
	QObject::disconnect(static_cast<QDockWidget*>(ptr), static_cast<void (QDockWidget::*)(bool)>(&QDockWidget::visibilityChanged), static_cast<MyQDockWidget*>(ptr), static_cast<void (MyQDockWidget::*)(bool)>(&MyQDockWidget::Signal_VisibilityChanged));;
}

void QDockWidget_VisibilityChanged(void* ptr, int visible){
	static_cast<QDockWidget*>(ptr)->visibilityChanged(visible != 0);
}

void* QDockWidget_Widget(void* ptr){
	return static_cast<QDockWidget*>(ptr)->widget();
}

void QDockWidget_DestroyQDockWidget(void* ptr){
	static_cast<QDockWidget*>(ptr)->~QDockWidget();
}

void QDockWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QDockWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QDockWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDockWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDockWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDockWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDockWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDockWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDockWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QDockWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::dropEvent(static_cast<QDropEvent*>(event));
}

void QDockWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QDockWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::enterEvent(static_cast<QEvent*>(event));
}

void QDockWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDockWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDockWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDockWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDockWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QDockWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QDockWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QDockWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::leaveEvent(static_cast<QEvent*>(event));
}

void QDockWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QDockWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void QDockWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQDockWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDockWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDockWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDockWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QDockWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::showEvent(static_cast<QShowEvent*>(event));
}

void QDockWidget_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDockWidget_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDockWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQDockWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QDockWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QDockWidget*>(ptr)->QDockWidget::initPainter(static_cast<QPainter*>(painter));
}

void QDockWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDockWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDockWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDockWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDockWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDockWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDockWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDockWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDockWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDockWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDockWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDockWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDockWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDockWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDockWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDockWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDockWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDockWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDockWidget_WheelEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDockWidget_WheelEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDockWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QDockWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QDockWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QDockWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QDockWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQDockWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QDockWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QDockWidget*>(ptr)->QDockWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQDoubleSpinBox: public QDoubleSpinBox {
public:
	MyQDoubleSpinBox(QWidget *parent) : QDoubleSpinBox(parent) {};
	void Signal_ValueChanged2(const QString & text) { callbackQDoubleSpinBoxValueChanged2(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void changeEvent(QEvent * event) { callbackQDoubleSpinBoxChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void clear() { if (!callbackQDoubleSpinBoxClear(this, this->objectName().toUtf8().data())) { QDoubleSpinBox::clear(); }; };
	void closeEvent(QCloseEvent * event) { callbackQDoubleSpinBoxCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQDoubleSpinBoxContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQDoubleSpinBoxFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQDoubleSpinBoxFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQDoubleSpinBoxHideEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQDoubleSpinBoxKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQDoubleSpinBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQDoubleSpinBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQDoubleSpinBoxMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQDoubleSpinBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQDoubleSpinBoxPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQDoubleSpinBoxResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void showEvent(QShowEvent * event) { callbackQDoubleSpinBoxShowEvent(this, this->objectName().toUtf8().data(), event); };
	void stepBy(int steps) { callbackQDoubleSpinBoxStepBy(this, this->objectName().toUtf8().data(), steps); };
	void timerEvent(QTimerEvent * event) { callbackQDoubleSpinBoxTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQDoubleSpinBoxWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQDoubleSpinBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQDoubleSpinBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQDoubleSpinBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQDoubleSpinBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQDoubleSpinBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQDoubleSpinBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQDoubleSpinBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQDoubleSpinBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQDoubleSpinBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QDoubleSpinBox::setVisible(visible); }; };
	void initPainter(QPainter * painter) const { callbackQDoubleSpinBoxInitPainter(const_cast<MyQDoubleSpinBox*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQDoubleSpinBoxInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQDoubleSpinBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQDoubleSpinBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQDoubleSpinBoxChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQDoubleSpinBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

char* QDoubleSpinBox_CleanText(void* ptr){
	return static_cast<QDoubleSpinBox*>(ptr)->cleanText().toUtf8().data();
}

int QDoubleSpinBox_Decimals(void* ptr){
	return static_cast<QDoubleSpinBox*>(ptr)->decimals();
}

char* QDoubleSpinBox_Prefix(void* ptr){
	return static_cast<QDoubleSpinBox*>(ptr)->prefix().toUtf8().data();
}

void QDoubleSpinBox_SetDecimals(void* ptr, int prec){
	static_cast<QDoubleSpinBox*>(ptr)->setDecimals(prec);
}

void QDoubleSpinBox_SetPrefix(void* ptr, char* prefix){
	static_cast<QDoubleSpinBox*>(ptr)->setPrefix(QString(prefix));
}

void QDoubleSpinBox_SetSuffix(void* ptr, char* suffix){
	static_cast<QDoubleSpinBox*>(ptr)->setSuffix(QString(suffix));
}

char* QDoubleSpinBox_Suffix(void* ptr){
	return static_cast<QDoubleSpinBox*>(ptr)->suffix().toUtf8().data();
}

void* QDoubleSpinBox_NewQDoubleSpinBox(void* parent){
	return new MyQDoubleSpinBox(static_cast<QWidget*>(parent));
}

void QDoubleSpinBox_ConnectValueChanged2(void* ptr){
	QObject::connect(static_cast<QDoubleSpinBox*>(ptr), static_cast<void (QDoubleSpinBox::*)(const QString &)>(&QDoubleSpinBox::valueChanged), static_cast<MyQDoubleSpinBox*>(ptr), static_cast<void (MyQDoubleSpinBox::*)(const QString &)>(&MyQDoubleSpinBox::Signal_ValueChanged2));;
}

void QDoubleSpinBox_DisconnectValueChanged2(void* ptr){
	QObject::disconnect(static_cast<QDoubleSpinBox*>(ptr), static_cast<void (QDoubleSpinBox::*)(const QString &)>(&QDoubleSpinBox::valueChanged), static_cast<MyQDoubleSpinBox*>(ptr), static_cast<void (MyQDoubleSpinBox::*)(const QString &)>(&MyQDoubleSpinBox::Signal_ValueChanged2));;
}

void QDoubleSpinBox_ValueChanged2(void* ptr, char* text){
	static_cast<QDoubleSpinBox*>(ptr)->valueChanged(QString(text));
}

void QDoubleSpinBox_DestroyQDoubleSpinBox(void* ptr){
	static_cast<QDoubleSpinBox*>(ptr)->~QDoubleSpinBox();
}

void QDoubleSpinBox_ChangeEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QDoubleSpinBox_ChangeEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::changeEvent(static_cast<QEvent*>(event));
}

void QDoubleSpinBox_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQDoubleSpinBox*>(ptr), "clear");
}

void QDoubleSpinBox_ClearDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QDoubleSpinBox*>(ptr), "clear");
}

void QDoubleSpinBox_CloseEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QDoubleSpinBox_CloseEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::closeEvent(static_cast<QCloseEvent*>(event));
}

void QDoubleSpinBox_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDoubleSpinBox_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QDoubleSpinBox_FocusInEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDoubleSpinBox_FocusInEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QDoubleSpinBox_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDoubleSpinBox_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QDoubleSpinBox_HideEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QDoubleSpinBox_HideEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::hideEvent(static_cast<QHideEvent*>(event));
}

void QDoubleSpinBox_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDoubleSpinBox_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QDoubleSpinBox_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDoubleSpinBox_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QDoubleSpinBox_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDoubleSpinBox_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QDoubleSpinBox_MousePressEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDoubleSpinBox_MousePressEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QDoubleSpinBox_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDoubleSpinBox_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QDoubleSpinBox_PaintEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QDoubleSpinBox_PaintEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::paintEvent(static_cast<QPaintEvent*>(event));
}

void QDoubleSpinBox_ResizeEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDoubleSpinBox_ResizeEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QDoubleSpinBox_ShowEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QDoubleSpinBox_ShowEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::showEvent(static_cast<QShowEvent*>(event));
}

void QDoubleSpinBox_StepBy(void* ptr, int steps){
	static_cast<MyQDoubleSpinBox*>(ptr)->stepBy(steps);
}

void QDoubleSpinBox_StepByDefault(void* ptr, int steps){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::stepBy(steps);
}

void QDoubleSpinBox_TimerEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QDoubleSpinBox_TimerEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::timerEvent(static_cast<QTimerEvent*>(event));
}

void QDoubleSpinBox_WheelEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDoubleSpinBox_WheelEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QDoubleSpinBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QDoubleSpinBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QDoubleSpinBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDoubleSpinBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QDoubleSpinBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDoubleSpinBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QDoubleSpinBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDoubleSpinBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QDoubleSpinBox_DropEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QDoubleSpinBox_DropEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QDoubleSpinBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QDoubleSpinBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::enterEvent(static_cast<QEvent*>(event));
}

void QDoubleSpinBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QDoubleSpinBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::leaveEvent(static_cast<QEvent*>(event));
}

void QDoubleSpinBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QDoubleSpinBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QDoubleSpinBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQDoubleSpinBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDoubleSpinBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QDoubleSpinBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QDoubleSpinBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQDoubleSpinBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QDoubleSpinBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::initPainter(static_cast<QPainter*>(painter));
}

void QDoubleSpinBox_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDoubleSpinBox_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QDoubleSpinBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDoubleSpinBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QDoubleSpinBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDoubleSpinBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QDoubleSpinBox_ChildEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QDoubleSpinBox_ChildEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::childEvent(static_cast<QChildEvent*>(event));
}

void QDoubleSpinBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQDoubleSpinBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QDoubleSpinBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QDoubleSpinBox*>(ptr)->QDoubleSpinBox::customEvent(static_cast<QEvent*>(event));
}

class MyQErrorMessage: public QErrorMessage {
public:
	MyQErrorMessage(QWidget *parent) : QErrorMessage(parent) {};
	void changeEvent(QEvent * e) { callbackQErrorMessageChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void done(int a) { if (!callbackQErrorMessageDone(this, this->objectName().toUtf8().data(), a)) { QErrorMessage::done(a); }; };
	void accept() { if (!callbackQErrorMessageAccept(this, this->objectName().toUtf8().data())) { QErrorMessage::accept(); }; };
	void closeEvent(QCloseEvent * e) { callbackQErrorMessageCloseEvent(this, this->objectName().toUtf8().data(), e); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQErrorMessageContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQErrorMessageKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void open() { if (!callbackQErrorMessageOpen(this, this->objectName().toUtf8().data())) { QErrorMessage::open(); }; };
	void reject() { if (!callbackQErrorMessageReject(this, this->objectName().toUtf8().data())) { QErrorMessage::reject(); }; };
	void resizeEvent(QResizeEvent * v) { callbackQErrorMessageResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void setVisible(bool visible) { if (!callbackQErrorMessageSetVisible(this, this->objectName().toUtf8().data(), visible)) { QErrorMessage::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQErrorMessageShowEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQErrorMessageActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQErrorMessageDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQErrorMessageDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQErrorMessageDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQErrorMessageDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQErrorMessageEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQErrorMessageFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQErrorMessageFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQErrorMessageHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQErrorMessageLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQErrorMessageMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQErrorMessagePaintEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQErrorMessageInitPainter(const_cast<MyQErrorMessage*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQErrorMessageInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQErrorMessageKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQErrorMessageMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQErrorMessageMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQErrorMessageMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQErrorMessageMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQErrorMessageTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQErrorMessageWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQErrorMessageTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQErrorMessageChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQErrorMessageCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QErrorMessage_NewQErrorMessage(void* parent){
	return new MyQErrorMessage(static_cast<QWidget*>(parent));
}

void QErrorMessage_ChangeEvent(void* ptr, void* e){
	static_cast<MyQErrorMessage*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QErrorMessage_ChangeEventDefault(void* ptr, void* e){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::changeEvent(static_cast<QEvent*>(e));
}

void QErrorMessage_Done(void* ptr, int a){
	QMetaObject::invokeMethod(static_cast<MyQErrorMessage*>(ptr), "done", Q_ARG(int, a));
}

void QErrorMessage_DoneDefault(void* ptr, int a){
	QMetaObject::invokeMethod(static_cast<QErrorMessage*>(ptr), "done", Q_ARG(int, a));
}

void* QErrorMessage_QErrorMessage_QtHandler(){
	return QErrorMessage::qtHandler();
}

void QErrorMessage_ShowMessage(void* ptr, char* message){
	QMetaObject::invokeMethod(static_cast<QErrorMessage*>(ptr), "showMessage", Q_ARG(QString, QString(message)));
}

void QErrorMessage_ShowMessage2(void* ptr, char* message, char* ty){
	QMetaObject::invokeMethod(static_cast<QErrorMessage*>(ptr), "showMessage", Q_ARG(QString, QString(message)), Q_ARG(QString, QString(ty)));
}

void QErrorMessage_DestroyQErrorMessage(void* ptr){
	static_cast<QErrorMessage*>(ptr)->~QErrorMessage();
}

void QErrorMessage_Accept(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQErrorMessage*>(ptr), "accept");
}

void QErrorMessage_AcceptDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QErrorMessage*>(ptr), "accept");
}

void QErrorMessage_CloseEvent(void* ptr, void* e){
	static_cast<MyQErrorMessage*>(ptr)->closeEvent(static_cast<QCloseEvent*>(e));
}

void QErrorMessage_CloseEventDefault(void* ptr, void* e){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::closeEvent(static_cast<QCloseEvent*>(e));
}

void QErrorMessage_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQErrorMessage*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QErrorMessage_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QErrorMessage_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQErrorMessage*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QErrorMessage_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QErrorMessage_Open(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQErrorMessage*>(ptr), "open");
}

void QErrorMessage_OpenDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QErrorMessage*>(ptr), "open");
}

void QErrorMessage_Reject(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQErrorMessage*>(ptr), "reject");
}

void QErrorMessage_RejectDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QErrorMessage*>(ptr), "reject");
}

void QErrorMessage_ResizeEvent(void* ptr, void* v){
	static_cast<MyQErrorMessage*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QErrorMessage_ResizeEventDefault(void* ptr, void* v){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::resizeEvent(static_cast<QResizeEvent*>(v));
}

void QErrorMessage_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQErrorMessage*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QErrorMessage_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QErrorMessage*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QErrorMessage_ShowEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QErrorMessage_ShowEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::showEvent(static_cast<QShowEvent*>(event));
}

void QErrorMessage_ActionEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QErrorMessage_ActionEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::actionEvent(static_cast<QActionEvent*>(event));
}

void QErrorMessage_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QErrorMessage_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QErrorMessage_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QErrorMessage_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QErrorMessage_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QErrorMessage_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QErrorMessage_DropEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QErrorMessage_DropEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::dropEvent(static_cast<QDropEvent*>(event));
}

void QErrorMessage_EnterEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QErrorMessage_EnterEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::enterEvent(static_cast<QEvent*>(event));
}

void QErrorMessage_FocusInEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QErrorMessage_FocusInEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QErrorMessage_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QErrorMessage_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QErrorMessage_HideEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QErrorMessage_HideEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::hideEvent(static_cast<QHideEvent*>(event));
}

void QErrorMessage_LeaveEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QErrorMessage_LeaveEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::leaveEvent(static_cast<QEvent*>(event));
}

void QErrorMessage_MoveEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QErrorMessage_MoveEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::moveEvent(static_cast<QMoveEvent*>(event));
}

void QErrorMessage_PaintEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QErrorMessage_PaintEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::paintEvent(static_cast<QPaintEvent*>(event));
}

void QErrorMessage_InitPainter(void* ptr, void* painter){
	static_cast<MyQErrorMessage*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QErrorMessage_InitPainterDefault(void* ptr, void* painter){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::initPainter(static_cast<QPainter*>(painter));
}

void QErrorMessage_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QErrorMessage_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QErrorMessage_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QErrorMessage_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QErrorMessage_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QErrorMessage_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QErrorMessage_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QErrorMessage_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QErrorMessage_MousePressEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QErrorMessage_MousePressEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QErrorMessage_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QErrorMessage_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QErrorMessage_TabletEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QErrorMessage_TabletEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QErrorMessage_WheelEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QErrorMessage_WheelEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QErrorMessage_TimerEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QErrorMessage_TimerEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::timerEvent(static_cast<QTimerEvent*>(event));
}

void QErrorMessage_ChildEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QErrorMessage_ChildEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::childEvent(static_cast<QChildEvent*>(event));
}

void QErrorMessage_CustomEvent(void* ptr, void* event){
	static_cast<MyQErrorMessage*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QErrorMessage_CustomEventDefault(void* ptr, void* event){
	static_cast<QErrorMessage*>(ptr)->QErrorMessage::customEvent(static_cast<QEvent*>(event));
}

class MyQFileDialog: public QFileDialog {
public:
	MyQFileDialog(QWidget *parent, Qt::WindowFlags flags) : QFileDialog(parent, flags) {};
	MyQFileDialog(QWidget *parent, const QString &caption, const QString &directory, const QString &filter) : QFileDialog(parent, caption, directory, filter) {};
	void accept() { if (!callbackQFileDialogAccept(this, this->objectName().toUtf8().data())) { QFileDialog::accept(); }; };
	void changeEvent(QEvent * e) { callbackQFileDialogChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_CurrentChanged(const QString & path) { callbackQFileDialogCurrentChanged(this, this->objectName().toUtf8().data(), path.toUtf8().data()); };
	void Signal_CurrentUrlChanged(const QUrl & url) { callbackQFileDialogCurrentUrlChanged(this, this->objectName().toUtf8().data(), new QUrl(url)); };
	void Signal_DirectoryEntered(const QString & directory) { callbackQFileDialogDirectoryEntered(this, this->objectName().toUtf8().data(), directory.toUtf8().data()); };
	void Signal_DirectoryUrlEntered(const QUrl & directory) { callbackQFileDialogDirectoryUrlEntered(this, this->objectName().toUtf8().data(), new QUrl(directory)); };
	void done(int result) { if (!callbackQFileDialogDone(this, this->objectName().toUtf8().data(), result)) { QFileDialog::done(result); }; };
	void Signal_FileSelected(const QString & file) { callbackQFileDialogFileSelected(this, this->objectName().toUtf8().data(), file.toUtf8().data()); };
	void Signal_FilesSelected(const QStringList & selected) { callbackQFileDialogFilesSelected(this, this->objectName().toUtf8().data(), selected.join("|").toUtf8().data()); };
	void Signal_FilterSelected(const QString & filter) { callbackQFileDialogFilterSelected(this, this->objectName().toUtf8().data(), filter.toUtf8().data()); };
	void setVisible(bool visible) { if (!callbackQFileDialogSetVisible(this, this->objectName().toUtf8().data(), visible)) { QFileDialog::setVisible(visible); }; };
	void Signal_UrlSelected(const QUrl & url) { callbackQFileDialogUrlSelected(this, this->objectName().toUtf8().data(), new QUrl(url)); };
	void closeEvent(QCloseEvent * e) { callbackQFileDialogCloseEvent(this, this->objectName().toUtf8().data(), e); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQFileDialogContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQFileDialogKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void reject() { if (!callbackQFileDialogReject(this, this->objectName().toUtf8().data())) { QFileDialog::reject(); }; };
	void resizeEvent(QResizeEvent * v) { callbackQFileDialogResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void showEvent(QShowEvent * event) { callbackQFileDialogShowEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQFileDialogActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQFileDialogDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQFileDialogDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQFileDialogDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQFileDialogDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQFileDialogEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQFileDialogFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQFileDialogFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQFileDialogHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQFileDialogLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQFileDialogMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQFileDialogPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQFileDialogInitPainter(const_cast<MyQFileDialog*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQFileDialogInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQFileDialogKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQFileDialogMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQFileDialogMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQFileDialogMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQFileDialogMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQFileDialogTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQFileDialogWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQFileDialogTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQFileDialogChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQFileDialogCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QFileDialog_NewQFileDialog(void* parent, int flags){
	return new MyQFileDialog(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(flags));
}

int QFileDialog_AcceptMode(void* ptr){
	return static_cast<QFileDialog*>(ptr)->acceptMode();
}

int QFileDialog_ConfirmOverwrite(void* ptr){
	return static_cast<QFileDialog*>(ptr)->confirmOverwrite();
}

char* QFileDialog_DefaultSuffix(void* ptr){
	return static_cast<QFileDialog*>(ptr)->defaultSuffix().toUtf8().data();
}

int QFileDialog_FileMode(void* ptr){
	return static_cast<QFileDialog*>(ptr)->fileMode();
}

int QFileDialog_IsNameFilterDetailsVisible(void* ptr){
	return static_cast<QFileDialog*>(ptr)->isNameFilterDetailsVisible();
}

int QFileDialog_IsReadOnly(void* ptr){
	return static_cast<QFileDialog*>(ptr)->isReadOnly();
}

int QFileDialog_Options(void* ptr){
	return static_cast<QFileDialog*>(ptr)->options();
}

int QFileDialog_ResolveSymlinks(void* ptr){
	return static_cast<QFileDialog*>(ptr)->resolveSymlinks();
}

void QFileDialog_SetAcceptMode(void* ptr, int mode){
	static_cast<QFileDialog*>(ptr)->setAcceptMode(static_cast<QFileDialog::AcceptMode>(mode));
}

void QFileDialog_SetConfirmOverwrite(void* ptr, int enabled){
	static_cast<QFileDialog*>(ptr)->setConfirmOverwrite(enabled != 0);
}

void QFileDialog_SetDefaultSuffix(void* ptr, char* suffix){
	static_cast<QFileDialog*>(ptr)->setDefaultSuffix(QString(suffix));
}

void QFileDialog_SetFileMode(void* ptr, int mode){
	static_cast<QFileDialog*>(ptr)->setFileMode(static_cast<QFileDialog::FileMode>(mode));
}

void QFileDialog_SetNameFilterDetailsVisible(void* ptr, int enabled){
	static_cast<QFileDialog*>(ptr)->setNameFilterDetailsVisible(enabled != 0);
}

void QFileDialog_SetOptions(void* ptr, int options){
	static_cast<QFileDialog*>(ptr)->setOptions(static_cast<QFileDialog::Option>(options));
}

void QFileDialog_SetReadOnly(void* ptr, int enabled){
	static_cast<QFileDialog*>(ptr)->setReadOnly(enabled != 0);
}

void QFileDialog_SetResolveSymlinks(void* ptr, int enabled){
	static_cast<QFileDialog*>(ptr)->setResolveSymlinks(enabled != 0);
}

void QFileDialog_SetViewMode(void* ptr, int mode){
	static_cast<QFileDialog*>(ptr)->setViewMode(static_cast<QFileDialog::ViewMode>(mode));
}

int QFileDialog_ViewMode(void* ptr){
	return static_cast<QFileDialog*>(ptr)->viewMode();
}

void* QFileDialog_NewQFileDialog2(void* parent, char* caption, char* directory, char* filter){
	return new MyQFileDialog(static_cast<QWidget*>(parent), QString(caption), QString(directory), QString(filter));
}

void QFileDialog_Accept(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQFileDialog*>(ptr), "accept");
}

void QFileDialog_AcceptDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QFileDialog*>(ptr), "accept");
}

void QFileDialog_ChangeEvent(void* ptr, void* e){
	static_cast<MyQFileDialog*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QFileDialog_ChangeEventDefault(void* ptr, void* e){
	static_cast<QFileDialog*>(ptr)->QFileDialog::changeEvent(static_cast<QEvent*>(e));
}

void QFileDialog_ConnectCurrentChanged(void* ptr){
	QObject::connect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QString &)>(&QFileDialog::currentChanged), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QString &)>(&MyQFileDialog::Signal_CurrentChanged));;
}

void QFileDialog_DisconnectCurrentChanged(void* ptr){
	QObject::disconnect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QString &)>(&QFileDialog::currentChanged), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QString &)>(&MyQFileDialog::Signal_CurrentChanged));;
}

void QFileDialog_CurrentChanged(void* ptr, char* path){
	static_cast<QFileDialog*>(ptr)->currentChanged(QString(path));
}

void QFileDialog_ConnectCurrentUrlChanged(void* ptr){
	QObject::connect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QUrl &)>(&QFileDialog::currentUrlChanged), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QUrl &)>(&MyQFileDialog::Signal_CurrentUrlChanged));;
}

void QFileDialog_DisconnectCurrentUrlChanged(void* ptr){
	QObject::disconnect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QUrl &)>(&QFileDialog::currentUrlChanged), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QUrl &)>(&MyQFileDialog::Signal_CurrentUrlChanged));;
}

void QFileDialog_CurrentUrlChanged(void* ptr, void* url){
	static_cast<QFileDialog*>(ptr)->currentUrlChanged(*static_cast<QUrl*>(url));
}

void* QFileDialog_Directory(void* ptr){
	return new QDir(static_cast<QFileDialog*>(ptr)->directory());
}

void QFileDialog_ConnectDirectoryEntered(void* ptr){
	QObject::connect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QString &)>(&QFileDialog::directoryEntered), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QString &)>(&MyQFileDialog::Signal_DirectoryEntered));;
}

void QFileDialog_DisconnectDirectoryEntered(void* ptr){
	QObject::disconnect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QString &)>(&QFileDialog::directoryEntered), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QString &)>(&MyQFileDialog::Signal_DirectoryEntered));;
}

void QFileDialog_DirectoryEntered(void* ptr, char* directory){
	static_cast<QFileDialog*>(ptr)->directoryEntered(QString(directory));
}

void* QFileDialog_DirectoryUrl(void* ptr){
	return new QUrl(static_cast<QFileDialog*>(ptr)->directoryUrl());
}

void QFileDialog_ConnectDirectoryUrlEntered(void* ptr){
	QObject::connect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QUrl &)>(&QFileDialog::directoryUrlEntered), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QUrl &)>(&MyQFileDialog::Signal_DirectoryUrlEntered));;
}

void QFileDialog_DisconnectDirectoryUrlEntered(void* ptr){
	QObject::disconnect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QUrl &)>(&QFileDialog::directoryUrlEntered), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QUrl &)>(&MyQFileDialog::Signal_DirectoryUrlEntered));;
}

void QFileDialog_DirectoryUrlEntered(void* ptr, void* directory){
	static_cast<QFileDialog*>(ptr)->directoryUrlEntered(*static_cast<QUrl*>(directory));
}

void QFileDialog_Done(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<MyQFileDialog*>(ptr), "done", Q_ARG(int, result));
}

void QFileDialog_DoneDefault(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<QFileDialog*>(ptr), "done", Q_ARG(int, result));
}

void QFileDialog_ConnectFileSelected(void* ptr){
	QObject::connect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QString &)>(&QFileDialog::fileSelected), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QString &)>(&MyQFileDialog::Signal_FileSelected));;
}

void QFileDialog_DisconnectFileSelected(void* ptr){
	QObject::disconnect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QString &)>(&QFileDialog::fileSelected), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QString &)>(&MyQFileDialog::Signal_FileSelected));;
}

void QFileDialog_FileSelected(void* ptr, char* file){
	static_cast<QFileDialog*>(ptr)->fileSelected(QString(file));
}

void QFileDialog_ConnectFilesSelected(void* ptr){
	QObject::connect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QStringList &)>(&QFileDialog::filesSelected), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QStringList &)>(&MyQFileDialog::Signal_FilesSelected));;
}

void QFileDialog_DisconnectFilesSelected(void* ptr){
	QObject::disconnect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QStringList &)>(&QFileDialog::filesSelected), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QStringList &)>(&MyQFileDialog::Signal_FilesSelected));;
}

void QFileDialog_FilesSelected(void* ptr, char* selected){
	static_cast<QFileDialog*>(ptr)->filesSelected(QString(selected).split("|", QString::SkipEmptyParts));
}

int QFileDialog_Filter(void* ptr){
	return static_cast<QFileDialog*>(ptr)->filter();
}

void QFileDialog_ConnectFilterSelected(void* ptr){
	QObject::connect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QString &)>(&QFileDialog::filterSelected), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QString &)>(&MyQFileDialog::Signal_FilterSelected));;
}

void QFileDialog_DisconnectFilterSelected(void* ptr){
	QObject::disconnect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QString &)>(&QFileDialog::filterSelected), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QString &)>(&MyQFileDialog::Signal_FilterSelected));;
}

void QFileDialog_FilterSelected(void* ptr, char* filter){
	static_cast<QFileDialog*>(ptr)->filterSelected(QString(filter));
}

char* QFileDialog_QFileDialog_GetExistingDirectory(void* parent, char* caption, char* dir, int options){
	return QFileDialog::getExistingDirectory(static_cast<QWidget*>(parent), QString(caption), QString(dir), static_cast<QFileDialog::Option>(options)).toUtf8().data();
}

void* QFileDialog_QFileDialog_GetExistingDirectoryUrl(void* parent, char* caption, void* dir, int options, char* supportedSchemes){
	return new QUrl(QFileDialog::getExistingDirectoryUrl(static_cast<QWidget*>(parent), QString(caption), *static_cast<QUrl*>(dir), static_cast<QFileDialog::Option>(options), QString(supportedSchemes).split("|", QString::SkipEmptyParts)));
}

char* QFileDialog_QFileDialog_GetOpenFileName(void* parent, char* caption, char* dir, char* filter, char* selectedFilter, int options){
	return QFileDialog::getOpenFileName(static_cast<QWidget*>(parent), QString(caption), QString(dir), QString(filter), new QString(selectedFilter), static_cast<QFileDialog::Option>(options)).toUtf8().data();
}

char* QFileDialog_QFileDialog_GetOpenFileNames(void* parent, char* caption, char* dir, char* filter, char* selectedFilter, int options){
	return QFileDialog::getOpenFileNames(static_cast<QWidget*>(parent), QString(caption), QString(dir), QString(filter), new QString(selectedFilter), static_cast<QFileDialog::Option>(options)).join("|").toUtf8().data();
}

void* QFileDialog_QFileDialog_GetOpenFileUrl(void* parent, char* caption, void* dir, char* filter, char* selectedFilter, int options, char* supportedSchemes){
	return new QUrl(QFileDialog::getOpenFileUrl(static_cast<QWidget*>(parent), QString(caption), *static_cast<QUrl*>(dir), QString(filter), new QString(selectedFilter), static_cast<QFileDialog::Option>(options), QString(supportedSchemes).split("|", QString::SkipEmptyParts)));
}

char* QFileDialog_QFileDialog_GetSaveFileName(void* parent, char* caption, char* dir, char* filter, char* selectedFilter, int options){
	return QFileDialog::getSaveFileName(static_cast<QWidget*>(parent), QString(caption), QString(dir), QString(filter), new QString(selectedFilter), static_cast<QFileDialog::Option>(options)).toUtf8().data();
}

void* QFileDialog_QFileDialog_GetSaveFileUrl(void* parent, char* caption, void* dir, char* filter, char* selectedFilter, int options, char* supportedSchemes){
	return new QUrl(QFileDialog::getSaveFileUrl(static_cast<QWidget*>(parent), QString(caption), *static_cast<QUrl*>(dir), QString(filter), new QString(selectedFilter), static_cast<QFileDialog::Option>(options), QString(supportedSchemes).split("|", QString::SkipEmptyParts)));
}

char* QFileDialog_History(void* ptr){
	return static_cast<QFileDialog*>(ptr)->history().join("|").toUtf8().data();
}

void* QFileDialog_IconProvider(void* ptr){
	return static_cast<QFileDialog*>(ptr)->iconProvider();
}

void* QFileDialog_ItemDelegate(void* ptr){
	return static_cast<QFileDialog*>(ptr)->itemDelegate();
}

char* QFileDialog_LabelText(void* ptr, int label){
	return static_cast<QFileDialog*>(ptr)->labelText(static_cast<QFileDialog::DialogLabel>(label)).toUtf8().data();
}

char* QFileDialog_MimeTypeFilters(void* ptr){
	return static_cast<QFileDialog*>(ptr)->mimeTypeFilters().join("|").toUtf8().data();
}

char* QFileDialog_NameFilters(void* ptr){
	return static_cast<QFileDialog*>(ptr)->nameFilters().join("|").toUtf8().data();
}

void QFileDialog_Open(void* ptr, void* receiver, char* member){
	static_cast<QFileDialog*>(ptr)->open(static_cast<QObject*>(receiver), const_cast<const char*>(member));
}

void* QFileDialog_ProxyModel(void* ptr){
	return static_cast<QFileDialog*>(ptr)->proxyModel();
}

int QFileDialog_RestoreState(void* ptr, char* state){
	return static_cast<QFileDialog*>(ptr)->restoreState(QByteArray(state));
}

char* QFileDialog_SaveState(void* ptr){
	return QString(static_cast<QFileDialog*>(ptr)->saveState()).toUtf8().data();
}

void QFileDialog_SelectFile(void* ptr, char* filename){
	static_cast<QFileDialog*>(ptr)->selectFile(QString(filename));
}

void QFileDialog_SelectMimeTypeFilter(void* ptr, char* filter){
	static_cast<QFileDialog*>(ptr)->selectMimeTypeFilter(QString(filter));
}

void QFileDialog_SelectNameFilter(void* ptr, char* filter){
	static_cast<QFileDialog*>(ptr)->selectNameFilter(QString(filter));
}

void QFileDialog_SelectUrl(void* ptr, void* url){
	static_cast<QFileDialog*>(ptr)->selectUrl(*static_cast<QUrl*>(url));
}

char* QFileDialog_SelectedFiles(void* ptr){
	return static_cast<QFileDialog*>(ptr)->selectedFiles().join("|").toUtf8().data();
}

char* QFileDialog_SelectedNameFilter(void* ptr){
	return static_cast<QFileDialog*>(ptr)->selectedNameFilter().toUtf8().data();
}

void QFileDialog_SetDirectory2(void* ptr, void* directory){
	static_cast<QFileDialog*>(ptr)->setDirectory(*static_cast<QDir*>(directory));
}

void QFileDialog_SetDirectory(void* ptr, char* directory){
	static_cast<QFileDialog*>(ptr)->setDirectory(QString(directory));
}

void QFileDialog_SetDirectoryUrl(void* ptr, void* directory){
	static_cast<QFileDialog*>(ptr)->setDirectoryUrl(*static_cast<QUrl*>(directory));
}

void QFileDialog_SetFilter(void* ptr, int filters){
	static_cast<QFileDialog*>(ptr)->setFilter(static_cast<QDir::Filter>(filters));
}

void QFileDialog_SetHistory(void* ptr, char* paths){
	static_cast<QFileDialog*>(ptr)->setHistory(QString(paths).split("|", QString::SkipEmptyParts));
}

void QFileDialog_SetIconProvider(void* ptr, void* provider){
	static_cast<QFileDialog*>(ptr)->setIconProvider(static_cast<QFileIconProvider*>(provider));
}

void QFileDialog_SetItemDelegate(void* ptr, void* delegate){
	static_cast<QFileDialog*>(ptr)->setItemDelegate(static_cast<QAbstractItemDelegate*>(delegate));
}

void QFileDialog_SetLabelText(void* ptr, int label, char* text){
	static_cast<QFileDialog*>(ptr)->setLabelText(static_cast<QFileDialog::DialogLabel>(label), QString(text));
}

void QFileDialog_SetMimeTypeFilters(void* ptr, char* filters){
	static_cast<QFileDialog*>(ptr)->setMimeTypeFilters(QString(filters).split("|", QString::SkipEmptyParts));
}

void QFileDialog_SetNameFilter(void* ptr, char* filter){
	static_cast<QFileDialog*>(ptr)->setNameFilter(QString(filter));
}

void QFileDialog_SetNameFilters(void* ptr, char* filters){
	static_cast<QFileDialog*>(ptr)->setNameFilters(QString(filters).split("|", QString::SkipEmptyParts));
}

void QFileDialog_SetOption(void* ptr, int option, int on){
	static_cast<QFileDialog*>(ptr)->setOption(static_cast<QFileDialog::Option>(option), on != 0);
}

void QFileDialog_SetProxyModel(void* ptr, void* proxyModel){
	static_cast<QFileDialog*>(ptr)->setProxyModel(static_cast<QAbstractProxyModel*>(proxyModel));
}

void QFileDialog_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQFileDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QFileDialog_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QFileDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

int QFileDialog_TestOption(void* ptr, int option){
	return static_cast<QFileDialog*>(ptr)->testOption(static_cast<QFileDialog::Option>(option));
}

void QFileDialog_ConnectUrlSelected(void* ptr){
	QObject::connect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QUrl &)>(&QFileDialog::urlSelected), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QUrl &)>(&MyQFileDialog::Signal_UrlSelected));;
}

void QFileDialog_DisconnectUrlSelected(void* ptr){
	QObject::disconnect(static_cast<QFileDialog*>(ptr), static_cast<void (QFileDialog::*)(const QUrl &)>(&QFileDialog::urlSelected), static_cast<MyQFileDialog*>(ptr), static_cast<void (MyQFileDialog::*)(const QUrl &)>(&MyQFileDialog::Signal_UrlSelected));;
}

void QFileDialog_UrlSelected(void* ptr, void* url){
	static_cast<QFileDialog*>(ptr)->urlSelected(*static_cast<QUrl*>(url));
}

void QFileDialog_DestroyQFileDialog(void* ptr){
	static_cast<QFileDialog*>(ptr)->~QFileDialog();
}

void QFileDialog_CloseEvent(void* ptr, void* e){
	static_cast<MyQFileDialog*>(ptr)->closeEvent(static_cast<QCloseEvent*>(e));
}

void QFileDialog_CloseEventDefault(void* ptr, void* e){
	static_cast<QFileDialog*>(ptr)->QFileDialog::closeEvent(static_cast<QCloseEvent*>(e));
}

void QFileDialog_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQFileDialog*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QFileDialog_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QFileDialog*>(ptr)->QFileDialog::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QFileDialog_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQFileDialog*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QFileDialog_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QFileDialog*>(ptr)->QFileDialog::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QFileDialog_Reject(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQFileDialog*>(ptr), "reject");
}

void QFileDialog_RejectDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QFileDialog*>(ptr), "reject");
}

void QFileDialog_ResizeEvent(void* ptr, void* v){
	static_cast<MyQFileDialog*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QFileDialog_ResizeEventDefault(void* ptr, void* v){
	static_cast<QFileDialog*>(ptr)->QFileDialog::resizeEvent(static_cast<QResizeEvent*>(v));
}

void QFileDialog_ShowEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QFileDialog_ShowEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::showEvent(static_cast<QShowEvent*>(event));
}

void QFileDialog_ActionEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QFileDialog_ActionEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::actionEvent(static_cast<QActionEvent*>(event));
}

void QFileDialog_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFileDialog_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFileDialog_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFileDialog_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFileDialog_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFileDialog_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFileDialog_DropEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QFileDialog_DropEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::dropEvent(static_cast<QDropEvent*>(event));
}

void QFileDialog_EnterEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QFileDialog_EnterEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::enterEvent(static_cast<QEvent*>(event));
}

void QFileDialog_FocusInEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QFileDialog_FocusInEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QFileDialog_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QFileDialog_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QFileDialog_HideEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QFileDialog_HideEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::hideEvent(static_cast<QHideEvent*>(event));
}

void QFileDialog_LeaveEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QFileDialog_LeaveEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::leaveEvent(static_cast<QEvent*>(event));
}

void QFileDialog_MoveEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QFileDialog_MoveEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::moveEvent(static_cast<QMoveEvent*>(event));
}

void QFileDialog_PaintEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QFileDialog_PaintEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::paintEvent(static_cast<QPaintEvent*>(event));
}

void QFileDialog_InitPainter(void* ptr, void* painter){
	static_cast<MyQFileDialog*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QFileDialog_InitPainterDefault(void* ptr, void* painter){
	static_cast<QFileDialog*>(ptr)->QFileDialog::initPainter(static_cast<QPainter*>(painter));
}

void QFileDialog_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QFileDialog_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QFileDialog_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QFileDialog_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QFileDialog_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFileDialog_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFileDialog_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFileDialog_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFileDialog_MousePressEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QFileDialog_MousePressEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QFileDialog_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QFileDialog_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QFileDialog_TabletEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFileDialog_TabletEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFileDialog_WheelEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QFileDialog_WheelEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QFileDialog_TimerEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QFileDialog_TimerEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::timerEvent(static_cast<QTimerEvent*>(event));
}

void QFileDialog_ChildEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QFileDialog_ChildEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::childEvent(static_cast<QChildEvent*>(event));
}

void QFileDialog_CustomEvent(void* ptr, void* event){
	static_cast<MyQFileDialog*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QFileDialog_CustomEventDefault(void* ptr, void* event){
	static_cast<QFileDialog*>(ptr)->QFileDialog::customEvent(static_cast<QEvent*>(event));
}

class MyQFileIconProvider: public QFileIconProvider {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQFileIconProvider() : QFileIconProvider() {};
};

void* QFileIconProvider_NewQFileIconProvider(){
	return new MyQFileIconProvider();
}

void* QFileIconProvider_Icon(void* ptr, int ty){
	return new QIcon(static_cast<QFileIconProvider*>(ptr)->icon(static_cast<QFileIconProvider::IconType>(ty)));
}

int QFileIconProvider_Options(void* ptr){
	return static_cast<QFileIconProvider*>(ptr)->options();
}

void QFileIconProvider_SetOptions(void* ptr, int options){
	static_cast<QFileIconProvider*>(ptr)->setOptions(static_cast<QFileIconProvider::Option>(options));
}

char* QFileIconProvider_Type(void* ptr, void* info){
	return static_cast<QFileIconProvider*>(ptr)->type(*static_cast<QFileInfo*>(info)).toUtf8().data();
}

void QFileIconProvider_DestroyQFileIconProvider(void* ptr){
	static_cast<QFileIconProvider*>(ptr)->~QFileIconProvider();
}

char* QFileIconProvider_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQFileIconProvider*>(static_cast<QFileIconProvider*>(ptr))) {
		return static_cast<MyQFileIconProvider*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QFileIconProvider_BASE").toUtf8().data();
}

void QFileIconProvider_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQFileIconProvider*>(static_cast<QFileIconProvider*>(ptr))) {
		static_cast<MyQFileIconProvider*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQFileSystemModel: public QFileSystemModel {
public:
	MyQFileSystemModel(QObject *parent) : QFileSystemModel(parent) {};
	void Signal_DirectoryLoaded(const QString & path) { callbackQFileSystemModelDirectoryLoaded(this, this->objectName().toUtf8().data(), path.toUtf8().data()); };
	void Signal_FileRenamed(const QString & path, const QString & oldName, const QString & newName) { callbackQFileSystemModelFileRenamed(this, this->objectName().toUtf8().data(), path.toUtf8().data(), oldName.toUtf8().data(), newName.toUtf8().data()); };
	void Signal_RootPathChanged(const QString & newPath) { callbackQFileSystemModelRootPathChanged(this, this->objectName().toUtf8().data(), newPath.toUtf8().data()); };
	void sort(int column, Qt::SortOrder order) { callbackQFileSystemModelSort(this, this->objectName().toUtf8().data(), column, order); };
	void timerEvent(QTimerEvent * event) { callbackQFileSystemModelTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void revert() { if (!callbackQFileSystemModelRevert(this, this->objectName().toUtf8().data())) { QFileSystemModel::revert(); }; };
	void childEvent(QChildEvent * event) { callbackQFileSystemModelChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQFileSystemModelCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QFileSystemModel_FilePathRole_Type(){
	return QFileSystemModel::FilePathRole;
}

int QFileSystemModel_FileNameRole_Type(){
	return QFileSystemModel::FileNameRole;
}

int QFileSystemModel_FilePermissions_Type(){
	return QFileSystemModel::FilePermissions;
}

int QFileSystemModel_IsReadOnly(void* ptr){
	return static_cast<QFileSystemModel*>(ptr)->isReadOnly();
}

int QFileSystemModel_NameFilterDisables(void* ptr){
	return static_cast<QFileSystemModel*>(ptr)->nameFilterDisables();
}

int QFileSystemModel_ResolveSymlinks(void* ptr){
	return static_cast<QFileSystemModel*>(ptr)->resolveSymlinks();
}

int QFileSystemModel_Rmdir(void* ptr, void* index){
	return static_cast<QFileSystemModel*>(ptr)->rmdir(*static_cast<QModelIndex*>(index));
}

void QFileSystemModel_SetNameFilterDisables(void* ptr, int enable){
	static_cast<QFileSystemModel*>(ptr)->setNameFilterDisables(enable != 0);
}

void QFileSystemModel_SetReadOnly(void* ptr, int enable){
	static_cast<QFileSystemModel*>(ptr)->setReadOnly(enable != 0);
}

void QFileSystemModel_SetResolveSymlinks(void* ptr, int enable){
	static_cast<QFileSystemModel*>(ptr)->setResolveSymlinks(enable != 0);
}

void* QFileSystemModel_NewQFileSystemModel(void* parent){
	return new MyQFileSystemModel(static_cast<QObject*>(parent));
}

int QFileSystemModel_CanFetchMore(void* ptr, void* parent){
	return static_cast<QFileSystemModel*>(ptr)->canFetchMore(*static_cast<QModelIndex*>(parent));
}

int QFileSystemModel_ColumnCount(void* ptr, void* parent){
	return static_cast<QFileSystemModel*>(ptr)->columnCount(*static_cast<QModelIndex*>(parent));
}

void* QFileSystemModel_Data(void* ptr, void* index, int role){
	return new QVariant(static_cast<QFileSystemModel*>(ptr)->data(*static_cast<QModelIndex*>(index), role));
}

void QFileSystemModel_ConnectDirectoryLoaded(void* ptr){
	QObject::connect(static_cast<QFileSystemModel*>(ptr), static_cast<void (QFileSystemModel::*)(const QString &)>(&QFileSystemModel::directoryLoaded), static_cast<MyQFileSystemModel*>(ptr), static_cast<void (MyQFileSystemModel::*)(const QString &)>(&MyQFileSystemModel::Signal_DirectoryLoaded));;
}

void QFileSystemModel_DisconnectDirectoryLoaded(void* ptr){
	QObject::disconnect(static_cast<QFileSystemModel*>(ptr), static_cast<void (QFileSystemModel::*)(const QString &)>(&QFileSystemModel::directoryLoaded), static_cast<MyQFileSystemModel*>(ptr), static_cast<void (MyQFileSystemModel::*)(const QString &)>(&MyQFileSystemModel::Signal_DirectoryLoaded));;
}

void QFileSystemModel_DirectoryLoaded(void* ptr, char* path){
	static_cast<QFileSystemModel*>(ptr)->directoryLoaded(QString(path));
}

int QFileSystemModel_DropMimeData(void* ptr, void* data, int action, int row, int column, void* parent){
	return static_cast<QFileSystemModel*>(ptr)->dropMimeData(static_cast<QMimeData*>(data), static_cast<Qt::DropAction>(action), row, column, *static_cast<QModelIndex*>(parent));
}

int QFileSystemModel_Event(void* ptr, void* event){
	return static_cast<QFileSystemModel*>(ptr)->event(static_cast<QEvent*>(event));
}

void* QFileSystemModel_FileIcon(void* ptr, void* index){
	return new QIcon(static_cast<QFileSystemModel*>(ptr)->fileIcon(*static_cast<QModelIndex*>(index)));
}

void* QFileSystemModel_FileInfo(void* ptr, void* index){
	return new QFileInfo(static_cast<QFileSystemModel*>(ptr)->fileInfo(*static_cast<QModelIndex*>(index)));
}

char* QFileSystemModel_FileName(void* ptr, void* index){
	return static_cast<QFileSystemModel*>(ptr)->fileName(*static_cast<QModelIndex*>(index)).toUtf8().data();
}

char* QFileSystemModel_FilePath(void* ptr, void* index){
	return static_cast<QFileSystemModel*>(ptr)->filePath(*static_cast<QModelIndex*>(index)).toUtf8().data();
}

void QFileSystemModel_ConnectFileRenamed(void* ptr){
	QObject::connect(static_cast<QFileSystemModel*>(ptr), static_cast<void (QFileSystemModel::*)(const QString &, const QString &, const QString &)>(&QFileSystemModel::fileRenamed), static_cast<MyQFileSystemModel*>(ptr), static_cast<void (MyQFileSystemModel::*)(const QString &, const QString &, const QString &)>(&MyQFileSystemModel::Signal_FileRenamed));;
}

void QFileSystemModel_DisconnectFileRenamed(void* ptr){
	QObject::disconnect(static_cast<QFileSystemModel*>(ptr), static_cast<void (QFileSystemModel::*)(const QString &, const QString &, const QString &)>(&QFileSystemModel::fileRenamed), static_cast<MyQFileSystemModel*>(ptr), static_cast<void (MyQFileSystemModel::*)(const QString &, const QString &, const QString &)>(&MyQFileSystemModel::Signal_FileRenamed));;
}

void QFileSystemModel_FileRenamed(void* ptr, char* path, char* oldName, char* newName){
	static_cast<QFileSystemModel*>(ptr)->fileRenamed(QString(path), QString(oldName), QString(newName));
}

int QFileSystemModel_Filter(void* ptr){
	return static_cast<QFileSystemModel*>(ptr)->filter();
}

int QFileSystemModel_Flags(void* ptr, void* index){
	return static_cast<QFileSystemModel*>(ptr)->flags(*static_cast<QModelIndex*>(index));
}

int QFileSystemModel_HasChildren(void* ptr, void* parent){
	return static_cast<QFileSystemModel*>(ptr)->hasChildren(*static_cast<QModelIndex*>(parent));
}

void* QFileSystemModel_HeaderData(void* ptr, int section, int orientation, int role){
	return new QVariant(static_cast<QFileSystemModel*>(ptr)->headerData(section, static_cast<Qt::Orientation>(orientation), role));
}

void* QFileSystemModel_IconProvider(void* ptr){
	return static_cast<QFileSystemModel*>(ptr)->iconProvider();
}

int QFileSystemModel_IsDir(void* ptr, void* index){
	return static_cast<QFileSystemModel*>(ptr)->isDir(*static_cast<QModelIndex*>(index));
}

void* QFileSystemModel_LastModified(void* ptr, void* index){
	return new QDateTime(static_cast<QFileSystemModel*>(ptr)->lastModified(*static_cast<QModelIndex*>(index)));
}

char* QFileSystemModel_MimeTypes(void* ptr){
	return static_cast<QFileSystemModel*>(ptr)->mimeTypes().join("|").toUtf8().data();
}

void* QFileSystemModel_MyComputer(void* ptr, int role){
	return new QVariant(static_cast<QFileSystemModel*>(ptr)->myComputer(role));
}

char* QFileSystemModel_NameFilters(void* ptr){
	return static_cast<QFileSystemModel*>(ptr)->nameFilters().join("|").toUtf8().data();
}

void* QFileSystemModel_RootDirectory(void* ptr){
	return new QDir(static_cast<QFileSystemModel*>(ptr)->rootDirectory());
}

char* QFileSystemModel_RootPath(void* ptr){
	return static_cast<QFileSystemModel*>(ptr)->rootPath().toUtf8().data();
}

void QFileSystemModel_ConnectRootPathChanged(void* ptr){
	QObject::connect(static_cast<QFileSystemModel*>(ptr), static_cast<void (QFileSystemModel::*)(const QString &)>(&QFileSystemModel::rootPathChanged), static_cast<MyQFileSystemModel*>(ptr), static_cast<void (MyQFileSystemModel::*)(const QString &)>(&MyQFileSystemModel::Signal_RootPathChanged));;
}

void QFileSystemModel_DisconnectRootPathChanged(void* ptr){
	QObject::disconnect(static_cast<QFileSystemModel*>(ptr), static_cast<void (QFileSystemModel::*)(const QString &)>(&QFileSystemModel::rootPathChanged), static_cast<MyQFileSystemModel*>(ptr), static_cast<void (MyQFileSystemModel::*)(const QString &)>(&MyQFileSystemModel::Signal_RootPathChanged));;
}

void QFileSystemModel_RootPathChanged(void* ptr, char* newPath){
	static_cast<QFileSystemModel*>(ptr)->rootPathChanged(QString(newPath));
}

int QFileSystemModel_RowCount(void* ptr, void* parent){
	return static_cast<QFileSystemModel*>(ptr)->rowCount(*static_cast<QModelIndex*>(parent));
}

int QFileSystemModel_SetData(void* ptr, void* idx, void* value, int role){
	return static_cast<QFileSystemModel*>(ptr)->setData(*static_cast<QModelIndex*>(idx), *static_cast<QVariant*>(value), role);
}

void QFileSystemModel_SetFilter(void* ptr, int filters){
	static_cast<QFileSystemModel*>(ptr)->setFilter(static_cast<QDir::Filter>(filters));
}

void QFileSystemModel_SetIconProvider(void* ptr, void* provider){
	static_cast<QFileSystemModel*>(ptr)->setIconProvider(static_cast<QFileIconProvider*>(provider));
}

void QFileSystemModel_SetNameFilters(void* ptr, char* filters){
	static_cast<QFileSystemModel*>(ptr)->setNameFilters(QString(filters).split("|", QString::SkipEmptyParts));
}

long long QFileSystemModel_Size(void* ptr, void* index){
	return static_cast<long long>(static_cast<QFileSystemModel*>(ptr)->size(*static_cast<QModelIndex*>(index)));
}

void QFileSystemModel_Sort(void* ptr, int column, int order){
	static_cast<MyQFileSystemModel*>(ptr)->sort(column, static_cast<Qt::SortOrder>(order));
}

void QFileSystemModel_SortDefault(void* ptr, int column, int order){
	static_cast<QFileSystemModel*>(ptr)->QFileSystemModel::sort(column, static_cast<Qt::SortOrder>(order));
}

int QFileSystemModel_SupportedDropActions(void* ptr){
	return static_cast<QFileSystemModel*>(ptr)->supportedDropActions();
}

void QFileSystemModel_TimerEvent(void* ptr, void* event){
	static_cast<MyQFileSystemModel*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QFileSystemModel_TimerEventDefault(void* ptr, void* event){
	static_cast<QFileSystemModel*>(ptr)->QFileSystemModel::timerEvent(static_cast<QTimerEvent*>(event));
}

char* QFileSystemModel_Type(void* ptr, void* index){
	return static_cast<QFileSystemModel*>(ptr)->type(*static_cast<QModelIndex*>(index)).toUtf8().data();
}

void QFileSystemModel_DestroyQFileSystemModel(void* ptr){
	static_cast<QFileSystemModel*>(ptr)->~QFileSystemModel();
}

void QFileSystemModel_Revert(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQFileSystemModel*>(ptr), "revert");
}

void QFileSystemModel_RevertDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QFileSystemModel*>(ptr), "revert");
}

void QFileSystemModel_ChildEvent(void* ptr, void* event){
	static_cast<MyQFileSystemModel*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QFileSystemModel_ChildEventDefault(void* ptr, void* event){
	static_cast<QFileSystemModel*>(ptr)->QFileSystemModel::childEvent(static_cast<QChildEvent*>(event));
}

void QFileSystemModel_CustomEvent(void* ptr, void* event){
	static_cast<MyQFileSystemModel*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QFileSystemModel_CustomEventDefault(void* ptr, void* event){
	static_cast<QFileSystemModel*>(ptr)->QFileSystemModel::customEvent(static_cast<QEvent*>(event));
}

class MyQFocusFrame: public QFocusFrame {
public:
	MyQFocusFrame(QWidget *parent) : QFocusFrame(parent) {};
	void paintEvent(QPaintEvent * v) { callbackQFocusFramePaintEvent(this, this->objectName().toUtf8().data(), v); };
	void actionEvent(QActionEvent * event) { callbackQFocusFrameActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQFocusFrameDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQFocusFrameDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQFocusFrameDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQFocusFrameDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQFocusFrameEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQFocusFrameFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQFocusFrameFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQFocusFrameHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQFocusFrameLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQFocusFrameMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQFocusFrameSetVisible(this, this->objectName().toUtf8().data(), visible)) { QFocusFrame::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQFocusFrameShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQFocusFrameChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQFocusFrameCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQFocusFrameContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQFocusFrameInitPainter(const_cast<MyQFocusFrame*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQFocusFrameInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQFocusFrameKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQFocusFrameKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQFocusFrameMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQFocusFrameMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQFocusFrameMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQFocusFrameMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQFocusFrameResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQFocusFrameTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQFocusFrameWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQFocusFrameTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQFocusFrameChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQFocusFrameCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QFocusFrame_NewQFocusFrame(void* parent){
	return new MyQFocusFrame(static_cast<QWidget*>(parent));
}

int QFocusFrame_Event(void* ptr, void* e){
	return static_cast<QFocusFrame*>(ptr)->event(static_cast<QEvent*>(e));
}

int QFocusFrame_EventFilter(void* ptr, void* o, void* e){
	return static_cast<QFocusFrame*>(ptr)->eventFilter(static_cast<QObject*>(o), static_cast<QEvent*>(e));
}

void QFocusFrame_PaintEvent(void* ptr, void* v){
	static_cast<MyQFocusFrame*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QFocusFrame_PaintEventDefault(void* ptr, void* v){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::paintEvent(static_cast<QPaintEvent*>(v));
}

void QFocusFrame_SetWidget(void* ptr, void* widget){
	static_cast<QFocusFrame*>(ptr)->setWidget(static_cast<QWidget*>(widget));
}

void* QFocusFrame_Widget(void* ptr){
	return static_cast<QFocusFrame*>(ptr)->widget();
}

void QFocusFrame_DestroyQFocusFrame(void* ptr){
	static_cast<QFocusFrame*>(ptr)->~QFocusFrame();
}

void QFocusFrame_ActionEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QFocusFrame_ActionEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::actionEvent(static_cast<QActionEvent*>(event));
}

void QFocusFrame_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFocusFrame_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFocusFrame_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFocusFrame_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFocusFrame_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFocusFrame_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFocusFrame_DropEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QFocusFrame_DropEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::dropEvent(static_cast<QDropEvent*>(event));
}

void QFocusFrame_EnterEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QFocusFrame_EnterEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::enterEvent(static_cast<QEvent*>(event));
}

void QFocusFrame_FocusInEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QFocusFrame_FocusInEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QFocusFrame_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QFocusFrame_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QFocusFrame_HideEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QFocusFrame_HideEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::hideEvent(static_cast<QHideEvent*>(event));
}

void QFocusFrame_LeaveEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QFocusFrame_LeaveEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::leaveEvent(static_cast<QEvent*>(event));
}

void QFocusFrame_MoveEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QFocusFrame_MoveEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::moveEvent(static_cast<QMoveEvent*>(event));
}

void QFocusFrame_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQFocusFrame*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QFocusFrame_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QFocusFrame*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QFocusFrame_ShowEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QFocusFrame_ShowEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::showEvent(static_cast<QShowEvent*>(event));
}

void QFocusFrame_ChangeEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QFocusFrame_ChangeEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::changeEvent(static_cast<QEvent*>(event));
}

void QFocusFrame_CloseEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QFocusFrame_CloseEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::closeEvent(static_cast<QCloseEvent*>(event));
}

void QFocusFrame_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QFocusFrame_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QFocusFrame_InitPainter(void* ptr, void* painter){
	static_cast<MyQFocusFrame*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QFocusFrame_InitPainterDefault(void* ptr, void* painter){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::initPainter(static_cast<QPainter*>(painter));
}

void QFocusFrame_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QFocusFrame_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QFocusFrame_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QFocusFrame_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QFocusFrame_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QFocusFrame_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QFocusFrame_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFocusFrame_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFocusFrame_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFocusFrame_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFocusFrame_MousePressEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QFocusFrame_MousePressEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QFocusFrame_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QFocusFrame_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QFocusFrame_ResizeEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QFocusFrame_ResizeEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QFocusFrame_TabletEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFocusFrame_TabletEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFocusFrame_WheelEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QFocusFrame_WheelEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QFocusFrame_TimerEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QFocusFrame_TimerEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::timerEvent(static_cast<QTimerEvent*>(event));
}

void QFocusFrame_ChildEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QFocusFrame_ChildEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::childEvent(static_cast<QChildEvent*>(event));
}

void QFocusFrame_CustomEvent(void* ptr, void* event){
	static_cast<MyQFocusFrame*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QFocusFrame_CustomEventDefault(void* ptr, void* event){
	static_cast<QFocusFrame*>(ptr)->QFocusFrame::customEvent(static_cast<QEvent*>(event));
}

class MyQFontComboBox: public QFontComboBox {
public:
	MyQFontComboBox(QWidget *parent) : QFontComboBox(parent) {};
	void Signal_CurrentFontChanged(const QFont & font) { callbackQFontComboBoxCurrentFontChanged(this, this->objectName().toUtf8().data(), new QFont(font)); };
	void changeEvent(QEvent * e) { callbackQFontComboBoxChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQFontComboBoxContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void focusInEvent(QFocusEvent * e) { callbackQFontComboBoxFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQFontComboBoxFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void hideEvent(QHideEvent * e) { callbackQFontComboBoxHideEvent(this, this->objectName().toUtf8().data(), e); };
	void hidePopup() { callbackQFontComboBoxHidePopup(this, this->objectName().toUtf8().data()); };
	void inputMethodEvent(QInputMethodEvent * e) { callbackQFontComboBoxInputMethodEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQFontComboBoxKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQFontComboBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQFontComboBoxMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQFontComboBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * e) { callbackQFontComboBoxPaintEvent(this, this->objectName().toUtf8().data(), e); };
	void resizeEvent(QResizeEvent * e) { callbackQFontComboBoxResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void showEvent(QShowEvent * e) { callbackQFontComboBoxShowEvent(this, this->objectName().toUtf8().data(), e); };
	void showPopup() { callbackQFontComboBoxShowPopup(this, this->objectName().toUtf8().data()); };
	void wheelEvent(QWheelEvent * e) { callbackQFontComboBoxWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQFontComboBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQFontComboBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQFontComboBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQFontComboBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQFontComboBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQFontComboBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQFontComboBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQFontComboBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQFontComboBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QFontComboBox::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQFontComboBoxCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQFontComboBoxInitPainter(const_cast<MyQFontComboBox*>(this), this->objectName().toUtf8().data(), painter); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQFontComboBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQFontComboBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQFontComboBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQFontComboBoxTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQFontComboBoxChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQFontComboBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QFontComboBox_CurrentFont(void* ptr){
	return new QFont(static_cast<QFontComboBox*>(ptr)->currentFont());
}

int QFontComboBox_FontFilters(void* ptr){
	return static_cast<QFontComboBox*>(ptr)->fontFilters();
}

void QFontComboBox_SetCurrentFont(void* ptr, void* font){
	QMetaObject::invokeMethod(static_cast<QFontComboBox*>(ptr), "setCurrentFont", Q_ARG(QFont, *static_cast<QFont*>(font)));
}

void QFontComboBox_SetFontFilters(void* ptr, int filters){
	static_cast<QFontComboBox*>(ptr)->setFontFilters(static_cast<QFontComboBox::FontFilter>(filters));
}

void QFontComboBox_SetWritingSystem(void* ptr, int script){
	static_cast<QFontComboBox*>(ptr)->setWritingSystem(static_cast<QFontDatabase::WritingSystem>(script));
}

int QFontComboBox_WritingSystem(void* ptr){
	return static_cast<QFontComboBox*>(ptr)->writingSystem();
}

void* QFontComboBox_NewQFontComboBox(void* parent){
	return new MyQFontComboBox(static_cast<QWidget*>(parent));
}

void QFontComboBox_ConnectCurrentFontChanged(void* ptr){
	QObject::connect(static_cast<QFontComboBox*>(ptr), static_cast<void (QFontComboBox::*)(const QFont &)>(&QFontComboBox::currentFontChanged), static_cast<MyQFontComboBox*>(ptr), static_cast<void (MyQFontComboBox::*)(const QFont &)>(&MyQFontComboBox::Signal_CurrentFontChanged));;
}

void QFontComboBox_DisconnectCurrentFontChanged(void* ptr){
	QObject::disconnect(static_cast<QFontComboBox*>(ptr), static_cast<void (QFontComboBox::*)(const QFont &)>(&QFontComboBox::currentFontChanged), static_cast<MyQFontComboBox*>(ptr), static_cast<void (MyQFontComboBox::*)(const QFont &)>(&MyQFontComboBox::Signal_CurrentFontChanged));;
}

void QFontComboBox_CurrentFontChanged(void* ptr, void* font){
	static_cast<QFontComboBox*>(ptr)->currentFontChanged(*static_cast<QFont*>(font));
}

int QFontComboBox_Event(void* ptr, void* e){
	return static_cast<QFontComboBox*>(ptr)->event(static_cast<QEvent*>(e));
}

void* QFontComboBox_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QFontComboBox*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QFontComboBox*>(ptr)->sizeHint()).height());
}

void QFontComboBox_DestroyQFontComboBox(void* ptr){
	static_cast<QFontComboBox*>(ptr)->~QFontComboBox();
}

void QFontComboBox_ChangeEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QFontComboBox_ChangeEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::changeEvent(static_cast<QEvent*>(e));
}

void QFontComboBox_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QFontComboBox_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QFontComboBox_FocusInEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QFontComboBox_FocusInEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QFontComboBox_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QFontComboBox_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QFontComboBox_HideEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(e));
}

void QFontComboBox_HideEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::hideEvent(static_cast<QHideEvent*>(e));
}

void QFontComboBox_HidePopup(void* ptr){
	static_cast<MyQFontComboBox*>(ptr)->hidePopup();
}

void QFontComboBox_HidePopupDefault(void* ptr){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::hidePopup();
}

void QFontComboBox_InputMethodEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void QFontComboBox_InputMethodEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void QFontComboBox_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QFontComboBox_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QFontComboBox_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QFontComboBox_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QFontComboBox_MousePressEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QFontComboBox_MousePressEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QFontComboBox_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QFontComboBox_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QFontComboBox_PaintEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QFontComboBox_PaintEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::paintEvent(static_cast<QPaintEvent*>(e));
}

void QFontComboBox_ResizeEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QFontComboBox_ResizeEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QFontComboBox_ShowEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->showEvent(static_cast<QShowEvent*>(e));
}

void QFontComboBox_ShowEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::showEvent(static_cast<QShowEvent*>(e));
}

void QFontComboBox_ShowPopup(void* ptr){
	static_cast<MyQFontComboBox*>(ptr)->showPopup();
}

void QFontComboBox_ShowPopupDefault(void* ptr){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::showPopup();
}

void QFontComboBox_WheelEvent(void* ptr, void* e){
	static_cast<MyQFontComboBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QFontComboBox_WheelEventDefault(void* ptr, void* e){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QFontComboBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QFontComboBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QFontComboBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFontComboBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFontComboBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFontComboBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFontComboBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFontComboBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFontComboBox_DropEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QFontComboBox_DropEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QFontComboBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QFontComboBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::enterEvent(static_cast<QEvent*>(event));
}

void QFontComboBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QFontComboBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::leaveEvent(static_cast<QEvent*>(event));
}

void QFontComboBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QFontComboBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QFontComboBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQFontComboBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QFontComboBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QFontComboBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QFontComboBox_CloseEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QFontComboBox_CloseEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::closeEvent(static_cast<QCloseEvent*>(event));
}

void QFontComboBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQFontComboBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QFontComboBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::initPainter(static_cast<QPainter*>(painter));
}

void QFontComboBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFontComboBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFontComboBox_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFontComboBox_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFontComboBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFontComboBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFontComboBox_TimerEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QFontComboBox_TimerEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::timerEvent(static_cast<QTimerEvent*>(event));
}

void QFontComboBox_ChildEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QFontComboBox_ChildEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::childEvent(static_cast<QChildEvent*>(event));
}

void QFontComboBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQFontComboBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QFontComboBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QFontComboBox*>(ptr)->QFontComboBox::customEvent(static_cast<QEvent*>(event));
}

class MyQFontDialog: public QFontDialog {
public:
	MyQFontDialog(QWidget *parent) : QFontDialog(parent) {};
	MyQFontDialog(const QFont &initial, QWidget *parent) : QFontDialog(initial, parent) {};
	void changeEvent(QEvent * e) { callbackQFontDialogChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_CurrentFontChanged(const QFont & font) { callbackQFontDialogCurrentFontChanged(this, this->objectName().toUtf8().data(), new QFont(font)); };
	void done(int result) { if (!callbackQFontDialogDone(this, this->objectName().toUtf8().data(), result)) { QFontDialog::done(result); }; };
	void Signal_FontSelected(const QFont & font) { callbackQFontDialogFontSelected(this, this->objectName().toUtf8().data(), new QFont(font)); };
	void setVisible(bool visible) { if (!callbackQFontDialogSetVisible(this, this->objectName().toUtf8().data(), visible)) { QFontDialog::setVisible(visible); }; };
	void accept() { if (!callbackQFontDialogAccept(this, this->objectName().toUtf8().data())) { QFontDialog::accept(); }; };
	void closeEvent(QCloseEvent * e) { callbackQFontDialogCloseEvent(this, this->objectName().toUtf8().data(), e); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQFontDialogContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQFontDialogKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void reject() { if (!callbackQFontDialogReject(this, this->objectName().toUtf8().data())) { QFontDialog::reject(); }; };
	void resizeEvent(QResizeEvent * v) { callbackQFontDialogResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void showEvent(QShowEvent * event) { callbackQFontDialogShowEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQFontDialogActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQFontDialogDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQFontDialogDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQFontDialogDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQFontDialogDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQFontDialogEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQFontDialogFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQFontDialogFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQFontDialogHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQFontDialogLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQFontDialogMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQFontDialogPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQFontDialogInitPainter(const_cast<MyQFontDialog*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQFontDialogInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQFontDialogKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQFontDialogMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQFontDialogMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQFontDialogMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQFontDialogMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQFontDialogTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQFontDialogWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQFontDialogTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQFontDialogChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQFontDialogCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QFontDialog_Options(void* ptr){
	return static_cast<QFontDialog*>(ptr)->options();
}

void QFontDialog_SetOptions(void* ptr, int options){
	static_cast<QFontDialog*>(ptr)->setOptions(static_cast<QFontDialog::FontDialogOption>(options));
}

void* QFontDialog_NewQFontDialog(void* parent){
	return new MyQFontDialog(static_cast<QWidget*>(parent));
}

void* QFontDialog_NewQFontDialog2(void* initial, void* parent){
	return new MyQFontDialog(*static_cast<QFont*>(initial), static_cast<QWidget*>(parent));
}

void QFontDialog_ChangeEvent(void* ptr, void* e){
	static_cast<MyQFontDialog*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QFontDialog_ChangeEventDefault(void* ptr, void* e){
	static_cast<QFontDialog*>(ptr)->QFontDialog::changeEvent(static_cast<QEvent*>(e));
}

void* QFontDialog_CurrentFont(void* ptr){
	return new QFont(static_cast<QFontDialog*>(ptr)->currentFont());
}

void QFontDialog_ConnectCurrentFontChanged(void* ptr){
	QObject::connect(static_cast<QFontDialog*>(ptr), static_cast<void (QFontDialog::*)(const QFont &)>(&QFontDialog::currentFontChanged), static_cast<MyQFontDialog*>(ptr), static_cast<void (MyQFontDialog::*)(const QFont &)>(&MyQFontDialog::Signal_CurrentFontChanged));;
}

void QFontDialog_DisconnectCurrentFontChanged(void* ptr){
	QObject::disconnect(static_cast<QFontDialog*>(ptr), static_cast<void (QFontDialog::*)(const QFont &)>(&QFontDialog::currentFontChanged), static_cast<MyQFontDialog*>(ptr), static_cast<void (MyQFontDialog::*)(const QFont &)>(&MyQFontDialog::Signal_CurrentFontChanged));;
}

void QFontDialog_CurrentFontChanged(void* ptr, void* font){
	static_cast<QFontDialog*>(ptr)->currentFontChanged(*static_cast<QFont*>(font));
}

void QFontDialog_Done(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<MyQFontDialog*>(ptr), "done", Q_ARG(int, result));
}

void QFontDialog_DoneDefault(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<QFontDialog*>(ptr), "done", Q_ARG(int, result));
}

void QFontDialog_ConnectFontSelected(void* ptr){
	QObject::connect(static_cast<QFontDialog*>(ptr), static_cast<void (QFontDialog::*)(const QFont &)>(&QFontDialog::fontSelected), static_cast<MyQFontDialog*>(ptr), static_cast<void (MyQFontDialog::*)(const QFont &)>(&MyQFontDialog::Signal_FontSelected));;
}

void QFontDialog_DisconnectFontSelected(void* ptr){
	QObject::disconnect(static_cast<QFontDialog*>(ptr), static_cast<void (QFontDialog::*)(const QFont &)>(&QFontDialog::fontSelected), static_cast<MyQFontDialog*>(ptr), static_cast<void (MyQFontDialog::*)(const QFont &)>(&MyQFontDialog::Signal_FontSelected));;
}

void QFontDialog_FontSelected(void* ptr, void* font){
	static_cast<QFontDialog*>(ptr)->fontSelected(*static_cast<QFont*>(font));
}

void* QFontDialog_QFontDialog_GetFont2(int ok, void* parent){
	return new QFont(QFontDialog::getFont(NULL, static_cast<QWidget*>(parent)));
}

void* QFontDialog_QFontDialog_GetFont(int ok, void* initial, void* parent, char* title, int options){
	return new QFont(QFontDialog::getFont(NULL, *static_cast<QFont*>(initial), static_cast<QWidget*>(parent), QString(title), static_cast<QFontDialog::FontDialogOption>(options)));
}

void QFontDialog_Open(void* ptr, void* receiver, char* member){
	static_cast<QFontDialog*>(ptr)->open(static_cast<QObject*>(receiver), const_cast<const char*>(member));
}

void* QFontDialog_SelectedFont(void* ptr){
	return new QFont(static_cast<QFontDialog*>(ptr)->selectedFont());
}

void QFontDialog_SetCurrentFont(void* ptr, void* font){
	static_cast<QFontDialog*>(ptr)->setCurrentFont(*static_cast<QFont*>(font));
}

void QFontDialog_SetOption(void* ptr, int option, int on){
	static_cast<QFontDialog*>(ptr)->setOption(static_cast<QFontDialog::FontDialogOption>(option), on != 0);
}

void QFontDialog_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQFontDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QFontDialog_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QFontDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

int QFontDialog_TestOption(void* ptr, int option){
	return static_cast<QFontDialog*>(ptr)->testOption(static_cast<QFontDialog::FontDialogOption>(option));
}

void QFontDialog_Accept(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQFontDialog*>(ptr), "accept");
}

void QFontDialog_AcceptDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QFontDialog*>(ptr), "accept");
}

void QFontDialog_CloseEvent(void* ptr, void* e){
	static_cast<MyQFontDialog*>(ptr)->closeEvent(static_cast<QCloseEvent*>(e));
}

void QFontDialog_CloseEventDefault(void* ptr, void* e){
	static_cast<QFontDialog*>(ptr)->QFontDialog::closeEvent(static_cast<QCloseEvent*>(e));
}

void QFontDialog_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQFontDialog*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QFontDialog_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QFontDialog*>(ptr)->QFontDialog::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QFontDialog_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQFontDialog*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QFontDialog_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QFontDialog*>(ptr)->QFontDialog::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QFontDialog_Reject(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQFontDialog*>(ptr), "reject");
}

void QFontDialog_RejectDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QFontDialog*>(ptr), "reject");
}

void QFontDialog_ResizeEvent(void* ptr, void* v){
	static_cast<MyQFontDialog*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QFontDialog_ResizeEventDefault(void* ptr, void* v){
	static_cast<QFontDialog*>(ptr)->QFontDialog::resizeEvent(static_cast<QResizeEvent*>(v));
}

void QFontDialog_ShowEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QFontDialog_ShowEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::showEvent(static_cast<QShowEvent*>(event));
}

void QFontDialog_ActionEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QFontDialog_ActionEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::actionEvent(static_cast<QActionEvent*>(event));
}

void QFontDialog_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFontDialog_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFontDialog_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFontDialog_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFontDialog_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFontDialog_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFontDialog_DropEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QFontDialog_DropEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::dropEvent(static_cast<QDropEvent*>(event));
}

void QFontDialog_EnterEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QFontDialog_EnterEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::enterEvent(static_cast<QEvent*>(event));
}

void QFontDialog_FocusInEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QFontDialog_FocusInEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QFontDialog_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QFontDialog_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QFontDialog_HideEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QFontDialog_HideEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::hideEvent(static_cast<QHideEvent*>(event));
}

void QFontDialog_LeaveEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QFontDialog_LeaveEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::leaveEvent(static_cast<QEvent*>(event));
}

void QFontDialog_MoveEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QFontDialog_MoveEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::moveEvent(static_cast<QMoveEvent*>(event));
}

void QFontDialog_PaintEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QFontDialog_PaintEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::paintEvent(static_cast<QPaintEvent*>(event));
}

void QFontDialog_InitPainter(void* ptr, void* painter){
	static_cast<MyQFontDialog*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QFontDialog_InitPainterDefault(void* ptr, void* painter){
	static_cast<QFontDialog*>(ptr)->QFontDialog::initPainter(static_cast<QPainter*>(painter));
}

void QFontDialog_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QFontDialog_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QFontDialog_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QFontDialog_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QFontDialog_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFontDialog_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFontDialog_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFontDialog_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFontDialog_MousePressEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QFontDialog_MousePressEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QFontDialog_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QFontDialog_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QFontDialog_TabletEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFontDialog_TabletEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFontDialog_WheelEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QFontDialog_WheelEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QFontDialog_TimerEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QFontDialog_TimerEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::timerEvent(static_cast<QTimerEvent*>(event));
}

void QFontDialog_ChildEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QFontDialog_ChildEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::childEvent(static_cast<QChildEvent*>(event));
}

void QFontDialog_CustomEvent(void* ptr, void* event){
	static_cast<MyQFontDialog*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QFontDialog_CustomEventDefault(void* ptr, void* event){
	static_cast<QFontDialog*>(ptr)->QFontDialog::customEvent(static_cast<QEvent*>(event));
}

class MyQFormLayout: public QFormLayout {
public:
	MyQFormLayout(QWidget *parent) : QFormLayout(parent) {};
	void addItem(QLayoutItem * item) { callbackQFormLayoutAddItem(this, this->objectName().toUtf8().data(), item); };
	void invalidate() { callbackQFormLayoutInvalidate(this, this->objectName().toUtf8().data()); };
	void setGeometry(const QRect & rect) { callbackQFormLayoutSetGeometry(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height())); };
	void childEvent(QChildEvent * e) { callbackQFormLayoutChildEvent(this, this->objectName().toUtf8().data(), e); };
	void timerEvent(QTimerEvent * event) { callbackQFormLayoutTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQFormLayoutCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QFormLayout_FieldGrowthPolicy(void* ptr){
	return static_cast<QFormLayout*>(ptr)->fieldGrowthPolicy();
}

int QFormLayout_FormAlignment(void* ptr){
	return static_cast<QFormLayout*>(ptr)->formAlignment();
}

int QFormLayout_HorizontalSpacing(void* ptr){
	return static_cast<QFormLayout*>(ptr)->horizontalSpacing();
}

int QFormLayout_LabelAlignment(void* ptr){
	return static_cast<QFormLayout*>(ptr)->labelAlignment();
}

int QFormLayout_RowWrapPolicy(void* ptr){
	return static_cast<QFormLayout*>(ptr)->rowWrapPolicy();
}

void QFormLayout_SetFieldGrowthPolicy(void* ptr, int policy){
	static_cast<QFormLayout*>(ptr)->setFieldGrowthPolicy(static_cast<QFormLayout::FieldGrowthPolicy>(policy));
}

void QFormLayout_SetFormAlignment(void* ptr, int alignment){
	static_cast<QFormLayout*>(ptr)->setFormAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QFormLayout_SetHorizontalSpacing(void* ptr, int spacing){
	static_cast<QFormLayout*>(ptr)->setHorizontalSpacing(spacing);
}

void QFormLayout_SetLabelAlignment(void* ptr, int alignment){
	static_cast<QFormLayout*>(ptr)->setLabelAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QFormLayout_SetRowWrapPolicy(void* ptr, int policy){
	static_cast<QFormLayout*>(ptr)->setRowWrapPolicy(static_cast<QFormLayout::RowWrapPolicy>(policy));
}

void QFormLayout_SetVerticalSpacing(void* ptr, int spacing){
	static_cast<QFormLayout*>(ptr)->setVerticalSpacing(spacing);
}

int QFormLayout_VerticalSpacing(void* ptr){
	return static_cast<QFormLayout*>(ptr)->verticalSpacing();
}

void* QFormLayout_NewQFormLayout(void* parent){
	return new MyQFormLayout(static_cast<QWidget*>(parent));
}

void QFormLayout_AddItem(void* ptr, void* item){
	static_cast<MyQFormLayout*>(ptr)->addItem(static_cast<QLayoutItem*>(item));
}

void QFormLayout_AddItemDefault(void* ptr, void* item){
	static_cast<QFormLayout*>(ptr)->QFormLayout::addItem(static_cast<QLayoutItem*>(item));
}

void QFormLayout_AddRow6(void* ptr, void* layout){
	static_cast<QFormLayout*>(ptr)->addRow(static_cast<QLayout*>(layout));
}

void QFormLayout_AddRow2(void* ptr, void* label, void* field){
	static_cast<QFormLayout*>(ptr)->addRow(static_cast<QWidget*>(label), static_cast<QLayout*>(field));
}

void QFormLayout_AddRow(void* ptr, void* label, void* field){
	static_cast<QFormLayout*>(ptr)->addRow(static_cast<QWidget*>(label), static_cast<QWidget*>(field));
}

void QFormLayout_AddRow5(void* ptr, void* widget){
	static_cast<QFormLayout*>(ptr)->addRow(static_cast<QWidget*>(widget));
}

void QFormLayout_AddRow4(void* ptr, char* labelText, void* field){
	static_cast<QFormLayout*>(ptr)->addRow(QString(labelText), static_cast<QLayout*>(field));
}

void QFormLayout_AddRow3(void* ptr, char* labelText, void* field){
	static_cast<QFormLayout*>(ptr)->addRow(QString(labelText), static_cast<QWidget*>(field));
}

int QFormLayout_Count(void* ptr){
	return static_cast<QFormLayout*>(ptr)->count();
}

int QFormLayout_ExpandingDirections(void* ptr){
	return static_cast<QFormLayout*>(ptr)->expandingDirections();
}

int QFormLayout_HasHeightForWidth(void* ptr){
	return static_cast<QFormLayout*>(ptr)->hasHeightForWidth();
}

int QFormLayout_HeightForWidth(void* ptr, int width){
	return static_cast<QFormLayout*>(ptr)->heightForWidth(width);
}

void QFormLayout_InsertRow6(void* ptr, int row, void* layout){
	static_cast<QFormLayout*>(ptr)->insertRow(row, static_cast<QLayout*>(layout));
}

void QFormLayout_InsertRow2(void* ptr, int row, void* label, void* field){
	static_cast<QFormLayout*>(ptr)->insertRow(row, static_cast<QWidget*>(label), static_cast<QLayout*>(field));
}

void QFormLayout_InsertRow(void* ptr, int row, void* label, void* field){
	static_cast<QFormLayout*>(ptr)->insertRow(row, static_cast<QWidget*>(label), static_cast<QWidget*>(field));
}

void QFormLayout_InsertRow5(void* ptr, int row, void* widget){
	static_cast<QFormLayout*>(ptr)->insertRow(row, static_cast<QWidget*>(widget));
}

void QFormLayout_InsertRow4(void* ptr, int row, char* labelText, void* field){
	static_cast<QFormLayout*>(ptr)->insertRow(row, QString(labelText), static_cast<QLayout*>(field));
}

void QFormLayout_InsertRow3(void* ptr, int row, char* labelText, void* field){
	static_cast<QFormLayout*>(ptr)->insertRow(row, QString(labelText), static_cast<QWidget*>(field));
}

void QFormLayout_Invalidate(void* ptr){
	static_cast<MyQFormLayout*>(ptr)->invalidate();
}

void QFormLayout_InvalidateDefault(void* ptr){
	static_cast<QFormLayout*>(ptr)->QFormLayout::invalidate();
}

void* QFormLayout_ItemAt(void* ptr, int row, int role){
	return static_cast<QFormLayout*>(ptr)->itemAt(row, static_cast<QFormLayout::ItemRole>(role));
}

void* QFormLayout_LabelForField2(void* ptr, void* field){
	return static_cast<QFormLayout*>(ptr)->labelForField(static_cast<QLayout*>(field));
}

void* QFormLayout_LabelForField(void* ptr, void* field){
	return static_cast<QFormLayout*>(ptr)->labelForField(static_cast<QWidget*>(field));
}

void* QFormLayout_MinimumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QFormLayout*>(ptr)->minimumSize()).width(), static_cast<QSize>(static_cast<QFormLayout*>(ptr)->minimumSize()).height());
}

int QFormLayout_RowCount(void* ptr){
	return static_cast<QFormLayout*>(ptr)->rowCount();
}

void QFormLayout_SetGeometry(void* ptr, void* rect){
	static_cast<MyQFormLayout*>(ptr)->setGeometry(*static_cast<QRect*>(rect));
}

void QFormLayout_SetGeometryDefault(void* ptr, void* rect){
	static_cast<QFormLayout*>(ptr)->QFormLayout::setGeometry(*static_cast<QRect*>(rect));
}

void QFormLayout_SetItem(void* ptr, int row, int role, void* item){
	static_cast<QFormLayout*>(ptr)->setItem(row, static_cast<QFormLayout::ItemRole>(role), static_cast<QLayoutItem*>(item));
}

void QFormLayout_SetLayout(void* ptr, int row, int role, void* layout){
	static_cast<QFormLayout*>(ptr)->setLayout(row, static_cast<QFormLayout::ItemRole>(role), static_cast<QLayout*>(layout));
}

void QFormLayout_SetSpacing(void* ptr, int spacing){
	static_cast<QFormLayout*>(ptr)->setSpacing(spacing);
}

void QFormLayout_SetWidget(void* ptr, int row, int role, void* widget){
	static_cast<QFormLayout*>(ptr)->setWidget(row, static_cast<QFormLayout::ItemRole>(role), static_cast<QWidget*>(widget));
}

void* QFormLayout_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QFormLayout*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QFormLayout*>(ptr)->sizeHint()).height());
}

int QFormLayout_Spacing(void* ptr){
	return static_cast<QFormLayout*>(ptr)->spacing();
}

void* QFormLayout_TakeAt(void* ptr, int index){
	return static_cast<QFormLayout*>(ptr)->takeAt(index);
}

void QFormLayout_DestroyQFormLayout(void* ptr){
	static_cast<QFormLayout*>(ptr)->~QFormLayout();
}

void QFormLayout_ChildEvent(void* ptr, void* e){
	static_cast<MyQFormLayout*>(ptr)->childEvent(static_cast<QChildEvent*>(e));
}

void QFormLayout_ChildEventDefault(void* ptr, void* e){
	static_cast<QFormLayout*>(ptr)->QFormLayout::childEvent(static_cast<QChildEvent*>(e));
}

void QFormLayout_TimerEvent(void* ptr, void* event){
	static_cast<MyQFormLayout*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QFormLayout_TimerEventDefault(void* ptr, void* event){
	static_cast<QFormLayout*>(ptr)->QFormLayout::timerEvent(static_cast<QTimerEvent*>(event));
}

void QFormLayout_CustomEvent(void* ptr, void* event){
	static_cast<MyQFormLayout*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QFormLayout_CustomEventDefault(void* ptr, void* event){
	static_cast<QFormLayout*>(ptr)->QFormLayout::customEvent(static_cast<QEvent*>(event));
}

class MyQFrame: public QFrame {
public:
	MyQFrame(QWidget *parent, Qt::WindowFlags f) : QFrame(parent, f) {};
	void changeEvent(QEvent * ev) { callbackQFrameChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void paintEvent(QPaintEvent * v) { callbackQFramePaintEvent(this, this->objectName().toUtf8().data(), v); };
	void actionEvent(QActionEvent * event) { callbackQFrameActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQFrameDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQFrameDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQFrameDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQFrameDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQFrameEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQFrameFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQFrameFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQFrameHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQFrameLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQFrameMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQFrameSetVisible(this, this->objectName().toUtf8().data(), visible)) { QFrame::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQFrameShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQFrameCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQFrameContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQFrameInitPainter(const_cast<MyQFrame*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQFrameInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQFrameKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQFrameKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQFrameMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQFrameMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQFrameMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQFrameMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQFrameResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQFrameTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQFrameWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQFrameTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQFrameChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQFrameCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QFrame_FrameRect(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QFrame*>(ptr)->frameRect()).x(), static_cast<QRect>(static_cast<QFrame*>(ptr)->frameRect()).y(), static_cast<QRect>(static_cast<QFrame*>(ptr)->frameRect()).width(), static_cast<QRect>(static_cast<QFrame*>(ptr)->frameRect()).height());
}

int QFrame_FrameShadow(void* ptr){
	return static_cast<QFrame*>(ptr)->frameShadow();
}

int QFrame_FrameShape(void* ptr){
	return static_cast<QFrame*>(ptr)->frameShape();
}

int QFrame_FrameWidth(void* ptr){
	return static_cast<QFrame*>(ptr)->frameWidth();
}

int QFrame_LineWidth(void* ptr){
	return static_cast<QFrame*>(ptr)->lineWidth();
}

int QFrame_MidLineWidth(void* ptr){
	return static_cast<QFrame*>(ptr)->midLineWidth();
}

void QFrame_SetFrameRect(void* ptr, void* v){
	static_cast<QFrame*>(ptr)->setFrameRect(*static_cast<QRect*>(v));
}

void QFrame_SetFrameShadow(void* ptr, int v){
	static_cast<QFrame*>(ptr)->setFrameShadow(static_cast<QFrame::Shadow>(v));
}

void QFrame_SetFrameShape(void* ptr, int v){
	static_cast<QFrame*>(ptr)->setFrameShape(static_cast<QFrame::Shape>(v));
}

void QFrame_SetLineWidth(void* ptr, int v){
	static_cast<QFrame*>(ptr)->setLineWidth(v);
}

void QFrame_SetMidLineWidth(void* ptr, int v){
	static_cast<QFrame*>(ptr)->setMidLineWidth(v);
}

void* QFrame_NewQFrame(void* parent, int f){
	return new MyQFrame(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

void QFrame_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQFrame*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QFrame_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QFrame*>(ptr)->QFrame::changeEvent(static_cast<QEvent*>(ev));
}

int QFrame_Event(void* ptr, void* e){
	return static_cast<QFrame*>(ptr)->event(static_cast<QEvent*>(e));
}

int QFrame_FrameStyle(void* ptr){
	return static_cast<QFrame*>(ptr)->frameStyle();
}

void QFrame_PaintEvent(void* ptr, void* v){
	static_cast<MyQFrame*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QFrame_PaintEventDefault(void* ptr, void* v){
	static_cast<QFrame*>(ptr)->QFrame::paintEvent(static_cast<QPaintEvent*>(v));
}

void QFrame_SetFrameStyle(void* ptr, int style){
	static_cast<QFrame*>(ptr)->setFrameStyle(style);
}

void* QFrame_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QFrame*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QFrame*>(ptr)->sizeHint()).height());
}

void QFrame_DestroyQFrame(void* ptr){
	static_cast<QFrame*>(ptr)->~QFrame();
}

void QFrame_ActionEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QFrame_ActionEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::actionEvent(static_cast<QActionEvent*>(event));
}

void QFrame_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFrame_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QFrame_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFrame_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QFrame_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFrame_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QFrame_DropEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QFrame_DropEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::dropEvent(static_cast<QDropEvent*>(event));
}

void QFrame_EnterEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QFrame_EnterEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::enterEvent(static_cast<QEvent*>(event));
}

void QFrame_FocusInEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QFrame_FocusInEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QFrame_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QFrame_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QFrame_HideEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QFrame_HideEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::hideEvent(static_cast<QHideEvent*>(event));
}

void QFrame_LeaveEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QFrame_LeaveEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::leaveEvent(static_cast<QEvent*>(event));
}

void QFrame_MoveEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QFrame_MoveEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::moveEvent(static_cast<QMoveEvent*>(event));
}

void QFrame_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQFrame*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QFrame_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QFrame*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QFrame_ShowEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QFrame_ShowEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::showEvent(static_cast<QShowEvent*>(event));
}

void QFrame_CloseEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QFrame_CloseEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::closeEvent(static_cast<QCloseEvent*>(event));
}

void QFrame_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QFrame_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QFrame_InitPainter(void* ptr, void* painter){
	static_cast<MyQFrame*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QFrame_InitPainterDefault(void* ptr, void* painter){
	static_cast<QFrame*>(ptr)->QFrame::initPainter(static_cast<QPainter*>(painter));
}

void QFrame_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QFrame_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QFrame_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QFrame_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QFrame_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QFrame_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QFrame_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFrame_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QFrame_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFrame_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QFrame_MousePressEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QFrame_MousePressEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QFrame_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QFrame_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QFrame_ResizeEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QFrame_ResizeEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QFrame_TabletEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFrame_TabletEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QFrame_WheelEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QFrame_WheelEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QFrame_TimerEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QFrame_TimerEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::timerEvent(static_cast<QTimerEvent*>(event));
}

void QFrame_ChildEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QFrame_ChildEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::childEvent(static_cast<QChildEvent*>(event));
}

void QFrame_CustomEvent(void* ptr, void* event){
	static_cast<MyQFrame*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QFrame_CustomEventDefault(void* ptr, void* event){
	static_cast<QFrame*>(ptr)->QFrame::customEvent(static_cast<QEvent*>(event));
}

int QGesture_GestureCancelPolicy(void* ptr){
	return static_cast<QGesture*>(ptr)->gestureCancelPolicy();
}

int QGesture_GestureType(void* ptr){
	return static_cast<QGesture*>(ptr)->gestureType();
}

int QGesture_HasHotSpot(void* ptr){
	return static_cast<QGesture*>(ptr)->hasHotSpot();
}

void QGesture_SetGestureCancelPolicy(void* ptr, int policy){
	static_cast<QGesture*>(ptr)->setGestureCancelPolicy(static_cast<QGesture::GestureCancelPolicy>(policy));
}

void QGesture_SetHotSpot(void* ptr, void* value){
	static_cast<QGesture*>(ptr)->setHotSpot(*static_cast<QPointF*>(value));
}

int QGesture_State(void* ptr){
	return static_cast<QGesture*>(ptr)->state();
}

void QGesture_UnsetHotSpot(void* ptr){
	static_cast<QGesture*>(ptr)->unsetHotSpot();
}

void* QGesture_NewQGesture(void* parent){
	return new QGesture(static_cast<QObject*>(parent));
}

void QGesture_DestroyQGesture(void* ptr){
	static_cast<QGesture*>(ptr)->~QGesture();
}

void QGesture_TimerEvent(void* ptr, void* event){
	static_cast<QGesture*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGesture_TimerEventDefault(void* ptr, void* event){
	static_cast<QGesture*>(ptr)->QGesture::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGesture_ChildEvent(void* ptr, void* event){
	static_cast<QGesture*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGesture_ChildEventDefault(void* ptr, void* event){
	static_cast<QGesture*>(ptr)->QGesture::childEvent(static_cast<QChildEvent*>(event));
}

void QGesture_CustomEvent(void* ptr, void* event){
	static_cast<QGesture*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGesture_CustomEventDefault(void* ptr, void* event){
	static_cast<QGesture*>(ptr)->QGesture::customEvent(static_cast<QEvent*>(event));
}

void QGestureEvent_Accept(void* ptr, void* gesture){
	static_cast<QGestureEvent*>(ptr)->accept(static_cast<QGesture*>(gesture));
}

void QGestureEvent_Accept2(void* ptr, int gestureType){
	static_cast<QGestureEvent*>(ptr)->accept(static_cast<Qt::GestureType>(gestureType));
}

void* QGestureEvent_Gesture(void* ptr, int ty){
	return static_cast<QGestureEvent*>(ptr)->gesture(static_cast<Qt::GestureType>(ty));
}

void QGestureEvent_Ignore(void* ptr, void* gesture){
	static_cast<QGestureEvent*>(ptr)->ignore(static_cast<QGesture*>(gesture));
}

void QGestureEvent_Ignore2(void* ptr, int gestureType){
	static_cast<QGestureEvent*>(ptr)->ignore(static_cast<Qt::GestureType>(gestureType));
}

int QGestureEvent_IsAccepted(void* ptr, void* gesture){
	return static_cast<QGestureEvent*>(ptr)->isAccepted(static_cast<QGesture*>(gesture));
}

int QGestureEvent_IsAccepted2(void* ptr, int gestureType){
	return static_cast<QGestureEvent*>(ptr)->isAccepted(static_cast<Qt::GestureType>(gestureType));
}

void QGestureEvent_SetAccepted(void* ptr, void* gesture, int value){
	static_cast<QGestureEvent*>(ptr)->setAccepted(static_cast<QGesture*>(gesture), value != 0);
}

void QGestureEvent_SetAccepted2(void* ptr, int gestureType, int value){
	static_cast<QGestureEvent*>(ptr)->setAccepted(static_cast<Qt::GestureType>(gestureType), value != 0);
}

void* QGestureEvent_Widget(void* ptr){
	return static_cast<QGestureEvent*>(ptr)->widget();
}

void QGestureEvent_DestroyQGestureEvent(void* ptr){
	static_cast<QGestureEvent*>(ptr)->~QGestureEvent();
}

void QGraphicsAnchor_SetSizePolicy(void* ptr, int policy){
	static_cast<QGraphicsAnchor*>(ptr)->setSizePolicy(static_cast<QSizePolicy::Policy>(policy));
}

void QGraphicsAnchor_SetSpacing(void* ptr, double spacing){
	static_cast<QGraphicsAnchor*>(ptr)->setSpacing(static_cast<double>(spacing));
}

int QGraphicsAnchor_SizePolicy(void* ptr){
	return static_cast<QGraphicsAnchor*>(ptr)->sizePolicy();
}

double QGraphicsAnchor_Spacing(void* ptr){
	return static_cast<double>(static_cast<QGraphicsAnchor*>(ptr)->spacing());
}

void QGraphicsAnchor_UnsetSpacing(void* ptr){
	static_cast<QGraphicsAnchor*>(ptr)->unsetSpacing();
}

void QGraphicsAnchor_DestroyQGraphicsAnchor(void* ptr){
	static_cast<QGraphicsAnchor*>(ptr)->~QGraphicsAnchor();
}

void QGraphicsAnchor_TimerEvent(void* ptr, void* event){
	static_cast<QGraphicsAnchor*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsAnchor_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsAnchor*>(ptr)->QGraphicsAnchor::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsAnchor_ChildEvent(void* ptr, void* event){
	static_cast<QGraphicsAnchor*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsAnchor_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsAnchor*>(ptr)->QGraphicsAnchor::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsAnchor_CustomEvent(void* ptr, void* event){
	static_cast<QGraphicsAnchor*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsAnchor_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsAnchor*>(ptr)->QGraphicsAnchor::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsAnchorLayout: public QGraphicsAnchorLayout {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQGraphicsAnchorLayout(QGraphicsLayoutItem *parent) : QGraphicsAnchorLayout(parent) {};
	void invalidate() { callbackQGraphicsAnchorLayoutInvalidate(this, this->objectNameAbs().toUtf8().data()); };
	void removeAt(int index) { callbackQGraphicsAnchorLayoutRemoveAt(this, this->objectNameAbs().toUtf8().data(), index); };
};

void* QGraphicsAnchorLayout_NewQGraphicsAnchorLayout(void* parent){
	return new MyQGraphicsAnchorLayout(static_cast<QGraphicsLayoutItem*>(parent));
}

void* QGraphicsAnchorLayout_AddAnchor(void* ptr, void* firstItem, int firstEdge, void* secondItem, int secondEdge){
	return static_cast<QGraphicsAnchorLayout*>(ptr)->addAnchor(static_cast<QGraphicsLayoutItem*>(firstItem), static_cast<Qt::AnchorPoint>(firstEdge), static_cast<QGraphicsLayoutItem*>(secondItem), static_cast<Qt::AnchorPoint>(secondEdge));
}

void QGraphicsAnchorLayout_AddAnchors(void* ptr, void* firstItem, void* secondItem, int orientations){
	static_cast<QGraphicsAnchorLayout*>(ptr)->addAnchors(static_cast<QGraphicsLayoutItem*>(firstItem), static_cast<QGraphicsLayoutItem*>(secondItem), static_cast<Qt::Orientation>(orientations));
}

void QGraphicsAnchorLayout_AddCornerAnchors(void* ptr, void* firstItem, int firstCorner, void* secondItem, int secondCorner){
	static_cast<QGraphicsAnchorLayout*>(ptr)->addCornerAnchors(static_cast<QGraphicsLayoutItem*>(firstItem), static_cast<Qt::Corner>(firstCorner), static_cast<QGraphicsLayoutItem*>(secondItem), static_cast<Qt::Corner>(secondCorner));
}

void* QGraphicsAnchorLayout_Anchor(void* ptr, void* firstItem, int firstEdge, void* secondItem, int secondEdge){
	return static_cast<QGraphicsAnchorLayout*>(ptr)->anchor(static_cast<QGraphicsLayoutItem*>(firstItem), static_cast<Qt::AnchorPoint>(firstEdge), static_cast<QGraphicsLayoutItem*>(secondItem), static_cast<Qt::AnchorPoint>(secondEdge));
}

int QGraphicsAnchorLayout_Count(void* ptr){
	return static_cast<QGraphicsAnchorLayout*>(ptr)->count();
}

double QGraphicsAnchorLayout_HorizontalSpacing(void* ptr){
	return static_cast<double>(static_cast<QGraphicsAnchorLayout*>(ptr)->horizontalSpacing());
}

void QGraphicsAnchorLayout_Invalidate(void* ptr){
	static_cast<MyQGraphicsAnchorLayout*>(ptr)->invalidate();
}

void QGraphicsAnchorLayout_InvalidateDefault(void* ptr){
	static_cast<QGraphicsAnchorLayout*>(ptr)->QGraphicsAnchorLayout::invalidate();
}

void* QGraphicsAnchorLayout_ItemAt(void* ptr, int index){
	return static_cast<QGraphicsAnchorLayout*>(ptr)->itemAt(index);
}

void QGraphicsAnchorLayout_RemoveAt(void* ptr, int index){
	static_cast<MyQGraphicsAnchorLayout*>(ptr)->removeAt(index);
}

void QGraphicsAnchorLayout_RemoveAtDefault(void* ptr, int index){
	static_cast<QGraphicsAnchorLayout*>(ptr)->QGraphicsAnchorLayout::removeAt(index);
}

void QGraphicsAnchorLayout_SetHorizontalSpacing(void* ptr, double spacing){
	static_cast<QGraphicsAnchorLayout*>(ptr)->setHorizontalSpacing(static_cast<double>(spacing));
}

void QGraphicsAnchorLayout_SetSpacing(void* ptr, double spacing){
	static_cast<QGraphicsAnchorLayout*>(ptr)->setSpacing(static_cast<double>(spacing));
}

void QGraphicsAnchorLayout_SetVerticalSpacing(void* ptr, double spacing){
	static_cast<QGraphicsAnchorLayout*>(ptr)->setVerticalSpacing(static_cast<double>(spacing));
}

double QGraphicsAnchorLayout_VerticalSpacing(void* ptr){
	return static_cast<double>(static_cast<QGraphicsAnchorLayout*>(ptr)->verticalSpacing());
}

void QGraphicsAnchorLayout_DestroyQGraphicsAnchorLayout(void* ptr){
	static_cast<QGraphicsAnchorLayout*>(ptr)->~QGraphicsAnchorLayout();
}

char* QGraphicsAnchorLayout_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsAnchorLayout*>(static_cast<QGraphicsAnchorLayout*>(ptr))) {
		return static_cast<MyQGraphicsAnchorLayout*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsAnchorLayout_BASE").toUtf8().data();
}

void QGraphicsAnchorLayout_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsAnchorLayout*>(static_cast<QGraphicsAnchorLayout*>(ptr))) {
		static_cast<MyQGraphicsAnchorLayout*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsBlurEffect: public QGraphicsBlurEffect {
public:
	MyQGraphicsBlurEffect(QObject *parent) : QGraphicsBlurEffect(parent) {};
	void Signal_BlurHintsChanged(QGraphicsBlurEffect::BlurHints hints) { callbackQGraphicsBlurEffectBlurHintsChanged(this, this->objectName().toUtf8().data(), hints); };
	void Signal_BlurRadiusChanged(qreal radius) { callbackQGraphicsBlurEffectBlurRadiusChanged(this, this->objectName().toUtf8().data(), static_cast<double>(radius)); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsBlurEffectTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsBlurEffectChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsBlurEffectCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QGraphicsBlurEffect_BlurHints(void* ptr){
	return static_cast<QGraphicsBlurEffect*>(ptr)->blurHints();
}

double QGraphicsBlurEffect_BlurRadius(void* ptr){
	return static_cast<double>(static_cast<QGraphicsBlurEffect*>(ptr)->blurRadius());
}

void QGraphicsBlurEffect_SetBlurHints(void* ptr, int hints){
	QMetaObject::invokeMethod(static_cast<QGraphicsBlurEffect*>(ptr), "setBlurHints", Q_ARG(QGraphicsBlurEffect::BlurHint, static_cast<QGraphicsBlurEffect::BlurHint>(hints)));
}

void QGraphicsBlurEffect_SetBlurRadius(void* ptr, double blurRadius){
	QMetaObject::invokeMethod(static_cast<QGraphicsBlurEffect*>(ptr), "setBlurRadius", Q_ARG(qreal, static_cast<double>(blurRadius)));
}

void* QGraphicsBlurEffect_NewQGraphicsBlurEffect(void* parent){
	return new MyQGraphicsBlurEffect(static_cast<QObject*>(parent));
}

void QGraphicsBlurEffect_ConnectBlurHintsChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsBlurEffect*>(ptr), static_cast<void (QGraphicsBlurEffect::*)(QGraphicsBlurEffect::BlurHints)>(&QGraphicsBlurEffect::blurHintsChanged), static_cast<MyQGraphicsBlurEffect*>(ptr), static_cast<void (MyQGraphicsBlurEffect::*)(QGraphicsBlurEffect::BlurHints)>(&MyQGraphicsBlurEffect::Signal_BlurHintsChanged));;
}

void QGraphicsBlurEffect_DisconnectBlurHintsChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsBlurEffect*>(ptr), static_cast<void (QGraphicsBlurEffect::*)(QGraphicsBlurEffect::BlurHints)>(&QGraphicsBlurEffect::blurHintsChanged), static_cast<MyQGraphicsBlurEffect*>(ptr), static_cast<void (MyQGraphicsBlurEffect::*)(QGraphicsBlurEffect::BlurHints)>(&MyQGraphicsBlurEffect::Signal_BlurHintsChanged));;
}

void QGraphicsBlurEffect_BlurHintsChanged(void* ptr, int hints){
	static_cast<QGraphicsBlurEffect*>(ptr)->blurHintsChanged(static_cast<QGraphicsBlurEffect::BlurHint>(hints));
}

void QGraphicsBlurEffect_ConnectBlurRadiusChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsBlurEffect*>(ptr), static_cast<void (QGraphicsBlurEffect::*)(qreal)>(&QGraphicsBlurEffect::blurRadiusChanged), static_cast<MyQGraphicsBlurEffect*>(ptr), static_cast<void (MyQGraphicsBlurEffect::*)(qreal)>(&MyQGraphicsBlurEffect::Signal_BlurRadiusChanged));;
}

void QGraphicsBlurEffect_DisconnectBlurRadiusChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsBlurEffect*>(ptr), static_cast<void (QGraphicsBlurEffect::*)(qreal)>(&QGraphicsBlurEffect::blurRadiusChanged), static_cast<MyQGraphicsBlurEffect*>(ptr), static_cast<void (MyQGraphicsBlurEffect::*)(qreal)>(&MyQGraphicsBlurEffect::Signal_BlurRadiusChanged));;
}

void QGraphicsBlurEffect_BlurRadiusChanged(void* ptr, double radius){
	static_cast<QGraphicsBlurEffect*>(ptr)->blurRadiusChanged(static_cast<double>(radius));
}

void QGraphicsBlurEffect_DestroyQGraphicsBlurEffect(void* ptr){
	static_cast<QGraphicsBlurEffect*>(ptr)->~QGraphicsBlurEffect();
}

void QGraphicsBlurEffect_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsBlurEffect*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsBlurEffect_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsBlurEffect*>(ptr)->QGraphicsBlurEffect::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsBlurEffect_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsBlurEffect*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsBlurEffect_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsBlurEffect*>(ptr)->QGraphicsBlurEffect::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsBlurEffect_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsBlurEffect*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsBlurEffect_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsBlurEffect*>(ptr)->QGraphicsBlurEffect::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsColorizeEffect: public QGraphicsColorizeEffect {
public:
	MyQGraphicsColorizeEffect(QObject *parent) : QGraphicsColorizeEffect(parent) {};
	void Signal_ColorChanged(const QColor & color) { callbackQGraphicsColorizeEffectColorChanged(this, this->objectName().toUtf8().data(), new QColor(color)); };
	void Signal_StrengthChanged(qreal strength) { callbackQGraphicsColorizeEffectStrengthChanged(this, this->objectName().toUtf8().data(), static_cast<double>(strength)); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsColorizeEffectTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsColorizeEffectChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsColorizeEffectCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QGraphicsColorizeEffect_Color(void* ptr){
	return new QColor(static_cast<QGraphicsColorizeEffect*>(ptr)->color());
}

void QGraphicsColorizeEffect_SetColor(void* ptr, void* c){
	QMetaObject::invokeMethod(static_cast<QGraphicsColorizeEffect*>(ptr), "setColor", Q_ARG(QColor, *static_cast<QColor*>(c)));
}

void QGraphicsColorizeEffect_SetStrength(void* ptr, double strength){
	QMetaObject::invokeMethod(static_cast<QGraphicsColorizeEffect*>(ptr), "setStrength", Q_ARG(qreal, static_cast<double>(strength)));
}

double QGraphicsColorizeEffect_Strength(void* ptr){
	return static_cast<double>(static_cast<QGraphicsColorizeEffect*>(ptr)->strength());
}

void* QGraphicsColorizeEffect_NewQGraphicsColorizeEffect(void* parent){
	return new MyQGraphicsColorizeEffect(static_cast<QObject*>(parent));
}

void QGraphicsColorizeEffect_ConnectColorChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsColorizeEffect*>(ptr), static_cast<void (QGraphicsColorizeEffect::*)(const QColor &)>(&QGraphicsColorizeEffect::colorChanged), static_cast<MyQGraphicsColorizeEffect*>(ptr), static_cast<void (MyQGraphicsColorizeEffect::*)(const QColor &)>(&MyQGraphicsColorizeEffect::Signal_ColorChanged));;
}

void QGraphicsColorizeEffect_DisconnectColorChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsColorizeEffect*>(ptr), static_cast<void (QGraphicsColorizeEffect::*)(const QColor &)>(&QGraphicsColorizeEffect::colorChanged), static_cast<MyQGraphicsColorizeEffect*>(ptr), static_cast<void (MyQGraphicsColorizeEffect::*)(const QColor &)>(&MyQGraphicsColorizeEffect::Signal_ColorChanged));;
}

void QGraphicsColorizeEffect_ColorChanged(void* ptr, void* color){
	static_cast<QGraphicsColorizeEffect*>(ptr)->colorChanged(*static_cast<QColor*>(color));
}

void QGraphicsColorizeEffect_ConnectStrengthChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsColorizeEffect*>(ptr), static_cast<void (QGraphicsColorizeEffect::*)(qreal)>(&QGraphicsColorizeEffect::strengthChanged), static_cast<MyQGraphicsColorizeEffect*>(ptr), static_cast<void (MyQGraphicsColorizeEffect::*)(qreal)>(&MyQGraphicsColorizeEffect::Signal_StrengthChanged));;
}

void QGraphicsColorizeEffect_DisconnectStrengthChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsColorizeEffect*>(ptr), static_cast<void (QGraphicsColorizeEffect::*)(qreal)>(&QGraphicsColorizeEffect::strengthChanged), static_cast<MyQGraphicsColorizeEffect*>(ptr), static_cast<void (MyQGraphicsColorizeEffect::*)(qreal)>(&MyQGraphicsColorizeEffect::Signal_StrengthChanged));;
}

void QGraphicsColorizeEffect_StrengthChanged(void* ptr, double strength){
	static_cast<QGraphicsColorizeEffect*>(ptr)->strengthChanged(static_cast<double>(strength));
}

void QGraphicsColorizeEffect_DestroyQGraphicsColorizeEffect(void* ptr){
	static_cast<QGraphicsColorizeEffect*>(ptr)->~QGraphicsColorizeEffect();
}

void QGraphicsColorizeEffect_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsColorizeEffect*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsColorizeEffect_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsColorizeEffect*>(ptr)->QGraphicsColorizeEffect::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsColorizeEffect_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsColorizeEffect*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsColorizeEffect_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsColorizeEffect*>(ptr)->QGraphicsColorizeEffect::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsColorizeEffect_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsColorizeEffect*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsColorizeEffect_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsColorizeEffect*>(ptr)->QGraphicsColorizeEffect::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsDropShadowEffect: public QGraphicsDropShadowEffect {
public:
	MyQGraphicsDropShadowEffect(QObject *parent) : QGraphicsDropShadowEffect(parent) {};
	void Signal_BlurRadiusChanged(qreal blurRadius) { callbackQGraphicsDropShadowEffectBlurRadiusChanged(this, this->objectName().toUtf8().data(), static_cast<double>(blurRadius)); };
	void Signal_ColorChanged(const QColor & color) { callbackQGraphicsDropShadowEffectColorChanged(this, this->objectName().toUtf8().data(), new QColor(color)); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsDropShadowEffectTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsDropShadowEffectChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsDropShadowEffectCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

double QGraphicsDropShadowEffect_BlurRadius(void* ptr){
	return static_cast<double>(static_cast<QGraphicsDropShadowEffect*>(ptr)->blurRadius());
}

void* QGraphicsDropShadowEffect_Color(void* ptr){
	return new QColor(static_cast<QGraphicsDropShadowEffect*>(ptr)->color());
}

void QGraphicsDropShadowEffect_SetBlurRadius(void* ptr, double blurRadius){
	QMetaObject::invokeMethod(static_cast<QGraphicsDropShadowEffect*>(ptr), "setBlurRadius", Q_ARG(qreal, static_cast<double>(blurRadius)));
}

void QGraphicsDropShadowEffect_SetColor(void* ptr, void* color){
	QMetaObject::invokeMethod(static_cast<QGraphicsDropShadowEffect*>(ptr), "setColor", Q_ARG(QColor, *static_cast<QColor*>(color)));
}

void QGraphicsDropShadowEffect_SetOffset(void* ptr, void* ofs){
	QMetaObject::invokeMethod(static_cast<QGraphicsDropShadowEffect*>(ptr), "setOffset", Q_ARG(QPointF, *static_cast<QPointF*>(ofs)));
}

void* QGraphicsDropShadowEffect_NewQGraphicsDropShadowEffect(void* parent){
	return new MyQGraphicsDropShadowEffect(static_cast<QObject*>(parent));
}

void QGraphicsDropShadowEffect_ConnectBlurRadiusChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsDropShadowEffect*>(ptr), static_cast<void (QGraphicsDropShadowEffect::*)(qreal)>(&QGraphicsDropShadowEffect::blurRadiusChanged), static_cast<MyQGraphicsDropShadowEffect*>(ptr), static_cast<void (MyQGraphicsDropShadowEffect::*)(qreal)>(&MyQGraphicsDropShadowEffect::Signal_BlurRadiusChanged));;
}

void QGraphicsDropShadowEffect_DisconnectBlurRadiusChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsDropShadowEffect*>(ptr), static_cast<void (QGraphicsDropShadowEffect::*)(qreal)>(&QGraphicsDropShadowEffect::blurRadiusChanged), static_cast<MyQGraphicsDropShadowEffect*>(ptr), static_cast<void (MyQGraphicsDropShadowEffect::*)(qreal)>(&MyQGraphicsDropShadowEffect::Signal_BlurRadiusChanged));;
}

void QGraphicsDropShadowEffect_BlurRadiusChanged(void* ptr, double blurRadius){
	static_cast<QGraphicsDropShadowEffect*>(ptr)->blurRadiusChanged(static_cast<double>(blurRadius));
}

void QGraphicsDropShadowEffect_ConnectColorChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsDropShadowEffect*>(ptr), static_cast<void (QGraphicsDropShadowEffect::*)(const QColor &)>(&QGraphicsDropShadowEffect::colorChanged), static_cast<MyQGraphicsDropShadowEffect*>(ptr), static_cast<void (MyQGraphicsDropShadowEffect::*)(const QColor &)>(&MyQGraphicsDropShadowEffect::Signal_ColorChanged));;
}

void QGraphicsDropShadowEffect_DisconnectColorChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsDropShadowEffect*>(ptr), static_cast<void (QGraphicsDropShadowEffect::*)(const QColor &)>(&QGraphicsDropShadowEffect::colorChanged), static_cast<MyQGraphicsDropShadowEffect*>(ptr), static_cast<void (MyQGraphicsDropShadowEffect::*)(const QColor &)>(&MyQGraphicsDropShadowEffect::Signal_ColorChanged));;
}

void QGraphicsDropShadowEffect_ColorChanged(void* ptr, void* color){
	static_cast<QGraphicsDropShadowEffect*>(ptr)->colorChanged(*static_cast<QColor*>(color));
}

void QGraphicsDropShadowEffect_SetOffset3(void* ptr, double d){
	QMetaObject::invokeMethod(static_cast<QGraphicsDropShadowEffect*>(ptr), "setOffset", Q_ARG(qreal, static_cast<double>(d)));
}

void QGraphicsDropShadowEffect_SetOffset2(void* ptr, double dx, double dy){
	QMetaObject::invokeMethod(static_cast<QGraphicsDropShadowEffect*>(ptr), "setOffset", Q_ARG(qreal, static_cast<double>(dx)), Q_ARG(qreal, static_cast<double>(dy)));
}

void QGraphicsDropShadowEffect_SetXOffset(void* ptr, double dx){
	QMetaObject::invokeMethod(static_cast<QGraphicsDropShadowEffect*>(ptr), "setXOffset", Q_ARG(qreal, static_cast<double>(dx)));
}

void QGraphicsDropShadowEffect_SetYOffset(void* ptr, double dy){
	QMetaObject::invokeMethod(static_cast<QGraphicsDropShadowEffect*>(ptr), "setYOffset", Q_ARG(qreal, static_cast<double>(dy)));
}

double QGraphicsDropShadowEffect_XOffset(void* ptr){
	return static_cast<double>(static_cast<QGraphicsDropShadowEffect*>(ptr)->xOffset());
}

double QGraphicsDropShadowEffect_YOffset(void* ptr){
	return static_cast<double>(static_cast<QGraphicsDropShadowEffect*>(ptr)->yOffset());
}

void QGraphicsDropShadowEffect_DestroyQGraphicsDropShadowEffect(void* ptr){
	static_cast<QGraphicsDropShadowEffect*>(ptr)->~QGraphicsDropShadowEffect();
}

void QGraphicsDropShadowEffect_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsDropShadowEffect*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsDropShadowEffect_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsDropShadowEffect*>(ptr)->QGraphicsDropShadowEffect::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsDropShadowEffect_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsDropShadowEffect*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsDropShadowEffect_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsDropShadowEffect*>(ptr)->QGraphicsDropShadowEffect::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsDropShadowEffect_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsDropShadowEffect*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsDropShadowEffect_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsDropShadowEffect*>(ptr)->QGraphicsDropShadowEffect::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsEllipseItem: public QGraphicsEllipseItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsEllipseItemPaint(this, this->objectNameAbs().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
};

int QGraphicsEllipseItem_Contains(void* ptr, void* point){
	return static_cast<QGraphicsEllipseItem*>(ptr)->contains(*static_cast<QPointF*>(point));
}

int QGraphicsEllipseItem_IsObscuredBy(void* ptr, void* item){
	return static_cast<QGraphicsEllipseItem*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void* QGraphicsEllipseItem_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsEllipseItem*>(ptr)->opaqueArea());
}

void QGraphicsEllipseItem_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsEllipseItem*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsEllipseItem_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsEllipseItem*>(ptr)->QGraphicsEllipseItem::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsEllipseItem_SetRect(void* ptr, void* rect){
	static_cast<QGraphicsEllipseItem*>(ptr)->setRect(*static_cast<QRectF*>(rect));
}

void QGraphicsEllipseItem_SetRect2(void* ptr, double x, double y, double width, double height){
	static_cast<QGraphicsEllipseItem*>(ptr)->setRect(static_cast<double>(x), static_cast<double>(y), static_cast<double>(width), static_cast<double>(height));
}

void QGraphicsEllipseItem_SetSpanAngle(void* ptr, int angle){
	static_cast<QGraphicsEllipseItem*>(ptr)->setSpanAngle(angle);
}

void QGraphicsEllipseItem_SetStartAngle(void* ptr, int angle){
	static_cast<QGraphicsEllipseItem*>(ptr)->setStartAngle(angle);
}

void* QGraphicsEllipseItem_Shape(void* ptr){
	return new QPainterPath(static_cast<QGraphicsEllipseItem*>(ptr)->shape());
}

int QGraphicsEllipseItem_SpanAngle(void* ptr){
	return static_cast<QGraphicsEllipseItem*>(ptr)->spanAngle();
}

int QGraphicsEllipseItem_StartAngle(void* ptr){
	return static_cast<QGraphicsEllipseItem*>(ptr)->startAngle();
}

int QGraphicsEllipseItem_Type(void* ptr){
	return static_cast<QGraphicsEllipseItem*>(ptr)->type();
}

void QGraphicsEllipseItem_DestroyQGraphicsEllipseItem(void* ptr){
	static_cast<QGraphicsEllipseItem*>(ptr)->~QGraphicsEllipseItem();
}

char* QGraphicsEllipseItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsEllipseItem*>(static_cast<QGraphicsEllipseItem*>(ptr))) {
		return static_cast<MyQGraphicsEllipseItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsEllipseItem_BASE").toUtf8().data();
}

void QGraphicsEllipseItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsEllipseItem*>(static_cast<QGraphicsEllipseItem*>(ptr))) {
		static_cast<MyQGraphicsEllipseItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsGridLayout: public QGraphicsGridLayout {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQGraphicsGridLayout(QGraphicsLayoutItem *parent) : QGraphicsGridLayout(parent) {};
	void invalidate() { callbackQGraphicsGridLayoutInvalidate(this, this->objectNameAbs().toUtf8().data()); };
	void removeAt(int index) { callbackQGraphicsGridLayoutRemoveAt(this, this->objectNameAbs().toUtf8().data(), index); };
};

void* QGraphicsGridLayout_NewQGraphicsGridLayout(void* parent){
	return new MyQGraphicsGridLayout(static_cast<QGraphicsLayoutItem*>(parent));
}

void QGraphicsGridLayout_AddItem2(void* ptr, void* item, int row, int column, int alignment){
	static_cast<QGraphicsGridLayout*>(ptr)->addItem(static_cast<QGraphicsLayoutItem*>(item), row, column, static_cast<Qt::AlignmentFlag>(alignment));
}

void QGraphicsGridLayout_AddItem(void* ptr, void* item, int row, int column, int rowSpan, int columnSpan, int alignment){
	static_cast<QGraphicsGridLayout*>(ptr)->addItem(static_cast<QGraphicsLayoutItem*>(item), row, column, rowSpan, columnSpan, static_cast<Qt::AlignmentFlag>(alignment));
}

int QGraphicsGridLayout_Alignment(void* ptr, void* item){
	return static_cast<QGraphicsGridLayout*>(ptr)->alignment(static_cast<QGraphicsLayoutItem*>(item));
}

int QGraphicsGridLayout_ColumnAlignment(void* ptr, int column){
	return static_cast<QGraphicsGridLayout*>(ptr)->columnAlignment(column);
}

int QGraphicsGridLayout_ColumnCount(void* ptr){
	return static_cast<QGraphicsGridLayout*>(ptr)->columnCount();
}

double QGraphicsGridLayout_ColumnMaximumWidth(void* ptr, int column){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->columnMaximumWidth(column));
}

double QGraphicsGridLayout_ColumnMinimumWidth(void* ptr, int column){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->columnMinimumWidth(column));
}

double QGraphicsGridLayout_ColumnPreferredWidth(void* ptr, int column){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->columnPreferredWidth(column));
}

double QGraphicsGridLayout_ColumnSpacing(void* ptr, int column){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->columnSpacing(column));
}

int QGraphicsGridLayout_ColumnStretchFactor(void* ptr, int column){
	return static_cast<QGraphicsGridLayout*>(ptr)->columnStretchFactor(column);
}

int QGraphicsGridLayout_Count(void* ptr){
	return static_cast<QGraphicsGridLayout*>(ptr)->count();
}

double QGraphicsGridLayout_HorizontalSpacing(void* ptr){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->horizontalSpacing());
}

void QGraphicsGridLayout_Invalidate(void* ptr){
	static_cast<MyQGraphicsGridLayout*>(ptr)->invalidate();
}

void QGraphicsGridLayout_InvalidateDefault(void* ptr){
	static_cast<QGraphicsGridLayout*>(ptr)->QGraphicsGridLayout::invalidate();
}

void* QGraphicsGridLayout_ItemAt(void* ptr, int row, int column){
	return static_cast<QGraphicsGridLayout*>(ptr)->itemAt(row, column);
}

void QGraphicsGridLayout_RemoveAt(void* ptr, int index){
	static_cast<MyQGraphicsGridLayout*>(ptr)->removeAt(index);
}

void QGraphicsGridLayout_RemoveAtDefault(void* ptr, int index){
	static_cast<QGraphicsGridLayout*>(ptr)->QGraphicsGridLayout::removeAt(index);
}

void QGraphicsGridLayout_RemoveItem(void* ptr, void* item){
	static_cast<QGraphicsGridLayout*>(ptr)->removeItem(static_cast<QGraphicsLayoutItem*>(item));
}

int QGraphicsGridLayout_RowAlignment(void* ptr, int row){
	return static_cast<QGraphicsGridLayout*>(ptr)->rowAlignment(row);
}

int QGraphicsGridLayout_RowCount(void* ptr){
	return static_cast<QGraphicsGridLayout*>(ptr)->rowCount();
}

double QGraphicsGridLayout_RowMaximumHeight(void* ptr, int row){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->rowMaximumHeight(row));
}

double QGraphicsGridLayout_RowMinimumHeight(void* ptr, int row){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->rowMinimumHeight(row));
}

double QGraphicsGridLayout_RowPreferredHeight(void* ptr, int row){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->rowPreferredHeight(row));
}

double QGraphicsGridLayout_RowSpacing(void* ptr, int row){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->rowSpacing(row));
}

int QGraphicsGridLayout_RowStretchFactor(void* ptr, int row){
	return static_cast<QGraphicsGridLayout*>(ptr)->rowStretchFactor(row);
}

void QGraphicsGridLayout_SetAlignment(void* ptr, void* item, int alignment){
	static_cast<QGraphicsGridLayout*>(ptr)->setAlignment(static_cast<QGraphicsLayoutItem*>(item), static_cast<Qt::AlignmentFlag>(alignment));
}

void QGraphicsGridLayout_SetColumnAlignment(void* ptr, int column, int alignment){
	static_cast<QGraphicsGridLayout*>(ptr)->setColumnAlignment(column, static_cast<Qt::AlignmentFlag>(alignment));
}

void QGraphicsGridLayout_SetColumnFixedWidth(void* ptr, int column, double width){
	static_cast<QGraphicsGridLayout*>(ptr)->setColumnFixedWidth(column, static_cast<double>(width));
}

void QGraphicsGridLayout_SetColumnMaximumWidth(void* ptr, int column, double width){
	static_cast<QGraphicsGridLayout*>(ptr)->setColumnMaximumWidth(column, static_cast<double>(width));
}

void QGraphicsGridLayout_SetColumnMinimumWidth(void* ptr, int column, double width){
	static_cast<QGraphicsGridLayout*>(ptr)->setColumnMinimumWidth(column, static_cast<double>(width));
}

void QGraphicsGridLayout_SetColumnPreferredWidth(void* ptr, int column, double width){
	static_cast<QGraphicsGridLayout*>(ptr)->setColumnPreferredWidth(column, static_cast<double>(width));
}

void QGraphicsGridLayout_SetColumnSpacing(void* ptr, int column, double spacing){
	static_cast<QGraphicsGridLayout*>(ptr)->setColumnSpacing(column, static_cast<double>(spacing));
}

void QGraphicsGridLayout_SetColumnStretchFactor(void* ptr, int column, int stretch){
	static_cast<QGraphicsGridLayout*>(ptr)->setColumnStretchFactor(column, stretch);
}

void QGraphicsGridLayout_SetHorizontalSpacing(void* ptr, double spacing){
	static_cast<QGraphicsGridLayout*>(ptr)->setHorizontalSpacing(static_cast<double>(spacing));
}

void QGraphicsGridLayout_SetRowAlignment(void* ptr, int row, int alignment){
	static_cast<QGraphicsGridLayout*>(ptr)->setRowAlignment(row, static_cast<Qt::AlignmentFlag>(alignment));
}

void QGraphicsGridLayout_SetRowFixedHeight(void* ptr, int row, double height){
	static_cast<QGraphicsGridLayout*>(ptr)->setRowFixedHeight(row, static_cast<double>(height));
}

void QGraphicsGridLayout_SetRowMaximumHeight(void* ptr, int row, double height){
	static_cast<QGraphicsGridLayout*>(ptr)->setRowMaximumHeight(row, static_cast<double>(height));
}

void QGraphicsGridLayout_SetRowMinimumHeight(void* ptr, int row, double height){
	static_cast<QGraphicsGridLayout*>(ptr)->setRowMinimumHeight(row, static_cast<double>(height));
}

void QGraphicsGridLayout_SetRowPreferredHeight(void* ptr, int row, double height){
	static_cast<QGraphicsGridLayout*>(ptr)->setRowPreferredHeight(row, static_cast<double>(height));
}

void QGraphicsGridLayout_SetRowSpacing(void* ptr, int row, double spacing){
	static_cast<QGraphicsGridLayout*>(ptr)->setRowSpacing(row, static_cast<double>(spacing));
}

void QGraphicsGridLayout_SetRowStretchFactor(void* ptr, int row, int stretch){
	static_cast<QGraphicsGridLayout*>(ptr)->setRowStretchFactor(row, stretch);
}

void QGraphicsGridLayout_SetSpacing(void* ptr, double spacing){
	static_cast<QGraphicsGridLayout*>(ptr)->setSpacing(static_cast<double>(spacing));
}

void QGraphicsGridLayout_SetVerticalSpacing(void* ptr, double spacing){
	static_cast<QGraphicsGridLayout*>(ptr)->setVerticalSpacing(static_cast<double>(spacing));
}

double QGraphicsGridLayout_VerticalSpacing(void* ptr){
	return static_cast<double>(static_cast<QGraphicsGridLayout*>(ptr)->verticalSpacing());
}

void QGraphicsGridLayout_DestroyQGraphicsGridLayout(void* ptr){
	static_cast<QGraphicsGridLayout*>(ptr)->~QGraphicsGridLayout();
}

char* QGraphicsGridLayout_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsGridLayout*>(static_cast<QGraphicsGridLayout*>(ptr))) {
		return static_cast<MyQGraphicsGridLayout*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsGridLayout_BASE").toUtf8().data();
}

void QGraphicsGridLayout_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsGridLayout*>(static_cast<QGraphicsGridLayout*>(ptr))) {
		static_cast<MyQGraphicsGridLayout*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsItemGroup: public QGraphicsItemGroup {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQGraphicsItemGroup(QGraphicsItem *parent) : QGraphicsItemGroup(parent) {};
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsItemGroupPaint(this, this->objectNameAbs().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
};

void* QGraphicsItemGroup_NewQGraphicsItemGroup(void* parent){
	return new MyQGraphicsItemGroup(static_cast<QGraphicsItem*>(parent));
}

void QGraphicsItemGroup_AddToGroup(void* ptr, void* item){
	static_cast<QGraphicsItemGroup*>(ptr)->addToGroup(static_cast<QGraphicsItem*>(item));
}

int QGraphicsItemGroup_IsObscuredBy(void* ptr, void* item){
	return static_cast<QGraphicsItemGroup*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void* QGraphicsItemGroup_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsItemGroup*>(ptr)->opaqueArea());
}

void QGraphicsItemGroup_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsItemGroup*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsItemGroup_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsItemGroup*>(ptr)->QGraphicsItemGroup::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsItemGroup_RemoveFromGroup(void* ptr, void* item){
	static_cast<QGraphicsItemGroup*>(ptr)->removeFromGroup(static_cast<QGraphicsItem*>(item));
}

int QGraphicsItemGroup_Type(void* ptr){
	return static_cast<QGraphicsItemGroup*>(ptr)->type();
}

void QGraphicsItemGroup_DestroyQGraphicsItemGroup(void* ptr){
	static_cast<QGraphicsItemGroup*>(ptr)->~QGraphicsItemGroup();
}

char* QGraphicsItemGroup_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsItemGroup*>(static_cast<QGraphicsItemGroup*>(ptr))) {
		return static_cast<MyQGraphicsItemGroup*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsItemGroup_BASE").toUtf8().data();
}

void QGraphicsItemGroup_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsItemGroup*>(static_cast<QGraphicsItemGroup*>(ptr))) {
		static_cast<MyQGraphicsItemGroup*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsLineItem: public QGraphicsLineItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQGraphicsLineItem(QGraphicsItem *parent) : QGraphicsLineItem(parent) {};
	MyQGraphicsLineItem(const QLineF &line, QGraphicsItem *parent) : QGraphicsLineItem(line, parent) {};
	MyQGraphicsLineItem(qreal x1, qreal y1, qreal x2, qreal y2, QGraphicsItem *parent) : QGraphicsLineItem(x1, y1, x2, y2, parent) {};
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsLineItemPaint(this, this->objectNameAbs().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
};

void* QGraphicsLineItem_NewQGraphicsLineItem(void* parent){
	return new MyQGraphicsLineItem(static_cast<QGraphicsItem*>(parent));
}

void* QGraphicsLineItem_NewQGraphicsLineItem2(void* line, void* parent){
	return new MyQGraphicsLineItem(*static_cast<QLineF*>(line), static_cast<QGraphicsItem*>(parent));
}

void* QGraphicsLineItem_NewQGraphicsLineItem3(double x1, double y1, double x2, double y2, void* parent){
	return new MyQGraphicsLineItem(static_cast<double>(x1), static_cast<double>(y1), static_cast<double>(x2), static_cast<double>(y2), static_cast<QGraphicsItem*>(parent));
}

int QGraphicsLineItem_Contains(void* ptr, void* point){
	return static_cast<QGraphicsLineItem*>(ptr)->contains(*static_cast<QPointF*>(point));
}

int QGraphicsLineItem_IsObscuredBy(void* ptr, void* item){
	return static_cast<QGraphicsLineItem*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void* QGraphicsLineItem_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsLineItem*>(ptr)->opaqueArea());
}

void QGraphicsLineItem_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsLineItem*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsLineItem_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsLineItem*>(ptr)->QGraphicsLineItem::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void* QGraphicsLineItem_Pen(void* ptr){
	return new QPen(static_cast<QGraphicsLineItem*>(ptr)->pen());
}

void QGraphicsLineItem_SetLine(void* ptr, void* line){
	static_cast<QGraphicsLineItem*>(ptr)->setLine(*static_cast<QLineF*>(line));
}

void QGraphicsLineItem_SetLine2(void* ptr, double x1, double y1, double x2, double y2){
	static_cast<QGraphicsLineItem*>(ptr)->setLine(static_cast<double>(x1), static_cast<double>(y1), static_cast<double>(x2), static_cast<double>(y2));
}

void QGraphicsLineItem_SetPen(void* ptr, void* pen){
	static_cast<QGraphicsLineItem*>(ptr)->setPen(*static_cast<QPen*>(pen));
}

void* QGraphicsLineItem_Shape(void* ptr){
	return new QPainterPath(static_cast<QGraphicsLineItem*>(ptr)->shape());
}

int QGraphicsLineItem_Type(void* ptr){
	return static_cast<QGraphicsLineItem*>(ptr)->type();
}

void QGraphicsLineItem_DestroyQGraphicsLineItem(void* ptr){
	static_cast<QGraphicsLineItem*>(ptr)->~QGraphicsLineItem();
}

char* QGraphicsLineItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsLineItem*>(static_cast<QGraphicsLineItem*>(ptr))) {
		return static_cast<MyQGraphicsLineItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsLineItem_BASE").toUtf8().data();
}

void QGraphicsLineItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsLineItem*>(static_cast<QGraphicsLineItem*>(ptr))) {
		static_cast<MyQGraphicsLineItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsLinearLayout: public QGraphicsLinearLayout {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQGraphicsLinearLayout(QGraphicsLayoutItem *parent) : QGraphicsLinearLayout(parent) {};
	MyQGraphicsLinearLayout(Qt::Orientation orientation, QGraphicsLayoutItem *parent) : QGraphicsLinearLayout(orientation, parent) {};
	void invalidate() { callbackQGraphicsLinearLayoutInvalidate(this, this->objectNameAbs().toUtf8().data()); };
	void removeAt(int index) { callbackQGraphicsLinearLayoutRemoveAt(this, this->objectNameAbs().toUtf8().data(), index); };
};

void* QGraphicsLinearLayout_NewQGraphicsLinearLayout(void* parent){
	return new MyQGraphicsLinearLayout(static_cast<QGraphicsLayoutItem*>(parent));
}

void* QGraphicsLinearLayout_NewQGraphicsLinearLayout2(int orientation, void* parent){
	return new MyQGraphicsLinearLayout(static_cast<Qt::Orientation>(orientation), static_cast<QGraphicsLayoutItem*>(parent));
}

void QGraphicsLinearLayout_AddItem(void* ptr, void* item){
	static_cast<QGraphicsLinearLayout*>(ptr)->addItem(static_cast<QGraphicsLayoutItem*>(item));
}

void QGraphicsLinearLayout_AddStretch(void* ptr, int stretch){
	static_cast<QGraphicsLinearLayout*>(ptr)->addStretch(stretch);
}

int QGraphicsLinearLayout_Alignment(void* ptr, void* item){
	return static_cast<QGraphicsLinearLayout*>(ptr)->alignment(static_cast<QGraphicsLayoutItem*>(item));
}

int QGraphicsLinearLayout_Count(void* ptr){
	return static_cast<QGraphicsLinearLayout*>(ptr)->count();
}

void QGraphicsLinearLayout_InsertItem(void* ptr, int index, void* item){
	static_cast<QGraphicsLinearLayout*>(ptr)->insertItem(index, static_cast<QGraphicsLayoutItem*>(item));
}

void QGraphicsLinearLayout_InsertStretch(void* ptr, int index, int stretch){
	static_cast<QGraphicsLinearLayout*>(ptr)->insertStretch(index, stretch);
}

void QGraphicsLinearLayout_Invalidate(void* ptr){
	static_cast<MyQGraphicsLinearLayout*>(ptr)->invalidate();
}

void QGraphicsLinearLayout_InvalidateDefault(void* ptr){
	static_cast<QGraphicsLinearLayout*>(ptr)->QGraphicsLinearLayout::invalidate();
}

void* QGraphicsLinearLayout_ItemAt(void* ptr, int index){
	return static_cast<QGraphicsLinearLayout*>(ptr)->itemAt(index);
}

double QGraphicsLinearLayout_ItemSpacing(void* ptr, int index){
	return static_cast<double>(static_cast<QGraphicsLinearLayout*>(ptr)->itemSpacing(index));
}

int QGraphicsLinearLayout_Orientation(void* ptr){
	return static_cast<QGraphicsLinearLayout*>(ptr)->orientation();
}

void QGraphicsLinearLayout_RemoveAt(void* ptr, int index){
	static_cast<MyQGraphicsLinearLayout*>(ptr)->removeAt(index);
}

void QGraphicsLinearLayout_RemoveAtDefault(void* ptr, int index){
	static_cast<QGraphicsLinearLayout*>(ptr)->QGraphicsLinearLayout::removeAt(index);
}

void QGraphicsLinearLayout_RemoveItem(void* ptr, void* item){
	static_cast<QGraphicsLinearLayout*>(ptr)->removeItem(static_cast<QGraphicsLayoutItem*>(item));
}

void QGraphicsLinearLayout_SetAlignment(void* ptr, void* item, int alignment){
	static_cast<QGraphicsLinearLayout*>(ptr)->setAlignment(static_cast<QGraphicsLayoutItem*>(item), static_cast<Qt::AlignmentFlag>(alignment));
}

void QGraphicsLinearLayout_SetItemSpacing(void* ptr, int index, double spacing){
	static_cast<QGraphicsLinearLayout*>(ptr)->setItemSpacing(index, static_cast<double>(spacing));
}

void QGraphicsLinearLayout_SetOrientation(void* ptr, int orientation){
	static_cast<QGraphicsLinearLayout*>(ptr)->setOrientation(static_cast<Qt::Orientation>(orientation));
}

void QGraphicsLinearLayout_SetSpacing(void* ptr, double spacing){
	static_cast<QGraphicsLinearLayout*>(ptr)->setSpacing(static_cast<double>(spacing));
}

void QGraphicsLinearLayout_SetStretchFactor(void* ptr, void* item, int stretch){
	static_cast<QGraphicsLinearLayout*>(ptr)->setStretchFactor(static_cast<QGraphicsLayoutItem*>(item), stretch);
}

double QGraphicsLinearLayout_Spacing(void* ptr){
	return static_cast<double>(static_cast<QGraphicsLinearLayout*>(ptr)->spacing());
}

int QGraphicsLinearLayout_StretchFactor(void* ptr, void* item){
	return static_cast<QGraphicsLinearLayout*>(ptr)->stretchFactor(static_cast<QGraphicsLayoutItem*>(item));
}

void QGraphicsLinearLayout_DestroyQGraphicsLinearLayout(void* ptr){
	static_cast<QGraphicsLinearLayout*>(ptr)->~QGraphicsLinearLayout();
}

char* QGraphicsLinearLayout_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsLinearLayout*>(static_cast<QGraphicsLinearLayout*>(ptr))) {
		return static_cast<MyQGraphicsLinearLayout*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsLinearLayout_BASE").toUtf8().data();
}

void QGraphicsLinearLayout_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsLinearLayout*>(static_cast<QGraphicsLinearLayout*>(ptr))) {
		static_cast<MyQGraphicsLinearLayout*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsObject: public QGraphicsObject {
public:
	void Signal_EnabledChanged() { callbackQGraphicsObjectEnabledChanged(this, this->objectName().toUtf8().data()); };
	void Signal_OpacityChanged() { callbackQGraphicsObjectOpacityChanged(this, this->objectName().toUtf8().data()); };
	void Signal_ParentChanged() { callbackQGraphicsObjectParentChanged(this, this->objectName().toUtf8().data()); };
	void Signal_RotationChanged() { callbackQGraphicsObjectRotationChanged(this, this->objectName().toUtf8().data()); };
	void Signal_ScaleChanged() { callbackQGraphicsObjectScaleChanged(this, this->objectName().toUtf8().data()); };
	void Signal_VisibleChanged() { callbackQGraphicsObjectVisibleChanged(this, this->objectName().toUtf8().data()); };
	void Signal_XChanged() { callbackQGraphicsObjectXChanged(this, this->objectName().toUtf8().data()); };
	void Signal_YChanged() { callbackQGraphicsObjectYChanged(this, this->objectName().toUtf8().data()); };
	void Signal_ZChanged() { callbackQGraphicsObjectZChanged(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsObjectTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsObjectChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsObjectCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QGraphicsObject_ConnectEnabledChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::enabledChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_EnabledChanged));;
}

void QGraphicsObject_DisconnectEnabledChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::enabledChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_EnabledChanged));;
}

void QGraphicsObject_EnabledChanged(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->enabledChanged();
}

int QGraphicsObject_Event(void* ptr, void* ev){
	return static_cast<QGraphicsObject*>(ptr)->event(static_cast<QEvent*>(ev));
}

void QGraphicsObject_GrabGesture(void* ptr, int gesture, int flags){
	static_cast<QGraphicsObject*>(ptr)->grabGesture(static_cast<Qt::GestureType>(gesture), static_cast<Qt::GestureFlag>(flags));
}

void QGraphicsObject_ConnectOpacityChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::opacityChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_OpacityChanged));;
}

void QGraphicsObject_DisconnectOpacityChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::opacityChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_OpacityChanged));;
}

void QGraphicsObject_OpacityChanged(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->opacityChanged();
}

void QGraphicsObject_ConnectParentChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::parentChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_ParentChanged));;
}

void QGraphicsObject_DisconnectParentChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::parentChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_ParentChanged));;
}

void QGraphicsObject_ParentChanged(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->parentChanged();
}

void QGraphicsObject_ConnectRotationChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::rotationChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_RotationChanged));;
}

void QGraphicsObject_DisconnectRotationChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::rotationChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_RotationChanged));;
}

void QGraphicsObject_RotationChanged(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->rotationChanged();
}

void QGraphicsObject_ConnectScaleChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::scaleChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_ScaleChanged));;
}

void QGraphicsObject_DisconnectScaleChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::scaleChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_ScaleChanged));;
}

void QGraphicsObject_ScaleChanged(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->scaleChanged();
}

void QGraphicsObject_UngrabGesture(void* ptr, int gesture){
	static_cast<QGraphicsObject*>(ptr)->ungrabGesture(static_cast<Qt::GestureType>(gesture));
}

void QGraphicsObject_ConnectVisibleChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::visibleChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_VisibleChanged));;
}

void QGraphicsObject_DisconnectVisibleChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::visibleChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_VisibleChanged));;
}

void QGraphicsObject_VisibleChanged(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->visibleChanged();
}

void QGraphicsObject_ConnectXChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::xChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_XChanged));;
}

void QGraphicsObject_DisconnectXChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::xChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_XChanged));;
}

void QGraphicsObject_XChanged(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->xChanged();
}

void QGraphicsObject_ConnectYChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::yChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_YChanged));;
}

void QGraphicsObject_DisconnectYChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::yChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_YChanged));;
}

void QGraphicsObject_YChanged(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->yChanged();
}

void QGraphicsObject_ConnectZChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::zChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_ZChanged));;
}

void QGraphicsObject_DisconnectZChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsObject*>(ptr), static_cast<void (QGraphicsObject::*)()>(&QGraphicsObject::zChanged), static_cast<MyQGraphicsObject*>(ptr), static_cast<void (MyQGraphicsObject::*)()>(&MyQGraphicsObject::Signal_ZChanged));;
}

void QGraphicsObject_ZChanged(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->zChanged();
}

void QGraphicsObject_DestroyQGraphicsObject(void* ptr){
	static_cast<QGraphicsObject*>(ptr)->~QGraphicsObject();
}

void QGraphicsObject_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsObject*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsObject_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsObject*>(ptr)->QGraphicsObject::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsObject_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsObject*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsObject_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsObject*>(ptr)->QGraphicsObject::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsObject_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsObject*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsObject_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsObject*>(ptr)->QGraphicsObject::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsOpacityEffect: public QGraphicsOpacityEffect {
public:
	MyQGraphicsOpacityEffect(QObject *parent) : QGraphicsOpacityEffect(parent) {};
	void Signal_OpacityChanged(qreal opacity) { callbackQGraphicsOpacityEffectOpacityChanged(this, this->objectName().toUtf8().data(), static_cast<double>(opacity)); };
	void Signal_OpacityMaskChanged(const QBrush & mask) { callbackQGraphicsOpacityEffectOpacityMaskChanged(this, this->objectName().toUtf8().data(), new QBrush(mask)); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsOpacityEffectTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsOpacityEffectChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsOpacityEffectCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

double QGraphicsOpacityEffect_Opacity(void* ptr){
	return static_cast<double>(static_cast<QGraphicsOpacityEffect*>(ptr)->opacity());
}

void* QGraphicsOpacityEffect_OpacityMask(void* ptr){
	return new QBrush(static_cast<QGraphicsOpacityEffect*>(ptr)->opacityMask());
}

void QGraphicsOpacityEffect_SetOpacity(void* ptr, double opacity){
	QMetaObject::invokeMethod(static_cast<QGraphicsOpacityEffect*>(ptr), "setOpacity", Q_ARG(qreal, static_cast<double>(opacity)));
}

void QGraphicsOpacityEffect_SetOpacityMask(void* ptr, void* mask){
	QMetaObject::invokeMethod(static_cast<QGraphicsOpacityEffect*>(ptr), "setOpacityMask", Q_ARG(QBrush, *static_cast<QBrush*>(mask)));
}

void* QGraphicsOpacityEffect_NewQGraphicsOpacityEffect(void* parent){
	return new MyQGraphicsOpacityEffect(static_cast<QObject*>(parent));
}

void QGraphicsOpacityEffect_ConnectOpacityChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsOpacityEffect*>(ptr), static_cast<void (QGraphicsOpacityEffect::*)(qreal)>(&QGraphicsOpacityEffect::opacityChanged), static_cast<MyQGraphicsOpacityEffect*>(ptr), static_cast<void (MyQGraphicsOpacityEffect::*)(qreal)>(&MyQGraphicsOpacityEffect::Signal_OpacityChanged));;
}

void QGraphicsOpacityEffect_DisconnectOpacityChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsOpacityEffect*>(ptr), static_cast<void (QGraphicsOpacityEffect::*)(qreal)>(&QGraphicsOpacityEffect::opacityChanged), static_cast<MyQGraphicsOpacityEffect*>(ptr), static_cast<void (MyQGraphicsOpacityEffect::*)(qreal)>(&MyQGraphicsOpacityEffect::Signal_OpacityChanged));;
}

void QGraphicsOpacityEffect_OpacityChanged(void* ptr, double opacity){
	static_cast<QGraphicsOpacityEffect*>(ptr)->opacityChanged(static_cast<double>(opacity));
}

void QGraphicsOpacityEffect_ConnectOpacityMaskChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsOpacityEffect*>(ptr), static_cast<void (QGraphicsOpacityEffect::*)(const QBrush &)>(&QGraphicsOpacityEffect::opacityMaskChanged), static_cast<MyQGraphicsOpacityEffect*>(ptr), static_cast<void (MyQGraphicsOpacityEffect::*)(const QBrush &)>(&MyQGraphicsOpacityEffect::Signal_OpacityMaskChanged));;
}

void QGraphicsOpacityEffect_DisconnectOpacityMaskChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsOpacityEffect*>(ptr), static_cast<void (QGraphicsOpacityEffect::*)(const QBrush &)>(&QGraphicsOpacityEffect::opacityMaskChanged), static_cast<MyQGraphicsOpacityEffect*>(ptr), static_cast<void (MyQGraphicsOpacityEffect::*)(const QBrush &)>(&MyQGraphicsOpacityEffect::Signal_OpacityMaskChanged));;
}

void QGraphicsOpacityEffect_OpacityMaskChanged(void* ptr, void* mask){
	static_cast<QGraphicsOpacityEffect*>(ptr)->opacityMaskChanged(*static_cast<QBrush*>(mask));
}

void QGraphicsOpacityEffect_DestroyQGraphicsOpacityEffect(void* ptr){
	static_cast<QGraphicsOpacityEffect*>(ptr)->~QGraphicsOpacityEffect();
}

void QGraphicsOpacityEffect_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsOpacityEffect*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsOpacityEffect_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsOpacityEffect*>(ptr)->QGraphicsOpacityEffect::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsOpacityEffect_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsOpacityEffect*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsOpacityEffect_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsOpacityEffect*>(ptr)->QGraphicsOpacityEffect::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsOpacityEffect_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsOpacityEffect*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsOpacityEffect_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsOpacityEffect*>(ptr)->QGraphicsOpacityEffect::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsPathItem: public QGraphicsPathItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsPathItemPaint(this, this->objectNameAbs().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
};

int QGraphicsPathItem_Contains(void* ptr, void* point){
	return static_cast<QGraphicsPathItem*>(ptr)->contains(*static_cast<QPointF*>(point));
}

int QGraphicsPathItem_IsObscuredBy(void* ptr, void* item){
	return static_cast<QGraphicsPathItem*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void* QGraphicsPathItem_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsPathItem*>(ptr)->opaqueArea());
}

void QGraphicsPathItem_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsPathItem*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsPathItem_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsPathItem*>(ptr)->QGraphicsPathItem::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void* QGraphicsPathItem_Path(void* ptr){
	return new QPainterPath(static_cast<QGraphicsPathItem*>(ptr)->path());
}

void QGraphicsPathItem_SetPath(void* ptr, void* path){
	static_cast<QGraphicsPathItem*>(ptr)->setPath(*static_cast<QPainterPath*>(path));
}

void* QGraphicsPathItem_Shape(void* ptr){
	return new QPainterPath(static_cast<QGraphicsPathItem*>(ptr)->shape());
}

int QGraphicsPathItem_Type(void* ptr){
	return static_cast<QGraphicsPathItem*>(ptr)->type();
}

void QGraphicsPathItem_DestroyQGraphicsPathItem(void* ptr){
	static_cast<QGraphicsPathItem*>(ptr)->~QGraphicsPathItem();
}

char* QGraphicsPathItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsPathItem*>(static_cast<QGraphicsPathItem*>(ptr))) {
		return static_cast<MyQGraphicsPathItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsPathItem_BASE").toUtf8().data();
}

void QGraphicsPathItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsPathItem*>(static_cast<QGraphicsPathItem*>(ptr))) {
		static_cast<MyQGraphicsPathItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsPixmapItem: public QGraphicsPixmapItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQGraphicsPixmapItem(QGraphicsItem *parent) : QGraphicsPixmapItem(parent) {};
	MyQGraphicsPixmapItem(const QPixmap &pixmap, QGraphicsItem *parent) : QGraphicsPixmapItem(pixmap, parent) {};
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsPixmapItemPaint(this, this->objectNameAbs().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
};

void* QGraphicsPixmapItem_NewQGraphicsPixmapItem(void* parent){
	return new MyQGraphicsPixmapItem(static_cast<QGraphicsItem*>(parent));
}

void* QGraphicsPixmapItem_NewQGraphicsPixmapItem2(void* pixmap, void* parent){
	return new MyQGraphicsPixmapItem(*static_cast<QPixmap*>(pixmap), static_cast<QGraphicsItem*>(parent));
}

int QGraphicsPixmapItem_Contains(void* ptr, void* point){
	return static_cast<QGraphicsPixmapItem*>(ptr)->contains(*static_cast<QPointF*>(point));
}

int QGraphicsPixmapItem_IsObscuredBy(void* ptr, void* item){
	return static_cast<QGraphicsPixmapItem*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void* QGraphicsPixmapItem_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsPixmapItem*>(ptr)->opaqueArea());
}

void QGraphicsPixmapItem_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsPixmapItem*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsPixmapItem_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsPixmapItem*>(ptr)->QGraphicsPixmapItem::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void* QGraphicsPixmapItem_Pixmap(void* ptr){
	return new QPixmap(static_cast<QGraphicsPixmapItem*>(ptr)->pixmap());
}

void QGraphicsPixmapItem_SetOffset(void* ptr, void* offset){
	static_cast<QGraphicsPixmapItem*>(ptr)->setOffset(*static_cast<QPointF*>(offset));
}

void QGraphicsPixmapItem_SetOffset2(void* ptr, double x, double y){
	static_cast<QGraphicsPixmapItem*>(ptr)->setOffset(static_cast<double>(x), static_cast<double>(y));
}

void QGraphicsPixmapItem_SetPixmap(void* ptr, void* pixmap){
	static_cast<QGraphicsPixmapItem*>(ptr)->setPixmap(*static_cast<QPixmap*>(pixmap));
}

void QGraphicsPixmapItem_SetShapeMode(void* ptr, int mode){
	static_cast<QGraphicsPixmapItem*>(ptr)->setShapeMode(static_cast<QGraphicsPixmapItem::ShapeMode>(mode));
}

void QGraphicsPixmapItem_SetTransformationMode(void* ptr, int mode){
	static_cast<QGraphicsPixmapItem*>(ptr)->setTransformationMode(static_cast<Qt::TransformationMode>(mode));
}

void* QGraphicsPixmapItem_Shape(void* ptr){
	return new QPainterPath(static_cast<QGraphicsPixmapItem*>(ptr)->shape());
}

int QGraphicsPixmapItem_ShapeMode(void* ptr){
	return static_cast<QGraphicsPixmapItem*>(ptr)->shapeMode();
}

int QGraphicsPixmapItem_TransformationMode(void* ptr){
	return static_cast<QGraphicsPixmapItem*>(ptr)->transformationMode();
}

int QGraphicsPixmapItem_Type(void* ptr){
	return static_cast<QGraphicsPixmapItem*>(ptr)->type();
}

void QGraphicsPixmapItem_DestroyQGraphicsPixmapItem(void* ptr){
	static_cast<QGraphicsPixmapItem*>(ptr)->~QGraphicsPixmapItem();
}

char* QGraphicsPixmapItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsPixmapItem*>(static_cast<QGraphicsPixmapItem*>(ptr))) {
		return static_cast<MyQGraphicsPixmapItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsPixmapItem_BASE").toUtf8().data();
}

void QGraphicsPixmapItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsPixmapItem*>(static_cast<QGraphicsPixmapItem*>(ptr))) {
		static_cast<MyQGraphicsPixmapItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsPolygonItem: public QGraphicsPolygonItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsPolygonItemPaint(this, this->objectNameAbs().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
};

int QGraphicsPolygonItem_Contains(void* ptr, void* point){
	return static_cast<QGraphicsPolygonItem*>(ptr)->contains(*static_cast<QPointF*>(point));
}

int QGraphicsPolygonItem_FillRule(void* ptr){
	return static_cast<QGraphicsPolygonItem*>(ptr)->fillRule();
}

int QGraphicsPolygonItem_IsObscuredBy(void* ptr, void* item){
	return static_cast<QGraphicsPolygonItem*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void* QGraphicsPolygonItem_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsPolygonItem*>(ptr)->opaqueArea());
}

void QGraphicsPolygonItem_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsPolygonItem*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsPolygonItem_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsPolygonItem*>(ptr)->QGraphicsPolygonItem::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void* QGraphicsPolygonItem_Polygon(void* ptr){
	return new QPolygonF(static_cast<QGraphicsPolygonItem*>(ptr)->polygon());
}

void QGraphicsPolygonItem_SetFillRule(void* ptr, int rule){
	static_cast<QGraphicsPolygonItem*>(ptr)->setFillRule(static_cast<Qt::FillRule>(rule));
}

void QGraphicsPolygonItem_SetPolygon(void* ptr, void* polygon){
	static_cast<QGraphicsPolygonItem*>(ptr)->setPolygon(*static_cast<QPolygonF*>(polygon));
}

void* QGraphicsPolygonItem_Shape(void* ptr){
	return new QPainterPath(static_cast<QGraphicsPolygonItem*>(ptr)->shape());
}

int QGraphicsPolygonItem_Type(void* ptr){
	return static_cast<QGraphicsPolygonItem*>(ptr)->type();
}

void QGraphicsPolygonItem_DestroyQGraphicsPolygonItem(void* ptr){
	static_cast<QGraphicsPolygonItem*>(ptr)->~QGraphicsPolygonItem();
}

char* QGraphicsPolygonItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsPolygonItem*>(static_cast<QGraphicsPolygonItem*>(ptr))) {
		return static_cast<MyQGraphicsPolygonItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsPolygonItem_BASE").toUtf8().data();
}

void QGraphicsPolygonItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsPolygonItem*>(static_cast<QGraphicsPolygonItem*>(ptr))) {
		static_cast<MyQGraphicsPolygonItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsProxyWidget: public QGraphicsProxyWidget {
public:
	MyQGraphicsProxyWidget(QGraphicsItem *parent, Qt::WindowFlags wFlags) : QGraphicsProxyWidget(parent, wFlags) {};
	void contextMenuEvent(QGraphicsSceneContextMenuEvent * event) { callbackQGraphicsProxyWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsProxyWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsProxyWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsProxyWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsProxyWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQGraphicsProxyWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQGraphicsProxyWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void grabMouseEvent(QEvent * event) { callbackQGraphicsProxyWidgetGrabMouseEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQGraphicsProxyWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void hoverEnterEvent(QGraphicsSceneHoverEvent * event) { callbackQGraphicsProxyWidgetHoverEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hoverLeaveEvent(QGraphicsSceneHoverEvent * event) { callbackQGraphicsProxyWidgetHoverLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void hoverMoveEvent(QGraphicsSceneHoverEvent * event) { callbackQGraphicsProxyWidgetHoverMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQGraphicsProxyWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQGraphicsProxyWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQGraphicsProxyWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QGraphicsSceneMouseEvent * event) { callbackQGraphicsProxyWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QGraphicsSceneMouseEvent * event) { callbackQGraphicsProxyWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QGraphicsSceneMouseEvent * event) { callbackQGraphicsProxyWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QGraphicsSceneMouseEvent * event) { callbackQGraphicsProxyWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsProxyWidgetPaint(this, this->objectName().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
	void resizeEvent(QGraphicsSceneResizeEvent * event) { callbackQGraphicsProxyWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void showEvent(QShowEvent * event) { callbackQGraphicsProxyWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void ungrabMouseEvent(QEvent * event) { callbackQGraphicsProxyWidgetUngrabMouseEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QGraphicsSceneWheelEvent * event) { callbackQGraphicsProxyWidgetWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQGraphicsProxyWidgetChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQGraphicsProxyWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void grabKeyboardEvent(QEvent * event) { callbackQGraphicsProxyWidgetGrabKeyboardEvent(this, this->objectName().toUtf8().data(), event); };
	void initStyleOption(QStyleOption * option) const { callbackQGraphicsProxyWidgetInitStyleOption(const_cast<MyQGraphicsProxyWidget*>(this), this->objectName().toUtf8().data(), option); };
	void moveEvent(QGraphicsSceneMoveEvent * event) { callbackQGraphicsProxyWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintWindowFrame(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsProxyWidgetPaintWindowFrame(this, this->objectName().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
	void polishEvent() { callbackQGraphicsProxyWidgetPolishEvent(this, this->objectName().toUtf8().data()); };
	void ungrabKeyboardEvent(QEvent * event) { callbackQGraphicsProxyWidgetUngrabKeyboardEvent(this, this->objectName().toUtf8().data(), event); };
	void updateGeometry() { callbackQGraphicsProxyWidgetUpdateGeometry(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsProxyWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsProxyWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsProxyWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QGraphicsProxyWidget_NewQGraphicsProxyWidget(void* parent, int wFlags){
	return new MyQGraphicsProxyWidget(static_cast<QGraphicsItem*>(parent), static_cast<Qt::WindowType>(wFlags));
}

void QGraphicsProxyWidget_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->contextMenuEvent(static_cast<QGraphicsSceneContextMenuEvent*>(event));
}

void QGraphicsProxyWidget_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::contextMenuEvent(static_cast<QGraphicsSceneContextMenuEvent*>(event));
}

void* QGraphicsProxyWidget_CreateProxyForChildWidget(void* ptr, void* child){
	return static_cast<QGraphicsProxyWidget*>(ptr)->createProxyForChildWidget(static_cast<QWidget*>(child));
}

void QGraphicsProxyWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->dragEnterEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsProxyWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::dragEnterEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsProxyWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->dragLeaveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsProxyWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::dragLeaveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsProxyWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->dragMoveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsProxyWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::dragMoveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsProxyWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->dropEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsProxyWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::dropEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

int QGraphicsProxyWidget_Event(void* ptr, void* event){
	return static_cast<QGraphicsProxyWidget*>(ptr)->event(static_cast<QEvent*>(event));
}

int QGraphicsProxyWidget_EventFilter(void* ptr, void* object, void* event){
	return static_cast<QGraphicsProxyWidget*>(ptr)->eventFilter(static_cast<QObject*>(object), static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsProxyWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

int QGraphicsProxyWidget_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QGraphicsProxyWidget*>(ptr)->focusNextPrevChild(next != 0);
}

void QGraphicsProxyWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsProxyWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsProxyWidget_GrabMouseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->grabMouseEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_GrabMouseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::grabMouseEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QGraphicsProxyWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QGraphicsProxyWidget_HoverEnterEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->hoverEnterEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsProxyWidget_HoverEnterEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::hoverEnterEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsProxyWidget_HoverLeaveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->hoverLeaveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsProxyWidget_HoverLeaveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::hoverLeaveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsProxyWidget_HoverMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->hoverMoveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsProxyWidget_HoverMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::hoverMoveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsProxyWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QGraphicsProxyWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void* QGraphicsProxyWidget_InputMethodQuery(void* ptr, int query){
	return new QVariant(static_cast<QGraphicsProxyWidget*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(query)));
}

void* QGraphicsProxyWidget_ItemChange(void* ptr, int change, void* value){
	return new QVariant(static_cast<QGraphicsProxyWidget*>(ptr)->itemChange(static_cast<QGraphicsItem::GraphicsItemChange>(change), *static_cast<QVariant*>(value)));
}

void QGraphicsProxyWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsProxyWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsProxyWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsProxyWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsProxyWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsProxyWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::mouseDoubleClickEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsProxyWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->mouseMoveEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsProxyWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::mouseMoveEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsProxyWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->mousePressEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsProxyWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::mousePressEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsProxyWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->mouseReleaseEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsProxyWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::mouseReleaseEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsProxyWidget_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsProxyWidget_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsProxyWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->resizeEvent(static_cast<QGraphicsSceneResizeEvent*>(event));
}

void QGraphicsProxyWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::resizeEvent(static_cast<QGraphicsSceneResizeEvent*>(event));
}

void QGraphicsProxyWidget_SetWidget(void* ptr, void* widget){
	static_cast<QGraphicsProxyWidget*>(ptr)->setWidget(static_cast<QWidget*>(widget));
}

void QGraphicsProxyWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QGraphicsProxyWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::showEvent(static_cast<QShowEvent*>(event));
}

int QGraphicsProxyWidget_Type(void* ptr){
	return static_cast<QGraphicsProxyWidget*>(ptr)->type();
}

void QGraphicsProxyWidget_UngrabMouseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->ungrabMouseEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_UngrabMouseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::ungrabMouseEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_WheelEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->wheelEvent(static_cast<QGraphicsSceneWheelEvent*>(event));
}

void QGraphicsProxyWidget_WheelEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::wheelEvent(static_cast<QGraphicsSceneWheelEvent*>(event));
}

void* QGraphicsProxyWidget_Widget(void* ptr){
	return static_cast<QGraphicsProxyWidget*>(ptr)->widget();
}

void QGraphicsProxyWidget_DestroyQGraphicsProxyWidget(void* ptr){
	static_cast<QGraphicsProxyWidget*>(ptr)->~QGraphicsProxyWidget();
}

void QGraphicsProxyWidget_ChangeEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_ChangeEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::changeEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QGraphicsProxyWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QGraphicsProxyWidget_GrabKeyboardEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->grabKeyboardEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_GrabKeyboardEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::grabKeyboardEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_InitStyleOption(void* ptr, void* option){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->initStyleOption(static_cast<QStyleOption*>(option));
}

void QGraphicsProxyWidget_InitStyleOptionDefault(void* ptr, void* option){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::initStyleOption(static_cast<QStyleOption*>(option));
}

void QGraphicsProxyWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->moveEvent(static_cast<QGraphicsSceneMoveEvent*>(event));
}

void QGraphicsProxyWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::moveEvent(static_cast<QGraphicsSceneMoveEvent*>(event));
}

void QGraphicsProxyWidget_PaintWindowFrame(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->paintWindowFrame(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsProxyWidget_PaintWindowFrameDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::paintWindowFrame(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsProxyWidget_PolishEvent(void* ptr){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->polishEvent();
}

void QGraphicsProxyWidget_PolishEventDefault(void* ptr){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::polishEvent();
}

void QGraphicsProxyWidget_UngrabKeyboardEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->ungrabKeyboardEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_UngrabKeyboardEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::ungrabKeyboardEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_UpdateGeometry(void* ptr){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->updateGeometry();
}

void QGraphicsProxyWidget_UpdateGeometryDefault(void* ptr){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::updateGeometry();
}

void QGraphicsProxyWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsProxyWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsProxyWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsProxyWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsProxyWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsProxyWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsProxyWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsProxyWidget*>(ptr)->QGraphicsProxyWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsRectItem: public QGraphicsRectItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsRectItemPaint(this, this->objectNameAbs().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
};

void QGraphicsRectItem_SetRect(void* ptr, void* rectangle){
	static_cast<QGraphicsRectItem*>(ptr)->setRect(*static_cast<QRectF*>(rectangle));
}

int QGraphicsRectItem_Contains(void* ptr, void* point){
	return static_cast<QGraphicsRectItem*>(ptr)->contains(*static_cast<QPointF*>(point));
}

int QGraphicsRectItem_IsObscuredBy(void* ptr, void* item){
	return static_cast<QGraphicsRectItem*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void* QGraphicsRectItem_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsRectItem*>(ptr)->opaqueArea());
}

void QGraphicsRectItem_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsRectItem*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsRectItem_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsRectItem*>(ptr)->QGraphicsRectItem::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsRectItem_SetRect2(void* ptr, double x, double y, double width, double height){
	static_cast<QGraphicsRectItem*>(ptr)->setRect(static_cast<double>(x), static_cast<double>(y), static_cast<double>(width), static_cast<double>(height));
}

void* QGraphicsRectItem_Shape(void* ptr){
	return new QPainterPath(static_cast<QGraphicsRectItem*>(ptr)->shape());
}

int QGraphicsRectItem_Type(void* ptr){
	return static_cast<QGraphicsRectItem*>(ptr)->type();
}

void QGraphicsRectItem_DestroyQGraphicsRectItem(void* ptr){
	static_cast<QGraphicsRectItem*>(ptr)->~QGraphicsRectItem();
}

char* QGraphicsRectItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsRectItem*>(static_cast<QGraphicsRectItem*>(ptr))) {
		return static_cast<MyQGraphicsRectItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsRectItem_BASE").toUtf8().data();
}

void QGraphicsRectItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsRectItem*>(static_cast<QGraphicsRectItem*>(ptr))) {
		static_cast<MyQGraphicsRectItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsRotation: public QGraphicsRotation {
public:
	MyQGraphicsRotation(QObject *parent) : QGraphicsRotation(parent) {};
	void Signal_AngleChanged() { callbackQGraphicsRotationAngleChanged(this, this->objectName().toUtf8().data()); };
	void applyTo(QMatrix4x4 * matrix) const { callbackQGraphicsRotationApplyTo(const_cast<MyQGraphicsRotation*>(this), this->objectName().toUtf8().data(), matrix); };
	void Signal_AxisChanged() { callbackQGraphicsRotationAxisChanged(this, this->objectName().toUtf8().data()); };
	void Signal_OriginChanged() { callbackQGraphicsRotationOriginChanged(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsRotationTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsRotationChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsRotationCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

double QGraphicsRotation_Angle(void* ptr){
	return static_cast<double>(static_cast<QGraphicsRotation*>(ptr)->angle());
}

void QGraphicsRotation_SetAngle(void* ptr, double v){
	static_cast<QGraphicsRotation*>(ptr)->setAngle(static_cast<double>(v));
}

void QGraphicsRotation_SetAxis2(void* ptr, int axis){
	static_cast<QGraphicsRotation*>(ptr)->setAxis(static_cast<Qt::Axis>(axis));
}

void QGraphicsRotation_SetAxis(void* ptr, void* axis){
	static_cast<QGraphicsRotation*>(ptr)->setAxis(*static_cast<QVector3D*>(axis));
}

void QGraphicsRotation_SetOrigin(void* ptr, void* point){
	static_cast<QGraphicsRotation*>(ptr)->setOrigin(*static_cast<QVector3D*>(point));
}

void* QGraphicsRotation_NewQGraphicsRotation(void* parent){
	return new MyQGraphicsRotation(static_cast<QObject*>(parent));
}

void QGraphicsRotation_ConnectAngleChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsRotation*>(ptr), static_cast<void (QGraphicsRotation::*)()>(&QGraphicsRotation::angleChanged), static_cast<MyQGraphicsRotation*>(ptr), static_cast<void (MyQGraphicsRotation::*)()>(&MyQGraphicsRotation::Signal_AngleChanged));;
}

void QGraphicsRotation_DisconnectAngleChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsRotation*>(ptr), static_cast<void (QGraphicsRotation::*)()>(&QGraphicsRotation::angleChanged), static_cast<MyQGraphicsRotation*>(ptr), static_cast<void (MyQGraphicsRotation::*)()>(&MyQGraphicsRotation::Signal_AngleChanged));;
}

void QGraphicsRotation_AngleChanged(void* ptr){
	static_cast<QGraphicsRotation*>(ptr)->angleChanged();
}

void QGraphicsRotation_ApplyTo(void* ptr, void* matrix){
	static_cast<MyQGraphicsRotation*>(ptr)->applyTo(static_cast<QMatrix4x4*>(matrix));
}

void QGraphicsRotation_ApplyToDefault(void* ptr, void* matrix){
	static_cast<QGraphicsRotation*>(ptr)->QGraphicsRotation::applyTo(static_cast<QMatrix4x4*>(matrix));
}

void QGraphicsRotation_ConnectAxisChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsRotation*>(ptr), static_cast<void (QGraphicsRotation::*)()>(&QGraphicsRotation::axisChanged), static_cast<MyQGraphicsRotation*>(ptr), static_cast<void (MyQGraphicsRotation::*)()>(&MyQGraphicsRotation::Signal_AxisChanged));;
}

void QGraphicsRotation_DisconnectAxisChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsRotation*>(ptr), static_cast<void (QGraphicsRotation::*)()>(&QGraphicsRotation::axisChanged), static_cast<MyQGraphicsRotation*>(ptr), static_cast<void (MyQGraphicsRotation::*)()>(&MyQGraphicsRotation::Signal_AxisChanged));;
}

void QGraphicsRotation_AxisChanged(void* ptr){
	static_cast<QGraphicsRotation*>(ptr)->axisChanged();
}

void QGraphicsRotation_ConnectOriginChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsRotation*>(ptr), static_cast<void (QGraphicsRotation::*)()>(&QGraphicsRotation::originChanged), static_cast<MyQGraphicsRotation*>(ptr), static_cast<void (MyQGraphicsRotation::*)()>(&MyQGraphicsRotation::Signal_OriginChanged));;
}

void QGraphicsRotation_DisconnectOriginChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsRotation*>(ptr), static_cast<void (QGraphicsRotation::*)()>(&QGraphicsRotation::originChanged), static_cast<MyQGraphicsRotation*>(ptr), static_cast<void (MyQGraphicsRotation::*)()>(&MyQGraphicsRotation::Signal_OriginChanged));;
}

void QGraphicsRotation_OriginChanged(void* ptr){
	static_cast<QGraphicsRotation*>(ptr)->originChanged();
}

void QGraphicsRotation_DestroyQGraphicsRotation(void* ptr){
	static_cast<QGraphicsRotation*>(ptr)->~QGraphicsRotation();
}

void QGraphicsRotation_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsRotation*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsRotation_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsRotation*>(ptr)->QGraphicsRotation::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsRotation_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsRotation*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsRotation_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsRotation*>(ptr)->QGraphicsRotation::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsRotation_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsRotation*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsRotation_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsRotation*>(ptr)->QGraphicsRotation::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsScale: public QGraphicsScale {
public:
	MyQGraphicsScale(QObject *parent) : QGraphicsScale(parent) {};
	void applyTo(QMatrix4x4 * matrix) const { callbackQGraphicsScaleApplyTo(const_cast<MyQGraphicsScale*>(this), this->objectName().toUtf8().data(), matrix); };
	void Signal_OriginChanged() { callbackQGraphicsScaleOriginChanged(this, this->objectName().toUtf8().data()); };
	void Signal_ScaleChanged() { callbackQGraphicsScaleScaleChanged(this, this->objectName().toUtf8().data()); };
	void Signal_XScaleChanged() { callbackQGraphicsScaleXScaleChanged(this, this->objectName().toUtf8().data()); };
	void Signal_YScaleChanged() { callbackQGraphicsScaleYScaleChanged(this, this->objectName().toUtf8().data()); };
	void Signal_ZScaleChanged() { callbackQGraphicsScaleZScaleChanged(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsScaleTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsScaleChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsScaleCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QGraphicsScale_SetOrigin(void* ptr, void* point){
	static_cast<QGraphicsScale*>(ptr)->setOrigin(*static_cast<QVector3D*>(point));
}

void QGraphicsScale_SetXScale(void* ptr, double v){
	static_cast<QGraphicsScale*>(ptr)->setXScale(static_cast<double>(v));
}

void QGraphicsScale_SetYScale(void* ptr, double v){
	static_cast<QGraphicsScale*>(ptr)->setYScale(static_cast<double>(v));
}

void QGraphicsScale_SetZScale(void* ptr, double v){
	static_cast<QGraphicsScale*>(ptr)->setZScale(static_cast<double>(v));
}

double QGraphicsScale_XScale(void* ptr){
	return static_cast<double>(static_cast<QGraphicsScale*>(ptr)->xScale());
}

double QGraphicsScale_YScale(void* ptr){
	return static_cast<double>(static_cast<QGraphicsScale*>(ptr)->yScale());
}

double QGraphicsScale_ZScale(void* ptr){
	return static_cast<double>(static_cast<QGraphicsScale*>(ptr)->zScale());
}

void* QGraphicsScale_NewQGraphicsScale(void* parent){
	return new MyQGraphicsScale(static_cast<QObject*>(parent));
}

void QGraphicsScale_ApplyTo(void* ptr, void* matrix){
	static_cast<MyQGraphicsScale*>(ptr)->applyTo(static_cast<QMatrix4x4*>(matrix));
}

void QGraphicsScale_ApplyToDefault(void* ptr, void* matrix){
	static_cast<QGraphicsScale*>(ptr)->QGraphicsScale::applyTo(static_cast<QMatrix4x4*>(matrix));
}

void QGraphicsScale_ConnectOriginChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::originChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_OriginChanged));;
}

void QGraphicsScale_DisconnectOriginChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::originChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_OriginChanged));;
}

void QGraphicsScale_OriginChanged(void* ptr){
	static_cast<QGraphicsScale*>(ptr)->originChanged();
}

void QGraphicsScale_ConnectScaleChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::scaleChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_ScaleChanged));;
}

void QGraphicsScale_DisconnectScaleChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::scaleChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_ScaleChanged));;
}

void QGraphicsScale_ScaleChanged(void* ptr){
	static_cast<QGraphicsScale*>(ptr)->scaleChanged();
}

void QGraphicsScale_ConnectXScaleChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::xScaleChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_XScaleChanged));;
}

void QGraphicsScale_DisconnectXScaleChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::xScaleChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_XScaleChanged));;
}

void QGraphicsScale_XScaleChanged(void* ptr){
	static_cast<QGraphicsScale*>(ptr)->xScaleChanged();
}

void QGraphicsScale_ConnectYScaleChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::yScaleChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_YScaleChanged));;
}

void QGraphicsScale_DisconnectYScaleChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::yScaleChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_YScaleChanged));;
}

void QGraphicsScale_YScaleChanged(void* ptr){
	static_cast<QGraphicsScale*>(ptr)->yScaleChanged();
}

void QGraphicsScale_ConnectZScaleChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::zScaleChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_ZScaleChanged));;
}

void QGraphicsScale_DisconnectZScaleChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsScale*>(ptr), static_cast<void (QGraphicsScale::*)()>(&QGraphicsScale::zScaleChanged), static_cast<MyQGraphicsScale*>(ptr), static_cast<void (MyQGraphicsScale::*)()>(&MyQGraphicsScale::Signal_ZScaleChanged));;
}

void QGraphicsScale_ZScaleChanged(void* ptr){
	static_cast<QGraphicsScale*>(ptr)->zScaleChanged();
}

void QGraphicsScale_DestroyQGraphicsScale(void* ptr){
	static_cast<QGraphicsScale*>(ptr)->~QGraphicsScale();
}

void QGraphicsScale_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScale*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsScale_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScale*>(ptr)->QGraphicsScale::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsScale_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScale*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsScale_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScale*>(ptr)->QGraphicsScale::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsScale_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScale*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsScale_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScale*>(ptr)->QGraphicsScale::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsScene: public QGraphicsScene {
public:
	MyQGraphicsScene(QObject *parent) : QGraphicsScene(parent) {};
	MyQGraphicsScene(const QRectF &sceneRect, QObject *parent) : QGraphicsScene(sceneRect, parent) {};
	MyQGraphicsScene(qreal x, qreal y, qreal width, qreal height, QObject *parent) : QGraphicsScene(x, y, width, height, parent) {};
	void contextMenuEvent(QGraphicsSceneContextMenuEvent * contextMenuEvent) { callbackQGraphicsSceneContextMenuEvent(this, this->objectName().toUtf8().data(), contextMenuEvent); };
	void dragEnterEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsSceneDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsSceneDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsSceneDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsSceneDropEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * focusEvent) { callbackQGraphicsSceneFocusInEvent(this, this->objectName().toUtf8().data(), focusEvent); };
	void Signal_FocusItemChanged(QGraphicsItem * newFocusItem, QGraphicsItem * oldFocusItem, Qt::FocusReason reason) { callbackQGraphicsSceneFocusItemChanged(this, this->objectName().toUtf8().data(), newFocusItem, oldFocusItem, reason); };
	void focusOutEvent(QFocusEvent * focusEvent) { callbackQGraphicsSceneFocusOutEvent(this, this->objectName().toUtf8().data(), focusEvent); };
	void helpEvent(QGraphicsSceneHelpEvent * helpEvent) { callbackQGraphicsSceneHelpEvent(this, this->objectName().toUtf8().data(), helpEvent); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQGraphicsSceneInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * keyEvent) { callbackQGraphicsSceneKeyPressEvent(this, this->objectName().toUtf8().data(), keyEvent); };
	void keyReleaseEvent(QKeyEvent * keyEvent) { callbackQGraphicsSceneKeyReleaseEvent(this, this->objectName().toUtf8().data(), keyEvent); };
	void mouseDoubleClickEvent(QGraphicsSceneMouseEvent * mouseEvent) { callbackQGraphicsSceneMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), mouseEvent); };
	void mouseMoveEvent(QGraphicsSceneMouseEvent * mouseEvent) { callbackQGraphicsSceneMouseMoveEvent(this, this->objectName().toUtf8().data(), mouseEvent); };
	void mousePressEvent(QGraphicsSceneMouseEvent * mouseEvent) { callbackQGraphicsSceneMousePressEvent(this, this->objectName().toUtf8().data(), mouseEvent); };
	void mouseReleaseEvent(QGraphicsSceneMouseEvent * mouseEvent) { callbackQGraphicsSceneMouseReleaseEvent(this, this->objectName().toUtf8().data(), mouseEvent); };
	void Signal_SelectionChanged() { callbackQGraphicsSceneSelectionChanged(this, this->objectName().toUtf8().data()); };
	void wheelEvent(QGraphicsSceneWheelEvent * wheelEvent) { callbackQGraphicsSceneWheelEvent(this, this->objectName().toUtf8().data(), wheelEvent); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsSceneTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsSceneChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsSceneCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QGraphicsScene_BackgroundBrush(void* ptr){
	return new QBrush(static_cast<QGraphicsScene*>(ptr)->backgroundBrush());
}

int QGraphicsScene_BspTreeDepth(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->bspTreeDepth();
}

void* QGraphicsScene_Font(void* ptr){
	return new QFont(static_cast<QGraphicsScene*>(ptr)->font());
}

void* QGraphicsScene_ForegroundBrush(void* ptr){
	return new QBrush(static_cast<QGraphicsScene*>(ptr)->foregroundBrush());
}

int QGraphicsScene_IsSortCacheEnabled(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->isSortCacheEnabled();
}

int QGraphicsScene_ItemIndexMethod(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->itemIndexMethod();
}

double QGraphicsScene_MinimumRenderSize(void* ptr){
	return static_cast<double>(static_cast<QGraphicsScene*>(ptr)->minimumRenderSize());
}

void* QGraphicsScene_Palette(void* ptr){
	return new QPalette(static_cast<QGraphicsScene*>(ptr)->palette());
}

void QGraphicsScene_SetBackgroundBrush(void* ptr, void* brush){
	static_cast<QGraphicsScene*>(ptr)->setBackgroundBrush(*static_cast<QBrush*>(brush));
}

void QGraphicsScene_SetBspTreeDepth(void* ptr, int depth){
	static_cast<QGraphicsScene*>(ptr)->setBspTreeDepth(depth);
}

void QGraphicsScene_SetFont(void* ptr, void* font){
	static_cast<QGraphicsScene*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QGraphicsScene_SetForegroundBrush(void* ptr, void* brush){
	static_cast<QGraphicsScene*>(ptr)->setForegroundBrush(*static_cast<QBrush*>(brush));
}

void QGraphicsScene_SetItemIndexMethod(void* ptr, int method){
	static_cast<QGraphicsScene*>(ptr)->setItemIndexMethod(static_cast<QGraphicsScene::ItemIndexMethod>(method));
}

void QGraphicsScene_SetMinimumRenderSize(void* ptr, double minSize){
	static_cast<QGraphicsScene*>(ptr)->setMinimumRenderSize(static_cast<double>(minSize));
}

void QGraphicsScene_SetPalette(void* ptr, void* palette){
	static_cast<QGraphicsScene*>(ptr)->setPalette(*static_cast<QPalette*>(palette));
}

void QGraphicsScene_SetSceneRect(void* ptr, void* rect){
	static_cast<QGraphicsScene*>(ptr)->setSceneRect(*static_cast<QRectF*>(rect));
}

void QGraphicsScene_SetSortCacheEnabled(void* ptr, int enabled){
	static_cast<QGraphicsScene*>(ptr)->setSortCacheEnabled(enabled != 0);
}

void QGraphicsScene_SetStickyFocus(void* ptr, int enabled){
	static_cast<QGraphicsScene*>(ptr)->setStickyFocus(enabled != 0);
}

int QGraphicsScene_StickyFocus(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->stickyFocus();
}

void QGraphicsScene_Update(void* ptr, void* rect){
	QMetaObject::invokeMethod(static_cast<QGraphicsScene*>(ptr), "update", Q_ARG(QRectF, *static_cast<QRectF*>(rect)));
}

void* QGraphicsScene_NewQGraphicsScene(void* parent){
	return new MyQGraphicsScene(static_cast<QObject*>(parent));
}

void* QGraphicsScene_NewQGraphicsScene2(void* sceneRect, void* parent){
	return new MyQGraphicsScene(*static_cast<QRectF*>(sceneRect), static_cast<QObject*>(parent));
}

void* QGraphicsScene_NewQGraphicsScene3(double x, double y, double width, double height, void* parent){
	return new MyQGraphicsScene(static_cast<double>(x), static_cast<double>(y), static_cast<double>(width), static_cast<double>(height), static_cast<QObject*>(parent));
}

void* QGraphicsScene_ActivePanel(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->activePanel();
}

void* QGraphicsScene_ActiveWindow(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->activeWindow();
}

void* QGraphicsScene_AddEllipse(void* ptr, void* rect, void* pen, void* brush){
	return static_cast<QGraphicsScene*>(ptr)->addEllipse(*static_cast<QRectF*>(rect), *static_cast<QPen*>(pen), *static_cast<QBrush*>(brush));
}

void* QGraphicsScene_AddEllipse2(void* ptr, double x, double y, double w, double h, void* pen, void* brush){
	return static_cast<QGraphicsScene*>(ptr)->addEllipse(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h), *static_cast<QPen*>(pen), *static_cast<QBrush*>(brush));
}

void QGraphicsScene_AddItem(void* ptr, void* item){
	static_cast<QGraphicsScene*>(ptr)->addItem(static_cast<QGraphicsItem*>(item));
}

void* QGraphicsScene_AddLine(void* ptr, void* line, void* pen){
	return static_cast<QGraphicsScene*>(ptr)->addLine(*static_cast<QLineF*>(line), *static_cast<QPen*>(pen));
}

void* QGraphicsScene_AddLine2(void* ptr, double x1, double y1, double x2, double y2, void* pen){
	return static_cast<QGraphicsScene*>(ptr)->addLine(static_cast<double>(x1), static_cast<double>(y1), static_cast<double>(x2), static_cast<double>(y2), *static_cast<QPen*>(pen));
}

void* QGraphicsScene_AddPath(void* ptr, void* path, void* pen, void* brush){
	return static_cast<QGraphicsScene*>(ptr)->addPath(*static_cast<QPainterPath*>(path), *static_cast<QPen*>(pen), *static_cast<QBrush*>(brush));
}

void* QGraphicsScene_AddPixmap(void* ptr, void* pixmap){
	return static_cast<QGraphicsScene*>(ptr)->addPixmap(*static_cast<QPixmap*>(pixmap));
}

void* QGraphicsScene_AddPolygon(void* ptr, void* polygon, void* pen, void* brush){
	return static_cast<QGraphicsScene*>(ptr)->addPolygon(*static_cast<QPolygonF*>(polygon), *static_cast<QPen*>(pen), *static_cast<QBrush*>(brush));
}

void* QGraphicsScene_AddRect(void* ptr, void* rect, void* pen, void* brush){
	return static_cast<QGraphicsScene*>(ptr)->addRect(*static_cast<QRectF*>(rect), *static_cast<QPen*>(pen), *static_cast<QBrush*>(brush));
}

void* QGraphicsScene_AddRect2(void* ptr, double x, double y, double w, double h, void* pen, void* brush){
	return static_cast<QGraphicsScene*>(ptr)->addRect(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h), *static_cast<QPen*>(pen), *static_cast<QBrush*>(brush));
}

void* QGraphicsScene_AddSimpleText(void* ptr, char* text, void* font){
	return static_cast<QGraphicsScene*>(ptr)->addSimpleText(QString(text), *static_cast<QFont*>(font));
}

void* QGraphicsScene_AddText(void* ptr, char* text, void* font){
	return static_cast<QGraphicsScene*>(ptr)->addText(QString(text), *static_cast<QFont*>(font));
}

void* QGraphicsScene_AddWidget(void* ptr, void* widget, int wFlags){
	return static_cast<QGraphicsScene*>(ptr)->addWidget(static_cast<QWidget*>(widget), static_cast<Qt::WindowType>(wFlags));
}

void QGraphicsScene_Advance(void* ptr){
	QMetaObject::invokeMethod(static_cast<QGraphicsScene*>(ptr), "advance");
}

void QGraphicsScene_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QGraphicsScene*>(ptr), "clear");
}

void QGraphicsScene_ClearFocus(void* ptr){
	static_cast<QGraphicsScene*>(ptr)->clearFocus();
}

void QGraphicsScene_ClearSelection(void* ptr){
	QMetaObject::invokeMethod(static_cast<QGraphicsScene*>(ptr), "clearSelection");
}

void QGraphicsScene_ContextMenuEvent(void* ptr, void* contextMenuEvent){
	static_cast<MyQGraphicsScene*>(ptr)->contextMenuEvent(static_cast<QGraphicsSceneContextMenuEvent*>(contextMenuEvent));
}

void QGraphicsScene_ContextMenuEventDefault(void* ptr, void* contextMenuEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::contextMenuEvent(static_cast<QGraphicsSceneContextMenuEvent*>(contextMenuEvent));
}

void QGraphicsScene_DestroyItemGroup(void* ptr, void* group){
	static_cast<QGraphicsScene*>(ptr)->destroyItemGroup(static_cast<QGraphicsItemGroup*>(group));
}

void QGraphicsScene_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScene*>(ptr)->dragEnterEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsScene_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::dragEnterEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsScene_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScene*>(ptr)->dragLeaveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsScene_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::dragLeaveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsScene_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScene*>(ptr)->dragMoveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsScene_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::dragMoveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsScene_DropEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScene*>(ptr)->dropEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsScene_DropEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::dropEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

int QGraphicsScene_Event(void* ptr, void* event){
	return static_cast<QGraphicsScene*>(ptr)->event(static_cast<QEvent*>(event));
}

int QGraphicsScene_EventFilter(void* ptr, void* watched, void* event){
	return static_cast<QGraphicsScene*>(ptr)->eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
}

void QGraphicsScene_FocusInEvent(void* ptr, void* focusEvent){
	static_cast<MyQGraphicsScene*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(focusEvent));
}

void QGraphicsScene_FocusInEventDefault(void* ptr, void* focusEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::focusInEvent(static_cast<QFocusEvent*>(focusEvent));
}

void* QGraphicsScene_FocusItem(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->focusItem();
}

void QGraphicsScene_ConnectFocusItemChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsScene*>(ptr), static_cast<void (QGraphicsScene::*)(QGraphicsItem *, QGraphicsItem *, Qt::FocusReason)>(&QGraphicsScene::focusItemChanged), static_cast<MyQGraphicsScene*>(ptr), static_cast<void (MyQGraphicsScene::*)(QGraphicsItem *, QGraphicsItem *, Qt::FocusReason)>(&MyQGraphicsScene::Signal_FocusItemChanged));;
}

void QGraphicsScene_DisconnectFocusItemChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsScene*>(ptr), static_cast<void (QGraphicsScene::*)(QGraphicsItem *, QGraphicsItem *, Qt::FocusReason)>(&QGraphicsScene::focusItemChanged), static_cast<MyQGraphicsScene*>(ptr), static_cast<void (MyQGraphicsScene::*)(QGraphicsItem *, QGraphicsItem *, Qt::FocusReason)>(&MyQGraphicsScene::Signal_FocusItemChanged));;
}

void QGraphicsScene_FocusItemChanged(void* ptr, void* newFocusItem, void* oldFocusItem, int reason){
	static_cast<QGraphicsScene*>(ptr)->focusItemChanged(static_cast<QGraphicsItem*>(newFocusItem), static_cast<QGraphicsItem*>(oldFocusItem), static_cast<Qt::FocusReason>(reason));
}

int QGraphicsScene_FocusNextPrevChild(void* ptr, int next){
	return QMetaObject::invokeMethod(static_cast<QGraphicsScene*>(ptr), "focusNextPrevChild", Q_ARG(bool, next != 0));
}

void QGraphicsScene_FocusOutEvent(void* ptr, void* focusEvent){
	static_cast<MyQGraphicsScene*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(focusEvent));
}

void QGraphicsScene_FocusOutEventDefault(void* ptr, void* focusEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::focusOutEvent(static_cast<QFocusEvent*>(focusEvent));
}

int QGraphicsScene_HasFocus(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->hasFocus();
}

double QGraphicsScene_Height(void* ptr){
	return static_cast<double>(static_cast<QGraphicsScene*>(ptr)->height());
}

void QGraphicsScene_HelpEvent(void* ptr, void* helpEvent){
	static_cast<MyQGraphicsScene*>(ptr)->helpEvent(static_cast<QGraphicsSceneHelpEvent*>(helpEvent));
}

void QGraphicsScene_HelpEventDefault(void* ptr, void* helpEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::helpEvent(static_cast<QGraphicsSceneHelpEvent*>(helpEvent));
}

void QGraphicsScene_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScene*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QGraphicsScene_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void* QGraphicsScene_InputMethodQuery(void* ptr, int query){
	return new QVariant(static_cast<QGraphicsScene*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(query)));
}

void QGraphicsScene_Invalidate(void* ptr, void* rect, int layers){
	QMetaObject::invokeMethod(static_cast<QGraphicsScene*>(ptr), "invalidate", Q_ARG(QRectF, *static_cast<QRectF*>(rect)), Q_ARG(QGraphicsScene::SceneLayer, static_cast<QGraphicsScene::SceneLayer>(layers)));
}

void QGraphicsScene_Invalidate2(void* ptr, double x, double y, double w, double h, int layers){
	static_cast<QGraphicsScene*>(ptr)->invalidate(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h), static_cast<QGraphicsScene::SceneLayer>(layers));
}

int QGraphicsScene_IsActive(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->isActive();
}

void* QGraphicsScene_ItemAt(void* ptr, void* position, void* deviceTransform){
	return static_cast<QGraphicsScene*>(ptr)->itemAt(*static_cast<QPointF*>(position), *static_cast<QTransform*>(deviceTransform));
}

void* QGraphicsScene_ItemAt3(void* ptr, double x, double y, void* deviceTransform){
	return static_cast<QGraphicsScene*>(ptr)->itemAt(static_cast<double>(x), static_cast<double>(y), *static_cast<QTransform*>(deviceTransform));
}

void QGraphicsScene_KeyPressEvent(void* ptr, void* keyEvent){
	static_cast<MyQGraphicsScene*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(keyEvent));
}

void QGraphicsScene_KeyPressEventDefault(void* ptr, void* keyEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::keyPressEvent(static_cast<QKeyEvent*>(keyEvent));
}

void QGraphicsScene_KeyReleaseEvent(void* ptr, void* keyEvent){
	static_cast<MyQGraphicsScene*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(keyEvent));
}

void QGraphicsScene_KeyReleaseEventDefault(void* ptr, void* keyEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::keyReleaseEvent(static_cast<QKeyEvent*>(keyEvent));
}

void QGraphicsScene_MouseDoubleClickEvent(void* ptr, void* mouseEvent){
	static_cast<MyQGraphicsScene*>(ptr)->mouseDoubleClickEvent(static_cast<QGraphicsSceneMouseEvent*>(mouseEvent));
}

void QGraphicsScene_MouseDoubleClickEventDefault(void* ptr, void* mouseEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::mouseDoubleClickEvent(static_cast<QGraphicsSceneMouseEvent*>(mouseEvent));
}

void* QGraphicsScene_MouseGrabberItem(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->mouseGrabberItem();
}

void QGraphicsScene_MouseMoveEvent(void* ptr, void* mouseEvent){
	static_cast<MyQGraphicsScene*>(ptr)->mouseMoveEvent(static_cast<QGraphicsSceneMouseEvent*>(mouseEvent));
}

void QGraphicsScene_MouseMoveEventDefault(void* ptr, void* mouseEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::mouseMoveEvent(static_cast<QGraphicsSceneMouseEvent*>(mouseEvent));
}

void QGraphicsScene_MousePressEvent(void* ptr, void* mouseEvent){
	static_cast<MyQGraphicsScene*>(ptr)->mousePressEvent(static_cast<QGraphicsSceneMouseEvent*>(mouseEvent));
}

void QGraphicsScene_MousePressEventDefault(void* ptr, void* mouseEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::mousePressEvent(static_cast<QGraphicsSceneMouseEvent*>(mouseEvent));
}

void QGraphicsScene_MouseReleaseEvent(void* ptr, void* mouseEvent){
	static_cast<MyQGraphicsScene*>(ptr)->mouseReleaseEvent(static_cast<QGraphicsSceneMouseEvent*>(mouseEvent));
}

void QGraphicsScene_MouseReleaseEventDefault(void* ptr, void* mouseEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::mouseReleaseEvent(static_cast<QGraphicsSceneMouseEvent*>(mouseEvent));
}

void QGraphicsScene_RemoveItem(void* ptr, void* item){
	static_cast<QGraphicsScene*>(ptr)->removeItem(static_cast<QGraphicsItem*>(item));
}

void QGraphicsScene_Render(void* ptr, void* painter, void* target, void* source, int aspectRatioMode){
	static_cast<QGraphicsScene*>(ptr)->render(static_cast<QPainter*>(painter), *static_cast<QRectF*>(target), *static_cast<QRectF*>(source), static_cast<Qt::AspectRatioMode>(aspectRatioMode));
}

void* QGraphicsScene_SelectionArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsScene*>(ptr)->selectionArea());
}

void QGraphicsScene_ConnectSelectionChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsScene*>(ptr), static_cast<void (QGraphicsScene::*)()>(&QGraphicsScene::selectionChanged), static_cast<MyQGraphicsScene*>(ptr), static_cast<void (MyQGraphicsScene::*)()>(&MyQGraphicsScene::Signal_SelectionChanged));;
}

void QGraphicsScene_DisconnectSelectionChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsScene*>(ptr), static_cast<void (QGraphicsScene::*)()>(&QGraphicsScene::selectionChanged), static_cast<MyQGraphicsScene*>(ptr), static_cast<void (MyQGraphicsScene::*)()>(&MyQGraphicsScene::Signal_SelectionChanged));;
}

void QGraphicsScene_SelectionChanged(void* ptr){
	static_cast<QGraphicsScene*>(ptr)->selectionChanged();
}

int QGraphicsScene_SendEvent(void* ptr, void* item, void* event){
	return static_cast<QGraphicsScene*>(ptr)->sendEvent(static_cast<QGraphicsItem*>(item), static_cast<QEvent*>(event));
}

void QGraphicsScene_SetActivePanel(void* ptr, void* item){
	static_cast<QGraphicsScene*>(ptr)->setActivePanel(static_cast<QGraphicsItem*>(item));
}

void QGraphicsScene_SetActiveWindow(void* ptr, void* widget){
	static_cast<QGraphicsScene*>(ptr)->setActiveWindow(static_cast<QGraphicsWidget*>(widget));
}

void QGraphicsScene_SetFocus(void* ptr, int focusReason){
	static_cast<QGraphicsScene*>(ptr)->setFocus(static_cast<Qt::FocusReason>(focusReason));
}

void QGraphicsScene_SetFocusItem(void* ptr, void* item, int focusReason){
	static_cast<QGraphicsScene*>(ptr)->setFocusItem(static_cast<QGraphicsItem*>(item), static_cast<Qt::FocusReason>(focusReason));
}

void QGraphicsScene_SetSceneRect2(void* ptr, double x, double y, double w, double h){
	static_cast<QGraphicsScene*>(ptr)->setSceneRect(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h));
}

void QGraphicsScene_SetSelectionArea2(void* ptr, void* path, int mode, void* deviceTransform){
	static_cast<QGraphicsScene*>(ptr)->setSelectionArea(*static_cast<QPainterPath*>(path), static_cast<Qt::ItemSelectionMode>(mode), *static_cast<QTransform*>(deviceTransform));
}

void QGraphicsScene_SetSelectionArea3(void* ptr, void* path, int selectionOperation, int mode, void* deviceTransform){
	static_cast<QGraphicsScene*>(ptr)->setSelectionArea(*static_cast<QPainterPath*>(path), static_cast<Qt::ItemSelectionOperation>(selectionOperation), static_cast<Qt::ItemSelectionMode>(mode), *static_cast<QTransform*>(deviceTransform));
}

void QGraphicsScene_SetSelectionArea(void* ptr, void* path, void* deviceTransform){
	static_cast<QGraphicsScene*>(ptr)->setSelectionArea(*static_cast<QPainterPath*>(path), *static_cast<QTransform*>(deviceTransform));
}

void QGraphicsScene_SetStyle(void* ptr, void* style){
	static_cast<QGraphicsScene*>(ptr)->setStyle(static_cast<QStyle*>(style));
}

void* QGraphicsScene_Style(void* ptr){
	return static_cast<QGraphicsScene*>(ptr)->style();
}

void QGraphicsScene_Update2(void* ptr, double x, double y, double w, double h){
	static_cast<QGraphicsScene*>(ptr)->update(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h));
}

void QGraphicsScene_WheelEvent(void* ptr, void* wheelEvent){
	static_cast<MyQGraphicsScene*>(ptr)->wheelEvent(static_cast<QGraphicsSceneWheelEvent*>(wheelEvent));
}

void QGraphicsScene_WheelEventDefault(void* ptr, void* wheelEvent){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::wheelEvent(static_cast<QGraphicsSceneWheelEvent*>(wheelEvent));
}

double QGraphicsScene_Width(void* ptr){
	return static_cast<double>(static_cast<QGraphicsScene*>(ptr)->width());
}

void QGraphicsScene_DestroyQGraphicsScene(void* ptr){
	static_cast<QGraphicsScene*>(ptr)->~QGraphicsScene();
}

void QGraphicsScene_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScene*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsScene_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsScene_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScene*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsScene_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsScene_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsScene*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsScene_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsScene*>(ptr)->QGraphicsScene::customEvent(static_cast<QEvent*>(event));
}

int QGraphicsSceneContextMenuEvent_Modifiers(void* ptr){
	return static_cast<QGraphicsSceneContextMenuEvent*>(ptr)->modifiers();
}

int QGraphicsSceneContextMenuEvent_Reason(void* ptr){
	return static_cast<QGraphicsSceneContextMenuEvent*>(ptr)->reason();
}

void* QGraphicsSceneContextMenuEvent_ScreenPos(void* ptr){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsSceneContextMenuEvent*>(ptr)->screenPos()).x(), static_cast<QPoint>(static_cast<QGraphicsSceneContextMenuEvent*>(ptr)->screenPos()).y());
}

void QGraphicsSceneContextMenuEvent_DestroyQGraphicsSceneContextMenuEvent(void* ptr){
	static_cast<QGraphicsSceneContextMenuEvent*>(ptr)->~QGraphicsSceneContextMenuEvent();
}

void QGraphicsSceneDragDropEvent_AcceptProposedAction(void* ptr){
	static_cast<QGraphicsSceneDragDropEvent*>(ptr)->acceptProposedAction();
}

int QGraphicsSceneDragDropEvent_Buttons(void* ptr){
	return static_cast<QGraphicsSceneDragDropEvent*>(ptr)->buttons();
}

int QGraphicsSceneDragDropEvent_DropAction(void* ptr){
	return static_cast<QGraphicsSceneDragDropEvent*>(ptr)->dropAction();
}

void* QGraphicsSceneDragDropEvent_MimeData(void* ptr){
	return const_cast<QMimeData*>(static_cast<QGraphicsSceneDragDropEvent*>(ptr)->mimeData());
}

int QGraphicsSceneDragDropEvent_Modifiers(void* ptr){
	return static_cast<QGraphicsSceneDragDropEvent*>(ptr)->modifiers();
}

int QGraphicsSceneDragDropEvent_PossibleActions(void* ptr){
	return static_cast<QGraphicsSceneDragDropEvent*>(ptr)->possibleActions();
}

int QGraphicsSceneDragDropEvent_ProposedAction(void* ptr){
	return static_cast<QGraphicsSceneDragDropEvent*>(ptr)->proposedAction();
}

void* QGraphicsSceneDragDropEvent_ScreenPos(void* ptr){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsSceneDragDropEvent*>(ptr)->screenPos()).x(), static_cast<QPoint>(static_cast<QGraphicsSceneDragDropEvent*>(ptr)->screenPos()).y());
}

void QGraphicsSceneDragDropEvent_SetDropAction(void* ptr, int action){
	static_cast<QGraphicsSceneDragDropEvent*>(ptr)->setDropAction(static_cast<Qt::DropAction>(action));
}

void* QGraphicsSceneDragDropEvent_Source(void* ptr){
	return static_cast<QGraphicsSceneDragDropEvent*>(ptr)->source();
}

void QGraphicsSceneDragDropEvent_DestroyQGraphicsSceneDragDropEvent(void* ptr){
	static_cast<QGraphicsSceneDragDropEvent*>(ptr)->~QGraphicsSceneDragDropEvent();
}

void* QGraphicsSceneEvent_Widget(void* ptr){
	return static_cast<QGraphicsSceneEvent*>(ptr)->widget();
}

void QGraphicsSceneEvent_DestroyQGraphicsSceneEvent(void* ptr){
	static_cast<QGraphicsSceneEvent*>(ptr)->~QGraphicsSceneEvent();
}

void* QGraphicsSceneHelpEvent_ScreenPos(void* ptr){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsSceneHelpEvent*>(ptr)->screenPos()).x(), static_cast<QPoint>(static_cast<QGraphicsSceneHelpEvent*>(ptr)->screenPos()).y());
}

void QGraphicsSceneHelpEvent_DestroyQGraphicsSceneHelpEvent(void* ptr){
	static_cast<QGraphicsSceneHelpEvent*>(ptr)->~QGraphicsSceneHelpEvent();
}

void* QGraphicsSceneHoverEvent_LastScreenPos(void* ptr){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsSceneHoverEvent*>(ptr)->lastScreenPos()).x(), static_cast<QPoint>(static_cast<QGraphicsSceneHoverEvent*>(ptr)->lastScreenPos()).y());
}

int QGraphicsSceneHoverEvent_Modifiers(void* ptr){
	return static_cast<QGraphicsSceneHoverEvent*>(ptr)->modifiers();
}

void* QGraphicsSceneHoverEvent_ScreenPos(void* ptr){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsSceneHoverEvent*>(ptr)->screenPos()).x(), static_cast<QPoint>(static_cast<QGraphicsSceneHoverEvent*>(ptr)->screenPos()).y());
}

void QGraphicsSceneHoverEvent_DestroyQGraphicsSceneHoverEvent(void* ptr){
	static_cast<QGraphicsSceneHoverEvent*>(ptr)->~QGraphicsSceneHoverEvent();
}

int QGraphicsSceneMouseEvent_Button(void* ptr){
	return static_cast<QGraphicsSceneMouseEvent*>(ptr)->button();
}

void* QGraphicsSceneMouseEvent_ButtonDownScreenPos(void* ptr, int button){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsSceneMouseEvent*>(ptr)->buttonDownScreenPos(static_cast<Qt::MouseButton>(button))).x(), static_cast<QPoint>(static_cast<QGraphicsSceneMouseEvent*>(ptr)->buttonDownScreenPos(static_cast<Qt::MouseButton>(button))).y());
}

int QGraphicsSceneMouseEvent_Buttons(void* ptr){
	return static_cast<QGraphicsSceneMouseEvent*>(ptr)->buttons();
}

int QGraphicsSceneMouseEvent_Flags(void* ptr){
	return static_cast<QGraphicsSceneMouseEvent*>(ptr)->flags();
}

void* QGraphicsSceneMouseEvent_LastScreenPos(void* ptr){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsSceneMouseEvent*>(ptr)->lastScreenPos()).x(), static_cast<QPoint>(static_cast<QGraphicsSceneMouseEvent*>(ptr)->lastScreenPos()).y());
}

int QGraphicsSceneMouseEvent_Modifiers(void* ptr){
	return static_cast<QGraphicsSceneMouseEvent*>(ptr)->modifiers();
}

void* QGraphicsSceneMouseEvent_ScreenPos(void* ptr){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsSceneMouseEvent*>(ptr)->screenPos()).x(), static_cast<QPoint>(static_cast<QGraphicsSceneMouseEvent*>(ptr)->screenPos()).y());
}

int QGraphicsSceneMouseEvent_Source(void* ptr){
	return static_cast<QGraphicsSceneMouseEvent*>(ptr)->source();
}

void QGraphicsSceneMouseEvent_DestroyQGraphicsSceneMouseEvent(void* ptr){
	static_cast<QGraphicsSceneMouseEvent*>(ptr)->~QGraphicsSceneMouseEvent();
}

void* QGraphicsSceneMoveEvent_NewQGraphicsSceneMoveEvent(){
	return new QGraphicsSceneMoveEvent();
}

void QGraphicsSceneMoveEvent_DestroyQGraphicsSceneMoveEvent(void* ptr){
	static_cast<QGraphicsSceneMoveEvent*>(ptr)->~QGraphicsSceneMoveEvent();
}

void* QGraphicsSceneResizeEvent_NewQGraphicsSceneResizeEvent(){
	return new QGraphicsSceneResizeEvent();
}

void QGraphicsSceneResizeEvent_DestroyQGraphicsSceneResizeEvent(void* ptr){
	static_cast<QGraphicsSceneResizeEvent*>(ptr)->~QGraphicsSceneResizeEvent();
}

int QGraphicsSceneWheelEvent_Buttons(void* ptr){
	return static_cast<QGraphicsSceneWheelEvent*>(ptr)->buttons();
}

int QGraphicsSceneWheelEvent_Delta(void* ptr){
	return static_cast<QGraphicsSceneWheelEvent*>(ptr)->delta();
}

int QGraphicsSceneWheelEvent_Modifiers(void* ptr){
	return static_cast<QGraphicsSceneWheelEvent*>(ptr)->modifiers();
}

int QGraphicsSceneWheelEvent_Orientation(void* ptr){
	return static_cast<QGraphicsSceneWheelEvent*>(ptr)->orientation();
}

void* QGraphicsSceneWheelEvent_ScreenPos(void* ptr){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsSceneWheelEvent*>(ptr)->screenPos()).x(), static_cast<QPoint>(static_cast<QGraphicsSceneWheelEvent*>(ptr)->screenPos()).y());
}

void QGraphicsSceneWheelEvent_DestroyQGraphicsSceneWheelEvent(void* ptr){
	static_cast<QGraphicsSceneWheelEvent*>(ptr)->~QGraphicsSceneWheelEvent();
}

class MyQGraphicsSimpleTextItem: public QGraphicsSimpleTextItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsSimpleTextItemPaint(this, this->objectNameAbs().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
};

int QGraphicsSimpleTextItem_Contains(void* ptr, void* point){
	return static_cast<QGraphicsSimpleTextItem*>(ptr)->contains(*static_cast<QPointF*>(point));
}

void* QGraphicsSimpleTextItem_Font(void* ptr){
	return new QFont(static_cast<QGraphicsSimpleTextItem*>(ptr)->font());
}

int QGraphicsSimpleTextItem_IsObscuredBy(void* ptr, void* item){
	return static_cast<QGraphicsSimpleTextItem*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void* QGraphicsSimpleTextItem_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsSimpleTextItem*>(ptr)->opaqueArea());
}

void QGraphicsSimpleTextItem_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsSimpleTextItem*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsSimpleTextItem_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsSimpleTextItem*>(ptr)->QGraphicsSimpleTextItem::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsSimpleTextItem_SetFont(void* ptr, void* font){
	static_cast<QGraphicsSimpleTextItem*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QGraphicsSimpleTextItem_SetText(void* ptr, char* text){
	static_cast<QGraphicsSimpleTextItem*>(ptr)->setText(QString(text));
}

void* QGraphicsSimpleTextItem_Shape(void* ptr){
	return new QPainterPath(static_cast<QGraphicsSimpleTextItem*>(ptr)->shape());
}

char* QGraphicsSimpleTextItem_Text(void* ptr){
	return static_cast<QGraphicsSimpleTextItem*>(ptr)->text().toUtf8().data();
}

int QGraphicsSimpleTextItem_Type(void* ptr){
	return static_cast<QGraphicsSimpleTextItem*>(ptr)->type();
}

void QGraphicsSimpleTextItem_DestroyQGraphicsSimpleTextItem(void* ptr){
	static_cast<QGraphicsSimpleTextItem*>(ptr)->~QGraphicsSimpleTextItem();
}

char* QGraphicsSimpleTextItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQGraphicsSimpleTextItem*>(static_cast<QGraphicsSimpleTextItem*>(ptr))) {
		return static_cast<MyQGraphicsSimpleTextItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QGraphicsSimpleTextItem_BASE").toUtf8().data();
}

void QGraphicsSimpleTextItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQGraphicsSimpleTextItem*>(static_cast<QGraphicsSimpleTextItem*>(ptr))) {
		static_cast<MyQGraphicsSimpleTextItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQGraphicsTextItem: public QGraphicsTextItem {
public:
	void contextMenuEvent(QGraphicsSceneContextMenuEvent * event) { callbackQGraphicsTextItemContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsTextItemDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsTextItemDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsTextItemDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QGraphicsSceneDragDropEvent * event) { callbackQGraphicsTextItemDropEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQGraphicsTextItemFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQGraphicsTextItemFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hoverEnterEvent(QGraphicsSceneHoverEvent * event) { callbackQGraphicsTextItemHoverEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hoverLeaveEvent(QGraphicsSceneHoverEvent * event) { callbackQGraphicsTextItemHoverLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void hoverMoveEvent(QGraphicsSceneHoverEvent * event) { callbackQGraphicsTextItemHoverMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQGraphicsTextItemInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQGraphicsTextItemKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQGraphicsTextItemKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_LinkActivated(const QString & link) { callbackQGraphicsTextItemLinkActivated(this, this->objectName().toUtf8().data(), link.toUtf8().data()); };
	void Signal_LinkHovered(const QString & link) { callbackQGraphicsTextItemLinkHovered(this, this->objectName().toUtf8().data(), link.toUtf8().data()); };
	void mouseDoubleClickEvent(QGraphicsSceneMouseEvent * event) { callbackQGraphicsTextItemMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QGraphicsSceneMouseEvent * event) { callbackQGraphicsTextItemMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QGraphicsSceneMouseEvent * event) { callbackQGraphicsTextItemMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QGraphicsSceneMouseEvent * event) { callbackQGraphicsTextItemMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsTextItemPaint(this, this->objectName().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsTextItemTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsTextItemChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsTextItemCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QGraphicsTextItem_OpenExternalLinks(void* ptr){
	return static_cast<QGraphicsTextItem*>(ptr)->openExternalLinks();
}

void QGraphicsTextItem_SetOpenExternalLinks(void* ptr, int open){
	static_cast<QGraphicsTextItem*>(ptr)->setOpenExternalLinks(open != 0);
}

void QGraphicsTextItem_SetTextCursor(void* ptr, void* cursor){
	static_cast<QGraphicsTextItem*>(ptr)->setTextCursor(*static_cast<QTextCursor*>(cursor));
}

void* QGraphicsTextItem_TextCursor(void* ptr){
	return new QTextCursor(static_cast<QGraphicsTextItem*>(ptr)->textCursor());
}

void QGraphicsTextItem_AdjustSize(void* ptr){
	static_cast<QGraphicsTextItem*>(ptr)->adjustSize();
}

int QGraphicsTextItem_Contains(void* ptr, void* point){
	return static_cast<QGraphicsTextItem*>(ptr)->contains(*static_cast<QPointF*>(point));
}

void QGraphicsTextItem_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->contextMenuEvent(static_cast<QGraphicsSceneContextMenuEvent*>(event));
}

void QGraphicsTextItem_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::contextMenuEvent(static_cast<QGraphicsSceneContextMenuEvent*>(event));
}

void* QGraphicsTextItem_DefaultTextColor(void* ptr){
	return new QColor(static_cast<QGraphicsTextItem*>(ptr)->defaultTextColor());
}

void* QGraphicsTextItem_Document(void* ptr){
	return static_cast<QGraphicsTextItem*>(ptr)->document();
}

void QGraphicsTextItem_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->dragEnterEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsTextItem_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::dragEnterEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsTextItem_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->dragLeaveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsTextItem_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::dragLeaveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsTextItem_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->dragMoveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsTextItem_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::dragMoveEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsTextItem_DropEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->dropEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsTextItem_DropEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::dropEvent(static_cast<QGraphicsSceneDragDropEvent*>(event));
}

void QGraphicsTextItem_FocusInEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsTextItem_FocusInEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsTextItem_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsTextItem_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void* QGraphicsTextItem_Font(void* ptr){
	return new QFont(static_cast<QGraphicsTextItem*>(ptr)->font());
}

void QGraphicsTextItem_HoverEnterEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->hoverEnterEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsTextItem_HoverEnterEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::hoverEnterEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsTextItem_HoverLeaveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->hoverLeaveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsTextItem_HoverLeaveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::hoverLeaveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsTextItem_HoverMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->hoverMoveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsTextItem_HoverMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::hoverMoveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsTextItem_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QGraphicsTextItem_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void* QGraphicsTextItem_InputMethodQuery(void* ptr, int query){
	return new QVariant(static_cast<QGraphicsTextItem*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(query)));
}

int QGraphicsTextItem_IsObscuredBy(void* ptr, void* item){
	return static_cast<QGraphicsTextItem*>(ptr)->isObscuredBy(static_cast<QGraphicsItem*>(item));
}

void QGraphicsTextItem_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsTextItem_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsTextItem_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsTextItem_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsTextItem_ConnectLinkActivated(void* ptr){
	QObject::connect(static_cast<QGraphicsTextItem*>(ptr), static_cast<void (QGraphicsTextItem::*)(const QString &)>(&QGraphicsTextItem::linkActivated), static_cast<MyQGraphicsTextItem*>(ptr), static_cast<void (MyQGraphicsTextItem::*)(const QString &)>(&MyQGraphicsTextItem::Signal_LinkActivated));;
}

void QGraphicsTextItem_DisconnectLinkActivated(void* ptr){
	QObject::disconnect(static_cast<QGraphicsTextItem*>(ptr), static_cast<void (QGraphicsTextItem::*)(const QString &)>(&QGraphicsTextItem::linkActivated), static_cast<MyQGraphicsTextItem*>(ptr), static_cast<void (MyQGraphicsTextItem::*)(const QString &)>(&MyQGraphicsTextItem::Signal_LinkActivated));;
}

void QGraphicsTextItem_LinkActivated(void* ptr, char* link){
	static_cast<QGraphicsTextItem*>(ptr)->linkActivated(QString(link));
}

void QGraphicsTextItem_ConnectLinkHovered(void* ptr){
	QObject::connect(static_cast<QGraphicsTextItem*>(ptr), static_cast<void (QGraphicsTextItem::*)(const QString &)>(&QGraphicsTextItem::linkHovered), static_cast<MyQGraphicsTextItem*>(ptr), static_cast<void (MyQGraphicsTextItem::*)(const QString &)>(&MyQGraphicsTextItem::Signal_LinkHovered));;
}

void QGraphicsTextItem_DisconnectLinkHovered(void* ptr){
	QObject::disconnect(static_cast<QGraphicsTextItem*>(ptr), static_cast<void (QGraphicsTextItem::*)(const QString &)>(&QGraphicsTextItem::linkHovered), static_cast<MyQGraphicsTextItem*>(ptr), static_cast<void (MyQGraphicsTextItem::*)(const QString &)>(&MyQGraphicsTextItem::Signal_LinkHovered));;
}

void QGraphicsTextItem_LinkHovered(void* ptr, char* link){
	static_cast<QGraphicsTextItem*>(ptr)->linkHovered(QString(link));
}

void QGraphicsTextItem_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->mouseDoubleClickEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsTextItem_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::mouseDoubleClickEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsTextItem_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->mouseMoveEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsTextItem_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::mouseMoveEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsTextItem_MousePressEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->mousePressEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsTextItem_MousePressEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::mousePressEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsTextItem_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->mouseReleaseEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void QGraphicsTextItem_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::mouseReleaseEvent(static_cast<QGraphicsSceneMouseEvent*>(event));
}

void* QGraphicsTextItem_OpaqueArea(void* ptr){
	return new QPainterPath(static_cast<QGraphicsTextItem*>(ptr)->opaqueArea());
}

void QGraphicsTextItem_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsTextItem*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsTextItem_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

int QGraphicsTextItem_SceneEvent(void* ptr, void* event){
	return static_cast<QGraphicsTextItem*>(ptr)->sceneEvent(static_cast<QEvent*>(event));
}

void QGraphicsTextItem_SetDefaultTextColor(void* ptr, void* col){
	static_cast<QGraphicsTextItem*>(ptr)->setDefaultTextColor(*static_cast<QColor*>(col));
}

void QGraphicsTextItem_SetDocument(void* ptr, void* document){
	static_cast<QGraphicsTextItem*>(ptr)->setDocument(static_cast<QTextDocument*>(document));
}

void QGraphicsTextItem_SetFont(void* ptr, void* font){
	static_cast<QGraphicsTextItem*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QGraphicsTextItem_SetHtml(void* ptr, char* text){
	static_cast<QGraphicsTextItem*>(ptr)->setHtml(QString(text));
}

void QGraphicsTextItem_SetPlainText(void* ptr, char* text){
	static_cast<QGraphicsTextItem*>(ptr)->setPlainText(QString(text));
}

void QGraphicsTextItem_SetTabChangesFocus(void* ptr, int b){
	static_cast<QGraphicsTextItem*>(ptr)->setTabChangesFocus(b != 0);
}

void QGraphicsTextItem_SetTextInteractionFlags(void* ptr, int flags){
	static_cast<QGraphicsTextItem*>(ptr)->setTextInteractionFlags(static_cast<Qt::TextInteractionFlag>(flags));
}

void QGraphicsTextItem_SetTextWidth(void* ptr, double width){
	static_cast<QGraphicsTextItem*>(ptr)->setTextWidth(static_cast<double>(width));
}

void* QGraphicsTextItem_Shape(void* ptr){
	return new QPainterPath(static_cast<QGraphicsTextItem*>(ptr)->shape());
}

int QGraphicsTextItem_TabChangesFocus(void* ptr){
	return static_cast<QGraphicsTextItem*>(ptr)->tabChangesFocus();
}

int QGraphicsTextItem_TextInteractionFlags(void* ptr){
	return static_cast<QGraphicsTextItem*>(ptr)->textInteractionFlags();
}

double QGraphicsTextItem_TextWidth(void* ptr){
	return static_cast<double>(static_cast<QGraphicsTextItem*>(ptr)->textWidth());
}

char* QGraphicsTextItem_ToHtml(void* ptr){
	return static_cast<QGraphicsTextItem*>(ptr)->toHtml().toUtf8().data();
}

char* QGraphicsTextItem_ToPlainText(void* ptr){
	return static_cast<QGraphicsTextItem*>(ptr)->toPlainText().toUtf8().data();
}

int QGraphicsTextItem_Type(void* ptr){
	return static_cast<QGraphicsTextItem*>(ptr)->type();
}

void QGraphicsTextItem_DestroyQGraphicsTextItem(void* ptr){
	static_cast<QGraphicsTextItem*>(ptr)->~QGraphicsTextItem();
}

void QGraphicsTextItem_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsTextItem_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsTextItem_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsTextItem_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsTextItem_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsTextItem*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsTextItem_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsTextItem*>(ptr)->QGraphicsTextItem::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsView: public QGraphicsView {
public:
	MyQGraphicsView(QGraphicsScene *scene, QWidget *parent) : QGraphicsView(scene, parent) {};
	MyQGraphicsView(QWidget *parent) : QGraphicsView(parent) {};
	void contextMenuEvent(QContextMenuEvent * event) { callbackQGraphicsViewContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQGraphicsViewDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQGraphicsViewDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQGraphicsViewDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQGraphicsViewDropEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQGraphicsViewFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQGraphicsViewFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQGraphicsViewInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQGraphicsViewKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQGraphicsViewKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQGraphicsViewMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQGraphicsViewMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQGraphicsViewMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQGraphicsViewMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQGraphicsViewPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQGraphicsViewResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void scrollContentsBy(int dx, int dy) { callbackQGraphicsViewScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void setupViewport(QWidget * widget) { if (!callbackQGraphicsViewSetupViewport(this, this->objectName().toUtf8().data(), widget)) { QGraphicsView::setupViewport(widget); }; };
	void showEvent(QShowEvent * event) { callbackQGraphicsViewShowEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQGraphicsViewWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * ev) { callbackQGraphicsViewChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQGraphicsViewActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQGraphicsViewEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQGraphicsViewHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQGraphicsViewLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQGraphicsViewMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQGraphicsViewSetVisible(this, this->objectName().toUtf8().data(), visible)) { QGraphicsView::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQGraphicsViewCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQGraphicsViewInitPainter(const_cast<MyQGraphicsView*>(this), this->objectName().toUtf8().data(), painter); };
	void tabletEvent(QTabletEvent * event) { callbackQGraphicsViewTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsViewTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsViewChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsViewCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QGraphicsView_Alignment(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->alignment();
}

void* QGraphicsView_BackgroundBrush(void* ptr){
	return new QBrush(static_cast<QGraphicsView*>(ptr)->backgroundBrush());
}

int QGraphicsView_CacheMode(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->cacheMode();
}

int QGraphicsView_DragMode(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->dragMode();
}

void* QGraphicsView_ForegroundBrush(void* ptr){
	return new QBrush(static_cast<QGraphicsView*>(ptr)->foregroundBrush());
}

int QGraphicsView_IsInteractive(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->isInteractive();
}

int QGraphicsView_OptimizationFlags(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->optimizationFlags();
}

int QGraphicsView_RenderHints(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->renderHints();
}

int QGraphicsView_ResizeAnchor(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->resizeAnchor();
}

int QGraphicsView_RubberBandSelectionMode(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->rubberBandSelectionMode();
}

void QGraphicsView_SetAlignment(void* ptr, int alignment){
	static_cast<QGraphicsView*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QGraphicsView_SetBackgroundBrush(void* ptr, void* brush){
	static_cast<QGraphicsView*>(ptr)->setBackgroundBrush(*static_cast<QBrush*>(brush));
}

void QGraphicsView_SetCacheMode(void* ptr, int mode){
	static_cast<QGraphicsView*>(ptr)->setCacheMode(static_cast<QGraphicsView::CacheModeFlag>(mode));
}

void QGraphicsView_SetDragMode(void* ptr, int mode){
	static_cast<QGraphicsView*>(ptr)->setDragMode(static_cast<QGraphicsView::DragMode>(mode));
}

void QGraphicsView_SetForegroundBrush(void* ptr, void* brush){
	static_cast<QGraphicsView*>(ptr)->setForegroundBrush(*static_cast<QBrush*>(brush));
}

void QGraphicsView_SetInteractive(void* ptr, int allowed){
	static_cast<QGraphicsView*>(ptr)->setInteractive(allowed != 0);
}

void QGraphicsView_SetOptimizationFlags(void* ptr, int flags){
	static_cast<QGraphicsView*>(ptr)->setOptimizationFlags(static_cast<QGraphicsView::OptimizationFlag>(flags));
}

void QGraphicsView_SetRenderHints(void* ptr, int hints){
	static_cast<QGraphicsView*>(ptr)->setRenderHints(static_cast<QPainter::RenderHint>(hints));
}

void QGraphicsView_SetResizeAnchor(void* ptr, int anchor){
	static_cast<QGraphicsView*>(ptr)->setResizeAnchor(static_cast<QGraphicsView::ViewportAnchor>(anchor));
}

void QGraphicsView_SetRubberBandSelectionMode(void* ptr, int mode){
	static_cast<QGraphicsView*>(ptr)->setRubberBandSelectionMode(static_cast<Qt::ItemSelectionMode>(mode));
}

void QGraphicsView_SetSceneRect(void* ptr, void* rect){
	static_cast<QGraphicsView*>(ptr)->setSceneRect(*static_cast<QRectF*>(rect));
}

void QGraphicsView_SetTransformationAnchor(void* ptr, int anchor){
	static_cast<QGraphicsView*>(ptr)->setTransformationAnchor(static_cast<QGraphicsView::ViewportAnchor>(anchor));
}

void QGraphicsView_SetViewportUpdateMode(void* ptr, int mode){
	static_cast<QGraphicsView*>(ptr)->setViewportUpdateMode(static_cast<QGraphicsView::ViewportUpdateMode>(mode));
}

int QGraphicsView_TransformationAnchor(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->transformationAnchor();
}

int QGraphicsView_ViewportUpdateMode(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->viewportUpdateMode();
}

void* QGraphicsView_NewQGraphicsView2(void* scene, void* parent){
	return new MyQGraphicsView(static_cast<QGraphicsScene*>(scene), static_cast<QWidget*>(parent));
}

void* QGraphicsView_NewQGraphicsView(void* parent){
	return new MyQGraphicsView(static_cast<QWidget*>(parent));
}

void QGraphicsView_CenterOn3(void* ptr, void* item){
	static_cast<QGraphicsView*>(ptr)->centerOn(static_cast<QGraphicsItem*>(item));
}

void QGraphicsView_CenterOn(void* ptr, void* pos){
	static_cast<QGraphicsView*>(ptr)->centerOn(*static_cast<QPointF*>(pos));
}

void QGraphicsView_CenterOn2(void* ptr, double x, double y){
	static_cast<QGraphicsView*>(ptr)->centerOn(static_cast<double>(x), static_cast<double>(y));
}

void QGraphicsView_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QGraphicsView_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QGraphicsView_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QGraphicsView_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QGraphicsView_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QGraphicsView_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QGraphicsView_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QGraphicsView_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QGraphicsView_DropEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QGraphicsView_DropEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::dropEvent(static_cast<QDropEvent*>(event));
}

void QGraphicsView_EnsureVisible3(void* ptr, void* item, int xmargin, int ymargin){
	static_cast<QGraphicsView*>(ptr)->ensureVisible(static_cast<QGraphicsItem*>(item), xmargin, ymargin);
}

void QGraphicsView_EnsureVisible(void* ptr, void* rect, int xmargin, int ymargin){
	static_cast<QGraphicsView*>(ptr)->ensureVisible(*static_cast<QRectF*>(rect), xmargin, ymargin);
}

void QGraphicsView_EnsureVisible2(void* ptr, double x, double y, double w, double h, int xmargin, int ymargin){
	static_cast<QGraphicsView*>(ptr)->ensureVisible(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h), xmargin, ymargin);
}

int QGraphicsView_Event(void* ptr, void* event){
	return static_cast<QGraphicsView*>(ptr)->event(static_cast<QEvent*>(event));
}

void QGraphicsView_FitInView3(void* ptr, void* item, int aspectRatioMode){
	static_cast<QGraphicsView*>(ptr)->fitInView(static_cast<QGraphicsItem*>(item), static_cast<Qt::AspectRatioMode>(aspectRatioMode));
}

void QGraphicsView_FitInView(void* ptr, void* rect, int aspectRatioMode){
	static_cast<QGraphicsView*>(ptr)->fitInView(*static_cast<QRectF*>(rect), static_cast<Qt::AspectRatioMode>(aspectRatioMode));
}

void QGraphicsView_FitInView2(void* ptr, double x, double y, double w, double h, int aspectRatioMode){
	static_cast<QGraphicsView*>(ptr)->fitInView(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h), static_cast<Qt::AspectRatioMode>(aspectRatioMode));
}

void QGraphicsView_FocusInEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsView_FocusInEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::focusInEvent(static_cast<QFocusEvent*>(event));
}

int QGraphicsView_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QGraphicsView*>(ptr)->focusNextPrevChild(next != 0);
}

void QGraphicsView_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsView_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsView_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QGraphicsView_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void* QGraphicsView_InputMethodQuery(void* ptr, int query){
	return new QVariant(static_cast<QGraphicsView*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(query)));
}

void QGraphicsView_InvalidateScene(void* ptr, void* rect, int layers){
	QMetaObject::invokeMethod(static_cast<QGraphicsView*>(ptr), "invalidateScene", Q_ARG(QRectF, *static_cast<QRectF*>(rect)), Q_ARG(QGraphicsScene::SceneLayer, static_cast<QGraphicsScene::SceneLayer>(layers)));
}

int QGraphicsView_IsTransformed(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->isTransformed();
}

void* QGraphicsView_ItemAt(void* ptr, void* pos){
	return static_cast<QGraphicsView*>(ptr)->itemAt(*static_cast<QPoint*>(pos));
}

void* QGraphicsView_ItemAt2(void* ptr, int x, int y){
	return static_cast<QGraphicsView*>(ptr)->itemAt(x, y);
}

void QGraphicsView_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsView_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsView_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QGraphicsView_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void* QGraphicsView_MapFromScene4(void* ptr, void* path){
	return new QPainterPath(static_cast<QGraphicsView*>(ptr)->mapFromScene(*static_cast<QPainterPath*>(path)));
}

void* QGraphicsView_MapFromScene(void* ptr, void* point){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsView*>(ptr)->mapFromScene(*static_cast<QPointF*>(point))).x(), static_cast<QPoint>(static_cast<QGraphicsView*>(ptr)->mapFromScene(*static_cast<QPointF*>(point))).y());
}

void* QGraphicsView_MapFromScene5(void* ptr, double x, double y){
	return new QPoint(static_cast<QPoint>(static_cast<QGraphicsView*>(ptr)->mapFromScene(static_cast<double>(x), static_cast<double>(y))).x(), static_cast<QPoint>(static_cast<QGraphicsView*>(ptr)->mapFromScene(static_cast<double>(x), static_cast<double>(y))).y());
}

void* QGraphicsView_MapFromScene3(void* ptr, void* polygon){
	return new QPolygon(static_cast<QGraphicsView*>(ptr)->mapFromScene(*static_cast<QPolygonF*>(polygon)));
}

void* QGraphicsView_MapFromScene2(void* ptr, void* rect){
	return new QPolygon(static_cast<QGraphicsView*>(ptr)->mapFromScene(*static_cast<QRectF*>(rect)));
}

void* QGraphicsView_MapFromScene6(void* ptr, double x, double y, double w, double h){
	return new QPolygon(static_cast<QGraphicsView*>(ptr)->mapFromScene(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h)));
}

void* QGraphicsView_MapToScene4(void* ptr, void* path){
	return new QPainterPath(static_cast<QGraphicsView*>(ptr)->mapToScene(*static_cast<QPainterPath*>(path)));
}

void* QGraphicsView_MapToScene3(void* ptr, void* polygon){
	return new QPolygonF(static_cast<QGraphicsView*>(ptr)->mapToScene(*static_cast<QPolygon*>(polygon)));
}

void* QGraphicsView_MapToScene2(void* ptr, void* rect){
	return new QPolygonF(static_cast<QGraphicsView*>(ptr)->mapToScene(*static_cast<QRect*>(rect)));
}

void* QGraphicsView_MapToScene6(void* ptr, int x, int y, int w, int h){
	return new QPolygonF(static_cast<QGraphicsView*>(ptr)->mapToScene(x, y, w, h));
}

void QGraphicsView_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QGraphicsView_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QGraphicsView_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QGraphicsView_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QGraphicsView_MousePressEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QGraphicsView_MousePressEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QGraphicsView_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QGraphicsView_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QGraphicsView_PaintEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QGraphicsView_PaintEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::paintEvent(static_cast<QPaintEvent*>(event));
}

void QGraphicsView_Render(void* ptr, void* painter, void* target, void* source, int aspectRatioMode){
	static_cast<QGraphicsView*>(ptr)->render(static_cast<QPainter*>(painter), *static_cast<QRectF*>(target), *static_cast<QRect*>(source), static_cast<Qt::AspectRatioMode>(aspectRatioMode));
}

void QGraphicsView_ResetCachedContent(void* ptr){
	static_cast<QGraphicsView*>(ptr)->resetCachedContent();
}

void QGraphicsView_ResetMatrix(void* ptr){
	static_cast<QGraphicsView*>(ptr)->resetMatrix();
}

void QGraphicsView_ResetTransform(void* ptr){
	static_cast<QGraphicsView*>(ptr)->resetTransform();
}

void QGraphicsView_ResizeEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QGraphicsView_ResizeEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QGraphicsView_Rotate(void* ptr, double angle){
	static_cast<QGraphicsView*>(ptr)->rotate(static_cast<double>(angle));
}

void* QGraphicsView_RubberBandRect(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QGraphicsView*>(ptr)->rubberBandRect()).x(), static_cast<QRect>(static_cast<QGraphicsView*>(ptr)->rubberBandRect()).y(), static_cast<QRect>(static_cast<QGraphicsView*>(ptr)->rubberBandRect()).width(), static_cast<QRect>(static_cast<QGraphicsView*>(ptr)->rubberBandRect()).height());
}

void QGraphicsView_Scale(void* ptr, double sx, double sy){
	static_cast<QGraphicsView*>(ptr)->scale(static_cast<double>(sx), static_cast<double>(sy));
}

void* QGraphicsView_Scene(void* ptr){
	return static_cast<QGraphicsView*>(ptr)->scene();
}

void QGraphicsView_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQGraphicsView*>(ptr)->scrollContentsBy(dx, dy);
}

void QGraphicsView_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::scrollContentsBy(dx, dy);
}

void QGraphicsView_SetOptimizationFlag(void* ptr, int flag, int enabled){
	static_cast<QGraphicsView*>(ptr)->setOptimizationFlag(static_cast<QGraphicsView::OptimizationFlag>(flag), enabled != 0);
}

void QGraphicsView_SetRenderHint(void* ptr, int hint, int enabled){
	static_cast<QGraphicsView*>(ptr)->setRenderHint(static_cast<QPainter::RenderHint>(hint), enabled != 0);
}

void QGraphicsView_SetScene(void* ptr, void* scene){
	static_cast<QGraphicsView*>(ptr)->setScene(static_cast<QGraphicsScene*>(scene));
}

void QGraphicsView_SetSceneRect2(void* ptr, double x, double y, double w, double h){
	static_cast<QGraphicsView*>(ptr)->setSceneRect(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h));
}

void QGraphicsView_SetTransform(void* ptr, void* matrix, int combine){
	static_cast<QGraphicsView*>(ptr)->setTransform(*static_cast<QTransform*>(matrix), combine != 0);
}

void QGraphicsView_SetupViewport(void* ptr, void* widget){
	QMetaObject::invokeMethod(static_cast<MyQGraphicsView*>(ptr), "setupViewport", Q_ARG(QWidget*, static_cast<QWidget*>(widget)));
}

void QGraphicsView_SetupViewportDefault(void* ptr, void* widget){
	QMetaObject::invokeMethod(static_cast<QGraphicsView*>(ptr), "setupViewport", Q_ARG(QWidget*, static_cast<QWidget*>(widget)));
}

void QGraphicsView_Shear(void* ptr, double sh, double sv){
	static_cast<QGraphicsView*>(ptr)->shear(static_cast<double>(sh), static_cast<double>(sv));
}

void QGraphicsView_ShowEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QGraphicsView_ShowEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::showEvent(static_cast<QShowEvent*>(event));
}

void* QGraphicsView_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QGraphicsView*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QGraphicsView*>(ptr)->sizeHint()).height());
}

void QGraphicsView_Translate(void* ptr, double dx, double dy){
	static_cast<QGraphicsView*>(ptr)->translate(static_cast<double>(dx), static_cast<double>(dy));
}

void QGraphicsView_UpdateSceneRect(void* ptr, void* rect){
	QMetaObject::invokeMethod(static_cast<QGraphicsView*>(ptr), "updateSceneRect", Q_ARG(QRectF, *static_cast<QRectF*>(rect)));
}

int QGraphicsView_ViewportEvent(void* ptr, void* event){
	return static_cast<QGraphicsView*>(ptr)->viewportEvent(static_cast<QEvent*>(event));
}

void QGraphicsView_WheelEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QGraphicsView_WheelEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QGraphicsView_DestroyQGraphicsView(void* ptr){
	static_cast<QGraphicsView*>(ptr)->~QGraphicsView();
}

void QGraphicsView_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQGraphicsView*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QGraphicsView_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::changeEvent(static_cast<QEvent*>(ev));
}

void QGraphicsView_ActionEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QGraphicsView_ActionEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::actionEvent(static_cast<QActionEvent*>(event));
}

void QGraphicsView_EnterEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QGraphicsView_EnterEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::enterEvent(static_cast<QEvent*>(event));
}

void QGraphicsView_HideEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QGraphicsView_HideEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::hideEvent(static_cast<QHideEvent*>(event));
}

void QGraphicsView_LeaveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QGraphicsView_LeaveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::leaveEvent(static_cast<QEvent*>(event));
}

void QGraphicsView_MoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QGraphicsView_MoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::moveEvent(static_cast<QMoveEvent*>(event));
}

void QGraphicsView_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQGraphicsView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QGraphicsView_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QGraphicsView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QGraphicsView_CloseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QGraphicsView_CloseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::closeEvent(static_cast<QCloseEvent*>(event));
}

void QGraphicsView_InitPainter(void* ptr, void* painter){
	static_cast<MyQGraphicsView*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QGraphicsView_InitPainterDefault(void* ptr, void* painter){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::initPainter(static_cast<QPainter*>(painter));
}

void QGraphicsView_TabletEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QGraphicsView_TabletEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QGraphicsView_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsView_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsView_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsView_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsView_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsView*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsView_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsView*>(ptr)->QGraphicsView::customEvent(static_cast<QEvent*>(event));
}

class MyQGraphicsWidget: public QGraphicsWidget {
public:
	MyQGraphicsWidget(QGraphicsItem *parent, Qt::WindowFlags wFlags) : QGraphicsWidget(parent, wFlags) {};
	void changeEvent(QEvent * event) { callbackQGraphicsWidgetChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQGraphicsWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQGraphicsWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQGraphicsWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_GeometryChanged() { callbackQGraphicsWidgetGeometryChanged(this, this->objectName().toUtf8().data()); };
	void grabKeyboardEvent(QEvent * event) { callbackQGraphicsWidgetGrabKeyboardEvent(this, this->objectName().toUtf8().data(), event); };
	void grabMouseEvent(QEvent * event) { callbackQGraphicsWidgetGrabMouseEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQGraphicsWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void hoverLeaveEvent(QGraphicsSceneHoverEvent * event) { callbackQGraphicsWidgetHoverLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void hoverMoveEvent(QGraphicsSceneHoverEvent * event) { callbackQGraphicsWidgetHoverMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void initStyleOption(QStyleOption * option) const { callbackQGraphicsWidgetInitStyleOption(const_cast<MyQGraphicsWidget*>(this), this->objectName().toUtf8().data(), option); };
	void moveEvent(QGraphicsSceneMoveEvent * event) { callbackQGraphicsWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsWidgetPaint(this, this->objectName().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
	void paintWindowFrame(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) { callbackQGraphicsWidgetPaintWindowFrame(this, this->objectName().toUtf8().data(), painter, const_cast<QStyleOptionGraphicsItem*>(option), widget); };
	void polishEvent() { callbackQGraphicsWidgetPolishEvent(this, this->objectName().toUtf8().data()); };
	void resizeEvent(QGraphicsSceneResizeEvent * event) { callbackQGraphicsWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void showEvent(QShowEvent * event) { callbackQGraphicsWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void ungrabKeyboardEvent(QEvent * event) { callbackQGraphicsWidgetUngrabKeyboardEvent(this, this->objectName().toUtf8().data(), event); };
	void ungrabMouseEvent(QEvent * event) { callbackQGraphicsWidgetUngrabMouseEvent(this, this->objectName().toUtf8().data(), event); };
	void updateGeometry() { callbackQGraphicsWidgetUpdateGeometry(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQGraphicsWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQGraphicsWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGraphicsWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QGraphicsWidget_AutoFillBackground(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->autoFillBackground();
}

int QGraphicsWidget_FocusPolicy(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->focusPolicy();
}

void* QGraphicsWidget_Font(void* ptr){
	return new QFont(static_cast<QGraphicsWidget*>(ptr)->font());
}

int QGraphicsWidget_LayoutDirection(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->layoutDirection();
}

void* QGraphicsWidget_Palette(void* ptr){
	return new QPalette(static_cast<QGraphicsWidget*>(ptr)->palette());
}

void QGraphicsWidget_Resize(void* ptr, void* size){
	static_cast<QGraphicsWidget*>(ptr)->resize(*static_cast<QSizeF*>(size));
}

void QGraphicsWidget_SetAutoFillBackground(void* ptr, int enabled){
	static_cast<QGraphicsWidget*>(ptr)->setAutoFillBackground(enabled != 0);
}

void QGraphicsWidget_SetFocusPolicy(void* ptr, int policy){
	static_cast<QGraphicsWidget*>(ptr)->setFocusPolicy(static_cast<Qt::FocusPolicy>(policy));
}

void QGraphicsWidget_SetFont(void* ptr, void* font){
	static_cast<QGraphicsWidget*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QGraphicsWidget_SetLayout(void* ptr, void* layout){
	static_cast<QGraphicsWidget*>(ptr)->setLayout(static_cast<QGraphicsLayout*>(layout));
}

void QGraphicsWidget_SetLayoutDirection(void* ptr, int direction){
	static_cast<QGraphicsWidget*>(ptr)->setLayoutDirection(static_cast<Qt::LayoutDirection>(direction));
}

void QGraphicsWidget_SetPalette(void* ptr, void* palette){
	static_cast<QGraphicsWidget*>(ptr)->setPalette(*static_cast<QPalette*>(palette));
}

void QGraphicsWidget_SetWindowFlags(void* ptr, int wFlags){
	static_cast<QGraphicsWidget*>(ptr)->setWindowFlags(static_cast<Qt::WindowType>(wFlags));
}

void QGraphicsWidget_SetWindowTitle(void* ptr, char* title){
	static_cast<QGraphicsWidget*>(ptr)->setWindowTitle(QString(title));
}

void QGraphicsWidget_UnsetLayoutDirection(void* ptr){
	static_cast<QGraphicsWidget*>(ptr)->unsetLayoutDirection();
}

int QGraphicsWidget_WindowFlags(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->windowFlags();
}

char* QGraphicsWidget_WindowTitle(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->windowTitle().toUtf8().data();
}

void* QGraphicsWidget_NewQGraphicsWidget(void* parent, int wFlags){
	return new MyQGraphicsWidget(static_cast<QGraphicsItem*>(parent), static_cast<Qt::WindowType>(wFlags));
}

void QGraphicsWidget_AddAction(void* ptr, void* action){
	static_cast<QGraphicsWidget*>(ptr)->addAction(static_cast<QAction*>(action));
}

void QGraphicsWidget_AdjustSize(void* ptr){
	static_cast<QGraphicsWidget*>(ptr)->adjustSize();
}

void QGraphicsWidget_ChangeEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_ChangeEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::changeEvent(static_cast<QEvent*>(event));
}

int QGraphicsWidget_Close(void* ptr){
	return QMetaObject::invokeMethod(static_cast<QGraphicsWidget*>(ptr), "close");
}

void QGraphicsWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QGraphicsWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

int QGraphicsWidget_Event(void* ptr, void* event){
	return static_cast<QGraphicsWidget*>(ptr)->event(static_cast<QEvent*>(event));
}

void QGraphicsWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

int QGraphicsWidget_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QGraphicsWidget*>(ptr)->focusNextPrevChild(next != 0);
}

void QGraphicsWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QGraphicsWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void* QGraphicsWidget_FocusWidget(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->focusWidget();
}

void QGraphicsWidget_ConnectGeometryChanged(void* ptr){
	QObject::connect(static_cast<QGraphicsWidget*>(ptr), static_cast<void (QGraphicsWidget::*)()>(&QGraphicsWidget::geometryChanged), static_cast<MyQGraphicsWidget*>(ptr), static_cast<void (MyQGraphicsWidget::*)()>(&MyQGraphicsWidget::Signal_GeometryChanged));;
}

void QGraphicsWidget_DisconnectGeometryChanged(void* ptr){
	QObject::disconnect(static_cast<QGraphicsWidget*>(ptr), static_cast<void (QGraphicsWidget::*)()>(&QGraphicsWidget::geometryChanged), static_cast<MyQGraphicsWidget*>(ptr), static_cast<void (MyQGraphicsWidget::*)()>(&MyQGraphicsWidget::Signal_GeometryChanged));;
}

void QGraphicsWidget_GeometryChanged(void* ptr){
	static_cast<QGraphicsWidget*>(ptr)->geometryChanged();
}

void QGraphicsWidget_GrabKeyboardEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->grabKeyboardEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_GrabKeyboardEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::grabKeyboardEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_GrabMouseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->grabMouseEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_GrabMouseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::grabMouseEvent(static_cast<QEvent*>(event));
}

int QGraphicsWidget_GrabShortcut(void* ptr, void* sequence, int context){
	return static_cast<QGraphicsWidget*>(ptr)->grabShortcut(*static_cast<QKeySequence*>(sequence), static_cast<Qt::ShortcutContext>(context));
}

void QGraphicsWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QGraphicsWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QGraphicsWidget_HoverLeaveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->hoverLeaveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsWidget_HoverLeaveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::hoverLeaveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsWidget_HoverMoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->hoverMoveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsWidget_HoverMoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::hoverMoveEvent(static_cast<QGraphicsSceneHoverEvent*>(event));
}

void QGraphicsWidget_InitStyleOption(void* ptr, void* option){
	static_cast<MyQGraphicsWidget*>(ptr)->initStyleOption(static_cast<QStyleOption*>(option));
}

void QGraphicsWidget_InitStyleOptionDefault(void* ptr, void* option){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::initStyleOption(static_cast<QStyleOption*>(option));
}

void QGraphicsWidget_InsertAction(void* ptr, void* before, void* action){
	static_cast<QGraphicsWidget*>(ptr)->insertAction(static_cast<QAction*>(before), static_cast<QAction*>(action));
}

int QGraphicsWidget_IsActiveWindow(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->isActiveWindow();
}

void* QGraphicsWidget_ItemChange(void* ptr, int change, void* value){
	return new QVariant(static_cast<QGraphicsWidget*>(ptr)->itemChange(static_cast<QGraphicsItem::GraphicsItemChange>(change), *static_cast<QVariant*>(value)));
}

void* QGraphicsWidget_Layout(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->layout();
}

void QGraphicsWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->moveEvent(static_cast<QGraphicsSceneMoveEvent*>(event));
}

void QGraphicsWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::moveEvent(static_cast<QGraphicsSceneMoveEvent*>(event));
}

void QGraphicsWidget_Paint(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsWidget*>(ptr)->paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsWidget_PaintDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::paint(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsWidget_PaintWindowFrame(void* ptr, void* painter, void* option, void* widget){
	static_cast<MyQGraphicsWidget*>(ptr)->paintWindowFrame(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsWidget_PaintWindowFrameDefault(void* ptr, void* painter, void* option, void* widget){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::paintWindowFrame(static_cast<QPainter*>(painter), static_cast<QStyleOptionGraphicsItem*>(option), static_cast<QWidget*>(widget));
}

void QGraphicsWidget_PolishEvent(void* ptr){
	static_cast<MyQGraphicsWidget*>(ptr)->polishEvent();
}

void QGraphicsWidget_PolishEventDefault(void* ptr){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::polishEvent();
}

void QGraphicsWidget_ReleaseShortcut(void* ptr, int id){
	static_cast<QGraphicsWidget*>(ptr)->releaseShortcut(id);
}

void QGraphicsWidget_RemoveAction(void* ptr, void* action){
	static_cast<QGraphicsWidget*>(ptr)->removeAction(static_cast<QAction*>(action));
}

void QGraphicsWidget_Resize2(void* ptr, double w, double h){
	static_cast<QGraphicsWidget*>(ptr)->resize(static_cast<double>(w), static_cast<double>(h));
}

void QGraphicsWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->resizeEvent(static_cast<QGraphicsSceneResizeEvent*>(event));
}

void QGraphicsWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::resizeEvent(static_cast<QGraphicsSceneResizeEvent*>(event));
}

int QGraphicsWidget_SceneEvent(void* ptr, void* event){
	return static_cast<QGraphicsWidget*>(ptr)->sceneEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_SetAttribute(void* ptr, int attribute, int on){
	static_cast<QGraphicsWidget*>(ptr)->setAttribute(static_cast<Qt::WidgetAttribute>(attribute), on != 0);
}

void QGraphicsWidget_SetContentsMargins(void* ptr, double left, double top, double right, double bottom){
	static_cast<QGraphicsWidget*>(ptr)->setContentsMargins(static_cast<double>(left), static_cast<double>(top), static_cast<double>(right), static_cast<double>(bottom));
}

void QGraphicsWidget_SetGeometry2(void* ptr, double x, double y, double w, double h){
	static_cast<QGraphicsWidget*>(ptr)->setGeometry(static_cast<double>(x), static_cast<double>(y), static_cast<double>(w), static_cast<double>(h));
}

void QGraphicsWidget_SetShortcutAutoRepeat(void* ptr, int id, int enabled){
	static_cast<QGraphicsWidget*>(ptr)->setShortcutAutoRepeat(id, enabled != 0);
}

void QGraphicsWidget_SetShortcutEnabled(void* ptr, int id, int enabled){
	static_cast<QGraphicsWidget*>(ptr)->setShortcutEnabled(id, enabled != 0);
}

void QGraphicsWidget_SetStyle(void* ptr, void* style){
	static_cast<QGraphicsWidget*>(ptr)->setStyle(static_cast<QStyle*>(style));
}

void QGraphicsWidget_QGraphicsWidget_SetTabOrder(void* first, void* second){
	QGraphicsWidget::setTabOrder(static_cast<QGraphicsWidget*>(first), static_cast<QGraphicsWidget*>(second));
}

void QGraphicsWidget_SetWindowFrameMargins(void* ptr, double left, double top, double right, double bottom){
	static_cast<QGraphicsWidget*>(ptr)->setWindowFrameMargins(static_cast<double>(left), static_cast<double>(top), static_cast<double>(right), static_cast<double>(bottom));
}

void* QGraphicsWidget_Shape(void* ptr){
	return new QPainterPath(static_cast<QGraphicsWidget*>(ptr)->shape());
}

void QGraphicsWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QGraphicsWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::showEvent(static_cast<QShowEvent*>(event));
}

void* QGraphicsWidget_Style(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->style();
}

int QGraphicsWidget_TestAttribute(void* ptr, int attribute){
	return static_cast<QGraphicsWidget*>(ptr)->testAttribute(static_cast<Qt::WidgetAttribute>(attribute));
}

int QGraphicsWidget_Type(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->type();
}

void QGraphicsWidget_UngrabKeyboardEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->ungrabKeyboardEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_UngrabKeyboardEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::ungrabKeyboardEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_UngrabMouseEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->ungrabMouseEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_UngrabMouseEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::ungrabMouseEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_UnsetWindowFrameMargins(void* ptr){
	static_cast<QGraphicsWidget*>(ptr)->unsetWindowFrameMargins();
}

void QGraphicsWidget_UpdateGeometry(void* ptr){
	static_cast<MyQGraphicsWidget*>(ptr)->updateGeometry();
}

void QGraphicsWidget_UpdateGeometryDefault(void* ptr){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::updateGeometry();
}

int QGraphicsWidget_WindowFrameEvent(void* ptr, void* event){
	return static_cast<QGraphicsWidget*>(ptr)->windowFrameEvent(static_cast<QEvent*>(event));
}

int QGraphicsWidget_WindowFrameSectionAt(void* ptr, void* pos){
	return static_cast<QGraphicsWidget*>(ptr)->windowFrameSectionAt(*static_cast<QPointF*>(pos));
}

int QGraphicsWidget_WindowType(void* ptr){
	return static_cast<QGraphicsWidget*>(ptr)->windowType();
}

void QGraphicsWidget_DestroyQGraphicsWidget(void* ptr){
	static_cast<QGraphicsWidget*>(ptr)->~QGraphicsWidget();
}

void QGraphicsWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGraphicsWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QGraphicsWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQGraphicsWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGraphicsWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QGraphicsWidget*>(ptr)->QGraphicsWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQGridLayout: public QGridLayout {
public:
	MyQGridLayout() : QGridLayout() {};
	MyQGridLayout(QWidget *parent) : QGridLayout(parent) {};
	void invalidate() { callbackQGridLayoutInvalidate(this, this->objectName().toUtf8().data()); };
	void setGeometry(const QRect & rect) { callbackQGridLayoutSetGeometry(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height())); };
	void childEvent(QChildEvent * e) { callbackQGridLayoutChildEvent(this, this->objectName().toUtf8().data(), e); };
	void timerEvent(QTimerEvent * event) { callbackQGridLayoutTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGridLayoutCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QGridLayout_HorizontalSpacing(void* ptr){
	return static_cast<QGridLayout*>(ptr)->horizontalSpacing();
}

void QGridLayout_SetHorizontalSpacing(void* ptr, int spacing){
	static_cast<QGridLayout*>(ptr)->setHorizontalSpacing(spacing);
}

void QGridLayout_SetVerticalSpacing(void* ptr, int spacing){
	static_cast<QGridLayout*>(ptr)->setVerticalSpacing(spacing);
}

int QGridLayout_VerticalSpacing(void* ptr){
	return static_cast<QGridLayout*>(ptr)->verticalSpacing();
}

void* QGridLayout_NewQGridLayout2(){
	return new MyQGridLayout();
}

void* QGridLayout_NewQGridLayout(void* parent){
	return new MyQGridLayout(static_cast<QWidget*>(parent));
}

void QGridLayout_AddItem(void* ptr, void* item, int row, int column, int rowSpan, int columnSpan, int alignment){
	static_cast<QGridLayout*>(ptr)->addItem(static_cast<QLayoutItem*>(item), row, column, rowSpan, columnSpan, static_cast<Qt::AlignmentFlag>(alignment));
}

void QGridLayout_AddLayout(void* ptr, void* layout, int row, int column, int alignment){
	static_cast<QGridLayout*>(ptr)->addLayout(static_cast<QLayout*>(layout), row, column, static_cast<Qt::AlignmentFlag>(alignment));
}

void QGridLayout_AddLayout2(void* ptr, void* layout, int row, int column, int rowSpan, int columnSpan, int alignment){
	static_cast<QGridLayout*>(ptr)->addLayout(static_cast<QLayout*>(layout), row, column, rowSpan, columnSpan, static_cast<Qt::AlignmentFlag>(alignment));
}

void QGridLayout_AddWidget2(void* ptr, void* widget, int fromRow, int fromColumn, int rowSpan, int columnSpan, int alignment){
	static_cast<QGridLayout*>(ptr)->addWidget(static_cast<QWidget*>(widget), fromRow, fromColumn, rowSpan, columnSpan, static_cast<Qt::AlignmentFlag>(alignment));
}

void QGridLayout_AddWidget(void* ptr, void* widget, int row, int column, int alignment){
	static_cast<QGridLayout*>(ptr)->addWidget(static_cast<QWidget*>(widget), row, column, static_cast<Qt::AlignmentFlag>(alignment));
}

void* QGridLayout_CellRect(void* ptr, int row, int column){
	return new QRect(static_cast<QRect>(static_cast<QGridLayout*>(ptr)->cellRect(row, column)).x(), static_cast<QRect>(static_cast<QGridLayout*>(ptr)->cellRect(row, column)).y(), static_cast<QRect>(static_cast<QGridLayout*>(ptr)->cellRect(row, column)).width(), static_cast<QRect>(static_cast<QGridLayout*>(ptr)->cellRect(row, column)).height());
}

int QGridLayout_ColumnCount(void* ptr){
	return static_cast<QGridLayout*>(ptr)->columnCount();
}

int QGridLayout_ColumnMinimumWidth(void* ptr, int column){
	return static_cast<QGridLayout*>(ptr)->columnMinimumWidth(column);
}

int QGridLayout_ColumnStretch(void* ptr, int column){
	return static_cast<QGridLayout*>(ptr)->columnStretch(column);
}

int QGridLayout_Count(void* ptr){
	return static_cast<QGridLayout*>(ptr)->count();
}

int QGridLayout_ExpandingDirections(void* ptr){
	return static_cast<QGridLayout*>(ptr)->expandingDirections();
}

void QGridLayout_GetItemPosition(void* ptr, int index, int row, int column, int rowSpan, int columnSpan){
	static_cast<QGridLayout*>(ptr)->getItemPosition(index, &row, &column, &rowSpan, &columnSpan);
}

int QGridLayout_HasHeightForWidth(void* ptr){
	return static_cast<QGridLayout*>(ptr)->hasHeightForWidth();
}

int QGridLayout_HeightForWidth(void* ptr, int w){
	return static_cast<QGridLayout*>(ptr)->heightForWidth(w);
}

void QGridLayout_Invalidate(void* ptr){
	static_cast<MyQGridLayout*>(ptr)->invalidate();
}

void QGridLayout_InvalidateDefault(void* ptr){
	static_cast<QGridLayout*>(ptr)->QGridLayout::invalidate();
}

void* QGridLayout_ItemAt(void* ptr, int index){
	return static_cast<QGridLayout*>(ptr)->itemAt(index);
}

void* QGridLayout_ItemAtPosition(void* ptr, int row, int column){
	return static_cast<QGridLayout*>(ptr)->itemAtPosition(row, column);
}

void* QGridLayout_MaximumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QGridLayout*>(ptr)->maximumSize()).width(), static_cast<QSize>(static_cast<QGridLayout*>(ptr)->maximumSize()).height());
}

int QGridLayout_MinimumHeightForWidth(void* ptr, int w){
	return static_cast<QGridLayout*>(ptr)->minimumHeightForWidth(w);
}

void* QGridLayout_MinimumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QGridLayout*>(ptr)->minimumSize()).width(), static_cast<QSize>(static_cast<QGridLayout*>(ptr)->minimumSize()).height());
}

int QGridLayout_OriginCorner(void* ptr){
	return static_cast<QGridLayout*>(ptr)->originCorner();
}

int QGridLayout_RowCount(void* ptr){
	return static_cast<QGridLayout*>(ptr)->rowCount();
}

int QGridLayout_RowMinimumHeight(void* ptr, int row){
	return static_cast<QGridLayout*>(ptr)->rowMinimumHeight(row);
}

int QGridLayout_RowStretch(void* ptr, int row){
	return static_cast<QGridLayout*>(ptr)->rowStretch(row);
}

void QGridLayout_SetColumnMinimumWidth(void* ptr, int column, int minSize){
	static_cast<QGridLayout*>(ptr)->setColumnMinimumWidth(column, minSize);
}

void QGridLayout_SetColumnStretch(void* ptr, int column, int stretch){
	static_cast<QGridLayout*>(ptr)->setColumnStretch(column, stretch);
}

void QGridLayout_SetGeometry(void* ptr, void* rect){
	static_cast<MyQGridLayout*>(ptr)->setGeometry(*static_cast<QRect*>(rect));
}

void QGridLayout_SetGeometryDefault(void* ptr, void* rect){
	static_cast<QGridLayout*>(ptr)->QGridLayout::setGeometry(*static_cast<QRect*>(rect));
}

void QGridLayout_SetOriginCorner(void* ptr, int corner){
	static_cast<QGridLayout*>(ptr)->setOriginCorner(static_cast<Qt::Corner>(corner));
}

void QGridLayout_SetRowMinimumHeight(void* ptr, int row, int minSize){
	static_cast<QGridLayout*>(ptr)->setRowMinimumHeight(row, minSize);
}

void QGridLayout_SetRowStretch(void* ptr, int row, int stretch){
	static_cast<QGridLayout*>(ptr)->setRowStretch(row, stretch);
}

void QGridLayout_SetSpacing(void* ptr, int spacing){
	static_cast<QGridLayout*>(ptr)->setSpacing(spacing);
}

void* QGridLayout_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QGridLayout*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QGridLayout*>(ptr)->sizeHint()).height());
}

int QGridLayout_Spacing(void* ptr){
	return static_cast<QGridLayout*>(ptr)->spacing();
}

void* QGridLayout_TakeAt(void* ptr, int index){
	return static_cast<QGridLayout*>(ptr)->takeAt(index);
}

void QGridLayout_DestroyQGridLayout(void* ptr){
	static_cast<QGridLayout*>(ptr)->~QGridLayout();
}

void QGridLayout_ChildEvent(void* ptr, void* e){
	static_cast<MyQGridLayout*>(ptr)->childEvent(static_cast<QChildEvent*>(e));
}

void QGridLayout_ChildEventDefault(void* ptr, void* e){
	static_cast<QGridLayout*>(ptr)->QGridLayout::childEvent(static_cast<QChildEvent*>(e));
}

void QGridLayout_TimerEvent(void* ptr, void* event){
	static_cast<MyQGridLayout*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGridLayout_TimerEventDefault(void* ptr, void* event){
	static_cast<QGridLayout*>(ptr)->QGridLayout::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGridLayout_CustomEvent(void* ptr, void* event){
	static_cast<MyQGridLayout*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGridLayout_CustomEventDefault(void* ptr, void* event){
	static_cast<QGridLayout*>(ptr)->QGridLayout::customEvent(static_cast<QEvent*>(event));
}

class MyQGroupBox: public QGroupBox {
public:
	MyQGroupBox(QWidget *parent) : QGroupBox(parent) {};
	MyQGroupBox(const QString &title, QWidget *parent) : QGroupBox(title, parent) {};
	void changeEvent(QEvent * ev) { callbackQGroupBoxChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void childEvent(QChildEvent * c) { callbackQGroupBoxChildEvent(this, this->objectName().toUtf8().data(), c); };
	void Signal_Clicked(bool checked) { callbackQGroupBoxClicked(this, this->objectName().toUtf8().data(), checked); };
	void focusInEvent(QFocusEvent * fe) { callbackQGroupBoxFocusInEvent(this, this->objectName().toUtf8().data(), fe); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQGroupBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQGroupBoxMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQGroupBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQGroupBoxPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * e) { callbackQGroupBoxResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_Toggled(bool on) { callbackQGroupBoxToggled(this, this->objectName().toUtf8().data(), on); };
	void actionEvent(QActionEvent * event) { callbackQGroupBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQGroupBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQGroupBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQGroupBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQGroupBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQGroupBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQGroupBoxFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQGroupBoxHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQGroupBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQGroupBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQGroupBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QGroupBox::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQGroupBoxShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQGroupBoxCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQGroupBoxContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQGroupBoxInitPainter(const_cast<MyQGroupBox*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQGroupBoxInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQGroupBoxKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQGroupBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQGroupBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQGroupBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQGroupBoxWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQGroupBoxTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQGroupBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QGroupBox_Alignment(void* ptr){
	return static_cast<QGroupBox*>(ptr)->alignment();
}

int QGroupBox_IsCheckable(void* ptr){
	return static_cast<QGroupBox*>(ptr)->isCheckable();
}

int QGroupBox_IsChecked(void* ptr){
	return static_cast<QGroupBox*>(ptr)->isChecked();
}

int QGroupBox_IsFlat(void* ptr){
	return static_cast<QGroupBox*>(ptr)->isFlat();
}

void QGroupBox_SetAlignment(void* ptr, int alignment){
	static_cast<QGroupBox*>(ptr)->setAlignment(alignment);
}

void QGroupBox_SetCheckable(void* ptr, int checkable){
	static_cast<QGroupBox*>(ptr)->setCheckable(checkable != 0);
}

void QGroupBox_SetChecked(void* ptr, int checked){
	QMetaObject::invokeMethod(static_cast<QGroupBox*>(ptr), "setChecked", Q_ARG(bool, checked != 0));
}

void QGroupBox_SetFlat(void* ptr, int flat){
	static_cast<QGroupBox*>(ptr)->setFlat(flat != 0);
}

void QGroupBox_SetTitle(void* ptr, char* title){
	static_cast<QGroupBox*>(ptr)->setTitle(QString(title));
}

char* QGroupBox_Title(void* ptr){
	return static_cast<QGroupBox*>(ptr)->title().toUtf8().data();
}

void* QGroupBox_NewQGroupBox(void* parent){
	return new MyQGroupBox(static_cast<QWidget*>(parent));
}

void* QGroupBox_NewQGroupBox2(char* title, void* parent){
	return new MyQGroupBox(QString(title), static_cast<QWidget*>(parent));
}

void QGroupBox_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQGroupBox*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QGroupBox_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QGroupBox*>(ptr)->QGroupBox::changeEvent(static_cast<QEvent*>(ev));
}

void QGroupBox_ChildEvent(void* ptr, void* c){
	static_cast<MyQGroupBox*>(ptr)->childEvent(static_cast<QChildEvent*>(c));
}

void QGroupBox_ChildEventDefault(void* ptr, void* c){
	static_cast<QGroupBox*>(ptr)->QGroupBox::childEvent(static_cast<QChildEvent*>(c));
}

void QGroupBox_ConnectClicked(void* ptr){
	QObject::connect(static_cast<QGroupBox*>(ptr), static_cast<void (QGroupBox::*)(bool)>(&QGroupBox::clicked), static_cast<MyQGroupBox*>(ptr), static_cast<void (MyQGroupBox::*)(bool)>(&MyQGroupBox::Signal_Clicked));;
}

void QGroupBox_DisconnectClicked(void* ptr){
	QObject::disconnect(static_cast<QGroupBox*>(ptr), static_cast<void (QGroupBox::*)(bool)>(&QGroupBox::clicked), static_cast<MyQGroupBox*>(ptr), static_cast<void (MyQGroupBox::*)(bool)>(&MyQGroupBox::Signal_Clicked));;
}

void QGroupBox_Clicked(void* ptr, int checked){
	static_cast<QGroupBox*>(ptr)->clicked(checked != 0);
}

int QGroupBox_Event(void* ptr, void* e){
	return static_cast<QGroupBox*>(ptr)->event(static_cast<QEvent*>(e));
}

void QGroupBox_FocusInEvent(void* ptr, void* fe){
	static_cast<MyQGroupBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(fe));
}

void QGroupBox_FocusInEventDefault(void* ptr, void* fe){
	static_cast<QGroupBox*>(ptr)->QGroupBox::focusInEvent(static_cast<QFocusEvent*>(fe));
}

void* QGroupBox_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QGroupBox*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QGroupBox*>(ptr)->minimumSizeHint()).height());
}

void QGroupBox_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QGroupBox_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QGroupBox_MousePressEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QGroupBox_MousePressEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QGroupBox_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QGroupBox_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QGroupBox_PaintEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QGroupBox_PaintEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::paintEvent(static_cast<QPaintEvent*>(event));
}

void QGroupBox_ResizeEvent(void* ptr, void* e){
	static_cast<MyQGroupBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QGroupBox_ResizeEventDefault(void* ptr, void* e){
	static_cast<QGroupBox*>(ptr)->QGroupBox::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QGroupBox_ConnectToggled(void* ptr){
	QObject::connect(static_cast<QGroupBox*>(ptr), static_cast<void (QGroupBox::*)(bool)>(&QGroupBox::toggled), static_cast<MyQGroupBox*>(ptr), static_cast<void (MyQGroupBox::*)(bool)>(&MyQGroupBox::Signal_Toggled));;
}

void QGroupBox_DisconnectToggled(void* ptr){
	QObject::disconnect(static_cast<QGroupBox*>(ptr), static_cast<void (QGroupBox::*)(bool)>(&QGroupBox::toggled), static_cast<MyQGroupBox*>(ptr), static_cast<void (MyQGroupBox::*)(bool)>(&MyQGroupBox::Signal_Toggled));;
}

void QGroupBox_Toggled(void* ptr, int on){
	static_cast<QGroupBox*>(ptr)->toggled(on != 0);
}

void QGroupBox_DestroyQGroupBox(void* ptr){
	static_cast<QGroupBox*>(ptr)->~QGroupBox();
}

void QGroupBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QGroupBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QGroupBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QGroupBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QGroupBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QGroupBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QGroupBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QGroupBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QGroupBox_DropEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QGroupBox_DropEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QGroupBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QGroupBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::enterEvent(static_cast<QEvent*>(event));
}

void QGroupBox_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QGroupBox_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QGroupBox_HideEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QGroupBox_HideEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::hideEvent(static_cast<QHideEvent*>(event));
}

void QGroupBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QGroupBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::leaveEvent(static_cast<QEvent*>(event));
}

void QGroupBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QGroupBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QGroupBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQGroupBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QGroupBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QGroupBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QGroupBox_ShowEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QGroupBox_ShowEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::showEvent(static_cast<QShowEvent*>(event));
}

void QGroupBox_CloseEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QGroupBox_CloseEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::closeEvent(static_cast<QCloseEvent*>(event));
}

void QGroupBox_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QGroupBox_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QGroupBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQGroupBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QGroupBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QGroupBox*>(ptr)->QGroupBox::initPainter(static_cast<QPainter*>(painter));
}

void QGroupBox_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QGroupBox_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QGroupBox_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QGroupBox_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QGroupBox_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QGroupBox_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QGroupBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QGroupBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QGroupBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QGroupBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QGroupBox_WheelEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QGroupBox_WheelEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QGroupBox_TimerEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QGroupBox_TimerEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::timerEvent(static_cast<QTimerEvent*>(event));
}

void QGroupBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQGroupBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QGroupBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QGroupBox*>(ptr)->QGroupBox::customEvent(static_cast<QEvent*>(event));
}

void* QHBoxLayout_NewQHBoxLayout(){
	return new QHBoxLayout();
}

void* QHBoxLayout_NewQHBoxLayout2(void* parent){
	return new QHBoxLayout(static_cast<QWidget*>(parent));
}

void QHBoxLayout_DestroyQHBoxLayout(void* ptr){
	static_cast<QHBoxLayout*>(ptr)->~QHBoxLayout();
}

void QHBoxLayout_AddItem(void* ptr, void* item){
	static_cast<QHBoxLayout*>(ptr)->addItem(static_cast<QLayoutItem*>(item));
}

void QHBoxLayout_AddItemDefault(void* ptr, void* item){
	static_cast<QHBoxLayout*>(ptr)->QHBoxLayout::addItem(static_cast<QLayoutItem*>(item));
}

void QHBoxLayout_Invalidate(void* ptr){
	static_cast<QHBoxLayout*>(ptr)->invalidate();
}

void QHBoxLayout_InvalidateDefault(void* ptr){
	static_cast<QHBoxLayout*>(ptr)->QHBoxLayout::invalidate();
}

void QHBoxLayout_SetGeometry(void* ptr, void* r){
	static_cast<QHBoxLayout*>(ptr)->setGeometry(*static_cast<QRect*>(r));
}

void QHBoxLayout_SetGeometryDefault(void* ptr, void* r){
	static_cast<QHBoxLayout*>(ptr)->QHBoxLayout::setGeometry(*static_cast<QRect*>(r));
}

void QHBoxLayout_ChildEvent(void* ptr, void* e){
	static_cast<QHBoxLayout*>(ptr)->childEvent(static_cast<QChildEvent*>(e));
}

void QHBoxLayout_ChildEventDefault(void* ptr, void* e){
	static_cast<QHBoxLayout*>(ptr)->QHBoxLayout::childEvent(static_cast<QChildEvent*>(e));
}

void QHBoxLayout_TimerEvent(void* ptr, void* event){
	static_cast<QHBoxLayout*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QHBoxLayout_TimerEventDefault(void* ptr, void* event){
	static_cast<QHBoxLayout*>(ptr)->QHBoxLayout::timerEvent(static_cast<QTimerEvent*>(event));
}

void QHBoxLayout_CustomEvent(void* ptr, void* event){
	static_cast<QHBoxLayout*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QHBoxLayout_CustomEventDefault(void* ptr, void* event){
	static_cast<QHBoxLayout*>(ptr)->QHBoxLayout::customEvent(static_cast<QEvent*>(event));
}

class MyQHeaderView: public QHeaderView {
public:
	MyQHeaderView(Qt::Orientation orientation, QWidget *parent) : QHeaderView(orientation, parent) {};
	void Signal_GeometriesChanged() { callbackQHeaderViewGeometriesChanged(this, this->objectName().toUtf8().data()); };
	void mouseDoubleClickEvent(QMouseEvent * e) { callbackQHeaderViewMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQHeaderViewMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQHeaderViewMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQHeaderViewMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * e) { callbackQHeaderViewPaintEvent(this, this->objectName().toUtf8().data(), e); };
	void paintSection(QPainter * painter, const QRect & rect, int logicalIndex) const { callbackQHeaderViewPaintSection(const_cast<MyQHeaderView*>(this), this->objectName().toUtf8().data(), painter, new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), logicalIndex); };
	void reset() { if (!callbackQHeaderViewReset(this, this->objectName().toUtf8().data())) { QHeaderView::reset(); }; };
	void Signal_SectionClicked(int logicalIndex) { callbackQHeaderViewSectionClicked(this, this->objectName().toUtf8().data(), logicalIndex); };
	void Signal_SectionCountChanged(int oldCount, int newCount) { callbackQHeaderViewSectionCountChanged(this, this->objectName().toUtf8().data(), oldCount, newCount); };
	void Signal_SectionDoubleClicked(int logicalIndex) { callbackQHeaderViewSectionDoubleClicked(this, this->objectName().toUtf8().data(), logicalIndex); };
	void Signal_SectionEntered(int logicalIndex) { callbackQHeaderViewSectionEntered(this, this->objectName().toUtf8().data(), logicalIndex); };
	void Signal_SectionHandleDoubleClicked(int logicalIndex) { callbackQHeaderViewSectionHandleDoubleClicked(this, this->objectName().toUtf8().data(), logicalIndex); };
	void Signal_SectionMoved(int logicalIndex, int oldVisualIndex, int newVisualIndex) { callbackQHeaderViewSectionMoved(this, this->objectName().toUtf8().data(), logicalIndex, oldVisualIndex, newVisualIndex); };
	void Signal_SectionPressed(int logicalIndex) { callbackQHeaderViewSectionPressed(this, this->objectName().toUtf8().data(), logicalIndex); };
	void Signal_SectionResized(int logicalIndex, int oldSize, int newSize) { callbackQHeaderViewSectionResized(this, this->objectName().toUtf8().data(), logicalIndex, oldSize, newSize); };
	void setModel(QAbstractItemModel * model) { callbackQHeaderViewSetModel(this, this->objectName().toUtf8().data(), model); };
	void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags flags) { callbackQHeaderViewSetSelection(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), flags); };
	void setVisible(bool v) { if (!callbackQHeaderViewSetVisible(this, this->objectName().toUtf8().data(), v)) { QHeaderView::setVisible(v); }; };
	void Signal_SortIndicatorChanged(int logicalIndex, Qt::SortOrder order) { callbackQHeaderViewSortIndicatorChanged(this, this->objectName().toUtf8().data(), logicalIndex, order); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQHeaderViewDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { if (!callbackQHeaderViewCloseEditor(this, this->objectName().toUtf8().data(), editor, hint)) { QHeaderView::closeEditor(editor, hint); }; };
	void commitData(QWidget * editor) { if (!callbackQHeaderViewCommitData(this, this->objectName().toUtf8().data(), editor)) { QHeaderView::commitData(editor); }; };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQHeaderViewDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQHeaderViewDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQHeaderViewDropEvent(this, this->objectName().toUtf8().data(), event); };
	void editorDestroyed(QObject * editor) { if (!callbackQHeaderViewEditorDestroyed(this, this->objectName().toUtf8().data(), editor)) { QHeaderView::editorDestroyed(editor); }; };
	void focusInEvent(QFocusEvent * event) { callbackQHeaderViewFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQHeaderViewFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQHeaderViewInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQHeaderViewKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyboardSearch(const QString & search) { callbackQHeaderViewKeyboardSearch(this, this->objectName().toUtf8().data(), search.toUtf8().data()); };
	void resizeEvent(QResizeEvent * event) { callbackQHeaderViewResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void selectAll() { if (!callbackQHeaderViewSelectAll(this, this->objectName().toUtf8().data())) { QHeaderView::selectAll(); }; };
	void setSelectionModel(QItemSelectionModel * selectionModel) { callbackQHeaderViewSetSelectionModel(this, this->objectName().toUtf8().data(), selectionModel); };
	void startDrag(Qt::DropActions supportedActions) { callbackQHeaderViewStartDrag(this, this->objectName().toUtf8().data(), supportedActions); };
	void timerEvent(QTimerEvent * event) { callbackQHeaderViewTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void updateGeometries() { if (!callbackQHeaderViewUpdateGeometries(this, this->objectName().toUtf8().data())) { QHeaderView::updateGeometries(); }; };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQHeaderViewContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQHeaderViewScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void setupViewport(QWidget * viewport) { callbackQHeaderViewSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQHeaderViewWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQHeaderViewChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQHeaderViewActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQHeaderViewEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQHeaderViewHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQHeaderViewLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQHeaderViewMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void showEvent(QShowEvent * event) { callbackQHeaderViewShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQHeaderViewCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQHeaderViewInitPainter(const_cast<MyQHeaderView*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQHeaderViewKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQHeaderViewTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQHeaderViewChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQHeaderViewCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QHeaderView_CascadingSectionResizes(void* ptr){
	return static_cast<QHeaderView*>(ptr)->cascadingSectionResizes();
}

int QHeaderView_DefaultAlignment(void* ptr){
	return static_cast<QHeaderView*>(ptr)->defaultAlignment();
}

int QHeaderView_DefaultSectionSize(void* ptr){
	return static_cast<QHeaderView*>(ptr)->defaultSectionSize();
}

int QHeaderView_HighlightSections(void* ptr){
	return static_cast<QHeaderView*>(ptr)->highlightSections();
}

int QHeaderView_IsSortIndicatorShown(void* ptr){
	return static_cast<QHeaderView*>(ptr)->isSortIndicatorShown();
}

int QHeaderView_MaximumSectionSize(void* ptr){
	return static_cast<QHeaderView*>(ptr)->maximumSectionSize();
}

int QHeaderView_MinimumSectionSize(void* ptr){
	return static_cast<QHeaderView*>(ptr)->minimumSectionSize();
}

void QHeaderView_ResetDefaultSectionSize(void* ptr){
	static_cast<QHeaderView*>(ptr)->resetDefaultSectionSize();
}

void QHeaderView_ResizeSection(void* ptr, int logicalIndex, int size){
	static_cast<QHeaderView*>(ptr)->resizeSection(logicalIndex, size);
}

void QHeaderView_SetCascadingSectionResizes(void* ptr, int enable){
	static_cast<QHeaderView*>(ptr)->setCascadingSectionResizes(enable != 0);
}

void QHeaderView_SetDefaultAlignment(void* ptr, int alignment){
	static_cast<QHeaderView*>(ptr)->setDefaultAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QHeaderView_SetDefaultSectionSize(void* ptr, int size){
	static_cast<QHeaderView*>(ptr)->setDefaultSectionSize(size);
}

void QHeaderView_SetHighlightSections(void* ptr, int highlight){
	static_cast<QHeaderView*>(ptr)->setHighlightSections(highlight != 0);
}

void QHeaderView_SetMaximumSectionSize(void* ptr, int size){
	static_cast<QHeaderView*>(ptr)->setMaximumSectionSize(size);
}

void QHeaderView_SetMinimumSectionSize(void* ptr, int size){
	static_cast<QHeaderView*>(ptr)->setMinimumSectionSize(size);
}

void QHeaderView_SetOffset(void* ptr, int offset){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "setOffset", Q_ARG(int, offset));
}

void QHeaderView_SetSortIndicatorShown(void* ptr, int show){
	static_cast<QHeaderView*>(ptr)->setSortIndicatorShown(show != 0);
}

void QHeaderView_SetStretchLastSection(void* ptr, int stretch){
	static_cast<QHeaderView*>(ptr)->setStretchLastSection(stretch != 0);
}

int QHeaderView_StretchLastSection(void* ptr){
	return static_cast<QHeaderView*>(ptr)->stretchLastSection();
}

void* QHeaderView_NewQHeaderView(int orientation, void* parent){
	return new MyQHeaderView(static_cast<Qt::Orientation>(orientation), static_cast<QWidget*>(parent));
}

int QHeaderView_Count(void* ptr){
	return static_cast<QHeaderView*>(ptr)->count();
}

int QHeaderView_Event(void* ptr, void* e){
	return static_cast<QHeaderView*>(ptr)->event(static_cast<QEvent*>(e));
}

void QHeaderView_ConnectGeometriesChanged(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)()>(&QHeaderView::geometriesChanged), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)()>(&MyQHeaderView::Signal_GeometriesChanged));;
}

void QHeaderView_DisconnectGeometriesChanged(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)()>(&QHeaderView::geometriesChanged), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)()>(&MyQHeaderView::Signal_GeometriesChanged));;
}

void QHeaderView_GeometriesChanged(void* ptr){
	static_cast<QHeaderView*>(ptr)->geometriesChanged();
}

void QHeaderView_HeaderDataChanged(void* ptr, int orientation, int logicalFirst, int logicalLast){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "headerDataChanged", Q_ARG(Qt::Orientation, static_cast<Qt::Orientation>(orientation)), Q_ARG(int, logicalFirst), Q_ARG(int, logicalLast));
}

int QHeaderView_HiddenSectionCount(void* ptr){
	return static_cast<QHeaderView*>(ptr)->hiddenSectionCount();
}

void QHeaderView_HideSection(void* ptr, int logicalIndex){
	static_cast<QHeaderView*>(ptr)->hideSection(logicalIndex);
}

int QHeaderView_HorizontalOffset(void* ptr){
	return static_cast<QHeaderView*>(ptr)->horizontalOffset();
}

int QHeaderView_IsSectionHidden(void* ptr, int logicalIndex){
	return static_cast<QHeaderView*>(ptr)->isSectionHidden(logicalIndex);
}

int QHeaderView_Length(void* ptr){
	return static_cast<QHeaderView*>(ptr)->length();
}

int QHeaderView_LogicalIndex(void* ptr, int visualIndex){
	return static_cast<QHeaderView*>(ptr)->logicalIndex(visualIndex);
}

int QHeaderView_LogicalIndexAt3(void* ptr, void* pos){
	return static_cast<QHeaderView*>(ptr)->logicalIndexAt(*static_cast<QPoint*>(pos));
}

int QHeaderView_LogicalIndexAt(void* ptr, int position){
	return static_cast<QHeaderView*>(ptr)->logicalIndexAt(position);
}

int QHeaderView_LogicalIndexAt2(void* ptr, int x, int y){
	return static_cast<QHeaderView*>(ptr)->logicalIndexAt(x, y);
}

void QHeaderView_MouseDoubleClickEvent(void* ptr, void* e){
	static_cast<MyQHeaderView*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QHeaderView_MouseDoubleClickEventDefault(void* ptr, void* e){
	static_cast<QHeaderView*>(ptr)->QHeaderView::mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QHeaderView_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQHeaderView*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QHeaderView_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QHeaderView*>(ptr)->QHeaderView::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QHeaderView_MousePressEvent(void* ptr, void* e){
	static_cast<MyQHeaderView*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QHeaderView_MousePressEventDefault(void* ptr, void* e){
	static_cast<QHeaderView*>(ptr)->QHeaderView::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QHeaderView_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQHeaderView*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QHeaderView_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QHeaderView*>(ptr)->QHeaderView::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QHeaderView_MoveSection(void* ptr, int from, int to){
	static_cast<QHeaderView*>(ptr)->moveSection(from, to);
}

int QHeaderView_Offset(void* ptr){
	return static_cast<QHeaderView*>(ptr)->offset();
}

int QHeaderView_Orientation(void* ptr){
	return static_cast<QHeaderView*>(ptr)->orientation();
}

void QHeaderView_PaintEvent(void* ptr, void* e){
	static_cast<MyQHeaderView*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QHeaderView_PaintEventDefault(void* ptr, void* e){
	static_cast<QHeaderView*>(ptr)->QHeaderView::paintEvent(static_cast<QPaintEvent*>(e));
}

void QHeaderView_PaintSection(void* ptr, void* painter, void* rect, int logicalIndex){
	static_cast<MyQHeaderView*>(ptr)->paintSection(static_cast<QPainter*>(painter), *static_cast<QRect*>(rect), logicalIndex);
}

void QHeaderView_PaintSectionDefault(void* ptr, void* painter, void* rect, int logicalIndex){
	static_cast<QHeaderView*>(ptr)->QHeaderView::paintSection(static_cast<QPainter*>(painter), *static_cast<QRect*>(rect), logicalIndex);
}

void QHeaderView_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQHeaderView*>(ptr), "reset");
}

void QHeaderView_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "reset");
}

int QHeaderView_ResizeContentsPrecision(void* ptr){
	return static_cast<QHeaderView*>(ptr)->resizeContentsPrecision();
}

void QHeaderView_ResizeSections(void* ptr, int mode){
	static_cast<QHeaderView*>(ptr)->resizeSections(static_cast<QHeaderView::ResizeMode>(mode));
}

int QHeaderView_RestoreState(void* ptr, char* state){
	return static_cast<QHeaderView*>(ptr)->restoreState(QByteArray(state));
}

char* QHeaderView_SaveState(void* ptr){
	return QString(static_cast<QHeaderView*>(ptr)->saveState()).toUtf8().data();
}

void QHeaderView_ConnectSectionClicked(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionClicked), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionClicked));;
}

void QHeaderView_DisconnectSectionClicked(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionClicked), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionClicked));;
}

void QHeaderView_SectionClicked(void* ptr, int logicalIndex){
	static_cast<QHeaderView*>(ptr)->sectionClicked(logicalIndex);
}

void QHeaderView_ConnectSectionCountChanged(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int, int)>(&QHeaderView::sectionCountChanged), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int, int)>(&MyQHeaderView::Signal_SectionCountChanged));;
}

void QHeaderView_DisconnectSectionCountChanged(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int, int)>(&QHeaderView::sectionCountChanged), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int, int)>(&MyQHeaderView::Signal_SectionCountChanged));;
}

void QHeaderView_SectionCountChanged(void* ptr, int oldCount, int newCount){
	static_cast<QHeaderView*>(ptr)->sectionCountChanged(oldCount, newCount);
}

void QHeaderView_ConnectSectionDoubleClicked(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionDoubleClicked), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionDoubleClicked));;
}

void QHeaderView_DisconnectSectionDoubleClicked(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionDoubleClicked), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionDoubleClicked));;
}

void QHeaderView_SectionDoubleClicked(void* ptr, int logicalIndex){
	static_cast<QHeaderView*>(ptr)->sectionDoubleClicked(logicalIndex);
}

void QHeaderView_ConnectSectionEntered(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionEntered), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionEntered));;
}

void QHeaderView_DisconnectSectionEntered(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionEntered), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionEntered));;
}

void QHeaderView_SectionEntered(void* ptr, int logicalIndex){
	static_cast<QHeaderView*>(ptr)->sectionEntered(logicalIndex);
}

void QHeaderView_ConnectSectionHandleDoubleClicked(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionHandleDoubleClicked), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionHandleDoubleClicked));;
}

void QHeaderView_DisconnectSectionHandleDoubleClicked(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionHandleDoubleClicked), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionHandleDoubleClicked));;
}

void QHeaderView_SectionHandleDoubleClicked(void* ptr, int logicalIndex){
	static_cast<QHeaderView*>(ptr)->sectionHandleDoubleClicked(logicalIndex);
}

void QHeaderView_ConnectSectionMoved(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int, int, int)>(&QHeaderView::sectionMoved), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int, int, int)>(&MyQHeaderView::Signal_SectionMoved));;
}

void QHeaderView_DisconnectSectionMoved(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int, int, int)>(&QHeaderView::sectionMoved), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int, int, int)>(&MyQHeaderView::Signal_SectionMoved));;
}

void QHeaderView_SectionMoved(void* ptr, int logicalIndex, int oldVisualIndex, int newVisualIndex){
	static_cast<QHeaderView*>(ptr)->sectionMoved(logicalIndex, oldVisualIndex, newVisualIndex);
}

int QHeaderView_SectionPosition(void* ptr, int logicalIndex){
	return static_cast<QHeaderView*>(ptr)->sectionPosition(logicalIndex);
}

void QHeaderView_ConnectSectionPressed(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionPressed), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionPressed));;
}

void QHeaderView_DisconnectSectionPressed(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int)>(&QHeaderView::sectionPressed), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int)>(&MyQHeaderView::Signal_SectionPressed));;
}

void QHeaderView_SectionPressed(void* ptr, int logicalIndex){
	static_cast<QHeaderView*>(ptr)->sectionPressed(logicalIndex);
}

int QHeaderView_SectionResizeMode(void* ptr, int logicalIndex){
	return static_cast<QHeaderView*>(ptr)->sectionResizeMode(logicalIndex);
}

void QHeaderView_ConnectSectionResized(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int, int, int)>(&QHeaderView::sectionResized), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int, int, int)>(&MyQHeaderView::Signal_SectionResized));;
}

void QHeaderView_DisconnectSectionResized(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int, int, int)>(&QHeaderView::sectionResized), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int, int, int)>(&MyQHeaderView::Signal_SectionResized));;
}

void QHeaderView_SectionResized(void* ptr, int logicalIndex, int oldSize, int newSize){
	static_cast<QHeaderView*>(ptr)->sectionResized(logicalIndex, oldSize, newSize);
}

int QHeaderView_SectionSize(void* ptr, int logicalIndex){
	return static_cast<QHeaderView*>(ptr)->sectionSize(logicalIndex);
}

void* QHeaderView_SectionSizeFromContents(void* ptr, int logicalIndex){
	return new QSize(static_cast<QSize>(static_cast<QHeaderView*>(ptr)->sectionSizeFromContents(logicalIndex)).width(), static_cast<QSize>(static_cast<QHeaderView*>(ptr)->sectionSizeFromContents(logicalIndex)).height());
}

int QHeaderView_SectionSizeHint(void* ptr, int logicalIndex){
	return static_cast<QHeaderView*>(ptr)->sectionSizeHint(logicalIndex);
}

int QHeaderView_SectionViewportPosition(void* ptr, int logicalIndex){
	return static_cast<QHeaderView*>(ptr)->sectionViewportPosition(logicalIndex);
}

int QHeaderView_SectionsClickable(void* ptr){
	return static_cast<QHeaderView*>(ptr)->sectionsClickable();
}

int QHeaderView_SectionsHidden(void* ptr){
	return static_cast<QHeaderView*>(ptr)->sectionsHidden();
}

int QHeaderView_SectionsMovable(void* ptr){
	return static_cast<QHeaderView*>(ptr)->sectionsMovable();
}

int QHeaderView_SectionsMoved(void* ptr){
	return static_cast<QHeaderView*>(ptr)->sectionsMoved();
}

void QHeaderView_SetModel(void* ptr, void* model){
	static_cast<MyQHeaderView*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QHeaderView_SetModelDefault(void* ptr, void* model){
	static_cast<QHeaderView*>(ptr)->QHeaderView::setModel(static_cast<QAbstractItemModel*>(model));
}

void QHeaderView_SetOffsetToLastSection(void* ptr){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "setOffsetToLastSection");
}

void QHeaderView_SetOffsetToSectionPosition(void* ptr, int visualSectionNumber){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "setOffsetToSectionPosition", Q_ARG(int, visualSectionNumber));
}

void QHeaderView_SetResizeContentsPrecision(void* ptr, int precision){
	static_cast<QHeaderView*>(ptr)->setResizeContentsPrecision(precision);
}

void QHeaderView_SetSectionHidden(void* ptr, int logicalIndex, int hide){
	static_cast<QHeaderView*>(ptr)->setSectionHidden(logicalIndex, hide != 0);
}

void QHeaderView_SetSectionResizeMode(void* ptr, int mode){
	static_cast<QHeaderView*>(ptr)->setSectionResizeMode(static_cast<QHeaderView::ResizeMode>(mode));
}

void QHeaderView_SetSectionResizeMode2(void* ptr, int logicalIndex, int mode){
	static_cast<QHeaderView*>(ptr)->setSectionResizeMode(logicalIndex, static_cast<QHeaderView::ResizeMode>(mode));
}

void QHeaderView_SetSectionsClickable(void* ptr, int clickable){
	static_cast<QHeaderView*>(ptr)->setSectionsClickable(clickable != 0);
}

void QHeaderView_SetSectionsMovable(void* ptr, int movable){
	static_cast<QHeaderView*>(ptr)->setSectionsMovable(movable != 0);
}

void QHeaderView_SetSelection(void* ptr, void* rect, int flags){
	static_cast<MyQHeaderView*>(ptr)->setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(flags));
}

void QHeaderView_SetSelectionDefault(void* ptr, void* rect, int flags){
	static_cast<QHeaderView*>(ptr)->QHeaderView::setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(flags));
}

void QHeaderView_SetSortIndicator(void* ptr, int logicalIndex, int order){
	static_cast<QHeaderView*>(ptr)->setSortIndicator(logicalIndex, static_cast<Qt::SortOrder>(order));
}

void QHeaderView_SetVisible(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<MyQHeaderView*>(ptr), "setVisible", Q_ARG(bool, v != 0));
}

void QHeaderView_SetVisibleDefault(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "setVisible", Q_ARG(bool, v != 0));
}

void QHeaderView_ShowSection(void* ptr, int logicalIndex){
	static_cast<QHeaderView*>(ptr)->showSection(logicalIndex);
}

void* QHeaderView_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QHeaderView*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QHeaderView*>(ptr)->sizeHint()).height());
}

void QHeaderView_ConnectSortIndicatorChanged(void* ptr){
	QObject::connect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int, Qt::SortOrder)>(&QHeaderView::sortIndicatorChanged), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int, Qt::SortOrder)>(&MyQHeaderView::Signal_SortIndicatorChanged));;
}

void QHeaderView_DisconnectSortIndicatorChanged(void* ptr){
	QObject::disconnect(static_cast<QHeaderView*>(ptr), static_cast<void (QHeaderView::*)(int, Qt::SortOrder)>(&QHeaderView::sortIndicatorChanged), static_cast<MyQHeaderView*>(ptr), static_cast<void (MyQHeaderView::*)(int, Qt::SortOrder)>(&MyQHeaderView::Signal_SortIndicatorChanged));;
}

void QHeaderView_SortIndicatorChanged(void* ptr, int logicalIndex, int order){
	static_cast<QHeaderView*>(ptr)->sortIndicatorChanged(logicalIndex, static_cast<Qt::SortOrder>(order));
}

int QHeaderView_SortIndicatorOrder(void* ptr){
	return static_cast<QHeaderView*>(ptr)->sortIndicatorOrder();
}

int QHeaderView_SortIndicatorSection(void* ptr){
	return static_cast<QHeaderView*>(ptr)->sortIndicatorSection();
}

int QHeaderView_StretchSectionCount(void* ptr){
	return static_cast<QHeaderView*>(ptr)->stretchSectionCount();
}

void QHeaderView_SwapSections(void* ptr, int first, int second){
	static_cast<QHeaderView*>(ptr)->swapSections(first, second);
}

int QHeaderView_VerticalOffset(void* ptr){
	return static_cast<QHeaderView*>(ptr)->verticalOffset();
}

int QHeaderView_ViewportEvent(void* ptr, void* e){
	return static_cast<QHeaderView*>(ptr)->viewportEvent(static_cast<QEvent*>(e));
}

int QHeaderView_VisualIndex(void* ptr, int logicalIndex){
	return static_cast<QHeaderView*>(ptr)->visualIndex(logicalIndex);
}

int QHeaderView_VisualIndexAt(void* ptr, int position){
	return static_cast<QHeaderView*>(ptr)->visualIndexAt(position);
}

void QHeaderView_DestroyQHeaderView(void* ptr){
	static_cast<QHeaderView*>(ptr)->~QHeaderView();
}

void QHeaderView_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QHeaderView_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QHeaderView_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<MyQHeaderView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QHeaderView_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QHeaderView_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQHeaderView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QHeaderView_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QHeaderView_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QHeaderView_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QHeaderView_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QHeaderView_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QHeaderView_DropEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QHeaderView_DropEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::dropEvent(static_cast<QDropEvent*>(event));
}

void QHeaderView_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQHeaderView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QHeaderView_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QHeaderView_FocusInEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QHeaderView_FocusInEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QHeaderView_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QHeaderView_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QHeaderView_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QHeaderView_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QHeaderView_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QHeaderView_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QHeaderView_KeyboardSearch(void* ptr, char* search){
	static_cast<MyQHeaderView*>(ptr)->keyboardSearch(QString(search));
}

void QHeaderView_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QHeaderView*>(ptr)->QHeaderView::keyboardSearch(QString(search));
}

void QHeaderView_ResizeEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QHeaderView_ResizeEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QHeaderView_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQHeaderView*>(ptr), "selectAll");
}

void QHeaderView_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "selectAll");
}

void QHeaderView_SetSelectionModel(void* ptr, void* selectionModel){
	static_cast<MyQHeaderView*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QHeaderView_SetSelectionModelDefault(void* ptr, void* selectionModel){
	static_cast<QHeaderView*>(ptr)->QHeaderView::setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QHeaderView_StartDrag(void* ptr, int supportedActions){
	static_cast<MyQHeaderView*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QHeaderView_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QHeaderView*>(ptr)->QHeaderView::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QHeaderView_TimerEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QHeaderView_TimerEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::timerEvent(static_cast<QTimerEvent*>(event));
}

void QHeaderView_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQHeaderView*>(ptr), "updateGeometries");
}

void QHeaderView_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QHeaderView*>(ptr), "updateGeometries");
}

void QHeaderView_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQHeaderView*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QHeaderView_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QHeaderView*>(ptr)->QHeaderView::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QHeaderView_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQHeaderView*>(ptr)->scrollContentsBy(dx, dy);
}

void QHeaderView_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QHeaderView*>(ptr)->QHeaderView::scrollContentsBy(dx, dy);
}

void QHeaderView_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQHeaderView*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QHeaderView_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QHeaderView*>(ptr)->QHeaderView::setupViewport(static_cast<QWidget*>(viewport));
}

void QHeaderView_WheelEvent(void* ptr, void* e){
	static_cast<MyQHeaderView*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QHeaderView_WheelEventDefault(void* ptr, void* e){
	static_cast<QHeaderView*>(ptr)->QHeaderView::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QHeaderView_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQHeaderView*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QHeaderView_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QHeaderView*>(ptr)->QHeaderView::changeEvent(static_cast<QEvent*>(ev));
}

void QHeaderView_ActionEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QHeaderView_ActionEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::actionEvent(static_cast<QActionEvent*>(event));
}

void QHeaderView_EnterEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QHeaderView_EnterEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::enterEvent(static_cast<QEvent*>(event));
}

void QHeaderView_HideEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QHeaderView_HideEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::hideEvent(static_cast<QHideEvent*>(event));
}

void QHeaderView_LeaveEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QHeaderView_LeaveEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::leaveEvent(static_cast<QEvent*>(event));
}

void QHeaderView_MoveEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QHeaderView_MoveEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::moveEvent(static_cast<QMoveEvent*>(event));
}

void QHeaderView_ShowEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QHeaderView_ShowEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::showEvent(static_cast<QShowEvent*>(event));
}

void QHeaderView_CloseEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QHeaderView_CloseEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::closeEvent(static_cast<QCloseEvent*>(event));
}

void QHeaderView_InitPainter(void* ptr, void* painter){
	static_cast<MyQHeaderView*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QHeaderView_InitPainterDefault(void* ptr, void* painter){
	static_cast<QHeaderView*>(ptr)->QHeaderView::initPainter(static_cast<QPainter*>(painter));
}

void QHeaderView_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QHeaderView_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QHeaderView_TabletEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QHeaderView_TabletEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QHeaderView_ChildEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QHeaderView_ChildEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::childEvent(static_cast<QChildEvent*>(event));
}

void QHeaderView_CustomEvent(void* ptr, void* event){
	static_cast<MyQHeaderView*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QHeaderView_CustomEventDefault(void* ptr, void* event){
	static_cast<QHeaderView*>(ptr)->QHeaderView::customEvent(static_cast<QEvent*>(event));
}

class MyQInputDialog: public QInputDialog {
public:
	MyQInputDialog(QWidget *parent, Qt::WindowFlags flags) : QInputDialog(parent, flags) {};
	void done(int result) { if (!callbackQInputDialogDone(this, this->objectName().toUtf8().data(), result)) { QInputDialog::done(result); }; };
	void Signal_IntValueChanged(int value) { callbackQInputDialogIntValueChanged(this, this->objectName().toUtf8().data(), value); };
	void Signal_IntValueSelected(int value) { callbackQInputDialogIntValueSelected(this, this->objectName().toUtf8().data(), value); };
	void setVisible(bool visible) { if (!callbackQInputDialogSetVisible(this, this->objectName().toUtf8().data(), visible)) { QInputDialog::setVisible(visible); }; };
	void Signal_TextValueChanged(const QString & text) { callbackQInputDialogTextValueChanged(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void Signal_TextValueSelected(const QString & text) { callbackQInputDialogTextValueSelected(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void accept() { if (!callbackQInputDialogAccept(this, this->objectName().toUtf8().data())) { QInputDialog::accept(); }; };
	void closeEvent(QCloseEvent * e) { callbackQInputDialogCloseEvent(this, this->objectName().toUtf8().data(), e); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQInputDialogContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQInputDialogKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void reject() { if (!callbackQInputDialogReject(this, this->objectName().toUtf8().data())) { QInputDialog::reject(); }; };
	void resizeEvent(QResizeEvent * v) { callbackQInputDialogResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void showEvent(QShowEvent * event) { callbackQInputDialogShowEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQInputDialogActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQInputDialogDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQInputDialogDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQInputDialogDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQInputDialogDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQInputDialogEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQInputDialogFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQInputDialogFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQInputDialogHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQInputDialogLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQInputDialogMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQInputDialogPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQInputDialogChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQInputDialogInitPainter(const_cast<MyQInputDialog*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQInputDialogInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQInputDialogKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQInputDialogMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQInputDialogMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQInputDialogMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQInputDialogMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQInputDialogTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQInputDialogWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQInputDialogTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQInputDialogChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQInputDialogCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

char* QInputDialog_CancelButtonText(void* ptr){
	return static_cast<QInputDialog*>(ptr)->cancelButtonText().toUtf8().data();
}

char* QInputDialog_ComboBoxItems(void* ptr){
	return static_cast<QInputDialog*>(ptr)->comboBoxItems().join("|").toUtf8().data();
}

int QInputDialog_DoubleDecimals(void* ptr){
	return static_cast<QInputDialog*>(ptr)->doubleDecimals();
}

int QInputDialog_InputMode(void* ptr){
	return static_cast<QInputDialog*>(ptr)->inputMode();
}

int QInputDialog_IntMaximum(void* ptr){
	return static_cast<QInputDialog*>(ptr)->intMaximum();
}

int QInputDialog_IntMinimum(void* ptr){
	return static_cast<QInputDialog*>(ptr)->intMinimum();
}

int QInputDialog_IntStep(void* ptr){
	return static_cast<QInputDialog*>(ptr)->intStep();
}

int QInputDialog_IntValue(void* ptr){
	return static_cast<QInputDialog*>(ptr)->intValue();
}

int QInputDialog_IsComboBoxEditable(void* ptr){
	return static_cast<QInputDialog*>(ptr)->isComboBoxEditable();
}

char* QInputDialog_LabelText(void* ptr){
	return static_cast<QInputDialog*>(ptr)->labelText().toUtf8().data();
}

char* QInputDialog_OkButtonText(void* ptr){
	return static_cast<QInputDialog*>(ptr)->okButtonText().toUtf8().data();
}

int QInputDialog_Options(void* ptr){
	return static_cast<QInputDialog*>(ptr)->options();
}

void QInputDialog_SetCancelButtonText(void* ptr, char* text){
	static_cast<QInputDialog*>(ptr)->setCancelButtonText(QString(text));
}

void QInputDialog_SetComboBoxEditable(void* ptr, int editable){
	static_cast<QInputDialog*>(ptr)->setComboBoxEditable(editable != 0);
}

void QInputDialog_SetComboBoxItems(void* ptr, char* items){
	static_cast<QInputDialog*>(ptr)->setComboBoxItems(QString(items).split("|", QString::SkipEmptyParts));
}

void QInputDialog_SetDoubleDecimals(void* ptr, int decimals){
	static_cast<QInputDialog*>(ptr)->setDoubleDecimals(decimals);
}

void QInputDialog_SetInputMode(void* ptr, int mode){
	static_cast<QInputDialog*>(ptr)->setInputMode(static_cast<QInputDialog::InputMode>(mode));
}

void QInputDialog_SetIntMaximum(void* ptr, int max){
	static_cast<QInputDialog*>(ptr)->setIntMaximum(max);
}

void QInputDialog_SetIntMinimum(void* ptr, int min){
	static_cast<QInputDialog*>(ptr)->setIntMinimum(min);
}

void QInputDialog_SetIntStep(void* ptr, int step){
	static_cast<QInputDialog*>(ptr)->setIntStep(step);
}

void QInputDialog_SetIntValue(void* ptr, int value){
	static_cast<QInputDialog*>(ptr)->setIntValue(value);
}

void QInputDialog_SetLabelText(void* ptr, char* text){
	static_cast<QInputDialog*>(ptr)->setLabelText(QString(text));
}

void QInputDialog_SetOkButtonText(void* ptr, char* text){
	static_cast<QInputDialog*>(ptr)->setOkButtonText(QString(text));
}

void QInputDialog_SetOptions(void* ptr, int options){
	static_cast<QInputDialog*>(ptr)->setOptions(static_cast<QInputDialog::InputDialogOption>(options));
}

void QInputDialog_SetTextEchoMode(void* ptr, int mode){
	static_cast<QInputDialog*>(ptr)->setTextEchoMode(static_cast<QLineEdit::EchoMode>(mode));
}

void QInputDialog_SetTextValue(void* ptr, char* text){
	static_cast<QInputDialog*>(ptr)->setTextValue(QString(text));
}

int QInputDialog_TextEchoMode(void* ptr){
	return static_cast<QInputDialog*>(ptr)->textEchoMode();
}

char* QInputDialog_TextValue(void* ptr){
	return static_cast<QInputDialog*>(ptr)->textValue().toUtf8().data();
}

void* QInputDialog_NewQInputDialog(void* parent, int flags){
	return new MyQInputDialog(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(flags));
}

void QInputDialog_Done(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<MyQInputDialog*>(ptr), "done", Q_ARG(int, result));
}

void QInputDialog_DoneDefault(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<QInputDialog*>(ptr), "done", Q_ARG(int, result));
}

int QInputDialog_QInputDialog_GetInt(void* parent, char* title, char* label, int value, int min, int max, int step, int ok, int flags){
	return QInputDialog::getInt(static_cast<QWidget*>(parent), QString(title), QString(label), value, min, max, step, NULL, static_cast<Qt::WindowType>(flags));
}

char* QInputDialog_QInputDialog_GetItem(void* parent, char* title, char* label, char* items, int current, int editable, int ok, int flags, int inputMethodHints){
	return QInputDialog::getItem(static_cast<QWidget*>(parent), QString(title), QString(label), QString(items).split("|", QString::SkipEmptyParts), current, editable != 0, NULL, static_cast<Qt::WindowType>(flags), static_cast<Qt::InputMethodHint>(inputMethodHints)).toUtf8().data();
}

char* QInputDialog_QInputDialog_GetMultiLineText(void* parent, char* title, char* label, char* text, int ok, int flags, int inputMethodHints){
	return QInputDialog::getMultiLineText(static_cast<QWidget*>(parent), QString(title), QString(label), QString(text), NULL, static_cast<Qt::WindowType>(flags), static_cast<Qt::InputMethodHint>(inputMethodHints)).toUtf8().data();
}

char* QInputDialog_QInputDialog_GetText(void* parent, char* title, char* label, int mode, char* text, int ok, int flags, int inputMethodHints){
	return QInputDialog::getText(static_cast<QWidget*>(parent), QString(title), QString(label), static_cast<QLineEdit::EchoMode>(mode), QString(text), NULL, static_cast<Qt::WindowType>(flags), static_cast<Qt::InputMethodHint>(inputMethodHints)).toUtf8().data();
}

void QInputDialog_ConnectIntValueChanged(void* ptr){
	QObject::connect(static_cast<QInputDialog*>(ptr), static_cast<void (QInputDialog::*)(int)>(&QInputDialog::intValueChanged), static_cast<MyQInputDialog*>(ptr), static_cast<void (MyQInputDialog::*)(int)>(&MyQInputDialog::Signal_IntValueChanged));;
}

void QInputDialog_DisconnectIntValueChanged(void* ptr){
	QObject::disconnect(static_cast<QInputDialog*>(ptr), static_cast<void (QInputDialog::*)(int)>(&QInputDialog::intValueChanged), static_cast<MyQInputDialog*>(ptr), static_cast<void (MyQInputDialog::*)(int)>(&MyQInputDialog::Signal_IntValueChanged));;
}

void QInputDialog_IntValueChanged(void* ptr, int value){
	static_cast<QInputDialog*>(ptr)->intValueChanged(value);
}

void QInputDialog_ConnectIntValueSelected(void* ptr){
	QObject::connect(static_cast<QInputDialog*>(ptr), static_cast<void (QInputDialog::*)(int)>(&QInputDialog::intValueSelected), static_cast<MyQInputDialog*>(ptr), static_cast<void (MyQInputDialog::*)(int)>(&MyQInputDialog::Signal_IntValueSelected));;
}

void QInputDialog_DisconnectIntValueSelected(void* ptr){
	QObject::disconnect(static_cast<QInputDialog*>(ptr), static_cast<void (QInputDialog::*)(int)>(&QInputDialog::intValueSelected), static_cast<MyQInputDialog*>(ptr), static_cast<void (MyQInputDialog::*)(int)>(&MyQInputDialog::Signal_IntValueSelected));;
}

void QInputDialog_IntValueSelected(void* ptr, int value){
	static_cast<QInputDialog*>(ptr)->intValueSelected(value);
}

void* QInputDialog_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QInputDialog*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QInputDialog*>(ptr)->minimumSizeHint()).height());
}

void QInputDialog_Open(void* ptr, void* receiver, char* member){
	static_cast<QInputDialog*>(ptr)->open(static_cast<QObject*>(receiver), const_cast<const char*>(member));
}

void QInputDialog_SetIntRange(void* ptr, int min, int max){
	static_cast<QInputDialog*>(ptr)->setIntRange(min, max);
}

void QInputDialog_SetOption(void* ptr, int option, int on){
	static_cast<QInputDialog*>(ptr)->setOption(static_cast<QInputDialog::InputDialogOption>(option), on != 0);
}

void QInputDialog_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQInputDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QInputDialog_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QInputDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void* QInputDialog_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QInputDialog*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QInputDialog*>(ptr)->sizeHint()).height());
}

int QInputDialog_TestOption(void* ptr, int option){
	return static_cast<QInputDialog*>(ptr)->testOption(static_cast<QInputDialog::InputDialogOption>(option));
}

void QInputDialog_ConnectTextValueChanged(void* ptr){
	QObject::connect(static_cast<QInputDialog*>(ptr), static_cast<void (QInputDialog::*)(const QString &)>(&QInputDialog::textValueChanged), static_cast<MyQInputDialog*>(ptr), static_cast<void (MyQInputDialog::*)(const QString &)>(&MyQInputDialog::Signal_TextValueChanged));;
}

void QInputDialog_DisconnectTextValueChanged(void* ptr){
	QObject::disconnect(static_cast<QInputDialog*>(ptr), static_cast<void (QInputDialog::*)(const QString &)>(&QInputDialog::textValueChanged), static_cast<MyQInputDialog*>(ptr), static_cast<void (MyQInputDialog::*)(const QString &)>(&MyQInputDialog::Signal_TextValueChanged));;
}

void QInputDialog_TextValueChanged(void* ptr, char* text){
	static_cast<QInputDialog*>(ptr)->textValueChanged(QString(text));
}

void QInputDialog_ConnectTextValueSelected(void* ptr){
	QObject::connect(static_cast<QInputDialog*>(ptr), static_cast<void (QInputDialog::*)(const QString &)>(&QInputDialog::textValueSelected), static_cast<MyQInputDialog*>(ptr), static_cast<void (MyQInputDialog::*)(const QString &)>(&MyQInputDialog::Signal_TextValueSelected));;
}

void QInputDialog_DisconnectTextValueSelected(void* ptr){
	QObject::disconnect(static_cast<QInputDialog*>(ptr), static_cast<void (QInputDialog::*)(const QString &)>(&QInputDialog::textValueSelected), static_cast<MyQInputDialog*>(ptr), static_cast<void (MyQInputDialog::*)(const QString &)>(&MyQInputDialog::Signal_TextValueSelected));;
}

void QInputDialog_TextValueSelected(void* ptr, char* text){
	static_cast<QInputDialog*>(ptr)->textValueSelected(QString(text));
}

void QInputDialog_DestroyQInputDialog(void* ptr){
	static_cast<QInputDialog*>(ptr)->~QInputDialog();
}

void QInputDialog_Accept(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQInputDialog*>(ptr), "accept");
}

void QInputDialog_AcceptDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QInputDialog*>(ptr), "accept");
}

void QInputDialog_CloseEvent(void* ptr, void* e){
	static_cast<MyQInputDialog*>(ptr)->closeEvent(static_cast<QCloseEvent*>(e));
}

void QInputDialog_CloseEventDefault(void* ptr, void* e){
	static_cast<QInputDialog*>(ptr)->QInputDialog::closeEvent(static_cast<QCloseEvent*>(e));
}

void QInputDialog_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQInputDialog*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QInputDialog_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QInputDialog*>(ptr)->QInputDialog::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QInputDialog_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQInputDialog*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QInputDialog_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QInputDialog*>(ptr)->QInputDialog::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QInputDialog_Reject(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQInputDialog*>(ptr), "reject");
}

void QInputDialog_RejectDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QInputDialog*>(ptr), "reject");
}

void QInputDialog_ResizeEvent(void* ptr, void* v){
	static_cast<MyQInputDialog*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QInputDialog_ResizeEventDefault(void* ptr, void* v){
	static_cast<QInputDialog*>(ptr)->QInputDialog::resizeEvent(static_cast<QResizeEvent*>(v));
}

void QInputDialog_ShowEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QInputDialog_ShowEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::showEvent(static_cast<QShowEvent*>(event));
}

void QInputDialog_ActionEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QInputDialog_ActionEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::actionEvent(static_cast<QActionEvent*>(event));
}

void QInputDialog_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QInputDialog_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QInputDialog_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QInputDialog_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QInputDialog_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QInputDialog_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QInputDialog_DropEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QInputDialog_DropEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::dropEvent(static_cast<QDropEvent*>(event));
}

void QInputDialog_EnterEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QInputDialog_EnterEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::enterEvent(static_cast<QEvent*>(event));
}

void QInputDialog_FocusInEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QInputDialog_FocusInEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QInputDialog_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QInputDialog_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QInputDialog_HideEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QInputDialog_HideEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::hideEvent(static_cast<QHideEvent*>(event));
}

void QInputDialog_LeaveEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QInputDialog_LeaveEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::leaveEvent(static_cast<QEvent*>(event));
}

void QInputDialog_MoveEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QInputDialog_MoveEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::moveEvent(static_cast<QMoveEvent*>(event));
}

void QInputDialog_PaintEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QInputDialog_PaintEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::paintEvent(static_cast<QPaintEvent*>(event));
}

void QInputDialog_ChangeEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QInputDialog_ChangeEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::changeEvent(static_cast<QEvent*>(event));
}

void QInputDialog_InitPainter(void* ptr, void* painter){
	static_cast<MyQInputDialog*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QInputDialog_InitPainterDefault(void* ptr, void* painter){
	static_cast<QInputDialog*>(ptr)->QInputDialog::initPainter(static_cast<QPainter*>(painter));
}

void QInputDialog_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QInputDialog_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QInputDialog_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QInputDialog_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QInputDialog_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QInputDialog_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QInputDialog_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QInputDialog_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QInputDialog_MousePressEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QInputDialog_MousePressEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QInputDialog_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QInputDialog_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QInputDialog_TabletEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QInputDialog_TabletEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QInputDialog_WheelEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QInputDialog_WheelEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QInputDialog_TimerEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QInputDialog_TimerEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::timerEvent(static_cast<QTimerEvent*>(event));
}

void QInputDialog_ChildEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QInputDialog_ChildEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::childEvent(static_cast<QChildEvent*>(event));
}

void QInputDialog_CustomEvent(void* ptr, void* event){
	static_cast<MyQInputDialog*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QInputDialog_CustomEventDefault(void* ptr, void* event){
	static_cast<QInputDialog*>(ptr)->QInputDialog::customEvent(static_cast<QEvent*>(event));
}

class MyQItemDelegate: public QItemDelegate {
public:
	MyQItemDelegate(QObject *parent) : QItemDelegate(parent) {};
	void drawCheck(QPainter * painter, const QStyleOptionViewItem & option, const QRect & rect, Qt::CheckState state) const { callbackQItemDelegateDrawCheck(const_cast<MyQItemDelegate*>(this), this->objectName().toUtf8().data(), painter, new QStyleOptionViewItem(option), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), state); };
	void drawDecoration(QPainter * painter, const QStyleOptionViewItem & option, const QRect & rect, const QPixmap & pixmap) const { callbackQItemDelegateDrawDecoration(const_cast<MyQItemDelegate*>(this), this->objectName().toUtf8().data(), painter, new QStyleOptionViewItem(option), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), new QPixmap(pixmap)); };
	void drawDisplay(QPainter * painter, const QStyleOptionViewItem & option, const QRect & rect, const QString & text) const { callbackQItemDelegateDrawDisplay(const_cast<MyQItemDelegate*>(this), this->objectName().toUtf8().data(), painter, new QStyleOptionViewItem(option), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), text.toUtf8().data()); };
	void drawFocus(QPainter * painter, const QStyleOptionViewItem & option, const QRect & rect) const { callbackQItemDelegateDrawFocus(const_cast<MyQItemDelegate*>(this), this->objectName().toUtf8().data(), painter, new QStyleOptionViewItem(option), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height())); };
	void timerEvent(QTimerEvent * event) { callbackQItemDelegateTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQItemDelegateChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQItemDelegateCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QItemDelegate_EventFilter(void* ptr, void* editor, void* event){
	return static_cast<QItemDelegate*>(ptr)->eventFilter(static_cast<QObject*>(editor), static_cast<QEvent*>(event));
}

int QItemDelegate_HasClipping(void* ptr){
	return static_cast<QItemDelegate*>(ptr)->hasClipping();
}

void QItemDelegate_SetClipping(void* ptr, int clip){
	static_cast<QItemDelegate*>(ptr)->setClipping(clip != 0);
}

void* QItemDelegate_NewQItemDelegate(void* parent){
	return new MyQItemDelegate(static_cast<QObject*>(parent));
}

void* QItemDelegate_CreateEditor(void* ptr, void* parent, void* option, void* index){
	return static_cast<QItemDelegate*>(ptr)->createEditor(static_cast<QWidget*>(parent), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index));
}

void QItemDelegate_DrawCheck(void* ptr, void* painter, void* option, void* rect, int state){
	static_cast<MyQItemDelegate*>(ptr)->drawCheck(static_cast<QPainter*>(painter), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QRect*>(rect), static_cast<Qt::CheckState>(state));
}

void QItemDelegate_DrawCheckDefault(void* ptr, void* painter, void* option, void* rect, int state){
	static_cast<QItemDelegate*>(ptr)->QItemDelegate::drawCheck(static_cast<QPainter*>(painter), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QRect*>(rect), static_cast<Qt::CheckState>(state));
}

void QItemDelegate_DrawDecoration(void* ptr, void* painter, void* option, void* rect, void* pixmap){
	static_cast<MyQItemDelegate*>(ptr)->drawDecoration(static_cast<QPainter*>(painter), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QRect*>(rect), *static_cast<QPixmap*>(pixmap));
}

void QItemDelegate_DrawDecorationDefault(void* ptr, void* painter, void* option, void* rect, void* pixmap){
	static_cast<QItemDelegate*>(ptr)->QItemDelegate::drawDecoration(static_cast<QPainter*>(painter), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QRect*>(rect), *static_cast<QPixmap*>(pixmap));
}

void QItemDelegate_DrawDisplay(void* ptr, void* painter, void* option, void* rect, char* text){
	static_cast<MyQItemDelegate*>(ptr)->drawDisplay(static_cast<QPainter*>(painter), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QRect*>(rect), QString(text));
}

void QItemDelegate_DrawDisplayDefault(void* ptr, void* painter, void* option, void* rect, char* text){
	static_cast<QItemDelegate*>(ptr)->QItemDelegate::drawDisplay(static_cast<QPainter*>(painter), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QRect*>(rect), QString(text));
}

void QItemDelegate_DrawFocus(void* ptr, void* painter, void* option, void* rect){
	static_cast<MyQItemDelegate*>(ptr)->drawFocus(static_cast<QPainter*>(painter), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QRect*>(rect));
}

void QItemDelegate_DrawFocusDefault(void* ptr, void* painter, void* option, void* rect){
	static_cast<QItemDelegate*>(ptr)->QItemDelegate::drawFocus(static_cast<QPainter*>(painter), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QRect*>(rect));
}

int QItemDelegate_EditorEvent(void* ptr, void* event, void* model, void* option, void* index){
	return static_cast<QItemDelegate*>(ptr)->editorEvent(static_cast<QEvent*>(event), static_cast<QAbstractItemModel*>(model), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index));
}

void* QItemDelegate_ItemEditorFactory(void* ptr){
	return static_cast<QItemDelegate*>(ptr)->itemEditorFactory();
}

void QItemDelegate_SetItemEditorFactory(void* ptr, void* factory){
	static_cast<QItemDelegate*>(ptr)->setItemEditorFactory(static_cast<QItemEditorFactory*>(factory));
}

void* QItemDelegate_SizeHint(void* ptr, void* option, void* index){
	return new QSize(static_cast<QSize>(static_cast<QItemDelegate*>(ptr)->sizeHint(*static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index))).width(), static_cast<QSize>(static_cast<QItemDelegate*>(ptr)->sizeHint(*static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index))).height());
}

void QItemDelegate_DestroyQItemDelegate(void* ptr){
	static_cast<QItemDelegate*>(ptr)->~QItemDelegate();
}

void QItemDelegate_TimerEvent(void* ptr, void* event){
	static_cast<MyQItemDelegate*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QItemDelegate_TimerEventDefault(void* ptr, void* event){
	static_cast<QItemDelegate*>(ptr)->QItemDelegate::timerEvent(static_cast<QTimerEvent*>(event));
}

void QItemDelegate_ChildEvent(void* ptr, void* event){
	static_cast<MyQItemDelegate*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QItemDelegate_ChildEventDefault(void* ptr, void* event){
	static_cast<QItemDelegate*>(ptr)->QItemDelegate::childEvent(static_cast<QChildEvent*>(event));
}

void QItemDelegate_CustomEvent(void* ptr, void* event){
	static_cast<MyQItemDelegate*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QItemDelegate_CustomEventDefault(void* ptr, void* event){
	static_cast<QItemDelegate*>(ptr)->QItemDelegate::customEvent(static_cast<QEvent*>(event));
}

class MyQItemEditorCreatorBase: public QItemEditorCreatorBase {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
};

void QItemEditorCreatorBase_DestroyQItemEditorCreatorBase(void* ptr){
	static_cast<QItemEditorCreatorBase*>(ptr)->~QItemEditorCreatorBase();
}

void* QItemEditorCreatorBase_CreateWidget(void* ptr, void* parent){
	return static_cast<QItemEditorCreatorBase*>(ptr)->createWidget(static_cast<QWidget*>(parent));
}

char* QItemEditorCreatorBase_ValuePropertyName(void* ptr){
	return QString(static_cast<QItemEditorCreatorBase*>(ptr)->valuePropertyName()).toUtf8().data();
}

char* QItemEditorCreatorBase_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQItemEditorCreatorBase*>(static_cast<QItemEditorCreatorBase*>(ptr))) {
		return static_cast<MyQItemEditorCreatorBase*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QItemEditorCreatorBase_BASE").toUtf8().data();
}

void QItemEditorCreatorBase_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQItemEditorCreatorBase*>(static_cast<QItemEditorCreatorBase*>(ptr))) {
		static_cast<MyQItemEditorCreatorBase*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQItemEditorFactory: public QItemEditorFactory {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQItemEditorFactory() : QItemEditorFactory() {};
};

void* QItemEditorFactory_NewQItemEditorFactory(){
	return new MyQItemEditorFactory();
}

void* QItemEditorFactory_CreateEditor(void* ptr, int userType, void* parent){
	return static_cast<QItemEditorFactory*>(ptr)->createEditor(userType, static_cast<QWidget*>(parent));
}

void* QItemEditorFactory_QItemEditorFactory_DefaultFactory(){
	return const_cast<QItemEditorFactory*>(QItemEditorFactory::defaultFactory());
}

void QItemEditorFactory_RegisterEditor(void* ptr, int userType, void* creator){
	static_cast<QItemEditorFactory*>(ptr)->registerEditor(userType, static_cast<QItemEditorCreatorBase*>(creator));
}

void QItemEditorFactory_QItemEditorFactory_SetDefaultFactory(void* factory){
	QItemEditorFactory::setDefaultFactory(static_cast<QItemEditorFactory*>(factory));
}

char* QItemEditorFactory_ValuePropertyName(void* ptr, int userType){
	return QString(static_cast<QItemEditorFactory*>(ptr)->valuePropertyName(userType)).toUtf8().data();
}

void QItemEditorFactory_DestroyQItemEditorFactory(void* ptr){
	static_cast<QItemEditorFactory*>(ptr)->~QItemEditorFactory();
}

char* QItemEditorFactory_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQItemEditorFactory*>(static_cast<QItemEditorFactory*>(ptr))) {
		return static_cast<MyQItemEditorFactory*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QItemEditorFactory_BASE").toUtf8().data();
}

void QItemEditorFactory_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQItemEditorFactory*>(static_cast<QItemEditorFactory*>(ptr))) {
		static_cast<MyQItemEditorFactory*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQKeyEventTransition: public QKeyEventTransition {
public:
	MyQKeyEventTransition(QObject *object, QEvent::Type type, int key, QState *sourceState) : QKeyEventTransition(object, type, key, sourceState) {};
	MyQKeyEventTransition(QState *sourceState) : QKeyEventTransition(sourceState) {};
	void onTransition(QEvent * event) { callbackQKeyEventTransitionOnTransition(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQKeyEventTransitionTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQKeyEventTransitionChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQKeyEventTransitionCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QKeyEventTransition_NewQKeyEventTransition2(void* object, int ty, int key, void* sourceState){
	return new MyQKeyEventTransition(static_cast<QObject*>(object), static_cast<QEvent::Type>(ty), key, static_cast<QState*>(sourceState));
}

void* QKeyEventTransition_NewQKeyEventTransition(void* sourceState){
	return new MyQKeyEventTransition(static_cast<QState*>(sourceState));
}

int QKeyEventTransition_EventTest(void* ptr, void* event){
	return static_cast<QKeyEventTransition*>(ptr)->eventTest(static_cast<QEvent*>(event));
}

int QKeyEventTransition_Key(void* ptr){
	return static_cast<QKeyEventTransition*>(ptr)->key();
}

int QKeyEventTransition_ModifierMask(void* ptr){
	return static_cast<QKeyEventTransition*>(ptr)->modifierMask();
}

void QKeyEventTransition_OnTransition(void* ptr, void* event){
	static_cast<MyQKeyEventTransition*>(ptr)->onTransition(static_cast<QEvent*>(event));
}

void QKeyEventTransition_OnTransitionDefault(void* ptr, void* event){
	static_cast<QKeyEventTransition*>(ptr)->QKeyEventTransition::onTransition(static_cast<QEvent*>(event));
}

void QKeyEventTransition_SetKey(void* ptr, int key){
	static_cast<QKeyEventTransition*>(ptr)->setKey(key);
}

void QKeyEventTransition_SetModifierMask(void* ptr, int modifierMask){
	static_cast<QKeyEventTransition*>(ptr)->setModifierMask(static_cast<Qt::KeyboardModifier>(modifierMask));
}

void QKeyEventTransition_DestroyQKeyEventTransition(void* ptr){
	static_cast<QKeyEventTransition*>(ptr)->~QKeyEventTransition();
}

void QKeyEventTransition_TimerEvent(void* ptr, void* event){
	static_cast<MyQKeyEventTransition*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QKeyEventTransition_TimerEventDefault(void* ptr, void* event){
	static_cast<QKeyEventTransition*>(ptr)->QKeyEventTransition::timerEvent(static_cast<QTimerEvent*>(event));
}

void QKeyEventTransition_ChildEvent(void* ptr, void* event){
	static_cast<MyQKeyEventTransition*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QKeyEventTransition_ChildEventDefault(void* ptr, void* event){
	static_cast<QKeyEventTransition*>(ptr)->QKeyEventTransition::childEvent(static_cast<QChildEvent*>(event));
}

void QKeyEventTransition_CustomEvent(void* ptr, void* event){
	static_cast<MyQKeyEventTransition*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QKeyEventTransition_CustomEventDefault(void* ptr, void* event){
	static_cast<QKeyEventTransition*>(ptr)->QKeyEventTransition::customEvent(static_cast<QEvent*>(event));
}

class MyQKeySequenceEdit: public QKeySequenceEdit {
public:
	MyQKeySequenceEdit(QWidget *parent) : QKeySequenceEdit(parent) {};
	MyQKeySequenceEdit(const QKeySequence &keySequence, QWidget *parent) : QKeySequenceEdit(keySequence, parent) {};
	void Signal_EditingFinished() { callbackQKeySequenceEditEditingFinished(this, this->objectName().toUtf8().data()); };
	void keyPressEvent(QKeyEvent * e) { callbackQKeySequenceEditKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQKeySequenceEditKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_KeySequenceChanged(const QKeySequence & keySequence) { callbackQKeySequenceEditKeySequenceChanged(this, this->objectName().toUtf8().data(), new QKeySequence(keySequence)); };
	void timerEvent(QTimerEvent * e) { callbackQKeySequenceEditTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQKeySequenceEditActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQKeySequenceEditDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQKeySequenceEditDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQKeySequenceEditDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQKeySequenceEditDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQKeySequenceEditEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQKeySequenceEditFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQKeySequenceEditFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQKeySequenceEditHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQKeySequenceEditLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQKeySequenceEditMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQKeySequenceEditPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQKeySequenceEditSetVisible(this, this->objectName().toUtf8().data(), visible)) { QKeySequenceEdit::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQKeySequenceEditShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQKeySequenceEditChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQKeySequenceEditCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQKeySequenceEditContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQKeySequenceEditInitPainter(const_cast<MyQKeySequenceEdit*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQKeySequenceEditInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQKeySequenceEditMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQKeySequenceEditMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQKeySequenceEditMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQKeySequenceEditMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQKeySequenceEditResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQKeySequenceEditTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQKeySequenceEditWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQKeySequenceEditChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQKeySequenceEditCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QKeySequenceEdit_KeySequence(void* ptr){
	return new QKeySequence(static_cast<QKeySequenceEdit*>(ptr)->keySequence());
}

void QKeySequenceEdit_SetKeySequence(void* ptr, void* keySequence){
	QMetaObject::invokeMethod(static_cast<QKeySequenceEdit*>(ptr), "setKeySequence", Q_ARG(QKeySequence, *static_cast<QKeySequence*>(keySequence)));
}

void* QKeySequenceEdit_NewQKeySequenceEdit(void* parent){
	return new MyQKeySequenceEdit(static_cast<QWidget*>(parent));
}

void* QKeySequenceEdit_NewQKeySequenceEdit2(void* keySequence, void* parent){
	return new MyQKeySequenceEdit(*static_cast<QKeySequence*>(keySequence), static_cast<QWidget*>(parent));
}

void QKeySequenceEdit_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QKeySequenceEdit*>(ptr), "clear");
}

void QKeySequenceEdit_ConnectEditingFinished(void* ptr){
	QObject::connect(static_cast<QKeySequenceEdit*>(ptr), static_cast<void (QKeySequenceEdit::*)()>(&QKeySequenceEdit::editingFinished), static_cast<MyQKeySequenceEdit*>(ptr), static_cast<void (MyQKeySequenceEdit::*)()>(&MyQKeySequenceEdit::Signal_EditingFinished));;
}

void QKeySequenceEdit_DisconnectEditingFinished(void* ptr){
	QObject::disconnect(static_cast<QKeySequenceEdit*>(ptr), static_cast<void (QKeySequenceEdit::*)()>(&QKeySequenceEdit::editingFinished), static_cast<MyQKeySequenceEdit*>(ptr), static_cast<void (MyQKeySequenceEdit::*)()>(&MyQKeySequenceEdit::Signal_EditingFinished));;
}

void QKeySequenceEdit_EditingFinished(void* ptr){
	static_cast<QKeySequenceEdit*>(ptr)->editingFinished();
}

int QKeySequenceEdit_Event(void* ptr, void* e){
	return static_cast<QKeySequenceEdit*>(ptr)->event(static_cast<QEvent*>(e));
}

void QKeySequenceEdit_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQKeySequenceEdit*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QKeySequenceEdit_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QKeySequenceEdit_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQKeySequenceEdit*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QKeySequenceEdit_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QKeySequenceEdit_ConnectKeySequenceChanged(void* ptr){
	QObject::connect(static_cast<QKeySequenceEdit*>(ptr), static_cast<void (QKeySequenceEdit::*)(const QKeySequence &)>(&QKeySequenceEdit::keySequenceChanged), static_cast<MyQKeySequenceEdit*>(ptr), static_cast<void (MyQKeySequenceEdit::*)(const QKeySequence &)>(&MyQKeySequenceEdit::Signal_KeySequenceChanged));;
}

void QKeySequenceEdit_DisconnectKeySequenceChanged(void* ptr){
	QObject::disconnect(static_cast<QKeySequenceEdit*>(ptr), static_cast<void (QKeySequenceEdit::*)(const QKeySequence &)>(&QKeySequenceEdit::keySequenceChanged), static_cast<MyQKeySequenceEdit*>(ptr), static_cast<void (MyQKeySequenceEdit::*)(const QKeySequence &)>(&MyQKeySequenceEdit::Signal_KeySequenceChanged));;
}

void QKeySequenceEdit_KeySequenceChanged(void* ptr, void* keySequence){
	static_cast<QKeySequenceEdit*>(ptr)->keySequenceChanged(*static_cast<QKeySequence*>(keySequence));
}

void QKeySequenceEdit_TimerEvent(void* ptr, void* e){
	static_cast<MyQKeySequenceEdit*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QKeySequenceEdit_TimerEventDefault(void* ptr, void* e){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::timerEvent(static_cast<QTimerEvent*>(e));
}

void QKeySequenceEdit_DestroyQKeySequenceEdit(void* ptr){
	static_cast<QKeySequenceEdit*>(ptr)->~QKeySequenceEdit();
}

void QKeySequenceEdit_ActionEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QKeySequenceEdit_ActionEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::actionEvent(static_cast<QActionEvent*>(event));
}

void QKeySequenceEdit_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QKeySequenceEdit_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QKeySequenceEdit_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QKeySequenceEdit_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QKeySequenceEdit_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QKeySequenceEdit_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QKeySequenceEdit_DropEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QKeySequenceEdit_DropEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::dropEvent(static_cast<QDropEvent*>(event));
}

void QKeySequenceEdit_EnterEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QKeySequenceEdit_EnterEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::enterEvent(static_cast<QEvent*>(event));
}

void QKeySequenceEdit_FocusInEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QKeySequenceEdit_FocusInEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QKeySequenceEdit_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QKeySequenceEdit_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QKeySequenceEdit_HideEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QKeySequenceEdit_HideEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::hideEvent(static_cast<QHideEvent*>(event));
}

void QKeySequenceEdit_LeaveEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QKeySequenceEdit_LeaveEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::leaveEvent(static_cast<QEvent*>(event));
}

void QKeySequenceEdit_MoveEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QKeySequenceEdit_MoveEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::moveEvent(static_cast<QMoveEvent*>(event));
}

void QKeySequenceEdit_PaintEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QKeySequenceEdit_PaintEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::paintEvent(static_cast<QPaintEvent*>(event));
}

void QKeySequenceEdit_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQKeySequenceEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QKeySequenceEdit_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QKeySequenceEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QKeySequenceEdit_ShowEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QKeySequenceEdit_ShowEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::showEvent(static_cast<QShowEvent*>(event));
}

void QKeySequenceEdit_ChangeEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QKeySequenceEdit_ChangeEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::changeEvent(static_cast<QEvent*>(event));
}

void QKeySequenceEdit_CloseEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QKeySequenceEdit_CloseEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::closeEvent(static_cast<QCloseEvent*>(event));
}

void QKeySequenceEdit_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QKeySequenceEdit_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QKeySequenceEdit_InitPainter(void* ptr, void* painter){
	static_cast<MyQKeySequenceEdit*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QKeySequenceEdit_InitPainterDefault(void* ptr, void* painter){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::initPainter(static_cast<QPainter*>(painter));
}

void QKeySequenceEdit_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QKeySequenceEdit_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QKeySequenceEdit_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QKeySequenceEdit_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QKeySequenceEdit_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QKeySequenceEdit_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QKeySequenceEdit_MousePressEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QKeySequenceEdit_MousePressEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QKeySequenceEdit_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QKeySequenceEdit_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QKeySequenceEdit_ResizeEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QKeySequenceEdit_ResizeEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QKeySequenceEdit_TabletEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QKeySequenceEdit_TabletEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QKeySequenceEdit_WheelEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QKeySequenceEdit_WheelEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QKeySequenceEdit_ChildEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QKeySequenceEdit_ChildEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::childEvent(static_cast<QChildEvent*>(event));
}

void QKeySequenceEdit_CustomEvent(void* ptr, void* event){
	static_cast<MyQKeySequenceEdit*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QKeySequenceEdit_CustomEventDefault(void* ptr, void* event){
	static_cast<QKeySequenceEdit*>(ptr)->QKeySequenceEdit::customEvent(static_cast<QEvent*>(event));
}

class MyQLCDNumber: public QLCDNumber {
public:
	MyQLCDNumber(QWidget *parent) : QLCDNumber(parent) {};
	void Signal_Overflow() { callbackQLCDNumberOverflow(this, this->objectName().toUtf8().data()); };
	void paintEvent(QPaintEvent * v) { callbackQLCDNumberPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void changeEvent(QEvent * ev) { callbackQLCDNumberChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQLCDNumberActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQLCDNumberDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQLCDNumberDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQLCDNumberDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQLCDNumberDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQLCDNumberEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQLCDNumberFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQLCDNumberFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQLCDNumberHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQLCDNumberLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQLCDNumberMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQLCDNumberSetVisible(this, this->objectName().toUtf8().data(), visible)) { QLCDNumber::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQLCDNumberShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQLCDNumberCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQLCDNumberContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQLCDNumberInitPainter(const_cast<MyQLCDNumber*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQLCDNumberInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQLCDNumberKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQLCDNumberKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQLCDNumberMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQLCDNumberMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQLCDNumberMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQLCDNumberMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQLCDNumberResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQLCDNumberTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQLCDNumberWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQLCDNumberTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQLCDNumberChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQLCDNumberCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QLCDNumber_IntValue(void* ptr){
	return static_cast<QLCDNumber*>(ptr)->intValue();
}

int QLCDNumber_Mode(void* ptr){
	return static_cast<QLCDNumber*>(ptr)->mode();
}

int QLCDNumber_SegmentStyle(void* ptr){
	return static_cast<QLCDNumber*>(ptr)->segmentStyle();
}

void QLCDNumber_SetMode(void* ptr, int v){
	static_cast<QLCDNumber*>(ptr)->setMode(static_cast<QLCDNumber::Mode>(v));
}

void QLCDNumber_SetSegmentStyle(void* ptr, int v){
	static_cast<QLCDNumber*>(ptr)->setSegmentStyle(static_cast<QLCDNumber::SegmentStyle>(v));
}

void QLCDNumber_SetSmallDecimalPoint(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QLCDNumber*>(ptr), "setSmallDecimalPoint", Q_ARG(bool, v != 0));
}

int QLCDNumber_SmallDecimalPoint(void* ptr){
	return static_cast<QLCDNumber*>(ptr)->smallDecimalPoint();
}

void* QLCDNumber_NewQLCDNumber(void* parent){
	return new MyQLCDNumber(static_cast<QWidget*>(parent));
}

int QLCDNumber_CheckOverflow2(void* ptr, int num){
	return static_cast<QLCDNumber*>(ptr)->checkOverflow(num);
}

int QLCDNumber_DigitCount(void* ptr){
	return static_cast<QLCDNumber*>(ptr)->digitCount();
}

void QLCDNumber_Display(void* ptr, char* s){
	QMetaObject::invokeMethod(static_cast<QLCDNumber*>(ptr), "display", Q_ARG(QString, QString(s)));
}

void QLCDNumber_Display3(void* ptr, int num){
	QMetaObject::invokeMethod(static_cast<QLCDNumber*>(ptr), "display", Q_ARG(int, num));
}

int QLCDNumber_Event(void* ptr, void* e){
	return static_cast<QLCDNumber*>(ptr)->event(static_cast<QEvent*>(e));
}

void QLCDNumber_ConnectOverflow(void* ptr){
	QObject::connect(static_cast<QLCDNumber*>(ptr), static_cast<void (QLCDNumber::*)()>(&QLCDNumber::overflow), static_cast<MyQLCDNumber*>(ptr), static_cast<void (MyQLCDNumber::*)()>(&MyQLCDNumber::Signal_Overflow));;
}

void QLCDNumber_DisconnectOverflow(void* ptr){
	QObject::disconnect(static_cast<QLCDNumber*>(ptr), static_cast<void (QLCDNumber::*)()>(&QLCDNumber::overflow), static_cast<MyQLCDNumber*>(ptr), static_cast<void (MyQLCDNumber::*)()>(&MyQLCDNumber::Signal_Overflow));;
}

void QLCDNumber_Overflow(void* ptr){
	static_cast<QLCDNumber*>(ptr)->overflow();
}

void QLCDNumber_PaintEvent(void* ptr, void* v){
	static_cast<MyQLCDNumber*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QLCDNumber_PaintEventDefault(void* ptr, void* v){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::paintEvent(static_cast<QPaintEvent*>(v));
}

void QLCDNumber_SetBinMode(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLCDNumber*>(ptr), "setBinMode");
}

void QLCDNumber_SetDecMode(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLCDNumber*>(ptr), "setDecMode");
}

void QLCDNumber_SetDigitCount(void* ptr, int numDigits){
	static_cast<QLCDNumber*>(ptr)->setDigitCount(numDigits);
}

void QLCDNumber_SetHexMode(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLCDNumber*>(ptr), "setHexMode");
}

void QLCDNumber_SetOctMode(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLCDNumber*>(ptr), "setOctMode");
}

void* QLCDNumber_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLCDNumber*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QLCDNumber*>(ptr)->sizeHint()).height());
}

void QLCDNumber_DestroyQLCDNumber(void* ptr){
	static_cast<QLCDNumber*>(ptr)->~QLCDNumber();
}

void QLCDNumber_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQLCDNumber*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QLCDNumber_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::changeEvent(static_cast<QEvent*>(ev));
}

void QLCDNumber_ActionEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QLCDNumber_ActionEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::actionEvent(static_cast<QActionEvent*>(event));
}

void QLCDNumber_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QLCDNumber_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QLCDNumber_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QLCDNumber_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QLCDNumber_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QLCDNumber_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QLCDNumber_DropEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QLCDNumber_DropEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::dropEvent(static_cast<QDropEvent*>(event));
}

void QLCDNumber_EnterEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QLCDNumber_EnterEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::enterEvent(static_cast<QEvent*>(event));
}

void QLCDNumber_FocusInEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QLCDNumber_FocusInEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QLCDNumber_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QLCDNumber_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QLCDNumber_HideEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QLCDNumber_HideEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::hideEvent(static_cast<QHideEvent*>(event));
}

void QLCDNumber_LeaveEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QLCDNumber_LeaveEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::leaveEvent(static_cast<QEvent*>(event));
}

void QLCDNumber_MoveEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QLCDNumber_MoveEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::moveEvent(static_cast<QMoveEvent*>(event));
}

void QLCDNumber_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQLCDNumber*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QLCDNumber_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QLCDNumber*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QLCDNumber_ShowEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QLCDNumber_ShowEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::showEvent(static_cast<QShowEvent*>(event));
}

void QLCDNumber_CloseEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QLCDNumber_CloseEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::closeEvent(static_cast<QCloseEvent*>(event));
}

void QLCDNumber_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QLCDNumber_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QLCDNumber_InitPainter(void* ptr, void* painter){
	static_cast<MyQLCDNumber*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QLCDNumber_InitPainterDefault(void* ptr, void* painter){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::initPainter(static_cast<QPainter*>(painter));
}

void QLCDNumber_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QLCDNumber_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QLCDNumber_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QLCDNumber_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QLCDNumber_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QLCDNumber_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QLCDNumber_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QLCDNumber_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QLCDNumber_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QLCDNumber_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QLCDNumber_MousePressEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QLCDNumber_MousePressEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QLCDNumber_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QLCDNumber_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QLCDNumber_ResizeEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QLCDNumber_ResizeEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QLCDNumber_TabletEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QLCDNumber_TabletEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QLCDNumber_WheelEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QLCDNumber_WheelEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QLCDNumber_TimerEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QLCDNumber_TimerEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::timerEvent(static_cast<QTimerEvent*>(event));
}

void QLCDNumber_ChildEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QLCDNumber_ChildEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::childEvent(static_cast<QChildEvent*>(event));
}

void QLCDNumber_CustomEvent(void* ptr, void* event){
	static_cast<MyQLCDNumber*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QLCDNumber_CustomEventDefault(void* ptr, void* event){
	static_cast<QLCDNumber*>(ptr)->QLCDNumber::customEvent(static_cast<QEvent*>(event));
}

class MyQLabel: public QLabel {
public:
	MyQLabel(QWidget *parent, Qt::WindowFlags f) : QLabel(parent, f) {};
	MyQLabel(const QString &text, QWidget *parent, Qt::WindowFlags f) : QLabel(text, parent, f) {};
	void changeEvent(QEvent * ev) { callbackQLabelChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void contextMenuEvent(QContextMenuEvent * ev) { callbackQLabelContextMenuEvent(this, this->objectName().toUtf8().data(), ev); };
	void focusInEvent(QFocusEvent * ev) { callbackQLabelFocusInEvent(this, this->objectName().toUtf8().data(), ev); };
	void focusOutEvent(QFocusEvent * ev) { callbackQLabelFocusOutEvent(this, this->objectName().toUtf8().data(), ev); };
	void keyPressEvent(QKeyEvent * ev) { callbackQLabelKeyPressEvent(this, this->objectName().toUtf8().data(), ev); };
	void Signal_LinkActivated(const QString & link) { callbackQLabelLinkActivated(this, this->objectName().toUtf8().data(), link.toUtf8().data()); };
	void Signal_LinkHovered(const QString & link) { callbackQLabelLinkHovered(this, this->objectName().toUtf8().data(), link.toUtf8().data()); };
	void mouseMoveEvent(QMouseEvent * ev) { callbackQLabelMouseMoveEvent(this, this->objectName().toUtf8().data(), ev); };
	void mousePressEvent(QMouseEvent * ev) { callbackQLabelMousePressEvent(this, this->objectName().toUtf8().data(), ev); };
	void mouseReleaseEvent(QMouseEvent * ev) { callbackQLabelMouseReleaseEvent(this, this->objectName().toUtf8().data(), ev); };
	void paintEvent(QPaintEvent * v) { callbackQLabelPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void actionEvent(QActionEvent * event) { callbackQLabelActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQLabelDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQLabelDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQLabelDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQLabelDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQLabelEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQLabelHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQLabelLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQLabelMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQLabelSetVisible(this, this->objectName().toUtf8().data(), visible)) { QLabel::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQLabelShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQLabelCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQLabelInitPainter(const_cast<MyQLabel*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQLabelInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQLabelKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQLabelMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQLabelResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQLabelTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQLabelWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQLabelTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQLabelChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQLabelCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QLabel_Alignment(void* ptr){
	return static_cast<QLabel*>(ptr)->alignment();
}

int QLabel_HasScaledContents(void* ptr){
	return static_cast<QLabel*>(ptr)->hasScaledContents();
}

int QLabel_HasSelectedText(void* ptr){
	return static_cast<QLabel*>(ptr)->hasSelectedText();
}

int QLabel_Indent(void* ptr){
	return static_cast<QLabel*>(ptr)->indent();
}

int QLabel_Margin(void* ptr){
	return static_cast<QLabel*>(ptr)->margin();
}

int QLabel_OpenExternalLinks(void* ptr){
	return static_cast<QLabel*>(ptr)->openExternalLinks();
}

void* QLabel_Pixmap(void* ptr){
	return const_cast<QPixmap*>(static_cast<QLabel*>(ptr)->pixmap());
}

char* QLabel_SelectedText(void* ptr){
	return static_cast<QLabel*>(ptr)->selectedText().toUtf8().data();
}

void QLabel_SetAlignment(void* ptr, int v){
	static_cast<QLabel*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(v));
}

void QLabel_SetIndent(void* ptr, int v){
	static_cast<QLabel*>(ptr)->setIndent(v);
}

void QLabel_SetMargin(void* ptr, int v){
	static_cast<QLabel*>(ptr)->setMargin(v);
}

void QLabel_SetOpenExternalLinks(void* ptr, int open){
	static_cast<QLabel*>(ptr)->setOpenExternalLinks(open != 0);
}

void QLabel_SetPixmap(void* ptr, void* v){
	QMetaObject::invokeMethod(static_cast<QLabel*>(ptr), "setPixmap", Q_ARG(QPixmap, *static_cast<QPixmap*>(v)));
}

void QLabel_SetScaledContents(void* ptr, int v){
	static_cast<QLabel*>(ptr)->setScaledContents(v != 0);
}

void QLabel_SetText(void* ptr, char* v){
	QMetaObject::invokeMethod(static_cast<QLabel*>(ptr), "setText", Q_ARG(QString, QString(v)));
}

void QLabel_SetTextFormat(void* ptr, int v){
	static_cast<QLabel*>(ptr)->setTextFormat(static_cast<Qt::TextFormat>(v));
}

void QLabel_SetTextInteractionFlags(void* ptr, int flags){
	static_cast<QLabel*>(ptr)->setTextInteractionFlags(static_cast<Qt::TextInteractionFlag>(flags));
}

void QLabel_SetWordWrap(void* ptr, int on){
	static_cast<QLabel*>(ptr)->setWordWrap(on != 0);
}

char* QLabel_Text(void* ptr){
	return static_cast<QLabel*>(ptr)->text().toUtf8().data();
}

int QLabel_TextFormat(void* ptr){
	return static_cast<QLabel*>(ptr)->textFormat();
}

int QLabel_TextInteractionFlags(void* ptr){
	return static_cast<QLabel*>(ptr)->textInteractionFlags();
}

int QLabel_WordWrap(void* ptr){
	return static_cast<QLabel*>(ptr)->wordWrap();
}

void* QLabel_NewQLabel(void* parent, int f){
	return new MyQLabel(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

void* QLabel_NewQLabel2(char* text, void* parent, int f){
	return new MyQLabel(QString(text), static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

void* QLabel_Buddy(void* ptr){
	return static_cast<QLabel*>(ptr)->buddy();
}

void QLabel_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQLabel*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QLabel_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QLabel*>(ptr)->QLabel::changeEvent(static_cast<QEvent*>(ev));
}

void QLabel_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLabel*>(ptr), "clear");
}

void QLabel_ContextMenuEvent(void* ptr, void* ev){
	static_cast<MyQLabel*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(ev));
}

void QLabel_ContextMenuEventDefault(void* ptr, void* ev){
	static_cast<QLabel*>(ptr)->QLabel::contextMenuEvent(static_cast<QContextMenuEvent*>(ev));
}

int QLabel_Event(void* ptr, void* e){
	return static_cast<QLabel*>(ptr)->event(static_cast<QEvent*>(e));
}

void QLabel_FocusInEvent(void* ptr, void* ev){
	static_cast<MyQLabel*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(ev));
}

void QLabel_FocusInEventDefault(void* ptr, void* ev){
	static_cast<QLabel*>(ptr)->QLabel::focusInEvent(static_cast<QFocusEvent*>(ev));
}

int QLabel_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QLabel*>(ptr)->focusNextPrevChild(next != 0);
}

void QLabel_FocusOutEvent(void* ptr, void* ev){
	static_cast<MyQLabel*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(ev));
}

void QLabel_FocusOutEventDefault(void* ptr, void* ev){
	static_cast<QLabel*>(ptr)->QLabel::focusOutEvent(static_cast<QFocusEvent*>(ev));
}

int QLabel_HeightForWidth(void* ptr, int w){
	return static_cast<QLabel*>(ptr)->heightForWidth(w);
}

void QLabel_KeyPressEvent(void* ptr, void* ev){
	static_cast<MyQLabel*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QLabel_KeyPressEventDefault(void* ptr, void* ev){
	static_cast<QLabel*>(ptr)->QLabel::keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QLabel_ConnectLinkActivated(void* ptr){
	QObject::connect(static_cast<QLabel*>(ptr), static_cast<void (QLabel::*)(const QString &)>(&QLabel::linkActivated), static_cast<MyQLabel*>(ptr), static_cast<void (MyQLabel::*)(const QString &)>(&MyQLabel::Signal_LinkActivated));;
}

void QLabel_DisconnectLinkActivated(void* ptr){
	QObject::disconnect(static_cast<QLabel*>(ptr), static_cast<void (QLabel::*)(const QString &)>(&QLabel::linkActivated), static_cast<MyQLabel*>(ptr), static_cast<void (MyQLabel::*)(const QString &)>(&MyQLabel::Signal_LinkActivated));;
}

void QLabel_LinkActivated(void* ptr, char* link){
	static_cast<QLabel*>(ptr)->linkActivated(QString(link));
}

void QLabel_ConnectLinkHovered(void* ptr){
	QObject::connect(static_cast<QLabel*>(ptr), static_cast<void (QLabel::*)(const QString &)>(&QLabel::linkHovered), static_cast<MyQLabel*>(ptr), static_cast<void (MyQLabel::*)(const QString &)>(&MyQLabel::Signal_LinkHovered));;
}

void QLabel_DisconnectLinkHovered(void* ptr){
	QObject::disconnect(static_cast<QLabel*>(ptr), static_cast<void (QLabel::*)(const QString &)>(&QLabel::linkHovered), static_cast<MyQLabel*>(ptr), static_cast<void (MyQLabel::*)(const QString &)>(&MyQLabel::Signal_LinkHovered));;
}

void QLabel_LinkHovered(void* ptr, char* link){
	static_cast<QLabel*>(ptr)->linkHovered(QString(link));
}

void* QLabel_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLabel*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QLabel*>(ptr)->minimumSizeHint()).height());
}

void QLabel_MouseMoveEvent(void* ptr, void* ev){
	static_cast<MyQLabel*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(ev));
}

void QLabel_MouseMoveEventDefault(void* ptr, void* ev){
	static_cast<QLabel*>(ptr)->QLabel::mouseMoveEvent(static_cast<QMouseEvent*>(ev));
}

void QLabel_MousePressEvent(void* ptr, void* ev){
	static_cast<MyQLabel*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(ev));
}

void QLabel_MousePressEventDefault(void* ptr, void* ev){
	static_cast<QLabel*>(ptr)->QLabel::mousePressEvent(static_cast<QMouseEvent*>(ev));
}

void QLabel_MouseReleaseEvent(void* ptr, void* ev){
	static_cast<MyQLabel*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
}

void QLabel_MouseReleaseEventDefault(void* ptr, void* ev){
	static_cast<QLabel*>(ptr)->QLabel::mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
}

void* QLabel_Movie(void* ptr){
	return static_cast<QLabel*>(ptr)->movie();
}

void QLabel_PaintEvent(void* ptr, void* v){
	static_cast<MyQLabel*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QLabel_PaintEventDefault(void* ptr, void* v){
	static_cast<QLabel*>(ptr)->QLabel::paintEvent(static_cast<QPaintEvent*>(v));
}

void* QLabel_Picture(void* ptr){
	return const_cast<QPicture*>(static_cast<QLabel*>(ptr)->picture());
}

int QLabel_SelectionStart(void* ptr){
	return static_cast<QLabel*>(ptr)->selectionStart();
}

void QLabel_SetBuddy(void* ptr, void* buddy){
	static_cast<QLabel*>(ptr)->setBuddy(static_cast<QWidget*>(buddy));
}

void QLabel_SetMovie(void* ptr, void* movie){
	QMetaObject::invokeMethod(static_cast<QLabel*>(ptr), "setMovie", Q_ARG(QMovie*, static_cast<QMovie*>(movie)));
}

void QLabel_SetNum(void* ptr, int num){
	QMetaObject::invokeMethod(static_cast<QLabel*>(ptr), "setNum", Q_ARG(int, num));
}

void QLabel_SetPicture(void* ptr, void* picture){
	QMetaObject::invokeMethod(static_cast<QLabel*>(ptr), "setPicture", Q_ARG(QPicture, *static_cast<QPicture*>(picture)));
}

void QLabel_SetSelection(void* ptr, int start, int length){
	static_cast<QLabel*>(ptr)->setSelection(start, length);
}

void* QLabel_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLabel*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QLabel*>(ptr)->sizeHint()).height());
}

void QLabel_DestroyQLabel(void* ptr){
	static_cast<QLabel*>(ptr)->~QLabel();
}

void QLabel_ActionEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QLabel_ActionEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::actionEvent(static_cast<QActionEvent*>(event));
}

void QLabel_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QLabel_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QLabel_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QLabel_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QLabel_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QLabel_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QLabel_DropEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QLabel_DropEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::dropEvent(static_cast<QDropEvent*>(event));
}

void QLabel_EnterEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QLabel_EnterEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::enterEvent(static_cast<QEvent*>(event));
}

void QLabel_HideEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QLabel_HideEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::hideEvent(static_cast<QHideEvent*>(event));
}

void QLabel_LeaveEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QLabel_LeaveEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::leaveEvent(static_cast<QEvent*>(event));
}

void QLabel_MoveEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QLabel_MoveEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::moveEvent(static_cast<QMoveEvent*>(event));
}

void QLabel_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQLabel*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QLabel_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QLabel*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QLabel_ShowEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QLabel_ShowEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::showEvent(static_cast<QShowEvent*>(event));
}

void QLabel_CloseEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QLabel_CloseEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::closeEvent(static_cast<QCloseEvent*>(event));
}

void QLabel_InitPainter(void* ptr, void* painter){
	static_cast<MyQLabel*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QLabel_InitPainterDefault(void* ptr, void* painter){
	static_cast<QLabel*>(ptr)->QLabel::initPainter(static_cast<QPainter*>(painter));
}

void QLabel_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QLabel_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QLabel_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QLabel_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QLabel_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QLabel_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QLabel_ResizeEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QLabel_ResizeEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QLabel_TabletEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QLabel_TabletEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QLabel_WheelEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QLabel_WheelEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QLabel_TimerEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QLabel_TimerEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::timerEvent(static_cast<QTimerEvent*>(event));
}

void QLabel_ChildEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QLabel_ChildEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::childEvent(static_cast<QChildEvent*>(event));
}

void QLabel_CustomEvent(void* ptr, void* event){
	static_cast<MyQLabel*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QLabel_CustomEventDefault(void* ptr, void* event){
	static_cast<QLabel*>(ptr)->QLabel::customEvent(static_cast<QEvent*>(event));
}

class MyQLayout: public QLayout {
public:
	void childEvent(QChildEvent * e) { callbackQLayoutChildEvent(this, this->objectName().toUtf8().data(), e); };
	void invalidate() { callbackQLayoutInvalidate(this, this->objectName().toUtf8().data()); };
	void setGeometry(const QRect & r) { callbackQLayoutSetGeometry(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(r).x(), static_cast<QRect>(r).y(), static_cast<QRect>(r).width(), static_cast<QRect>(r).height())); };
	void timerEvent(QTimerEvent * event) { callbackQLayoutTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQLayoutCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QLayout_SetSizeConstraint(void* ptr, int v){
	static_cast<QLayout*>(ptr)->setSizeConstraint(static_cast<QLayout::SizeConstraint>(v));
}

void QLayout_SetSpacing(void* ptr, int v){
	static_cast<QLayout*>(ptr)->setSpacing(v);
}

int QLayout_SizeConstraint(void* ptr){
	return static_cast<QLayout*>(ptr)->sizeConstraint();
}

int QLayout_Spacing(void* ptr){
	return static_cast<QLayout*>(ptr)->spacing();
}

int QLayout_Activate(void* ptr){
	return static_cast<QLayout*>(ptr)->activate();
}

void QLayout_AddItem(void* ptr, void* item){
	static_cast<QLayout*>(ptr)->addItem(static_cast<QLayoutItem*>(item));
}

void QLayout_AddWidget(void* ptr, void* w){
	static_cast<QLayout*>(ptr)->addWidget(static_cast<QWidget*>(w));
}

void QLayout_ChildEvent(void* ptr, void* e){
	static_cast<MyQLayout*>(ptr)->childEvent(static_cast<QChildEvent*>(e));
}

void QLayout_ChildEventDefault(void* ptr, void* e){
	static_cast<QLayout*>(ptr)->QLayout::childEvent(static_cast<QChildEvent*>(e));
}

void* QLayout_QLayout_ClosestAcceptableSize(void* widget, void* size){
	return new QSize(static_cast<QSize>(QLayout::closestAcceptableSize(static_cast<QWidget*>(widget), *static_cast<QSize*>(size))).width(), static_cast<QSize>(QLayout::closestAcceptableSize(static_cast<QWidget*>(widget), *static_cast<QSize*>(size))).height());
}

void* QLayout_ContentsRect(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QLayout*>(ptr)->contentsRect()).x(), static_cast<QRect>(static_cast<QLayout*>(ptr)->contentsRect()).y(), static_cast<QRect>(static_cast<QLayout*>(ptr)->contentsRect()).width(), static_cast<QRect>(static_cast<QLayout*>(ptr)->contentsRect()).height());
}

int QLayout_ControlTypes(void* ptr){
	return static_cast<QLayout*>(ptr)->controlTypes();
}

int QLayout_Count(void* ptr){
	return static_cast<QLayout*>(ptr)->count();
}

int QLayout_ExpandingDirections(void* ptr){
	return static_cast<QLayout*>(ptr)->expandingDirections();
}

void* QLayout_Geometry(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QLayout*>(ptr)->geometry()).x(), static_cast<QRect>(static_cast<QLayout*>(ptr)->geometry()).y(), static_cast<QRect>(static_cast<QLayout*>(ptr)->geometry()).width(), static_cast<QRect>(static_cast<QLayout*>(ptr)->geometry()).height());
}

void QLayout_GetContentsMargins(void* ptr, int left, int top, int right, int bottom){
	static_cast<QLayout*>(ptr)->getContentsMargins(&left, &top, &right, &bottom);
}

int QLayout_IndexOf(void* ptr, void* widget){
	return static_cast<QLayout*>(ptr)->indexOf(static_cast<QWidget*>(widget));
}

void QLayout_Invalidate(void* ptr){
	static_cast<MyQLayout*>(ptr)->invalidate();
}

void QLayout_InvalidateDefault(void* ptr){
	static_cast<QLayout*>(ptr)->QLayout::invalidate();
}

int QLayout_IsEmpty(void* ptr){
	return static_cast<QLayout*>(ptr)->isEmpty();
}

int QLayout_IsEnabled(void* ptr){
	return static_cast<QLayout*>(ptr)->isEnabled();
}

void* QLayout_ItemAt(void* ptr, int index){
	return static_cast<QLayout*>(ptr)->itemAt(index);
}

void* QLayout_Layout(void* ptr){
	return static_cast<QLayout*>(ptr)->layout();
}

void* QLayout_MaximumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLayout*>(ptr)->maximumSize()).width(), static_cast<QSize>(static_cast<QLayout*>(ptr)->maximumSize()).height());
}

void* QLayout_MenuBar(void* ptr){
	return static_cast<QLayout*>(ptr)->menuBar();
}

void* QLayout_MinimumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLayout*>(ptr)->minimumSize()).width(), static_cast<QSize>(static_cast<QLayout*>(ptr)->minimumSize()).height());
}

void* QLayout_ParentWidget(void* ptr){
	return static_cast<QLayout*>(ptr)->parentWidget();
}

void QLayout_RemoveItem(void* ptr, void* item){
	static_cast<QLayout*>(ptr)->removeItem(static_cast<QLayoutItem*>(item));
}

void QLayout_RemoveWidget(void* ptr, void* widget){
	static_cast<QLayout*>(ptr)->removeWidget(static_cast<QWidget*>(widget));
}

void* QLayout_ReplaceWidget(void* ptr, void* from, void* to, int options){
	return static_cast<QLayout*>(ptr)->replaceWidget(static_cast<QWidget*>(from), static_cast<QWidget*>(to), static_cast<Qt::FindChildOption>(options));
}

int QLayout_SetAlignment2(void* ptr, void* l, int alignment){
	return static_cast<QLayout*>(ptr)->setAlignment(static_cast<QLayout*>(l), static_cast<Qt::AlignmentFlag>(alignment));
}

int QLayout_SetAlignment(void* ptr, void* w, int alignment){
	return static_cast<QLayout*>(ptr)->setAlignment(static_cast<QWidget*>(w), static_cast<Qt::AlignmentFlag>(alignment));
}

void QLayout_SetContentsMargins2(void* ptr, void* margins){
	static_cast<QLayout*>(ptr)->setContentsMargins(*static_cast<QMargins*>(margins));
}

void QLayout_SetContentsMargins(void* ptr, int left, int top, int right, int bottom){
	static_cast<QLayout*>(ptr)->setContentsMargins(left, top, right, bottom);
}

void QLayout_SetEnabled(void* ptr, int enable){
	static_cast<QLayout*>(ptr)->setEnabled(enable != 0);
}

void QLayout_SetGeometry(void* ptr, void* r){
	static_cast<MyQLayout*>(ptr)->setGeometry(*static_cast<QRect*>(r));
}

void QLayout_SetGeometryDefault(void* ptr, void* r){
	static_cast<QLayout*>(ptr)->QLayout::setGeometry(*static_cast<QRect*>(r));
}

void QLayout_SetMenuBar(void* ptr, void* widget){
	static_cast<QLayout*>(ptr)->setMenuBar(static_cast<QWidget*>(widget));
}

void* QLayout_TakeAt(void* ptr, int index){
	return static_cast<QLayout*>(ptr)->takeAt(index);
}

void QLayout_Update(void* ptr){
	static_cast<QLayout*>(ptr)->update();
}

void QLayout_TimerEvent(void* ptr, void* event){
	static_cast<MyQLayout*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QLayout_TimerEventDefault(void* ptr, void* event){
	static_cast<QLayout*>(ptr)->QLayout::timerEvent(static_cast<QTimerEvent*>(event));
}

void QLayout_CustomEvent(void* ptr, void* event){
	static_cast<MyQLayout*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QLayout_CustomEventDefault(void* ptr, void* event){
	static_cast<QLayout*>(ptr)->QLayout::customEvent(static_cast<QEvent*>(event));
}

class MyQLayoutItem: public QLayoutItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	void invalidate() { callbackQLayoutItemInvalidate(this, this->objectNameAbs().toUtf8().data()); };
};

int QLayoutItem_Alignment(void* ptr){
	return static_cast<QLayoutItem*>(ptr)->alignment();
}

int QLayoutItem_ControlTypes(void* ptr){
	return static_cast<QLayoutItem*>(ptr)->controlTypes();
}

int QLayoutItem_ExpandingDirections(void* ptr){
	return static_cast<QLayoutItem*>(ptr)->expandingDirections();
}

void* QLayoutItem_Geometry(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QLayoutItem*>(ptr)->geometry()).x(), static_cast<QRect>(static_cast<QLayoutItem*>(ptr)->geometry()).y(), static_cast<QRect>(static_cast<QLayoutItem*>(ptr)->geometry()).width(), static_cast<QRect>(static_cast<QLayoutItem*>(ptr)->geometry()).height());
}

int QLayoutItem_HasHeightForWidth(void* ptr){
	return static_cast<QLayoutItem*>(ptr)->hasHeightForWidth();
}

int QLayoutItem_HeightForWidth(void* ptr, int w){
	return static_cast<QLayoutItem*>(ptr)->heightForWidth(w);
}

void QLayoutItem_Invalidate(void* ptr){
	static_cast<MyQLayoutItem*>(ptr)->invalidate();
}

void QLayoutItem_InvalidateDefault(void* ptr){
	static_cast<QLayoutItem*>(ptr)->QLayoutItem::invalidate();
}

int QLayoutItem_IsEmpty(void* ptr){
	return static_cast<QLayoutItem*>(ptr)->isEmpty();
}

void* QLayoutItem_Layout(void* ptr){
	return static_cast<QLayoutItem*>(ptr)->layout();
}

void* QLayoutItem_MaximumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLayoutItem*>(ptr)->maximumSize()).width(), static_cast<QSize>(static_cast<QLayoutItem*>(ptr)->maximumSize()).height());
}

int QLayoutItem_MinimumHeightForWidth(void* ptr, int w){
	return static_cast<QLayoutItem*>(ptr)->minimumHeightForWidth(w);
}

void* QLayoutItem_MinimumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLayoutItem*>(ptr)->minimumSize()).width(), static_cast<QSize>(static_cast<QLayoutItem*>(ptr)->minimumSize()).height());
}

void QLayoutItem_SetAlignment(void* ptr, int alignment){
	static_cast<QLayoutItem*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QLayoutItem_SetGeometry(void* ptr, void* r){
	static_cast<QLayoutItem*>(ptr)->setGeometry(*static_cast<QRect*>(r));
}

void* QLayoutItem_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLayoutItem*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QLayoutItem*>(ptr)->sizeHint()).height());
}

void* QLayoutItem_SpacerItem(void* ptr){
	return static_cast<QLayoutItem*>(ptr)->spacerItem();
}

void* QLayoutItem_Widget(void* ptr){
	return static_cast<QLayoutItem*>(ptr)->widget();
}

void QLayoutItem_DestroyQLayoutItem(void* ptr){
	static_cast<QLayoutItem*>(ptr)->~QLayoutItem();
}

char* QLayoutItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQLayoutItem*>(static_cast<QLayoutItem*>(ptr))) {
		return static_cast<MyQLayoutItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QLayoutItem_BASE").toUtf8().data();
}

void QLayoutItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQLayoutItem*>(static_cast<QLayoutItem*>(ptr))) {
		static_cast<MyQLayoutItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQLineEdit: public QLineEdit {
public:
	MyQLineEdit(QWidget *parent) : QLineEdit(parent) {};
	MyQLineEdit(const QString &contents, QWidget *parent) : QLineEdit(contents, parent) {};
	void changeEvent(QEvent * ev) { callbackQLineEditChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQLineEditContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_CursorPositionChanged(int old, int n) { callbackQLineEditCursorPositionChanged(this, this->objectName().toUtf8().data(), old, n); };
	void dragEnterEvent(QDragEnterEvent * e) { callbackQLineEditDragEnterEvent(this, this->objectName().toUtf8().data(), e); };
	void dragLeaveEvent(QDragLeaveEvent * e) { callbackQLineEditDragLeaveEvent(this, this->objectName().toUtf8().data(), e); };
	void dragMoveEvent(QDragMoveEvent * e) { callbackQLineEditDragMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void dropEvent(QDropEvent * e) { callbackQLineEditDropEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_EditingFinished() { callbackQLineEditEditingFinished(this, this->objectName().toUtf8().data()); };
	void focusInEvent(QFocusEvent * e) { callbackQLineEditFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQLineEditFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void inputMethodEvent(QInputMethodEvent * e) { callbackQLineEditInputMethodEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * event) { callbackQLineEditKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * e) { callbackQLineEditMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQLineEditMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQLineEditMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQLineEditMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * v) { callbackQLineEditPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_ReturnPressed() { callbackQLineEditReturnPressed(this, this->objectName().toUtf8().data()); };
	void Signal_SelectionChanged() { callbackQLineEditSelectionChanged(this, this->objectName().toUtf8().data()); };
	void Signal_TextChanged(const QString & text) { callbackQLineEditTextChanged(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void Signal_TextEdited(const QString & text) { callbackQLineEditTextEdited(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void actionEvent(QActionEvent * event) { callbackQLineEditActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQLineEditEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQLineEditHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQLineEditLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQLineEditMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQLineEditSetVisible(this, this->objectName().toUtf8().data(), visible)) { QLineEdit::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQLineEditShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQLineEditCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQLineEditInitPainter(const_cast<MyQLineEdit*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQLineEditKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQLineEditResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQLineEditTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQLineEditWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQLineEditTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQLineEditChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQLineEditCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QLineEdit_Alignment(void* ptr){
	return static_cast<QLineEdit*>(ptr)->alignment();
}

int QLineEdit_CursorMoveStyle(void* ptr){
	return static_cast<QLineEdit*>(ptr)->cursorMoveStyle();
}

int QLineEdit_CursorPosition(void* ptr){
	return static_cast<QLineEdit*>(ptr)->cursorPosition();
}

char* QLineEdit_DisplayText(void* ptr){
	return static_cast<QLineEdit*>(ptr)->displayText().toUtf8().data();
}

int QLineEdit_DragEnabled(void* ptr){
	return static_cast<QLineEdit*>(ptr)->dragEnabled();
}

int QLineEdit_EchoMode(void* ptr){
	return static_cast<QLineEdit*>(ptr)->echoMode();
}

int QLineEdit_HasAcceptableInput(void* ptr){
	return static_cast<QLineEdit*>(ptr)->hasAcceptableInput();
}

int QLineEdit_HasFrame(void* ptr){
	return static_cast<QLineEdit*>(ptr)->hasFrame();
}

int QLineEdit_HasSelectedText(void* ptr){
	return static_cast<QLineEdit*>(ptr)->hasSelectedText();
}

char* QLineEdit_InputMask(void* ptr){
	return static_cast<QLineEdit*>(ptr)->inputMask().toUtf8().data();
}

int QLineEdit_IsClearButtonEnabled(void* ptr){
	return static_cast<QLineEdit*>(ptr)->isClearButtonEnabled();
}

int QLineEdit_IsModified(void* ptr){
	return static_cast<QLineEdit*>(ptr)->isModified();
}

int QLineEdit_IsReadOnly(void* ptr){
	return static_cast<QLineEdit*>(ptr)->isReadOnly();
}

int QLineEdit_IsRedoAvailable(void* ptr){
	return static_cast<QLineEdit*>(ptr)->isRedoAvailable();
}

int QLineEdit_IsUndoAvailable(void* ptr){
	return static_cast<QLineEdit*>(ptr)->isUndoAvailable();
}

int QLineEdit_MaxLength(void* ptr){
	return static_cast<QLineEdit*>(ptr)->maxLength();
}

char* QLineEdit_PlaceholderText(void* ptr){
	return static_cast<QLineEdit*>(ptr)->placeholderText().toUtf8().data();
}

char* QLineEdit_SelectedText(void* ptr){
	return static_cast<QLineEdit*>(ptr)->selectedText().toUtf8().data();
}

void QLineEdit_SetAlignment(void* ptr, int flag){
	static_cast<QLineEdit*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(flag));
}

void QLineEdit_SetClearButtonEnabled(void* ptr, int enable){
	static_cast<QLineEdit*>(ptr)->setClearButtonEnabled(enable != 0);
}

void QLineEdit_SetCursorMoveStyle(void* ptr, int style){
	static_cast<QLineEdit*>(ptr)->setCursorMoveStyle(static_cast<Qt::CursorMoveStyle>(style));
}

void QLineEdit_SetCursorPosition(void* ptr, int v){
	static_cast<QLineEdit*>(ptr)->setCursorPosition(v);
}

void QLineEdit_SetDragEnabled(void* ptr, int b){
	static_cast<QLineEdit*>(ptr)->setDragEnabled(b != 0);
}

void QLineEdit_SetEchoMode(void* ptr, int v){
	static_cast<QLineEdit*>(ptr)->setEchoMode(static_cast<QLineEdit::EchoMode>(v));
}

void QLineEdit_SetFrame(void* ptr, int v){
	static_cast<QLineEdit*>(ptr)->setFrame(v != 0);
}

void QLineEdit_SetInputMask(void* ptr, char* inputMask){
	static_cast<QLineEdit*>(ptr)->setInputMask(QString(inputMask));
}

void QLineEdit_SetMaxLength(void* ptr, int v){
	static_cast<QLineEdit*>(ptr)->setMaxLength(v);
}

void QLineEdit_SetModified(void* ptr, int v){
	static_cast<QLineEdit*>(ptr)->setModified(v != 0);
}

void QLineEdit_SetPlaceholderText(void* ptr, char* v){
	static_cast<QLineEdit*>(ptr)->setPlaceholderText(QString(v));
}

void QLineEdit_SetReadOnly(void* ptr, int v){
	static_cast<QLineEdit*>(ptr)->setReadOnly(v != 0);
}

void QLineEdit_SetText(void* ptr, char* v){
	QMetaObject::invokeMethod(static_cast<QLineEdit*>(ptr), "setText", Q_ARG(QString, QString(v)));
}

char* QLineEdit_Text(void* ptr){
	return static_cast<QLineEdit*>(ptr)->text().toUtf8().data();
}

void* QLineEdit_NewQLineEdit(void* parent){
	return new MyQLineEdit(static_cast<QWidget*>(parent));
}

void* QLineEdit_NewQLineEdit2(char* contents, void* parent){
	return new MyQLineEdit(QString(contents), static_cast<QWidget*>(parent));
}

void* QLineEdit_AddAction2(void* ptr, void* icon, int position){
	return static_cast<QLineEdit*>(ptr)->addAction(*static_cast<QIcon*>(icon), static_cast<QLineEdit::ActionPosition>(position));
}

void QLineEdit_AddAction(void* ptr, void* action, int position){
	static_cast<QLineEdit*>(ptr)->addAction(static_cast<QAction*>(action), static_cast<QLineEdit::ActionPosition>(position));
}

void QLineEdit_Backspace(void* ptr){
	static_cast<QLineEdit*>(ptr)->backspace();
}

void QLineEdit_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQLineEdit*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QLineEdit_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QLineEdit*>(ptr)->QLineEdit::changeEvent(static_cast<QEvent*>(ev));
}

void QLineEdit_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLineEdit*>(ptr), "clear");
}

void* QLineEdit_Completer(void* ptr){
	return static_cast<QLineEdit*>(ptr)->completer();
}

void QLineEdit_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QLineEdit_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QLineEdit_Copy(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLineEdit*>(ptr), "copy");
}

void* QLineEdit_CreateStandardContextMenu(void* ptr){
	return static_cast<QLineEdit*>(ptr)->createStandardContextMenu();
}

void QLineEdit_CursorBackward(void* ptr, int mark, int steps){
	static_cast<QLineEdit*>(ptr)->cursorBackward(mark != 0, steps);
}

void QLineEdit_CursorForward(void* ptr, int mark, int steps){
	static_cast<QLineEdit*>(ptr)->cursorForward(mark != 0, steps);
}

int QLineEdit_CursorPositionAt(void* ptr, void* pos){
	return static_cast<QLineEdit*>(ptr)->cursorPositionAt(*static_cast<QPoint*>(pos));
}

void QLineEdit_ConnectCursorPositionChanged(void* ptr){
	QObject::connect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)(int, int)>(&QLineEdit::cursorPositionChanged), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)(int, int)>(&MyQLineEdit::Signal_CursorPositionChanged));;
}

void QLineEdit_DisconnectCursorPositionChanged(void* ptr){
	QObject::disconnect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)(int, int)>(&QLineEdit::cursorPositionChanged), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)(int, int)>(&MyQLineEdit::Signal_CursorPositionChanged));;
}

void QLineEdit_CursorPositionChanged(void* ptr, int old, int n){
	static_cast<QLineEdit*>(ptr)->cursorPositionChanged(old, n);
}

void QLineEdit_CursorWordBackward(void* ptr, int mark){
	static_cast<QLineEdit*>(ptr)->cursorWordBackward(mark != 0);
}

void QLineEdit_CursorWordForward(void* ptr, int mark){
	static_cast<QLineEdit*>(ptr)->cursorWordForward(mark != 0);
}

void QLineEdit_Cut(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLineEdit*>(ptr), "cut");
}

void QLineEdit_Del(void* ptr){
	static_cast<QLineEdit*>(ptr)->del();
}

void QLineEdit_Deselect(void* ptr){
	static_cast<QLineEdit*>(ptr)->deselect();
}

void QLineEdit_DragEnterEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(e));
}

void QLineEdit_DragEnterEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::dragEnterEvent(static_cast<QDragEnterEvent*>(e));
}

void QLineEdit_DragLeaveEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QLineEdit_DragLeaveEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QLineEdit_DragMoveEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QLineEdit_DragMoveEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QLineEdit_DropEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->dropEvent(static_cast<QDropEvent*>(e));
}

void QLineEdit_DropEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::dropEvent(static_cast<QDropEvent*>(e));
}

void QLineEdit_ConnectEditingFinished(void* ptr){
	QObject::connect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)()>(&QLineEdit::editingFinished), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)()>(&MyQLineEdit::Signal_EditingFinished));;
}

void QLineEdit_DisconnectEditingFinished(void* ptr){
	QObject::disconnect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)()>(&QLineEdit::editingFinished), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)()>(&MyQLineEdit::Signal_EditingFinished));;
}

void QLineEdit_EditingFinished(void* ptr){
	static_cast<QLineEdit*>(ptr)->editingFinished();
}

void QLineEdit_End(void* ptr, int mark){
	static_cast<QLineEdit*>(ptr)->end(mark != 0);
}

int QLineEdit_Event(void* ptr, void* e){
	return static_cast<QLineEdit*>(ptr)->event(static_cast<QEvent*>(e));
}

void QLineEdit_FocusInEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QLineEdit_FocusInEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QLineEdit_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QLineEdit_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QLineEdit_GetTextMargins(void* ptr, int left, int top, int right, int bottom){
	static_cast<QLineEdit*>(ptr)->getTextMargins(&left, &top, &right, &bottom);
}

void QLineEdit_Home(void* ptr, int mark){
	static_cast<QLineEdit*>(ptr)->home(mark != 0);
}

void QLineEdit_InputMethodEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void QLineEdit_InputMethodEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void* QLineEdit_InputMethodQuery(void* ptr, int property){
	return new QVariant(static_cast<QLineEdit*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(property)));
}

void QLineEdit_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QLineEdit_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void* QLineEdit_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLineEdit*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QLineEdit*>(ptr)->minimumSizeHint()).height());
}

void QLineEdit_MouseDoubleClickEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QLineEdit_MouseDoubleClickEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QLineEdit_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QLineEdit_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QLineEdit_MousePressEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QLineEdit_MousePressEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QLineEdit_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQLineEdit*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QLineEdit_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QLineEdit*>(ptr)->QLineEdit::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QLineEdit_PaintEvent(void* ptr, void* v){
	static_cast<MyQLineEdit*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QLineEdit_PaintEventDefault(void* ptr, void* v){
	static_cast<QLineEdit*>(ptr)->QLineEdit::paintEvent(static_cast<QPaintEvent*>(v));
}

void QLineEdit_Paste(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLineEdit*>(ptr), "paste");
}

void QLineEdit_Redo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLineEdit*>(ptr), "redo");
}

void QLineEdit_ConnectReturnPressed(void* ptr){
	QObject::connect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)()>(&QLineEdit::returnPressed), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)()>(&MyQLineEdit::Signal_ReturnPressed));;
}

void QLineEdit_DisconnectReturnPressed(void* ptr){
	QObject::disconnect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)()>(&QLineEdit::returnPressed), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)()>(&MyQLineEdit::Signal_ReturnPressed));;
}

void QLineEdit_ReturnPressed(void* ptr){
	static_cast<QLineEdit*>(ptr)->returnPressed();
}

void QLineEdit_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLineEdit*>(ptr), "selectAll");
}

void QLineEdit_ConnectSelectionChanged(void* ptr){
	QObject::connect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)()>(&QLineEdit::selectionChanged), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)()>(&MyQLineEdit::Signal_SelectionChanged));;
}

void QLineEdit_DisconnectSelectionChanged(void* ptr){
	QObject::disconnect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)()>(&QLineEdit::selectionChanged), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)()>(&MyQLineEdit::Signal_SelectionChanged));;
}

void QLineEdit_SelectionChanged(void* ptr){
	static_cast<QLineEdit*>(ptr)->selectionChanged();
}

int QLineEdit_SelectionStart(void* ptr){
	return static_cast<QLineEdit*>(ptr)->selectionStart();
}

void QLineEdit_SetCompleter(void* ptr, void* c){
	static_cast<QLineEdit*>(ptr)->setCompleter(static_cast<QCompleter*>(c));
}

void QLineEdit_SetSelection(void* ptr, int start, int length){
	static_cast<QLineEdit*>(ptr)->setSelection(start, length);
}

void QLineEdit_SetTextMargins2(void* ptr, void* margins){
	static_cast<QLineEdit*>(ptr)->setTextMargins(*static_cast<QMargins*>(margins));
}

void QLineEdit_SetTextMargins(void* ptr, int left, int top, int right, int bottom){
	static_cast<QLineEdit*>(ptr)->setTextMargins(left, top, right, bottom);
}

void QLineEdit_SetValidator(void* ptr, void* v){
	static_cast<QLineEdit*>(ptr)->setValidator(static_cast<QValidator*>(v));
}

void* QLineEdit_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QLineEdit*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QLineEdit*>(ptr)->sizeHint()).height());
}

void QLineEdit_ConnectTextChanged(void* ptr){
	QObject::connect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)(const QString &)>(&QLineEdit::textChanged), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)(const QString &)>(&MyQLineEdit::Signal_TextChanged));;
}

void QLineEdit_DisconnectTextChanged(void* ptr){
	QObject::disconnect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)(const QString &)>(&QLineEdit::textChanged), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)(const QString &)>(&MyQLineEdit::Signal_TextChanged));;
}

void QLineEdit_TextChanged(void* ptr, char* text){
	static_cast<QLineEdit*>(ptr)->textChanged(QString(text));
}

void QLineEdit_ConnectTextEdited(void* ptr){
	QObject::connect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)(const QString &)>(&QLineEdit::textEdited), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)(const QString &)>(&MyQLineEdit::Signal_TextEdited));;
}

void QLineEdit_DisconnectTextEdited(void* ptr){
	QObject::disconnect(static_cast<QLineEdit*>(ptr), static_cast<void (QLineEdit::*)(const QString &)>(&QLineEdit::textEdited), static_cast<MyQLineEdit*>(ptr), static_cast<void (MyQLineEdit::*)(const QString &)>(&MyQLineEdit::Signal_TextEdited));;
}

void QLineEdit_TextEdited(void* ptr, char* text){
	static_cast<QLineEdit*>(ptr)->textEdited(QString(text));
}

void QLineEdit_Undo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QLineEdit*>(ptr), "undo");
}

void* QLineEdit_Validator(void* ptr){
	return const_cast<QValidator*>(static_cast<QLineEdit*>(ptr)->validator());
}

void QLineEdit_DestroyQLineEdit(void* ptr){
	static_cast<QLineEdit*>(ptr)->~QLineEdit();
}

void QLineEdit_ActionEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QLineEdit_ActionEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::actionEvent(static_cast<QActionEvent*>(event));
}

void QLineEdit_EnterEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QLineEdit_EnterEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::enterEvent(static_cast<QEvent*>(event));
}

void QLineEdit_HideEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QLineEdit_HideEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::hideEvent(static_cast<QHideEvent*>(event));
}

void QLineEdit_LeaveEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QLineEdit_LeaveEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::leaveEvent(static_cast<QEvent*>(event));
}

void QLineEdit_MoveEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QLineEdit_MoveEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::moveEvent(static_cast<QMoveEvent*>(event));
}

void QLineEdit_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQLineEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QLineEdit_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QLineEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QLineEdit_ShowEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QLineEdit_ShowEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::showEvent(static_cast<QShowEvent*>(event));
}

void QLineEdit_CloseEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QLineEdit_CloseEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::closeEvent(static_cast<QCloseEvent*>(event));
}

void QLineEdit_InitPainter(void* ptr, void* painter){
	static_cast<MyQLineEdit*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QLineEdit_InitPainterDefault(void* ptr, void* painter){
	static_cast<QLineEdit*>(ptr)->QLineEdit::initPainter(static_cast<QPainter*>(painter));
}

void QLineEdit_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QLineEdit_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QLineEdit_ResizeEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QLineEdit_ResizeEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QLineEdit_TabletEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QLineEdit_TabletEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QLineEdit_WheelEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QLineEdit_WheelEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QLineEdit_TimerEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QLineEdit_TimerEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::timerEvent(static_cast<QTimerEvent*>(event));
}

void QLineEdit_ChildEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QLineEdit_ChildEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::childEvent(static_cast<QChildEvent*>(event));
}

void QLineEdit_CustomEvent(void* ptr, void* event){
	static_cast<MyQLineEdit*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QLineEdit_CustomEventDefault(void* ptr, void* event){
	static_cast<QLineEdit*>(ptr)->QLineEdit::customEvent(static_cast<QEvent*>(event));
}

class MyQListView: public QListView {
public:
	MyQListView(QWidget *parent) : QListView(parent) {};
	void dragLeaveEvent(QDragLeaveEvent * e) { callbackQListViewDragLeaveEvent(this, this->objectName().toUtf8().data(), e); };
	void dragMoveEvent(QDragMoveEvent * e) { callbackQListViewDragMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void dropEvent(QDropEvent * e) { callbackQListViewDropEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQListViewMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQListViewMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * e) { callbackQListViewPaintEvent(this, this->objectName().toUtf8().data(), e); };
	void resizeEvent(QResizeEvent * e) { callbackQListViewResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags command) { callbackQListViewSetSelection(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), command); };
	void startDrag(Qt::DropActions supportedActions) { callbackQListViewStartDrag(this, this->objectName().toUtf8().data(), supportedActions); };
	void timerEvent(QTimerEvent * e) { callbackQListViewTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void updateGeometries() { if (!callbackQListViewUpdateGeometries(this, this->objectName().toUtf8().data())) { QListView::updateGeometries(); }; };
	void closeEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { if (!callbackQListViewCloseEditor(this, this->objectName().toUtf8().data(), editor, hint)) { QListView::closeEditor(editor, hint); }; };
	void commitData(QWidget * editor) { if (!callbackQListViewCommitData(this, this->objectName().toUtf8().data(), editor)) { QListView::commitData(editor); }; };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQListViewDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void editorDestroyed(QObject * editor) { if (!callbackQListViewEditorDestroyed(this, this->objectName().toUtf8().data(), editor)) { QListView::editorDestroyed(editor); }; };
	void focusInEvent(QFocusEvent * event) { callbackQListViewFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQListViewFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQListViewInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQListViewKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyboardSearch(const QString & search) { callbackQListViewKeyboardSearch(this, this->objectName().toUtf8().data(), search.toUtf8().data()); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQListViewMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQListViewMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void reset() { if (!callbackQListViewReset(this, this->objectName().toUtf8().data())) { QListView::reset(); }; };
	void selectAll() { if (!callbackQListViewSelectAll(this, this->objectName().toUtf8().data())) { QListView::selectAll(); }; };
	void setModel(QAbstractItemModel * model) { callbackQListViewSetModel(this, this->objectName().toUtf8().data(), model); };
	void setSelectionModel(QItemSelectionModel * selectionModel) { callbackQListViewSetSelectionModel(this, this->objectName().toUtf8().data(), selectionModel); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQListViewContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQListViewScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void setupViewport(QWidget * viewport) { callbackQListViewSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQListViewWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQListViewChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQListViewActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQListViewEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQListViewHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQListViewLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQListViewMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQListViewSetVisible(this, this->objectName().toUtf8().data(), visible)) { QListView::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQListViewShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQListViewCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQListViewInitPainter(const_cast<MyQListView*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQListViewKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQListViewTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQListViewChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQListViewCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QListView_BatchSize(void* ptr){
	return static_cast<QListView*>(ptr)->batchSize();
}

int QListView_Flow(void* ptr){
	return static_cast<QListView*>(ptr)->flow();
}

void* QListView_GridSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QListView*>(ptr)->gridSize()).width(), static_cast<QSize>(static_cast<QListView*>(ptr)->gridSize()).height());
}

int QListView_IsSelectionRectVisible(void* ptr){
	return static_cast<QListView*>(ptr)->isSelectionRectVisible();
}

int QListView_IsWrapping(void* ptr){
	return static_cast<QListView*>(ptr)->isWrapping();
}

int QListView_LayoutMode(void* ptr){
	return static_cast<QListView*>(ptr)->layoutMode();
}

int QListView_ModelColumn(void* ptr){
	return static_cast<QListView*>(ptr)->modelColumn();
}

int QListView_Movement(void* ptr){
	return static_cast<QListView*>(ptr)->movement();
}

int QListView_ResizeMode(void* ptr){
	return static_cast<QListView*>(ptr)->resizeMode();
}

void QListView_SetBatchSize(void* ptr, int batchSize){
	static_cast<QListView*>(ptr)->setBatchSize(batchSize);
}

void QListView_SetFlow(void* ptr, int flow){
	static_cast<QListView*>(ptr)->setFlow(static_cast<QListView::Flow>(flow));
}

void QListView_SetGridSize(void* ptr, void* size){
	static_cast<QListView*>(ptr)->setGridSize(*static_cast<QSize*>(size));
}

void QListView_SetLayoutMode(void* ptr, int mode){
	static_cast<QListView*>(ptr)->setLayoutMode(static_cast<QListView::LayoutMode>(mode));
}

void QListView_SetModelColumn(void* ptr, int column){
	static_cast<QListView*>(ptr)->setModelColumn(column);
}

void QListView_SetMovement(void* ptr, int movement){
	static_cast<QListView*>(ptr)->setMovement(static_cast<QListView::Movement>(movement));
}

void QListView_SetResizeMode(void* ptr, int mode){
	static_cast<QListView*>(ptr)->setResizeMode(static_cast<QListView::ResizeMode>(mode));
}

void QListView_SetSelectionRectVisible(void* ptr, int show){
	static_cast<QListView*>(ptr)->setSelectionRectVisible(show != 0);
}

void QListView_SetSpacing(void* ptr, int space){
	static_cast<QListView*>(ptr)->setSpacing(space);
}

void QListView_SetUniformItemSizes(void* ptr, int enable){
	static_cast<QListView*>(ptr)->setUniformItemSizes(enable != 0);
}

void QListView_SetViewMode(void* ptr, int mode){
	static_cast<QListView*>(ptr)->setViewMode(static_cast<QListView::ViewMode>(mode));
}

void QListView_SetWordWrap(void* ptr, int on){
	static_cast<QListView*>(ptr)->setWordWrap(on != 0);
}

void QListView_SetWrapping(void* ptr, int enable){
	static_cast<QListView*>(ptr)->setWrapping(enable != 0);
}

int QListView_Spacing(void* ptr){
	return static_cast<QListView*>(ptr)->spacing();
}

int QListView_UniformItemSizes(void* ptr){
	return static_cast<QListView*>(ptr)->uniformItemSizes();
}

int QListView_ViewMode(void* ptr){
	return static_cast<QListView*>(ptr)->viewMode();
}

int QListView_WordWrap(void* ptr){
	return static_cast<QListView*>(ptr)->wordWrap();
}

void* QListView_NewQListView(void* parent){
	return new MyQListView(static_cast<QWidget*>(parent));
}

void QListView_ClearPropertyFlags(void* ptr){
	static_cast<QListView*>(ptr)->clearPropertyFlags();
}

void QListView_DragLeaveEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QListView_DragLeaveEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QListView_DragMoveEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QListView_DragMoveEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QListView_DropEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->dropEvent(static_cast<QDropEvent*>(e));
}

void QListView_DropEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::dropEvent(static_cast<QDropEvent*>(e));
}

int QListView_Event(void* ptr, void* e){
	return static_cast<QListView*>(ptr)->event(static_cast<QEvent*>(e));
}

int QListView_HorizontalOffset(void* ptr){
	return static_cast<QListView*>(ptr)->horizontalOffset();
}

int QListView_IsIndexHidden(void* ptr, void* index){
	return static_cast<QListView*>(ptr)->isIndexHidden(*static_cast<QModelIndex*>(index));
}

int QListView_IsRowHidden(void* ptr, int row){
	return static_cast<QListView*>(ptr)->isRowHidden(row);
}

void QListView_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QListView_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QListView_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QListView_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QListView_PaintEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QListView_PaintEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::paintEvent(static_cast<QPaintEvent*>(e));
}

void QListView_ResizeEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QListView_ResizeEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QListView_SetRowHidden(void* ptr, int row, int hide){
	static_cast<QListView*>(ptr)->setRowHidden(row, hide != 0);
}

void QListView_SetSelection(void* ptr, void* rect, int command){
	static_cast<MyQListView*>(ptr)->setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QListView_SetSelectionDefault(void* ptr, void* rect, int command){
	static_cast<QListView*>(ptr)->QListView::setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QListView_StartDrag(void* ptr, int supportedActions){
	static_cast<MyQListView*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QListView_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QListView*>(ptr)->QListView::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QListView_TimerEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QListView_TimerEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::timerEvent(static_cast<QTimerEvent*>(e));
}

void QListView_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQListView*>(ptr), "updateGeometries");
}

void QListView_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QListView*>(ptr), "updateGeometries");
}

int QListView_VerticalOffset(void* ptr){
	return static_cast<QListView*>(ptr)->verticalOffset();
}

void* QListView_ViewOptions(void* ptr){
	return new QStyleOptionViewItem(static_cast<QListView*>(ptr)->viewOptions());
}

void* QListView_ViewportSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QListView*>(ptr)->viewportSizeHint()).width(), static_cast<QSize>(static_cast<QListView*>(ptr)->viewportSizeHint()).height());
}

void* QListView_VisualRect(void* ptr, void* index){
	return new QRect(static_cast<QRect>(static_cast<QListView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).x(), static_cast<QRect>(static_cast<QListView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).y(), static_cast<QRect>(static_cast<QListView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).width(), static_cast<QRect>(static_cast<QListView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).height());
}

void* QListView_VisualRegionForSelection(void* ptr, void* selection){
	return new QRegion(static_cast<QListView*>(ptr)->visualRegionForSelection(*static_cast<QItemSelection*>(selection)));
}

void QListView_DestroyQListView(void* ptr){
	static_cast<QListView*>(ptr)->~QListView();
}

void QListView_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<MyQListView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QListView_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QListView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QListView_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQListView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QListView_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QListView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QListView_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QListView_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QListView_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQListView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QListView_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QListView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QListView_FocusInEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QListView_FocusInEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QListView_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QListView_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QListView_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QListView_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QListView_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QListView_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QListView_KeyboardSearch(void* ptr, char* search){
	static_cast<MyQListView*>(ptr)->keyboardSearch(QString(search));
}

void QListView_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QListView*>(ptr)->QListView::keyboardSearch(QString(search));
}

void QListView_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QListView_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QListView_MousePressEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QListView_MousePressEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QListView_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQListView*>(ptr), "reset");
}

void QListView_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QListView*>(ptr), "reset");
}

void QListView_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQListView*>(ptr), "selectAll");
}

void QListView_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QListView*>(ptr), "selectAll");
}

void QListView_SetModel(void* ptr, void* model){
	static_cast<MyQListView*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QListView_SetModelDefault(void* ptr, void* model){
	static_cast<QListView*>(ptr)->QListView::setModel(static_cast<QAbstractItemModel*>(model));
}

void QListView_SetSelectionModel(void* ptr, void* selectionModel){
	static_cast<MyQListView*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QListView_SetSelectionModelDefault(void* ptr, void* selectionModel){
	static_cast<QListView*>(ptr)->QListView::setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QListView_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QListView_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QListView_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQListView*>(ptr)->scrollContentsBy(dx, dy);
}

void QListView_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QListView*>(ptr)->QListView::scrollContentsBy(dx, dy);
}

void QListView_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQListView*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QListView_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QListView*>(ptr)->QListView::setupViewport(static_cast<QWidget*>(viewport));
}

void QListView_WheelEvent(void* ptr, void* e){
	static_cast<MyQListView*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QListView_WheelEventDefault(void* ptr, void* e){
	static_cast<QListView*>(ptr)->QListView::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QListView_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQListView*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QListView_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QListView*>(ptr)->QListView::changeEvent(static_cast<QEvent*>(ev));
}

void QListView_ActionEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QListView_ActionEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::actionEvent(static_cast<QActionEvent*>(event));
}

void QListView_EnterEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QListView_EnterEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::enterEvent(static_cast<QEvent*>(event));
}

void QListView_HideEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QListView_HideEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::hideEvent(static_cast<QHideEvent*>(event));
}

void QListView_LeaveEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QListView_LeaveEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::leaveEvent(static_cast<QEvent*>(event));
}

void QListView_MoveEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QListView_MoveEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::moveEvent(static_cast<QMoveEvent*>(event));
}

void QListView_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQListView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QListView_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QListView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QListView_ShowEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QListView_ShowEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::showEvent(static_cast<QShowEvent*>(event));
}

void QListView_CloseEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QListView_CloseEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::closeEvent(static_cast<QCloseEvent*>(event));
}

void QListView_InitPainter(void* ptr, void* painter){
	static_cast<MyQListView*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QListView_InitPainterDefault(void* ptr, void* painter){
	static_cast<QListView*>(ptr)->QListView::initPainter(static_cast<QPainter*>(painter));
}

void QListView_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QListView_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QListView_TabletEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QListView_TabletEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QListView_ChildEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QListView_ChildEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::childEvent(static_cast<QChildEvent*>(event));
}

void QListView_CustomEvent(void* ptr, void* event){
	static_cast<MyQListView*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QListView_CustomEventDefault(void* ptr, void* event){
	static_cast<QListView*>(ptr)->QListView::customEvent(static_cast<QEvent*>(event));
}

class MyQListWidget: public QListWidget {
public:
	MyQListWidget(QWidget *parent) : QListWidget(parent) {};
	void Signal_CurrentItemChanged(QListWidgetItem * current, QListWidgetItem * previous) { callbackQListWidgetCurrentItemChanged(this, this->objectName().toUtf8().data(), current, previous); };
	void Signal_CurrentRowChanged(int currentRow) { callbackQListWidgetCurrentRowChanged(this, this->objectName().toUtf8().data(), currentRow); };
	void Signal_CurrentTextChanged(const QString & currentText) { callbackQListWidgetCurrentTextChanged(this, this->objectName().toUtf8().data(), currentText.toUtf8().data()); };
	void dropEvent(QDropEvent * event) { callbackQListWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_ItemActivated(QListWidgetItem * item) { callbackQListWidgetItemActivated(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemChanged(QListWidgetItem * item) { callbackQListWidgetItemChanged(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemClicked(QListWidgetItem * item) { callbackQListWidgetItemClicked(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemDoubleClicked(QListWidgetItem * item) { callbackQListWidgetItemDoubleClicked(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemEntered(QListWidgetItem * item) { callbackQListWidgetItemEntered(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemPressed(QListWidgetItem * item) { callbackQListWidgetItemPressed(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemSelectionChanged() { callbackQListWidgetItemSelectionChanged(this, this->objectName().toUtf8().data()); };
	void dragLeaveEvent(QDragLeaveEvent * e) { callbackQListWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), e); };
	void dragMoveEvent(QDragMoveEvent * e) { callbackQListWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQListWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQListWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * e) { callbackQListWidgetPaintEvent(this, this->objectName().toUtf8().data(), e); };
	void resizeEvent(QResizeEvent * e) { callbackQListWidgetResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags command) { callbackQListWidgetSetSelection(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), command); };
	void startDrag(Qt::DropActions supportedActions) { callbackQListWidgetStartDrag(this, this->objectName().toUtf8().data(), supportedActions); };
	void timerEvent(QTimerEvent * e) { callbackQListWidgetTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void updateGeometries() { if (!callbackQListWidgetUpdateGeometries(this, this->objectName().toUtf8().data())) { QListWidget::updateGeometries(); }; };
	void closeEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { if (!callbackQListWidgetCloseEditor(this, this->objectName().toUtf8().data(), editor, hint)) { QListWidget::closeEditor(editor, hint); }; };
	void commitData(QWidget * editor) { if (!callbackQListWidgetCommitData(this, this->objectName().toUtf8().data(), editor)) { QListWidget::commitData(editor); }; };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQListWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void editorDestroyed(QObject * editor) { if (!callbackQListWidgetEditorDestroyed(this, this->objectName().toUtf8().data(), editor)) { QListWidget::editorDestroyed(editor); }; };
	void focusInEvent(QFocusEvent * event) { callbackQListWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQListWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQListWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQListWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyboardSearch(const QString & search) { callbackQListWidgetKeyboardSearch(this, this->objectName().toUtf8().data(), search.toUtf8().data()); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQListWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQListWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void reset() { if (!callbackQListWidgetReset(this, this->objectName().toUtf8().data())) { QListWidget::reset(); }; };
	void selectAll() { if (!callbackQListWidgetSelectAll(this, this->objectName().toUtf8().data())) { QListWidget::selectAll(); }; };
	void setSelectionModel(QItemSelectionModel * selectionModel) { callbackQListWidgetSetSelectionModel(this, this->objectName().toUtf8().data(), selectionModel); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQListWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQListWidgetScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void setupViewport(QWidget * viewport) { callbackQListWidgetSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQListWidgetWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQListWidgetChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQListWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQListWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQListWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQListWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQListWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQListWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QListWidget::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQListWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQListWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQListWidgetInitPainter(const_cast<MyQListWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQListWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQListWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQListWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQListWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QListWidget_Count(void* ptr){
	return static_cast<QListWidget*>(ptr)->count();
}

int QListWidget_CurrentRow(void* ptr){
	return static_cast<QListWidget*>(ptr)->currentRow();
}

int QListWidget_IsSortingEnabled(void* ptr){
	return static_cast<QListWidget*>(ptr)->isSortingEnabled();
}

void QListWidget_SetCurrentRow(void* ptr, int row){
	static_cast<QListWidget*>(ptr)->setCurrentRow(row);
}

void QListWidget_SetSortingEnabled(void* ptr, int enable){
	static_cast<QListWidget*>(ptr)->setSortingEnabled(enable != 0);
}

void* QListWidget_NewQListWidget(void* parent){
	return new MyQListWidget(static_cast<QWidget*>(parent));
}

void QListWidget_AddItem2(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->addItem(static_cast<QListWidgetItem*>(item));
}

void QListWidget_AddItem(void* ptr, char* label){
	static_cast<QListWidget*>(ptr)->addItem(QString(label));
}

void QListWidget_AddItems(void* ptr, char* labels){
	static_cast<QListWidget*>(ptr)->addItems(QString(labels).split("|", QString::SkipEmptyParts));
}

void QListWidget_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QListWidget*>(ptr), "clear");
}

void QListWidget_ClosePersistentEditor(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->closePersistentEditor(static_cast<QListWidgetItem*>(item));
}

void* QListWidget_CurrentItem(void* ptr){
	return static_cast<QListWidget*>(ptr)->currentItem();
}

void QListWidget_ConnectCurrentItemChanged(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *, QListWidgetItem *)>(&QListWidget::currentItemChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *, QListWidgetItem *)>(&MyQListWidget::Signal_CurrentItemChanged));;
}

void QListWidget_DisconnectCurrentItemChanged(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *, QListWidgetItem *)>(&QListWidget::currentItemChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *, QListWidgetItem *)>(&MyQListWidget::Signal_CurrentItemChanged));;
}

void QListWidget_CurrentItemChanged(void* ptr, void* current, void* previous){
	static_cast<QListWidget*>(ptr)->currentItemChanged(static_cast<QListWidgetItem*>(current), static_cast<QListWidgetItem*>(previous));
}

void QListWidget_ConnectCurrentRowChanged(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(int)>(&QListWidget::currentRowChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(int)>(&MyQListWidget::Signal_CurrentRowChanged));;
}

void QListWidget_DisconnectCurrentRowChanged(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(int)>(&QListWidget::currentRowChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(int)>(&MyQListWidget::Signal_CurrentRowChanged));;
}

void QListWidget_CurrentRowChanged(void* ptr, int currentRow){
	static_cast<QListWidget*>(ptr)->currentRowChanged(currentRow);
}

void QListWidget_ConnectCurrentTextChanged(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(const QString &)>(&QListWidget::currentTextChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(const QString &)>(&MyQListWidget::Signal_CurrentTextChanged));;
}

void QListWidget_DisconnectCurrentTextChanged(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(const QString &)>(&QListWidget::currentTextChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(const QString &)>(&MyQListWidget::Signal_CurrentTextChanged));;
}

void QListWidget_CurrentTextChanged(void* ptr, char* currentText){
	static_cast<QListWidget*>(ptr)->currentTextChanged(QString(currentText));
}

void QListWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QListWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::dropEvent(static_cast<QDropEvent*>(event));
}

int QListWidget_DropMimeData(void* ptr, int index, void* data, int action){
	return static_cast<QListWidget*>(ptr)->dropMimeData(index, static_cast<QMimeData*>(data), static_cast<Qt::DropAction>(action));
}

void QListWidget_EditItem(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->editItem(static_cast<QListWidgetItem*>(item));
}

int QListWidget_Event(void* ptr, void* e){
	return static_cast<QListWidget*>(ptr)->event(static_cast<QEvent*>(e));
}

void QListWidget_InsertItem(void* ptr, int row, void* item){
	static_cast<QListWidget*>(ptr)->insertItem(row, static_cast<QListWidgetItem*>(item));
}

void QListWidget_InsertItem2(void* ptr, int row, char* label){
	static_cast<QListWidget*>(ptr)->insertItem(row, QString(label));
}

void QListWidget_InsertItems(void* ptr, int row, char* labels){
	static_cast<QListWidget*>(ptr)->insertItems(row, QString(labels).split("|", QString::SkipEmptyParts));
}

void* QListWidget_Item(void* ptr, int row){
	return static_cast<QListWidget*>(ptr)->item(row);
}

void QListWidget_ConnectItemActivated(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemActivated), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemActivated));;
}

void QListWidget_DisconnectItemActivated(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemActivated), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemActivated));;
}

void QListWidget_ItemActivated(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->itemActivated(static_cast<QListWidgetItem*>(item));
}

void* QListWidget_ItemAt(void* ptr, void* p){
	return static_cast<QListWidget*>(ptr)->itemAt(*static_cast<QPoint*>(p));
}

void* QListWidget_ItemAt2(void* ptr, int x, int y){
	return static_cast<QListWidget*>(ptr)->itemAt(x, y);
}

void QListWidget_ConnectItemChanged(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemChanged));;
}

void QListWidget_DisconnectItemChanged(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemChanged));;
}

void QListWidget_ItemChanged(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->itemChanged(static_cast<QListWidgetItem*>(item));
}

void QListWidget_ConnectItemClicked(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemClicked), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemClicked));;
}

void QListWidget_DisconnectItemClicked(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemClicked), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemClicked));;
}

void QListWidget_ItemClicked(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->itemClicked(static_cast<QListWidgetItem*>(item));
}

void QListWidget_ConnectItemDoubleClicked(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemDoubleClicked), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemDoubleClicked));;
}

void QListWidget_DisconnectItemDoubleClicked(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemDoubleClicked), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemDoubleClicked));;
}

void QListWidget_ItemDoubleClicked(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->itemDoubleClicked(static_cast<QListWidgetItem*>(item));
}

void QListWidget_ConnectItemEntered(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemEntered), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemEntered));;
}

void QListWidget_DisconnectItemEntered(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemEntered), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemEntered));;
}

void QListWidget_ItemEntered(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->itemEntered(static_cast<QListWidgetItem*>(item));
}

void QListWidget_ConnectItemPressed(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemPressed), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemPressed));;
}

void QListWidget_DisconnectItemPressed(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)(QListWidgetItem *)>(&QListWidget::itemPressed), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)(QListWidgetItem *)>(&MyQListWidget::Signal_ItemPressed));;
}

void QListWidget_ItemPressed(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->itemPressed(static_cast<QListWidgetItem*>(item));
}

void QListWidget_ConnectItemSelectionChanged(void* ptr){
	QObject::connect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)()>(&QListWidget::itemSelectionChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)()>(&MyQListWidget::Signal_ItemSelectionChanged));;
}

void QListWidget_DisconnectItemSelectionChanged(void* ptr){
	QObject::disconnect(static_cast<QListWidget*>(ptr), static_cast<void (QListWidget::*)()>(&QListWidget::itemSelectionChanged), static_cast<MyQListWidget*>(ptr), static_cast<void (MyQListWidget::*)()>(&MyQListWidget::Signal_ItemSelectionChanged));;
}

void QListWidget_ItemSelectionChanged(void* ptr){
	static_cast<QListWidget*>(ptr)->itemSelectionChanged();
}

void* QListWidget_ItemWidget(void* ptr, void* item){
	return static_cast<QListWidget*>(ptr)->itemWidget(static_cast<QListWidgetItem*>(item));
}

char* QListWidget_MimeTypes(void* ptr){
	return static_cast<QListWidget*>(ptr)->mimeTypes().join("|").toUtf8().data();
}

void QListWidget_OpenPersistentEditor(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->openPersistentEditor(static_cast<QListWidgetItem*>(item));
}

void QListWidget_RemoveItemWidget(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->removeItemWidget(static_cast<QListWidgetItem*>(item));
}

int QListWidget_Row(void* ptr, void* item){
	return static_cast<QListWidget*>(ptr)->row(static_cast<QListWidgetItem*>(item));
}

void QListWidget_ScrollToItem(void* ptr, void* item, int hint){
	QMetaObject::invokeMethod(static_cast<QListWidget*>(ptr), "scrollToItem", Q_ARG(QListWidgetItem*, static_cast<QListWidgetItem*>(item)), Q_ARG(QAbstractItemView::ScrollHint, static_cast<QAbstractItemView::ScrollHint>(hint)));
}

void QListWidget_SetCurrentItem(void* ptr, void* item){
	static_cast<QListWidget*>(ptr)->setCurrentItem(static_cast<QListWidgetItem*>(item));
}

void QListWidget_SetCurrentItem2(void* ptr, void* item, int command){
	static_cast<QListWidget*>(ptr)->setCurrentItem(static_cast<QListWidgetItem*>(item), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QListWidget_SetCurrentRow2(void* ptr, int row, int command){
	static_cast<QListWidget*>(ptr)->setCurrentRow(row, static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QListWidget_SetItemWidget(void* ptr, void* item, void* widget){
	static_cast<QListWidget*>(ptr)->setItemWidget(static_cast<QListWidgetItem*>(item), static_cast<QWidget*>(widget));
}

void QListWidget_SortItems(void* ptr, int order){
	static_cast<QListWidget*>(ptr)->sortItems(static_cast<Qt::SortOrder>(order));
}

int QListWidget_SupportedDropActions(void* ptr){
	return static_cast<QListWidget*>(ptr)->supportedDropActions();
}

void* QListWidget_TakeItem(void* ptr, int row){
	return static_cast<QListWidget*>(ptr)->takeItem(row);
}

void* QListWidget_VisualItemRect(void* ptr, void* item){
	return new QRect(static_cast<QRect>(static_cast<QListWidget*>(ptr)->visualItemRect(static_cast<QListWidgetItem*>(item))).x(), static_cast<QRect>(static_cast<QListWidget*>(ptr)->visualItemRect(static_cast<QListWidgetItem*>(item))).y(), static_cast<QRect>(static_cast<QListWidget*>(ptr)->visualItemRect(static_cast<QListWidgetItem*>(item))).width(), static_cast<QRect>(static_cast<QListWidget*>(ptr)->visualItemRect(static_cast<QListWidgetItem*>(item))).height());
}

void QListWidget_DestroyQListWidget(void* ptr){
	static_cast<QListWidget*>(ptr)->~QListWidget();
}

void QListWidget_DragLeaveEvent(void* ptr, void* e){
	static_cast<MyQListWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QListWidget_DragLeaveEventDefault(void* ptr, void* e){
	static_cast<QListWidget*>(ptr)->QListWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QListWidget_DragMoveEvent(void* ptr, void* e){
	static_cast<MyQListWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QListWidget_DragMoveEventDefault(void* ptr, void* e){
	static_cast<QListWidget*>(ptr)->QListWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QListWidget_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQListWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QListWidget_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QListWidget*>(ptr)->QListWidget::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QListWidget_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQListWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QListWidget_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QListWidget*>(ptr)->QListWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QListWidget_PaintEvent(void* ptr, void* e){
	static_cast<MyQListWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QListWidget_PaintEventDefault(void* ptr, void* e){
	static_cast<QListWidget*>(ptr)->QListWidget::paintEvent(static_cast<QPaintEvent*>(e));
}

void QListWidget_ResizeEvent(void* ptr, void* e){
	static_cast<MyQListWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QListWidget_ResizeEventDefault(void* ptr, void* e){
	static_cast<QListWidget*>(ptr)->QListWidget::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QListWidget_SetSelection(void* ptr, void* rect, int command){
	static_cast<MyQListWidget*>(ptr)->setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QListWidget_SetSelectionDefault(void* ptr, void* rect, int command){
	static_cast<QListWidget*>(ptr)->QListWidget::setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QListWidget_StartDrag(void* ptr, int supportedActions){
	static_cast<MyQListWidget*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QListWidget_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QListWidget*>(ptr)->QListWidget::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QListWidget_TimerEvent(void* ptr, void* e){
	static_cast<MyQListWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QListWidget_TimerEventDefault(void* ptr, void* e){
	static_cast<QListWidget*>(ptr)->QListWidget::timerEvent(static_cast<QTimerEvent*>(e));
}

void QListWidget_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQListWidget*>(ptr), "updateGeometries");
}

void QListWidget_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QListWidget*>(ptr), "updateGeometries");
}

void QListWidget_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<MyQListWidget*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QListWidget_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QListWidget*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QListWidget_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQListWidget*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QListWidget_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QListWidget*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QListWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QListWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QListWidget_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQListWidget*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QListWidget_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QListWidget*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QListWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QListWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QListWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QListWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QListWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QListWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QListWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QListWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QListWidget_KeyboardSearch(void* ptr, char* search){
	static_cast<MyQListWidget*>(ptr)->keyboardSearch(QString(search));
}

void QListWidget_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QListWidget*>(ptr)->QListWidget::keyboardSearch(QString(search));
}

void QListWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QListWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QListWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QListWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QListWidget_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQListWidget*>(ptr), "reset");
}

void QListWidget_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QListWidget*>(ptr), "reset");
}

void QListWidget_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQListWidget*>(ptr), "selectAll");
}

void QListWidget_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QListWidget*>(ptr), "selectAll");
}

void QListWidget_SetSelectionModel(void* ptr, void* selectionModel){
	static_cast<MyQListWidget*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QListWidget_SetSelectionModelDefault(void* ptr, void* selectionModel){
	static_cast<QListWidget*>(ptr)->QListWidget::setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QListWidget_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQListWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QListWidget_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QListWidget*>(ptr)->QListWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QListWidget_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQListWidget*>(ptr)->scrollContentsBy(dx, dy);
}

void QListWidget_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QListWidget*>(ptr)->QListWidget::scrollContentsBy(dx, dy);
}

void QListWidget_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQListWidget*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QListWidget_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QListWidget*>(ptr)->QListWidget::setupViewport(static_cast<QWidget*>(viewport));
}

void QListWidget_WheelEvent(void* ptr, void* e){
	static_cast<MyQListWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QListWidget_WheelEventDefault(void* ptr, void* e){
	static_cast<QListWidget*>(ptr)->QListWidget::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QListWidget_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQListWidget*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QListWidget_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QListWidget*>(ptr)->QListWidget::changeEvent(static_cast<QEvent*>(ev));
}

void QListWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QListWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QListWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QListWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::enterEvent(static_cast<QEvent*>(event));
}

void QListWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QListWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QListWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QListWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::leaveEvent(static_cast<QEvent*>(event));
}

void QListWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QListWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void QListWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQListWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QListWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QListWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QListWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QListWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::showEvent(static_cast<QShowEvent*>(event));
}

void QListWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QListWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QListWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQListWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QListWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QListWidget*>(ptr)->QListWidget::initPainter(static_cast<QPainter*>(painter));
}

void QListWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QListWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QListWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QListWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QListWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QListWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QListWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQListWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QListWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QListWidget*>(ptr)->QListWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQListWidgetItem: public QListWidgetItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQListWidgetItem(QListWidget *parent, int type) : QListWidgetItem(parent, type) {};
	MyQListWidgetItem(const QIcon &icon, const QString &text, QListWidget *parent, int type) : QListWidgetItem(icon, text, parent, type) {};
	MyQListWidgetItem(const QString &text, QListWidget *parent, int type) : QListWidgetItem(text, parent, type) {};
	MyQListWidgetItem(const QListWidgetItem &other) : QListWidgetItem(other) {};
	void setData(int role, const QVariant & value) { callbackQListWidgetItemSetData(this, this->objectNameAbs().toUtf8().data(), role, new QVariant(value)); };
};

void* QListWidgetItem_NewQListWidgetItem(void* parent, int ty){
	return new MyQListWidgetItem(static_cast<QListWidget*>(parent), ty);
}

void* QListWidgetItem_NewQListWidgetItem3(void* icon, char* text, void* parent, int ty){
	return new MyQListWidgetItem(*static_cast<QIcon*>(icon), QString(text), static_cast<QListWidget*>(parent), ty);
}

void* QListWidgetItem_NewQListWidgetItem2(char* text, void* parent, int ty){
	return new MyQListWidgetItem(QString(text), static_cast<QListWidget*>(parent), ty);
}

void QListWidgetItem_SetFlags(void* ptr, int flags){
	static_cast<QListWidgetItem*>(ptr)->setFlags(static_cast<Qt::ItemFlag>(flags));
}

void* QListWidgetItem_NewQListWidgetItem4(void* other){
	return new MyQListWidgetItem(*static_cast<QListWidgetItem*>(other));
}

void* QListWidgetItem_Background(void* ptr){
	return new QBrush(static_cast<QListWidgetItem*>(ptr)->background());
}

int QListWidgetItem_CheckState(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->checkState();
}

void* QListWidgetItem_Clone(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->clone();
}

void* QListWidgetItem_Data(void* ptr, int role){
	return new QVariant(static_cast<QListWidgetItem*>(ptr)->data(role));
}

int QListWidgetItem_Flags(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->flags();
}

void* QListWidgetItem_Font(void* ptr){
	return new QFont(static_cast<QListWidgetItem*>(ptr)->font());
}

void* QListWidgetItem_Foreground(void* ptr){
	return new QBrush(static_cast<QListWidgetItem*>(ptr)->foreground());
}

void* QListWidgetItem_Icon(void* ptr){
	return new QIcon(static_cast<QListWidgetItem*>(ptr)->icon());
}

int QListWidgetItem_IsHidden(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->isHidden();
}

int QListWidgetItem_IsSelected(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->isSelected();
}

void* QListWidgetItem_ListWidget(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->listWidget();
}

void QListWidgetItem_SetBackground(void* ptr, void* brush){
	static_cast<QListWidgetItem*>(ptr)->setBackground(*static_cast<QBrush*>(brush));
}

void QListWidgetItem_SetCheckState(void* ptr, int state){
	static_cast<QListWidgetItem*>(ptr)->setCheckState(static_cast<Qt::CheckState>(state));
}

void QListWidgetItem_SetData(void* ptr, int role, void* value){
	static_cast<MyQListWidgetItem*>(ptr)->setData(role, *static_cast<QVariant*>(value));
}

void QListWidgetItem_SetDataDefault(void* ptr, int role, void* value){
	static_cast<QListWidgetItem*>(ptr)->QListWidgetItem::setData(role, *static_cast<QVariant*>(value));
}

void QListWidgetItem_SetFont(void* ptr, void* font){
	static_cast<QListWidgetItem*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QListWidgetItem_SetForeground(void* ptr, void* brush){
	static_cast<QListWidgetItem*>(ptr)->setForeground(*static_cast<QBrush*>(brush));
}

void QListWidgetItem_SetHidden(void* ptr, int hide){
	static_cast<QListWidgetItem*>(ptr)->setHidden(hide != 0);
}

void QListWidgetItem_SetIcon(void* ptr, void* icon){
	static_cast<QListWidgetItem*>(ptr)->setIcon(*static_cast<QIcon*>(icon));
}

void QListWidgetItem_SetSelected(void* ptr, int sele){
	static_cast<QListWidgetItem*>(ptr)->setSelected(sele != 0);
}

void QListWidgetItem_SetSizeHint(void* ptr, void* size){
	static_cast<QListWidgetItem*>(ptr)->setSizeHint(*static_cast<QSize*>(size));
}

void QListWidgetItem_SetStatusTip(void* ptr, char* statusTip){
	static_cast<QListWidgetItem*>(ptr)->setStatusTip(QString(statusTip));
}

void QListWidgetItem_SetText(void* ptr, char* text){
	static_cast<QListWidgetItem*>(ptr)->setText(QString(text));
}

void QListWidgetItem_SetTextAlignment(void* ptr, int alignment){
	static_cast<QListWidgetItem*>(ptr)->setTextAlignment(alignment);
}

void QListWidgetItem_SetToolTip(void* ptr, char* toolTip){
	static_cast<QListWidgetItem*>(ptr)->setToolTip(QString(toolTip));
}

void QListWidgetItem_SetWhatsThis(void* ptr, char* whatsThis){
	static_cast<QListWidgetItem*>(ptr)->setWhatsThis(QString(whatsThis));
}

void* QListWidgetItem_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QListWidgetItem*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QListWidgetItem*>(ptr)->sizeHint()).height());
}

char* QListWidgetItem_StatusTip(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->statusTip().toUtf8().data();
}

char* QListWidgetItem_Text(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->text().toUtf8().data();
}

int QListWidgetItem_TextAlignment(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->textAlignment();
}

char* QListWidgetItem_ToolTip(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->toolTip().toUtf8().data();
}

int QListWidgetItem_Type(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->type();
}

char* QListWidgetItem_WhatsThis(void* ptr){
	return static_cast<QListWidgetItem*>(ptr)->whatsThis().toUtf8().data();
}

void QListWidgetItem_DestroyQListWidgetItem(void* ptr){
	static_cast<QListWidgetItem*>(ptr)->~QListWidgetItem();
}

char* QListWidgetItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQListWidgetItem*>(static_cast<QListWidgetItem*>(ptr))) {
		return static_cast<MyQListWidgetItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QListWidgetItem_BASE").toUtf8().data();
}

void QListWidgetItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQListWidgetItem*>(static_cast<QListWidgetItem*>(ptr))) {
		static_cast<MyQListWidgetItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQMacCocoaViewContainer: public QMacCocoaViewContainer {
public:
	void actionEvent(QActionEvent * event) { callbackQMacCocoaViewContainerActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQMacCocoaViewContainerDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQMacCocoaViewContainerDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQMacCocoaViewContainerDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQMacCocoaViewContainerDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQMacCocoaViewContainerEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQMacCocoaViewContainerFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQMacCocoaViewContainerFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQMacCocoaViewContainerHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQMacCocoaViewContainerLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQMacCocoaViewContainerMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQMacCocoaViewContainerPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQMacCocoaViewContainerSetVisible(this, this->objectName().toUtf8().data(), visible)) { QMacCocoaViewContainer::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQMacCocoaViewContainerShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQMacCocoaViewContainerChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQMacCocoaViewContainerCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQMacCocoaViewContainerContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQMacCocoaViewContainerInitPainter(const_cast<MyQMacCocoaViewContainer*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQMacCocoaViewContainerInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQMacCocoaViewContainerKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQMacCocoaViewContainerKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQMacCocoaViewContainerMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQMacCocoaViewContainerMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQMacCocoaViewContainerMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQMacCocoaViewContainerMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQMacCocoaViewContainerResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQMacCocoaViewContainerTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQMacCocoaViewContainerWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQMacCocoaViewContainerTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQMacCocoaViewContainerChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQMacCocoaViewContainerCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QMacCocoaViewContainer_DestroyQMacCocoaViewContainer(void* ptr){
	static_cast<QMacCocoaViewContainer*>(ptr)->~QMacCocoaViewContainer();
}

void QMacCocoaViewContainer_ActionEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QMacCocoaViewContainer_ActionEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::actionEvent(static_cast<QActionEvent*>(event));
}

void QMacCocoaViewContainer_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMacCocoaViewContainer_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMacCocoaViewContainer_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMacCocoaViewContainer_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMacCocoaViewContainer_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMacCocoaViewContainer_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMacCocoaViewContainer_DropEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QMacCocoaViewContainer_DropEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::dropEvent(static_cast<QDropEvent*>(event));
}

void QMacCocoaViewContainer_EnterEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QMacCocoaViewContainer_EnterEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::enterEvent(static_cast<QEvent*>(event));
}

void QMacCocoaViewContainer_FocusInEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMacCocoaViewContainer_FocusInEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMacCocoaViewContainer_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMacCocoaViewContainer_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMacCocoaViewContainer_HideEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QMacCocoaViewContainer_HideEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::hideEvent(static_cast<QHideEvent*>(event));
}

void QMacCocoaViewContainer_LeaveEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QMacCocoaViewContainer_LeaveEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::leaveEvent(static_cast<QEvent*>(event));
}

void QMacCocoaViewContainer_MoveEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QMacCocoaViewContainer_MoveEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::moveEvent(static_cast<QMoveEvent*>(event));
}

void QMacCocoaViewContainer_PaintEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QMacCocoaViewContainer_PaintEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::paintEvent(static_cast<QPaintEvent*>(event));
}

void QMacCocoaViewContainer_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQMacCocoaViewContainer*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMacCocoaViewContainer_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QMacCocoaViewContainer*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMacCocoaViewContainer_ShowEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QMacCocoaViewContainer_ShowEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::showEvent(static_cast<QShowEvent*>(event));
}

void QMacCocoaViewContainer_ChangeEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QMacCocoaViewContainer_ChangeEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::changeEvent(static_cast<QEvent*>(event));
}

void QMacCocoaViewContainer_CloseEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QMacCocoaViewContainer_CloseEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::closeEvent(static_cast<QCloseEvent*>(event));
}

void QMacCocoaViewContainer_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QMacCocoaViewContainer_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QMacCocoaViewContainer_InitPainter(void* ptr, void* painter){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QMacCocoaViewContainer_InitPainterDefault(void* ptr, void* painter){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::initPainter(static_cast<QPainter*>(painter));
}

void QMacCocoaViewContainer_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMacCocoaViewContainer_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMacCocoaViewContainer_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QMacCocoaViewContainer_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QMacCocoaViewContainer_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMacCocoaViewContainer_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMacCocoaViewContainer_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMacCocoaViewContainer_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMacCocoaViewContainer_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QMacCocoaViewContainer_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QMacCocoaViewContainer_MousePressEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QMacCocoaViewContainer_MousePressEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QMacCocoaViewContainer_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QMacCocoaViewContainer_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QMacCocoaViewContainer_ResizeEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMacCocoaViewContainer_ResizeEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMacCocoaViewContainer_TabletEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMacCocoaViewContainer_TabletEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMacCocoaViewContainer_WheelEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMacCocoaViewContainer_WheelEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMacCocoaViewContainer_TimerEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QMacCocoaViewContainer_TimerEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::timerEvent(static_cast<QTimerEvent*>(event));
}

void QMacCocoaViewContainer_ChildEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QMacCocoaViewContainer_ChildEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::childEvent(static_cast<QChildEvent*>(event));
}

void QMacCocoaViewContainer_CustomEvent(void* ptr, void* event){
	static_cast<MyQMacCocoaViewContainer*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QMacCocoaViewContainer_CustomEventDefault(void* ptr, void* event){
	static_cast<QMacCocoaViewContainer*>(ptr)->QMacCocoaViewContainer::customEvent(static_cast<QEvent*>(event));
}

class MyQMacNativeWidget: public QMacNativeWidget {
public:
	void actionEvent(QActionEvent * event) { callbackQMacNativeWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQMacNativeWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQMacNativeWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQMacNativeWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQMacNativeWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQMacNativeWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQMacNativeWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQMacNativeWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQMacNativeWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQMacNativeWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQMacNativeWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQMacNativeWidgetPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQMacNativeWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QMacNativeWidget::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQMacNativeWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQMacNativeWidgetChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQMacNativeWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQMacNativeWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQMacNativeWidgetInitPainter(const_cast<MyQMacNativeWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQMacNativeWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQMacNativeWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQMacNativeWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQMacNativeWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQMacNativeWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQMacNativeWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQMacNativeWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQMacNativeWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQMacNativeWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQMacNativeWidgetWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQMacNativeWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQMacNativeWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQMacNativeWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QMacNativeWidget_Event(void* ptr, void* ev){
	return static_cast<QMacNativeWidget*>(ptr)->event(static_cast<QEvent*>(ev));
}

void* QMacNativeWidget_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QMacNativeWidget*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QMacNativeWidget*>(ptr)->sizeHint()).height());
}

void QMacNativeWidget_DestroyQMacNativeWidget(void* ptr){
	static_cast<QMacNativeWidget*>(ptr)->~QMacNativeWidget();
}

void QMacNativeWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QMacNativeWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QMacNativeWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMacNativeWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMacNativeWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMacNativeWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMacNativeWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMacNativeWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMacNativeWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QMacNativeWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::dropEvent(static_cast<QDropEvent*>(event));
}

void QMacNativeWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QMacNativeWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::enterEvent(static_cast<QEvent*>(event));
}

void QMacNativeWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMacNativeWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMacNativeWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMacNativeWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMacNativeWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QMacNativeWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QMacNativeWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QMacNativeWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::leaveEvent(static_cast<QEvent*>(event));
}

void QMacNativeWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QMacNativeWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void QMacNativeWidget_PaintEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QMacNativeWidget_PaintEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::paintEvent(static_cast<QPaintEvent*>(event));
}

void QMacNativeWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQMacNativeWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMacNativeWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QMacNativeWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMacNativeWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QMacNativeWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::showEvent(static_cast<QShowEvent*>(event));
}

void QMacNativeWidget_ChangeEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QMacNativeWidget_ChangeEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::changeEvent(static_cast<QEvent*>(event));
}

void QMacNativeWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QMacNativeWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QMacNativeWidget_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QMacNativeWidget_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QMacNativeWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQMacNativeWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QMacNativeWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::initPainter(static_cast<QPainter*>(painter));
}

void QMacNativeWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMacNativeWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMacNativeWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QMacNativeWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QMacNativeWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMacNativeWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMacNativeWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMacNativeWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMacNativeWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QMacNativeWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QMacNativeWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QMacNativeWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QMacNativeWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QMacNativeWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QMacNativeWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMacNativeWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMacNativeWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMacNativeWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMacNativeWidget_WheelEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMacNativeWidget_WheelEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMacNativeWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QMacNativeWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QMacNativeWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QMacNativeWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QMacNativeWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQMacNativeWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QMacNativeWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QMacNativeWidget*>(ptr)->QMacNativeWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQMainWindow: public QMainWindow {
public:
	MyQMainWindow(QWidget *parent, Qt::WindowFlags flags) : QMainWindow(parent, flags) {};
	void contextMenuEvent(QContextMenuEvent * event) { callbackQMainWindowContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_IconSizeChanged(const QSize & iconSize) { callbackQMainWindowIconSizeChanged(this, this->objectName().toUtf8().data(), new QSize(static_cast<QSize>(iconSize).width(), static_cast<QSize>(iconSize).height())); };
	void Signal_ToolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle) { callbackQMainWindowToolButtonStyleChanged(this, this->objectName().toUtf8().data(), toolButtonStyle); };
	void actionEvent(QActionEvent * event) { callbackQMainWindowActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQMainWindowDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQMainWindowDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQMainWindowDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQMainWindowDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQMainWindowEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQMainWindowFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQMainWindowFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQMainWindowHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQMainWindowLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQMainWindowMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQMainWindowPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQMainWindowSetVisible(this, this->objectName().toUtf8().data(), visible)) { QMainWindow::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQMainWindowShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQMainWindowChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQMainWindowCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQMainWindowInitPainter(const_cast<MyQMainWindow*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQMainWindowInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQMainWindowKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQMainWindowKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQMainWindowMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQMainWindowMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQMainWindowMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQMainWindowMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQMainWindowResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQMainWindowTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQMainWindowWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQMainWindowTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQMainWindowChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQMainWindowCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QMainWindow_DockOptions(void* ptr){
	return static_cast<QMainWindow*>(ptr)->dockOptions();
}

int QMainWindow_DocumentMode(void* ptr){
	return static_cast<QMainWindow*>(ptr)->documentMode();
}

void* QMainWindow_IconSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QMainWindow*>(ptr)->iconSize()).width(), static_cast<QSize>(static_cast<QMainWindow*>(ptr)->iconSize()).height());
}

int QMainWindow_IsAnimated(void* ptr){
	return static_cast<QMainWindow*>(ptr)->isAnimated();
}

int QMainWindow_IsDockNestingEnabled(void* ptr){
	return static_cast<QMainWindow*>(ptr)->isDockNestingEnabled();
}

void QMainWindow_SetAnimated(void* ptr, int enabled){
	QMetaObject::invokeMethod(static_cast<QMainWindow*>(ptr), "setAnimated", Q_ARG(bool, enabled != 0));
}

void QMainWindow_SetDockNestingEnabled(void* ptr, int enabled){
	QMetaObject::invokeMethod(static_cast<QMainWindow*>(ptr), "setDockNestingEnabled", Q_ARG(bool, enabled != 0));
}

void QMainWindow_SetDockOptions(void* ptr, int options){
	static_cast<QMainWindow*>(ptr)->setDockOptions(static_cast<QMainWindow::DockOption>(options));
}

void QMainWindow_SetDocumentMode(void* ptr, int enabled){
	static_cast<QMainWindow*>(ptr)->setDocumentMode(enabled != 0);
}

void QMainWindow_SetIconSize(void* ptr, void* iconSize){
	static_cast<QMainWindow*>(ptr)->setIconSize(*static_cast<QSize*>(iconSize));
}

void QMainWindow_SetTabShape(void* ptr, int tabShape){
	static_cast<QMainWindow*>(ptr)->setTabShape(static_cast<QTabWidget::TabShape>(tabShape));
}

void QMainWindow_SetToolButtonStyle(void* ptr, int toolButtonStyle){
	static_cast<QMainWindow*>(ptr)->setToolButtonStyle(static_cast<Qt::ToolButtonStyle>(toolButtonStyle));
}

void QMainWindow_SetUnifiedTitleAndToolBarOnMac(void* ptr, int set){
	QMetaObject::invokeMethod(static_cast<QMainWindow*>(ptr), "setUnifiedTitleAndToolBarOnMac", Q_ARG(bool, set != 0));
}

void QMainWindow_SplitDockWidget(void* ptr, void* first, void* second, int orientation){
	static_cast<QMainWindow*>(ptr)->splitDockWidget(static_cast<QDockWidget*>(first), static_cast<QDockWidget*>(second), static_cast<Qt::Orientation>(orientation));
}

int QMainWindow_TabShape(void* ptr){
	return static_cast<QMainWindow*>(ptr)->tabShape();
}

void QMainWindow_TabifyDockWidget(void* ptr, void* first, void* second){
	static_cast<QMainWindow*>(ptr)->tabifyDockWidget(static_cast<QDockWidget*>(first), static_cast<QDockWidget*>(second));
}

int QMainWindow_ToolButtonStyle(void* ptr){
	return static_cast<QMainWindow*>(ptr)->toolButtonStyle();
}

int QMainWindow_UnifiedTitleAndToolBarOnMac(void* ptr){
	return static_cast<QMainWindow*>(ptr)->unifiedTitleAndToolBarOnMac();
}

void* QMainWindow_NewQMainWindow(void* parent, int flags){
	return new MyQMainWindow(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(flags));
}

void QMainWindow_AddDockWidget(void* ptr, int area, void* dockwidget){
	static_cast<QMainWindow*>(ptr)->addDockWidget(static_cast<Qt::DockWidgetArea>(area), static_cast<QDockWidget*>(dockwidget));
}

void QMainWindow_AddDockWidget2(void* ptr, int area, void* dockwidget, int orientation){
	static_cast<QMainWindow*>(ptr)->addDockWidget(static_cast<Qt::DockWidgetArea>(area), static_cast<QDockWidget*>(dockwidget), static_cast<Qt::Orientation>(orientation));
}

void* QMainWindow_AddToolBar3(void* ptr, char* title){
	return static_cast<QMainWindow*>(ptr)->addToolBar(QString(title));
}

void QMainWindow_AddToolBar2(void* ptr, void* toolbar){
	static_cast<QMainWindow*>(ptr)->addToolBar(static_cast<QToolBar*>(toolbar));
}

void QMainWindow_AddToolBar(void* ptr, int area, void* toolbar){
	static_cast<QMainWindow*>(ptr)->addToolBar(static_cast<Qt::ToolBarArea>(area), static_cast<QToolBar*>(toolbar));
}

void QMainWindow_AddToolBarBreak(void* ptr, int area){
	static_cast<QMainWindow*>(ptr)->addToolBarBreak(static_cast<Qt::ToolBarArea>(area));
}

void* QMainWindow_CentralWidget(void* ptr){
	return static_cast<QMainWindow*>(ptr)->centralWidget();
}

void QMainWindow_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QMainWindow_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

int QMainWindow_Corner(void* ptr, int corner){
	return static_cast<QMainWindow*>(ptr)->corner(static_cast<Qt::Corner>(corner));
}

void* QMainWindow_CreatePopupMenu(void* ptr){
	return static_cast<QMainWindow*>(ptr)->createPopupMenu();
}

int QMainWindow_DockWidgetArea(void* ptr, void* dockwidget){
	return static_cast<QMainWindow*>(ptr)->dockWidgetArea(static_cast<QDockWidget*>(dockwidget));
}

int QMainWindow_Event(void* ptr, void* event){
	return static_cast<QMainWindow*>(ptr)->event(static_cast<QEvent*>(event));
}

void QMainWindow_ConnectIconSizeChanged(void* ptr){
	QObject::connect(static_cast<QMainWindow*>(ptr), static_cast<void (QMainWindow::*)(const QSize &)>(&QMainWindow::iconSizeChanged), static_cast<MyQMainWindow*>(ptr), static_cast<void (MyQMainWindow::*)(const QSize &)>(&MyQMainWindow::Signal_IconSizeChanged));;
}

void QMainWindow_DisconnectIconSizeChanged(void* ptr){
	QObject::disconnect(static_cast<QMainWindow*>(ptr), static_cast<void (QMainWindow::*)(const QSize &)>(&QMainWindow::iconSizeChanged), static_cast<MyQMainWindow*>(ptr), static_cast<void (MyQMainWindow::*)(const QSize &)>(&MyQMainWindow::Signal_IconSizeChanged));;
}

void QMainWindow_IconSizeChanged(void* ptr, void* iconSize){
	static_cast<QMainWindow*>(ptr)->iconSizeChanged(*static_cast<QSize*>(iconSize));
}

void QMainWindow_InsertToolBar(void* ptr, void* before, void* toolbar){
	static_cast<QMainWindow*>(ptr)->insertToolBar(static_cast<QToolBar*>(before), static_cast<QToolBar*>(toolbar));
}

void QMainWindow_InsertToolBarBreak(void* ptr, void* before){
	static_cast<QMainWindow*>(ptr)->insertToolBarBreak(static_cast<QToolBar*>(before));
}

void* QMainWindow_MenuBar(void* ptr){
	return static_cast<QMainWindow*>(ptr)->menuBar();
}

void* QMainWindow_MenuWidget(void* ptr){
	return static_cast<QMainWindow*>(ptr)->menuWidget();
}

void QMainWindow_RemoveDockWidget(void* ptr, void* dockwidget){
	static_cast<QMainWindow*>(ptr)->removeDockWidget(static_cast<QDockWidget*>(dockwidget));
}

void QMainWindow_RemoveToolBar(void* ptr, void* toolbar){
	static_cast<QMainWindow*>(ptr)->removeToolBar(static_cast<QToolBar*>(toolbar));
}

void QMainWindow_RemoveToolBarBreak(void* ptr, void* before){
	static_cast<QMainWindow*>(ptr)->removeToolBarBreak(static_cast<QToolBar*>(before));
}

int QMainWindow_RestoreDockWidget(void* ptr, void* dockwidget){
	return static_cast<QMainWindow*>(ptr)->restoreDockWidget(static_cast<QDockWidget*>(dockwidget));
}

int QMainWindow_RestoreState(void* ptr, char* state, int version){
	return static_cast<QMainWindow*>(ptr)->restoreState(QByteArray(state), version);
}

char* QMainWindow_SaveState(void* ptr, int version){
	return QString(static_cast<QMainWindow*>(ptr)->saveState(version)).toUtf8().data();
}

void QMainWindow_SetCentralWidget(void* ptr, void* widget){
	static_cast<QMainWindow*>(ptr)->setCentralWidget(static_cast<QWidget*>(widget));
}

void QMainWindow_SetCorner(void* ptr, int corner, int area){
	static_cast<QMainWindow*>(ptr)->setCorner(static_cast<Qt::Corner>(corner), static_cast<Qt::DockWidgetArea>(area));
}

void QMainWindow_SetMenuBar(void* ptr, void* menuBar){
	static_cast<QMainWindow*>(ptr)->setMenuBar(static_cast<QMenuBar*>(menuBar));
}

void QMainWindow_SetMenuWidget(void* ptr, void* menuBar){
	static_cast<QMainWindow*>(ptr)->setMenuWidget(static_cast<QWidget*>(menuBar));
}

void QMainWindow_SetStatusBar(void* ptr, void* statusbar){
	static_cast<QMainWindow*>(ptr)->setStatusBar(static_cast<QStatusBar*>(statusbar));
}

void QMainWindow_SetTabPosition(void* ptr, int areas, int tabPosition){
	static_cast<QMainWindow*>(ptr)->setTabPosition(static_cast<Qt::DockWidgetArea>(areas), static_cast<QTabWidget::TabPosition>(tabPosition));
}

void* QMainWindow_StatusBar(void* ptr){
	return static_cast<QMainWindow*>(ptr)->statusBar();
}

int QMainWindow_TabPosition(void* ptr, int area){
	return static_cast<QMainWindow*>(ptr)->tabPosition(static_cast<Qt::DockWidgetArea>(area));
}

void* QMainWindow_TakeCentralWidget(void* ptr){
	return static_cast<QMainWindow*>(ptr)->takeCentralWidget();
}

int QMainWindow_ToolBarArea(void* ptr, void* toolbar){
	return static_cast<QMainWindow*>(ptr)->toolBarArea(static_cast<QToolBar*>(toolbar));
}

int QMainWindow_ToolBarBreak(void* ptr, void* toolbar){
	return static_cast<QMainWindow*>(ptr)->toolBarBreak(static_cast<QToolBar*>(toolbar));
}

void QMainWindow_ConnectToolButtonStyleChanged(void* ptr){
	QObject::connect(static_cast<QMainWindow*>(ptr), static_cast<void (QMainWindow::*)(Qt::ToolButtonStyle)>(&QMainWindow::toolButtonStyleChanged), static_cast<MyQMainWindow*>(ptr), static_cast<void (MyQMainWindow::*)(Qt::ToolButtonStyle)>(&MyQMainWindow::Signal_ToolButtonStyleChanged));;
}

void QMainWindow_DisconnectToolButtonStyleChanged(void* ptr){
	QObject::disconnect(static_cast<QMainWindow*>(ptr), static_cast<void (QMainWindow::*)(Qt::ToolButtonStyle)>(&QMainWindow::toolButtonStyleChanged), static_cast<MyQMainWindow*>(ptr), static_cast<void (MyQMainWindow::*)(Qt::ToolButtonStyle)>(&MyQMainWindow::Signal_ToolButtonStyleChanged));;
}

void QMainWindow_ToolButtonStyleChanged(void* ptr, int toolButtonStyle){
	static_cast<QMainWindow*>(ptr)->toolButtonStyleChanged(static_cast<Qt::ToolButtonStyle>(toolButtonStyle));
}

void QMainWindow_DestroyQMainWindow(void* ptr){
	static_cast<QMainWindow*>(ptr)->~QMainWindow();
}

void QMainWindow_ActionEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QMainWindow_ActionEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::actionEvent(static_cast<QActionEvent*>(event));
}

void QMainWindow_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMainWindow_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMainWindow_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMainWindow_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMainWindow_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMainWindow_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMainWindow_DropEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QMainWindow_DropEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::dropEvent(static_cast<QDropEvent*>(event));
}

void QMainWindow_EnterEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QMainWindow_EnterEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::enterEvent(static_cast<QEvent*>(event));
}

void QMainWindow_FocusInEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMainWindow_FocusInEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMainWindow_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMainWindow_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMainWindow_HideEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QMainWindow_HideEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::hideEvent(static_cast<QHideEvent*>(event));
}

void QMainWindow_LeaveEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QMainWindow_LeaveEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::leaveEvent(static_cast<QEvent*>(event));
}

void QMainWindow_MoveEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QMainWindow_MoveEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::moveEvent(static_cast<QMoveEvent*>(event));
}

void QMainWindow_PaintEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QMainWindow_PaintEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::paintEvent(static_cast<QPaintEvent*>(event));
}

void QMainWindow_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQMainWindow*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMainWindow_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QMainWindow*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMainWindow_ShowEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QMainWindow_ShowEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::showEvent(static_cast<QShowEvent*>(event));
}

void QMainWindow_ChangeEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QMainWindow_ChangeEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::changeEvent(static_cast<QEvent*>(event));
}

void QMainWindow_CloseEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QMainWindow_CloseEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::closeEvent(static_cast<QCloseEvent*>(event));
}

void QMainWindow_InitPainter(void* ptr, void* painter){
	static_cast<MyQMainWindow*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QMainWindow_InitPainterDefault(void* ptr, void* painter){
	static_cast<QMainWindow*>(ptr)->QMainWindow::initPainter(static_cast<QPainter*>(painter));
}

void QMainWindow_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMainWindow_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMainWindow_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QMainWindow_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QMainWindow_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMainWindow_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMainWindow_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMainWindow_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMainWindow_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QMainWindow_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QMainWindow_MousePressEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QMainWindow_MousePressEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QMainWindow_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QMainWindow_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QMainWindow_ResizeEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMainWindow_ResizeEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMainWindow_TabletEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMainWindow_TabletEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMainWindow_WheelEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMainWindow_WheelEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMainWindow_TimerEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QMainWindow_TimerEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::timerEvent(static_cast<QTimerEvent*>(event));
}

void QMainWindow_ChildEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QMainWindow_ChildEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::childEvent(static_cast<QChildEvent*>(event));
}

void QMainWindow_CustomEvent(void* ptr, void* event){
	static_cast<MyQMainWindow*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QMainWindow_CustomEventDefault(void* ptr, void* event){
	static_cast<QMainWindow*>(ptr)->QMainWindow::customEvent(static_cast<QEvent*>(event));
}

class MyQMdiArea: public QMdiArea {
public:
	MyQMdiArea(QWidget *parent) : QMdiArea(parent) {};
	void childEvent(QChildEvent * childEvent) { callbackQMdiAreaChildEvent(this, this->objectName().toUtf8().data(), childEvent); };
	void paintEvent(QPaintEvent * paintEvent) { callbackQMdiAreaPaintEvent(this, this->objectName().toUtf8().data(), paintEvent); };
	void resizeEvent(QResizeEvent * resizeEvent) { callbackQMdiAreaResizeEvent(this, this->objectName().toUtf8().data(), resizeEvent); };
	void scrollContentsBy(int dx, int dy) { callbackQMdiAreaScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void setupViewport(QWidget * viewport) { if (!callbackQMdiAreaSetupViewport(this, this->objectName().toUtf8().data(), viewport)) { QMdiArea::setupViewport(viewport); }; };
	void showEvent(QShowEvent * showEvent) { callbackQMdiAreaShowEvent(this, this->objectName().toUtf8().data(), showEvent); };
	void Signal_SubWindowActivated(QMdiSubWindow * window) { callbackQMdiAreaSubWindowActivated(this, this->objectName().toUtf8().data(), window); };
	void timerEvent(QTimerEvent * timerEvent) { callbackQMdiAreaTimerEvent(this, this->objectName().toUtf8().data(), timerEvent); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQMdiAreaDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQMdiAreaDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQMdiAreaDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQMdiAreaDropEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQMdiAreaContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQMdiAreaKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseDoubleClickEvent(QMouseEvent * e) { callbackQMdiAreaMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQMdiAreaMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQMdiAreaMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQMdiAreaMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void wheelEvent(QWheelEvent * e) { callbackQMdiAreaWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQMdiAreaChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQMdiAreaActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQMdiAreaEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQMdiAreaFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQMdiAreaFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQMdiAreaHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQMdiAreaLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQMdiAreaMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQMdiAreaSetVisible(this, this->objectName().toUtf8().data(), visible)) { QMdiArea::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQMdiAreaCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQMdiAreaInitPainter(const_cast<MyQMdiArea*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQMdiAreaInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQMdiAreaKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQMdiAreaTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQMdiAreaCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QMdiArea_ActivationOrder(void* ptr){
	return static_cast<QMdiArea*>(ptr)->activationOrder();
}

void* QMdiArea_Background(void* ptr){
	return new QBrush(static_cast<QMdiArea*>(ptr)->background());
}

int QMdiArea_DocumentMode(void* ptr){
	return static_cast<QMdiArea*>(ptr)->documentMode();
}

void QMdiArea_SetActivationOrder(void* ptr, int order){
	static_cast<QMdiArea*>(ptr)->setActivationOrder(static_cast<QMdiArea::WindowOrder>(order));
}

void QMdiArea_SetBackground(void* ptr, void* background){
	static_cast<QMdiArea*>(ptr)->setBackground(*static_cast<QBrush*>(background));
}

void QMdiArea_SetDocumentMode(void* ptr, int enabled){
	static_cast<QMdiArea*>(ptr)->setDocumentMode(enabled != 0);
}

void QMdiArea_SetTabPosition(void* ptr, int position){
	static_cast<QMdiArea*>(ptr)->setTabPosition(static_cast<QTabWidget::TabPosition>(position));
}

void QMdiArea_SetTabShape(void* ptr, int shape){
	static_cast<QMdiArea*>(ptr)->setTabShape(static_cast<QTabWidget::TabShape>(shape));
}

void QMdiArea_SetTabsClosable(void* ptr, int closable){
	static_cast<QMdiArea*>(ptr)->setTabsClosable(closable != 0);
}

void QMdiArea_SetTabsMovable(void* ptr, int movable){
	static_cast<QMdiArea*>(ptr)->setTabsMovable(movable != 0);
}

void QMdiArea_SetViewMode(void* ptr, int mode){
	static_cast<QMdiArea*>(ptr)->setViewMode(static_cast<QMdiArea::ViewMode>(mode));
}

int QMdiArea_TabPosition(void* ptr){
	return static_cast<QMdiArea*>(ptr)->tabPosition();
}

int QMdiArea_TabShape(void* ptr){
	return static_cast<QMdiArea*>(ptr)->tabShape();
}

int QMdiArea_TabsClosable(void* ptr){
	return static_cast<QMdiArea*>(ptr)->tabsClosable();
}

int QMdiArea_TabsMovable(void* ptr){
	return static_cast<QMdiArea*>(ptr)->tabsMovable();
}

int QMdiArea_ViewMode(void* ptr){
	return static_cast<QMdiArea*>(ptr)->viewMode();
}

void* QMdiArea_NewQMdiArea(void* parent){
	return new MyQMdiArea(static_cast<QWidget*>(parent));
}

void QMdiArea_ActivateNextSubWindow(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMdiArea*>(ptr), "activateNextSubWindow");
}

void QMdiArea_ActivatePreviousSubWindow(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMdiArea*>(ptr), "activatePreviousSubWindow");
}

void* QMdiArea_ActiveSubWindow(void* ptr){
	return static_cast<QMdiArea*>(ptr)->activeSubWindow();
}

void* QMdiArea_AddSubWindow(void* ptr, void* widget, int windowFlags){
	return static_cast<QMdiArea*>(ptr)->addSubWindow(static_cast<QWidget*>(widget), static_cast<Qt::WindowType>(windowFlags));
}

void QMdiArea_CascadeSubWindows(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMdiArea*>(ptr), "cascadeSubWindows");
}

void QMdiArea_ChildEvent(void* ptr, void* childEvent){
	static_cast<MyQMdiArea*>(ptr)->childEvent(static_cast<QChildEvent*>(childEvent));
}

void QMdiArea_ChildEventDefault(void* ptr, void* childEvent){
	static_cast<QMdiArea*>(ptr)->QMdiArea::childEvent(static_cast<QChildEvent*>(childEvent));
}

void QMdiArea_CloseActiveSubWindow(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMdiArea*>(ptr), "closeActiveSubWindow");
}

void QMdiArea_CloseAllSubWindows(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMdiArea*>(ptr), "closeAllSubWindows");
}

void* QMdiArea_CurrentSubWindow(void* ptr){
	return static_cast<QMdiArea*>(ptr)->currentSubWindow();
}

int QMdiArea_Event(void* ptr, void* event){
	return static_cast<QMdiArea*>(ptr)->event(static_cast<QEvent*>(event));
}

int QMdiArea_EventFilter(void* ptr, void* object, void* event){
	return static_cast<QMdiArea*>(ptr)->eventFilter(static_cast<QObject*>(object), static_cast<QEvent*>(event));
}

void* QMdiArea_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QMdiArea*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QMdiArea*>(ptr)->minimumSizeHint()).height());
}

void QMdiArea_PaintEvent(void* ptr, void* paintEvent){
	static_cast<MyQMdiArea*>(ptr)->paintEvent(static_cast<QPaintEvent*>(paintEvent));
}

void QMdiArea_PaintEventDefault(void* ptr, void* paintEvent){
	static_cast<QMdiArea*>(ptr)->QMdiArea::paintEvent(static_cast<QPaintEvent*>(paintEvent));
}

void QMdiArea_RemoveSubWindow(void* ptr, void* widget){
	static_cast<QMdiArea*>(ptr)->removeSubWindow(static_cast<QWidget*>(widget));
}

void QMdiArea_ResizeEvent(void* ptr, void* resizeEvent){
	static_cast<MyQMdiArea*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(resizeEvent));
}

void QMdiArea_ResizeEventDefault(void* ptr, void* resizeEvent){
	static_cast<QMdiArea*>(ptr)->QMdiArea::resizeEvent(static_cast<QResizeEvent*>(resizeEvent));
}

void QMdiArea_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQMdiArea*>(ptr)->scrollContentsBy(dx, dy);
}

void QMdiArea_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QMdiArea*>(ptr)->QMdiArea::scrollContentsBy(dx, dy);
}

void QMdiArea_SetActiveSubWindow(void* ptr, void* window){
	QMetaObject::invokeMethod(static_cast<QMdiArea*>(ptr), "setActiveSubWindow", Q_ARG(QMdiSubWindow*, static_cast<QMdiSubWindow*>(window)));
}

void QMdiArea_SetOption(void* ptr, int option, int on){
	static_cast<QMdiArea*>(ptr)->setOption(static_cast<QMdiArea::AreaOption>(option), on != 0);
}

void QMdiArea_SetupViewport(void* ptr, void* viewport){
	QMetaObject::invokeMethod(static_cast<MyQMdiArea*>(ptr), "setupViewport", Q_ARG(QWidget*, static_cast<QWidget*>(viewport)));
}

void QMdiArea_SetupViewportDefault(void* ptr, void* viewport){
	QMetaObject::invokeMethod(static_cast<QMdiArea*>(ptr), "setupViewport", Q_ARG(QWidget*, static_cast<QWidget*>(viewport)));
}

void QMdiArea_ShowEvent(void* ptr, void* showEvent){
	static_cast<MyQMdiArea*>(ptr)->showEvent(static_cast<QShowEvent*>(showEvent));
}

void QMdiArea_ShowEventDefault(void* ptr, void* showEvent){
	static_cast<QMdiArea*>(ptr)->QMdiArea::showEvent(static_cast<QShowEvent*>(showEvent));
}

void* QMdiArea_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QMdiArea*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QMdiArea*>(ptr)->sizeHint()).height());
}

void QMdiArea_ConnectSubWindowActivated(void* ptr){
	QObject::connect(static_cast<QMdiArea*>(ptr), static_cast<void (QMdiArea::*)(QMdiSubWindow *)>(&QMdiArea::subWindowActivated), static_cast<MyQMdiArea*>(ptr), static_cast<void (MyQMdiArea::*)(QMdiSubWindow *)>(&MyQMdiArea::Signal_SubWindowActivated));;
}

void QMdiArea_DisconnectSubWindowActivated(void* ptr){
	QObject::disconnect(static_cast<QMdiArea*>(ptr), static_cast<void (QMdiArea::*)(QMdiSubWindow *)>(&QMdiArea::subWindowActivated), static_cast<MyQMdiArea*>(ptr), static_cast<void (MyQMdiArea::*)(QMdiSubWindow *)>(&MyQMdiArea::Signal_SubWindowActivated));;
}

void QMdiArea_SubWindowActivated(void* ptr, void* window){
	static_cast<QMdiArea*>(ptr)->subWindowActivated(static_cast<QMdiSubWindow*>(window));
}

int QMdiArea_TestOption(void* ptr, int option){
	return static_cast<QMdiArea*>(ptr)->testOption(static_cast<QMdiArea::AreaOption>(option));
}

void QMdiArea_TileSubWindows(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMdiArea*>(ptr), "tileSubWindows");
}

void QMdiArea_TimerEvent(void* ptr, void* timerEvent){
	static_cast<MyQMdiArea*>(ptr)->timerEvent(static_cast<QTimerEvent*>(timerEvent));
}

void QMdiArea_TimerEventDefault(void* ptr, void* timerEvent){
	static_cast<QMdiArea*>(ptr)->QMdiArea::timerEvent(static_cast<QTimerEvent*>(timerEvent));
}

int QMdiArea_ViewportEvent(void* ptr, void* event){
	return static_cast<QMdiArea*>(ptr)->viewportEvent(static_cast<QEvent*>(event));
}

void QMdiArea_DestroyQMdiArea(void* ptr){
	static_cast<QMdiArea*>(ptr)->~QMdiArea();
}

void QMdiArea_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMdiArea_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMdiArea_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMdiArea_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMdiArea_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMdiArea_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMdiArea_DropEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QMdiArea_DropEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::dropEvent(static_cast<QDropEvent*>(event));
}

void QMdiArea_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQMdiArea*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QMdiArea_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QMdiArea*>(ptr)->QMdiArea::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QMdiArea_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQMdiArea*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QMdiArea_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QMdiArea*>(ptr)->QMdiArea::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QMdiArea_MouseDoubleClickEvent(void* ptr, void* e){
	static_cast<MyQMdiArea*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QMdiArea_MouseDoubleClickEventDefault(void* ptr, void* e){
	static_cast<QMdiArea*>(ptr)->QMdiArea::mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QMdiArea_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQMdiArea*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QMdiArea_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QMdiArea*>(ptr)->QMdiArea::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QMdiArea_MousePressEvent(void* ptr, void* e){
	static_cast<MyQMdiArea*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QMdiArea_MousePressEventDefault(void* ptr, void* e){
	static_cast<QMdiArea*>(ptr)->QMdiArea::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QMdiArea_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQMdiArea*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QMdiArea_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QMdiArea*>(ptr)->QMdiArea::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QMdiArea_WheelEvent(void* ptr, void* e){
	static_cast<MyQMdiArea*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QMdiArea_WheelEventDefault(void* ptr, void* e){
	static_cast<QMdiArea*>(ptr)->QMdiArea::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QMdiArea_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQMdiArea*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QMdiArea_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QMdiArea*>(ptr)->QMdiArea::changeEvent(static_cast<QEvent*>(ev));
}

void QMdiArea_ActionEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QMdiArea_ActionEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::actionEvent(static_cast<QActionEvent*>(event));
}

void QMdiArea_EnterEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QMdiArea_EnterEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::enterEvent(static_cast<QEvent*>(event));
}

void QMdiArea_FocusInEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMdiArea_FocusInEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMdiArea_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMdiArea_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMdiArea_HideEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QMdiArea_HideEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::hideEvent(static_cast<QHideEvent*>(event));
}

void QMdiArea_LeaveEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QMdiArea_LeaveEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::leaveEvent(static_cast<QEvent*>(event));
}

void QMdiArea_MoveEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QMdiArea_MoveEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::moveEvent(static_cast<QMoveEvent*>(event));
}

void QMdiArea_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQMdiArea*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMdiArea_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QMdiArea*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMdiArea_CloseEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QMdiArea_CloseEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::closeEvent(static_cast<QCloseEvent*>(event));
}

void QMdiArea_InitPainter(void* ptr, void* painter){
	static_cast<MyQMdiArea*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QMdiArea_InitPainterDefault(void* ptr, void* painter){
	static_cast<QMdiArea*>(ptr)->QMdiArea::initPainter(static_cast<QPainter*>(painter));
}

void QMdiArea_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMdiArea_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMdiArea_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMdiArea_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMdiArea_TabletEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMdiArea_TabletEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMdiArea_CustomEvent(void* ptr, void* event){
	static_cast<MyQMdiArea*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QMdiArea_CustomEventDefault(void* ptr, void* event){
	static_cast<QMdiArea*>(ptr)->QMdiArea::customEvent(static_cast<QEvent*>(event));
}

class MyQMdiSubWindow: public QMdiSubWindow {
public:
	MyQMdiSubWindow(QWidget *parent, Qt::WindowFlags flags) : QMdiSubWindow(parent, flags) {};
	void Signal_AboutToActivate() { callbackQMdiSubWindowAboutToActivate(this, this->objectName().toUtf8().data()); };
	void changeEvent(QEvent * changeEvent) { callbackQMdiSubWindowChangeEvent(this, this->objectName().toUtf8().data(), changeEvent); };
	void childEvent(QChildEvent * childEvent) { callbackQMdiSubWindowChildEvent(this, this->objectName().toUtf8().data(), childEvent); };
	void closeEvent(QCloseEvent * closeEvent) { callbackQMdiSubWindowCloseEvent(this, this->objectName().toUtf8().data(), closeEvent); };
	void contextMenuEvent(QContextMenuEvent * contextMenuEvent) { callbackQMdiSubWindowContextMenuEvent(this, this->objectName().toUtf8().data(), contextMenuEvent); };
	void focusInEvent(QFocusEvent * focusInEvent) { callbackQMdiSubWindowFocusInEvent(this, this->objectName().toUtf8().data(), focusInEvent); };
	void focusOutEvent(QFocusEvent * focusOutEvent) { callbackQMdiSubWindowFocusOutEvent(this, this->objectName().toUtf8().data(), focusOutEvent); };
	void hideEvent(QHideEvent * hideEvent) { callbackQMdiSubWindowHideEvent(this, this->objectName().toUtf8().data(), hideEvent); };
	void keyPressEvent(QKeyEvent * keyEvent) { callbackQMdiSubWindowKeyPressEvent(this, this->objectName().toUtf8().data(), keyEvent); };
	void leaveEvent(QEvent * leaveEvent) { callbackQMdiSubWindowLeaveEvent(this, this->objectName().toUtf8().data(), leaveEvent); };
	void mouseDoubleClickEvent(QMouseEvent * mouseEvent) { callbackQMdiSubWindowMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), mouseEvent); };
	void mouseMoveEvent(QMouseEvent * mouseEvent) { callbackQMdiSubWindowMouseMoveEvent(this, this->objectName().toUtf8().data(), mouseEvent); };
	void mousePressEvent(QMouseEvent * mouseEvent) { callbackQMdiSubWindowMousePressEvent(this, this->objectName().toUtf8().data(), mouseEvent); };
	void mouseReleaseEvent(QMouseEvent * mouseEvent) { callbackQMdiSubWindowMouseReleaseEvent(this, this->objectName().toUtf8().data(), mouseEvent); };
	void moveEvent(QMoveEvent * moveEvent) { callbackQMdiSubWindowMoveEvent(this, this->objectName().toUtf8().data(), moveEvent); };
	void paintEvent(QPaintEvent * paintEvent) { callbackQMdiSubWindowPaintEvent(this, this->objectName().toUtf8().data(), paintEvent); };
	void resizeEvent(QResizeEvent * resizeEvent) { callbackQMdiSubWindowResizeEvent(this, this->objectName().toUtf8().data(), resizeEvent); };
	void showEvent(QShowEvent * showEvent) { callbackQMdiSubWindowShowEvent(this, this->objectName().toUtf8().data(), showEvent); };
	void timerEvent(QTimerEvent * timerEvent) { callbackQMdiSubWindowTimerEvent(this, this->objectName().toUtf8().data(), timerEvent); };
	void Signal_WindowStateChanged(Qt::WindowStates oldState, Qt::WindowStates newState) { callbackQMdiSubWindowWindowStateChanged(this, this->objectName().toUtf8().data(), oldState, newState); };
	void actionEvent(QActionEvent * event) { callbackQMdiSubWindowActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQMdiSubWindowDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQMdiSubWindowDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQMdiSubWindowDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQMdiSubWindowDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQMdiSubWindowEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQMdiSubWindowSetVisible(this, this->objectName().toUtf8().data(), visible)) { QMdiSubWindow::setVisible(visible); }; };
	void initPainter(QPainter * painter) const { callbackQMdiSubWindowInitPainter(const_cast<MyQMdiSubWindow*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQMdiSubWindowInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQMdiSubWindowKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQMdiSubWindowTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQMdiSubWindowWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQMdiSubWindowCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QMdiSubWindow_KeyboardPageStep(void* ptr){
	return static_cast<QMdiSubWindow*>(ptr)->keyboardPageStep();
}

int QMdiSubWindow_KeyboardSingleStep(void* ptr){
	return static_cast<QMdiSubWindow*>(ptr)->keyboardSingleStep();
}

void QMdiSubWindow_SetKeyboardPageStep(void* ptr, int step){
	static_cast<QMdiSubWindow*>(ptr)->setKeyboardPageStep(step);
}

void QMdiSubWindow_SetKeyboardSingleStep(void* ptr, int step){
	static_cast<QMdiSubWindow*>(ptr)->setKeyboardSingleStep(step);
}

void* QMdiSubWindow_NewQMdiSubWindow(void* parent, int flags){
	return new MyQMdiSubWindow(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(flags));
}

void QMdiSubWindow_ConnectAboutToActivate(void* ptr){
	QObject::connect(static_cast<QMdiSubWindow*>(ptr), static_cast<void (QMdiSubWindow::*)()>(&QMdiSubWindow::aboutToActivate), static_cast<MyQMdiSubWindow*>(ptr), static_cast<void (MyQMdiSubWindow::*)()>(&MyQMdiSubWindow::Signal_AboutToActivate));;
}

void QMdiSubWindow_DisconnectAboutToActivate(void* ptr){
	QObject::disconnect(static_cast<QMdiSubWindow*>(ptr), static_cast<void (QMdiSubWindow::*)()>(&QMdiSubWindow::aboutToActivate), static_cast<MyQMdiSubWindow*>(ptr), static_cast<void (MyQMdiSubWindow::*)()>(&MyQMdiSubWindow::Signal_AboutToActivate));;
}

void QMdiSubWindow_AboutToActivate(void* ptr){
	static_cast<QMdiSubWindow*>(ptr)->aboutToActivate();
}

void QMdiSubWindow_ChangeEvent(void* ptr, void* changeEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->changeEvent(static_cast<QEvent*>(changeEvent));
}

void QMdiSubWindow_ChangeEventDefault(void* ptr, void* changeEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::changeEvent(static_cast<QEvent*>(changeEvent));
}

void QMdiSubWindow_ChildEvent(void* ptr, void* childEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->childEvent(static_cast<QChildEvent*>(childEvent));
}

void QMdiSubWindow_ChildEventDefault(void* ptr, void* childEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::childEvent(static_cast<QChildEvent*>(childEvent));
}

void QMdiSubWindow_CloseEvent(void* ptr, void* closeEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->closeEvent(static_cast<QCloseEvent*>(closeEvent));
}

void QMdiSubWindow_CloseEventDefault(void* ptr, void* closeEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::closeEvent(static_cast<QCloseEvent*>(closeEvent));
}

void QMdiSubWindow_ContextMenuEvent(void* ptr, void* contextMenuEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(contextMenuEvent));
}

void QMdiSubWindow_ContextMenuEventDefault(void* ptr, void* contextMenuEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::contextMenuEvent(static_cast<QContextMenuEvent*>(contextMenuEvent));
}

int QMdiSubWindow_Event(void* ptr, void* event){
	return static_cast<QMdiSubWindow*>(ptr)->event(static_cast<QEvent*>(event));
}

int QMdiSubWindow_EventFilter(void* ptr, void* object, void* event){
	return static_cast<QMdiSubWindow*>(ptr)->eventFilter(static_cast<QObject*>(object), static_cast<QEvent*>(event));
}

void QMdiSubWindow_FocusInEvent(void* ptr, void* focusInEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(focusInEvent));
}

void QMdiSubWindow_FocusInEventDefault(void* ptr, void* focusInEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::focusInEvent(static_cast<QFocusEvent*>(focusInEvent));
}

void QMdiSubWindow_FocusOutEvent(void* ptr, void* focusOutEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(focusOutEvent));
}

void QMdiSubWindow_FocusOutEventDefault(void* ptr, void* focusOutEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::focusOutEvent(static_cast<QFocusEvent*>(focusOutEvent));
}

void QMdiSubWindow_HideEvent(void* ptr, void* hideEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->hideEvent(static_cast<QHideEvent*>(hideEvent));
}

void QMdiSubWindow_HideEventDefault(void* ptr, void* hideEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::hideEvent(static_cast<QHideEvent*>(hideEvent));
}

int QMdiSubWindow_IsShaded(void* ptr){
	return static_cast<QMdiSubWindow*>(ptr)->isShaded();
}

void QMdiSubWindow_KeyPressEvent(void* ptr, void* keyEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(keyEvent));
}

void QMdiSubWindow_KeyPressEventDefault(void* ptr, void* keyEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::keyPressEvent(static_cast<QKeyEvent*>(keyEvent));
}

void QMdiSubWindow_LeaveEvent(void* ptr, void* leaveEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->leaveEvent(static_cast<QEvent*>(leaveEvent));
}

void QMdiSubWindow_LeaveEventDefault(void* ptr, void* leaveEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::leaveEvent(static_cast<QEvent*>(leaveEvent));
}

void* QMdiSubWindow_MdiArea(void* ptr){
	return static_cast<QMdiSubWindow*>(ptr)->mdiArea();
}

void* QMdiSubWindow_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QMdiSubWindow*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QMdiSubWindow*>(ptr)->minimumSizeHint()).height());
}

void QMdiSubWindow_MouseDoubleClickEvent(void* ptr, void* mouseEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QMdiSubWindow_MouseDoubleClickEventDefault(void* ptr, void* mouseEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::mouseDoubleClickEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QMdiSubWindow_MouseMoveEvent(void* ptr, void* mouseEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QMdiSubWindow_MouseMoveEventDefault(void* ptr, void* mouseEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::mouseMoveEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QMdiSubWindow_MousePressEvent(void* ptr, void* mouseEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QMdiSubWindow_MousePressEventDefault(void* ptr, void* mouseEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::mousePressEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QMdiSubWindow_MouseReleaseEvent(void* ptr, void* mouseEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QMdiSubWindow_MouseReleaseEventDefault(void* ptr, void* mouseEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::mouseReleaseEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QMdiSubWindow_MoveEvent(void* ptr, void* moveEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->moveEvent(static_cast<QMoveEvent*>(moveEvent));
}

void QMdiSubWindow_MoveEventDefault(void* ptr, void* moveEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::moveEvent(static_cast<QMoveEvent*>(moveEvent));
}

void QMdiSubWindow_PaintEvent(void* ptr, void* paintEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->paintEvent(static_cast<QPaintEvent*>(paintEvent));
}

void QMdiSubWindow_PaintEventDefault(void* ptr, void* paintEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::paintEvent(static_cast<QPaintEvent*>(paintEvent));
}

void QMdiSubWindow_ResizeEvent(void* ptr, void* resizeEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(resizeEvent));
}

void QMdiSubWindow_ResizeEventDefault(void* ptr, void* resizeEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::resizeEvent(static_cast<QResizeEvent*>(resizeEvent));
}

void QMdiSubWindow_SetOption(void* ptr, int option, int on){
	static_cast<QMdiSubWindow*>(ptr)->setOption(static_cast<QMdiSubWindow::SubWindowOption>(option), on != 0);
}

void QMdiSubWindow_SetSystemMenu(void* ptr, void* systemMenu){
	static_cast<QMdiSubWindow*>(ptr)->setSystemMenu(static_cast<QMenu*>(systemMenu));
}

void QMdiSubWindow_SetWidget(void* ptr, void* widget){
	static_cast<QMdiSubWindow*>(ptr)->setWidget(static_cast<QWidget*>(widget));
}

void QMdiSubWindow_ShowEvent(void* ptr, void* showEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->showEvent(static_cast<QShowEvent*>(showEvent));
}

void QMdiSubWindow_ShowEventDefault(void* ptr, void* showEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::showEvent(static_cast<QShowEvent*>(showEvent));
}

void QMdiSubWindow_ShowShaded(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMdiSubWindow*>(ptr), "showShaded");
}

void QMdiSubWindow_ShowSystemMenu(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMdiSubWindow*>(ptr), "showSystemMenu");
}

void* QMdiSubWindow_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QMdiSubWindow*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QMdiSubWindow*>(ptr)->sizeHint()).height());
}

void* QMdiSubWindow_SystemMenu(void* ptr){
	return static_cast<QMdiSubWindow*>(ptr)->systemMenu();
}

int QMdiSubWindow_TestOption(void* ptr, int option){
	return static_cast<QMdiSubWindow*>(ptr)->testOption(static_cast<QMdiSubWindow::SubWindowOption>(option));
}

void QMdiSubWindow_TimerEvent(void* ptr, void* timerEvent){
	static_cast<MyQMdiSubWindow*>(ptr)->timerEvent(static_cast<QTimerEvent*>(timerEvent));
}

void QMdiSubWindow_TimerEventDefault(void* ptr, void* timerEvent){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::timerEvent(static_cast<QTimerEvent*>(timerEvent));
}

void* QMdiSubWindow_Widget(void* ptr){
	return static_cast<QMdiSubWindow*>(ptr)->widget();
}

void QMdiSubWindow_ConnectWindowStateChanged(void* ptr){
	QObject::connect(static_cast<QMdiSubWindow*>(ptr), static_cast<void (QMdiSubWindow::*)(Qt::WindowStates, Qt::WindowStates)>(&QMdiSubWindow::windowStateChanged), static_cast<MyQMdiSubWindow*>(ptr), static_cast<void (MyQMdiSubWindow::*)(Qt::WindowStates, Qt::WindowStates)>(&MyQMdiSubWindow::Signal_WindowStateChanged));;
}

void QMdiSubWindow_DisconnectWindowStateChanged(void* ptr){
	QObject::disconnect(static_cast<QMdiSubWindow*>(ptr), static_cast<void (QMdiSubWindow::*)(Qt::WindowStates, Qt::WindowStates)>(&QMdiSubWindow::windowStateChanged), static_cast<MyQMdiSubWindow*>(ptr), static_cast<void (MyQMdiSubWindow::*)(Qt::WindowStates, Qt::WindowStates)>(&MyQMdiSubWindow::Signal_WindowStateChanged));;
}

void QMdiSubWindow_WindowStateChanged(void* ptr, int oldState, int newState){
	static_cast<QMdiSubWindow*>(ptr)->windowStateChanged(static_cast<Qt::WindowState>(oldState), static_cast<Qt::WindowState>(newState));
}

void QMdiSubWindow_DestroyQMdiSubWindow(void* ptr){
	static_cast<QMdiSubWindow*>(ptr)->~QMdiSubWindow();
}

void QMdiSubWindow_ActionEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QMdiSubWindow_ActionEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::actionEvent(static_cast<QActionEvent*>(event));
}

void QMdiSubWindow_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMdiSubWindow_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMdiSubWindow_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMdiSubWindow_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMdiSubWindow_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMdiSubWindow_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMdiSubWindow_DropEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QMdiSubWindow_DropEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::dropEvent(static_cast<QDropEvent*>(event));
}

void QMdiSubWindow_EnterEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QMdiSubWindow_EnterEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::enterEvent(static_cast<QEvent*>(event));
}

void QMdiSubWindow_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQMdiSubWindow*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMdiSubWindow_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QMdiSubWindow*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMdiSubWindow_InitPainter(void* ptr, void* painter){
	static_cast<MyQMdiSubWindow*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QMdiSubWindow_InitPainterDefault(void* ptr, void* painter){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::initPainter(static_cast<QPainter*>(painter));
}

void QMdiSubWindow_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMdiSubWindow_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMdiSubWindow_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMdiSubWindow_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMdiSubWindow_TabletEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMdiSubWindow_TabletEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMdiSubWindow_WheelEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMdiSubWindow_WheelEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMdiSubWindow_CustomEvent(void* ptr, void* event){
	static_cast<MyQMdiSubWindow*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QMdiSubWindow_CustomEventDefault(void* ptr, void* event){
	static_cast<QMdiSubWindow*>(ptr)->QMdiSubWindow::customEvent(static_cast<QEvent*>(event));
}

class MyQMenu: public QMenu {
public:
	MyQMenu(QWidget *parent) : QMenu(parent) {};
	MyQMenu(const QString &title, QWidget *parent) : QMenu(title, parent) {};
	void Signal_AboutToHide() { callbackQMenuAboutToHide(this, this->objectName().toUtf8().data()); };
	void Signal_AboutToShow() { callbackQMenuAboutToShow(this, this->objectName().toUtf8().data()); };
	void actionEvent(QActionEvent * e) { callbackQMenuActionEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * e) { callbackQMenuChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void enterEvent(QEvent * v) { callbackQMenuEnterEvent(this, this->objectName().toUtf8().data(), v); };
	void hideEvent(QHideEvent * v) { callbackQMenuHideEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_Hovered(QAction * action) { callbackQMenuHovered(this, this->objectName().toUtf8().data(), action); };
	void keyPressEvent(QKeyEvent * e) { callbackQMenuKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void leaveEvent(QEvent * v) { callbackQMenuLeaveEvent(this, this->objectName().toUtf8().data(), v); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQMenuMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQMenuMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQMenuMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * e) { callbackQMenuPaintEvent(this, this->objectName().toUtf8().data(), e); };
	void timerEvent(QTimerEvent * e) { callbackQMenuTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_Triggered(QAction * action) { callbackQMenuTriggered(this, this->objectName().toUtf8().data(), action); };
	void wheelEvent(QWheelEvent * e) { callbackQMenuWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQMenuDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQMenuDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQMenuDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQMenuDropEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQMenuFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQMenuFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQMenuMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQMenuSetVisible(this, this->objectName().toUtf8().data(), visible)) { QMenu::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQMenuShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQMenuCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQMenuContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQMenuInitPainter(const_cast<MyQMenu*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQMenuInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQMenuKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQMenuMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQMenuResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQMenuTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQMenuChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQMenuCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QMenu_Icon(void* ptr){
	return new QIcon(static_cast<QMenu*>(ptr)->icon());
}

int QMenu_IsTearOffEnabled(void* ptr){
	return static_cast<QMenu*>(ptr)->isTearOffEnabled();
}

int QMenu_SeparatorsCollapsible(void* ptr){
	return static_cast<QMenu*>(ptr)->separatorsCollapsible();
}

void QMenu_SetIcon(void* ptr, void* icon){
	static_cast<QMenu*>(ptr)->setIcon(*static_cast<QIcon*>(icon));
}

void QMenu_SetSeparatorsCollapsible(void* ptr, int collapse){
	static_cast<QMenu*>(ptr)->setSeparatorsCollapsible(collapse != 0);
}

void QMenu_SetTearOffEnabled(void* ptr, int v){
	static_cast<QMenu*>(ptr)->setTearOffEnabled(v != 0);
}

void QMenu_SetTitle(void* ptr, char* title){
	static_cast<QMenu*>(ptr)->setTitle(QString(title));
}

void QMenu_SetToolTipsVisible(void* ptr, int visible){
	static_cast<QMenu*>(ptr)->setToolTipsVisible(visible != 0);
}

char* QMenu_Title(void* ptr){
	return static_cast<QMenu*>(ptr)->title().toUtf8().data();
}

int QMenu_ToolTipsVisible(void* ptr){
	return static_cast<QMenu*>(ptr)->toolTipsVisible();
}

void* QMenu_NewQMenu(void* parent){
	return new MyQMenu(static_cast<QWidget*>(parent));
}

void* QMenu_NewQMenu2(char* title, void* parent){
	return new MyQMenu(QString(title), static_cast<QWidget*>(parent));
}

void QMenu_ConnectAboutToHide(void* ptr){
	QObject::connect(static_cast<QMenu*>(ptr), static_cast<void (QMenu::*)()>(&QMenu::aboutToHide), static_cast<MyQMenu*>(ptr), static_cast<void (MyQMenu::*)()>(&MyQMenu::Signal_AboutToHide));;
}

void QMenu_DisconnectAboutToHide(void* ptr){
	QObject::disconnect(static_cast<QMenu*>(ptr), static_cast<void (QMenu::*)()>(&QMenu::aboutToHide), static_cast<MyQMenu*>(ptr), static_cast<void (MyQMenu::*)()>(&MyQMenu::Signal_AboutToHide));;
}

void QMenu_AboutToHide(void* ptr){
	static_cast<QMenu*>(ptr)->aboutToHide();
}

void QMenu_ConnectAboutToShow(void* ptr){
	QObject::connect(static_cast<QMenu*>(ptr), static_cast<void (QMenu::*)()>(&QMenu::aboutToShow), static_cast<MyQMenu*>(ptr), static_cast<void (MyQMenu::*)()>(&MyQMenu::Signal_AboutToShow));;
}

void QMenu_DisconnectAboutToShow(void* ptr){
	QObject::disconnect(static_cast<QMenu*>(ptr), static_cast<void (QMenu::*)()>(&QMenu::aboutToShow), static_cast<MyQMenu*>(ptr), static_cast<void (MyQMenu::*)()>(&MyQMenu::Signal_AboutToShow));;
}

void QMenu_AboutToShow(void* ptr){
	static_cast<QMenu*>(ptr)->aboutToShow();
}

void* QMenu_ActionAt(void* ptr, void* pt){
	return static_cast<QMenu*>(ptr)->actionAt(*static_cast<QPoint*>(pt));
}

void QMenu_ActionEvent(void* ptr, void* e){
	static_cast<MyQMenu*>(ptr)->actionEvent(static_cast<QActionEvent*>(e));
}

void QMenu_ActionEventDefault(void* ptr, void* e){
	static_cast<QMenu*>(ptr)->QMenu::actionEvent(static_cast<QActionEvent*>(e));
}

void* QMenu_ActionGeometry(void* ptr, void* act){
	return new QRect(static_cast<QRect>(static_cast<QMenu*>(ptr)->actionGeometry(static_cast<QAction*>(act))).x(), static_cast<QRect>(static_cast<QMenu*>(ptr)->actionGeometry(static_cast<QAction*>(act))).y(), static_cast<QRect>(static_cast<QMenu*>(ptr)->actionGeometry(static_cast<QAction*>(act))).width(), static_cast<QRect>(static_cast<QMenu*>(ptr)->actionGeometry(static_cast<QAction*>(act))).height());
}

void* QMenu_ActiveAction(void* ptr){
	return static_cast<QMenu*>(ptr)->activeAction();
}

void* QMenu_AddAction2(void* ptr, void* icon, char* text){
	return static_cast<QMenu*>(ptr)->addAction(*static_cast<QIcon*>(icon), QString(text));
}

void* QMenu_AddAction4(void* ptr, void* icon, char* text, void* receiver, char* member, void* shortcut){
	return static_cast<QMenu*>(ptr)->addAction(*static_cast<QIcon*>(icon), QString(text), static_cast<QObject*>(receiver), const_cast<const char*>(member), *static_cast<QKeySequence*>(shortcut));
}

void* QMenu_AddAction(void* ptr, char* text){
	return static_cast<QMenu*>(ptr)->addAction(QString(text));
}

void* QMenu_AddAction3(void* ptr, char* text, void* receiver, char* member, void* shortcut){
	return static_cast<QMenu*>(ptr)->addAction(QString(text), static_cast<QObject*>(receiver), const_cast<const char*>(member), *static_cast<QKeySequence*>(shortcut));
}

void* QMenu_AddMenu(void* ptr, void* menu){
	return static_cast<QMenu*>(ptr)->addMenu(static_cast<QMenu*>(menu));
}

void* QMenu_AddMenu3(void* ptr, void* icon, char* title){
	return static_cast<QMenu*>(ptr)->addMenu(*static_cast<QIcon*>(icon), QString(title));
}

void* QMenu_AddMenu2(void* ptr, char* title){
	return static_cast<QMenu*>(ptr)->addMenu(QString(title));
}

void* QMenu_AddSection2(void* ptr, void* icon, char* text){
	return static_cast<QMenu*>(ptr)->addSection(*static_cast<QIcon*>(icon), QString(text));
}

void* QMenu_AddSection(void* ptr, char* text){
	return static_cast<QMenu*>(ptr)->addSection(QString(text));
}

void* QMenu_AddSeparator(void* ptr){
	return static_cast<QMenu*>(ptr)->addSeparator();
}

void QMenu_ChangeEvent(void* ptr, void* e){
	static_cast<MyQMenu*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QMenu_ChangeEventDefault(void* ptr, void* e){
	static_cast<QMenu*>(ptr)->QMenu::changeEvent(static_cast<QEvent*>(e));
}

void QMenu_Clear(void* ptr){
	static_cast<QMenu*>(ptr)->clear();
}

void QMenu_EnterEvent(void* ptr, void* v){
	static_cast<MyQMenu*>(ptr)->enterEvent(static_cast<QEvent*>(v));
}

void QMenu_EnterEventDefault(void* ptr, void* v){
	static_cast<QMenu*>(ptr)->QMenu::enterEvent(static_cast<QEvent*>(v));
}

int QMenu_Event(void* ptr, void* e){
	return static_cast<QMenu*>(ptr)->event(static_cast<QEvent*>(e));
}

void* QMenu_Exec(void* ptr){
	return static_cast<QMenu*>(ptr)->exec();
}

void* QMenu_Exec2(void* ptr, void* p, void* action){
	return static_cast<QMenu*>(ptr)->exec(*static_cast<QPoint*>(p), static_cast<QAction*>(action));
}

int QMenu_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QMenu*>(ptr)->focusNextPrevChild(next != 0);
}

void QMenu_HideEvent(void* ptr, void* v){
	static_cast<MyQMenu*>(ptr)->hideEvent(static_cast<QHideEvent*>(v));
}

void QMenu_HideEventDefault(void* ptr, void* v){
	static_cast<QMenu*>(ptr)->QMenu::hideEvent(static_cast<QHideEvent*>(v));
}

void QMenu_HideTearOffMenu(void* ptr){
	static_cast<QMenu*>(ptr)->hideTearOffMenu();
}

void QMenu_ConnectHovered(void* ptr){
	QObject::connect(static_cast<QMenu*>(ptr), static_cast<void (QMenu::*)(QAction *)>(&QMenu::hovered), static_cast<MyQMenu*>(ptr), static_cast<void (MyQMenu::*)(QAction *)>(&MyQMenu::Signal_Hovered));;
}

void QMenu_DisconnectHovered(void* ptr){
	QObject::disconnect(static_cast<QMenu*>(ptr), static_cast<void (QMenu::*)(QAction *)>(&QMenu::hovered), static_cast<MyQMenu*>(ptr), static_cast<void (MyQMenu::*)(QAction *)>(&MyQMenu::Signal_Hovered));;
}

void QMenu_Hovered(void* ptr, void* action){
	static_cast<QMenu*>(ptr)->hovered(static_cast<QAction*>(action));
}

void* QMenu_InsertMenu(void* ptr, void* before, void* menu){
	return static_cast<QMenu*>(ptr)->insertMenu(static_cast<QAction*>(before), static_cast<QMenu*>(menu));
}

void* QMenu_InsertSection2(void* ptr, void* before, void* icon, char* text){
	return static_cast<QMenu*>(ptr)->insertSection(static_cast<QAction*>(before), *static_cast<QIcon*>(icon), QString(text));
}

void* QMenu_InsertSection(void* ptr, void* before, char* text){
	return static_cast<QMenu*>(ptr)->insertSection(static_cast<QAction*>(before), QString(text));
}

void* QMenu_InsertSeparator(void* ptr, void* before){
	return static_cast<QMenu*>(ptr)->insertSeparator(static_cast<QAction*>(before));
}

int QMenu_IsEmpty(void* ptr){
	return static_cast<QMenu*>(ptr)->isEmpty();
}

int QMenu_IsTearOffMenuVisible(void* ptr){
	return static_cast<QMenu*>(ptr)->isTearOffMenuVisible();
}

void QMenu_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQMenu*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QMenu_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QMenu*>(ptr)->QMenu::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QMenu_LeaveEvent(void* ptr, void* v){
	static_cast<MyQMenu*>(ptr)->leaveEvent(static_cast<QEvent*>(v));
}

void QMenu_LeaveEventDefault(void* ptr, void* v){
	static_cast<QMenu*>(ptr)->QMenu::leaveEvent(static_cast<QEvent*>(v));
}

void* QMenu_MenuAction(void* ptr){
	return static_cast<QMenu*>(ptr)->menuAction();
}

void QMenu_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQMenu*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QMenu_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QMenu*>(ptr)->QMenu::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QMenu_MousePressEvent(void* ptr, void* e){
	static_cast<MyQMenu*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QMenu_MousePressEventDefault(void* ptr, void* e){
	static_cast<QMenu*>(ptr)->QMenu::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QMenu_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQMenu*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QMenu_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QMenu*>(ptr)->QMenu::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QMenu_PaintEvent(void* ptr, void* e){
	static_cast<MyQMenu*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QMenu_PaintEventDefault(void* ptr, void* e){
	static_cast<QMenu*>(ptr)->QMenu::paintEvent(static_cast<QPaintEvent*>(e));
}

void QMenu_Popup(void* ptr, void* p, void* atAction){
	static_cast<QMenu*>(ptr)->popup(*static_cast<QPoint*>(p), static_cast<QAction*>(atAction));
}

void QMenu_SetActiveAction(void* ptr, void* act){
	static_cast<QMenu*>(ptr)->setActiveAction(static_cast<QAction*>(act));
}

void* QMenu_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QMenu*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QMenu*>(ptr)->sizeHint()).height());
}

void QMenu_TimerEvent(void* ptr, void* e){
	static_cast<MyQMenu*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QMenu_TimerEventDefault(void* ptr, void* e){
	static_cast<QMenu*>(ptr)->QMenu::timerEvent(static_cast<QTimerEvent*>(e));
}

void QMenu_ConnectTriggered(void* ptr){
	QObject::connect(static_cast<QMenu*>(ptr), static_cast<void (QMenu::*)(QAction *)>(&QMenu::triggered), static_cast<MyQMenu*>(ptr), static_cast<void (MyQMenu::*)(QAction *)>(&MyQMenu::Signal_Triggered));;
}

void QMenu_DisconnectTriggered(void* ptr){
	QObject::disconnect(static_cast<QMenu*>(ptr), static_cast<void (QMenu::*)(QAction *)>(&QMenu::triggered), static_cast<MyQMenu*>(ptr), static_cast<void (MyQMenu::*)(QAction *)>(&MyQMenu::Signal_Triggered));;
}

void QMenu_Triggered(void* ptr, void* action){
	static_cast<QMenu*>(ptr)->triggered(static_cast<QAction*>(action));
}

void QMenu_WheelEvent(void* ptr, void* e){
	static_cast<MyQMenu*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QMenu_WheelEventDefault(void* ptr, void* e){
	static_cast<QMenu*>(ptr)->QMenu::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QMenu_DestroyQMenu(void* ptr){
	static_cast<QMenu*>(ptr)->~QMenu();
}

void QMenu_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMenu_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMenu_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMenu_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMenu_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMenu_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMenu_DropEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QMenu_DropEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::dropEvent(static_cast<QDropEvent*>(event));
}

void QMenu_FocusInEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMenu_FocusInEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMenu_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMenu_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMenu_MoveEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QMenu_MoveEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::moveEvent(static_cast<QMoveEvent*>(event));
}

void QMenu_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQMenu*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMenu_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QMenu*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMenu_ShowEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QMenu_ShowEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::showEvent(static_cast<QShowEvent*>(event));
}

void QMenu_CloseEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QMenu_CloseEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::closeEvent(static_cast<QCloseEvent*>(event));
}

void QMenu_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QMenu_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QMenu_InitPainter(void* ptr, void* painter){
	static_cast<MyQMenu*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QMenu_InitPainterDefault(void* ptr, void* painter){
	static_cast<QMenu*>(ptr)->QMenu::initPainter(static_cast<QPainter*>(painter));
}

void QMenu_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMenu_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMenu_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMenu_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMenu_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMenu_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMenu_ResizeEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMenu_ResizeEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMenu_TabletEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMenu_TabletEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMenu_ChildEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QMenu_ChildEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::childEvent(static_cast<QChildEvent*>(event));
}

void QMenu_CustomEvent(void* ptr, void* event){
	static_cast<MyQMenu*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QMenu_CustomEventDefault(void* ptr, void* event){
	static_cast<QMenu*>(ptr)->QMenu::customEvent(static_cast<QEvent*>(event));
}

class MyQMenuBar: public QMenuBar {
public:
	MyQMenuBar(QWidget *parent) : QMenuBar(parent) {};
	void actionEvent(QActionEvent * e) { callbackQMenuBarActionEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * e) { callbackQMenuBarChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void focusInEvent(QFocusEvent * v) { callbackQMenuBarFocusInEvent(this, this->objectName().toUtf8().data(), v); };
	void focusOutEvent(QFocusEvent * v) { callbackQMenuBarFocusOutEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_Hovered(QAction * action) { callbackQMenuBarHovered(this, this->objectName().toUtf8().data(), action); };
	void keyPressEvent(QKeyEvent * e) { callbackQMenuBarKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void leaveEvent(QEvent * v) { callbackQMenuBarLeaveEvent(this, this->objectName().toUtf8().data(), v); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQMenuBarMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQMenuBarMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQMenuBarMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * e) { callbackQMenuBarPaintEvent(this, this->objectName().toUtf8().data(), e); };
	void resizeEvent(QResizeEvent * v) { callbackQMenuBarResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void setVisible(bool visible) { if (!callbackQMenuBarSetVisible(this, this->objectName().toUtf8().data(), visible)) { QMenuBar::setVisible(visible); }; };
	void timerEvent(QTimerEvent * e) { callbackQMenuBarTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_Triggered(QAction * action) { callbackQMenuBarTriggered(this, this->objectName().toUtf8().data(), action); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQMenuBarDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQMenuBarDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQMenuBarDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQMenuBarDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQMenuBarEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQMenuBarHideEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQMenuBarMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void showEvent(QShowEvent * event) { callbackQMenuBarShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQMenuBarCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQMenuBarContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQMenuBarInitPainter(const_cast<MyQMenuBar*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQMenuBarInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQMenuBarKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQMenuBarMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQMenuBarTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQMenuBarWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQMenuBarChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQMenuBarCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QMenuBar_IsDefaultUp(void* ptr){
	return static_cast<QMenuBar*>(ptr)->isDefaultUp();
}

int QMenuBar_IsNativeMenuBar(void* ptr){
	return static_cast<QMenuBar*>(ptr)->isNativeMenuBar();
}

void QMenuBar_SetCornerWidget(void* ptr, void* widget, int corner){
	static_cast<QMenuBar*>(ptr)->setCornerWidget(static_cast<QWidget*>(widget), static_cast<Qt::Corner>(corner));
}

void QMenuBar_SetDefaultUp(void* ptr, int v){
	static_cast<QMenuBar*>(ptr)->setDefaultUp(v != 0);
}

void QMenuBar_SetNativeMenuBar(void* ptr, int nativeMenuBar){
	static_cast<QMenuBar*>(ptr)->setNativeMenuBar(nativeMenuBar != 0);
}

void* QMenuBar_NewQMenuBar(void* parent){
	return new MyQMenuBar(static_cast<QWidget*>(parent));
}

void* QMenuBar_ActionAt(void* ptr, void* pt){
	return static_cast<QMenuBar*>(ptr)->actionAt(*static_cast<QPoint*>(pt));
}

void QMenuBar_ActionEvent(void* ptr, void* e){
	static_cast<MyQMenuBar*>(ptr)->actionEvent(static_cast<QActionEvent*>(e));
}

void QMenuBar_ActionEventDefault(void* ptr, void* e){
	static_cast<QMenuBar*>(ptr)->QMenuBar::actionEvent(static_cast<QActionEvent*>(e));
}

void* QMenuBar_ActionGeometry(void* ptr, void* act){
	return new QRect(static_cast<QRect>(static_cast<QMenuBar*>(ptr)->actionGeometry(static_cast<QAction*>(act))).x(), static_cast<QRect>(static_cast<QMenuBar*>(ptr)->actionGeometry(static_cast<QAction*>(act))).y(), static_cast<QRect>(static_cast<QMenuBar*>(ptr)->actionGeometry(static_cast<QAction*>(act))).width(), static_cast<QRect>(static_cast<QMenuBar*>(ptr)->actionGeometry(static_cast<QAction*>(act))).height());
}

void* QMenuBar_ActiveAction(void* ptr){
	return static_cast<QMenuBar*>(ptr)->activeAction();
}

void* QMenuBar_AddAction(void* ptr, char* text){
	return static_cast<QMenuBar*>(ptr)->addAction(QString(text));
}

void* QMenuBar_AddAction2(void* ptr, char* text, void* receiver, char* member){
	return static_cast<QMenuBar*>(ptr)->addAction(QString(text), static_cast<QObject*>(receiver), const_cast<const char*>(member));
}

void* QMenuBar_AddMenu(void* ptr, void* menu){
	return static_cast<QMenuBar*>(ptr)->addMenu(static_cast<QMenu*>(menu));
}

void* QMenuBar_AddMenu3(void* ptr, void* icon, char* title){
	return static_cast<QMenuBar*>(ptr)->addMenu(*static_cast<QIcon*>(icon), QString(title));
}

void* QMenuBar_AddMenu2(void* ptr, char* title){
	return static_cast<QMenuBar*>(ptr)->addMenu(QString(title));
}

void* QMenuBar_AddSeparator(void* ptr){
	return static_cast<QMenuBar*>(ptr)->addSeparator();
}

void QMenuBar_ChangeEvent(void* ptr, void* e){
	static_cast<MyQMenuBar*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QMenuBar_ChangeEventDefault(void* ptr, void* e){
	static_cast<QMenuBar*>(ptr)->QMenuBar::changeEvent(static_cast<QEvent*>(e));
}

void QMenuBar_Clear(void* ptr){
	static_cast<QMenuBar*>(ptr)->clear();
}

void* QMenuBar_CornerWidget(void* ptr, int corner){
	return static_cast<QMenuBar*>(ptr)->cornerWidget(static_cast<Qt::Corner>(corner));
}

int QMenuBar_Event(void* ptr, void* e){
	return static_cast<QMenuBar*>(ptr)->event(static_cast<QEvent*>(e));
}

int QMenuBar_EventFilter(void* ptr, void* object, void* event){
	return static_cast<QMenuBar*>(ptr)->eventFilter(static_cast<QObject*>(object), static_cast<QEvent*>(event));
}

void QMenuBar_FocusInEvent(void* ptr, void* v){
	static_cast<MyQMenuBar*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(v));
}

void QMenuBar_FocusInEventDefault(void* ptr, void* v){
	static_cast<QMenuBar*>(ptr)->QMenuBar::focusInEvent(static_cast<QFocusEvent*>(v));
}

void QMenuBar_FocusOutEvent(void* ptr, void* v){
	static_cast<MyQMenuBar*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(v));
}

void QMenuBar_FocusOutEventDefault(void* ptr, void* v){
	static_cast<QMenuBar*>(ptr)->QMenuBar::focusOutEvent(static_cast<QFocusEvent*>(v));
}

int QMenuBar_HeightForWidth(void* ptr, int v){
	return static_cast<QMenuBar*>(ptr)->heightForWidth(v);
}

void QMenuBar_ConnectHovered(void* ptr){
	QObject::connect(static_cast<QMenuBar*>(ptr), static_cast<void (QMenuBar::*)(QAction *)>(&QMenuBar::hovered), static_cast<MyQMenuBar*>(ptr), static_cast<void (MyQMenuBar::*)(QAction *)>(&MyQMenuBar::Signal_Hovered));;
}

void QMenuBar_DisconnectHovered(void* ptr){
	QObject::disconnect(static_cast<QMenuBar*>(ptr), static_cast<void (QMenuBar::*)(QAction *)>(&QMenuBar::hovered), static_cast<MyQMenuBar*>(ptr), static_cast<void (MyQMenuBar::*)(QAction *)>(&MyQMenuBar::Signal_Hovered));;
}

void QMenuBar_Hovered(void* ptr, void* action){
	static_cast<QMenuBar*>(ptr)->hovered(static_cast<QAction*>(action));
}

void* QMenuBar_InsertMenu(void* ptr, void* before, void* menu){
	return static_cast<QMenuBar*>(ptr)->insertMenu(static_cast<QAction*>(before), static_cast<QMenu*>(menu));
}

void* QMenuBar_InsertSeparator(void* ptr, void* before){
	return static_cast<QMenuBar*>(ptr)->insertSeparator(static_cast<QAction*>(before));
}

void QMenuBar_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQMenuBar*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QMenuBar_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QMenuBar*>(ptr)->QMenuBar::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QMenuBar_LeaveEvent(void* ptr, void* v){
	static_cast<MyQMenuBar*>(ptr)->leaveEvent(static_cast<QEvent*>(v));
}

void QMenuBar_LeaveEventDefault(void* ptr, void* v){
	static_cast<QMenuBar*>(ptr)->QMenuBar::leaveEvent(static_cast<QEvent*>(v));
}

void* QMenuBar_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QMenuBar*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QMenuBar*>(ptr)->minimumSizeHint()).height());
}

void QMenuBar_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQMenuBar*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QMenuBar_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QMenuBar*>(ptr)->QMenuBar::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QMenuBar_MousePressEvent(void* ptr, void* e){
	static_cast<MyQMenuBar*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QMenuBar_MousePressEventDefault(void* ptr, void* e){
	static_cast<QMenuBar*>(ptr)->QMenuBar::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QMenuBar_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQMenuBar*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QMenuBar_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QMenuBar*>(ptr)->QMenuBar::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QMenuBar_PaintEvent(void* ptr, void* e){
	static_cast<MyQMenuBar*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QMenuBar_PaintEventDefault(void* ptr, void* e){
	static_cast<QMenuBar*>(ptr)->QMenuBar::paintEvent(static_cast<QPaintEvent*>(e));
}

void QMenuBar_ResizeEvent(void* ptr, void* v){
	static_cast<MyQMenuBar*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QMenuBar_ResizeEventDefault(void* ptr, void* v){
	static_cast<QMenuBar*>(ptr)->QMenuBar::resizeEvent(static_cast<QResizeEvent*>(v));
}

void QMenuBar_SetActiveAction(void* ptr, void* act){
	static_cast<QMenuBar*>(ptr)->setActiveAction(static_cast<QAction*>(act));
}

void QMenuBar_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQMenuBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMenuBar_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QMenuBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void* QMenuBar_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QMenuBar*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QMenuBar*>(ptr)->sizeHint()).height());
}

void QMenuBar_TimerEvent(void* ptr, void* e){
	static_cast<MyQMenuBar*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QMenuBar_TimerEventDefault(void* ptr, void* e){
	static_cast<QMenuBar*>(ptr)->QMenuBar::timerEvent(static_cast<QTimerEvent*>(e));
}

void QMenuBar_ConnectTriggered(void* ptr){
	QObject::connect(static_cast<QMenuBar*>(ptr), static_cast<void (QMenuBar::*)(QAction *)>(&QMenuBar::triggered), static_cast<MyQMenuBar*>(ptr), static_cast<void (MyQMenuBar::*)(QAction *)>(&MyQMenuBar::Signal_Triggered));;
}

void QMenuBar_DisconnectTriggered(void* ptr){
	QObject::disconnect(static_cast<QMenuBar*>(ptr), static_cast<void (QMenuBar::*)(QAction *)>(&QMenuBar::triggered), static_cast<MyQMenuBar*>(ptr), static_cast<void (MyQMenuBar::*)(QAction *)>(&MyQMenuBar::Signal_Triggered));;
}

void QMenuBar_Triggered(void* ptr, void* action){
	static_cast<QMenuBar*>(ptr)->triggered(static_cast<QAction*>(action));
}

void QMenuBar_DestroyQMenuBar(void* ptr){
	static_cast<QMenuBar*>(ptr)->~QMenuBar();
}

void QMenuBar_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMenuBar_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMenuBar_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMenuBar_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMenuBar_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMenuBar_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMenuBar_DropEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QMenuBar_DropEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::dropEvent(static_cast<QDropEvent*>(event));
}

void QMenuBar_EnterEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QMenuBar_EnterEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::enterEvent(static_cast<QEvent*>(event));
}

void QMenuBar_HideEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QMenuBar_HideEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::hideEvent(static_cast<QHideEvent*>(event));
}

void QMenuBar_MoveEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QMenuBar_MoveEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::moveEvent(static_cast<QMoveEvent*>(event));
}

void QMenuBar_ShowEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QMenuBar_ShowEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::showEvent(static_cast<QShowEvent*>(event));
}

void QMenuBar_CloseEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QMenuBar_CloseEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::closeEvent(static_cast<QCloseEvent*>(event));
}

void QMenuBar_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QMenuBar_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QMenuBar_InitPainter(void* ptr, void* painter){
	static_cast<MyQMenuBar*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QMenuBar_InitPainterDefault(void* ptr, void* painter){
	static_cast<QMenuBar*>(ptr)->QMenuBar::initPainter(static_cast<QPainter*>(painter));
}

void QMenuBar_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMenuBar_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMenuBar_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMenuBar_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMenuBar_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMenuBar_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMenuBar_TabletEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMenuBar_TabletEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMenuBar_WheelEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMenuBar_WheelEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMenuBar_ChildEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QMenuBar_ChildEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::childEvent(static_cast<QChildEvent*>(event));
}

void QMenuBar_CustomEvent(void* ptr, void* event){
	static_cast<MyQMenuBar*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QMenuBar_CustomEventDefault(void* ptr, void* event){
	static_cast<QMenuBar*>(ptr)->QMenuBar::customEvent(static_cast<QEvent*>(event));
}

class MyQMessageBox: public QMessageBox {
public:
	MyQMessageBox(Icon icon, const QString &title, const QString &text, StandardButtons buttons, QWidget *parent, Qt::WindowFlags f) : QMessageBox(icon, title, text, buttons, parent, f) {};
	MyQMessageBox(QWidget *parent) : QMessageBox(parent) {};
	void Signal_ButtonClicked(QAbstractButton * button) { callbackQMessageBoxButtonClicked(this, this->objectName().toUtf8().data(), button); };
	void changeEvent(QEvent * ev) { callbackQMessageBoxChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void closeEvent(QCloseEvent * e) { callbackQMessageBoxCloseEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQMessageBoxKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void resizeEvent(QResizeEvent * event) { callbackQMessageBoxResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQMessageBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QMessageBox::setVisible(visible); }; };
	void showEvent(QShowEvent * e) { callbackQMessageBoxShowEvent(this, this->objectName().toUtf8().data(), e); };
	void accept() { if (!callbackQMessageBoxAccept(this, this->objectName().toUtf8().data())) { QMessageBox::accept(); }; };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQMessageBoxContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void done(int r) { if (!callbackQMessageBoxDone(this, this->objectName().toUtf8().data(), r)) { QMessageBox::done(r); }; };
	void reject() { if (!callbackQMessageBoxReject(this, this->objectName().toUtf8().data())) { QMessageBox::reject(); }; };
	void actionEvent(QActionEvent * event) { callbackQMessageBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQMessageBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQMessageBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQMessageBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQMessageBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQMessageBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQMessageBoxFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQMessageBoxFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQMessageBoxHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQMessageBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQMessageBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQMessageBoxPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQMessageBoxInitPainter(const_cast<MyQMessageBox*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQMessageBoxInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQMessageBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQMessageBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQMessageBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQMessageBoxMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQMessageBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQMessageBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQMessageBoxWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQMessageBoxTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQMessageBoxChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQMessageBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QMessageBox_ButtonMask_Type(){
	return QMessageBox::ButtonMask;
}

char* QMessageBox_DetailedText(void* ptr){
	return static_cast<QMessageBox*>(ptr)->detailedText().toUtf8().data();
}

int QMessageBox_Icon(void* ptr){
	return static_cast<QMessageBox*>(ptr)->icon();
}

void* QMessageBox_IconPixmap(void* ptr){
	return new QPixmap(static_cast<QMessageBox*>(ptr)->iconPixmap());
}

char* QMessageBox_InformativeText(void* ptr){
	return static_cast<QMessageBox*>(ptr)->informativeText().toUtf8().data();
}

void QMessageBox_SetDetailedText(void* ptr, char* text){
	static_cast<QMessageBox*>(ptr)->setDetailedText(QString(text));
}

void QMessageBox_SetIcon(void* ptr, int v){
	static_cast<QMessageBox*>(ptr)->setIcon(static_cast<QMessageBox::Icon>(v));
}

void QMessageBox_SetIconPixmap(void* ptr, void* pixmap){
	static_cast<QMessageBox*>(ptr)->setIconPixmap(*static_cast<QPixmap*>(pixmap));
}

void QMessageBox_SetInformativeText(void* ptr, char* text){
	static_cast<QMessageBox*>(ptr)->setInformativeText(QString(text));
}

void QMessageBox_SetStandardButtons(void* ptr, int buttons){
	static_cast<QMessageBox*>(ptr)->setStandardButtons(static_cast<QMessageBox::StandardButton>(buttons));
}

void QMessageBox_SetText(void* ptr, char* text){
	static_cast<QMessageBox*>(ptr)->setText(QString(text));
}

void QMessageBox_SetTextFormat(void* ptr, int format){
	static_cast<QMessageBox*>(ptr)->setTextFormat(static_cast<Qt::TextFormat>(format));
}

void QMessageBox_SetTextInteractionFlags(void* ptr, int flags){
	static_cast<QMessageBox*>(ptr)->setTextInteractionFlags(static_cast<Qt::TextInteractionFlag>(flags));
}

int QMessageBox_StandardButtons(void* ptr){
	return static_cast<QMessageBox*>(ptr)->standardButtons();
}

char* QMessageBox_Text(void* ptr){
	return static_cast<QMessageBox*>(ptr)->text().toUtf8().data();
}

int QMessageBox_TextFormat(void* ptr){
	return static_cast<QMessageBox*>(ptr)->textFormat();
}

int QMessageBox_TextInteractionFlags(void* ptr){
	return static_cast<QMessageBox*>(ptr)->textInteractionFlags();
}

void* QMessageBox_NewQMessageBox2(int icon, char* title, char* text, int buttons, void* parent, int f){
	return new MyQMessageBox(static_cast<QMessageBox::Icon>(icon), QString(title), QString(text), static_cast<QMessageBox::StandardButton>(buttons), static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

void* QMessageBox_NewQMessageBox(void* parent){
	return new MyQMessageBox(static_cast<QWidget*>(parent));
}

void QMessageBox_QMessageBox_About(void* parent, char* title, char* text){
	QMessageBox::about(static_cast<QWidget*>(parent), QString(title), QString(text));
}

void QMessageBox_QMessageBox_AboutQt(void* parent, char* title){
	QMessageBox::aboutQt(static_cast<QWidget*>(parent), QString(title));
}

void* QMessageBox_AddButton3(void* ptr, int button){
	return static_cast<QMessageBox*>(ptr)->addButton(static_cast<QMessageBox::StandardButton>(button));
}

void* QMessageBox_AddButton2(void* ptr, char* text, int role){
	return static_cast<QMessageBox*>(ptr)->addButton(QString(text), static_cast<QMessageBox::ButtonRole>(role));
}

void QMessageBox_AddButton(void* ptr, void* button, int role){
	static_cast<QMessageBox*>(ptr)->addButton(static_cast<QAbstractButton*>(button), static_cast<QMessageBox::ButtonRole>(role));
}

void* QMessageBox_Button(void* ptr, int which){
	return static_cast<QMessageBox*>(ptr)->button(static_cast<QMessageBox::StandardButton>(which));
}

void QMessageBox_ConnectButtonClicked(void* ptr){
	QObject::connect(static_cast<QMessageBox*>(ptr), static_cast<void (QMessageBox::*)(QAbstractButton *)>(&QMessageBox::buttonClicked), static_cast<MyQMessageBox*>(ptr), static_cast<void (MyQMessageBox::*)(QAbstractButton *)>(&MyQMessageBox::Signal_ButtonClicked));;
}

void QMessageBox_DisconnectButtonClicked(void* ptr){
	QObject::disconnect(static_cast<QMessageBox*>(ptr), static_cast<void (QMessageBox::*)(QAbstractButton *)>(&QMessageBox::buttonClicked), static_cast<MyQMessageBox*>(ptr), static_cast<void (MyQMessageBox::*)(QAbstractButton *)>(&MyQMessageBox::Signal_ButtonClicked));;
}

void QMessageBox_ButtonClicked(void* ptr, void* button){
	static_cast<QMessageBox*>(ptr)->buttonClicked(static_cast<QAbstractButton*>(button));
}

int QMessageBox_ButtonRole(void* ptr, void* button){
	return static_cast<QMessageBox*>(ptr)->buttonRole(static_cast<QAbstractButton*>(button));
}

void QMessageBox_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQMessageBox*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QMessageBox_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QMessageBox*>(ptr)->QMessageBox::changeEvent(static_cast<QEvent*>(ev));
}

void* QMessageBox_CheckBox(void* ptr){
	return static_cast<QMessageBox*>(ptr)->checkBox();
}

void* QMessageBox_ClickedButton(void* ptr){
	return static_cast<QMessageBox*>(ptr)->clickedButton();
}

void QMessageBox_CloseEvent(void* ptr, void* e){
	static_cast<MyQMessageBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(e));
}

void QMessageBox_CloseEventDefault(void* ptr, void* e){
	static_cast<QMessageBox*>(ptr)->QMessageBox::closeEvent(static_cast<QCloseEvent*>(e));
}

int QMessageBox_QMessageBox_Critical(void* parent, char* title, char* text, int buttons, int defaultButton){
	return QMessageBox::critical(static_cast<QWidget*>(parent), QString(title), QString(text), static_cast<QMessageBox::StandardButton>(buttons), static_cast<QMessageBox::StandardButton>(defaultButton));
}

void* QMessageBox_DefaultButton(void* ptr){
	return static_cast<QMessageBox*>(ptr)->defaultButton();
}

void* QMessageBox_EscapeButton(void* ptr){
	return static_cast<QMessageBox*>(ptr)->escapeButton();
}

int QMessageBox_Event(void* ptr, void* e){
	return static_cast<QMessageBox*>(ptr)->event(static_cast<QEvent*>(e));
}

int QMessageBox_Exec(void* ptr){
	return QMetaObject::invokeMethod(static_cast<QMessageBox*>(ptr), "exec");
}

int QMessageBox_QMessageBox_Information(void* parent, char* title, char* text, int buttons, int defaultButton){
	return QMessageBox::information(static_cast<QWidget*>(parent), QString(title), QString(text), static_cast<QMessageBox::StandardButton>(buttons), static_cast<QMessageBox::StandardButton>(defaultButton));
}

void QMessageBox_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQMessageBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QMessageBox_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QMessageBox*>(ptr)->QMessageBox::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QMessageBox_Open(void* ptr, void* receiver, char* member){
	static_cast<QMessageBox*>(ptr)->open(static_cast<QObject*>(receiver), const_cast<const char*>(member));
}

int QMessageBox_QMessageBox_Question(void* parent, char* title, char* text, int buttons, int defaultButton){
	return QMessageBox::question(static_cast<QWidget*>(parent), QString(title), QString(text), static_cast<QMessageBox::StandardButton>(buttons), static_cast<QMessageBox::StandardButton>(defaultButton));
}

void QMessageBox_RemoveButton(void* ptr, void* button){
	static_cast<QMessageBox*>(ptr)->removeButton(static_cast<QAbstractButton*>(button));
}

void QMessageBox_ResizeEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMessageBox_ResizeEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QMessageBox_SetCheckBox(void* ptr, void* cb){
	static_cast<QMessageBox*>(ptr)->setCheckBox(static_cast<QCheckBox*>(cb));
}

void QMessageBox_SetDefaultButton(void* ptr, void* button){
	static_cast<QMessageBox*>(ptr)->setDefaultButton(static_cast<QPushButton*>(button));
}

void QMessageBox_SetDefaultButton2(void* ptr, int button){
	static_cast<QMessageBox*>(ptr)->setDefaultButton(static_cast<QMessageBox::StandardButton>(button));
}

void QMessageBox_SetEscapeButton(void* ptr, void* button){
	static_cast<QMessageBox*>(ptr)->setEscapeButton(static_cast<QAbstractButton*>(button));
}

void QMessageBox_SetEscapeButton2(void* ptr, int button){
	static_cast<QMessageBox*>(ptr)->setEscapeButton(static_cast<QMessageBox::StandardButton>(button));
}

void QMessageBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQMessageBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMessageBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QMessageBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QMessageBox_SetWindowModality(void* ptr, int windowModality){
	static_cast<QMessageBox*>(ptr)->setWindowModality(static_cast<Qt::WindowModality>(windowModality));
}

void QMessageBox_SetWindowTitle(void* ptr, char* title){
	static_cast<QMessageBox*>(ptr)->setWindowTitle(QString(title));
}

void QMessageBox_ShowEvent(void* ptr, void* e){
	static_cast<MyQMessageBox*>(ptr)->showEvent(static_cast<QShowEvent*>(e));
}

void QMessageBox_ShowEventDefault(void* ptr, void* e){
	static_cast<QMessageBox*>(ptr)->QMessageBox::showEvent(static_cast<QShowEvent*>(e));
}

int QMessageBox_StandardButton(void* ptr, void* button){
	return static_cast<QMessageBox*>(ptr)->standardButton(static_cast<QAbstractButton*>(button));
}

int QMessageBox_QMessageBox_Warning(void* parent, char* title, char* text, int buttons, int defaultButton){
	return QMessageBox::warning(static_cast<QWidget*>(parent), QString(title), QString(text), static_cast<QMessageBox::StandardButton>(buttons), static_cast<QMessageBox::StandardButton>(defaultButton));
}

void QMessageBox_DestroyQMessageBox(void* ptr){
	static_cast<QMessageBox*>(ptr)->~QMessageBox();
}

void QMessageBox_Accept(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQMessageBox*>(ptr), "accept");
}

void QMessageBox_AcceptDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMessageBox*>(ptr), "accept");
}

void QMessageBox_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQMessageBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QMessageBox_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QMessageBox*>(ptr)->QMessageBox::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QMessageBox_Done(void* ptr, int r){
	QMetaObject::invokeMethod(static_cast<MyQMessageBox*>(ptr), "done", Q_ARG(int, r));
}

void QMessageBox_DoneDefault(void* ptr, int r){
	QMetaObject::invokeMethod(static_cast<QMessageBox*>(ptr), "done", Q_ARG(int, r));
}

void QMessageBox_Reject(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQMessageBox*>(ptr), "reject");
}

void QMessageBox_RejectDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QMessageBox*>(ptr), "reject");
}

void QMessageBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QMessageBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QMessageBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMessageBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QMessageBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMessageBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QMessageBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMessageBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QMessageBox_DropEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QMessageBox_DropEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QMessageBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QMessageBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::enterEvent(static_cast<QEvent*>(event));
}

void QMessageBox_FocusInEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMessageBox_FocusInEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QMessageBox_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMessageBox_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QMessageBox_HideEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QMessageBox_HideEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::hideEvent(static_cast<QHideEvent*>(event));
}

void QMessageBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QMessageBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::leaveEvent(static_cast<QEvent*>(event));
}

void QMessageBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QMessageBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QMessageBox_PaintEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QMessageBox_PaintEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::paintEvent(static_cast<QPaintEvent*>(event));
}

void QMessageBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQMessageBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QMessageBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QMessageBox*>(ptr)->QMessageBox::initPainter(static_cast<QPainter*>(painter));
}

void QMessageBox_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMessageBox_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QMessageBox_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMessageBox_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QMessageBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMessageBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QMessageBox_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QMessageBox_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QMessageBox_MousePressEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QMessageBox_MousePressEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QMessageBox_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QMessageBox_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QMessageBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMessageBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QMessageBox_WheelEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMessageBox_WheelEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QMessageBox_TimerEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QMessageBox_TimerEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::timerEvent(static_cast<QTimerEvent*>(event));
}

void QMessageBox_ChildEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QMessageBox_ChildEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::childEvent(static_cast<QChildEvent*>(event));
}

void QMessageBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQMessageBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QMessageBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QMessageBox*>(ptr)->QMessageBox::customEvent(static_cast<QEvent*>(event));
}

class MyQMouseEventTransition: public QMouseEventTransition {
public:
	MyQMouseEventTransition(QObject *object, QEvent::Type type, Qt::MouseButton button, QState *sourceState) : QMouseEventTransition(object, type, button, sourceState) {};
	MyQMouseEventTransition(QState *sourceState) : QMouseEventTransition(sourceState) {};
	void onTransition(QEvent * event) { callbackQMouseEventTransitionOnTransition(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQMouseEventTransitionTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQMouseEventTransitionChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQMouseEventTransitionCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QMouseEventTransition_NewQMouseEventTransition2(void* object, int ty, int button, void* sourceState){
	return new MyQMouseEventTransition(static_cast<QObject*>(object), static_cast<QEvent::Type>(ty), static_cast<Qt::MouseButton>(button), static_cast<QState*>(sourceState));
}

void* QMouseEventTransition_NewQMouseEventTransition(void* sourceState){
	return new MyQMouseEventTransition(static_cast<QState*>(sourceState));
}

int QMouseEventTransition_Button(void* ptr){
	return static_cast<QMouseEventTransition*>(ptr)->button();
}

int QMouseEventTransition_EventTest(void* ptr, void* event){
	return static_cast<QMouseEventTransition*>(ptr)->eventTest(static_cast<QEvent*>(event));
}

void* QMouseEventTransition_HitTestPath(void* ptr){
	return new QPainterPath(static_cast<QMouseEventTransition*>(ptr)->hitTestPath());
}

int QMouseEventTransition_ModifierMask(void* ptr){
	return static_cast<QMouseEventTransition*>(ptr)->modifierMask();
}

void QMouseEventTransition_OnTransition(void* ptr, void* event){
	static_cast<MyQMouseEventTransition*>(ptr)->onTransition(static_cast<QEvent*>(event));
}

void QMouseEventTransition_OnTransitionDefault(void* ptr, void* event){
	static_cast<QMouseEventTransition*>(ptr)->QMouseEventTransition::onTransition(static_cast<QEvent*>(event));
}

void QMouseEventTransition_SetButton(void* ptr, int button){
	static_cast<QMouseEventTransition*>(ptr)->setButton(static_cast<Qt::MouseButton>(button));
}

void QMouseEventTransition_SetHitTestPath(void* ptr, void* path){
	static_cast<QMouseEventTransition*>(ptr)->setHitTestPath(*static_cast<QPainterPath*>(path));
}

void QMouseEventTransition_SetModifierMask(void* ptr, int modifierMask){
	static_cast<QMouseEventTransition*>(ptr)->setModifierMask(static_cast<Qt::KeyboardModifier>(modifierMask));
}

void QMouseEventTransition_DestroyQMouseEventTransition(void* ptr){
	static_cast<QMouseEventTransition*>(ptr)->~QMouseEventTransition();
}

void QMouseEventTransition_TimerEvent(void* ptr, void* event){
	static_cast<MyQMouseEventTransition*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QMouseEventTransition_TimerEventDefault(void* ptr, void* event){
	static_cast<QMouseEventTransition*>(ptr)->QMouseEventTransition::timerEvent(static_cast<QTimerEvent*>(event));
}

void QMouseEventTransition_ChildEvent(void* ptr, void* event){
	static_cast<MyQMouseEventTransition*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QMouseEventTransition_ChildEventDefault(void* ptr, void* event){
	static_cast<QMouseEventTransition*>(ptr)->QMouseEventTransition::childEvent(static_cast<QChildEvent*>(event));
}

void QMouseEventTransition_CustomEvent(void* ptr, void* event){
	static_cast<MyQMouseEventTransition*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QMouseEventTransition_CustomEventDefault(void* ptr, void* event){
	static_cast<QMouseEventTransition*>(ptr)->QMouseEventTransition::customEvent(static_cast<QEvent*>(event));
}

double QPanGesture_Acceleration(void* ptr){
	return static_cast<double>(static_cast<QPanGesture*>(ptr)->acceleration());
}

void QPanGesture_SetAcceleration(void* ptr, double value){
	static_cast<QPanGesture*>(ptr)->setAcceleration(static_cast<double>(value));
}

void QPanGesture_SetLastOffset(void* ptr, void* value){
	static_cast<QPanGesture*>(ptr)->setLastOffset(*static_cast<QPointF*>(value));
}

void QPanGesture_SetOffset(void* ptr, void* value){
	static_cast<QPanGesture*>(ptr)->setOffset(*static_cast<QPointF*>(value));
}

void QPanGesture_DestroyQPanGesture(void* ptr){
	static_cast<QPanGesture*>(ptr)->~QPanGesture();
}

void QPanGesture_TimerEvent(void* ptr, void* event){
	static_cast<QPanGesture*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QPanGesture_TimerEventDefault(void* ptr, void* event){
	static_cast<QPanGesture*>(ptr)->QPanGesture::timerEvent(static_cast<QTimerEvent*>(event));
}

void QPanGesture_ChildEvent(void* ptr, void* event){
	static_cast<QPanGesture*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QPanGesture_ChildEventDefault(void* ptr, void* event){
	static_cast<QPanGesture*>(ptr)->QPanGesture::childEvent(static_cast<QChildEvent*>(event));
}

void QPanGesture_CustomEvent(void* ptr, void* event){
	static_cast<QPanGesture*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QPanGesture_CustomEventDefault(void* ptr, void* event){
	static_cast<QPanGesture*>(ptr)->QPanGesture::customEvent(static_cast<QEvent*>(event));
}

int QPinchGesture_ChangeFlags(void* ptr){
	return static_cast<QPinchGesture*>(ptr)->changeFlags();
}

double QPinchGesture_LastRotationAngle(void* ptr){
	return static_cast<double>(static_cast<QPinchGesture*>(ptr)->lastRotationAngle());
}

double QPinchGesture_LastScaleFactor(void* ptr){
	return static_cast<double>(static_cast<QPinchGesture*>(ptr)->lastScaleFactor());
}

double QPinchGesture_RotationAngle(void* ptr){
	return static_cast<double>(static_cast<QPinchGesture*>(ptr)->rotationAngle());
}

double QPinchGesture_ScaleFactor(void* ptr){
	return static_cast<double>(static_cast<QPinchGesture*>(ptr)->scaleFactor());
}

void QPinchGesture_SetCenterPoint(void* ptr, void* value){
	static_cast<QPinchGesture*>(ptr)->setCenterPoint(*static_cast<QPointF*>(value));
}

void QPinchGesture_SetChangeFlags(void* ptr, int value){
	static_cast<QPinchGesture*>(ptr)->setChangeFlags(static_cast<QPinchGesture::ChangeFlag>(value));
}

void QPinchGesture_SetLastCenterPoint(void* ptr, void* value){
	static_cast<QPinchGesture*>(ptr)->setLastCenterPoint(*static_cast<QPointF*>(value));
}

void QPinchGesture_SetLastRotationAngle(void* ptr, double value){
	static_cast<QPinchGesture*>(ptr)->setLastRotationAngle(static_cast<double>(value));
}

void QPinchGesture_SetLastScaleFactor(void* ptr, double value){
	static_cast<QPinchGesture*>(ptr)->setLastScaleFactor(static_cast<double>(value));
}

void QPinchGesture_SetRotationAngle(void* ptr, double value){
	static_cast<QPinchGesture*>(ptr)->setRotationAngle(static_cast<double>(value));
}

void QPinchGesture_SetScaleFactor(void* ptr, double value){
	static_cast<QPinchGesture*>(ptr)->setScaleFactor(static_cast<double>(value));
}

void QPinchGesture_SetStartCenterPoint(void* ptr, void* value){
	static_cast<QPinchGesture*>(ptr)->setStartCenterPoint(*static_cast<QPointF*>(value));
}

void QPinchGesture_SetTotalChangeFlags(void* ptr, int value){
	static_cast<QPinchGesture*>(ptr)->setTotalChangeFlags(static_cast<QPinchGesture::ChangeFlag>(value));
}

void QPinchGesture_SetTotalRotationAngle(void* ptr, double value){
	static_cast<QPinchGesture*>(ptr)->setTotalRotationAngle(static_cast<double>(value));
}

void QPinchGesture_SetTotalScaleFactor(void* ptr, double value){
	static_cast<QPinchGesture*>(ptr)->setTotalScaleFactor(static_cast<double>(value));
}

int QPinchGesture_TotalChangeFlags(void* ptr){
	return static_cast<QPinchGesture*>(ptr)->totalChangeFlags();
}

double QPinchGesture_TotalRotationAngle(void* ptr){
	return static_cast<double>(static_cast<QPinchGesture*>(ptr)->totalRotationAngle());
}

double QPinchGesture_TotalScaleFactor(void* ptr){
	return static_cast<double>(static_cast<QPinchGesture*>(ptr)->totalScaleFactor());
}

void QPinchGesture_DestroyQPinchGesture(void* ptr){
	static_cast<QPinchGesture*>(ptr)->~QPinchGesture();
}

void QPinchGesture_TimerEvent(void* ptr, void* event){
	static_cast<QPinchGesture*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QPinchGesture_TimerEventDefault(void* ptr, void* event){
	static_cast<QPinchGesture*>(ptr)->QPinchGesture::timerEvent(static_cast<QTimerEvent*>(event));
}

void QPinchGesture_ChildEvent(void* ptr, void* event){
	static_cast<QPinchGesture*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QPinchGesture_ChildEventDefault(void* ptr, void* event){
	static_cast<QPinchGesture*>(ptr)->QPinchGesture::childEvent(static_cast<QChildEvent*>(event));
}

void QPinchGesture_CustomEvent(void* ptr, void* event){
	static_cast<QPinchGesture*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QPinchGesture_CustomEventDefault(void* ptr, void* event){
	static_cast<QPinchGesture*>(ptr)->QPinchGesture::customEvent(static_cast<QEvent*>(event));
}

class MyQPlainTextDocumentLayout: public QPlainTextDocumentLayout {
public:
	MyQPlainTextDocumentLayout(QTextDocument *document) : QPlainTextDocumentLayout(document) {};
	void documentChanged(int from, int charsRemoved, int charsAdded) { callbackQPlainTextDocumentLayoutDocumentChanged(this, this->objectName().toUtf8().data(), from, charsRemoved, charsAdded); };
	void timerEvent(QTimerEvent * event) { callbackQPlainTextDocumentLayoutTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQPlainTextDocumentLayoutChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQPlainTextDocumentLayoutCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QPlainTextDocumentLayout_CursorWidth(void* ptr){
	return static_cast<QPlainTextDocumentLayout*>(ptr)->cursorWidth();
}

void QPlainTextDocumentLayout_SetCursorWidth(void* ptr, int width){
	static_cast<QPlainTextDocumentLayout*>(ptr)->setCursorWidth(width);
}

void* QPlainTextDocumentLayout_NewQPlainTextDocumentLayout(void* document){
	return new MyQPlainTextDocumentLayout(static_cast<QTextDocument*>(document));
}

void QPlainTextDocumentLayout_DocumentChanged(void* ptr, int from, int charsRemoved, int charsAdded){
	static_cast<MyQPlainTextDocumentLayout*>(ptr)->documentChanged(from, charsRemoved, charsAdded);
}

void QPlainTextDocumentLayout_DocumentChangedDefault(void* ptr, int from, int charsRemoved, int charsAdded){
	static_cast<QPlainTextDocumentLayout*>(ptr)->QPlainTextDocumentLayout::documentChanged(from, charsRemoved, charsAdded);
}

void QPlainTextDocumentLayout_EnsureBlockLayout(void* ptr, void* block){
	static_cast<QPlainTextDocumentLayout*>(ptr)->ensureBlockLayout(*static_cast<QTextBlock*>(block));
}

int QPlainTextDocumentLayout_PageCount(void* ptr){
	return static_cast<QPlainTextDocumentLayout*>(ptr)->pageCount();
}

void QPlainTextDocumentLayout_RequestUpdate(void* ptr){
	static_cast<QPlainTextDocumentLayout*>(ptr)->requestUpdate();
}

void QPlainTextDocumentLayout_DestroyQPlainTextDocumentLayout(void* ptr){
	static_cast<QPlainTextDocumentLayout*>(ptr)->~QPlainTextDocumentLayout();
}

void QPlainTextDocumentLayout_TimerEvent(void* ptr, void* event){
	static_cast<MyQPlainTextDocumentLayout*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QPlainTextDocumentLayout_TimerEventDefault(void* ptr, void* event){
	static_cast<QPlainTextDocumentLayout*>(ptr)->QPlainTextDocumentLayout::timerEvent(static_cast<QTimerEvent*>(event));
}

void QPlainTextDocumentLayout_ChildEvent(void* ptr, void* event){
	static_cast<MyQPlainTextDocumentLayout*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QPlainTextDocumentLayout_ChildEventDefault(void* ptr, void* event){
	static_cast<QPlainTextDocumentLayout*>(ptr)->QPlainTextDocumentLayout::childEvent(static_cast<QChildEvent*>(event));
}

void QPlainTextDocumentLayout_CustomEvent(void* ptr, void* event){
	static_cast<MyQPlainTextDocumentLayout*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QPlainTextDocumentLayout_CustomEventDefault(void* ptr, void* event){
	static_cast<QPlainTextDocumentLayout*>(ptr)->QPlainTextDocumentLayout::customEvent(static_cast<QEvent*>(event));
}

class MyQPlainTextEdit: public QPlainTextEdit {
public:
	MyQPlainTextEdit(QWidget *parent) : QPlainTextEdit(parent) {};
	MyQPlainTextEdit(const QString &text, QWidget *parent) : QPlainTextEdit(text, parent) {};
	void contextMenuEvent(QContextMenuEvent * event) { callbackQPlainTextEditContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_BlockCountChanged(int newBlockCount) { callbackQPlainTextEditBlockCountChanged(this, this->objectName().toUtf8().data(), newBlockCount); };
	void changeEvent(QEvent * e) { callbackQPlainTextEditChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_CopyAvailable(bool yes) { callbackQPlainTextEditCopyAvailable(this, this->objectName().toUtf8().data(), yes); };
	void Signal_CursorPositionChanged() { callbackQPlainTextEditCursorPositionChanged(this, this->objectName().toUtf8().data()); };
	void dragEnterEvent(QDragEnterEvent * e) { callbackQPlainTextEditDragEnterEvent(this, this->objectName().toUtf8().data(), e); };
	void dragLeaveEvent(QDragLeaveEvent * e) { callbackQPlainTextEditDragLeaveEvent(this, this->objectName().toUtf8().data(), e); };
	void dragMoveEvent(QDragMoveEvent * e) { callbackQPlainTextEditDragMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void dropEvent(QDropEvent * e) { callbackQPlainTextEditDropEvent(this, this->objectName().toUtf8().data(), e); };
	void focusInEvent(QFocusEvent * e) { callbackQPlainTextEditFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQPlainTextEditFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void inputMethodEvent(QInputMethodEvent * e) { callbackQPlainTextEditInputMethodEvent(this, this->objectName().toUtf8().data(), e); };
	void insertFromMimeData(const QMimeData * source) { callbackQPlainTextEditInsertFromMimeData(this, this->objectName().toUtf8().data(), const_cast<QMimeData*>(source)); };
	void keyPressEvent(QKeyEvent * e) { callbackQPlainTextEditKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQPlainTextEditKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_ModificationChanged(bool changed) { callbackQPlainTextEditModificationChanged(this, this->objectName().toUtf8().data(), changed); };
	void mouseDoubleClickEvent(QMouseEvent * e) { callbackQPlainTextEditMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQPlainTextEditMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQPlainTextEditMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQPlainTextEditMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * e) { callbackQPlainTextEditPaintEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_RedoAvailable(bool available) { callbackQPlainTextEditRedoAvailable(this, this->objectName().toUtf8().data(), available); };
	void resizeEvent(QResizeEvent * e) { callbackQPlainTextEditResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQPlainTextEditScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void Signal_SelectionChanged() { callbackQPlainTextEditSelectionChanged(this, this->objectName().toUtf8().data()); };
	void showEvent(QShowEvent * v) { callbackQPlainTextEditShowEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_TextChanged() { callbackQPlainTextEditTextChanged(this, this->objectName().toUtf8().data()); };
	void Signal_UndoAvailable(bool available) { callbackQPlainTextEditUndoAvailable(this, this->objectName().toUtf8().data(), available); };
	void Signal_UpdateRequest(const QRect & rect, int dy) { callbackQPlainTextEditUpdateRequest(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), dy); };
	void wheelEvent(QWheelEvent * e) { callbackQPlainTextEditWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void setupViewport(QWidget * viewport) { callbackQPlainTextEditSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void actionEvent(QActionEvent * event) { callbackQPlainTextEditActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQPlainTextEditEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQPlainTextEditHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQPlainTextEditLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQPlainTextEditMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQPlainTextEditSetVisible(this, this->objectName().toUtf8().data(), visible)) { QPlainTextEdit::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQPlainTextEditCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQPlainTextEditInitPainter(const_cast<MyQPlainTextEdit*>(this), this->objectName().toUtf8().data(), painter); };
	void tabletEvent(QTabletEvent * event) { callbackQPlainTextEditTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQPlainTextEditTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQPlainTextEditChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQPlainTextEditCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QPlainTextEdit_BackgroundVisible(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->backgroundVisible();
}

int QPlainTextEdit_BlockCount(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->blockCount();
}

int QPlainTextEdit_CenterOnScroll(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->centerOnScroll();
}

void QPlainTextEdit_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QPlainTextEdit_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

int QPlainTextEdit_CursorWidth(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->cursorWidth();
}

int QPlainTextEdit_IsReadOnly(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->isReadOnly();
}

int QPlainTextEdit_LineWrapMode(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->lineWrapMode();
}

int QPlainTextEdit_OverwriteMode(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->overwriteMode();
}

char* QPlainTextEdit_PlaceholderText(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->placeholderText().toUtf8().data();
}

void QPlainTextEdit_Redo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "redo");
}

void QPlainTextEdit_SetBackgroundVisible(void* ptr, int visible){
	static_cast<QPlainTextEdit*>(ptr)->setBackgroundVisible(visible != 0);
}

void QPlainTextEdit_SetCenterOnScroll(void* ptr, int enabled){
	static_cast<QPlainTextEdit*>(ptr)->setCenterOnScroll(enabled != 0);
}

void QPlainTextEdit_SetCursorWidth(void* ptr, int width){
	static_cast<QPlainTextEdit*>(ptr)->setCursorWidth(width);
}

void QPlainTextEdit_SetLineWrapMode(void* ptr, int mode){
	static_cast<QPlainTextEdit*>(ptr)->setLineWrapMode(static_cast<QPlainTextEdit::LineWrapMode>(mode));
}

void QPlainTextEdit_SetOverwriteMode(void* ptr, int overwrite){
	static_cast<QPlainTextEdit*>(ptr)->setOverwriteMode(overwrite != 0);
}

void QPlainTextEdit_SetPlaceholderText(void* ptr, char* placeholderText){
	static_cast<QPlainTextEdit*>(ptr)->setPlaceholderText(QString(placeholderText));
}

void QPlainTextEdit_SetReadOnly(void* ptr, int ro){
	static_cast<QPlainTextEdit*>(ptr)->setReadOnly(ro != 0);
}

void QPlainTextEdit_SetTabChangesFocus(void* ptr, int b){
	static_cast<QPlainTextEdit*>(ptr)->setTabChangesFocus(b != 0);
}

void QPlainTextEdit_SetTabStopWidth(void* ptr, int width){
	static_cast<QPlainTextEdit*>(ptr)->setTabStopWidth(width);
}

void QPlainTextEdit_SetTextInteractionFlags(void* ptr, int flags){
	static_cast<QPlainTextEdit*>(ptr)->setTextInteractionFlags(static_cast<Qt::TextInteractionFlag>(flags));
}

void QPlainTextEdit_SetWordWrapMode(void* ptr, int policy){
	static_cast<QPlainTextEdit*>(ptr)->setWordWrapMode(static_cast<QTextOption::WrapMode>(policy));
}

int QPlainTextEdit_TabChangesFocus(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->tabChangesFocus();
}

int QPlainTextEdit_TabStopWidth(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->tabStopWidth();
}

int QPlainTextEdit_TextInteractionFlags(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->textInteractionFlags();
}

int QPlainTextEdit_WordWrapMode(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->wordWrapMode();
}

void QPlainTextEdit_ZoomIn(void* ptr, int ran){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "zoomIn", Q_ARG(int, ran));
}

void QPlainTextEdit_ZoomOut(void* ptr, int ran){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "zoomOut", Q_ARG(int, ran));
}

void* QPlainTextEdit_NewQPlainTextEdit(void* parent){
	return new MyQPlainTextEdit(static_cast<QWidget*>(parent));
}

void* QPlainTextEdit_NewQPlainTextEdit2(char* text, void* parent){
	return new MyQPlainTextEdit(QString(text), static_cast<QWidget*>(parent));
}

char* QPlainTextEdit_AnchorAt(void* ptr, void* pos){
	return static_cast<QPlainTextEdit*>(ptr)->anchorAt(*static_cast<QPoint*>(pos)).toUtf8().data();
}

void QPlainTextEdit_AppendPlainText(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "appendPlainText", Q_ARG(QString, QString(text)));
}

int QPlainTextEdit_CanInsertFromMimeData(void* ptr, void* source){
	return static_cast<QPlainTextEdit*>(ptr)->canInsertFromMimeData(static_cast<QMimeData*>(source));
}

void QPlainTextEdit_CenterCursor(void* ptr){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "centerCursor");
}

void QPlainTextEdit_AppendHtml(void* ptr, char* html){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "appendHtml", Q_ARG(QString, QString(html)));
}

void QPlainTextEdit_ConnectBlockCountChanged(void* ptr){
	QObject::connect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(int)>(&QPlainTextEdit::blockCountChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(int)>(&MyQPlainTextEdit::Signal_BlockCountChanged));;
}

void QPlainTextEdit_DisconnectBlockCountChanged(void* ptr){
	QObject::disconnect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(int)>(&QPlainTextEdit::blockCountChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(int)>(&MyQPlainTextEdit::Signal_BlockCountChanged));;
}

void QPlainTextEdit_BlockCountChanged(void* ptr, int newBlockCount){
	static_cast<QPlainTextEdit*>(ptr)->blockCountChanged(newBlockCount);
}

int QPlainTextEdit_CanPaste(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->canPaste();
}

void QPlainTextEdit_ChangeEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QPlainTextEdit_ChangeEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::changeEvent(static_cast<QEvent*>(e));
}

void QPlainTextEdit_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "clear");
}

void QPlainTextEdit_Copy(void* ptr){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "copy");
}

void QPlainTextEdit_ConnectCopyAvailable(void* ptr){
	QObject::connect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(bool)>(&QPlainTextEdit::copyAvailable), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(bool)>(&MyQPlainTextEdit::Signal_CopyAvailable));;
}

void QPlainTextEdit_DisconnectCopyAvailable(void* ptr){
	QObject::disconnect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(bool)>(&QPlainTextEdit::copyAvailable), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(bool)>(&MyQPlainTextEdit::Signal_CopyAvailable));;
}

void QPlainTextEdit_CopyAvailable(void* ptr, int yes){
	static_cast<QPlainTextEdit*>(ptr)->copyAvailable(yes != 0);
}

void* QPlainTextEdit_CreateMimeDataFromSelection(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->createMimeDataFromSelection();
}

void* QPlainTextEdit_CreateStandardContextMenu(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->createStandardContextMenu();
}

void* QPlainTextEdit_CreateStandardContextMenu2(void* ptr, void* position){
	return static_cast<QPlainTextEdit*>(ptr)->createStandardContextMenu(*static_cast<QPoint*>(position));
}

void* QPlainTextEdit_CursorForPosition(void* ptr, void* pos){
	return new QTextCursor(static_cast<QPlainTextEdit*>(ptr)->cursorForPosition(*static_cast<QPoint*>(pos)));
}

void QPlainTextEdit_ConnectCursorPositionChanged(void* ptr){
	QObject::connect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)()>(&QPlainTextEdit::cursorPositionChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)()>(&MyQPlainTextEdit::Signal_CursorPositionChanged));;
}

void QPlainTextEdit_DisconnectCursorPositionChanged(void* ptr){
	QObject::disconnect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)()>(&QPlainTextEdit::cursorPositionChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)()>(&MyQPlainTextEdit::Signal_CursorPositionChanged));;
}

void QPlainTextEdit_CursorPositionChanged(void* ptr){
	static_cast<QPlainTextEdit*>(ptr)->cursorPositionChanged();
}

void* QPlainTextEdit_CursorRect2(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QPlainTextEdit*>(ptr)->cursorRect()).x(), static_cast<QRect>(static_cast<QPlainTextEdit*>(ptr)->cursorRect()).y(), static_cast<QRect>(static_cast<QPlainTextEdit*>(ptr)->cursorRect()).width(), static_cast<QRect>(static_cast<QPlainTextEdit*>(ptr)->cursorRect()).height());
}

void* QPlainTextEdit_CursorRect(void* ptr, void* cursor){
	return new QRect(static_cast<QRect>(static_cast<QPlainTextEdit*>(ptr)->cursorRect(*static_cast<QTextCursor*>(cursor))).x(), static_cast<QRect>(static_cast<QPlainTextEdit*>(ptr)->cursorRect(*static_cast<QTextCursor*>(cursor))).y(), static_cast<QRect>(static_cast<QPlainTextEdit*>(ptr)->cursorRect(*static_cast<QTextCursor*>(cursor))).width(), static_cast<QRect>(static_cast<QPlainTextEdit*>(ptr)->cursorRect(*static_cast<QTextCursor*>(cursor))).height());
}

void QPlainTextEdit_Cut(void* ptr){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "cut");
}

void* QPlainTextEdit_Document(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->document();
}

char* QPlainTextEdit_DocumentTitle(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->documentTitle().toUtf8().data();
}

void QPlainTextEdit_DragEnterEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(e));
}

void QPlainTextEdit_DragEnterEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::dragEnterEvent(static_cast<QDragEnterEvent*>(e));
}

void QPlainTextEdit_DragLeaveEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QPlainTextEdit_DragLeaveEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QPlainTextEdit_DragMoveEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QPlainTextEdit_DragMoveEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QPlainTextEdit_DropEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->dropEvent(static_cast<QDropEvent*>(e));
}

void QPlainTextEdit_DropEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::dropEvent(static_cast<QDropEvent*>(e));
}

void QPlainTextEdit_EnsureCursorVisible(void* ptr){
	static_cast<QPlainTextEdit*>(ptr)->ensureCursorVisible();
}

void QPlainTextEdit_FocusInEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QPlainTextEdit_FocusInEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::focusInEvent(static_cast<QFocusEvent*>(e));
}

int QPlainTextEdit_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QPlainTextEdit*>(ptr)->focusNextPrevChild(next != 0);
}

void QPlainTextEdit_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QPlainTextEdit_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QPlainTextEdit_InputMethodEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void QPlainTextEdit_InputMethodEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void* QPlainTextEdit_InputMethodQuery(void* ptr, int property){
	return new QVariant(static_cast<QPlainTextEdit*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(property)));
}

void QPlainTextEdit_InsertFromMimeData(void* ptr, void* source){
	static_cast<MyQPlainTextEdit*>(ptr)->insertFromMimeData(static_cast<QMimeData*>(source));
}

void QPlainTextEdit_InsertFromMimeDataDefault(void* ptr, void* source){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::insertFromMimeData(static_cast<QMimeData*>(source));
}

void QPlainTextEdit_InsertPlainText(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "insertPlainText", Q_ARG(QString, QString(text)));
}

int QPlainTextEdit_IsUndoRedoEnabled(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->isUndoRedoEnabled();
}

void QPlainTextEdit_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QPlainTextEdit_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QPlainTextEdit_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QPlainTextEdit_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void* QPlainTextEdit_LoadResource(void* ptr, int ty, void* name){
	return new QVariant(static_cast<QPlainTextEdit*>(ptr)->loadResource(ty, *static_cast<QUrl*>(name)));
}

int QPlainTextEdit_MaximumBlockCount(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->maximumBlockCount();
}

void QPlainTextEdit_MergeCurrentCharFormat(void* ptr, void* modifier){
	static_cast<QPlainTextEdit*>(ptr)->mergeCurrentCharFormat(*static_cast<QTextCharFormat*>(modifier));
}

void QPlainTextEdit_ConnectModificationChanged(void* ptr){
	QObject::connect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(bool)>(&QPlainTextEdit::modificationChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(bool)>(&MyQPlainTextEdit::Signal_ModificationChanged));;
}

void QPlainTextEdit_DisconnectModificationChanged(void* ptr){
	QObject::disconnect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(bool)>(&QPlainTextEdit::modificationChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(bool)>(&MyQPlainTextEdit::Signal_ModificationChanged));;
}

void QPlainTextEdit_ModificationChanged(void* ptr, int changed){
	static_cast<QPlainTextEdit*>(ptr)->modificationChanged(changed != 0);
}

void QPlainTextEdit_MouseDoubleClickEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QPlainTextEdit_MouseDoubleClickEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QPlainTextEdit_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QPlainTextEdit_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QPlainTextEdit_MousePressEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QPlainTextEdit_MousePressEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QPlainTextEdit_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QPlainTextEdit_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QPlainTextEdit_MoveCursor(void* ptr, int operation, int mode){
	static_cast<QPlainTextEdit*>(ptr)->moveCursor(static_cast<QTextCursor::MoveOperation>(operation), static_cast<QTextCursor::MoveMode>(mode));
}

void QPlainTextEdit_PaintEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QPlainTextEdit_PaintEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::paintEvent(static_cast<QPaintEvent*>(e));
}

void QPlainTextEdit_Paste(void* ptr){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "paste");
}

void QPlainTextEdit_Print(void* ptr, void* printer){
	static_cast<QPlainTextEdit*>(ptr)->print(static_cast<QPagedPaintDevice*>(printer));
}

void QPlainTextEdit_ConnectRedoAvailable(void* ptr){
	QObject::connect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(bool)>(&QPlainTextEdit::redoAvailable), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(bool)>(&MyQPlainTextEdit::Signal_RedoAvailable));;
}

void QPlainTextEdit_DisconnectRedoAvailable(void* ptr){
	QObject::disconnect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(bool)>(&QPlainTextEdit::redoAvailable), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(bool)>(&MyQPlainTextEdit::Signal_RedoAvailable));;
}

void QPlainTextEdit_RedoAvailable(void* ptr, int available){
	static_cast<QPlainTextEdit*>(ptr)->redoAvailable(available != 0);
}

void QPlainTextEdit_ResizeEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QPlainTextEdit_ResizeEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QPlainTextEdit_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQPlainTextEdit*>(ptr)->scrollContentsBy(dx, dy);
}

void QPlainTextEdit_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::scrollContentsBy(dx, dy);
}

void QPlainTextEdit_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "selectAll");
}

void QPlainTextEdit_ConnectSelectionChanged(void* ptr){
	QObject::connect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)()>(&QPlainTextEdit::selectionChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)()>(&MyQPlainTextEdit::Signal_SelectionChanged));;
}

void QPlainTextEdit_DisconnectSelectionChanged(void* ptr){
	QObject::disconnect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)()>(&QPlainTextEdit::selectionChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)()>(&MyQPlainTextEdit::Signal_SelectionChanged));;
}

void QPlainTextEdit_SelectionChanged(void* ptr){
	static_cast<QPlainTextEdit*>(ptr)->selectionChanged();
}

void QPlainTextEdit_SetCurrentCharFormat(void* ptr, void* format){
	static_cast<QPlainTextEdit*>(ptr)->setCurrentCharFormat(*static_cast<QTextCharFormat*>(format));
}

void QPlainTextEdit_SetDocument(void* ptr, void* document){
	static_cast<QPlainTextEdit*>(ptr)->setDocument(static_cast<QTextDocument*>(document));
}

void QPlainTextEdit_SetDocumentTitle(void* ptr, char* title){
	static_cast<QPlainTextEdit*>(ptr)->setDocumentTitle(QString(title));
}

void QPlainTextEdit_SetMaximumBlockCount(void* ptr, int maximum){
	static_cast<QPlainTextEdit*>(ptr)->setMaximumBlockCount(maximum);
}

void QPlainTextEdit_SetPlainText(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "setPlainText", Q_ARG(QString, QString(text)));
}

void QPlainTextEdit_SetTextCursor(void* ptr, void* cursor){
	static_cast<QPlainTextEdit*>(ptr)->setTextCursor(*static_cast<QTextCursor*>(cursor));
}

void QPlainTextEdit_SetUndoRedoEnabled(void* ptr, int enable){
	static_cast<QPlainTextEdit*>(ptr)->setUndoRedoEnabled(enable != 0);
}

void QPlainTextEdit_ShowEvent(void* ptr, void* v){
	static_cast<MyQPlainTextEdit*>(ptr)->showEvent(static_cast<QShowEvent*>(v));
}

void QPlainTextEdit_ShowEventDefault(void* ptr, void* v){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::showEvent(static_cast<QShowEvent*>(v));
}

void QPlainTextEdit_ConnectTextChanged(void* ptr){
	QObject::connect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)()>(&QPlainTextEdit::textChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)()>(&MyQPlainTextEdit::Signal_TextChanged));;
}

void QPlainTextEdit_DisconnectTextChanged(void* ptr){
	QObject::disconnect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)()>(&QPlainTextEdit::textChanged), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)()>(&MyQPlainTextEdit::Signal_TextChanged));;
}

void QPlainTextEdit_TextChanged(void* ptr){
	static_cast<QPlainTextEdit*>(ptr)->textChanged();
}

void* QPlainTextEdit_TextCursor(void* ptr){
	return new QTextCursor(static_cast<QPlainTextEdit*>(ptr)->textCursor());
}

char* QPlainTextEdit_ToPlainText(void* ptr){
	return static_cast<QPlainTextEdit*>(ptr)->toPlainText().toUtf8().data();
}

void QPlainTextEdit_Undo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "undo");
}

void QPlainTextEdit_ConnectUndoAvailable(void* ptr){
	QObject::connect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(bool)>(&QPlainTextEdit::undoAvailable), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(bool)>(&MyQPlainTextEdit::Signal_UndoAvailable));;
}

void QPlainTextEdit_DisconnectUndoAvailable(void* ptr){
	QObject::disconnect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(bool)>(&QPlainTextEdit::undoAvailable), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(bool)>(&MyQPlainTextEdit::Signal_UndoAvailable));;
}

void QPlainTextEdit_UndoAvailable(void* ptr, int available){
	static_cast<QPlainTextEdit*>(ptr)->undoAvailable(available != 0);
}

void QPlainTextEdit_ConnectUpdateRequest(void* ptr){
	QObject::connect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(const QRect &, int)>(&QPlainTextEdit::updateRequest), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(const QRect &, int)>(&MyQPlainTextEdit::Signal_UpdateRequest));;
}

void QPlainTextEdit_DisconnectUpdateRequest(void* ptr){
	QObject::disconnect(static_cast<QPlainTextEdit*>(ptr), static_cast<void (QPlainTextEdit::*)(const QRect &, int)>(&QPlainTextEdit::updateRequest), static_cast<MyQPlainTextEdit*>(ptr), static_cast<void (MyQPlainTextEdit::*)(const QRect &, int)>(&MyQPlainTextEdit::Signal_UpdateRequest));;
}

void QPlainTextEdit_UpdateRequest(void* ptr, void* rect, int dy){
	static_cast<QPlainTextEdit*>(ptr)->updateRequest(*static_cast<QRect*>(rect), dy);
}

void QPlainTextEdit_WheelEvent(void* ptr, void* e){
	static_cast<MyQPlainTextEdit*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QPlainTextEdit_WheelEventDefault(void* ptr, void* e){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QPlainTextEdit_DestroyQPlainTextEdit(void* ptr){
	static_cast<QPlainTextEdit*>(ptr)->~QPlainTextEdit();
}

void QPlainTextEdit_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQPlainTextEdit*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QPlainTextEdit_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::setupViewport(static_cast<QWidget*>(viewport));
}

void QPlainTextEdit_ActionEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QPlainTextEdit_ActionEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::actionEvent(static_cast<QActionEvent*>(event));
}

void QPlainTextEdit_EnterEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QPlainTextEdit_EnterEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::enterEvent(static_cast<QEvent*>(event));
}

void QPlainTextEdit_HideEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QPlainTextEdit_HideEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::hideEvent(static_cast<QHideEvent*>(event));
}

void QPlainTextEdit_LeaveEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QPlainTextEdit_LeaveEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::leaveEvent(static_cast<QEvent*>(event));
}

void QPlainTextEdit_MoveEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QPlainTextEdit_MoveEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::moveEvent(static_cast<QMoveEvent*>(event));
}

void QPlainTextEdit_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQPlainTextEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QPlainTextEdit_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QPlainTextEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QPlainTextEdit_CloseEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QPlainTextEdit_CloseEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::closeEvent(static_cast<QCloseEvent*>(event));
}

void QPlainTextEdit_InitPainter(void* ptr, void* painter){
	static_cast<MyQPlainTextEdit*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QPlainTextEdit_InitPainterDefault(void* ptr, void* painter){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::initPainter(static_cast<QPainter*>(painter));
}

void QPlainTextEdit_TabletEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QPlainTextEdit_TabletEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QPlainTextEdit_TimerEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QPlainTextEdit_TimerEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::timerEvent(static_cast<QTimerEvent*>(event));
}

void QPlainTextEdit_ChildEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QPlainTextEdit_ChildEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::childEvent(static_cast<QChildEvent*>(event));
}

void QPlainTextEdit_CustomEvent(void* ptr, void* event){
	static_cast<MyQPlainTextEdit*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QPlainTextEdit_CustomEventDefault(void* ptr, void* event){
	static_cast<QPlainTextEdit*>(ptr)->QPlainTextEdit::customEvent(static_cast<QEvent*>(event));
}

class MyQProgressBar: public QProgressBar {
public:
	MyQProgressBar(QWidget *parent) : QProgressBar(parent) {};
	void paintEvent(QPaintEvent * v) { callbackQProgressBarPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_ValueChanged(int value) { callbackQProgressBarValueChanged(this, this->objectName().toUtf8().data(), value); };
	void actionEvent(QActionEvent * event) { callbackQProgressBarActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQProgressBarDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQProgressBarDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQProgressBarDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQProgressBarDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQProgressBarEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQProgressBarFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQProgressBarFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQProgressBarHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQProgressBarLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQProgressBarMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQProgressBarSetVisible(this, this->objectName().toUtf8().data(), visible)) { QProgressBar::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQProgressBarShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQProgressBarChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQProgressBarCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQProgressBarContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQProgressBarInitPainter(const_cast<MyQProgressBar*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQProgressBarInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQProgressBarKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQProgressBarKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQProgressBarMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQProgressBarMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQProgressBarMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQProgressBarMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQProgressBarResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQProgressBarTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQProgressBarWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQProgressBarTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQProgressBarChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQProgressBarCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QProgressBar_Alignment(void* ptr){
	return static_cast<QProgressBar*>(ptr)->alignment();
}

char* QProgressBar_Format(void* ptr){
	return static_cast<QProgressBar*>(ptr)->format().toUtf8().data();
}

int QProgressBar_InvertedAppearance(void* ptr){
	return static_cast<QProgressBar*>(ptr)->invertedAppearance();
}

int QProgressBar_IsTextVisible(void* ptr){
	return static_cast<QProgressBar*>(ptr)->isTextVisible();
}

int QProgressBar_Maximum(void* ptr){
	return static_cast<QProgressBar*>(ptr)->maximum();
}

int QProgressBar_Minimum(void* ptr){
	return static_cast<QProgressBar*>(ptr)->minimum();
}

int QProgressBar_Orientation(void* ptr){
	return static_cast<QProgressBar*>(ptr)->orientation();
}

void QProgressBar_ResetFormat(void* ptr){
	static_cast<QProgressBar*>(ptr)->resetFormat();
}

void QProgressBar_SetAlignment(void* ptr, int alignment){
	static_cast<QProgressBar*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QProgressBar_SetFormat(void* ptr, char* format){
	static_cast<QProgressBar*>(ptr)->setFormat(QString(format));
}

void QProgressBar_SetInvertedAppearance(void* ptr, int invert){
	static_cast<QProgressBar*>(ptr)->setInvertedAppearance(invert != 0);
}

void QProgressBar_SetMaximum(void* ptr, int maximum){
	QMetaObject::invokeMethod(static_cast<QProgressBar*>(ptr), "setMaximum", Q_ARG(int, maximum));
}

void QProgressBar_SetMinimum(void* ptr, int minimum){
	QMetaObject::invokeMethod(static_cast<QProgressBar*>(ptr), "setMinimum", Q_ARG(int, minimum));
}

void QProgressBar_SetOrientation(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QProgressBar*>(ptr), "setOrientation", Q_ARG(Qt::Orientation, static_cast<Qt::Orientation>(v)));
}

void QProgressBar_SetTextDirection(void* ptr, int textDirection){
	static_cast<QProgressBar*>(ptr)->setTextDirection(static_cast<QProgressBar::Direction>(textDirection));
}

void QProgressBar_SetTextVisible(void* ptr, int visible){
	static_cast<QProgressBar*>(ptr)->setTextVisible(visible != 0);
}

void QProgressBar_SetValue(void* ptr, int value){
	QMetaObject::invokeMethod(static_cast<QProgressBar*>(ptr), "setValue", Q_ARG(int, value));
}

char* QProgressBar_Text(void* ptr){
	return static_cast<QProgressBar*>(ptr)->text().toUtf8().data();
}

int QProgressBar_TextDirection(void* ptr){
	return static_cast<QProgressBar*>(ptr)->textDirection();
}

int QProgressBar_Value(void* ptr){
	return static_cast<QProgressBar*>(ptr)->value();
}

void* QProgressBar_NewQProgressBar(void* parent){
	return new MyQProgressBar(static_cast<QWidget*>(parent));
}

int QProgressBar_Event(void* ptr, void* e){
	return static_cast<QProgressBar*>(ptr)->event(static_cast<QEvent*>(e));
}

void* QProgressBar_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QProgressBar*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QProgressBar*>(ptr)->minimumSizeHint()).height());
}

void QProgressBar_PaintEvent(void* ptr, void* v){
	static_cast<MyQProgressBar*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QProgressBar_PaintEventDefault(void* ptr, void* v){
	static_cast<QProgressBar*>(ptr)->QProgressBar::paintEvent(static_cast<QPaintEvent*>(v));
}

void QProgressBar_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<QProgressBar*>(ptr), "reset");
}

void QProgressBar_SetRange(void* ptr, int minimum, int maximum){
	QMetaObject::invokeMethod(static_cast<QProgressBar*>(ptr), "setRange", Q_ARG(int, minimum), Q_ARG(int, maximum));
}

void* QProgressBar_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QProgressBar*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QProgressBar*>(ptr)->sizeHint()).height());
}

void QProgressBar_ConnectValueChanged(void* ptr){
	QObject::connect(static_cast<QProgressBar*>(ptr), static_cast<void (QProgressBar::*)(int)>(&QProgressBar::valueChanged), static_cast<MyQProgressBar*>(ptr), static_cast<void (MyQProgressBar::*)(int)>(&MyQProgressBar::Signal_ValueChanged));;
}

void QProgressBar_DisconnectValueChanged(void* ptr){
	QObject::disconnect(static_cast<QProgressBar*>(ptr), static_cast<void (QProgressBar::*)(int)>(&QProgressBar::valueChanged), static_cast<MyQProgressBar*>(ptr), static_cast<void (MyQProgressBar::*)(int)>(&MyQProgressBar::Signal_ValueChanged));;
}

void QProgressBar_ValueChanged(void* ptr, int value){
	static_cast<QProgressBar*>(ptr)->valueChanged(value);
}

void QProgressBar_DestroyQProgressBar(void* ptr){
	static_cast<QProgressBar*>(ptr)->~QProgressBar();
}

void QProgressBar_ActionEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QProgressBar_ActionEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::actionEvent(static_cast<QActionEvent*>(event));
}

void QProgressBar_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QProgressBar_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QProgressBar_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QProgressBar_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QProgressBar_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QProgressBar_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QProgressBar_DropEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QProgressBar_DropEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::dropEvent(static_cast<QDropEvent*>(event));
}

void QProgressBar_EnterEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QProgressBar_EnterEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::enterEvent(static_cast<QEvent*>(event));
}

void QProgressBar_FocusInEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QProgressBar_FocusInEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QProgressBar_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QProgressBar_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QProgressBar_HideEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QProgressBar_HideEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::hideEvent(static_cast<QHideEvent*>(event));
}

void QProgressBar_LeaveEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QProgressBar_LeaveEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::leaveEvent(static_cast<QEvent*>(event));
}

void QProgressBar_MoveEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QProgressBar_MoveEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::moveEvent(static_cast<QMoveEvent*>(event));
}

void QProgressBar_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQProgressBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QProgressBar_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QProgressBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QProgressBar_ShowEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QProgressBar_ShowEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::showEvent(static_cast<QShowEvent*>(event));
}

void QProgressBar_ChangeEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QProgressBar_ChangeEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::changeEvent(static_cast<QEvent*>(event));
}

void QProgressBar_CloseEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QProgressBar_CloseEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::closeEvent(static_cast<QCloseEvent*>(event));
}

void QProgressBar_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QProgressBar_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QProgressBar_InitPainter(void* ptr, void* painter){
	static_cast<MyQProgressBar*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QProgressBar_InitPainterDefault(void* ptr, void* painter){
	static_cast<QProgressBar*>(ptr)->QProgressBar::initPainter(static_cast<QPainter*>(painter));
}

void QProgressBar_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QProgressBar_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QProgressBar_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QProgressBar_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QProgressBar_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QProgressBar_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QProgressBar_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QProgressBar_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QProgressBar_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QProgressBar_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QProgressBar_MousePressEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QProgressBar_MousePressEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QProgressBar_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QProgressBar_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QProgressBar_ResizeEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QProgressBar_ResizeEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QProgressBar_TabletEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QProgressBar_TabletEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QProgressBar_WheelEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QProgressBar_WheelEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QProgressBar_TimerEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QProgressBar_TimerEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::timerEvent(static_cast<QTimerEvent*>(event));
}

void QProgressBar_ChildEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QProgressBar_ChildEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::childEvent(static_cast<QChildEvent*>(event));
}

void QProgressBar_CustomEvent(void* ptr, void* event){
	static_cast<MyQProgressBar*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QProgressBar_CustomEventDefault(void* ptr, void* event){
	static_cast<QProgressBar*>(ptr)->QProgressBar::customEvent(static_cast<QEvent*>(event));
}

class MyQProgressDialog: public QProgressDialog {
public:
	MyQProgressDialog(QWidget *parent, Qt::WindowFlags f) : QProgressDialog(parent, f) {};
	MyQProgressDialog(const QString &labelText, const QString &cancelButtonText, int minimum, int maximum, QWidget *parent, Qt::WindowFlags f) : QProgressDialog(labelText, cancelButtonText, minimum, maximum, parent, f) {};
	void Signal_Canceled() { callbackQProgressDialogCanceled(this, this->objectName().toUtf8().data()); };
	void changeEvent(QEvent * ev) { callbackQProgressDialogChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void closeEvent(QCloseEvent * e) { callbackQProgressDialogCloseEvent(this, this->objectName().toUtf8().data(), e); };
	void resizeEvent(QResizeEvent * event) { callbackQProgressDialogResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void showEvent(QShowEvent * e) { callbackQProgressDialogShowEvent(this, this->objectName().toUtf8().data(), e); };
	void accept() { if (!callbackQProgressDialogAccept(this, this->objectName().toUtf8().data())) { QProgressDialog::accept(); }; };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQProgressDialogContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void done(int r) { if (!callbackQProgressDialogDone(this, this->objectName().toUtf8().data(), r)) { QProgressDialog::done(r); }; };
	void keyPressEvent(QKeyEvent * e) { callbackQProgressDialogKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void reject() { if (!callbackQProgressDialogReject(this, this->objectName().toUtf8().data())) { QProgressDialog::reject(); }; };
	void setVisible(bool visible) { if (!callbackQProgressDialogSetVisible(this, this->objectName().toUtf8().data(), visible)) { QProgressDialog::setVisible(visible); }; };
	void actionEvent(QActionEvent * event) { callbackQProgressDialogActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQProgressDialogDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQProgressDialogDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQProgressDialogDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQProgressDialogDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQProgressDialogEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQProgressDialogFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQProgressDialogFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQProgressDialogHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQProgressDialogLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQProgressDialogMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQProgressDialogPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQProgressDialogInitPainter(const_cast<MyQProgressDialog*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQProgressDialogInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQProgressDialogKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQProgressDialogMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQProgressDialogMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQProgressDialogMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQProgressDialogMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQProgressDialogTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQProgressDialogWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQProgressDialogTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQProgressDialogChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQProgressDialogCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QProgressDialog_AutoClose(void* ptr){
	return static_cast<QProgressDialog*>(ptr)->autoClose();
}

int QProgressDialog_AutoReset(void* ptr){
	return static_cast<QProgressDialog*>(ptr)->autoReset();
}

char* QProgressDialog_LabelText(void* ptr){
	return static_cast<QProgressDialog*>(ptr)->labelText().toUtf8().data();
}

int QProgressDialog_Maximum(void* ptr){
	return static_cast<QProgressDialog*>(ptr)->maximum();
}

int QProgressDialog_Minimum(void* ptr){
	return static_cast<QProgressDialog*>(ptr)->minimum();
}

int QProgressDialog_MinimumDuration(void* ptr){
	return static_cast<QProgressDialog*>(ptr)->minimumDuration();
}

void QProgressDialog_SetAutoClose(void* ptr, int close){
	static_cast<QProgressDialog*>(ptr)->setAutoClose(close != 0);
}

void QProgressDialog_SetAutoReset(void* ptr, int reset){
	static_cast<QProgressDialog*>(ptr)->setAutoReset(reset != 0);
}

void QProgressDialog_SetLabelText(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "setLabelText", Q_ARG(QString, QString(text)));
}

void QProgressDialog_SetMaximum(void* ptr, int maximum){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "setMaximum", Q_ARG(int, maximum));
}

void QProgressDialog_SetMinimum(void* ptr, int minimum){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "setMinimum", Q_ARG(int, minimum));
}

void QProgressDialog_SetMinimumDuration(void* ptr, int ms){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "setMinimumDuration", Q_ARG(int, ms));
}

void QProgressDialog_SetValue(void* ptr, int progress){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "setValue", Q_ARG(int, progress));
}

int QProgressDialog_Value(void* ptr){
	return static_cast<QProgressDialog*>(ptr)->value();
}

int QProgressDialog_WasCanceled(void* ptr){
	return static_cast<QProgressDialog*>(ptr)->wasCanceled();
}

void* QProgressDialog_NewQProgressDialog(void* parent, int f){
	return new MyQProgressDialog(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

void* QProgressDialog_NewQProgressDialog2(char* labelText, char* cancelButtonText, int minimum, int maximum, void* parent, int f){
	return new MyQProgressDialog(QString(labelText), QString(cancelButtonText), minimum, maximum, static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

void QProgressDialog_Cancel(void* ptr){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "cancel");
}

void QProgressDialog_ConnectCanceled(void* ptr){
	QObject::connect(static_cast<QProgressDialog*>(ptr), static_cast<void (QProgressDialog::*)()>(&QProgressDialog::canceled), static_cast<MyQProgressDialog*>(ptr), static_cast<void (MyQProgressDialog::*)()>(&MyQProgressDialog::Signal_Canceled));;
}

void QProgressDialog_DisconnectCanceled(void* ptr){
	QObject::disconnect(static_cast<QProgressDialog*>(ptr), static_cast<void (QProgressDialog::*)()>(&QProgressDialog::canceled), static_cast<MyQProgressDialog*>(ptr), static_cast<void (MyQProgressDialog::*)()>(&MyQProgressDialog::Signal_Canceled));;
}

void QProgressDialog_Canceled(void* ptr){
	static_cast<QProgressDialog*>(ptr)->canceled();
}

void QProgressDialog_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQProgressDialog*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QProgressDialog_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::changeEvent(static_cast<QEvent*>(ev));
}

void QProgressDialog_CloseEvent(void* ptr, void* e){
	static_cast<MyQProgressDialog*>(ptr)->closeEvent(static_cast<QCloseEvent*>(e));
}

void QProgressDialog_CloseEventDefault(void* ptr, void* e){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::closeEvent(static_cast<QCloseEvent*>(e));
}

void QProgressDialog_Open(void* ptr, void* receiver, char* member){
	static_cast<QProgressDialog*>(ptr)->open(static_cast<QObject*>(receiver), const_cast<const char*>(member));
}

void QProgressDialog_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "reset");
}

void QProgressDialog_ResizeEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QProgressDialog_ResizeEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QProgressDialog_SetBar(void* ptr, void* bar){
	static_cast<QProgressDialog*>(ptr)->setBar(static_cast<QProgressBar*>(bar));
}

void QProgressDialog_SetCancelButton(void* ptr, void* cancelButton){
	static_cast<QProgressDialog*>(ptr)->setCancelButton(static_cast<QPushButton*>(cancelButton));
}

void QProgressDialog_SetCancelButtonText(void* ptr, char* cancelButtonText){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "setCancelButtonText", Q_ARG(QString, QString(cancelButtonText)));
}

void QProgressDialog_SetLabel(void* ptr, void* label){
	static_cast<QProgressDialog*>(ptr)->setLabel(static_cast<QLabel*>(label));
}

void QProgressDialog_SetRange(void* ptr, int minimum, int maximum){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "setRange", Q_ARG(int, minimum), Q_ARG(int, maximum));
}

void QProgressDialog_ShowEvent(void* ptr, void* e){
	static_cast<MyQProgressDialog*>(ptr)->showEvent(static_cast<QShowEvent*>(e));
}

void QProgressDialog_ShowEventDefault(void* ptr, void* e){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::showEvent(static_cast<QShowEvent*>(e));
}

void* QProgressDialog_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QProgressDialog*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QProgressDialog*>(ptr)->sizeHint()).height());
}

void QProgressDialog_DestroyQProgressDialog(void* ptr){
	static_cast<QProgressDialog*>(ptr)->~QProgressDialog();
}

void QProgressDialog_Accept(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQProgressDialog*>(ptr), "accept");
}

void QProgressDialog_AcceptDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "accept");
}

void QProgressDialog_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQProgressDialog*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QProgressDialog_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QProgressDialog_Done(void* ptr, int r){
	QMetaObject::invokeMethod(static_cast<MyQProgressDialog*>(ptr), "done", Q_ARG(int, r));
}

void QProgressDialog_DoneDefault(void* ptr, int r){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "done", Q_ARG(int, r));
}

void QProgressDialog_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQProgressDialog*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QProgressDialog_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QProgressDialog_Reject(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQProgressDialog*>(ptr), "reject");
}

void QProgressDialog_RejectDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "reject");
}

void QProgressDialog_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQProgressDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QProgressDialog_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QProgressDialog*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QProgressDialog_ActionEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QProgressDialog_ActionEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::actionEvent(static_cast<QActionEvent*>(event));
}

void QProgressDialog_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QProgressDialog_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QProgressDialog_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QProgressDialog_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QProgressDialog_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QProgressDialog_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QProgressDialog_DropEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QProgressDialog_DropEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::dropEvent(static_cast<QDropEvent*>(event));
}

void QProgressDialog_EnterEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QProgressDialog_EnterEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::enterEvent(static_cast<QEvent*>(event));
}

void QProgressDialog_FocusInEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QProgressDialog_FocusInEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QProgressDialog_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QProgressDialog_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QProgressDialog_HideEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QProgressDialog_HideEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::hideEvent(static_cast<QHideEvent*>(event));
}

void QProgressDialog_LeaveEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QProgressDialog_LeaveEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::leaveEvent(static_cast<QEvent*>(event));
}

void QProgressDialog_MoveEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QProgressDialog_MoveEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::moveEvent(static_cast<QMoveEvent*>(event));
}

void QProgressDialog_PaintEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QProgressDialog_PaintEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::paintEvent(static_cast<QPaintEvent*>(event));
}

void QProgressDialog_InitPainter(void* ptr, void* painter){
	static_cast<MyQProgressDialog*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QProgressDialog_InitPainterDefault(void* ptr, void* painter){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::initPainter(static_cast<QPainter*>(painter));
}

void QProgressDialog_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QProgressDialog_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QProgressDialog_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QProgressDialog_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QProgressDialog_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QProgressDialog_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QProgressDialog_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QProgressDialog_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QProgressDialog_MousePressEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QProgressDialog_MousePressEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QProgressDialog_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QProgressDialog_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QProgressDialog_TabletEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QProgressDialog_TabletEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QProgressDialog_WheelEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QProgressDialog_WheelEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QProgressDialog_TimerEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QProgressDialog_TimerEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::timerEvent(static_cast<QTimerEvent*>(event));
}

void QProgressDialog_ChildEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QProgressDialog_ChildEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::childEvent(static_cast<QChildEvent*>(event));
}

void QProgressDialog_CustomEvent(void* ptr, void* event){
	static_cast<MyQProgressDialog*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QProgressDialog_CustomEventDefault(void* ptr, void* event){
	static_cast<QProgressDialog*>(ptr)->QProgressDialog::customEvent(static_cast<QEvent*>(event));
}

class MyQProxyStyle: public QProxyStyle {
public:
	void drawComplexControl(QStyle::ComplexControl control, const QStyleOptionComplex * option, QPainter * painter, const QWidget * widget) const { callbackQProxyStyleDrawComplexControl(const_cast<MyQProxyStyle*>(this), this->objectName().toUtf8().data(), control, const_cast<QStyleOptionComplex*>(option), painter, const_cast<QWidget*>(widget)); };
	void drawControl(QStyle::ControlElement element, const QStyleOption * option, QPainter * painter, const QWidget * widget) const { callbackQProxyStyleDrawControl(const_cast<MyQProxyStyle*>(this), this->objectName().toUtf8().data(), element, const_cast<QStyleOption*>(option), painter, const_cast<QWidget*>(widget)); };
	void drawItemPixmap(QPainter * painter, const QRect & rect, int alignment, const QPixmap & pixmap) const { callbackQProxyStyleDrawItemPixmap(const_cast<MyQProxyStyle*>(this), this->objectName().toUtf8().data(), painter, new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), alignment, new QPixmap(pixmap)); };
	void drawItemText(QPainter * painter, const QRect & rect, int flags, const QPalette & pal, bool enabled, const QString & text, QPalette::ColorRole textRole) const { callbackQProxyStyleDrawItemText(const_cast<MyQProxyStyle*>(this), this->objectName().toUtf8().data(), painter, new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), flags, new QPalette(pal), enabled, text.toUtf8().data(), textRole); };
	void drawPrimitive(QStyle::PrimitiveElement element, const QStyleOption * option, QPainter * painter, const QWidget * widget) const { callbackQProxyStyleDrawPrimitive(const_cast<MyQProxyStyle*>(this), this->objectName().toUtf8().data(), element, const_cast<QStyleOption*>(option), painter, const_cast<QWidget*>(widget)); };
	void polish(QWidget * widget) { callbackQProxyStylePolish(this, this->objectName().toUtf8().data(), widget); };
	void unpolish(QWidget * widget) { callbackQProxyStyleUnpolish(this, this->objectName().toUtf8().data(), widget); };
	void timerEvent(QTimerEvent * event) { callbackQProxyStyleTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQProxyStyleChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQProxyStyleCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QProxyStyle_BaseStyle(void* ptr){
	return static_cast<QProxyStyle*>(ptr)->baseStyle();
}

void QProxyStyle_DrawComplexControl(void* ptr, int control, void* option, void* painter, void* widget){
	static_cast<MyQProxyStyle*>(ptr)->drawComplexControl(static_cast<QStyle::ComplexControl>(control), static_cast<QStyleOptionComplex*>(option), static_cast<QPainter*>(painter), static_cast<QWidget*>(widget));
}

void QProxyStyle_DrawComplexControlDefault(void* ptr, int control, void* option, void* painter, void* widget){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::drawComplexControl(static_cast<QStyle::ComplexControl>(control), static_cast<QStyleOptionComplex*>(option), static_cast<QPainter*>(painter), static_cast<QWidget*>(widget));
}

void QProxyStyle_DrawControl(void* ptr, int element, void* option, void* painter, void* widget){
	static_cast<MyQProxyStyle*>(ptr)->drawControl(static_cast<QStyle::ControlElement>(element), static_cast<QStyleOption*>(option), static_cast<QPainter*>(painter), static_cast<QWidget*>(widget));
}

void QProxyStyle_DrawControlDefault(void* ptr, int element, void* option, void* painter, void* widget){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::drawControl(static_cast<QStyle::ControlElement>(element), static_cast<QStyleOption*>(option), static_cast<QPainter*>(painter), static_cast<QWidget*>(widget));
}

void QProxyStyle_DrawItemPixmap(void* ptr, void* painter, void* rect, int alignment, void* pixmap){
	static_cast<MyQProxyStyle*>(ptr)->drawItemPixmap(static_cast<QPainter*>(painter), *static_cast<QRect*>(rect), alignment, *static_cast<QPixmap*>(pixmap));
}

void QProxyStyle_DrawItemPixmapDefault(void* ptr, void* painter, void* rect, int alignment, void* pixmap){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::drawItemPixmap(static_cast<QPainter*>(painter), *static_cast<QRect*>(rect), alignment, *static_cast<QPixmap*>(pixmap));
}

void QProxyStyle_DrawItemText(void* ptr, void* painter, void* rect, int flags, void* pal, int enabled, char* text, int textRole){
	static_cast<MyQProxyStyle*>(ptr)->drawItemText(static_cast<QPainter*>(painter), *static_cast<QRect*>(rect), flags, *static_cast<QPalette*>(pal), enabled != 0, QString(text), static_cast<QPalette::ColorRole>(textRole));
}

void QProxyStyle_DrawItemTextDefault(void* ptr, void* painter, void* rect, int flags, void* pal, int enabled, char* text, int textRole){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::drawItemText(static_cast<QPainter*>(painter), *static_cast<QRect*>(rect), flags, *static_cast<QPalette*>(pal), enabled != 0, QString(text), static_cast<QPalette::ColorRole>(textRole));
}

void QProxyStyle_DrawPrimitive(void* ptr, int element, void* option, void* painter, void* widget){
	static_cast<MyQProxyStyle*>(ptr)->drawPrimitive(static_cast<QStyle::PrimitiveElement>(element), static_cast<QStyleOption*>(option), static_cast<QPainter*>(painter), static_cast<QWidget*>(widget));
}

void QProxyStyle_DrawPrimitiveDefault(void* ptr, int element, void* option, void* painter, void* widget){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::drawPrimitive(static_cast<QStyle::PrimitiveElement>(element), static_cast<QStyleOption*>(option), static_cast<QPainter*>(painter), static_cast<QWidget*>(widget));
}

int QProxyStyle_Event(void* ptr, void* e){
	return static_cast<QProxyStyle*>(ptr)->event(static_cast<QEvent*>(e));
}

void* QProxyStyle_GeneratedIconPixmap(void* ptr, int iconMode, void* pixmap, void* opt){
	return new QPixmap(static_cast<QProxyStyle*>(ptr)->generatedIconPixmap(static_cast<QIcon::Mode>(iconMode), *static_cast<QPixmap*>(pixmap), static_cast<QStyleOption*>(opt)));
}

int QProxyStyle_HitTestComplexControl(void* ptr, int control, void* option, void* pos, void* widget){
	return static_cast<QProxyStyle*>(ptr)->hitTestComplexControl(static_cast<QStyle::ComplexControl>(control), static_cast<QStyleOptionComplex*>(option), *static_cast<QPoint*>(pos), static_cast<QWidget*>(widget));
}

void* QProxyStyle_ItemPixmapRect(void* ptr, void* r, int flags, void* pixmap){
	return new QRect(static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->itemPixmapRect(*static_cast<QRect*>(r), flags, *static_cast<QPixmap*>(pixmap))).x(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->itemPixmapRect(*static_cast<QRect*>(r), flags, *static_cast<QPixmap*>(pixmap))).y(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->itemPixmapRect(*static_cast<QRect*>(r), flags, *static_cast<QPixmap*>(pixmap))).width(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->itemPixmapRect(*static_cast<QRect*>(r), flags, *static_cast<QPixmap*>(pixmap))).height());
}

void* QProxyStyle_ItemTextRect(void* ptr, void* fm, void* r, int flags, int enabled, char* text){
	return new QRect(static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->itemTextRect(*static_cast<QFontMetrics*>(fm), *static_cast<QRect*>(r), flags, enabled != 0, QString(text))).x(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->itemTextRect(*static_cast<QFontMetrics*>(fm), *static_cast<QRect*>(r), flags, enabled != 0, QString(text))).y(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->itemTextRect(*static_cast<QFontMetrics*>(fm), *static_cast<QRect*>(r), flags, enabled != 0, QString(text))).width(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->itemTextRect(*static_cast<QFontMetrics*>(fm), *static_cast<QRect*>(r), flags, enabled != 0, QString(text))).height());
}

int QProxyStyle_LayoutSpacing(void* ptr, int control1, int control2, int orientation, void* option, void* widget){
	return static_cast<QProxyStyle*>(ptr)->layoutSpacing(static_cast<QSizePolicy::ControlType>(control1), static_cast<QSizePolicy::ControlType>(control2), static_cast<Qt::Orientation>(orientation), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget));
}

int QProxyStyle_PixelMetric(void* ptr, int metric, void* option, void* widget){
	return static_cast<QProxyStyle*>(ptr)->pixelMetric(static_cast<QStyle::PixelMetric>(metric), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget));
}

void QProxyStyle_Polish(void* ptr, void* widget){
	static_cast<MyQProxyStyle*>(ptr)->polish(static_cast<QWidget*>(widget));
}

void QProxyStyle_PolishDefault(void* ptr, void* widget){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::polish(static_cast<QWidget*>(widget));
}

void QProxyStyle_SetBaseStyle(void* ptr, void* style){
	static_cast<QProxyStyle*>(ptr)->setBaseStyle(static_cast<QStyle*>(style));
}

void* QProxyStyle_SizeFromContents(void* ptr, int ty, void* option, void* size, void* widget){
	return new QSize(static_cast<QSize>(static_cast<QProxyStyle*>(ptr)->sizeFromContents(static_cast<QStyle::ContentsType>(ty), static_cast<QStyleOption*>(option), *static_cast<QSize*>(size), static_cast<QWidget*>(widget))).width(), static_cast<QSize>(static_cast<QProxyStyle*>(ptr)->sizeFromContents(static_cast<QStyle::ContentsType>(ty), static_cast<QStyleOption*>(option), *static_cast<QSize*>(size), static_cast<QWidget*>(widget))).height());
}

void* QProxyStyle_StandardIcon(void* ptr, int standardIcon, void* option, void* widget){
	return new QIcon(static_cast<QProxyStyle*>(ptr)->standardIcon(static_cast<QStyle::StandardPixmap>(standardIcon), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget)));
}

void* QProxyStyle_StandardPalette(void* ptr){
	return new QPalette(static_cast<QProxyStyle*>(ptr)->standardPalette());
}

void* QProxyStyle_StandardPixmap(void* ptr, int standardPixmap, void* opt, void* widget){
	return new QPixmap(static_cast<QProxyStyle*>(ptr)->standardPixmap(static_cast<QStyle::StandardPixmap>(standardPixmap), static_cast<QStyleOption*>(opt), static_cast<QWidget*>(widget)));
}

int QProxyStyle_StyleHint(void* ptr, int hint, void* option, void* widget, void* returnData){
	return static_cast<QProxyStyle*>(ptr)->styleHint(static_cast<QStyle::StyleHint>(hint), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget), static_cast<QStyleHintReturn*>(returnData));
}

void* QProxyStyle_SubControlRect(void* ptr, int cc, void* option, int sc, void* widget){
	return new QRect(static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(option), static_cast<QStyle::SubControl>(sc), static_cast<QWidget*>(widget))).x(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(option), static_cast<QStyle::SubControl>(sc), static_cast<QWidget*>(widget))).y(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(option), static_cast<QStyle::SubControl>(sc), static_cast<QWidget*>(widget))).width(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(cc), static_cast<QStyleOptionComplex*>(option), static_cast<QStyle::SubControl>(sc), static_cast<QWidget*>(widget))).height());
}

void* QProxyStyle_SubElementRect(void* ptr, int element, void* option, void* widget){
	return new QRect(static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(element), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget))).x(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(element), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget))).y(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(element), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget))).width(), static_cast<QRect>(static_cast<QProxyStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(element), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget))).height());
}

void QProxyStyle_Unpolish(void* ptr, void* widget){
	static_cast<MyQProxyStyle*>(ptr)->unpolish(static_cast<QWidget*>(widget));
}

void QProxyStyle_UnpolishDefault(void* ptr, void* widget){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::unpolish(static_cast<QWidget*>(widget));
}

void QProxyStyle_DestroyQProxyStyle(void* ptr){
	static_cast<QProxyStyle*>(ptr)->~QProxyStyle();
}

void QProxyStyle_TimerEvent(void* ptr, void* event){
	static_cast<MyQProxyStyle*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QProxyStyle_TimerEventDefault(void* ptr, void* event){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::timerEvent(static_cast<QTimerEvent*>(event));
}

void QProxyStyle_ChildEvent(void* ptr, void* event){
	static_cast<MyQProxyStyle*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QProxyStyle_ChildEventDefault(void* ptr, void* event){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::childEvent(static_cast<QChildEvent*>(event));
}

void QProxyStyle_CustomEvent(void* ptr, void* event){
	static_cast<MyQProxyStyle*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QProxyStyle_CustomEventDefault(void* ptr, void* event){
	static_cast<QProxyStyle*>(ptr)->QProxyStyle::customEvent(static_cast<QEvent*>(event));
}

class MyQPushButton: public QPushButton {
public:
	MyQPushButton(QWidget *parent) : QPushButton(parent) {};
	MyQPushButton(const QIcon &icon, const QString &text, QWidget *parent) : QPushButton(icon, text, parent) {};
	MyQPushButton(const QString &text, QWidget *parent) : QPushButton(text, parent) {};
	void focusInEvent(QFocusEvent * e) { callbackQPushButtonFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQPushButtonFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQPushButtonKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * v) { callbackQPushButtonPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void changeEvent(QEvent * e) { callbackQPushButtonChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void checkStateSet() { callbackQPushButtonCheckStateSet(this, this->objectName().toUtf8().data()); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQPushButtonKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQPushButtonMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQPushButtonMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQPushButtonMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void nextCheckState() { callbackQPushButtonNextCheckState(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * e) { callbackQPushButtonTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQPushButtonActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQPushButtonDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQPushButtonDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQPushButtonDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQPushButtonDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQPushButtonEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQPushButtonHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQPushButtonLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQPushButtonMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQPushButtonSetVisible(this, this->objectName().toUtf8().data(), visible)) { QPushButton::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQPushButtonShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQPushButtonCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQPushButtonContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQPushButtonInitPainter(const_cast<MyQPushButton*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQPushButtonInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQPushButtonMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQPushButtonResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQPushButtonTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQPushButtonWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQPushButtonChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQPushButtonCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QPushButton_AutoDefault(void* ptr){
	return static_cast<QPushButton*>(ptr)->autoDefault();
}

int QPushButton_IsDefault(void* ptr){
	return static_cast<QPushButton*>(ptr)->isDefault();
}

int QPushButton_IsFlat(void* ptr){
	return static_cast<QPushButton*>(ptr)->isFlat();
}

void QPushButton_SetAutoDefault(void* ptr, int v){
	static_cast<QPushButton*>(ptr)->setAutoDefault(v != 0);
}

void QPushButton_SetDefault(void* ptr, int v){
	static_cast<QPushButton*>(ptr)->setDefault(v != 0);
}

void QPushButton_SetFlat(void* ptr, int v){
	static_cast<QPushButton*>(ptr)->setFlat(v != 0);
}

void* QPushButton_NewQPushButton(void* parent){
	return new MyQPushButton(static_cast<QWidget*>(parent));
}

void* QPushButton_NewQPushButton3(void* icon, char* text, void* parent){
	return new MyQPushButton(*static_cast<QIcon*>(icon), QString(text), static_cast<QWidget*>(parent));
}

void* QPushButton_NewQPushButton2(char* text, void* parent){
	return new MyQPushButton(QString(text), static_cast<QWidget*>(parent));
}

int QPushButton_Event(void* ptr, void* e){
	return static_cast<QPushButton*>(ptr)->event(static_cast<QEvent*>(e));
}

void QPushButton_FocusInEvent(void* ptr, void* e){
	static_cast<MyQPushButton*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QPushButton_FocusInEventDefault(void* ptr, void* e){
	static_cast<QPushButton*>(ptr)->QPushButton::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QPushButton_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQPushButton*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QPushButton_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QPushButton*>(ptr)->QPushButton::focusOutEvent(static_cast<QFocusEvent*>(e));
}

int QPushButton_HitButton(void* ptr, void* pos){
	return static_cast<QPushButton*>(ptr)->hitButton(*static_cast<QPoint*>(pos));
}

void QPushButton_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQPushButton*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QPushButton_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QPushButton*>(ptr)->QPushButton::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void* QPushButton_Menu(void* ptr){
	return static_cast<QPushButton*>(ptr)->menu();
}

void* QPushButton_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QPushButton*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QPushButton*>(ptr)->minimumSizeHint()).height());
}

void QPushButton_PaintEvent(void* ptr, void* v){
	static_cast<MyQPushButton*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QPushButton_PaintEventDefault(void* ptr, void* v){
	static_cast<QPushButton*>(ptr)->QPushButton::paintEvent(static_cast<QPaintEvent*>(v));
}

void QPushButton_SetMenu(void* ptr, void* menu){
	static_cast<QPushButton*>(ptr)->setMenu(static_cast<QMenu*>(menu));
}

void QPushButton_ShowMenu(void* ptr){
	QMetaObject::invokeMethod(static_cast<QPushButton*>(ptr), "showMenu");
}

void* QPushButton_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QPushButton*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QPushButton*>(ptr)->sizeHint()).height());
}

void QPushButton_DestroyQPushButton(void* ptr){
	static_cast<QPushButton*>(ptr)->~QPushButton();
}

void QPushButton_ChangeEvent(void* ptr, void* e){
	static_cast<MyQPushButton*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QPushButton_ChangeEventDefault(void* ptr, void* e){
	static_cast<QPushButton*>(ptr)->QPushButton::changeEvent(static_cast<QEvent*>(e));
}

void QPushButton_CheckStateSet(void* ptr){
	static_cast<MyQPushButton*>(ptr)->checkStateSet();
}

void QPushButton_CheckStateSetDefault(void* ptr){
	static_cast<QPushButton*>(ptr)->QPushButton::checkStateSet();
}

void QPushButton_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQPushButton*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QPushButton_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QPushButton*>(ptr)->QPushButton::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QPushButton_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQPushButton*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QPushButton_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QPushButton*>(ptr)->QPushButton::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QPushButton_MousePressEvent(void* ptr, void* e){
	static_cast<MyQPushButton*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QPushButton_MousePressEventDefault(void* ptr, void* e){
	static_cast<QPushButton*>(ptr)->QPushButton::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QPushButton_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQPushButton*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QPushButton_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QPushButton*>(ptr)->QPushButton::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QPushButton_NextCheckState(void* ptr){
	static_cast<MyQPushButton*>(ptr)->nextCheckState();
}

void QPushButton_NextCheckStateDefault(void* ptr){
	static_cast<QPushButton*>(ptr)->QPushButton::nextCheckState();
}

void QPushButton_TimerEvent(void* ptr, void* e){
	static_cast<MyQPushButton*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QPushButton_TimerEventDefault(void* ptr, void* e){
	static_cast<QPushButton*>(ptr)->QPushButton::timerEvent(static_cast<QTimerEvent*>(e));
}

void QPushButton_ActionEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QPushButton_ActionEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::actionEvent(static_cast<QActionEvent*>(event));
}

void QPushButton_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QPushButton_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QPushButton_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QPushButton_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QPushButton_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QPushButton_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QPushButton_DropEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QPushButton_DropEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::dropEvent(static_cast<QDropEvent*>(event));
}

void QPushButton_EnterEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QPushButton_EnterEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::enterEvent(static_cast<QEvent*>(event));
}

void QPushButton_HideEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QPushButton_HideEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::hideEvent(static_cast<QHideEvent*>(event));
}

void QPushButton_LeaveEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QPushButton_LeaveEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::leaveEvent(static_cast<QEvent*>(event));
}

void QPushButton_MoveEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QPushButton_MoveEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::moveEvent(static_cast<QMoveEvent*>(event));
}

void QPushButton_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQPushButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QPushButton_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QPushButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QPushButton_ShowEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QPushButton_ShowEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::showEvent(static_cast<QShowEvent*>(event));
}

void QPushButton_CloseEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QPushButton_CloseEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::closeEvent(static_cast<QCloseEvent*>(event));
}

void QPushButton_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QPushButton_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QPushButton_InitPainter(void* ptr, void* painter){
	static_cast<MyQPushButton*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QPushButton_InitPainterDefault(void* ptr, void* painter){
	static_cast<QPushButton*>(ptr)->QPushButton::initPainter(static_cast<QPainter*>(painter));
}

void QPushButton_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QPushButton_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QPushButton_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QPushButton_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QPushButton_ResizeEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QPushButton_ResizeEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QPushButton_TabletEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QPushButton_TabletEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QPushButton_WheelEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QPushButton_WheelEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QPushButton_ChildEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QPushButton_ChildEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::childEvent(static_cast<QChildEvent*>(event));
}

void QPushButton_CustomEvent(void* ptr, void* event){
	static_cast<MyQPushButton*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QPushButton_CustomEventDefault(void* ptr, void* event){
	static_cast<QPushButton*>(ptr)->QPushButton::customEvent(static_cast<QEvent*>(event));
}

class MyQRadioButton: public QRadioButton {
public:
	MyQRadioButton(QWidget *parent) : QRadioButton(parent) {};
	MyQRadioButton(const QString &text, QWidget *parent) : QRadioButton(text, parent) {};
	void mouseMoveEvent(QMouseEvent * e) { callbackQRadioButtonMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * v) { callbackQRadioButtonPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void changeEvent(QEvent * e) { callbackQRadioButtonChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void checkStateSet() { callbackQRadioButtonCheckStateSet(this, this->objectName().toUtf8().data()); };
	void focusInEvent(QFocusEvent * e) { callbackQRadioButtonFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQRadioButtonFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQRadioButtonKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQRadioButtonKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQRadioButtonMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQRadioButtonMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void nextCheckState() { callbackQRadioButtonNextCheckState(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * e) { callbackQRadioButtonTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQRadioButtonActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQRadioButtonDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQRadioButtonDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQRadioButtonDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQRadioButtonDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQRadioButtonEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQRadioButtonHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQRadioButtonLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQRadioButtonMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQRadioButtonSetVisible(this, this->objectName().toUtf8().data(), visible)) { QRadioButton::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQRadioButtonShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQRadioButtonCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQRadioButtonContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQRadioButtonInitPainter(const_cast<MyQRadioButton*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQRadioButtonInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQRadioButtonMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQRadioButtonResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQRadioButtonTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQRadioButtonWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQRadioButtonChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQRadioButtonCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QRadioButton_NewQRadioButton(void* parent){
	return new MyQRadioButton(static_cast<QWidget*>(parent));
}

void* QRadioButton_NewQRadioButton2(char* text, void* parent){
	return new MyQRadioButton(QString(text), static_cast<QWidget*>(parent));
}

int QRadioButton_Event(void* ptr, void* e){
	return static_cast<QRadioButton*>(ptr)->event(static_cast<QEvent*>(e));
}

int QRadioButton_HitButton(void* ptr, void* pos){
	return static_cast<QRadioButton*>(ptr)->hitButton(*static_cast<QPoint*>(pos));
}

void* QRadioButton_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QRadioButton*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QRadioButton*>(ptr)->minimumSizeHint()).height());
}

void QRadioButton_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQRadioButton*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QRadioButton_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QRadioButton*>(ptr)->QRadioButton::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QRadioButton_PaintEvent(void* ptr, void* v){
	static_cast<MyQRadioButton*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QRadioButton_PaintEventDefault(void* ptr, void* v){
	static_cast<QRadioButton*>(ptr)->QRadioButton::paintEvent(static_cast<QPaintEvent*>(v));
}

void* QRadioButton_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QRadioButton*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QRadioButton*>(ptr)->sizeHint()).height());
}

void QRadioButton_DestroyQRadioButton(void* ptr){
	static_cast<QRadioButton*>(ptr)->~QRadioButton();
}

void QRadioButton_ChangeEvent(void* ptr, void* e){
	static_cast<MyQRadioButton*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QRadioButton_ChangeEventDefault(void* ptr, void* e){
	static_cast<QRadioButton*>(ptr)->QRadioButton::changeEvent(static_cast<QEvent*>(e));
}

void QRadioButton_CheckStateSet(void* ptr){
	static_cast<MyQRadioButton*>(ptr)->checkStateSet();
}

void QRadioButton_CheckStateSetDefault(void* ptr){
	static_cast<QRadioButton*>(ptr)->QRadioButton::checkStateSet();
}

void QRadioButton_FocusInEvent(void* ptr, void* e){
	static_cast<MyQRadioButton*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QRadioButton_FocusInEventDefault(void* ptr, void* e){
	static_cast<QRadioButton*>(ptr)->QRadioButton::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QRadioButton_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQRadioButton*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QRadioButton_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QRadioButton*>(ptr)->QRadioButton::focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QRadioButton_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQRadioButton*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QRadioButton_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QRadioButton*>(ptr)->QRadioButton::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QRadioButton_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQRadioButton*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QRadioButton_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QRadioButton*>(ptr)->QRadioButton::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QRadioButton_MousePressEvent(void* ptr, void* e){
	static_cast<MyQRadioButton*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QRadioButton_MousePressEventDefault(void* ptr, void* e){
	static_cast<QRadioButton*>(ptr)->QRadioButton::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QRadioButton_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQRadioButton*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QRadioButton_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QRadioButton*>(ptr)->QRadioButton::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QRadioButton_NextCheckState(void* ptr){
	static_cast<MyQRadioButton*>(ptr)->nextCheckState();
}

void QRadioButton_NextCheckStateDefault(void* ptr){
	static_cast<QRadioButton*>(ptr)->QRadioButton::nextCheckState();
}

void QRadioButton_TimerEvent(void* ptr, void* e){
	static_cast<MyQRadioButton*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QRadioButton_TimerEventDefault(void* ptr, void* e){
	static_cast<QRadioButton*>(ptr)->QRadioButton::timerEvent(static_cast<QTimerEvent*>(e));
}

void QRadioButton_ActionEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QRadioButton_ActionEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::actionEvent(static_cast<QActionEvent*>(event));
}

void QRadioButton_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QRadioButton_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QRadioButton_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QRadioButton_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QRadioButton_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QRadioButton_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QRadioButton_DropEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QRadioButton_DropEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::dropEvent(static_cast<QDropEvent*>(event));
}

void QRadioButton_EnterEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QRadioButton_EnterEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::enterEvent(static_cast<QEvent*>(event));
}

void QRadioButton_HideEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QRadioButton_HideEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::hideEvent(static_cast<QHideEvent*>(event));
}

void QRadioButton_LeaveEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QRadioButton_LeaveEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::leaveEvent(static_cast<QEvent*>(event));
}

void QRadioButton_MoveEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QRadioButton_MoveEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::moveEvent(static_cast<QMoveEvent*>(event));
}

void QRadioButton_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQRadioButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QRadioButton_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QRadioButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QRadioButton_ShowEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QRadioButton_ShowEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::showEvent(static_cast<QShowEvent*>(event));
}

void QRadioButton_CloseEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QRadioButton_CloseEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::closeEvent(static_cast<QCloseEvent*>(event));
}

void QRadioButton_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QRadioButton_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QRadioButton_InitPainter(void* ptr, void* painter){
	static_cast<MyQRadioButton*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QRadioButton_InitPainterDefault(void* ptr, void* painter){
	static_cast<QRadioButton*>(ptr)->QRadioButton::initPainter(static_cast<QPainter*>(painter));
}

void QRadioButton_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QRadioButton_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QRadioButton_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QRadioButton_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QRadioButton_ResizeEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QRadioButton_ResizeEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QRadioButton_TabletEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QRadioButton_TabletEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QRadioButton_WheelEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QRadioButton_WheelEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QRadioButton_ChildEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QRadioButton_ChildEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::childEvent(static_cast<QChildEvent*>(event));
}

void QRadioButton_CustomEvent(void* ptr, void* event){
	static_cast<MyQRadioButton*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QRadioButton_CustomEventDefault(void* ptr, void* event){
	static_cast<QRadioButton*>(ptr)->QRadioButton::customEvent(static_cast<QEvent*>(event));
}

class MyQRubberBand: public QRubberBand {
public:
	MyQRubberBand(Shape s, QWidget *p) : QRubberBand(s, p) {};
	void changeEvent(QEvent * e) { callbackQRubberBandChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void moveEvent(QMoveEvent * v) { callbackQRubberBandMoveEvent(this, this->objectName().toUtf8().data(), v); };
	void paintEvent(QPaintEvent * v) { callbackQRubberBandPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void resizeEvent(QResizeEvent * v) { callbackQRubberBandResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void showEvent(QShowEvent * e) { callbackQRubberBandShowEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQRubberBandActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQRubberBandDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQRubberBandDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQRubberBandDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQRubberBandDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQRubberBandEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQRubberBandFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQRubberBandFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQRubberBandHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQRubberBandLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQRubberBandSetVisible(this, this->objectName().toUtf8().data(), visible)) { QRubberBand::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQRubberBandCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQRubberBandContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQRubberBandInitPainter(const_cast<MyQRubberBand*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQRubberBandInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQRubberBandKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQRubberBandKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQRubberBandMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQRubberBandMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQRubberBandMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQRubberBandMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQRubberBandTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQRubberBandWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQRubberBandTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQRubberBandChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQRubberBandCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QRubberBand_SetGeometry(void* ptr, void* rect){
	static_cast<QRubberBand*>(ptr)->setGeometry(*static_cast<QRect*>(rect));
}

void* QRubberBand_NewQRubberBand(int s, void* p){
	return new MyQRubberBand(static_cast<QRubberBand::Shape>(s), static_cast<QWidget*>(p));
}

void QRubberBand_ChangeEvent(void* ptr, void* e){
	static_cast<MyQRubberBand*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QRubberBand_ChangeEventDefault(void* ptr, void* e){
	static_cast<QRubberBand*>(ptr)->QRubberBand::changeEvent(static_cast<QEvent*>(e));
}

int QRubberBand_Event(void* ptr, void* e){
	return static_cast<QRubberBand*>(ptr)->event(static_cast<QEvent*>(e));
}

void QRubberBand_Move2(void* ptr, void* p){
	static_cast<QRubberBand*>(ptr)->move(*static_cast<QPoint*>(p));
}

void QRubberBand_Move(void* ptr, int x, int y){
	static_cast<QRubberBand*>(ptr)->move(x, y);
}

void QRubberBand_MoveEvent(void* ptr, void* v){
	static_cast<MyQRubberBand*>(ptr)->moveEvent(static_cast<QMoveEvent*>(v));
}

void QRubberBand_MoveEventDefault(void* ptr, void* v){
	static_cast<QRubberBand*>(ptr)->QRubberBand::moveEvent(static_cast<QMoveEvent*>(v));
}

void QRubberBand_PaintEvent(void* ptr, void* v){
	static_cast<MyQRubberBand*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QRubberBand_PaintEventDefault(void* ptr, void* v){
	static_cast<QRubberBand*>(ptr)->QRubberBand::paintEvent(static_cast<QPaintEvent*>(v));
}

void QRubberBand_Resize2(void* ptr, void* size){
	static_cast<QRubberBand*>(ptr)->resize(*static_cast<QSize*>(size));
}

void QRubberBand_Resize(void* ptr, int width, int height){
	static_cast<QRubberBand*>(ptr)->resize(width, height);
}

void QRubberBand_ResizeEvent(void* ptr, void* v){
	static_cast<MyQRubberBand*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QRubberBand_ResizeEventDefault(void* ptr, void* v){
	static_cast<QRubberBand*>(ptr)->QRubberBand::resizeEvent(static_cast<QResizeEvent*>(v));
}

void QRubberBand_SetGeometry2(void* ptr, int x, int y, int width, int height){
	static_cast<QRubberBand*>(ptr)->setGeometry(x, y, width, height);
}

int QRubberBand_Shape(void* ptr){
	return static_cast<QRubberBand*>(ptr)->shape();
}

void QRubberBand_ShowEvent(void* ptr, void* e){
	static_cast<MyQRubberBand*>(ptr)->showEvent(static_cast<QShowEvent*>(e));
}

void QRubberBand_ShowEventDefault(void* ptr, void* e){
	static_cast<QRubberBand*>(ptr)->QRubberBand::showEvent(static_cast<QShowEvent*>(e));
}

void QRubberBand_DestroyQRubberBand(void* ptr){
	static_cast<QRubberBand*>(ptr)->~QRubberBand();
}

void QRubberBand_ActionEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QRubberBand_ActionEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::actionEvent(static_cast<QActionEvent*>(event));
}

void QRubberBand_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QRubberBand_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QRubberBand_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QRubberBand_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QRubberBand_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QRubberBand_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QRubberBand_DropEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QRubberBand_DropEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::dropEvent(static_cast<QDropEvent*>(event));
}

void QRubberBand_EnterEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QRubberBand_EnterEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::enterEvent(static_cast<QEvent*>(event));
}

void QRubberBand_FocusInEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QRubberBand_FocusInEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QRubberBand_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QRubberBand_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QRubberBand_HideEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QRubberBand_HideEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::hideEvent(static_cast<QHideEvent*>(event));
}

void QRubberBand_LeaveEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QRubberBand_LeaveEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::leaveEvent(static_cast<QEvent*>(event));
}

void QRubberBand_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQRubberBand*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QRubberBand_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QRubberBand*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QRubberBand_CloseEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QRubberBand_CloseEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::closeEvent(static_cast<QCloseEvent*>(event));
}

void QRubberBand_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QRubberBand_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QRubberBand_InitPainter(void* ptr, void* painter){
	static_cast<MyQRubberBand*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QRubberBand_InitPainterDefault(void* ptr, void* painter){
	static_cast<QRubberBand*>(ptr)->QRubberBand::initPainter(static_cast<QPainter*>(painter));
}

void QRubberBand_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QRubberBand_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QRubberBand_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QRubberBand_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QRubberBand_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QRubberBand_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QRubberBand_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QRubberBand_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QRubberBand_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QRubberBand_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QRubberBand_MousePressEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QRubberBand_MousePressEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QRubberBand_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QRubberBand_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QRubberBand_TabletEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QRubberBand_TabletEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QRubberBand_WheelEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QRubberBand_WheelEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QRubberBand_TimerEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QRubberBand_TimerEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::timerEvent(static_cast<QTimerEvent*>(event));
}

void QRubberBand_ChildEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QRubberBand_ChildEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::childEvent(static_cast<QChildEvent*>(event));
}

void QRubberBand_CustomEvent(void* ptr, void* event){
	static_cast<MyQRubberBand*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QRubberBand_CustomEventDefault(void* ptr, void* event){
	static_cast<QRubberBand*>(ptr)->QRubberBand::customEvent(static_cast<QEvent*>(event));
}

class MyQScrollArea: public QScrollArea {
public:
	MyQScrollArea(QWidget *parent) : QScrollArea(parent) {};
	void resizeEvent(QResizeEvent * v) { callbackQScrollAreaResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void scrollContentsBy(int dx, int dy) { callbackQScrollAreaScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQScrollAreaDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQScrollAreaDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQScrollAreaDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQScrollAreaDropEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQScrollAreaPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQScrollAreaContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQScrollAreaKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseDoubleClickEvent(QMouseEvent * e) { callbackQScrollAreaMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQScrollAreaMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQScrollAreaMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQScrollAreaMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void setupViewport(QWidget * viewport) { callbackQScrollAreaSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQScrollAreaWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQScrollAreaChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQScrollAreaActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQScrollAreaEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQScrollAreaFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQScrollAreaFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQScrollAreaHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQScrollAreaLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQScrollAreaMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQScrollAreaSetVisible(this, this->objectName().toUtf8().data(), visible)) { QScrollArea::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQScrollAreaShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQScrollAreaCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQScrollAreaInitPainter(const_cast<MyQScrollArea*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQScrollAreaInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQScrollAreaKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQScrollAreaTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQScrollAreaTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQScrollAreaChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQScrollAreaCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QScrollArea_Alignment(void* ptr){
	return static_cast<QScrollArea*>(ptr)->alignment();
}

void QScrollArea_SetAlignment(void* ptr, int v){
	static_cast<QScrollArea*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(v));
}

void QScrollArea_SetWidget(void* ptr, void* widget){
	static_cast<QScrollArea*>(ptr)->setWidget(static_cast<QWidget*>(widget));
}

void QScrollArea_SetWidgetResizable(void* ptr, int resizable){
	static_cast<QScrollArea*>(ptr)->setWidgetResizable(resizable != 0);
}

int QScrollArea_WidgetResizable(void* ptr){
	return static_cast<QScrollArea*>(ptr)->widgetResizable();
}

void* QScrollArea_NewQScrollArea(void* parent){
	return new MyQScrollArea(static_cast<QWidget*>(parent));
}

void QScrollArea_EnsureVisible(void* ptr, int x, int y, int xmargin, int ymargin){
	static_cast<QScrollArea*>(ptr)->ensureVisible(x, y, xmargin, ymargin);
}

void QScrollArea_EnsureWidgetVisible(void* ptr, void* childWidget, int xmargin, int ymargin){
	static_cast<QScrollArea*>(ptr)->ensureWidgetVisible(static_cast<QWidget*>(childWidget), xmargin, ymargin);
}

int QScrollArea_Event(void* ptr, void* e){
	return static_cast<QScrollArea*>(ptr)->event(static_cast<QEvent*>(e));
}

int QScrollArea_EventFilter(void* ptr, void* o, void* e){
	return static_cast<QScrollArea*>(ptr)->eventFilter(static_cast<QObject*>(o), static_cast<QEvent*>(e));
}

int QScrollArea_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QScrollArea*>(ptr)->focusNextPrevChild(next != 0);
}

void QScrollArea_ResizeEvent(void* ptr, void* v){
	static_cast<MyQScrollArea*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QScrollArea_ResizeEventDefault(void* ptr, void* v){
	static_cast<QScrollArea*>(ptr)->QScrollArea::resizeEvent(static_cast<QResizeEvent*>(v));
}

void QScrollArea_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQScrollArea*>(ptr)->scrollContentsBy(dx, dy);
}

void QScrollArea_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QScrollArea*>(ptr)->QScrollArea::scrollContentsBy(dx, dy);
}

void* QScrollArea_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QScrollArea*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QScrollArea*>(ptr)->sizeHint()).height());
}

void* QScrollArea_TakeWidget(void* ptr){
	return static_cast<QScrollArea*>(ptr)->takeWidget();
}

void* QScrollArea_ViewportSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QScrollArea*>(ptr)->viewportSizeHint()).width(), static_cast<QSize>(static_cast<QScrollArea*>(ptr)->viewportSizeHint()).height());
}

void* QScrollArea_Widget(void* ptr){
	return static_cast<QScrollArea*>(ptr)->widget();
}

void QScrollArea_DestroyQScrollArea(void* ptr){
	static_cast<QScrollArea*>(ptr)->~QScrollArea();
}

void QScrollArea_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QScrollArea_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QScrollArea_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QScrollArea_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QScrollArea_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QScrollArea_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QScrollArea_DropEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QScrollArea_DropEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::dropEvent(static_cast<QDropEvent*>(event));
}

void QScrollArea_PaintEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QScrollArea_PaintEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::paintEvent(static_cast<QPaintEvent*>(event));
}

void QScrollArea_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQScrollArea*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QScrollArea_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QScrollArea*>(ptr)->QScrollArea::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QScrollArea_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQScrollArea*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QScrollArea_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QScrollArea*>(ptr)->QScrollArea::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QScrollArea_MouseDoubleClickEvent(void* ptr, void* e){
	static_cast<MyQScrollArea*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QScrollArea_MouseDoubleClickEventDefault(void* ptr, void* e){
	static_cast<QScrollArea*>(ptr)->QScrollArea::mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QScrollArea_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQScrollArea*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QScrollArea_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QScrollArea*>(ptr)->QScrollArea::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QScrollArea_MousePressEvent(void* ptr, void* e){
	static_cast<MyQScrollArea*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QScrollArea_MousePressEventDefault(void* ptr, void* e){
	static_cast<QScrollArea*>(ptr)->QScrollArea::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QScrollArea_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQScrollArea*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QScrollArea_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QScrollArea*>(ptr)->QScrollArea::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QScrollArea_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQScrollArea*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QScrollArea_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QScrollArea*>(ptr)->QScrollArea::setupViewport(static_cast<QWidget*>(viewport));
}

void QScrollArea_WheelEvent(void* ptr, void* e){
	static_cast<MyQScrollArea*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QScrollArea_WheelEventDefault(void* ptr, void* e){
	static_cast<QScrollArea*>(ptr)->QScrollArea::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QScrollArea_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQScrollArea*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QScrollArea_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QScrollArea*>(ptr)->QScrollArea::changeEvent(static_cast<QEvent*>(ev));
}

void QScrollArea_ActionEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QScrollArea_ActionEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::actionEvent(static_cast<QActionEvent*>(event));
}

void QScrollArea_EnterEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QScrollArea_EnterEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::enterEvent(static_cast<QEvent*>(event));
}

void QScrollArea_FocusInEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QScrollArea_FocusInEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QScrollArea_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QScrollArea_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QScrollArea_HideEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QScrollArea_HideEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::hideEvent(static_cast<QHideEvent*>(event));
}

void QScrollArea_LeaveEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QScrollArea_LeaveEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::leaveEvent(static_cast<QEvent*>(event));
}

void QScrollArea_MoveEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QScrollArea_MoveEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::moveEvent(static_cast<QMoveEvent*>(event));
}

void QScrollArea_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQScrollArea*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QScrollArea_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QScrollArea*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QScrollArea_ShowEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QScrollArea_ShowEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::showEvent(static_cast<QShowEvent*>(event));
}

void QScrollArea_CloseEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QScrollArea_CloseEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::closeEvent(static_cast<QCloseEvent*>(event));
}

void QScrollArea_InitPainter(void* ptr, void* painter){
	static_cast<MyQScrollArea*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QScrollArea_InitPainterDefault(void* ptr, void* painter){
	static_cast<QScrollArea*>(ptr)->QScrollArea::initPainter(static_cast<QPainter*>(painter));
}

void QScrollArea_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QScrollArea_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QScrollArea_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QScrollArea_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QScrollArea_TabletEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QScrollArea_TabletEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QScrollArea_TimerEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QScrollArea_TimerEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::timerEvent(static_cast<QTimerEvent*>(event));
}

void QScrollArea_ChildEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QScrollArea_ChildEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::childEvent(static_cast<QChildEvent*>(event));
}

void QScrollArea_CustomEvent(void* ptr, void* event){
	static_cast<MyQScrollArea*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QScrollArea_CustomEventDefault(void* ptr, void* event){
	static_cast<QScrollArea*>(ptr)->QScrollArea::customEvent(static_cast<QEvent*>(event));
}

class MyQScrollBar: public QScrollBar {
public:
	MyQScrollBar(QWidget *parent) : QScrollBar(parent) {};
	MyQScrollBar(Qt::Orientation orientation, QWidget *parent) : QScrollBar(orientation, parent) {};
	void contextMenuEvent(QContextMenuEvent * event) { callbackQScrollBarContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * v) { callbackQScrollBarHideEvent(this, this->objectName().toUtf8().data(), v); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQScrollBarMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQScrollBarMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQScrollBarMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * v) { callbackQScrollBarPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void sliderChange(QAbstractSlider::SliderChange change) { callbackQScrollBarSliderChange(this, this->objectName().toUtf8().data(), change); };
	void wheelEvent(QWheelEvent * event) { callbackQScrollBarWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * ev) { callbackQScrollBarChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void keyPressEvent(QKeyEvent * ev) { callbackQScrollBarKeyPressEvent(this, this->objectName().toUtf8().data(), ev); };
	void timerEvent(QTimerEvent * e) { callbackQScrollBarTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQScrollBarActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQScrollBarDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQScrollBarDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQScrollBarDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQScrollBarDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQScrollBarEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQScrollBarFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQScrollBarFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQScrollBarLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQScrollBarMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQScrollBarSetVisible(this, this->objectName().toUtf8().data(), visible)) { QScrollBar::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQScrollBarShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQScrollBarCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQScrollBarInitPainter(const_cast<MyQScrollBar*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQScrollBarInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQScrollBarKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQScrollBarMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQScrollBarResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQScrollBarTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQScrollBarChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQScrollBarCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QScrollBar_NewQScrollBar(void* parent){
	return new MyQScrollBar(static_cast<QWidget*>(parent));
}

void* QScrollBar_NewQScrollBar2(int orientation, void* parent){
	return new MyQScrollBar(static_cast<Qt::Orientation>(orientation), static_cast<QWidget*>(parent));
}

void QScrollBar_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QScrollBar_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

int QScrollBar_Event(void* ptr, void* event){
	return static_cast<QScrollBar*>(ptr)->event(static_cast<QEvent*>(event));
}

void QScrollBar_HideEvent(void* ptr, void* v){
	static_cast<MyQScrollBar*>(ptr)->hideEvent(static_cast<QHideEvent*>(v));
}

void QScrollBar_HideEventDefault(void* ptr, void* v){
	static_cast<QScrollBar*>(ptr)->QScrollBar::hideEvent(static_cast<QHideEvent*>(v));
}

void QScrollBar_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQScrollBar*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QScrollBar_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QScrollBar*>(ptr)->QScrollBar::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QScrollBar_MousePressEvent(void* ptr, void* e){
	static_cast<MyQScrollBar*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QScrollBar_MousePressEventDefault(void* ptr, void* e){
	static_cast<QScrollBar*>(ptr)->QScrollBar::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QScrollBar_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQScrollBar*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QScrollBar_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QScrollBar*>(ptr)->QScrollBar::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QScrollBar_PaintEvent(void* ptr, void* v){
	static_cast<MyQScrollBar*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QScrollBar_PaintEventDefault(void* ptr, void* v){
	static_cast<QScrollBar*>(ptr)->QScrollBar::paintEvent(static_cast<QPaintEvent*>(v));
}

void* QScrollBar_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QScrollBar*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QScrollBar*>(ptr)->sizeHint()).height());
}

void QScrollBar_SliderChange(void* ptr, int change){
	static_cast<MyQScrollBar*>(ptr)->sliderChange(static_cast<QAbstractSlider::SliderChange>(change));
}

void QScrollBar_SliderChangeDefault(void* ptr, int change){
	static_cast<QScrollBar*>(ptr)->QScrollBar::sliderChange(static_cast<QAbstractSlider::SliderChange>(change));
}

void QScrollBar_WheelEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QScrollBar_WheelEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QScrollBar_DestroyQScrollBar(void* ptr){
	static_cast<QScrollBar*>(ptr)->~QScrollBar();
}

void QScrollBar_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQScrollBar*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QScrollBar_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QScrollBar*>(ptr)->QScrollBar::changeEvent(static_cast<QEvent*>(ev));
}

void QScrollBar_KeyPressEvent(void* ptr, void* ev){
	static_cast<MyQScrollBar*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QScrollBar_KeyPressEventDefault(void* ptr, void* ev){
	static_cast<QScrollBar*>(ptr)->QScrollBar::keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QScrollBar_TimerEvent(void* ptr, void* e){
	static_cast<MyQScrollBar*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QScrollBar_TimerEventDefault(void* ptr, void* e){
	static_cast<QScrollBar*>(ptr)->QScrollBar::timerEvent(static_cast<QTimerEvent*>(e));
}

void QScrollBar_ActionEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QScrollBar_ActionEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::actionEvent(static_cast<QActionEvent*>(event));
}

void QScrollBar_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QScrollBar_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QScrollBar_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QScrollBar_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QScrollBar_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QScrollBar_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QScrollBar_DropEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QScrollBar_DropEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::dropEvent(static_cast<QDropEvent*>(event));
}

void QScrollBar_EnterEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QScrollBar_EnterEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::enterEvent(static_cast<QEvent*>(event));
}

void QScrollBar_FocusInEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QScrollBar_FocusInEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QScrollBar_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QScrollBar_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QScrollBar_LeaveEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QScrollBar_LeaveEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::leaveEvent(static_cast<QEvent*>(event));
}

void QScrollBar_MoveEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QScrollBar_MoveEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::moveEvent(static_cast<QMoveEvent*>(event));
}

void QScrollBar_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQScrollBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QScrollBar_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QScrollBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QScrollBar_ShowEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QScrollBar_ShowEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::showEvent(static_cast<QShowEvent*>(event));
}

void QScrollBar_CloseEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QScrollBar_CloseEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::closeEvent(static_cast<QCloseEvent*>(event));
}

void QScrollBar_InitPainter(void* ptr, void* painter){
	static_cast<MyQScrollBar*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QScrollBar_InitPainterDefault(void* ptr, void* painter){
	static_cast<QScrollBar*>(ptr)->QScrollBar::initPainter(static_cast<QPainter*>(painter));
}

void QScrollBar_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QScrollBar_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QScrollBar_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QScrollBar_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QScrollBar_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QScrollBar_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QScrollBar_ResizeEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QScrollBar_ResizeEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QScrollBar_TabletEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QScrollBar_TabletEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QScrollBar_ChildEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QScrollBar_ChildEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::childEvent(static_cast<QChildEvent*>(event));
}

void QScrollBar_CustomEvent(void* ptr, void* event){
	static_cast<MyQScrollBar*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QScrollBar_CustomEventDefault(void* ptr, void* event){
	static_cast<QScrollBar*>(ptr)->QScrollBar::customEvent(static_cast<QEvent*>(event));
}

class MyQScroller: public QScroller {
public:
	void Signal_ScrollerPropertiesChanged(const QScrollerProperties & newProperties) { callbackQScrollerScrollerPropertiesChanged(this, this->objectName().toUtf8().data(), new QScrollerProperties(newProperties)); };
	void Signal_StateChanged(QScroller::State newState) { callbackQScrollerStateChanged(this, this->objectName().toUtf8().data(), newState); };
	void timerEvent(QTimerEvent * event) { callbackQScrollerTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQScrollerChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQScrollerCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QScroller_ScrollerProperties(void* ptr){
	return new QScrollerProperties(static_cast<QScroller*>(ptr)->scrollerProperties());
}

void QScroller_SetScrollerProperties(void* ptr, void* prop){
	QMetaObject::invokeMethod(static_cast<QScroller*>(ptr), "setScrollerProperties", Q_ARG(QScrollerProperties, *static_cast<QScrollerProperties*>(prop)));
}

int QScroller_State(void* ptr){
	return static_cast<QScroller*>(ptr)->state();
}

void QScroller_EnsureVisible(void* ptr, void* rect, double xmargin, double ymargin){
	QMetaObject::invokeMethod(static_cast<QScroller*>(ptr), "ensureVisible", Q_ARG(QRectF, *static_cast<QRectF*>(rect)), Q_ARG(qreal, static_cast<double>(xmargin)), Q_ARG(qreal, static_cast<double>(ymargin)));
}

void QScroller_EnsureVisible2(void* ptr, void* rect, double xmargin, double ymargin, int scrollTime){
	QMetaObject::invokeMethod(static_cast<QScroller*>(ptr), "ensureVisible", Q_ARG(QRectF, *static_cast<QRectF*>(rect)), Q_ARG(qreal, static_cast<double>(xmargin)), Q_ARG(qreal, static_cast<double>(ymargin)), Q_ARG(int, scrollTime));
}

int QScroller_QScroller_GrabGesture(void* target, int scrollGestureType){
	return QScroller::grabGesture(static_cast<QObject*>(target), static_cast<QScroller::ScrollerGestureType>(scrollGestureType));
}

int QScroller_QScroller_GrabbedGesture(void* target){
	return QScroller::grabbedGesture(static_cast<QObject*>(target));
}

int QScroller_HandleInput(void* ptr, int input, void* position, long long timestamp){
	return static_cast<QScroller*>(ptr)->handleInput(static_cast<QScroller::Input>(input), *static_cast<QPointF*>(position), static_cast<long long>(timestamp));
}

int QScroller_QScroller_HasScroller(void* target){
	return QScroller::hasScroller(static_cast<QObject*>(target));
}

void QScroller_ResendPrepareEvent(void* ptr){
	QMetaObject::invokeMethod(static_cast<QScroller*>(ptr), "resendPrepareEvent");
}

void QScroller_ScrollTo(void* ptr, void* pos){
	QMetaObject::invokeMethod(static_cast<QScroller*>(ptr), "scrollTo", Q_ARG(QPointF, *static_cast<QPointF*>(pos)));
}

void QScroller_ScrollTo2(void* ptr, void* pos, int scrollTime){
	QMetaObject::invokeMethod(static_cast<QScroller*>(ptr), "scrollTo", Q_ARG(QPointF, *static_cast<QPointF*>(pos)), Q_ARG(int, scrollTime));
}

void* QScroller_QScroller_Scroller(void* target){
	return QScroller::scroller(static_cast<QObject*>(target));
}

void* QScroller_QScroller_Scroller2(void* target){
	return const_cast<QScroller*>(QScroller::scroller(static_cast<QObject*>(target)));
}

void QScroller_ConnectScrollerPropertiesChanged(void* ptr){
	QObject::connect(static_cast<QScroller*>(ptr), static_cast<void (QScroller::*)(const QScrollerProperties &)>(&QScroller::scrollerPropertiesChanged), static_cast<MyQScroller*>(ptr), static_cast<void (MyQScroller::*)(const QScrollerProperties &)>(&MyQScroller::Signal_ScrollerPropertiesChanged));;
}

void QScroller_DisconnectScrollerPropertiesChanged(void* ptr){
	QObject::disconnect(static_cast<QScroller*>(ptr), static_cast<void (QScroller::*)(const QScrollerProperties &)>(&QScroller::scrollerPropertiesChanged), static_cast<MyQScroller*>(ptr), static_cast<void (MyQScroller::*)(const QScrollerProperties &)>(&MyQScroller::Signal_ScrollerPropertiesChanged));;
}

void QScroller_ScrollerPropertiesChanged(void* ptr, void* newProperties){
	static_cast<QScroller*>(ptr)->scrollerPropertiesChanged(*static_cast<QScrollerProperties*>(newProperties));
}

void QScroller_SetSnapPositionsX2(void* ptr, double first, double interval){
	static_cast<QScroller*>(ptr)->setSnapPositionsX(static_cast<double>(first), static_cast<double>(interval));
}

void QScroller_SetSnapPositionsY2(void* ptr, double first, double interval){
	static_cast<QScroller*>(ptr)->setSnapPositionsY(static_cast<double>(first), static_cast<double>(interval));
}

void QScroller_ConnectStateChanged(void* ptr){
	QObject::connect(static_cast<QScroller*>(ptr), static_cast<void (QScroller::*)(QScroller::State)>(&QScroller::stateChanged), static_cast<MyQScroller*>(ptr), static_cast<void (MyQScroller::*)(QScroller::State)>(&MyQScroller::Signal_StateChanged));;
}

void QScroller_DisconnectStateChanged(void* ptr){
	QObject::disconnect(static_cast<QScroller*>(ptr), static_cast<void (QScroller::*)(QScroller::State)>(&QScroller::stateChanged), static_cast<MyQScroller*>(ptr), static_cast<void (MyQScroller::*)(QScroller::State)>(&MyQScroller::Signal_StateChanged));;
}

void QScroller_StateChanged(void* ptr, int newState){
	static_cast<QScroller*>(ptr)->stateChanged(static_cast<QScroller::State>(newState));
}

void QScroller_Stop(void* ptr){
	static_cast<QScroller*>(ptr)->stop();
}

void* QScroller_Target(void* ptr){
	return static_cast<QScroller*>(ptr)->target();
}

void QScroller_QScroller_UngrabGesture(void* target){
	QScroller::ungrabGesture(static_cast<QObject*>(target));
}

void QScroller_TimerEvent(void* ptr, void* event){
	static_cast<MyQScroller*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QScroller_TimerEventDefault(void* ptr, void* event){
	static_cast<QScroller*>(ptr)->QScroller::timerEvent(static_cast<QTimerEvent*>(event));
}

void QScroller_ChildEvent(void* ptr, void* event){
	static_cast<MyQScroller*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QScroller_ChildEventDefault(void* ptr, void* event){
	static_cast<QScroller*>(ptr)->QScroller::childEvent(static_cast<QChildEvent*>(event));
}

void QScroller_CustomEvent(void* ptr, void* event){
	static_cast<MyQScroller*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QScroller_CustomEventDefault(void* ptr, void* event){
	static_cast<QScroller*>(ptr)->QScroller::customEvent(static_cast<QEvent*>(event));
}

class MyQScrollerProperties: public QScrollerProperties {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQScrollerProperties() : QScrollerProperties() {};
	MyQScrollerProperties(const QScrollerProperties &sp) : QScrollerProperties(sp) {};
};

void* QScrollerProperties_NewQScrollerProperties(){
	return new MyQScrollerProperties();
}

void* QScrollerProperties_NewQScrollerProperties2(void* sp){
	return new MyQScrollerProperties(*static_cast<QScrollerProperties*>(sp));
}

void* QScrollerProperties_ScrollMetric(void* ptr, int metric){
	return new QVariant(static_cast<QScrollerProperties*>(ptr)->scrollMetric(static_cast<QScrollerProperties::ScrollMetric>(metric)));
}

void QScrollerProperties_QScrollerProperties_SetDefaultScrollerProperties(void* sp){
	QScrollerProperties::setDefaultScrollerProperties(*static_cast<QScrollerProperties*>(sp));
}

void QScrollerProperties_SetScrollMetric(void* ptr, int metric, void* value){
	static_cast<QScrollerProperties*>(ptr)->setScrollMetric(static_cast<QScrollerProperties::ScrollMetric>(metric), *static_cast<QVariant*>(value));
}

void QScrollerProperties_QScrollerProperties_UnsetDefaultScrollerProperties(){
	QScrollerProperties::unsetDefaultScrollerProperties();
}

void QScrollerProperties_DestroyQScrollerProperties(void* ptr){
	static_cast<QScrollerProperties*>(ptr)->~QScrollerProperties();
}

char* QScrollerProperties_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQScrollerProperties*>(static_cast<QScrollerProperties*>(ptr))) {
		return static_cast<MyQScrollerProperties*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QScrollerProperties_BASE").toUtf8().data();
}

void QScrollerProperties_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQScrollerProperties*>(static_cast<QScrollerProperties*>(ptr))) {
		static_cast<MyQScrollerProperties*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQShortcut: public QShortcut {
public:
	void Signal_Activated() { callbackQShortcutActivated(this, this->objectName().toUtf8().data()); };
	void Signal_ActivatedAmbiguously() { callbackQShortcutActivatedAmbiguously(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQShortcutTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQShortcutChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQShortcutCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QShortcut_AutoRepeat(void* ptr){
	return static_cast<QShortcut*>(ptr)->autoRepeat();
}

int QShortcut_Context(void* ptr){
	return static_cast<QShortcut*>(ptr)->context();
}

int QShortcut_IsEnabled(void* ptr){
	return static_cast<QShortcut*>(ptr)->isEnabled();
}

void* QShortcut_Key(void* ptr){
	return new QKeySequence(static_cast<QShortcut*>(ptr)->key());
}

void QShortcut_SetAutoRepeat(void* ptr, int on){
	static_cast<QShortcut*>(ptr)->setAutoRepeat(on != 0);
}

void QShortcut_SetContext(void* ptr, int context){
	static_cast<QShortcut*>(ptr)->setContext(static_cast<Qt::ShortcutContext>(context));
}

void QShortcut_SetEnabled(void* ptr, int enable){
	static_cast<QShortcut*>(ptr)->setEnabled(enable != 0);
}

void QShortcut_SetKey(void* ptr, void* key){
	static_cast<QShortcut*>(ptr)->setKey(*static_cast<QKeySequence*>(key));
}

void QShortcut_SetWhatsThis(void* ptr, char* text){
	static_cast<QShortcut*>(ptr)->setWhatsThis(QString(text));
}

char* QShortcut_WhatsThis(void* ptr){
	return static_cast<QShortcut*>(ptr)->whatsThis().toUtf8().data();
}

void* QShortcut_NewQShortcut(void* parent){
	return new QShortcut(static_cast<QWidget*>(parent));
}

void* QShortcut_NewQShortcut2(void* key, void* parent, char* member, char* ambiguousMember, int context){
	return new QShortcut(*static_cast<QKeySequence*>(key), static_cast<QWidget*>(parent), const_cast<const char*>(member), const_cast<const char*>(ambiguousMember), static_cast<Qt::ShortcutContext>(context));
}

void QShortcut_ConnectActivated(void* ptr){
	QObject::connect(static_cast<QShortcut*>(ptr), static_cast<void (QShortcut::*)()>(&QShortcut::activated), static_cast<MyQShortcut*>(ptr), static_cast<void (MyQShortcut::*)()>(&MyQShortcut::Signal_Activated));;
}

void QShortcut_DisconnectActivated(void* ptr){
	QObject::disconnect(static_cast<QShortcut*>(ptr), static_cast<void (QShortcut::*)()>(&QShortcut::activated), static_cast<MyQShortcut*>(ptr), static_cast<void (MyQShortcut::*)()>(&MyQShortcut::Signal_Activated));;
}

void QShortcut_Activated(void* ptr){
	static_cast<QShortcut*>(ptr)->activated();
}

void QShortcut_ConnectActivatedAmbiguously(void* ptr){
	QObject::connect(static_cast<QShortcut*>(ptr), static_cast<void (QShortcut::*)()>(&QShortcut::activatedAmbiguously), static_cast<MyQShortcut*>(ptr), static_cast<void (MyQShortcut::*)()>(&MyQShortcut::Signal_ActivatedAmbiguously));;
}

void QShortcut_DisconnectActivatedAmbiguously(void* ptr){
	QObject::disconnect(static_cast<QShortcut*>(ptr), static_cast<void (QShortcut::*)()>(&QShortcut::activatedAmbiguously), static_cast<MyQShortcut*>(ptr), static_cast<void (MyQShortcut::*)()>(&MyQShortcut::Signal_ActivatedAmbiguously));;
}

void QShortcut_ActivatedAmbiguously(void* ptr){
	static_cast<QShortcut*>(ptr)->activatedAmbiguously();
}

int QShortcut_Id(void* ptr){
	return static_cast<QShortcut*>(ptr)->id();
}

void* QShortcut_ParentWidget(void* ptr){
	return static_cast<QShortcut*>(ptr)->parentWidget();
}

void QShortcut_DestroyQShortcut(void* ptr){
	static_cast<QShortcut*>(ptr)->~QShortcut();
}

void QShortcut_TimerEvent(void* ptr, void* event){
	static_cast<MyQShortcut*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QShortcut_TimerEventDefault(void* ptr, void* event){
	static_cast<QShortcut*>(ptr)->QShortcut::timerEvent(static_cast<QTimerEvent*>(event));
}

void QShortcut_ChildEvent(void* ptr, void* event){
	static_cast<MyQShortcut*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QShortcut_ChildEventDefault(void* ptr, void* event){
	static_cast<QShortcut*>(ptr)->QShortcut::childEvent(static_cast<QChildEvent*>(event));
}

void QShortcut_CustomEvent(void* ptr, void* event){
	static_cast<MyQShortcut*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QShortcut_CustomEventDefault(void* ptr, void* event){
	static_cast<QShortcut*>(ptr)->QShortcut::customEvent(static_cast<QEvent*>(event));
}

class MyQSizeGrip: public QSizeGrip {
public:
	MyQSizeGrip(QWidget *parent) : QSizeGrip(parent) {};
	void mouseMoveEvent(QMouseEvent * event) { callbackQSizeGripMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQSizeGripMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * hideEvent) { callbackQSizeGripHideEvent(this, this->objectName().toUtf8().data(), hideEvent); };
	void mouseReleaseEvent(QMouseEvent * mouseEvent) { callbackQSizeGripMouseReleaseEvent(this, this->objectName().toUtf8().data(), mouseEvent); };
	void moveEvent(QMoveEvent * moveEvent) { callbackQSizeGripMoveEvent(this, this->objectName().toUtf8().data(), moveEvent); };
	void paintEvent(QPaintEvent * event) { callbackQSizeGripPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQSizeGripSetVisible(this, this->objectName().toUtf8().data(), visible)) { QSizeGrip::setVisible(visible); }; };
	void showEvent(QShowEvent * showEvent) { callbackQSizeGripShowEvent(this, this->objectName().toUtf8().data(), showEvent); };
	void actionEvent(QActionEvent * event) { callbackQSizeGripActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQSizeGripDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQSizeGripDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQSizeGripDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQSizeGripDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQSizeGripEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQSizeGripFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQSizeGripFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQSizeGripLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQSizeGripChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQSizeGripCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQSizeGripContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQSizeGripInitPainter(const_cast<MyQSizeGrip*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQSizeGripInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQSizeGripKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQSizeGripKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQSizeGripMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQSizeGripResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQSizeGripTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQSizeGripWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQSizeGripTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQSizeGripChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQSizeGripCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QSizeGrip_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QSizeGrip_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QSizeGrip_MousePressEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QSizeGrip_MousePressEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void* QSizeGrip_NewQSizeGrip(void* parent){
	return new MyQSizeGrip(static_cast<QWidget*>(parent));
}

int QSizeGrip_Event(void* ptr, void* event){
	return static_cast<QSizeGrip*>(ptr)->event(static_cast<QEvent*>(event));
}

int QSizeGrip_EventFilter(void* ptr, void* o, void* e){
	return static_cast<QSizeGrip*>(ptr)->eventFilter(static_cast<QObject*>(o), static_cast<QEvent*>(e));
}

void QSizeGrip_HideEvent(void* ptr, void* hideEvent){
	static_cast<MyQSizeGrip*>(ptr)->hideEvent(static_cast<QHideEvent*>(hideEvent));
}

void QSizeGrip_HideEventDefault(void* ptr, void* hideEvent){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::hideEvent(static_cast<QHideEvent*>(hideEvent));
}

void QSizeGrip_MouseReleaseEvent(void* ptr, void* mouseEvent){
	static_cast<MyQSizeGrip*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QSizeGrip_MouseReleaseEventDefault(void* ptr, void* mouseEvent){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::mouseReleaseEvent(static_cast<QMouseEvent*>(mouseEvent));
}

void QSizeGrip_MoveEvent(void* ptr, void* moveEvent){
	static_cast<MyQSizeGrip*>(ptr)->moveEvent(static_cast<QMoveEvent*>(moveEvent));
}

void QSizeGrip_MoveEventDefault(void* ptr, void* moveEvent){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::moveEvent(static_cast<QMoveEvent*>(moveEvent));
}

void QSizeGrip_PaintEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QSizeGrip_PaintEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::paintEvent(static_cast<QPaintEvent*>(event));
}

void QSizeGrip_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQSizeGrip*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSizeGrip_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QSizeGrip*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSizeGrip_ShowEvent(void* ptr, void* showEvent){
	static_cast<MyQSizeGrip*>(ptr)->showEvent(static_cast<QShowEvent*>(showEvent));
}

void QSizeGrip_ShowEventDefault(void* ptr, void* showEvent){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::showEvent(static_cast<QShowEvent*>(showEvent));
}

void* QSizeGrip_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QSizeGrip*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QSizeGrip*>(ptr)->sizeHint()).height());
}

void QSizeGrip_DestroyQSizeGrip(void* ptr){
	static_cast<QSizeGrip*>(ptr)->~QSizeGrip();
}

void QSizeGrip_ActionEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QSizeGrip_ActionEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::actionEvent(static_cast<QActionEvent*>(event));
}

void QSizeGrip_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSizeGrip_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSizeGrip_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSizeGrip_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSizeGrip_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSizeGrip_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSizeGrip_DropEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QSizeGrip_DropEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::dropEvent(static_cast<QDropEvent*>(event));
}

void QSizeGrip_EnterEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QSizeGrip_EnterEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::enterEvent(static_cast<QEvent*>(event));
}

void QSizeGrip_FocusInEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSizeGrip_FocusInEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSizeGrip_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSizeGrip_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSizeGrip_LeaveEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QSizeGrip_LeaveEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::leaveEvent(static_cast<QEvent*>(event));
}

void QSizeGrip_ChangeEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QSizeGrip_ChangeEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::changeEvent(static_cast<QEvent*>(event));
}

void QSizeGrip_CloseEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QSizeGrip_CloseEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::closeEvent(static_cast<QCloseEvent*>(event));
}

void QSizeGrip_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSizeGrip_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSizeGrip_InitPainter(void* ptr, void* painter){
	static_cast<MyQSizeGrip*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QSizeGrip_InitPainterDefault(void* ptr, void* painter){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::initPainter(static_cast<QPainter*>(painter));
}

void QSizeGrip_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSizeGrip_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSizeGrip_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSizeGrip_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSizeGrip_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSizeGrip_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSizeGrip_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSizeGrip_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSizeGrip_ResizeEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSizeGrip_ResizeEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSizeGrip_TabletEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSizeGrip_TabletEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSizeGrip_WheelEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSizeGrip_WheelEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSizeGrip_TimerEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QSizeGrip_TimerEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::timerEvent(static_cast<QTimerEvent*>(event));
}

void QSizeGrip_ChildEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QSizeGrip_ChildEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::childEvent(static_cast<QChildEvent*>(event));
}

void QSizeGrip_CustomEvent(void* ptr, void* event){
	static_cast<MyQSizeGrip*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QSizeGrip_CustomEventDefault(void* ptr, void* event){
	static_cast<QSizeGrip*>(ptr)->QSizeGrip::customEvent(static_cast<QEvent*>(event));
}

void* QSizePolicy_NewQSizePolicy(){
	return new QSizePolicy();
}

void* QSizePolicy_NewQSizePolicy2(int horizontal, int vertical, int ty){
	return new QSizePolicy(static_cast<QSizePolicy::Policy>(horizontal), static_cast<QSizePolicy::Policy>(vertical), static_cast<QSizePolicy::ControlType>(ty));
}

int QSizePolicy_ControlType(void* ptr){
	return static_cast<QSizePolicy*>(ptr)->controlType();
}

int QSizePolicy_ExpandingDirections(void* ptr){
	return static_cast<QSizePolicy*>(ptr)->expandingDirections();
}

int QSizePolicy_HasHeightForWidth(void* ptr){
	return static_cast<QSizePolicy*>(ptr)->hasHeightForWidth();
}

int QSizePolicy_HasWidthForHeight(void* ptr){
	return static_cast<QSizePolicy*>(ptr)->hasWidthForHeight();
}

int QSizePolicy_HorizontalPolicy(void* ptr){
	return static_cast<QSizePolicy*>(ptr)->horizontalPolicy();
}

int QSizePolicy_HorizontalStretch(void* ptr){
	return static_cast<QSizePolicy*>(ptr)->horizontalStretch();
}

int QSizePolicy_RetainSizeWhenHidden(void* ptr){
	return static_cast<QSizePolicy*>(ptr)->retainSizeWhenHidden();
}

void QSizePolicy_SetControlType(void* ptr, int ty){
	static_cast<QSizePolicy*>(ptr)->setControlType(static_cast<QSizePolicy::ControlType>(ty));
}

void QSizePolicy_SetHeightForWidth(void* ptr, int dependent){
	static_cast<QSizePolicy*>(ptr)->setHeightForWidth(dependent != 0);
}

void QSizePolicy_SetHorizontalPolicy(void* ptr, int policy){
	static_cast<QSizePolicy*>(ptr)->setHorizontalPolicy(static_cast<QSizePolicy::Policy>(policy));
}

void QSizePolicy_SetHorizontalStretch(void* ptr, int stretchFactor){
	static_cast<QSizePolicy*>(ptr)->setHorizontalStretch(stretchFactor);
}

void QSizePolicy_SetRetainSizeWhenHidden(void* ptr, int retainSize){
	static_cast<QSizePolicy*>(ptr)->setRetainSizeWhenHidden(retainSize != 0);
}

void QSizePolicy_SetVerticalPolicy(void* ptr, int policy){
	static_cast<QSizePolicy*>(ptr)->setVerticalPolicy(static_cast<QSizePolicy::Policy>(policy));
}

void QSizePolicy_SetVerticalStretch(void* ptr, int stretchFactor){
	static_cast<QSizePolicy*>(ptr)->setVerticalStretch(stretchFactor);
}

void QSizePolicy_SetWidthForHeight(void* ptr, int dependent){
	static_cast<QSizePolicy*>(ptr)->setWidthForHeight(dependent != 0);
}

void QSizePolicy_Transpose(void* ptr){
	static_cast<QSizePolicy*>(ptr)->transpose();
}

int QSizePolicy_VerticalPolicy(void* ptr){
	return static_cast<QSizePolicy*>(ptr)->verticalPolicy();
}

int QSizePolicy_VerticalStretch(void* ptr){
	return static_cast<QSizePolicy*>(ptr)->verticalStretch();
}

class MyQSlider: public QSlider {
public:
	MyQSlider(QWidget *parent) : QSlider(parent) {};
	MyQSlider(Qt::Orientation orientation, QWidget *parent) : QSlider(orientation, parent) {};
	void mouseMoveEvent(QMouseEvent * ev) { callbackQSliderMouseMoveEvent(this, this->objectName().toUtf8().data(), ev); };
	void mousePressEvent(QMouseEvent * ev) { callbackQSliderMousePressEvent(this, this->objectName().toUtf8().data(), ev); };
	void mouseReleaseEvent(QMouseEvent * ev) { callbackQSliderMouseReleaseEvent(this, this->objectName().toUtf8().data(), ev); };
	void paintEvent(QPaintEvent * ev) { callbackQSliderPaintEvent(this, this->objectName().toUtf8().data(), ev); };
	void changeEvent(QEvent * ev) { callbackQSliderChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void keyPressEvent(QKeyEvent * ev) { callbackQSliderKeyPressEvent(this, this->objectName().toUtf8().data(), ev); };
	void sliderChange(QSlider::SliderChange change) { callbackQSliderSliderChange(this, this->objectName().toUtf8().data(), change); };
	void timerEvent(QTimerEvent * e) { callbackQSliderTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void wheelEvent(QWheelEvent * e) { callbackQSliderWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void actionEvent(QActionEvent * event) { callbackQSliderActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQSliderDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQSliderDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQSliderDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQSliderDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQSliderEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQSliderFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQSliderFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQSliderHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQSliderLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQSliderMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQSliderSetVisible(this, this->objectName().toUtf8().data(), visible)) { QSlider::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQSliderShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQSliderCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQSliderContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQSliderInitPainter(const_cast<MyQSlider*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQSliderInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQSliderKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQSliderMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQSliderResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQSliderTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQSliderChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQSliderCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QSlider_SetTickInterval(void* ptr, int ti){
	static_cast<QSlider*>(ptr)->setTickInterval(ti);
}

void QSlider_SetTickPosition(void* ptr, int position){
	static_cast<QSlider*>(ptr)->setTickPosition(static_cast<QSlider::TickPosition>(position));
}

int QSlider_TickInterval(void* ptr){
	return static_cast<QSlider*>(ptr)->tickInterval();
}

int QSlider_TickPosition(void* ptr){
	return static_cast<QSlider*>(ptr)->tickPosition();
}

void* QSlider_NewQSlider(void* parent){
	return new MyQSlider(static_cast<QWidget*>(parent));
}

void* QSlider_NewQSlider2(int orientation, void* parent){
	return new MyQSlider(static_cast<Qt::Orientation>(orientation), static_cast<QWidget*>(parent));
}

int QSlider_Event(void* ptr, void* event){
	return static_cast<QSlider*>(ptr)->event(static_cast<QEvent*>(event));
}

void* QSlider_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QSlider*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QSlider*>(ptr)->minimumSizeHint()).height());
}

void QSlider_MouseMoveEvent(void* ptr, void* ev){
	static_cast<MyQSlider*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(ev));
}

void QSlider_MouseMoveEventDefault(void* ptr, void* ev){
	static_cast<QSlider*>(ptr)->QSlider::mouseMoveEvent(static_cast<QMouseEvent*>(ev));
}

void QSlider_MousePressEvent(void* ptr, void* ev){
	static_cast<MyQSlider*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(ev));
}

void QSlider_MousePressEventDefault(void* ptr, void* ev){
	static_cast<QSlider*>(ptr)->QSlider::mousePressEvent(static_cast<QMouseEvent*>(ev));
}

void QSlider_MouseReleaseEvent(void* ptr, void* ev){
	static_cast<MyQSlider*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
}

void QSlider_MouseReleaseEventDefault(void* ptr, void* ev){
	static_cast<QSlider*>(ptr)->QSlider::mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
}

void QSlider_PaintEvent(void* ptr, void* ev){
	static_cast<MyQSlider*>(ptr)->paintEvent(static_cast<QPaintEvent*>(ev));
}

void QSlider_PaintEventDefault(void* ptr, void* ev){
	static_cast<QSlider*>(ptr)->QSlider::paintEvent(static_cast<QPaintEvent*>(ev));
}

void* QSlider_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QSlider*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QSlider*>(ptr)->sizeHint()).height());
}

void QSlider_DestroyQSlider(void* ptr){
	static_cast<QSlider*>(ptr)->~QSlider();
}

void QSlider_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQSlider*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QSlider_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QSlider*>(ptr)->QSlider::changeEvent(static_cast<QEvent*>(ev));
}

void QSlider_KeyPressEvent(void* ptr, void* ev){
	static_cast<MyQSlider*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QSlider_KeyPressEventDefault(void* ptr, void* ev){
	static_cast<QSlider*>(ptr)->QSlider::keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QSlider_SliderChange(void* ptr, int change){
	static_cast<MyQSlider*>(ptr)->sliderChange(static_cast<QSlider::SliderChange>(change));
}

void QSlider_SliderChangeDefault(void* ptr, int change){
	static_cast<QSlider*>(ptr)->QSlider::sliderChange(static_cast<QSlider::SliderChange>(change));
}

void QSlider_TimerEvent(void* ptr, void* e){
	static_cast<MyQSlider*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QSlider_TimerEventDefault(void* ptr, void* e){
	static_cast<QSlider*>(ptr)->QSlider::timerEvent(static_cast<QTimerEvent*>(e));
}

void QSlider_WheelEvent(void* ptr, void* e){
	static_cast<MyQSlider*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QSlider_WheelEventDefault(void* ptr, void* e){
	static_cast<QSlider*>(ptr)->QSlider::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QSlider_ActionEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QSlider_ActionEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::actionEvent(static_cast<QActionEvent*>(event));
}

void QSlider_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSlider_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSlider_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSlider_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSlider_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSlider_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSlider_DropEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QSlider_DropEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::dropEvent(static_cast<QDropEvent*>(event));
}

void QSlider_EnterEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QSlider_EnterEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::enterEvent(static_cast<QEvent*>(event));
}

void QSlider_FocusInEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSlider_FocusInEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSlider_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSlider_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSlider_HideEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QSlider_HideEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::hideEvent(static_cast<QHideEvent*>(event));
}

void QSlider_LeaveEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QSlider_LeaveEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::leaveEvent(static_cast<QEvent*>(event));
}

void QSlider_MoveEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QSlider_MoveEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::moveEvent(static_cast<QMoveEvent*>(event));
}

void QSlider_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQSlider*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSlider_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QSlider*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSlider_ShowEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QSlider_ShowEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::showEvent(static_cast<QShowEvent*>(event));
}

void QSlider_CloseEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QSlider_CloseEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::closeEvent(static_cast<QCloseEvent*>(event));
}

void QSlider_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSlider_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSlider_InitPainter(void* ptr, void* painter){
	static_cast<MyQSlider*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QSlider_InitPainterDefault(void* ptr, void* painter){
	static_cast<QSlider*>(ptr)->QSlider::initPainter(static_cast<QPainter*>(painter));
}

void QSlider_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSlider_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSlider_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSlider_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSlider_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSlider_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSlider_ResizeEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSlider_ResizeEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSlider_TabletEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSlider_TabletEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSlider_ChildEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QSlider_ChildEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::childEvent(static_cast<QChildEvent*>(event));
}

void QSlider_CustomEvent(void* ptr, void* event){
	static_cast<MyQSlider*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QSlider_CustomEventDefault(void* ptr, void* event){
	static_cast<QSlider*>(ptr)->QSlider::customEvent(static_cast<QEvent*>(event));
}

class MyQSpacerItem: public QSpacerItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQSpacerItem(int w, int h, QSizePolicy::Policy hPolicy, QSizePolicy::Policy vPolicy) : QSpacerItem(w, h, hPolicy, vPolicy) {};
	void setGeometry(const QRect & r) { callbackQSpacerItemSetGeometry(this, this->objectNameAbs().toUtf8().data(), new QRect(static_cast<QRect>(r).x(), static_cast<QRect>(r).y(), static_cast<QRect>(r).width(), static_cast<QRect>(r).height())); };
	void invalidate() { callbackQSpacerItemInvalidate(this, this->objectNameAbs().toUtf8().data()); };
};

void* QSpacerItem_NewQSpacerItem(int w, int h, int hPolicy, int vPolicy){
	return new MyQSpacerItem(w, h, static_cast<QSizePolicy::Policy>(hPolicy), static_cast<QSizePolicy::Policy>(vPolicy));
}

void QSpacerItem_ChangeSize(void* ptr, int w, int h, int hPolicy, int vPolicy){
	static_cast<QSpacerItem*>(ptr)->changeSize(w, h, static_cast<QSizePolicy::Policy>(hPolicy), static_cast<QSizePolicy::Policy>(vPolicy));
}

int QSpacerItem_ExpandingDirections(void* ptr){
	return static_cast<QSpacerItem*>(ptr)->expandingDirections();
}

void* QSpacerItem_Geometry(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QSpacerItem*>(ptr)->geometry()).x(), static_cast<QRect>(static_cast<QSpacerItem*>(ptr)->geometry()).y(), static_cast<QRect>(static_cast<QSpacerItem*>(ptr)->geometry()).width(), static_cast<QRect>(static_cast<QSpacerItem*>(ptr)->geometry()).height());
}

int QSpacerItem_IsEmpty(void* ptr){
	return static_cast<QSpacerItem*>(ptr)->isEmpty();
}

void* QSpacerItem_MaximumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QSpacerItem*>(ptr)->maximumSize()).width(), static_cast<QSize>(static_cast<QSpacerItem*>(ptr)->maximumSize()).height());
}

void* QSpacerItem_MinimumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QSpacerItem*>(ptr)->minimumSize()).width(), static_cast<QSize>(static_cast<QSpacerItem*>(ptr)->minimumSize()).height());
}

void QSpacerItem_SetGeometry(void* ptr, void* r){
	static_cast<MyQSpacerItem*>(ptr)->setGeometry(*static_cast<QRect*>(r));
}

void QSpacerItem_SetGeometryDefault(void* ptr, void* r){
	static_cast<QSpacerItem*>(ptr)->QSpacerItem::setGeometry(*static_cast<QRect*>(r));
}

void* QSpacerItem_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QSpacerItem*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QSpacerItem*>(ptr)->sizeHint()).height());
}

void* QSpacerItem_SpacerItem(void* ptr){
	return static_cast<QSpacerItem*>(ptr)->spacerItem();
}

void QSpacerItem_DestroyQSpacerItem(void* ptr){
	static_cast<QSpacerItem*>(ptr)->~QSpacerItem();
}

char* QSpacerItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQSpacerItem*>(static_cast<QSpacerItem*>(ptr))) {
		return static_cast<MyQSpacerItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QSpacerItem_BASE").toUtf8().data();
}

void QSpacerItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQSpacerItem*>(static_cast<QSpacerItem*>(ptr))) {
		static_cast<MyQSpacerItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

void QSpacerItem_Invalidate(void* ptr){
	static_cast<MyQSpacerItem*>(ptr)->invalidate();
}

void QSpacerItem_InvalidateDefault(void* ptr){
	static_cast<QSpacerItem*>(ptr)->QSpacerItem::invalidate();
}

class MyQSpinBox: public QSpinBox {
public:
	MyQSpinBox(QWidget *parent) : QSpinBox(parent) {};
	void Signal_ValueChanged2(const QString & text) { callbackQSpinBoxValueChanged2(this, this->objectName().toUtf8().data(), text.toUtf8().data()); };
	void Signal_ValueChanged(int i) { callbackQSpinBoxValueChanged(this, this->objectName().toUtf8().data(), i); };
	void changeEvent(QEvent * event) { callbackQSpinBoxChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void clear() { if (!callbackQSpinBoxClear(this, this->objectName().toUtf8().data())) { QSpinBox::clear(); }; };
	void closeEvent(QCloseEvent * event) { callbackQSpinBoxCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQSpinBoxContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQSpinBoxFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQSpinBoxFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQSpinBoxHideEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQSpinBoxKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQSpinBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQSpinBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQSpinBoxMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQSpinBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQSpinBoxPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQSpinBoxResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void showEvent(QShowEvent * event) { callbackQSpinBoxShowEvent(this, this->objectName().toUtf8().data(), event); };
	void stepBy(int steps) { callbackQSpinBoxStepBy(this, this->objectName().toUtf8().data(), steps); };
	void timerEvent(QTimerEvent * event) { callbackQSpinBoxTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQSpinBoxWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQSpinBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQSpinBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQSpinBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQSpinBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQSpinBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQSpinBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQSpinBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQSpinBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQSpinBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QSpinBox::setVisible(visible); }; };
	void initPainter(QPainter * painter) const { callbackQSpinBoxInitPainter(const_cast<MyQSpinBox*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQSpinBoxInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQSpinBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQSpinBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQSpinBoxChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQSpinBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

char* QSpinBox_CleanText(void* ptr){
	return static_cast<QSpinBox*>(ptr)->cleanText().toUtf8().data();
}

int QSpinBox_DisplayIntegerBase(void* ptr){
	return static_cast<QSpinBox*>(ptr)->displayIntegerBase();
}

int QSpinBox_Maximum(void* ptr){
	return static_cast<QSpinBox*>(ptr)->maximum();
}

int QSpinBox_Minimum(void* ptr){
	return static_cast<QSpinBox*>(ptr)->minimum();
}

char* QSpinBox_Prefix(void* ptr){
	return static_cast<QSpinBox*>(ptr)->prefix().toUtf8().data();
}

void QSpinBox_SetDisplayIntegerBase(void* ptr, int base){
	static_cast<QSpinBox*>(ptr)->setDisplayIntegerBase(base);
}

void QSpinBox_SetMaximum(void* ptr, int max){
	static_cast<QSpinBox*>(ptr)->setMaximum(max);
}

void QSpinBox_SetMinimum(void* ptr, int min){
	static_cast<QSpinBox*>(ptr)->setMinimum(min);
}

void QSpinBox_SetPrefix(void* ptr, char* prefix){
	static_cast<QSpinBox*>(ptr)->setPrefix(QString(prefix));
}

void QSpinBox_SetSingleStep(void* ptr, int val){
	static_cast<QSpinBox*>(ptr)->setSingleStep(val);
}

void QSpinBox_SetSuffix(void* ptr, char* suffix){
	static_cast<QSpinBox*>(ptr)->setSuffix(QString(suffix));
}

void QSpinBox_SetValue(void* ptr, int val){
	QMetaObject::invokeMethod(static_cast<QSpinBox*>(ptr), "setValue", Q_ARG(int, val));
}

int QSpinBox_SingleStep(void* ptr){
	return static_cast<QSpinBox*>(ptr)->singleStep();
}

char* QSpinBox_Suffix(void* ptr){
	return static_cast<QSpinBox*>(ptr)->suffix().toUtf8().data();
}

int QSpinBox_Value(void* ptr){
	return static_cast<QSpinBox*>(ptr)->value();
}

int QSpinBox_ValueFromText(void* ptr, char* text){
	return static_cast<QSpinBox*>(ptr)->valueFromText(QString(text));
}

void* QSpinBox_NewQSpinBox(void* parent){
	return new MyQSpinBox(static_cast<QWidget*>(parent));
}

int QSpinBox_Event(void* ptr, void* event){
	return static_cast<QSpinBox*>(ptr)->event(static_cast<QEvent*>(event));
}

void QSpinBox_SetRange(void* ptr, int minimum, int maximum){
	static_cast<QSpinBox*>(ptr)->setRange(minimum, maximum);
}

char* QSpinBox_TextFromValue(void* ptr, int value){
	return static_cast<QSpinBox*>(ptr)->textFromValue(value).toUtf8().data();
}

void QSpinBox_ConnectValueChanged2(void* ptr){
	QObject::connect(static_cast<QSpinBox*>(ptr), static_cast<void (QSpinBox::*)(const QString &)>(&QSpinBox::valueChanged), static_cast<MyQSpinBox*>(ptr), static_cast<void (MyQSpinBox::*)(const QString &)>(&MyQSpinBox::Signal_ValueChanged2));;
}

void QSpinBox_DisconnectValueChanged2(void* ptr){
	QObject::disconnect(static_cast<QSpinBox*>(ptr), static_cast<void (QSpinBox::*)(const QString &)>(&QSpinBox::valueChanged), static_cast<MyQSpinBox*>(ptr), static_cast<void (MyQSpinBox::*)(const QString &)>(&MyQSpinBox::Signal_ValueChanged2));;
}

void QSpinBox_ValueChanged2(void* ptr, char* text){
	static_cast<QSpinBox*>(ptr)->valueChanged(QString(text));
}

void QSpinBox_ConnectValueChanged(void* ptr){
	QObject::connect(static_cast<QSpinBox*>(ptr), static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), static_cast<MyQSpinBox*>(ptr), static_cast<void (MyQSpinBox::*)(int)>(&MyQSpinBox::Signal_ValueChanged));;
}

void QSpinBox_DisconnectValueChanged(void* ptr){
	QObject::disconnect(static_cast<QSpinBox*>(ptr), static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), static_cast<MyQSpinBox*>(ptr), static_cast<void (MyQSpinBox::*)(int)>(&MyQSpinBox::Signal_ValueChanged));;
}

void QSpinBox_ValueChanged(void* ptr, int i){
	static_cast<QSpinBox*>(ptr)->valueChanged(i);
}

void QSpinBox_DestroyQSpinBox(void* ptr){
	static_cast<QSpinBox*>(ptr)->~QSpinBox();
}

void QSpinBox_ChangeEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QSpinBox_ChangeEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::changeEvent(static_cast<QEvent*>(event));
}

void QSpinBox_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQSpinBox*>(ptr), "clear");
}

void QSpinBox_ClearDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QSpinBox*>(ptr), "clear");
}

void QSpinBox_CloseEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QSpinBox_CloseEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::closeEvent(static_cast<QCloseEvent*>(event));
}

void QSpinBox_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSpinBox_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSpinBox_FocusInEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSpinBox_FocusInEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSpinBox_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSpinBox_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSpinBox_HideEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QSpinBox_HideEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::hideEvent(static_cast<QHideEvent*>(event));
}

void QSpinBox_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSpinBox_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSpinBox_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSpinBox_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSpinBox_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QSpinBox_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QSpinBox_MousePressEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QSpinBox_MousePressEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QSpinBox_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QSpinBox_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QSpinBox_PaintEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QSpinBox_PaintEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::paintEvent(static_cast<QPaintEvent*>(event));
}

void QSpinBox_ResizeEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSpinBox_ResizeEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSpinBox_ShowEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QSpinBox_ShowEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::showEvent(static_cast<QShowEvent*>(event));
}

void QSpinBox_StepBy(void* ptr, int steps){
	static_cast<MyQSpinBox*>(ptr)->stepBy(steps);
}

void QSpinBox_StepByDefault(void* ptr, int steps){
	static_cast<QSpinBox*>(ptr)->QSpinBox::stepBy(steps);
}

void QSpinBox_TimerEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QSpinBox_TimerEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::timerEvent(static_cast<QTimerEvent*>(event));
}

void QSpinBox_WheelEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSpinBox_WheelEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSpinBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QSpinBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QSpinBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSpinBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSpinBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSpinBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSpinBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSpinBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSpinBox_DropEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QSpinBox_DropEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QSpinBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QSpinBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::enterEvent(static_cast<QEvent*>(event));
}

void QSpinBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QSpinBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::leaveEvent(static_cast<QEvent*>(event));
}

void QSpinBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QSpinBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QSpinBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQSpinBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSpinBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QSpinBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSpinBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQSpinBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QSpinBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QSpinBox*>(ptr)->QSpinBox::initPainter(static_cast<QPainter*>(painter));
}

void QSpinBox_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSpinBox_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSpinBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSpinBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSpinBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSpinBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSpinBox_ChildEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QSpinBox_ChildEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::childEvent(static_cast<QChildEvent*>(event));
}

void QSpinBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQSpinBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QSpinBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QSpinBox*>(ptr)->QSpinBox::customEvent(static_cast<QEvent*>(event));
}

class MyQSplashScreen: public QSplashScreen {
public:
	MyQSplashScreen(QWidget *parent, const QPixmap &pixmap, Qt::WindowFlags f) : QSplashScreen(parent, pixmap, f) {};
	MyQSplashScreen(const QPixmap &pixmap, Qt::WindowFlags f) : QSplashScreen(pixmap, f) {};
	void drawContents(QPainter * painter) { callbackQSplashScreenDrawContents(this, this->objectName().toUtf8().data(), painter); };
	void Signal_MessageChanged(const QString & message) { callbackQSplashScreenMessageChanged(this, this->objectName().toUtf8().data(), message.toUtf8().data()); };
	void mousePressEvent(QMouseEvent * v) { callbackQSplashScreenMousePressEvent(this, this->objectName().toUtf8().data(), v); };
	void actionEvent(QActionEvent * event) { callbackQSplashScreenActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQSplashScreenDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQSplashScreenDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQSplashScreenDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQSplashScreenDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQSplashScreenEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQSplashScreenFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQSplashScreenFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQSplashScreenHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQSplashScreenLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQSplashScreenMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQSplashScreenPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQSplashScreenSetVisible(this, this->objectName().toUtf8().data(), visible)) { QSplashScreen::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQSplashScreenShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQSplashScreenChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQSplashScreenCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQSplashScreenContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQSplashScreenInitPainter(const_cast<MyQSplashScreen*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQSplashScreenInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQSplashScreenKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQSplashScreenKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQSplashScreenMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQSplashScreenMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQSplashScreenMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQSplashScreenResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQSplashScreenTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQSplashScreenWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQSplashScreenTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQSplashScreenChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQSplashScreenCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QSplashScreen_NewQSplashScreen2(void* parent, void* pixmap, int f){
	return new MyQSplashScreen(static_cast<QWidget*>(parent), *static_cast<QPixmap*>(pixmap), static_cast<Qt::WindowType>(f));
}

void* QSplashScreen_NewQSplashScreen(void* pixmap, int f){
	return new MyQSplashScreen(*static_cast<QPixmap*>(pixmap), static_cast<Qt::WindowType>(f));
}

void QSplashScreen_ClearMessage(void* ptr){
	QMetaObject::invokeMethod(static_cast<QSplashScreen*>(ptr), "clearMessage");
}

void QSplashScreen_DrawContents(void* ptr, void* painter){
	static_cast<MyQSplashScreen*>(ptr)->drawContents(static_cast<QPainter*>(painter));
}

void QSplashScreen_DrawContentsDefault(void* ptr, void* painter){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::drawContents(static_cast<QPainter*>(painter));
}

int QSplashScreen_Event(void* ptr, void* e){
	return static_cast<QSplashScreen*>(ptr)->event(static_cast<QEvent*>(e));
}

void QSplashScreen_Finish(void* ptr, void* mainWin){
	static_cast<QSplashScreen*>(ptr)->finish(static_cast<QWidget*>(mainWin));
}

char* QSplashScreen_Message(void* ptr){
	return static_cast<QSplashScreen*>(ptr)->message().toUtf8().data();
}

void QSplashScreen_ConnectMessageChanged(void* ptr){
	QObject::connect(static_cast<QSplashScreen*>(ptr), static_cast<void (QSplashScreen::*)(const QString &)>(&QSplashScreen::messageChanged), static_cast<MyQSplashScreen*>(ptr), static_cast<void (MyQSplashScreen::*)(const QString &)>(&MyQSplashScreen::Signal_MessageChanged));;
}

void QSplashScreen_DisconnectMessageChanged(void* ptr){
	QObject::disconnect(static_cast<QSplashScreen*>(ptr), static_cast<void (QSplashScreen::*)(const QString &)>(&QSplashScreen::messageChanged), static_cast<MyQSplashScreen*>(ptr), static_cast<void (MyQSplashScreen::*)(const QString &)>(&MyQSplashScreen::Signal_MessageChanged));;
}

void QSplashScreen_MessageChanged(void* ptr, char* message){
	static_cast<QSplashScreen*>(ptr)->messageChanged(QString(message));
}

void QSplashScreen_MousePressEvent(void* ptr, void* v){
	static_cast<MyQSplashScreen*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(v));
}

void QSplashScreen_MousePressEventDefault(void* ptr, void* v){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::mousePressEvent(static_cast<QMouseEvent*>(v));
}

void* QSplashScreen_Pixmap(void* ptr){
	return new QPixmap(static_cast<QSplashScreen*>(ptr)->pixmap());
}

void QSplashScreen_Repaint(void* ptr){
	static_cast<QSplashScreen*>(ptr)->repaint();
}

void QSplashScreen_SetPixmap(void* ptr, void* pixmap){
	static_cast<QSplashScreen*>(ptr)->setPixmap(*static_cast<QPixmap*>(pixmap));
}

void QSplashScreen_ShowMessage(void* ptr, char* message, int alignment, void* color){
	QMetaObject::invokeMethod(static_cast<QSplashScreen*>(ptr), "showMessage", Q_ARG(QString, QString(message)), Q_ARG(int, alignment), Q_ARG(QColor, *static_cast<QColor*>(color)));
}

void QSplashScreen_DestroyQSplashScreen(void* ptr){
	static_cast<QSplashScreen*>(ptr)->~QSplashScreen();
}

void QSplashScreen_ActionEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QSplashScreen_ActionEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::actionEvent(static_cast<QActionEvent*>(event));
}

void QSplashScreen_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSplashScreen_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSplashScreen_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSplashScreen_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSplashScreen_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSplashScreen_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSplashScreen_DropEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QSplashScreen_DropEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::dropEvent(static_cast<QDropEvent*>(event));
}

void QSplashScreen_EnterEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QSplashScreen_EnterEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::enterEvent(static_cast<QEvent*>(event));
}

void QSplashScreen_FocusInEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSplashScreen_FocusInEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSplashScreen_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSplashScreen_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSplashScreen_HideEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QSplashScreen_HideEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::hideEvent(static_cast<QHideEvent*>(event));
}

void QSplashScreen_LeaveEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QSplashScreen_LeaveEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::leaveEvent(static_cast<QEvent*>(event));
}

void QSplashScreen_MoveEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QSplashScreen_MoveEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::moveEvent(static_cast<QMoveEvent*>(event));
}

void QSplashScreen_PaintEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QSplashScreen_PaintEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::paintEvent(static_cast<QPaintEvent*>(event));
}

void QSplashScreen_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQSplashScreen*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSplashScreen_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QSplashScreen*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSplashScreen_ShowEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QSplashScreen_ShowEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::showEvent(static_cast<QShowEvent*>(event));
}

void QSplashScreen_ChangeEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QSplashScreen_ChangeEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::changeEvent(static_cast<QEvent*>(event));
}

void QSplashScreen_CloseEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QSplashScreen_CloseEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::closeEvent(static_cast<QCloseEvent*>(event));
}

void QSplashScreen_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSplashScreen_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSplashScreen_InitPainter(void* ptr, void* painter){
	static_cast<MyQSplashScreen*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QSplashScreen_InitPainterDefault(void* ptr, void* painter){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::initPainter(static_cast<QPainter*>(painter));
}

void QSplashScreen_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSplashScreen_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSplashScreen_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSplashScreen_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSplashScreen_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSplashScreen_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSplashScreen_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSplashScreen_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSplashScreen_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QSplashScreen_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QSplashScreen_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QSplashScreen_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QSplashScreen_ResizeEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSplashScreen_ResizeEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSplashScreen_TabletEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSplashScreen_TabletEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSplashScreen_WheelEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSplashScreen_WheelEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSplashScreen_TimerEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QSplashScreen_TimerEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::timerEvent(static_cast<QTimerEvent*>(event));
}

void QSplashScreen_ChildEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QSplashScreen_ChildEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::childEvent(static_cast<QChildEvent*>(event));
}

void QSplashScreen_CustomEvent(void* ptr, void* event){
	static_cast<MyQSplashScreen*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QSplashScreen_CustomEventDefault(void* ptr, void* event){
	static_cast<QSplashScreen*>(ptr)->QSplashScreen::customEvent(static_cast<QEvent*>(event));
}

class MyQSplitter: public QSplitter {
public:
	MyQSplitter(QWidget *parent) : QSplitter(parent) {};
	MyQSplitter(Qt::Orientation orientation, QWidget *parent) : QSplitter(orientation, parent) {};
	void changeEvent(QEvent * ev) { callbackQSplitterChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void childEvent(QChildEvent * c) { callbackQSplitterChildEvent(this, this->objectName().toUtf8().data(), c); };
	void resizeEvent(QResizeEvent * v) { callbackQSplitterResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_SplitterMoved(int pos, int index) { callbackQSplitterSplitterMoved(this, this->objectName().toUtf8().data(), pos, index); };
	void paintEvent(QPaintEvent * v) { callbackQSplitterPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void actionEvent(QActionEvent * event) { callbackQSplitterActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQSplitterDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQSplitterDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQSplitterDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQSplitterDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQSplitterEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQSplitterFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQSplitterFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQSplitterHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQSplitterLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQSplitterMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQSplitterSetVisible(this, this->objectName().toUtf8().data(), visible)) { QSplitter::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQSplitterShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQSplitterCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQSplitterContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQSplitterInitPainter(const_cast<MyQSplitter*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQSplitterInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQSplitterKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQSplitterKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQSplitterMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQSplitterMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQSplitterMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQSplitterMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQSplitterTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQSplitterWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQSplitterTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQSplitterCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QSplitter_ChildrenCollapsible(void* ptr){
	return static_cast<QSplitter*>(ptr)->childrenCollapsible();
}

int QSplitter_HandleWidth(void* ptr){
	return static_cast<QSplitter*>(ptr)->handleWidth();
}

int QSplitter_IndexOf(void* ptr, void* widget){
	return static_cast<QSplitter*>(ptr)->indexOf(static_cast<QWidget*>(widget));
}

int QSplitter_OpaqueResize(void* ptr){
	return static_cast<QSplitter*>(ptr)->opaqueResize();
}

int QSplitter_Orientation(void* ptr){
	return static_cast<QSplitter*>(ptr)->orientation();
}

void QSplitter_SetChildrenCollapsible(void* ptr, int v){
	static_cast<QSplitter*>(ptr)->setChildrenCollapsible(v != 0);
}

void QSplitter_SetHandleWidth(void* ptr, int v){
	static_cast<QSplitter*>(ptr)->setHandleWidth(v);
}

void QSplitter_SetOpaqueResize(void* ptr, int opaque){
	static_cast<QSplitter*>(ptr)->setOpaqueResize(opaque != 0);
}

void QSplitter_SetOrientation(void* ptr, int v){
	static_cast<QSplitter*>(ptr)->setOrientation(static_cast<Qt::Orientation>(v));
}

void* QSplitter_NewQSplitter(void* parent){
	return new MyQSplitter(static_cast<QWidget*>(parent));
}

void* QSplitter_NewQSplitter2(int orientation, void* parent){
	return new MyQSplitter(static_cast<Qt::Orientation>(orientation), static_cast<QWidget*>(parent));
}

void QSplitter_AddWidget(void* ptr, void* widget){
	static_cast<QSplitter*>(ptr)->addWidget(static_cast<QWidget*>(widget));
}

void QSplitter_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQSplitter*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QSplitter_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QSplitter*>(ptr)->QSplitter::changeEvent(static_cast<QEvent*>(ev));
}

void QSplitter_ChildEvent(void* ptr, void* c){
	static_cast<MyQSplitter*>(ptr)->childEvent(static_cast<QChildEvent*>(c));
}

void QSplitter_ChildEventDefault(void* ptr, void* c){
	static_cast<QSplitter*>(ptr)->QSplitter::childEvent(static_cast<QChildEvent*>(c));
}

int QSplitter_Count(void* ptr){
	return static_cast<QSplitter*>(ptr)->count();
}

void* QSplitter_CreateHandle(void* ptr){
	return static_cast<QSplitter*>(ptr)->createHandle();
}

int QSplitter_Event(void* ptr, void* e){
	return static_cast<QSplitter*>(ptr)->event(static_cast<QEvent*>(e));
}

void QSplitter_GetRange(void* ptr, int index, int min, int max){
	static_cast<QSplitter*>(ptr)->getRange(index, &min, &max);
}

void* QSplitter_Handle(void* ptr, int index){
	return static_cast<QSplitter*>(ptr)->handle(index);
}

void QSplitter_InsertWidget(void* ptr, int index, void* widget){
	static_cast<QSplitter*>(ptr)->insertWidget(index, static_cast<QWidget*>(widget));
}

int QSplitter_IsCollapsible(void* ptr, int index){
	return static_cast<QSplitter*>(ptr)->isCollapsible(index);
}

void* QSplitter_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QSplitter*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QSplitter*>(ptr)->minimumSizeHint()).height());
}

void QSplitter_Refresh(void* ptr){
	static_cast<QSplitter*>(ptr)->refresh();
}

void QSplitter_ResizeEvent(void* ptr, void* v){
	static_cast<MyQSplitter*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QSplitter_ResizeEventDefault(void* ptr, void* v){
	static_cast<QSplitter*>(ptr)->QSplitter::resizeEvent(static_cast<QResizeEvent*>(v));
}

int QSplitter_RestoreState(void* ptr, char* state){
	return static_cast<QSplitter*>(ptr)->restoreState(QByteArray(state));
}

char* QSplitter_SaveState(void* ptr){
	return QString(static_cast<QSplitter*>(ptr)->saveState()).toUtf8().data();
}

void QSplitter_SetCollapsible(void* ptr, int index, int collapse){
	static_cast<QSplitter*>(ptr)->setCollapsible(index, collapse != 0);
}

void QSplitter_SetStretchFactor(void* ptr, int index, int stretch){
	static_cast<QSplitter*>(ptr)->setStretchFactor(index, stretch);
}

void* QSplitter_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QSplitter*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QSplitter*>(ptr)->sizeHint()).height());
}

void QSplitter_ConnectSplitterMoved(void* ptr){
	QObject::connect(static_cast<QSplitter*>(ptr), static_cast<void (QSplitter::*)(int, int)>(&QSplitter::splitterMoved), static_cast<MyQSplitter*>(ptr), static_cast<void (MyQSplitter::*)(int, int)>(&MyQSplitter::Signal_SplitterMoved));;
}

void QSplitter_DisconnectSplitterMoved(void* ptr){
	QObject::disconnect(static_cast<QSplitter*>(ptr), static_cast<void (QSplitter::*)(int, int)>(&QSplitter::splitterMoved), static_cast<MyQSplitter*>(ptr), static_cast<void (MyQSplitter::*)(int, int)>(&MyQSplitter::Signal_SplitterMoved));;
}

void QSplitter_SplitterMoved(void* ptr, int pos, int index){
	static_cast<QSplitter*>(ptr)->splitterMoved(pos, index);
}

void* QSplitter_Widget(void* ptr, int index){
	return static_cast<QSplitter*>(ptr)->widget(index);
}

void QSplitter_DestroyQSplitter(void* ptr){
	static_cast<QSplitter*>(ptr)->~QSplitter();
}

void QSplitter_PaintEvent(void* ptr, void* v){
	static_cast<MyQSplitter*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QSplitter_PaintEventDefault(void* ptr, void* v){
	static_cast<QSplitter*>(ptr)->QSplitter::paintEvent(static_cast<QPaintEvent*>(v));
}

void QSplitter_ActionEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QSplitter_ActionEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::actionEvent(static_cast<QActionEvent*>(event));
}

void QSplitter_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSplitter_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSplitter_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSplitter_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSplitter_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSplitter_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSplitter_DropEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QSplitter_DropEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::dropEvent(static_cast<QDropEvent*>(event));
}

void QSplitter_EnterEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QSplitter_EnterEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::enterEvent(static_cast<QEvent*>(event));
}

void QSplitter_FocusInEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSplitter_FocusInEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSplitter_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSplitter_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSplitter_HideEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QSplitter_HideEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::hideEvent(static_cast<QHideEvent*>(event));
}

void QSplitter_LeaveEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QSplitter_LeaveEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::leaveEvent(static_cast<QEvent*>(event));
}

void QSplitter_MoveEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QSplitter_MoveEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::moveEvent(static_cast<QMoveEvent*>(event));
}

void QSplitter_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQSplitter*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSplitter_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QSplitter*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSplitter_ShowEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QSplitter_ShowEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::showEvent(static_cast<QShowEvent*>(event));
}

void QSplitter_CloseEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QSplitter_CloseEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::closeEvent(static_cast<QCloseEvent*>(event));
}

void QSplitter_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSplitter_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSplitter_InitPainter(void* ptr, void* painter){
	static_cast<MyQSplitter*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QSplitter_InitPainterDefault(void* ptr, void* painter){
	static_cast<QSplitter*>(ptr)->QSplitter::initPainter(static_cast<QPainter*>(painter));
}

void QSplitter_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSplitter_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSplitter_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSplitter_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSplitter_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSplitter_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSplitter_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSplitter_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSplitter_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QSplitter_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QSplitter_MousePressEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QSplitter_MousePressEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QSplitter_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QSplitter_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QSplitter_TabletEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSplitter_TabletEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSplitter_WheelEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSplitter_WheelEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSplitter_TimerEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QSplitter_TimerEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::timerEvent(static_cast<QTimerEvent*>(event));
}

void QSplitter_CustomEvent(void* ptr, void* event){
	static_cast<MyQSplitter*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QSplitter_CustomEventDefault(void* ptr, void* event){
	static_cast<QSplitter*>(ptr)->QSplitter::customEvent(static_cast<QEvent*>(event));
}

class MyQSplitterHandle: public QSplitterHandle {
public:
	MyQSplitterHandle(Qt::Orientation orientation, QSplitter *parent) : QSplitterHandle(orientation, parent) {};
	void mouseMoveEvent(QMouseEvent * e) { callbackQSplitterHandleMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQSplitterHandleMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQSplitterHandleMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * v) { callbackQSplitterHandlePaintEvent(this, this->objectName().toUtf8().data(), v); };
	void resizeEvent(QResizeEvent * event) { callbackQSplitterHandleResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQSplitterHandleActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQSplitterHandleDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQSplitterHandleDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQSplitterHandleDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQSplitterHandleDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQSplitterHandleEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQSplitterHandleFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQSplitterHandleFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQSplitterHandleHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQSplitterHandleLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQSplitterHandleMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQSplitterHandleSetVisible(this, this->objectName().toUtf8().data(), visible)) { QSplitterHandle::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQSplitterHandleShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQSplitterHandleChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQSplitterHandleCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQSplitterHandleContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQSplitterHandleInitPainter(const_cast<MyQSplitterHandle*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQSplitterHandleInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQSplitterHandleKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQSplitterHandleKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQSplitterHandleMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQSplitterHandleTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQSplitterHandleWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQSplitterHandleTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQSplitterHandleChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQSplitterHandleCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QSplitterHandle_NewQSplitterHandle(int orientation, void* parent){
	return new MyQSplitterHandle(static_cast<Qt::Orientation>(orientation), static_cast<QSplitter*>(parent));
}

int QSplitterHandle_Event(void* ptr, void* event){
	return static_cast<QSplitterHandle*>(ptr)->event(static_cast<QEvent*>(event));
}

void QSplitterHandle_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQSplitterHandle*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QSplitterHandle_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QSplitterHandle_MousePressEvent(void* ptr, void* e){
	static_cast<MyQSplitterHandle*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QSplitterHandle_MousePressEventDefault(void* ptr, void* e){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QSplitterHandle_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQSplitterHandle*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QSplitterHandle_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

int QSplitterHandle_OpaqueResize(void* ptr){
	return static_cast<QSplitterHandle*>(ptr)->opaqueResize();
}

int QSplitterHandle_Orientation(void* ptr){
	return static_cast<QSplitterHandle*>(ptr)->orientation();
}

void QSplitterHandle_PaintEvent(void* ptr, void* v){
	static_cast<MyQSplitterHandle*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QSplitterHandle_PaintEventDefault(void* ptr, void* v){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::paintEvent(static_cast<QPaintEvent*>(v));
}

void QSplitterHandle_ResizeEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSplitterHandle_ResizeEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QSplitterHandle_SetOrientation(void* ptr, int orientation){
	static_cast<QSplitterHandle*>(ptr)->setOrientation(static_cast<Qt::Orientation>(orientation));
}

void* QSplitterHandle_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QSplitterHandle*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QSplitterHandle*>(ptr)->sizeHint()).height());
}

void* QSplitterHandle_Splitter(void* ptr){
	return static_cast<QSplitterHandle*>(ptr)->splitter();
}

void QSplitterHandle_DestroyQSplitterHandle(void* ptr){
	static_cast<QSplitterHandle*>(ptr)->~QSplitterHandle();
}

void QSplitterHandle_ActionEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QSplitterHandle_ActionEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::actionEvent(static_cast<QActionEvent*>(event));
}

void QSplitterHandle_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSplitterHandle_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QSplitterHandle_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSplitterHandle_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QSplitterHandle_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSplitterHandle_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QSplitterHandle_DropEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QSplitterHandle_DropEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::dropEvent(static_cast<QDropEvent*>(event));
}

void QSplitterHandle_EnterEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QSplitterHandle_EnterEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::enterEvent(static_cast<QEvent*>(event));
}

void QSplitterHandle_FocusInEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSplitterHandle_FocusInEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QSplitterHandle_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSplitterHandle_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QSplitterHandle_HideEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QSplitterHandle_HideEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::hideEvent(static_cast<QHideEvent*>(event));
}

void QSplitterHandle_LeaveEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QSplitterHandle_LeaveEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::leaveEvent(static_cast<QEvent*>(event));
}

void QSplitterHandle_MoveEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QSplitterHandle_MoveEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::moveEvent(static_cast<QMoveEvent*>(event));
}

void QSplitterHandle_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQSplitterHandle*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSplitterHandle_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QSplitterHandle*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSplitterHandle_ShowEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QSplitterHandle_ShowEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::showEvent(static_cast<QShowEvent*>(event));
}

void QSplitterHandle_ChangeEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QSplitterHandle_ChangeEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::changeEvent(static_cast<QEvent*>(event));
}

void QSplitterHandle_CloseEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QSplitterHandle_CloseEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::closeEvent(static_cast<QCloseEvent*>(event));
}

void QSplitterHandle_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSplitterHandle_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QSplitterHandle_InitPainter(void* ptr, void* painter){
	static_cast<MyQSplitterHandle*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QSplitterHandle_InitPainterDefault(void* ptr, void* painter){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::initPainter(static_cast<QPainter*>(painter));
}

void QSplitterHandle_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSplitterHandle_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QSplitterHandle_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSplitterHandle_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QSplitterHandle_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSplitterHandle_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QSplitterHandle_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSplitterHandle_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QSplitterHandle_TabletEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSplitterHandle_TabletEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QSplitterHandle_WheelEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSplitterHandle_WheelEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QSplitterHandle_TimerEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QSplitterHandle_TimerEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::timerEvent(static_cast<QTimerEvent*>(event));
}

void QSplitterHandle_ChildEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QSplitterHandle_ChildEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::childEvent(static_cast<QChildEvent*>(event));
}

void QSplitterHandle_CustomEvent(void* ptr, void* event){
	static_cast<MyQSplitterHandle*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QSplitterHandle_CustomEventDefault(void* ptr, void* event){
	static_cast<QSplitterHandle*>(ptr)->QSplitterHandle::customEvent(static_cast<QEvent*>(event));
}

class MyQStackedLayout: public QStackedLayout {
public:
	MyQStackedLayout() : QStackedLayout() {};
	MyQStackedLayout(QLayout *parentLayout) : QStackedLayout(parentLayout) {};
	MyQStackedLayout(QWidget *parent) : QStackedLayout(parent) {};
	void addItem(QLayoutItem * item) { callbackQStackedLayoutAddItem(this, this->objectName().toUtf8().data(), item); };
	void Signal_CurrentChanged(int index) { callbackQStackedLayoutCurrentChanged(this, this->objectName().toUtf8().data(), index); };
	void setGeometry(const QRect & rect) { callbackQStackedLayoutSetGeometry(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height())); };
	void Signal_WidgetRemoved(int index) { callbackQStackedLayoutWidgetRemoved(this, this->objectName().toUtf8().data(), index); };
	void childEvent(QChildEvent * e) { callbackQStackedLayoutChildEvent(this, this->objectName().toUtf8().data(), e); };
	void invalidate() { callbackQStackedLayoutInvalidate(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQStackedLayoutTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQStackedLayoutCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QStackedLayout_Count(void* ptr){
	return static_cast<QStackedLayout*>(ptr)->count();
}

int QStackedLayout_CurrentIndex(void* ptr){
	return static_cast<QStackedLayout*>(ptr)->currentIndex();
}

void QStackedLayout_SetCurrentIndex(void* ptr, int index){
	QMetaObject::invokeMethod(static_cast<QStackedLayout*>(ptr), "setCurrentIndex", Q_ARG(int, index));
}

void QStackedLayout_SetCurrentWidget(void* ptr, void* widget){
	QMetaObject::invokeMethod(static_cast<QStackedLayout*>(ptr), "setCurrentWidget", Q_ARG(QWidget*, static_cast<QWidget*>(widget)));
}

void QStackedLayout_SetStackingMode(void* ptr, int stackingMode){
	static_cast<QStackedLayout*>(ptr)->setStackingMode(static_cast<QStackedLayout::StackingMode>(stackingMode));
}

int QStackedLayout_StackingMode(void* ptr){
	return static_cast<QStackedLayout*>(ptr)->stackingMode();
}

void* QStackedLayout_NewQStackedLayout(){
	return new MyQStackedLayout();
}

void* QStackedLayout_NewQStackedLayout3(void* parentLayout){
	return new MyQStackedLayout(static_cast<QLayout*>(parentLayout));
}

void* QStackedLayout_NewQStackedLayout2(void* parent){
	return new MyQStackedLayout(static_cast<QWidget*>(parent));
}

void QStackedLayout_AddItem(void* ptr, void* item){
	static_cast<MyQStackedLayout*>(ptr)->addItem(static_cast<QLayoutItem*>(item));
}

void QStackedLayout_AddItemDefault(void* ptr, void* item){
	static_cast<QStackedLayout*>(ptr)->QStackedLayout::addItem(static_cast<QLayoutItem*>(item));
}

int QStackedLayout_AddWidget(void* ptr, void* widget){
	return static_cast<QStackedLayout*>(ptr)->addWidget(static_cast<QWidget*>(widget));
}

void QStackedLayout_ConnectCurrentChanged(void* ptr){
	QObject::connect(static_cast<QStackedLayout*>(ptr), static_cast<void (QStackedLayout::*)(int)>(&QStackedLayout::currentChanged), static_cast<MyQStackedLayout*>(ptr), static_cast<void (MyQStackedLayout::*)(int)>(&MyQStackedLayout::Signal_CurrentChanged));;
}

void QStackedLayout_DisconnectCurrentChanged(void* ptr){
	QObject::disconnect(static_cast<QStackedLayout*>(ptr), static_cast<void (QStackedLayout::*)(int)>(&QStackedLayout::currentChanged), static_cast<MyQStackedLayout*>(ptr), static_cast<void (MyQStackedLayout::*)(int)>(&MyQStackedLayout::Signal_CurrentChanged));;
}

void QStackedLayout_CurrentChanged(void* ptr, int index){
	static_cast<QStackedLayout*>(ptr)->currentChanged(index);
}

void* QStackedLayout_CurrentWidget(void* ptr){
	return static_cast<QStackedLayout*>(ptr)->currentWidget();
}

int QStackedLayout_HasHeightForWidth(void* ptr){
	return static_cast<QStackedLayout*>(ptr)->hasHeightForWidth();
}

int QStackedLayout_HeightForWidth(void* ptr, int width){
	return static_cast<QStackedLayout*>(ptr)->heightForWidth(width);
}

int QStackedLayout_InsertWidget(void* ptr, int index, void* widget){
	return static_cast<QStackedLayout*>(ptr)->insertWidget(index, static_cast<QWidget*>(widget));
}

void* QStackedLayout_ItemAt(void* ptr, int index){
	return static_cast<QStackedLayout*>(ptr)->itemAt(index);
}

void* QStackedLayout_MinimumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QStackedLayout*>(ptr)->minimumSize()).width(), static_cast<QSize>(static_cast<QStackedLayout*>(ptr)->minimumSize()).height());
}

void QStackedLayout_SetGeometry(void* ptr, void* rect){
	static_cast<MyQStackedLayout*>(ptr)->setGeometry(*static_cast<QRect*>(rect));
}

void QStackedLayout_SetGeometryDefault(void* ptr, void* rect){
	static_cast<QStackedLayout*>(ptr)->QStackedLayout::setGeometry(*static_cast<QRect*>(rect));
}

void* QStackedLayout_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QStackedLayout*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QStackedLayout*>(ptr)->sizeHint()).height());
}

void* QStackedLayout_TakeAt(void* ptr, int index){
	return static_cast<QStackedLayout*>(ptr)->takeAt(index);
}

void* QStackedLayout_Widget(void* ptr, int index){
	return static_cast<QStackedLayout*>(ptr)->widget(index);
}

void QStackedLayout_ConnectWidgetRemoved(void* ptr){
	QObject::connect(static_cast<QStackedLayout*>(ptr), static_cast<void (QStackedLayout::*)(int)>(&QStackedLayout::widgetRemoved), static_cast<MyQStackedLayout*>(ptr), static_cast<void (MyQStackedLayout::*)(int)>(&MyQStackedLayout::Signal_WidgetRemoved));;
}

void QStackedLayout_DisconnectWidgetRemoved(void* ptr){
	QObject::disconnect(static_cast<QStackedLayout*>(ptr), static_cast<void (QStackedLayout::*)(int)>(&QStackedLayout::widgetRemoved), static_cast<MyQStackedLayout*>(ptr), static_cast<void (MyQStackedLayout::*)(int)>(&MyQStackedLayout::Signal_WidgetRemoved));;
}

void QStackedLayout_WidgetRemoved(void* ptr, int index){
	static_cast<QStackedLayout*>(ptr)->widgetRemoved(index);
}

void QStackedLayout_DestroyQStackedLayout(void* ptr){
	static_cast<QStackedLayout*>(ptr)->~QStackedLayout();
}

void QStackedLayout_ChildEvent(void* ptr, void* e){
	static_cast<MyQStackedLayout*>(ptr)->childEvent(static_cast<QChildEvent*>(e));
}

void QStackedLayout_ChildEventDefault(void* ptr, void* e){
	static_cast<QStackedLayout*>(ptr)->QStackedLayout::childEvent(static_cast<QChildEvent*>(e));
}

void QStackedLayout_Invalidate(void* ptr){
	static_cast<MyQStackedLayout*>(ptr)->invalidate();
}

void QStackedLayout_InvalidateDefault(void* ptr){
	static_cast<QStackedLayout*>(ptr)->QStackedLayout::invalidate();
}

void QStackedLayout_TimerEvent(void* ptr, void* event){
	static_cast<MyQStackedLayout*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QStackedLayout_TimerEventDefault(void* ptr, void* event){
	static_cast<QStackedLayout*>(ptr)->QStackedLayout::timerEvent(static_cast<QTimerEvent*>(event));
}

void QStackedLayout_CustomEvent(void* ptr, void* event){
	static_cast<MyQStackedLayout*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QStackedLayout_CustomEventDefault(void* ptr, void* event){
	static_cast<QStackedLayout*>(ptr)->QStackedLayout::customEvent(static_cast<QEvent*>(event));
}

class MyQStackedWidget: public QStackedWidget {
public:
	MyQStackedWidget(QWidget *parent) : QStackedWidget(parent) {};
	void Signal_CurrentChanged(int index) { callbackQStackedWidgetCurrentChanged(this, this->objectName().toUtf8().data(), index); };
	void Signal_WidgetRemoved(int index) { callbackQStackedWidgetWidgetRemoved(this, this->objectName().toUtf8().data(), index); };
	void changeEvent(QEvent * ev) { callbackQStackedWidgetChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void paintEvent(QPaintEvent * v) { callbackQStackedWidgetPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void actionEvent(QActionEvent * event) { callbackQStackedWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQStackedWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQStackedWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQStackedWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQStackedWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQStackedWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQStackedWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQStackedWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQStackedWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQStackedWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQStackedWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQStackedWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QStackedWidget::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQStackedWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQStackedWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQStackedWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQStackedWidgetInitPainter(const_cast<MyQStackedWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQStackedWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQStackedWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQStackedWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQStackedWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQStackedWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQStackedWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQStackedWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQStackedWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQStackedWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQStackedWidgetWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQStackedWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQStackedWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQStackedWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QStackedWidget_Count(void* ptr){
	return static_cast<QStackedWidget*>(ptr)->count();
}

int QStackedWidget_CurrentIndex(void* ptr){
	return static_cast<QStackedWidget*>(ptr)->currentIndex();
}

void QStackedWidget_SetCurrentIndex(void* ptr, int index){
	QMetaObject::invokeMethod(static_cast<QStackedWidget*>(ptr), "setCurrentIndex", Q_ARG(int, index));
}

void QStackedWidget_SetCurrentWidget(void* ptr, void* widget){
	QMetaObject::invokeMethod(static_cast<QStackedWidget*>(ptr), "setCurrentWidget", Q_ARG(QWidget*, static_cast<QWidget*>(widget)));
}

void* QStackedWidget_NewQStackedWidget(void* parent){
	return new MyQStackedWidget(static_cast<QWidget*>(parent));
}

int QStackedWidget_AddWidget(void* ptr, void* widget){
	return static_cast<QStackedWidget*>(ptr)->addWidget(static_cast<QWidget*>(widget));
}

void QStackedWidget_ConnectCurrentChanged(void* ptr){
	QObject::connect(static_cast<QStackedWidget*>(ptr), static_cast<void (QStackedWidget::*)(int)>(&QStackedWidget::currentChanged), static_cast<MyQStackedWidget*>(ptr), static_cast<void (MyQStackedWidget::*)(int)>(&MyQStackedWidget::Signal_CurrentChanged));;
}

void QStackedWidget_DisconnectCurrentChanged(void* ptr){
	QObject::disconnect(static_cast<QStackedWidget*>(ptr), static_cast<void (QStackedWidget::*)(int)>(&QStackedWidget::currentChanged), static_cast<MyQStackedWidget*>(ptr), static_cast<void (MyQStackedWidget::*)(int)>(&MyQStackedWidget::Signal_CurrentChanged));;
}

void QStackedWidget_CurrentChanged(void* ptr, int index){
	static_cast<QStackedWidget*>(ptr)->currentChanged(index);
}

void* QStackedWidget_CurrentWidget(void* ptr){
	return static_cast<QStackedWidget*>(ptr)->currentWidget();
}

int QStackedWidget_Event(void* ptr, void* e){
	return static_cast<QStackedWidget*>(ptr)->event(static_cast<QEvent*>(e));
}

int QStackedWidget_IndexOf(void* ptr, void* widget){
	return static_cast<QStackedWidget*>(ptr)->indexOf(static_cast<QWidget*>(widget));
}

int QStackedWidget_InsertWidget(void* ptr, int index, void* widget){
	return static_cast<QStackedWidget*>(ptr)->insertWidget(index, static_cast<QWidget*>(widget));
}

void QStackedWidget_RemoveWidget(void* ptr, void* widget){
	static_cast<QStackedWidget*>(ptr)->removeWidget(static_cast<QWidget*>(widget));
}

void* QStackedWidget_Widget(void* ptr, int index){
	return static_cast<QStackedWidget*>(ptr)->widget(index);
}

void QStackedWidget_ConnectWidgetRemoved(void* ptr){
	QObject::connect(static_cast<QStackedWidget*>(ptr), static_cast<void (QStackedWidget::*)(int)>(&QStackedWidget::widgetRemoved), static_cast<MyQStackedWidget*>(ptr), static_cast<void (MyQStackedWidget::*)(int)>(&MyQStackedWidget::Signal_WidgetRemoved));;
}

void QStackedWidget_DisconnectWidgetRemoved(void* ptr){
	QObject::disconnect(static_cast<QStackedWidget*>(ptr), static_cast<void (QStackedWidget::*)(int)>(&QStackedWidget::widgetRemoved), static_cast<MyQStackedWidget*>(ptr), static_cast<void (MyQStackedWidget::*)(int)>(&MyQStackedWidget::Signal_WidgetRemoved));;
}

void QStackedWidget_WidgetRemoved(void* ptr, int index){
	static_cast<QStackedWidget*>(ptr)->widgetRemoved(index);
}

void QStackedWidget_DestroyQStackedWidget(void* ptr){
	static_cast<QStackedWidget*>(ptr)->~QStackedWidget();
}

void QStackedWidget_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQStackedWidget*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QStackedWidget_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::changeEvent(static_cast<QEvent*>(ev));
}

void QStackedWidget_PaintEvent(void* ptr, void* v){
	static_cast<MyQStackedWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QStackedWidget_PaintEventDefault(void* ptr, void* v){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::paintEvent(static_cast<QPaintEvent*>(v));
}

void QStackedWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QStackedWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QStackedWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QStackedWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QStackedWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QStackedWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QStackedWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QStackedWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QStackedWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QStackedWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::dropEvent(static_cast<QDropEvent*>(event));
}

void QStackedWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QStackedWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::enterEvent(static_cast<QEvent*>(event));
}

void QStackedWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QStackedWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QStackedWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QStackedWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QStackedWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QStackedWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QStackedWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QStackedWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::leaveEvent(static_cast<QEvent*>(event));
}

void QStackedWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QStackedWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void QStackedWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQStackedWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QStackedWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QStackedWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QStackedWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QStackedWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::showEvent(static_cast<QShowEvent*>(event));
}

void QStackedWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QStackedWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QStackedWidget_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QStackedWidget_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QStackedWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQStackedWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QStackedWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::initPainter(static_cast<QPainter*>(painter));
}

void QStackedWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QStackedWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QStackedWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QStackedWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QStackedWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QStackedWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QStackedWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QStackedWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QStackedWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QStackedWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QStackedWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QStackedWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QStackedWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QStackedWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QStackedWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QStackedWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QStackedWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QStackedWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QStackedWidget_WheelEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QStackedWidget_WheelEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QStackedWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QStackedWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QStackedWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QStackedWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QStackedWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQStackedWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QStackedWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QStackedWidget*>(ptr)->QStackedWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQStatusBar: public QStatusBar {
public:
	MyQStatusBar(QWidget *parent) : QStatusBar(parent) {};
	void paintEvent(QPaintEvent * event) { callbackQStatusBarPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_MessageChanged(const QString & message) { callbackQStatusBarMessageChanged(this, this->objectName().toUtf8().data(), message.toUtf8().data()); };
	void resizeEvent(QResizeEvent * e) { callbackQStatusBarResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void showEvent(QShowEvent * v) { callbackQStatusBarShowEvent(this, this->objectName().toUtf8().data(), v); };
	void actionEvent(QActionEvent * event) { callbackQStatusBarActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQStatusBarDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQStatusBarDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQStatusBarDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQStatusBarDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQStatusBarEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQStatusBarFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQStatusBarFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQStatusBarHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQStatusBarLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQStatusBarMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQStatusBarSetVisible(this, this->objectName().toUtf8().data(), visible)) { QStatusBar::setVisible(visible); }; };
	void changeEvent(QEvent * event) { callbackQStatusBarChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQStatusBarCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQStatusBarContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQStatusBarInitPainter(const_cast<MyQStatusBar*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQStatusBarInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQStatusBarKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQStatusBarKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQStatusBarMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQStatusBarMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQStatusBarMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQStatusBarMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQStatusBarTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQStatusBarWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQStatusBarTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQStatusBarChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQStatusBarCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QStatusBar_IsSizeGripEnabled(void* ptr){
	return static_cast<QStatusBar*>(ptr)->isSizeGripEnabled();
}

void QStatusBar_PaintEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QStatusBar_PaintEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::paintEvent(static_cast<QPaintEvent*>(event));
}

void QStatusBar_SetSizeGripEnabled(void* ptr, int v){
	static_cast<QStatusBar*>(ptr)->setSizeGripEnabled(v != 0);
}

void* QStatusBar_NewQStatusBar(void* parent){
	return new MyQStatusBar(static_cast<QWidget*>(parent));
}

void QStatusBar_AddPermanentWidget(void* ptr, void* widget, int stretch){
	static_cast<QStatusBar*>(ptr)->addPermanentWidget(static_cast<QWidget*>(widget), stretch);
}

void QStatusBar_AddWidget(void* ptr, void* widget, int stretch){
	static_cast<QStatusBar*>(ptr)->addWidget(static_cast<QWidget*>(widget), stretch);
}

void QStatusBar_ClearMessage(void* ptr){
	QMetaObject::invokeMethod(static_cast<QStatusBar*>(ptr), "clearMessage");
}

char* QStatusBar_CurrentMessage(void* ptr){
	return static_cast<QStatusBar*>(ptr)->currentMessage().toUtf8().data();
}

int QStatusBar_Event(void* ptr, void* e){
	return static_cast<QStatusBar*>(ptr)->event(static_cast<QEvent*>(e));
}

int QStatusBar_InsertPermanentWidget(void* ptr, int index, void* widget, int stretch){
	return static_cast<QStatusBar*>(ptr)->insertPermanentWidget(index, static_cast<QWidget*>(widget), stretch);
}

int QStatusBar_InsertWidget(void* ptr, int index, void* widget, int stretch){
	return static_cast<QStatusBar*>(ptr)->insertWidget(index, static_cast<QWidget*>(widget), stretch);
}

void QStatusBar_ConnectMessageChanged(void* ptr){
	QObject::connect(static_cast<QStatusBar*>(ptr), static_cast<void (QStatusBar::*)(const QString &)>(&QStatusBar::messageChanged), static_cast<MyQStatusBar*>(ptr), static_cast<void (MyQStatusBar::*)(const QString &)>(&MyQStatusBar::Signal_MessageChanged));;
}

void QStatusBar_DisconnectMessageChanged(void* ptr){
	QObject::disconnect(static_cast<QStatusBar*>(ptr), static_cast<void (QStatusBar::*)(const QString &)>(&QStatusBar::messageChanged), static_cast<MyQStatusBar*>(ptr), static_cast<void (MyQStatusBar::*)(const QString &)>(&MyQStatusBar::Signal_MessageChanged));;
}

void QStatusBar_MessageChanged(void* ptr, char* message){
	static_cast<QStatusBar*>(ptr)->messageChanged(QString(message));
}

void QStatusBar_RemoveWidget(void* ptr, void* widget){
	static_cast<QStatusBar*>(ptr)->removeWidget(static_cast<QWidget*>(widget));
}

void QStatusBar_ResizeEvent(void* ptr, void* e){
	static_cast<MyQStatusBar*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QStatusBar_ResizeEventDefault(void* ptr, void* e){
	static_cast<QStatusBar*>(ptr)->QStatusBar::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QStatusBar_ShowEvent(void* ptr, void* v){
	static_cast<MyQStatusBar*>(ptr)->showEvent(static_cast<QShowEvent*>(v));
}

void QStatusBar_ShowEventDefault(void* ptr, void* v){
	static_cast<QStatusBar*>(ptr)->QStatusBar::showEvent(static_cast<QShowEvent*>(v));
}

void QStatusBar_ShowMessage(void* ptr, char* message, int timeout){
	QMetaObject::invokeMethod(static_cast<QStatusBar*>(ptr), "showMessage", Q_ARG(QString, QString(message)), Q_ARG(int, timeout));
}

void QStatusBar_DestroyQStatusBar(void* ptr){
	static_cast<QStatusBar*>(ptr)->~QStatusBar();
}

void QStatusBar_ActionEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QStatusBar_ActionEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::actionEvent(static_cast<QActionEvent*>(event));
}

void QStatusBar_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QStatusBar_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QStatusBar_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QStatusBar_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QStatusBar_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QStatusBar_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QStatusBar_DropEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QStatusBar_DropEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::dropEvent(static_cast<QDropEvent*>(event));
}

void QStatusBar_EnterEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QStatusBar_EnterEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::enterEvent(static_cast<QEvent*>(event));
}

void QStatusBar_FocusInEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QStatusBar_FocusInEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QStatusBar_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QStatusBar_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QStatusBar_HideEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QStatusBar_HideEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::hideEvent(static_cast<QHideEvent*>(event));
}

void QStatusBar_LeaveEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QStatusBar_LeaveEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::leaveEvent(static_cast<QEvent*>(event));
}

void QStatusBar_MoveEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QStatusBar_MoveEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::moveEvent(static_cast<QMoveEvent*>(event));
}

void QStatusBar_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQStatusBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QStatusBar_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QStatusBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QStatusBar_ChangeEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QStatusBar_ChangeEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::changeEvent(static_cast<QEvent*>(event));
}

void QStatusBar_CloseEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QStatusBar_CloseEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::closeEvent(static_cast<QCloseEvent*>(event));
}

void QStatusBar_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QStatusBar_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QStatusBar_InitPainter(void* ptr, void* painter){
	static_cast<MyQStatusBar*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QStatusBar_InitPainterDefault(void* ptr, void* painter){
	static_cast<QStatusBar*>(ptr)->QStatusBar::initPainter(static_cast<QPainter*>(painter));
}

void QStatusBar_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QStatusBar_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QStatusBar_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QStatusBar_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QStatusBar_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QStatusBar_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QStatusBar_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QStatusBar_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QStatusBar_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QStatusBar_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QStatusBar_MousePressEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QStatusBar_MousePressEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QStatusBar_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QStatusBar_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QStatusBar_TabletEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QStatusBar_TabletEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QStatusBar_WheelEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QStatusBar_WheelEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QStatusBar_TimerEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QStatusBar_TimerEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::timerEvent(static_cast<QTimerEvent*>(event));
}

void QStatusBar_ChildEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QStatusBar_ChildEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::childEvent(static_cast<QChildEvent*>(event));
}

void QStatusBar_CustomEvent(void* ptr, void* event){
	static_cast<MyQStatusBar*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QStatusBar_CustomEventDefault(void* ptr, void* event){
	static_cast<QStatusBar*>(ptr)->QStatusBar::customEvent(static_cast<QEvent*>(event));
}

class MyQStyle: public QStyle {
public:
	void drawItemPixmap(QPainter * painter, const QRect & rectangle, int alignment, const QPixmap & pixmap) const { callbackQStyleDrawItemPixmap(const_cast<MyQStyle*>(this), this->objectName().toUtf8().data(), painter, new QRect(static_cast<QRect>(rectangle).x(), static_cast<QRect>(rectangle).y(), static_cast<QRect>(rectangle).width(), static_cast<QRect>(rectangle).height()), alignment, new QPixmap(pixmap)); };
	void drawItemText(QPainter * painter, const QRect & rectangle, int alignment, const QPalette & palette, bool enabled, const QString & text, QPalette::ColorRole textRole) const { callbackQStyleDrawItemText(const_cast<MyQStyle*>(this), this->objectName().toUtf8().data(), painter, new QRect(static_cast<QRect>(rectangle).x(), static_cast<QRect>(rectangle).y(), static_cast<QRect>(rectangle).width(), static_cast<QRect>(rectangle).height()), alignment, new QPalette(palette), enabled, text.toUtf8().data(), textRole); };
	void polish(QWidget * widget) { callbackQStylePolish(this, this->objectName().toUtf8().data(), widget); };
	void unpolish(QWidget * widget) { callbackQStyleUnpolish(this, this->objectName().toUtf8().data(), widget); };
	void timerEvent(QTimerEvent * event) { callbackQStyleTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQStyleChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQStyleCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QStyle_PM_MdiSubWindowMinimizedWidth_Type(){
	return QStyle::PM_MdiSubWindowMinimizedWidth;
}

int QStyle_PM_HeaderMargin_Type(){
	return QStyle::PM_HeaderMargin;
}

int QStyle_PM_HeaderMarkSize_Type(){
	return QStyle::PM_HeaderMarkSize;
}

int QStyle_PM_HeaderGripMargin_Type(){
	return QStyle::PM_HeaderGripMargin;
}

int QStyle_PM_TabBarTabShiftHorizontal_Type(){
	return QStyle::PM_TabBarTabShiftHorizontal;
}

int QStyle_PM_TabBarTabShiftVertical_Type(){
	return QStyle::PM_TabBarTabShiftVertical;
}

int QStyle_PM_TabBarScrollButtonWidth_Type(){
	return QStyle::PM_TabBarScrollButtonWidth;
}

int QStyle_PM_ToolBarFrameWidth_Type(){
	return QStyle::PM_ToolBarFrameWidth;
}

int QStyle_PM_ToolBarHandleExtent_Type(){
	return QStyle::PM_ToolBarHandleExtent;
}

int QStyle_PM_ToolBarItemSpacing_Type(){
	return QStyle::PM_ToolBarItemSpacing;
}

int QStyle_PM_ToolBarItemMargin_Type(){
	return QStyle::PM_ToolBarItemMargin;
}

int QStyle_PM_ToolBarSeparatorExtent_Type(){
	return QStyle::PM_ToolBarSeparatorExtent;
}

int QStyle_PM_ToolBarExtensionExtent_Type(){
	return QStyle::PM_ToolBarExtensionExtent;
}

int QStyle_PM_SpinBoxSliderHeight_Type(){
	return QStyle::PM_SpinBoxSliderHeight;
}

int QStyle_PM_DefaultTopLevelMargin_Type(){
	return QStyle::PM_DefaultTopLevelMargin;
}

int QStyle_PM_DefaultChildMargin_Type(){
	return QStyle::PM_DefaultChildMargin;
}

int QStyle_PM_DefaultLayoutSpacing_Type(){
	return QStyle::PM_DefaultLayoutSpacing;
}

int QStyle_PM_ToolBarIconSize_Type(){
	return QStyle::PM_ToolBarIconSize;
}

int QStyle_PM_ListViewIconSize_Type(){
	return QStyle::PM_ListViewIconSize;
}

int QStyle_PM_IconViewIconSize_Type(){
	return QStyle::PM_IconViewIconSize;
}

int QStyle_PM_SmallIconSize_Type(){
	return QStyle::PM_SmallIconSize;
}

int QStyle_PM_LargeIconSize_Type(){
	return QStyle::PM_LargeIconSize;
}

int QStyle_PM_FocusFrameVMargin_Type(){
	return QStyle::PM_FocusFrameVMargin;
}

int QStyle_PM_FocusFrameHMargin_Type(){
	return QStyle::PM_FocusFrameHMargin;
}

int QStyle_PM_ToolTipLabelFrameWidth_Type(){
	return QStyle::PM_ToolTipLabelFrameWidth;
}

int QStyle_PM_CheckBoxLabelSpacing_Type(){
	return QStyle::PM_CheckBoxLabelSpacing;
}

int QStyle_PM_TabBarIconSize_Type(){
	return QStyle::PM_TabBarIconSize;
}

int QStyle_PM_SizeGripSize_Type(){
	return QStyle::PM_SizeGripSize;
}

int QStyle_PM_DockWidgetTitleMargin_Type(){
	return QStyle::PM_DockWidgetTitleMargin;
}

int QStyle_PM_MessageBoxIconSize_Type(){
	return QStyle::PM_MessageBoxIconSize;
}

int QStyle_PM_ButtonIconSize_Type(){
	return QStyle::PM_ButtonIconSize;
}

int QStyle_PM_DockWidgetTitleBarButtonMargin_Type(){
	return QStyle::PM_DockWidgetTitleBarButtonMargin;
}

int QStyle_PM_RadioButtonLabelSpacing_Type(){
	return QStyle::PM_RadioButtonLabelSpacing;
}

int QStyle_PM_LayoutLeftMargin_Type(){
	return QStyle::PM_LayoutLeftMargin;
}

int QStyle_PM_LayoutTopMargin_Type(){
	return QStyle::PM_LayoutTopMargin;
}

int QStyle_PM_LayoutRightMargin_Type(){
	return QStyle::PM_LayoutRightMargin;
}

int QStyle_PM_LayoutBottomMargin_Type(){
	return QStyle::PM_LayoutBottomMargin;
}

int QStyle_PM_LayoutHorizontalSpacing_Type(){
	return QStyle::PM_LayoutHorizontalSpacing;
}

int QStyle_PM_LayoutVerticalSpacing_Type(){
	return QStyle::PM_LayoutVerticalSpacing;
}

int QStyle_PM_TabBar_ScrollButtonOverlap_Type(){
	return QStyle::PM_TabBar_ScrollButtonOverlap;
}

int QStyle_PM_TextCursorWidth_Type(){
	return QStyle::PM_TextCursorWidth;
}

int QStyle_PM_TabCloseIndicatorWidth_Type(){
	return QStyle::PM_TabCloseIndicatorWidth;
}

int QStyle_PM_TabCloseIndicatorHeight_Type(){
	return QStyle::PM_TabCloseIndicatorHeight;
}

int QStyle_PM_ScrollView_ScrollBarSpacing_Type(){
	return QStyle::PM_ScrollView_ScrollBarSpacing;
}

int QStyle_PM_ScrollView_ScrollBarOverlap_Type(){
	return QStyle::PM_ScrollView_ScrollBarOverlap;
}

int QStyle_PM_SubMenuOverlap_Type(){
	return QStyle::PM_SubMenuOverlap;
}

int QStyle_PM_TreeViewIndentation_Type(){
	return QStyle::PM_TreeViewIndentation;
}

int QStyle_PM_HeaderDefaultSectionSizeHorizontal_Type(){
	return QStyle::PM_HeaderDefaultSectionSizeHorizontal;
}

int QStyle_PM_HeaderDefaultSectionSizeVertical_Type(){
	return QStyle::PM_HeaderDefaultSectionSizeVertical;
}

int QStyle_PE_FrameTabWidget_Type(){
	return QStyle::PE_FrameTabWidget;
}

int QStyle_PE_FrameWindow_Type(){
	return QStyle::PE_FrameWindow;
}

int QStyle_PE_FrameButtonBevel_Type(){
	return QStyle::PE_FrameButtonBevel;
}

int QStyle_PE_FrameButtonTool_Type(){
	return QStyle::PE_FrameButtonTool;
}

int QStyle_PE_FrameTabBarBase_Type(){
	return QStyle::PE_FrameTabBarBase;
}

int QStyle_PE_PanelButtonCommand_Type(){
	return QStyle::PE_PanelButtonCommand;
}

int QStyle_PE_PanelButtonBevel_Type(){
	return QStyle::PE_PanelButtonBevel;
}

int QStyle_PE_PanelButtonTool_Type(){
	return QStyle::PE_PanelButtonTool;
}

int QStyle_PE_PanelMenuBar_Type(){
	return QStyle::PE_PanelMenuBar;
}

int QStyle_PE_PanelToolBar_Type(){
	return QStyle::PE_PanelToolBar;
}

int QStyle_PE_PanelLineEdit_Type(){
	return QStyle::PE_PanelLineEdit;
}

int QStyle_PE_IndicatorArrowDown_Type(){
	return QStyle::PE_IndicatorArrowDown;
}

int QStyle_PE_IndicatorArrowLeft_Type(){
	return QStyle::PE_IndicatorArrowLeft;
}

int QStyle_PE_IndicatorArrowRight_Type(){
	return QStyle::PE_IndicatorArrowRight;
}

int QStyle_PE_IndicatorArrowUp_Type(){
	return QStyle::PE_IndicatorArrowUp;
}

int QStyle_PE_IndicatorBranch_Type(){
	return QStyle::PE_IndicatorBranch;
}

int QStyle_PE_IndicatorButtonDropDown_Type(){
	return QStyle::PE_IndicatorButtonDropDown;
}

int QStyle_PE_IndicatorViewItemCheck_Type(){
	return QStyle::PE_IndicatorViewItemCheck;
}

int QStyle_PE_IndicatorCheckBox_Type(){
	return QStyle::PE_IndicatorCheckBox;
}

int QStyle_PE_IndicatorDockWidgetResizeHandle_Type(){
	return QStyle::PE_IndicatorDockWidgetResizeHandle;
}

int QStyle_PE_IndicatorHeaderArrow_Type(){
	return QStyle::PE_IndicatorHeaderArrow;
}

int QStyle_PE_IndicatorMenuCheckMark_Type(){
	return QStyle::PE_IndicatorMenuCheckMark;
}

int QStyle_PE_IndicatorProgressChunk_Type(){
	return QStyle::PE_IndicatorProgressChunk;
}

int QStyle_PE_IndicatorRadioButton_Type(){
	return QStyle::PE_IndicatorRadioButton;
}

int QStyle_PE_IndicatorSpinDown_Type(){
	return QStyle::PE_IndicatorSpinDown;
}

int QStyle_PE_IndicatorSpinMinus_Type(){
	return QStyle::PE_IndicatorSpinMinus;
}

int QStyle_PE_IndicatorSpinPlus_Type(){
	return QStyle::PE_IndicatorSpinPlus;
}

int QStyle_PE_IndicatorSpinUp_Type(){
	return QStyle::PE_IndicatorSpinUp;
}

int QStyle_PE_IndicatorToolBarHandle_Type(){
	return QStyle::PE_IndicatorToolBarHandle;
}

int QStyle_PE_IndicatorToolBarSeparator_Type(){
	return QStyle::PE_IndicatorToolBarSeparator;
}

int QStyle_PE_PanelTipLabel_Type(){
	return QStyle::PE_PanelTipLabel;
}

int QStyle_PE_IndicatorTabTear_Type(){
	return QStyle::PE_IndicatorTabTear;
}

int QStyle_PE_PanelScrollAreaCorner_Type(){
	return QStyle::PE_PanelScrollAreaCorner;
}

int QStyle_PE_Widget_Type(){
	return QStyle::PE_Widget;
}

int QStyle_PE_IndicatorColumnViewArrow_Type(){
	return QStyle::PE_IndicatorColumnViewArrow;
}

int QStyle_PE_IndicatorItemViewItemDrop_Type(){
	return QStyle::PE_IndicatorItemViewItemDrop;
}

int QStyle_PE_PanelItemViewItem_Type(){
	return QStyle::PE_PanelItemViewItem;
}

int QStyle_PE_PanelItemViewRow_Type(){
	return QStyle::PE_PanelItemViewRow;
}

int QStyle_PE_PanelStatusBar_Type(){
	return QStyle::PE_PanelStatusBar;
}

int QStyle_PE_IndicatorTabClose_Type(){
	return QStyle::PE_IndicatorTabClose;
}

int QStyle_PE_PanelMenu_Type(){
	return QStyle::PE_PanelMenu;
}

int QStyle_SH_BlinkCursorWhenTextSelected_Type(){
	return QStyle::SH_BlinkCursorWhenTextSelected;
}

int QStyle_SH_RichText_FullWidthSelection_Type(){
	return QStyle::SH_RichText_FullWidthSelection;
}

int QStyle_SH_Menu_Scrollable_Type(){
	return QStyle::SH_Menu_Scrollable;
}

int QStyle_SH_GroupBox_TextLabelVerticalAlignment_Type(){
	return QStyle::SH_GroupBox_TextLabelVerticalAlignment;
}

int QStyle_SH_GroupBox_TextLabelColor_Type(){
	return QStyle::SH_GroupBox_TextLabelColor;
}

int QStyle_SH_Menu_SloppySubMenus_Type(){
	return QStyle::SH_Menu_SloppySubMenus;
}

int QStyle_SH_Table_GridLineColor_Type(){
	return QStyle::SH_Table_GridLineColor;
}

int QStyle_SH_LineEdit_PasswordCharacter_Type(){
	return QStyle::SH_LineEdit_PasswordCharacter;
}

int QStyle_SH_DialogButtons_DefaultButton_Type(){
	return QStyle::SH_DialogButtons_DefaultButton;
}

int QStyle_SH_ToolBox_SelectedPageTitleBold_Type(){
	return QStyle::SH_ToolBox_SelectedPageTitleBold;
}

int QStyle_SH_TabBar_PreferNoArrows_Type(){
	return QStyle::SH_TabBar_PreferNoArrows;
}

int QStyle_SH_ScrollBar_LeftClickAbsolutePosition_Type(){
	return QStyle::SH_ScrollBar_LeftClickAbsolutePosition;
}

int QStyle_SH_ListViewExpand_SelectMouseType_Type(){
	return QStyle::SH_ListViewExpand_SelectMouseType;
}

int QStyle_SH_UnderlineShortcut_Type(){
	return QStyle::SH_UnderlineShortcut;
}

int QStyle_SH_SpinBox_AnimateButton_Type(){
	return QStyle::SH_SpinBox_AnimateButton;
}

int QStyle_SH_SpinBox_KeyPressAutoRepeatRate_Type(){
	return QStyle::SH_SpinBox_KeyPressAutoRepeatRate;
}

int QStyle_SH_SpinBox_ClickAutoRepeatRate_Type(){
	return QStyle::SH_SpinBox_ClickAutoRepeatRate;
}

int QStyle_SH_Menu_FillScreenWithScroll_Type(){
	return QStyle::SH_Menu_FillScreenWithScroll;
}

int QStyle_SH_ToolTipLabel_Opacity_Type(){
	return QStyle::SH_ToolTipLabel_Opacity;
}

int QStyle_SH_DrawMenuBarSeparator_Type(){
	return QStyle::SH_DrawMenuBarSeparator;
}

int QStyle_SH_TitleBar_ModifyNotification_Type(){
	return QStyle::SH_TitleBar_ModifyNotification;
}

int QStyle_SH_Button_FocusPolicy_Type(){
	return QStyle::SH_Button_FocusPolicy;
}

int QStyle_SH_MessageBox_UseBorderForButtonSpacing_Type(){
	return QStyle::SH_MessageBox_UseBorderForButtonSpacing;
}

int QStyle_SH_TitleBar_AutoRaise_Type(){
	return QStyle::SH_TitleBar_AutoRaise;
}

int QStyle_SH_ToolButton_PopupDelay_Type(){
	return QStyle::SH_ToolButton_PopupDelay;
}

int QStyle_SH_FocusFrame_Mask_Type(){
	return QStyle::SH_FocusFrame_Mask;
}

int QStyle_SH_RubberBand_Mask_Type(){
	return QStyle::SH_RubberBand_Mask;
}

int QStyle_SH_WindowFrame_Mask_Type(){
	return QStyle::SH_WindowFrame_Mask;
}

int QStyle_SH_SpinControls_DisableOnBounds_Type(){
	return QStyle::SH_SpinControls_DisableOnBounds;
}

int QStyle_SH_Dial_BackgroundRole_Type(){
	return QStyle::SH_Dial_BackgroundRole;
}

int QStyle_SH_ComboBox_LayoutDirection_Type(){
	return QStyle::SH_ComboBox_LayoutDirection;
}

int QStyle_SH_ItemView_EllipsisLocation_Type(){
	return QStyle::SH_ItemView_EllipsisLocation;
}

int QStyle_SH_ItemView_ShowDecorationSelected_Type(){
	return QStyle::SH_ItemView_ShowDecorationSelected;
}

int QStyle_SH_ItemView_ActivateItemOnSingleClick_Type(){
	return QStyle::SH_ItemView_ActivateItemOnSingleClick;
}

int QStyle_SH_ScrollBar_ContextMenu_Type(){
	return QStyle::SH_ScrollBar_ContextMenu;
}

int QStyle_SH_ScrollBar_RollBetweenButtons_Type(){
	return QStyle::SH_ScrollBar_RollBetweenButtons;
}

int QStyle_SH_Slider_AbsoluteSetButtons_Type(){
	return QStyle::SH_Slider_AbsoluteSetButtons;
}

int QStyle_SH_Slider_PageSetButtons_Type(){
	return QStyle::SH_Slider_PageSetButtons;
}

int QStyle_SH_Menu_KeyboardSearch_Type(){
	return QStyle::SH_Menu_KeyboardSearch;
}

int QStyle_SH_TabBar_ElideMode_Type(){
	return QStyle::SH_TabBar_ElideMode;
}

int QStyle_SH_DialogButtonLayout_Type(){
	return QStyle::SH_DialogButtonLayout;
}

int QStyle_SH_ComboBox_PopupFrameStyle_Type(){
	return QStyle::SH_ComboBox_PopupFrameStyle;
}

int QStyle_SH_MessageBox_TextInteractionFlags_Type(){
	return QStyle::SH_MessageBox_TextInteractionFlags;
}

int QStyle_SH_DialogButtonBox_ButtonsHaveIcons_Type(){
	return QStyle::SH_DialogButtonBox_ButtonsHaveIcons;
}

int QStyle_SH_SpellCheckUnderlineStyle_Type(){
	return QStyle::SH_SpellCheckUnderlineStyle;
}

int QStyle_SH_MessageBox_CenterButtons_Type(){
	return QStyle::SH_MessageBox_CenterButtons;
}

int QStyle_SH_Menu_SelectionWrap_Type(){
	return QStyle::SH_Menu_SelectionWrap;
}

int QStyle_SH_ItemView_MovementWithoutUpdatingSelection_Type(){
	return QStyle::SH_ItemView_MovementWithoutUpdatingSelection;
}

int QStyle_SH_ToolTip_Mask_Type(){
	return QStyle::SH_ToolTip_Mask;
}

int QStyle_SH_FocusFrame_AboveWidget_Type(){
	return QStyle::SH_FocusFrame_AboveWidget;
}

int QStyle_SH_TextControl_FocusIndicatorTextCharFormat_Type(){
	return QStyle::SH_TextControl_FocusIndicatorTextCharFormat;
}

int QStyle_SH_WizardStyle_Type(){
	return QStyle::SH_WizardStyle;
}

int QStyle_SH_ItemView_ArrowKeysNavigateIntoChildren_Type(){
	return QStyle::SH_ItemView_ArrowKeysNavigateIntoChildren;
}

int QStyle_SH_Menu_Mask_Type(){
	return QStyle::SH_Menu_Mask;
}

int QStyle_SH_Menu_FlashTriggeredItem_Type(){
	return QStyle::SH_Menu_FlashTriggeredItem;
}

int QStyle_SH_Menu_FadeOutOnHide_Type(){
	return QStyle::SH_Menu_FadeOutOnHide;
}

int QStyle_SH_SpinBox_ClickAutoRepeatThreshold_Type(){
	return QStyle::SH_SpinBox_ClickAutoRepeatThreshold;
}

int QStyle_SH_ItemView_PaintAlternatingRowColorsForEmptyArea_Type(){
	return QStyle::SH_ItemView_PaintAlternatingRowColorsForEmptyArea;
}

int QStyle_SH_FormLayoutWrapPolicy_Type(){
	return QStyle::SH_FormLayoutWrapPolicy;
}

int QStyle_SH_TabWidget_DefaultTabPosition_Type(){
	return QStyle::SH_TabWidget_DefaultTabPosition;
}

int QStyle_SH_ToolBar_Movable_Type(){
	return QStyle::SH_ToolBar_Movable;
}

int QStyle_SH_FormLayoutFieldGrowthPolicy_Type(){
	return QStyle::SH_FormLayoutFieldGrowthPolicy;
}

int QStyle_SH_FormLayoutFormAlignment_Type(){
	return QStyle::SH_FormLayoutFormAlignment;
}

int QStyle_SH_FormLayoutLabelAlignment_Type(){
	return QStyle::SH_FormLayoutLabelAlignment;
}

int QStyle_SH_ItemView_DrawDelegateFrame_Type(){
	return QStyle::SH_ItemView_DrawDelegateFrame;
}

int QStyle_SH_TabBar_CloseButtonPosition_Type(){
	return QStyle::SH_TabBar_CloseButtonPosition;
}

int QStyle_SH_DockWidget_ButtonsHaveFrame_Type(){
	return QStyle::SH_DockWidget_ButtonsHaveFrame;
}

int QStyle_SH_ToolButtonStyle_Type(){
	return QStyle::SH_ToolButtonStyle;
}

int QStyle_SH_RequestSoftwareInputPanel_Type(){
	return QStyle::SH_RequestSoftwareInputPanel;
}

int QStyle_SH_ScrollBar_Transient_Type(){
	return QStyle::SH_ScrollBar_Transient;
}

int QStyle_SH_Menu_SupportsSections_Type(){
	return QStyle::SH_Menu_SupportsSections;
}

int QStyle_SH_ToolTip_WakeUpDelay_Type(){
	return QStyle::SH_ToolTip_WakeUpDelay;
}

int QStyle_SH_ToolTip_FallAsleepDelay_Type(){
	return QStyle::SH_ToolTip_FallAsleepDelay;
}

int QStyle_SH_Widget_Animate_Type(){
	return QStyle::SH_Widget_Animate;
}

int QStyle_SH_Splitter_OpaqueResize_Type(){
	return QStyle::SH_Splitter_OpaqueResize;
}

int QStyle_SH_ComboBox_UseNativePopup_Type(){
	return QStyle::SH_ComboBox_UseNativePopup;
}

int QStyle_SH_LineEdit_PasswordMaskDelay_Type(){
	return QStyle::SH_LineEdit_PasswordMaskDelay;
}

int QStyle_SH_TabBar_ChangeCurrentDelay_Type(){
	return QStyle::SH_TabBar_ChangeCurrentDelay;
}

int QStyle_SH_Menu_SubMenuUniDirection_Type(){
	return QStyle::SH_Menu_SubMenuUniDirection;
}

int QStyle_SH_Menu_SubMenuUniDirectionFailCount_Type(){
	return QStyle::SH_Menu_SubMenuUniDirectionFailCount;
}

int QStyle_SH_Menu_SubMenuSloppySelectOtherActions_Type(){
	return QStyle::SH_Menu_SubMenuSloppySelectOtherActions;
}

int QStyle_SH_Menu_SubMenuSloppyCloseTimeout_Type(){
	return QStyle::SH_Menu_SubMenuSloppyCloseTimeout;
}

int QStyle_SH_Menu_SubMenuResetWhenReenteringParent_Type(){
	return QStyle::SH_Menu_SubMenuResetWhenReenteringParent;
}

int QStyle_SH_Menu_SubMenuDontStartSloppyOnLeave_Type(){
	return QStyle::SH_Menu_SubMenuDontStartSloppyOnLeave;
}

int QStyle_SE_TabBarTearIndicator_Type(){
	return QStyle::SE_TabBarTearIndicator;
}

int QStyle_SE_TreeViewDisclosureItem_Type(){
	return QStyle::SE_TreeViewDisclosureItem;
}

int QStyle_SE_LineEditContents_Type(){
	return QStyle::SE_LineEditContents;
}

int QStyle_SE_FrameContents_Type(){
	return QStyle::SE_FrameContents;
}

int QStyle_SE_DockWidgetCloseButton_Type(){
	return QStyle::SE_DockWidgetCloseButton;
}

int QStyle_SE_DockWidgetFloatButton_Type(){
	return QStyle::SE_DockWidgetFloatButton;
}

int QStyle_SE_DockWidgetTitleBarText_Type(){
	return QStyle::SE_DockWidgetTitleBarText;
}

int QStyle_SE_DockWidgetIcon_Type(){
	return QStyle::SE_DockWidgetIcon;
}

int QStyle_SE_CheckBoxLayoutItem_Type(){
	return QStyle::SE_CheckBoxLayoutItem;
}

int QStyle_SE_ComboBoxLayoutItem_Type(){
	return QStyle::SE_ComboBoxLayoutItem;
}

int QStyle_SE_DateTimeEditLayoutItem_Type(){
	return QStyle::SE_DateTimeEditLayoutItem;
}

int QStyle_SE_DialogButtonBoxLayoutItem_Type(){
	return QStyle::SE_DialogButtonBoxLayoutItem;
}

int QStyle_SE_LabelLayoutItem_Type(){
	return QStyle::SE_LabelLayoutItem;
}

int QStyle_SE_ProgressBarLayoutItem_Type(){
	return QStyle::SE_ProgressBarLayoutItem;
}

int QStyle_SE_PushButtonLayoutItem_Type(){
	return QStyle::SE_PushButtonLayoutItem;
}

int QStyle_SE_RadioButtonLayoutItem_Type(){
	return QStyle::SE_RadioButtonLayoutItem;
}

int QStyle_SE_SliderLayoutItem_Type(){
	return QStyle::SE_SliderLayoutItem;
}

int QStyle_SE_SpinBoxLayoutItem_Type(){
	return QStyle::SE_SpinBoxLayoutItem;
}

int QStyle_SE_ToolButtonLayoutItem_Type(){
	return QStyle::SE_ToolButtonLayoutItem;
}

int QStyle_SE_FrameLayoutItem_Type(){
	return QStyle::SE_FrameLayoutItem;
}

int QStyle_SE_GroupBoxLayoutItem_Type(){
	return QStyle::SE_GroupBoxLayoutItem;
}

int QStyle_SE_TabWidgetLayoutItem_Type(){
	return QStyle::SE_TabWidgetLayoutItem;
}

int QStyle_SE_ItemViewItemDecoration_Type(){
	return QStyle::SE_ItemViewItemDecoration;
}

int QStyle_SE_ItemViewItemText_Type(){
	return QStyle::SE_ItemViewItemText;
}

int QStyle_SE_ItemViewItemFocusRect_Type(){
	return QStyle::SE_ItemViewItemFocusRect;
}

int QStyle_SE_TabBarTabLeftButton_Type(){
	return QStyle::SE_TabBarTabLeftButton;
}

int QStyle_SE_TabBarTabRightButton_Type(){
	return QStyle::SE_TabBarTabRightButton;
}

int QStyle_SE_TabBarTabText_Type(){
	return QStyle::SE_TabBarTabText;
}

int QStyle_SE_ShapedFrameContents_Type(){
	return QStyle::SE_ShapedFrameContents;
}

int QStyle_SE_ToolBarHandle_Type(){
	return QStyle::SE_ToolBarHandle;
}

void QStyle_DrawItemPixmap(void* ptr, void* painter, void* rectangle, int alignment, void* pixmap){
	static_cast<MyQStyle*>(ptr)->drawItemPixmap(static_cast<QPainter*>(painter), *static_cast<QRect*>(rectangle), alignment, *static_cast<QPixmap*>(pixmap));
}

void QStyle_DrawItemPixmapDefault(void* ptr, void* painter, void* rectangle, int alignment, void* pixmap){
	static_cast<QStyle*>(ptr)->QStyle::drawItemPixmap(static_cast<QPainter*>(painter), *static_cast<QRect*>(rectangle), alignment, *static_cast<QPixmap*>(pixmap));
}

void QStyle_DrawItemText(void* ptr, void* painter, void* rectangle, int alignment, void* palette, int enabled, char* text, int textRole){
	static_cast<MyQStyle*>(ptr)->drawItemText(static_cast<QPainter*>(painter), *static_cast<QRect*>(rectangle), alignment, *static_cast<QPalette*>(palette), enabled != 0, QString(text), static_cast<QPalette::ColorRole>(textRole));
}

void QStyle_DrawItemTextDefault(void* ptr, void* painter, void* rectangle, int alignment, void* palette, int enabled, char* text, int textRole){
	static_cast<QStyle*>(ptr)->QStyle::drawItemText(static_cast<QPainter*>(painter), *static_cast<QRect*>(rectangle), alignment, *static_cast<QPalette*>(palette), enabled != 0, QString(text), static_cast<QPalette::ColorRole>(textRole));
}

void* QStyle_ItemPixmapRect(void* ptr, void* rectangle, int alignment, void* pixmap){
	return new QRect(static_cast<QRect>(static_cast<QStyle*>(ptr)->itemPixmapRect(*static_cast<QRect*>(rectangle), alignment, *static_cast<QPixmap*>(pixmap))).x(), static_cast<QRect>(static_cast<QStyle*>(ptr)->itemPixmapRect(*static_cast<QRect*>(rectangle), alignment, *static_cast<QPixmap*>(pixmap))).y(), static_cast<QRect>(static_cast<QStyle*>(ptr)->itemPixmapRect(*static_cast<QRect*>(rectangle), alignment, *static_cast<QPixmap*>(pixmap))).width(), static_cast<QRect>(static_cast<QStyle*>(ptr)->itemPixmapRect(*static_cast<QRect*>(rectangle), alignment, *static_cast<QPixmap*>(pixmap))).height());
}

void* QStyle_ItemTextRect(void* ptr, void* metrics, void* rectangle, int alignment, int enabled, char* text){
	return new QRect(static_cast<QRect>(static_cast<QStyle*>(ptr)->itemTextRect(*static_cast<QFontMetrics*>(metrics), *static_cast<QRect*>(rectangle), alignment, enabled != 0, QString(text))).x(), static_cast<QRect>(static_cast<QStyle*>(ptr)->itemTextRect(*static_cast<QFontMetrics*>(metrics), *static_cast<QRect*>(rectangle), alignment, enabled != 0, QString(text))).y(), static_cast<QRect>(static_cast<QStyle*>(ptr)->itemTextRect(*static_cast<QFontMetrics*>(metrics), *static_cast<QRect*>(rectangle), alignment, enabled != 0, QString(text))).width(), static_cast<QRect>(static_cast<QStyle*>(ptr)->itemTextRect(*static_cast<QFontMetrics*>(metrics), *static_cast<QRect*>(rectangle), alignment, enabled != 0, QString(text))).height());
}

void* QStyle_Proxy(void* ptr){
	return const_cast<QStyle*>(static_cast<QStyle*>(ptr)->proxy());
}

int QStyle_QStyle_SliderValueFromPosition(int min, int max, int position, int span, int upsideDown){
	return QStyle::sliderValueFromPosition(min, max, position, span, upsideDown != 0);
}

void* QStyle_QStyle_VisualPos(int direction, void* boundingRectangle, void* logicalPosition){
	return new QPoint(static_cast<QPoint>(QStyle::visualPos(static_cast<Qt::LayoutDirection>(direction), *static_cast<QRect*>(boundingRectangle), *static_cast<QPoint*>(logicalPosition))).x(), static_cast<QPoint>(QStyle::visualPos(static_cast<Qt::LayoutDirection>(direction), *static_cast<QRect*>(boundingRectangle), *static_cast<QPoint*>(logicalPosition))).y());
}

void* QStyle_QStyle_VisualRect(int direction, void* boundingRectangle, void* logicalRectangle){
	return new QRect(static_cast<QRect>(QStyle::visualRect(static_cast<Qt::LayoutDirection>(direction), *static_cast<QRect*>(boundingRectangle), *static_cast<QRect*>(logicalRectangle))).x(), static_cast<QRect>(QStyle::visualRect(static_cast<Qt::LayoutDirection>(direction), *static_cast<QRect*>(boundingRectangle), *static_cast<QRect*>(logicalRectangle))).y(), static_cast<QRect>(QStyle::visualRect(static_cast<Qt::LayoutDirection>(direction), *static_cast<QRect*>(boundingRectangle), *static_cast<QRect*>(logicalRectangle))).width(), static_cast<QRect>(QStyle::visualRect(static_cast<Qt::LayoutDirection>(direction), *static_cast<QRect*>(boundingRectangle), *static_cast<QRect*>(logicalRectangle))).height());
}

void* QStyle_QStyle_AlignedRect(int direction, int alignment, void* size, void* rectangle){
	return new QRect(static_cast<QRect>(QStyle::alignedRect(static_cast<Qt::LayoutDirection>(direction), static_cast<Qt::AlignmentFlag>(alignment), *static_cast<QSize*>(size), *static_cast<QRect*>(rectangle))).x(), static_cast<QRect>(QStyle::alignedRect(static_cast<Qt::LayoutDirection>(direction), static_cast<Qt::AlignmentFlag>(alignment), *static_cast<QSize*>(size), *static_cast<QRect*>(rectangle))).y(), static_cast<QRect>(QStyle::alignedRect(static_cast<Qt::LayoutDirection>(direction), static_cast<Qt::AlignmentFlag>(alignment), *static_cast<QSize*>(size), *static_cast<QRect*>(rectangle))).width(), static_cast<QRect>(QStyle::alignedRect(static_cast<Qt::LayoutDirection>(direction), static_cast<Qt::AlignmentFlag>(alignment), *static_cast<QSize*>(size), *static_cast<QRect*>(rectangle))).height());
}

int QStyle_CombinedLayoutSpacing(void* ptr, int controls1, int controls2, int orientation, void* option, void* widget){
	return static_cast<QStyle*>(ptr)->combinedLayoutSpacing(static_cast<QSizePolicy::ControlType>(controls1), static_cast<QSizePolicy::ControlType>(controls2), static_cast<Qt::Orientation>(orientation), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget));
}

void QStyle_DrawComplexControl(void* ptr, int control, void* option, void* painter, void* widget){
	static_cast<QStyle*>(ptr)->drawComplexControl(static_cast<QStyle::ComplexControl>(control), static_cast<QStyleOptionComplex*>(option), static_cast<QPainter*>(painter), static_cast<QWidget*>(widget));
}

void QStyle_DrawControl(void* ptr, int element, void* option, void* painter, void* widget){
	static_cast<QStyle*>(ptr)->drawControl(static_cast<QStyle::ControlElement>(element), static_cast<QStyleOption*>(option), static_cast<QPainter*>(painter), static_cast<QWidget*>(widget));
}

void QStyle_DrawPrimitive(void* ptr, int element, void* option, void* painter, void* widget){
	static_cast<QStyle*>(ptr)->drawPrimitive(static_cast<QStyle::PrimitiveElement>(element), static_cast<QStyleOption*>(option), static_cast<QPainter*>(painter), static_cast<QWidget*>(widget));
}

void* QStyle_GeneratedIconPixmap(void* ptr, int iconMode, void* pixmap, void* option){
	return new QPixmap(static_cast<QStyle*>(ptr)->generatedIconPixmap(static_cast<QIcon::Mode>(iconMode), *static_cast<QPixmap*>(pixmap), static_cast<QStyleOption*>(option)));
}

int QStyle_HitTestComplexControl(void* ptr, int control, void* option, void* position, void* widget){
	return static_cast<QStyle*>(ptr)->hitTestComplexControl(static_cast<QStyle::ComplexControl>(control), static_cast<QStyleOptionComplex*>(option), *static_cast<QPoint*>(position), static_cast<QWidget*>(widget));
}

int QStyle_LayoutSpacing(void* ptr, int control1, int control2, int orientation, void* option, void* widget){
	return static_cast<QStyle*>(ptr)->layoutSpacing(static_cast<QSizePolicy::ControlType>(control1), static_cast<QSizePolicy::ControlType>(control2), static_cast<Qt::Orientation>(orientation), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget));
}

int QStyle_PixelMetric(void* ptr, int metric, void* option, void* widget){
	return static_cast<QStyle*>(ptr)->pixelMetric(static_cast<QStyle::PixelMetric>(metric), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget));
}

void QStyle_Polish(void* ptr, void* widget){
	static_cast<MyQStyle*>(ptr)->polish(static_cast<QWidget*>(widget));
}

void QStyle_PolishDefault(void* ptr, void* widget){
	static_cast<QStyle*>(ptr)->QStyle::polish(static_cast<QWidget*>(widget));
}

void* QStyle_SizeFromContents(void* ptr, int ty, void* option, void* contentsSize, void* widget){
	return new QSize(static_cast<QSize>(static_cast<QStyle*>(ptr)->sizeFromContents(static_cast<QStyle::ContentsType>(ty), static_cast<QStyleOption*>(option), *static_cast<QSize*>(contentsSize), static_cast<QWidget*>(widget))).width(), static_cast<QSize>(static_cast<QStyle*>(ptr)->sizeFromContents(static_cast<QStyle::ContentsType>(ty), static_cast<QStyleOption*>(option), *static_cast<QSize*>(contentsSize), static_cast<QWidget*>(widget))).height());
}

int QStyle_QStyle_SliderPositionFromValue(int min, int max, int logicalValue, int span, int upsideDown){
	return QStyle::sliderPositionFromValue(min, max, logicalValue, span, upsideDown != 0);
}

void* QStyle_StandardIcon(void* ptr, int standardIcon, void* option, void* widget){
	return new QIcon(static_cast<QStyle*>(ptr)->standardIcon(static_cast<QStyle::StandardPixmap>(standardIcon), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget)));
}

void* QStyle_StandardPalette(void* ptr){
	return new QPalette(static_cast<QStyle*>(ptr)->standardPalette());
}

int QStyle_StyleHint(void* ptr, int hint, void* option, void* widget, void* returnData){
	return static_cast<QStyle*>(ptr)->styleHint(static_cast<QStyle::StyleHint>(hint), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget), static_cast<QStyleHintReturn*>(returnData));
}

void* QStyle_SubControlRect(void* ptr, int control, void* option, int subControl, void* widget){
	return new QRect(static_cast<QRect>(static_cast<QStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(control), static_cast<QStyleOptionComplex*>(option), static_cast<QStyle::SubControl>(subControl), static_cast<QWidget*>(widget))).x(), static_cast<QRect>(static_cast<QStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(control), static_cast<QStyleOptionComplex*>(option), static_cast<QStyle::SubControl>(subControl), static_cast<QWidget*>(widget))).y(), static_cast<QRect>(static_cast<QStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(control), static_cast<QStyleOptionComplex*>(option), static_cast<QStyle::SubControl>(subControl), static_cast<QWidget*>(widget))).width(), static_cast<QRect>(static_cast<QStyle*>(ptr)->subControlRect(static_cast<QStyle::ComplexControl>(control), static_cast<QStyleOptionComplex*>(option), static_cast<QStyle::SubControl>(subControl), static_cast<QWidget*>(widget))).height());
}

void* QStyle_SubElementRect(void* ptr, int element, void* option, void* widget){
	return new QRect(static_cast<QRect>(static_cast<QStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(element), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget))).x(), static_cast<QRect>(static_cast<QStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(element), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget))).y(), static_cast<QRect>(static_cast<QStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(element), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget))).width(), static_cast<QRect>(static_cast<QStyle*>(ptr)->subElementRect(static_cast<QStyle::SubElement>(element), static_cast<QStyleOption*>(option), static_cast<QWidget*>(widget))).height());
}

void QStyle_Unpolish(void* ptr, void* widget){
	static_cast<MyQStyle*>(ptr)->unpolish(static_cast<QWidget*>(widget));
}

void QStyle_UnpolishDefault(void* ptr, void* widget){
	static_cast<QStyle*>(ptr)->QStyle::unpolish(static_cast<QWidget*>(widget));
}

int QStyle_QStyle_VisualAlignment(int direction, int alignment){
	return QStyle::visualAlignment(static_cast<Qt::LayoutDirection>(direction), static_cast<Qt::AlignmentFlag>(alignment));
}

void QStyle_DestroyQStyle(void* ptr){
	static_cast<QStyle*>(ptr)->~QStyle();
}

void QStyle_TimerEvent(void* ptr, void* event){
	static_cast<MyQStyle*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QStyle_TimerEventDefault(void* ptr, void* event){
	static_cast<QStyle*>(ptr)->QStyle::timerEvent(static_cast<QTimerEvent*>(event));
}

void QStyle_ChildEvent(void* ptr, void* event){
	static_cast<MyQStyle*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QStyle_ChildEventDefault(void* ptr, void* event){
	static_cast<QStyle*>(ptr)->QStyle::childEvent(static_cast<QChildEvent*>(event));
}

void QStyle_CustomEvent(void* ptr, void* event){
	static_cast<MyQStyle*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QStyle_CustomEventDefault(void* ptr, void* event){
	static_cast<QStyle*>(ptr)->QStyle::customEvent(static_cast<QEvent*>(event));
}

void* QStyleFactory_QStyleFactory_Create(char* key){
	return QStyleFactory::create(QString(key));
}

char* QStyleFactory_QStyleFactory_Keys(){
	return QStyleFactory::keys().join("|").toUtf8().data();
}

int QStyleHintReturn_SH_Mask_Type(){
	return QStyleHintReturn::SH_Mask;
}

int QStyleHintReturn_SH_Variant_Type(){
	return QStyleHintReturn::SH_Variant;
}

void* QStyleHintReturn_NewQStyleHintReturn(int version, int ty){
	return new QStyleHintReturn(version, ty);
}

void* QStyleHintReturnMask_NewQStyleHintReturnMask(){
	return new QStyleHintReturnMask();
}

void QStyleHintReturnMask_DestroyQStyleHintReturnMask(void* ptr){
	static_cast<QStyleHintReturnMask*>(ptr)->~QStyleHintReturnMask();
}

void* QStyleHintReturnVariant_NewQStyleHintReturnVariant(){
	return new QStyleHintReturnVariant();
}

void QStyleHintReturnVariant_DestroyQStyleHintReturnVariant(void* ptr){
	static_cast<QStyleHintReturnVariant*>(ptr)->~QStyleHintReturnVariant();
}

int QStyleOption_SO_Slider_Type(){
	return QStyleOption::SO_Slider;
}

int QStyleOption_SO_SpinBox_Type(){
	return QStyleOption::SO_SpinBox;
}

int QStyleOption_SO_ToolButton_Type(){
	return QStyleOption::SO_ToolButton;
}

int QStyleOption_SO_ComboBox_Type(){
	return QStyleOption::SO_ComboBox;
}

int QStyleOption_SO_TitleBar_Type(){
	return QStyleOption::SO_TitleBar;
}

int QStyleOption_SO_GroupBox_Type(){
	return QStyleOption::SO_GroupBox;
}

int QStyleOption_SO_SizeGrip_Type(){
	return QStyleOption::SO_SizeGrip;
}

void* QStyleOption_NewQStyleOption2(void* other){
	return new QStyleOption(*static_cast<QStyleOption*>(other));
}

void* QStyleOption_NewQStyleOption(int version, int ty){
	return new QStyleOption(version, ty);
}

void QStyleOption_InitFrom(void* ptr, void* widget){
	static_cast<QStyleOption*>(ptr)->initFrom(static_cast<QWidget*>(widget));
}

void QStyleOption_DestroyQStyleOption(void* ptr){
	static_cast<QStyleOption*>(ptr)->~QStyleOption();
}

void* QStyleOptionButton_NewQStyleOptionButton(){
	return new QStyleOptionButton();
}

void* QStyleOptionButton_NewQStyleOptionButton2(void* other){
	return new QStyleOptionButton(*static_cast<QStyleOptionButton*>(other));
}

void* QStyleOptionComboBox_NewQStyleOptionComboBox(){
	return new QStyleOptionComboBox();
}

void* QStyleOptionComboBox_NewQStyleOptionComboBox2(void* other){
	return new QStyleOptionComboBox(*static_cast<QStyleOptionComboBox*>(other));
}

void* QStyleOptionComplex_NewQStyleOptionComplex2(void* other){
	return new QStyleOptionComplex(*static_cast<QStyleOptionComplex*>(other));
}

void* QStyleOptionComplex_NewQStyleOptionComplex(int version, int ty){
	return new QStyleOptionComplex(version, ty);
}

void* QStyleOptionDockWidget_NewQStyleOptionDockWidget(){
	return new QStyleOptionDockWidget();
}

void* QStyleOptionDockWidget_NewQStyleOptionDockWidget2(void* other){
	return new QStyleOptionDockWidget(*static_cast<QStyleOptionDockWidget*>(other));
}

void* QStyleOptionFocusRect_NewQStyleOptionFocusRect(){
	return new QStyleOptionFocusRect();
}

void* QStyleOptionFocusRect_NewQStyleOptionFocusRect2(void* other){
	return new QStyleOptionFocusRect(*static_cast<QStyleOptionFocusRect*>(other));
}

void* QStyleOptionFrame_NewQStyleOptionFrame(){
	return new QStyleOptionFrame();
}

void* QStyleOptionFrame_NewQStyleOptionFrame2(void* other){
	return new QStyleOptionFrame(*static_cast<QStyleOptionFrame*>(other));
}

void* QStyleOptionGraphicsItem_NewQStyleOptionGraphicsItem(){
	return new QStyleOptionGraphicsItem();
}

void* QStyleOptionGraphicsItem_NewQStyleOptionGraphicsItem2(void* other){
	return new QStyleOptionGraphicsItem(*static_cast<QStyleOptionGraphicsItem*>(other));
}

double QStyleOptionGraphicsItem_QStyleOptionGraphicsItem_LevelOfDetailFromTransform(void* worldTransform){
	return static_cast<double>(QStyleOptionGraphicsItem::levelOfDetailFromTransform(*static_cast<QTransform*>(worldTransform)));
}

void* QStyleOptionGroupBox_NewQStyleOptionGroupBox(){
	return new QStyleOptionGroupBox();
}

void* QStyleOptionGroupBox_NewQStyleOptionGroupBox2(void* other){
	return new QStyleOptionGroupBox(*static_cast<QStyleOptionGroupBox*>(other));
}

void* QStyleOptionHeader_NewQStyleOptionHeader(){
	return new QStyleOptionHeader();
}

void* QStyleOptionHeader_NewQStyleOptionHeader2(void* other){
	return new QStyleOptionHeader(*static_cast<QStyleOptionHeader*>(other));
}

void* QStyleOptionMenuItem_NewQStyleOptionMenuItem(){
	return new QStyleOptionMenuItem();
}

void* QStyleOptionMenuItem_NewQStyleOptionMenuItem2(void* other){
	return new QStyleOptionMenuItem(*static_cast<QStyleOptionMenuItem*>(other));
}

void* QStyleOptionProgressBar_NewQStyleOptionProgressBar(){
	return new QStyleOptionProgressBar();
}

void* QStyleOptionProgressBar_NewQStyleOptionProgressBar2(void* other){
	return new QStyleOptionProgressBar(*static_cast<QStyleOptionProgressBar*>(other));
}

void* QStyleOptionRubberBand_NewQStyleOptionRubberBand(){
	return new QStyleOptionRubberBand();
}

void* QStyleOptionRubberBand_NewQStyleOptionRubberBand2(void* other){
	return new QStyleOptionRubberBand(*static_cast<QStyleOptionRubberBand*>(other));
}

void* QStyleOptionSizeGrip_NewQStyleOptionSizeGrip(){
	return new QStyleOptionSizeGrip();
}

void* QStyleOptionSizeGrip_NewQStyleOptionSizeGrip2(void* other){
	return new QStyleOptionSizeGrip(*static_cast<QStyleOptionSizeGrip*>(other));
}

void* QStyleOptionSlider_NewQStyleOptionSlider(){
	return new QStyleOptionSlider();
}

void* QStyleOptionSlider_NewQStyleOptionSlider2(void* other){
	return new QStyleOptionSlider(*static_cast<QStyleOptionSlider*>(other));
}

void* QStyleOptionSpinBox_NewQStyleOptionSpinBox(){
	return new QStyleOptionSpinBox();
}

void* QStyleOptionSpinBox_NewQStyleOptionSpinBox2(void* other){
	return new QStyleOptionSpinBox(*static_cast<QStyleOptionSpinBox*>(other));
}

void* QStyleOptionTab_NewQStyleOptionTab(){
	return new QStyleOptionTab();
}

void* QStyleOptionTab_NewQStyleOptionTab2(void* other){
	return new QStyleOptionTab(*static_cast<QStyleOptionTab*>(other));
}

void* QStyleOptionTabBarBase_NewQStyleOptionTabBarBase(){
	return new QStyleOptionTabBarBase();
}

void* QStyleOptionTabBarBase_NewQStyleOptionTabBarBase2(void* other){
	return new QStyleOptionTabBarBase(*static_cast<QStyleOptionTabBarBase*>(other));
}

void* QStyleOptionTabWidgetFrame_NewQStyleOptionTabWidgetFrame(){
	return new QStyleOptionTabWidgetFrame();
}

void* QStyleOptionTabWidgetFrame_NewQStyleOptionTabWidgetFrame2(void* other){
	return new QStyleOptionTabWidgetFrame(*static_cast<QStyleOptionTabWidgetFrame*>(other));
}

void* QStyleOptionTitleBar_NewQStyleOptionTitleBar(){
	return new QStyleOptionTitleBar();
}

void* QStyleOptionTitleBar_NewQStyleOptionTitleBar2(void* other){
	return new QStyleOptionTitleBar(*static_cast<QStyleOptionTitleBar*>(other));
}

void* QStyleOptionToolBar_NewQStyleOptionToolBar(){
	return new QStyleOptionToolBar();
}

void* QStyleOptionToolBar_NewQStyleOptionToolBar2(void* other){
	return new QStyleOptionToolBar(*static_cast<QStyleOptionToolBar*>(other));
}

void* QStyleOptionToolBox_NewQStyleOptionToolBox(){
	return new QStyleOptionToolBox();
}

void* QStyleOptionToolBox_NewQStyleOptionToolBox2(void* other){
	return new QStyleOptionToolBox(*static_cast<QStyleOptionToolBox*>(other));
}

void* QStyleOptionToolButton_NewQStyleOptionToolButton(){
	return new QStyleOptionToolButton();
}

void* QStyleOptionToolButton_NewQStyleOptionToolButton2(void* other){
	return new QStyleOptionToolButton(*static_cast<QStyleOptionToolButton*>(other));
}

void* QStyleOptionViewItem_NewQStyleOptionViewItem(){
	return new QStyleOptionViewItem();
}

void* QStyleOptionViewItem_NewQStyleOptionViewItem2(void* other){
	return new QStyleOptionViewItem(*static_cast<QStyleOptionViewItem*>(other));
}

void* QStylePainter_NewQStylePainter(){
	return new QStylePainter();
}

void* QStylePainter_NewQStylePainter3(void* pd, void* widget){
	return new QStylePainter(static_cast<QPaintDevice*>(pd), static_cast<QWidget*>(widget));
}

void* QStylePainter_NewQStylePainter2(void* widget){
	return new QStylePainter(static_cast<QWidget*>(widget));
}

int QStylePainter_Begin2(void* ptr, void* pd, void* widget){
	return static_cast<QStylePainter*>(ptr)->begin(static_cast<QPaintDevice*>(pd), static_cast<QWidget*>(widget));
}

int QStylePainter_Begin(void* ptr, void* widget){
	return static_cast<QStylePainter*>(ptr)->begin(static_cast<QWidget*>(widget));
}

void QStylePainter_DrawComplexControl(void* ptr, int cc, void* option){
	static_cast<QStylePainter*>(ptr)->drawComplexControl(static_cast<QStyle::ComplexControl>(cc), *static_cast<QStyleOptionComplex*>(option));
}

void QStylePainter_DrawControl(void* ptr, int ce, void* option){
	static_cast<QStylePainter*>(ptr)->drawControl(static_cast<QStyle::ControlElement>(ce), *static_cast<QStyleOption*>(option));
}

void QStylePainter_DrawItemPixmap(void* ptr, void* rect, int flags, void* pixmap){
	static_cast<QStylePainter*>(ptr)->drawItemPixmap(*static_cast<QRect*>(rect), flags, *static_cast<QPixmap*>(pixmap));
}

void QStylePainter_DrawItemText(void* ptr, void* rect, int flags, void* pal, int enabled, char* text, int textRole){
	static_cast<QStylePainter*>(ptr)->drawItemText(*static_cast<QRect*>(rect), flags, *static_cast<QPalette*>(pal), enabled != 0, QString(text), static_cast<QPalette::ColorRole>(textRole));
}

void QStylePainter_DrawPrimitive(void* ptr, int pe, void* option){
	static_cast<QStylePainter*>(ptr)->drawPrimitive(static_cast<QStyle::PrimitiveElement>(pe), *static_cast<QStyleOption*>(option));
}

void* QStylePainter_Style(void* ptr){
	return static_cast<QStylePainter*>(ptr)->style();
}

void* QStylePlugin_Create(void* ptr, char* key){
	return static_cast<QStylePlugin*>(ptr)->create(QString(key));
}

void QStylePlugin_DestroyQStylePlugin(void* ptr){
	static_cast<QStylePlugin*>(ptr)->~QStylePlugin();
}

void QStylePlugin_TimerEvent(void* ptr, void* event){
	static_cast<QStylePlugin*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QStylePlugin_TimerEventDefault(void* ptr, void* event){
	static_cast<QStylePlugin*>(ptr)->QStylePlugin::timerEvent(static_cast<QTimerEvent*>(event));
}

void QStylePlugin_ChildEvent(void* ptr, void* event){
	static_cast<QStylePlugin*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QStylePlugin_ChildEventDefault(void* ptr, void* event){
	static_cast<QStylePlugin*>(ptr)->QStylePlugin::childEvent(static_cast<QChildEvent*>(event));
}

void QStylePlugin_CustomEvent(void* ptr, void* event){
	static_cast<QStylePlugin*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QStylePlugin_CustomEventDefault(void* ptr, void* event){
	static_cast<QStylePlugin*>(ptr)->QStylePlugin::customEvent(static_cast<QEvent*>(event));
}

class MyQStyledItemDelegate: public QStyledItemDelegate {
public:
	MyQStyledItemDelegate(QObject *parent) : QStyledItemDelegate(parent) {};
	void timerEvent(QTimerEvent * event) { callbackQStyledItemDelegateTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQStyledItemDelegateChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQStyledItemDelegateCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QStyledItemDelegate_EventFilter(void* ptr, void* editor, void* event){
	return static_cast<QStyledItemDelegate*>(ptr)->eventFilter(static_cast<QObject*>(editor), static_cast<QEvent*>(event));
}

void* QStyledItemDelegate_NewQStyledItemDelegate(void* parent){
	return new MyQStyledItemDelegate(static_cast<QObject*>(parent));
}

void* QStyledItemDelegate_CreateEditor(void* ptr, void* parent, void* option, void* index){
	return static_cast<QStyledItemDelegate*>(ptr)->createEditor(static_cast<QWidget*>(parent), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index));
}

char* QStyledItemDelegate_DisplayText(void* ptr, void* value, void* locale){
	return static_cast<QStyledItemDelegate*>(ptr)->displayText(*static_cast<QVariant*>(value), *static_cast<QLocale*>(locale)).toUtf8().data();
}

int QStyledItemDelegate_EditorEvent(void* ptr, void* event, void* model, void* option, void* index){
	return static_cast<QStyledItemDelegate*>(ptr)->editorEvent(static_cast<QEvent*>(event), static_cast<QAbstractItemModel*>(model), *static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index));
}

void* QStyledItemDelegate_ItemEditorFactory(void* ptr){
	return static_cast<QStyledItemDelegate*>(ptr)->itemEditorFactory();
}

void QStyledItemDelegate_SetItemEditorFactory(void* ptr, void* factory){
	static_cast<QStyledItemDelegate*>(ptr)->setItemEditorFactory(static_cast<QItemEditorFactory*>(factory));
}

void* QStyledItemDelegate_SizeHint(void* ptr, void* option, void* index){
	return new QSize(static_cast<QSize>(static_cast<QStyledItemDelegate*>(ptr)->sizeHint(*static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index))).width(), static_cast<QSize>(static_cast<QStyledItemDelegate*>(ptr)->sizeHint(*static_cast<QStyleOptionViewItem*>(option), *static_cast<QModelIndex*>(index))).height());
}

void QStyledItemDelegate_DestroyQStyledItemDelegate(void* ptr){
	static_cast<QStyledItemDelegate*>(ptr)->~QStyledItemDelegate();
}

void QStyledItemDelegate_TimerEvent(void* ptr, void* event){
	static_cast<MyQStyledItemDelegate*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QStyledItemDelegate_TimerEventDefault(void* ptr, void* event){
	static_cast<QStyledItemDelegate*>(ptr)->QStyledItemDelegate::timerEvent(static_cast<QTimerEvent*>(event));
}

void QStyledItemDelegate_ChildEvent(void* ptr, void* event){
	static_cast<MyQStyledItemDelegate*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QStyledItemDelegate_ChildEventDefault(void* ptr, void* event){
	static_cast<QStyledItemDelegate*>(ptr)->QStyledItemDelegate::childEvent(static_cast<QChildEvent*>(event));
}

void QStyledItemDelegate_CustomEvent(void* ptr, void* event){
	static_cast<MyQStyledItemDelegate*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QStyledItemDelegate_CustomEventDefault(void* ptr, void* event){
	static_cast<QStyledItemDelegate*>(ptr)->QStyledItemDelegate::customEvent(static_cast<QEvent*>(event));
}

int QSwipeGesture_HorizontalDirection(void* ptr){
	return static_cast<QSwipeGesture*>(ptr)->horizontalDirection();
}

void QSwipeGesture_SetSwipeAngle(void* ptr, double value){
	static_cast<QSwipeGesture*>(ptr)->setSwipeAngle(static_cast<double>(value));
}

double QSwipeGesture_SwipeAngle(void* ptr){
	return static_cast<double>(static_cast<QSwipeGesture*>(ptr)->swipeAngle());
}

int QSwipeGesture_VerticalDirection(void* ptr){
	return static_cast<QSwipeGesture*>(ptr)->verticalDirection();
}

void QSwipeGesture_DestroyQSwipeGesture(void* ptr){
	static_cast<QSwipeGesture*>(ptr)->~QSwipeGesture();
}

void QSwipeGesture_TimerEvent(void* ptr, void* event){
	static_cast<QSwipeGesture*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QSwipeGesture_TimerEventDefault(void* ptr, void* event){
	static_cast<QSwipeGesture*>(ptr)->QSwipeGesture::timerEvent(static_cast<QTimerEvent*>(event));
}

void QSwipeGesture_ChildEvent(void* ptr, void* event){
	static_cast<QSwipeGesture*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QSwipeGesture_ChildEventDefault(void* ptr, void* event){
	static_cast<QSwipeGesture*>(ptr)->QSwipeGesture::childEvent(static_cast<QChildEvent*>(event));
}

void QSwipeGesture_CustomEvent(void* ptr, void* event){
	static_cast<QSwipeGesture*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QSwipeGesture_CustomEventDefault(void* ptr, void* event){
	static_cast<QSwipeGesture*>(ptr)->QSwipeGesture::customEvent(static_cast<QEvent*>(event));
}

class MyQSystemTrayIcon: public QSystemTrayIcon {
public:
	MyQSystemTrayIcon(QObject *parent) : QSystemTrayIcon(parent) {};
	MyQSystemTrayIcon(const QIcon &icon, QObject *parent) : QSystemTrayIcon(icon, parent) {};
	void Signal_Activated(QSystemTrayIcon::ActivationReason reason) { callbackQSystemTrayIconActivated(this, this->objectName().toUtf8().data(), reason); };
	void Signal_MessageClicked() { callbackQSystemTrayIconMessageClicked(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQSystemTrayIconTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQSystemTrayIconChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQSystemTrayIconCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QSystemTrayIcon_Icon(void* ptr){
	return new QIcon(static_cast<QSystemTrayIcon*>(ptr)->icon());
}

int QSystemTrayIcon_IsVisible(void* ptr){
	return static_cast<QSystemTrayIcon*>(ptr)->isVisible();
}

void QSystemTrayIcon_SetIcon(void* ptr, void* icon){
	static_cast<QSystemTrayIcon*>(ptr)->setIcon(*static_cast<QIcon*>(icon));
}

void QSystemTrayIcon_SetToolTip(void* ptr, char* tip){
	static_cast<QSystemTrayIcon*>(ptr)->setToolTip(QString(tip));
}

void QSystemTrayIcon_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QSystemTrayIcon*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QSystemTrayIcon_ShowMessage(void* ptr, char* title, char* message, int icon, int millisecondsTimeoutHint){
	QMetaObject::invokeMethod(static_cast<QSystemTrayIcon*>(ptr), "showMessage", Q_ARG(QString, QString(title)), Q_ARG(QString, QString(message)), Q_ARG(QSystemTrayIcon::MessageIcon, static_cast<QSystemTrayIcon::MessageIcon>(icon)), Q_ARG(int, millisecondsTimeoutHint));
}

char* QSystemTrayIcon_ToolTip(void* ptr){
	return static_cast<QSystemTrayIcon*>(ptr)->toolTip().toUtf8().data();
}

void* QSystemTrayIcon_NewQSystemTrayIcon(void* parent){
	return new MyQSystemTrayIcon(static_cast<QObject*>(parent));
}

void* QSystemTrayIcon_NewQSystemTrayIcon2(void* icon, void* parent){
	return new MyQSystemTrayIcon(*static_cast<QIcon*>(icon), static_cast<QObject*>(parent));
}

void QSystemTrayIcon_ConnectActivated(void* ptr){
	QObject::connect(static_cast<QSystemTrayIcon*>(ptr), static_cast<void (QSystemTrayIcon::*)(QSystemTrayIcon::ActivationReason)>(&QSystemTrayIcon::activated), static_cast<MyQSystemTrayIcon*>(ptr), static_cast<void (MyQSystemTrayIcon::*)(QSystemTrayIcon::ActivationReason)>(&MyQSystemTrayIcon::Signal_Activated));;
}

void QSystemTrayIcon_DisconnectActivated(void* ptr){
	QObject::disconnect(static_cast<QSystemTrayIcon*>(ptr), static_cast<void (QSystemTrayIcon::*)(QSystemTrayIcon::ActivationReason)>(&QSystemTrayIcon::activated), static_cast<MyQSystemTrayIcon*>(ptr), static_cast<void (MyQSystemTrayIcon::*)(QSystemTrayIcon::ActivationReason)>(&MyQSystemTrayIcon::Signal_Activated));;
}

void QSystemTrayIcon_Activated(void* ptr, int reason){
	static_cast<QSystemTrayIcon*>(ptr)->activated(static_cast<QSystemTrayIcon::ActivationReason>(reason));
}

void* QSystemTrayIcon_ContextMenu(void* ptr){
	return static_cast<QSystemTrayIcon*>(ptr)->contextMenu();
}

int QSystemTrayIcon_Event(void* ptr, void* e){
	return static_cast<QSystemTrayIcon*>(ptr)->event(static_cast<QEvent*>(e));
}

void* QSystemTrayIcon_Geometry(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QSystemTrayIcon*>(ptr)->geometry()).x(), static_cast<QRect>(static_cast<QSystemTrayIcon*>(ptr)->geometry()).y(), static_cast<QRect>(static_cast<QSystemTrayIcon*>(ptr)->geometry()).width(), static_cast<QRect>(static_cast<QSystemTrayIcon*>(ptr)->geometry()).height());
}

void QSystemTrayIcon_Hide(void* ptr){
	QMetaObject::invokeMethod(static_cast<QSystemTrayIcon*>(ptr), "hide");
}

int QSystemTrayIcon_QSystemTrayIcon_IsSystemTrayAvailable(){
	return QSystemTrayIcon::isSystemTrayAvailable();
}

void QSystemTrayIcon_ConnectMessageClicked(void* ptr){
	QObject::connect(static_cast<QSystemTrayIcon*>(ptr), static_cast<void (QSystemTrayIcon::*)()>(&QSystemTrayIcon::messageClicked), static_cast<MyQSystemTrayIcon*>(ptr), static_cast<void (MyQSystemTrayIcon::*)()>(&MyQSystemTrayIcon::Signal_MessageClicked));;
}

void QSystemTrayIcon_DisconnectMessageClicked(void* ptr){
	QObject::disconnect(static_cast<QSystemTrayIcon*>(ptr), static_cast<void (QSystemTrayIcon::*)()>(&QSystemTrayIcon::messageClicked), static_cast<MyQSystemTrayIcon*>(ptr), static_cast<void (MyQSystemTrayIcon::*)()>(&MyQSystemTrayIcon::Signal_MessageClicked));;
}

void QSystemTrayIcon_MessageClicked(void* ptr){
	static_cast<QSystemTrayIcon*>(ptr)->messageClicked();
}

void QSystemTrayIcon_SetContextMenu(void* ptr, void* menu){
	static_cast<QSystemTrayIcon*>(ptr)->setContextMenu(static_cast<QMenu*>(menu));
}

void QSystemTrayIcon_Show(void* ptr){
	QMetaObject::invokeMethod(static_cast<QSystemTrayIcon*>(ptr), "show");
}

int QSystemTrayIcon_QSystemTrayIcon_SupportsMessages(){
	return QSystemTrayIcon::supportsMessages();
}

void QSystemTrayIcon_DestroyQSystemTrayIcon(void* ptr){
	static_cast<QSystemTrayIcon*>(ptr)->~QSystemTrayIcon();
}

void QSystemTrayIcon_TimerEvent(void* ptr, void* event){
	static_cast<MyQSystemTrayIcon*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QSystemTrayIcon_TimerEventDefault(void* ptr, void* event){
	static_cast<QSystemTrayIcon*>(ptr)->QSystemTrayIcon::timerEvent(static_cast<QTimerEvent*>(event));
}

void QSystemTrayIcon_ChildEvent(void* ptr, void* event){
	static_cast<MyQSystemTrayIcon*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QSystemTrayIcon_ChildEventDefault(void* ptr, void* event){
	static_cast<QSystemTrayIcon*>(ptr)->QSystemTrayIcon::childEvent(static_cast<QChildEvent*>(event));
}

void QSystemTrayIcon_CustomEvent(void* ptr, void* event){
	static_cast<MyQSystemTrayIcon*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QSystemTrayIcon_CustomEventDefault(void* ptr, void* event){
	static_cast<QSystemTrayIcon*>(ptr)->QSystemTrayIcon::customEvent(static_cast<QEvent*>(event));
}

class MyQTabBar: public QTabBar {
public:
	MyQTabBar(QWidget *parent) : QTabBar(parent) {};
	void changeEvent(QEvent * event) { callbackQTabBarChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_CurrentChanged(int index) { callbackQTabBarCurrentChanged(this, this->objectName().toUtf8().data(), index); };
	void hideEvent(QHideEvent * v) { callbackQTabBarHideEvent(this, this->objectName().toUtf8().data(), v); };
	void keyPressEvent(QKeyEvent * event) { callbackQTabBarKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQTabBarMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQTabBarMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQTabBarMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * v) { callbackQTabBarPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void resizeEvent(QResizeEvent * v) { callbackQTabBarResizeEvent(this, this->objectName().toUtf8().data(), v); };
	void showEvent(QShowEvent * v) { callbackQTabBarShowEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_TabBarClicked(int index) { callbackQTabBarTabBarClicked(this, this->objectName().toUtf8().data(), index); };
	void Signal_TabBarDoubleClicked(int index) { callbackQTabBarTabBarDoubleClicked(this, this->objectName().toUtf8().data(), index); };
	void Signal_TabCloseRequested(int index) { callbackQTabBarTabCloseRequested(this, this->objectName().toUtf8().data(), index); };
	void tabInserted(int index) { callbackQTabBarTabInserted(this, this->objectName().toUtf8().data(), index); };
	void tabLayoutChange() { callbackQTabBarTabLayoutChange(this, this->objectName().toUtf8().data()); };
	void Signal_TabMoved(int from, int to) { callbackQTabBarTabMoved(this, this->objectName().toUtf8().data(), from, to); };
	void tabRemoved(int index) { callbackQTabBarTabRemoved(this, this->objectName().toUtf8().data(), index); };
	void timerEvent(QTimerEvent * event) { callbackQTabBarTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQTabBarWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQTabBarActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQTabBarDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQTabBarDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQTabBarDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQTabBarDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQTabBarEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQTabBarFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQTabBarFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQTabBarLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQTabBarMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQTabBarSetVisible(this, this->objectName().toUtf8().data(), visible)) { QTabBar::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQTabBarCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQTabBarContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQTabBarInitPainter(const_cast<MyQTabBar*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQTabBarInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQTabBarKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQTabBarMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQTabBarTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQTabBarChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQTabBarCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QTabBar_AutoHide(void* ptr){
	return static_cast<QTabBar*>(ptr)->autoHide();
}

int QTabBar_ChangeCurrentOnDrag(void* ptr){
	return static_cast<QTabBar*>(ptr)->changeCurrentOnDrag();
}

int QTabBar_Count(void* ptr){
	return static_cast<QTabBar*>(ptr)->count();
}

int QTabBar_CurrentIndex(void* ptr){
	return static_cast<QTabBar*>(ptr)->currentIndex();
}

int QTabBar_DocumentMode(void* ptr){
	return static_cast<QTabBar*>(ptr)->documentMode();
}

int QTabBar_DrawBase(void* ptr){
	return static_cast<QTabBar*>(ptr)->drawBase();
}

int QTabBar_ElideMode(void* ptr){
	return static_cast<QTabBar*>(ptr)->elideMode();
}

int QTabBar_Expanding(void* ptr){
	return static_cast<QTabBar*>(ptr)->expanding();
}

void* QTabBar_IconSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QTabBar*>(ptr)->iconSize()).width(), static_cast<QSize>(static_cast<QTabBar*>(ptr)->iconSize()).height());
}

int QTabBar_IsMovable(void* ptr){
	return static_cast<QTabBar*>(ptr)->isMovable();
}

int QTabBar_SelectionBehaviorOnRemove(void* ptr){
	return static_cast<QTabBar*>(ptr)->selectionBehaviorOnRemove();
}

void QTabBar_SetAutoHide(void* ptr, int hide){
	static_cast<QTabBar*>(ptr)->setAutoHide(hide != 0);
}

void QTabBar_SetChangeCurrentOnDrag(void* ptr, int change){
	static_cast<QTabBar*>(ptr)->setChangeCurrentOnDrag(change != 0);
}

void QTabBar_SetCurrentIndex(void* ptr, int index){
	QMetaObject::invokeMethod(static_cast<QTabBar*>(ptr), "setCurrentIndex", Q_ARG(int, index));
}

void QTabBar_SetDocumentMode(void* ptr, int set){
	static_cast<QTabBar*>(ptr)->setDocumentMode(set != 0);
}

void QTabBar_SetDrawBase(void* ptr, int drawTheBase){
	static_cast<QTabBar*>(ptr)->setDrawBase(drawTheBase != 0);
}

void QTabBar_SetElideMode(void* ptr, int v){
	static_cast<QTabBar*>(ptr)->setElideMode(static_cast<Qt::TextElideMode>(v));
}

void QTabBar_SetExpanding(void* ptr, int enabled){
	static_cast<QTabBar*>(ptr)->setExpanding(enabled != 0);
}

void QTabBar_SetIconSize(void* ptr, void* size){
	static_cast<QTabBar*>(ptr)->setIconSize(*static_cast<QSize*>(size));
}

void QTabBar_SetMovable(void* ptr, int movable){
	static_cast<QTabBar*>(ptr)->setMovable(movable != 0);
}

void QTabBar_SetSelectionBehaviorOnRemove(void* ptr, int behavior){
	static_cast<QTabBar*>(ptr)->setSelectionBehaviorOnRemove(static_cast<QTabBar::SelectionBehavior>(behavior));
}

void QTabBar_SetShape(void* ptr, int shape){
	static_cast<QTabBar*>(ptr)->setShape(static_cast<QTabBar::Shape>(shape));
}

void QTabBar_SetTabsClosable(void* ptr, int closable){
	static_cast<QTabBar*>(ptr)->setTabsClosable(closable != 0);
}

void QTabBar_SetUsesScrollButtons(void* ptr, int useButtons){
	static_cast<QTabBar*>(ptr)->setUsesScrollButtons(useButtons != 0);
}

int QTabBar_Shape(void* ptr){
	return static_cast<QTabBar*>(ptr)->shape();
}

int QTabBar_TabsClosable(void* ptr){
	return static_cast<QTabBar*>(ptr)->tabsClosable();
}

int QTabBar_UsesScrollButtons(void* ptr){
	return static_cast<QTabBar*>(ptr)->usesScrollButtons();
}

void* QTabBar_NewQTabBar(void* parent){
	return new MyQTabBar(static_cast<QWidget*>(parent));
}

int QTabBar_AddTab2(void* ptr, void* icon, char* text){
	return static_cast<QTabBar*>(ptr)->addTab(*static_cast<QIcon*>(icon), QString(text));
}

int QTabBar_AddTab(void* ptr, char* text){
	return static_cast<QTabBar*>(ptr)->addTab(QString(text));
}

void QTabBar_ChangeEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QTabBar_ChangeEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::changeEvent(static_cast<QEvent*>(event));
}

void QTabBar_ConnectCurrentChanged(void* ptr){
	QObject::connect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int)>(&QTabBar::currentChanged), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int)>(&MyQTabBar::Signal_CurrentChanged));;
}

void QTabBar_DisconnectCurrentChanged(void* ptr){
	QObject::disconnect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int)>(&QTabBar::currentChanged), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int)>(&MyQTabBar::Signal_CurrentChanged));;
}

void QTabBar_CurrentChanged(void* ptr, int index){
	static_cast<QTabBar*>(ptr)->currentChanged(index);
}

int QTabBar_Event(void* ptr, void* event){
	return static_cast<QTabBar*>(ptr)->event(static_cast<QEvent*>(event));
}

void QTabBar_HideEvent(void* ptr, void* v){
	static_cast<MyQTabBar*>(ptr)->hideEvent(static_cast<QHideEvent*>(v));
}

void QTabBar_HideEventDefault(void* ptr, void* v){
	static_cast<QTabBar*>(ptr)->QTabBar::hideEvent(static_cast<QHideEvent*>(v));
}

int QTabBar_InsertTab2(void* ptr, int index, void* icon, char* text){
	return static_cast<QTabBar*>(ptr)->insertTab(index, *static_cast<QIcon*>(icon), QString(text));
}

int QTabBar_InsertTab(void* ptr, int index, char* text){
	return static_cast<QTabBar*>(ptr)->insertTab(index, QString(text));
}

int QTabBar_IsTabEnabled(void* ptr, int index){
	return static_cast<QTabBar*>(ptr)->isTabEnabled(index);
}

void QTabBar_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTabBar_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void* QTabBar_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QTabBar*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QTabBar*>(ptr)->minimumSizeHint()).height());
}

void* QTabBar_MinimumTabSizeHint(void* ptr, int index){
	return new QSize(static_cast<QSize>(static_cast<QTabBar*>(ptr)->minimumTabSizeHint(index)).width(), static_cast<QSize>(static_cast<QTabBar*>(ptr)->minimumTabSizeHint(index)).height());
}

void QTabBar_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTabBar_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTabBar_MousePressEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTabBar_MousePressEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTabBar_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTabBar_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTabBar_MoveTab(void* ptr, int from, int to){
	static_cast<QTabBar*>(ptr)->moveTab(from, to);
}

void QTabBar_PaintEvent(void* ptr, void* v){
	static_cast<MyQTabBar*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QTabBar_PaintEventDefault(void* ptr, void* v){
	static_cast<QTabBar*>(ptr)->QTabBar::paintEvent(static_cast<QPaintEvent*>(v));
}

void QTabBar_RemoveTab(void* ptr, int index){
	static_cast<QTabBar*>(ptr)->removeTab(index);
}

void QTabBar_ResizeEvent(void* ptr, void* v){
	static_cast<MyQTabBar*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(v));
}

void QTabBar_ResizeEventDefault(void* ptr, void* v){
	static_cast<QTabBar*>(ptr)->QTabBar::resizeEvent(static_cast<QResizeEvent*>(v));
}

void QTabBar_SetTabButton(void* ptr, int index, int position, void* widget){
	static_cast<QTabBar*>(ptr)->setTabButton(index, static_cast<QTabBar::ButtonPosition>(position), static_cast<QWidget*>(widget));
}

void QTabBar_SetTabData(void* ptr, int index, void* data){
	static_cast<QTabBar*>(ptr)->setTabData(index, *static_cast<QVariant*>(data));
}

void QTabBar_SetTabEnabled(void* ptr, int index, int enabled){
	static_cast<QTabBar*>(ptr)->setTabEnabled(index, enabled != 0);
}

void QTabBar_SetTabIcon(void* ptr, int index, void* icon){
	static_cast<QTabBar*>(ptr)->setTabIcon(index, *static_cast<QIcon*>(icon));
}

void QTabBar_SetTabText(void* ptr, int index, char* text){
	static_cast<QTabBar*>(ptr)->setTabText(index, QString(text));
}

void QTabBar_SetTabTextColor(void* ptr, int index, void* color){
	static_cast<QTabBar*>(ptr)->setTabTextColor(index, *static_cast<QColor*>(color));
}

void QTabBar_SetTabToolTip(void* ptr, int index, char* tip){
	static_cast<QTabBar*>(ptr)->setTabToolTip(index, QString(tip));
}

void QTabBar_SetTabWhatsThis(void* ptr, int index, char* text){
	static_cast<QTabBar*>(ptr)->setTabWhatsThis(index, QString(text));
}

void QTabBar_ShowEvent(void* ptr, void* v){
	static_cast<MyQTabBar*>(ptr)->showEvent(static_cast<QShowEvent*>(v));
}

void QTabBar_ShowEventDefault(void* ptr, void* v){
	static_cast<QTabBar*>(ptr)->QTabBar::showEvent(static_cast<QShowEvent*>(v));
}

void* QTabBar_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QTabBar*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QTabBar*>(ptr)->sizeHint()).height());
}

int QTabBar_TabAt(void* ptr, void* position){
	return static_cast<QTabBar*>(ptr)->tabAt(*static_cast<QPoint*>(position));
}

void QTabBar_ConnectTabBarClicked(void* ptr){
	QObject::connect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int)>(&QTabBar::tabBarClicked), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int)>(&MyQTabBar::Signal_TabBarClicked));;
}

void QTabBar_DisconnectTabBarClicked(void* ptr){
	QObject::disconnect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int)>(&QTabBar::tabBarClicked), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int)>(&MyQTabBar::Signal_TabBarClicked));;
}

void QTabBar_TabBarClicked(void* ptr, int index){
	static_cast<QTabBar*>(ptr)->tabBarClicked(index);
}

void QTabBar_ConnectTabBarDoubleClicked(void* ptr){
	QObject::connect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int)>(&QTabBar::tabBarDoubleClicked), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int)>(&MyQTabBar::Signal_TabBarDoubleClicked));;
}

void QTabBar_DisconnectTabBarDoubleClicked(void* ptr){
	QObject::disconnect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int)>(&QTabBar::tabBarDoubleClicked), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int)>(&MyQTabBar::Signal_TabBarDoubleClicked));;
}

void QTabBar_TabBarDoubleClicked(void* ptr, int index){
	static_cast<QTabBar*>(ptr)->tabBarDoubleClicked(index);
}

void* QTabBar_TabButton(void* ptr, int index, int position){
	return static_cast<QTabBar*>(ptr)->tabButton(index, static_cast<QTabBar::ButtonPosition>(position));
}

void QTabBar_ConnectTabCloseRequested(void* ptr){
	QObject::connect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int)>(&QTabBar::tabCloseRequested), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int)>(&MyQTabBar::Signal_TabCloseRequested));;
}

void QTabBar_DisconnectTabCloseRequested(void* ptr){
	QObject::disconnect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int)>(&QTabBar::tabCloseRequested), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int)>(&MyQTabBar::Signal_TabCloseRequested));;
}

void QTabBar_TabCloseRequested(void* ptr, int index){
	static_cast<QTabBar*>(ptr)->tabCloseRequested(index);
}

void* QTabBar_TabData(void* ptr, int index){
	return new QVariant(static_cast<QTabBar*>(ptr)->tabData(index));
}

void* QTabBar_TabIcon(void* ptr, int index){
	return new QIcon(static_cast<QTabBar*>(ptr)->tabIcon(index));
}

void QTabBar_TabInserted(void* ptr, int index){
	static_cast<MyQTabBar*>(ptr)->tabInserted(index);
}

void QTabBar_TabInsertedDefault(void* ptr, int index){
	static_cast<QTabBar*>(ptr)->QTabBar::tabInserted(index);
}

void QTabBar_TabLayoutChange(void* ptr){
	static_cast<MyQTabBar*>(ptr)->tabLayoutChange();
}

void QTabBar_TabLayoutChangeDefault(void* ptr){
	static_cast<QTabBar*>(ptr)->QTabBar::tabLayoutChange();
}

void QTabBar_ConnectTabMoved(void* ptr){
	QObject::connect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int, int)>(&QTabBar::tabMoved), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int, int)>(&MyQTabBar::Signal_TabMoved));;
}

void QTabBar_DisconnectTabMoved(void* ptr){
	QObject::disconnect(static_cast<QTabBar*>(ptr), static_cast<void (QTabBar::*)(int, int)>(&QTabBar::tabMoved), static_cast<MyQTabBar*>(ptr), static_cast<void (MyQTabBar::*)(int, int)>(&MyQTabBar::Signal_TabMoved));;
}

void QTabBar_TabMoved(void* ptr, int from, int to){
	static_cast<QTabBar*>(ptr)->tabMoved(from, to);
}

void* QTabBar_TabRect(void* ptr, int index){
	return new QRect(static_cast<QRect>(static_cast<QTabBar*>(ptr)->tabRect(index)).x(), static_cast<QRect>(static_cast<QTabBar*>(ptr)->tabRect(index)).y(), static_cast<QRect>(static_cast<QTabBar*>(ptr)->tabRect(index)).width(), static_cast<QRect>(static_cast<QTabBar*>(ptr)->tabRect(index)).height());
}

void QTabBar_TabRemoved(void* ptr, int index){
	static_cast<MyQTabBar*>(ptr)->tabRemoved(index);
}

void QTabBar_TabRemovedDefault(void* ptr, int index){
	static_cast<QTabBar*>(ptr)->QTabBar::tabRemoved(index);
}

void* QTabBar_TabSizeHint(void* ptr, int index){
	return new QSize(static_cast<QSize>(static_cast<QTabBar*>(ptr)->tabSizeHint(index)).width(), static_cast<QSize>(static_cast<QTabBar*>(ptr)->tabSizeHint(index)).height());
}

char* QTabBar_TabText(void* ptr, int index){
	return static_cast<QTabBar*>(ptr)->tabText(index).toUtf8().data();
}

void* QTabBar_TabTextColor(void* ptr, int index){
	return new QColor(static_cast<QTabBar*>(ptr)->tabTextColor(index));
}

char* QTabBar_TabToolTip(void* ptr, int index){
	return static_cast<QTabBar*>(ptr)->tabToolTip(index).toUtf8().data();
}

char* QTabBar_TabWhatsThis(void* ptr, int index){
	return static_cast<QTabBar*>(ptr)->tabWhatsThis(index).toUtf8().data();
}

void QTabBar_TimerEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTabBar_TimerEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTabBar_WheelEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QTabBar_WheelEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QTabBar_DestroyQTabBar(void* ptr){
	static_cast<QTabBar*>(ptr)->~QTabBar();
}

void QTabBar_ActionEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QTabBar_ActionEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::actionEvent(static_cast<QActionEvent*>(event));
}

void QTabBar_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTabBar_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTabBar_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTabBar_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTabBar_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTabBar_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTabBar_DropEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QTabBar_DropEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::dropEvent(static_cast<QDropEvent*>(event));
}

void QTabBar_EnterEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QTabBar_EnterEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::enterEvent(static_cast<QEvent*>(event));
}

void QTabBar_FocusInEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTabBar_FocusInEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTabBar_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTabBar_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTabBar_LeaveEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QTabBar_LeaveEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::leaveEvent(static_cast<QEvent*>(event));
}

void QTabBar_MoveEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QTabBar_MoveEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::moveEvent(static_cast<QMoveEvent*>(event));
}

void QTabBar_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQTabBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTabBar_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTabBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTabBar_CloseEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QTabBar_CloseEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::closeEvent(static_cast<QCloseEvent*>(event));
}

void QTabBar_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QTabBar_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QTabBar_InitPainter(void* ptr, void* painter){
	static_cast<MyQTabBar*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QTabBar_InitPainterDefault(void* ptr, void* painter){
	static_cast<QTabBar*>(ptr)->QTabBar::initPainter(static_cast<QPainter*>(painter));
}

void QTabBar_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTabBar_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTabBar_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTabBar_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTabBar_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTabBar_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTabBar_TabletEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTabBar_TabletEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTabBar_ChildEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTabBar_ChildEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::childEvent(static_cast<QChildEvent*>(event));
}

void QTabBar_CustomEvent(void* ptr, void* event){
	static_cast<MyQTabBar*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTabBar_CustomEventDefault(void* ptr, void* event){
	static_cast<QTabBar*>(ptr)->QTabBar::customEvent(static_cast<QEvent*>(event));
}

class MyQTabWidget: public QTabWidget {
public:
	MyQTabWidget(QWidget *parent) : QTabWidget(parent) {};
	void paintEvent(QPaintEvent * event) { callbackQTabWidgetPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * ev) { callbackQTabWidgetChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void Signal_CurrentChanged(int index) { callbackQTabWidgetCurrentChanged(this, this->objectName().toUtf8().data(), index); };
	void keyPressEvent(QKeyEvent * e) { callbackQTabWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void resizeEvent(QResizeEvent * e) { callbackQTabWidgetResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void showEvent(QShowEvent * v) { callbackQTabWidgetShowEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_TabBarClicked(int index) { callbackQTabWidgetTabBarClicked(this, this->objectName().toUtf8().data(), index); };
	void Signal_TabBarDoubleClicked(int index) { callbackQTabWidgetTabBarDoubleClicked(this, this->objectName().toUtf8().data(), index); };
	void Signal_TabCloseRequested(int index) { callbackQTabWidgetTabCloseRequested(this, this->objectName().toUtf8().data(), index); };
	void tabInserted(int index) { callbackQTabWidgetTabInserted(this, this->objectName().toUtf8().data(), index); };
	void tabRemoved(int index) { callbackQTabWidgetTabRemoved(this, this->objectName().toUtf8().data(), index); };
	void actionEvent(QActionEvent * event) { callbackQTabWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQTabWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQTabWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQTabWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQTabWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQTabWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQTabWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQTabWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQTabWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQTabWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQTabWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQTabWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QTabWidget::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQTabWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQTabWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQTabWidgetInitPainter(const_cast<MyQTabWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQTabWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQTabWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQTabWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQTabWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQTabWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQTabWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQTabWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQTabWidgetWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQTabWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQTabWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQTabWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QTabWidget_AddTab2(void* ptr, void* page, void* icon, char* label){
	return static_cast<QTabWidget*>(ptr)->addTab(static_cast<QWidget*>(page), *static_cast<QIcon*>(icon), QString(label));
}

int QTabWidget_AddTab(void* ptr, void* page, char* label){
	return static_cast<QTabWidget*>(ptr)->addTab(static_cast<QWidget*>(page), QString(label));
}

int QTabWidget_Count(void* ptr){
	return static_cast<QTabWidget*>(ptr)->count();
}

int QTabWidget_CurrentIndex(void* ptr){
	return static_cast<QTabWidget*>(ptr)->currentIndex();
}

int QTabWidget_DocumentMode(void* ptr){
	return static_cast<QTabWidget*>(ptr)->documentMode();
}

int QTabWidget_ElideMode(void* ptr){
	return static_cast<QTabWidget*>(ptr)->elideMode();
}

void* QTabWidget_IconSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QTabWidget*>(ptr)->iconSize()).width(), static_cast<QSize>(static_cast<QTabWidget*>(ptr)->iconSize()).height());
}

int QTabWidget_InsertTab2(void* ptr, int index, void* page, void* icon, char* label){
	return static_cast<QTabWidget*>(ptr)->insertTab(index, static_cast<QWidget*>(page), *static_cast<QIcon*>(icon), QString(label));
}

int QTabWidget_InsertTab(void* ptr, int index, void* page, char* label){
	return static_cast<QTabWidget*>(ptr)->insertTab(index, static_cast<QWidget*>(page), QString(label));
}

int QTabWidget_IsMovable(void* ptr){
	return static_cast<QTabWidget*>(ptr)->isMovable();
}

void QTabWidget_PaintEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QTabWidget_PaintEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::paintEvent(static_cast<QPaintEvent*>(event));
}

void QTabWidget_SetCornerWidget(void* ptr, void* widget, int corner){
	static_cast<QTabWidget*>(ptr)->setCornerWidget(static_cast<QWidget*>(widget), static_cast<Qt::Corner>(corner));
}

void QTabWidget_SetCurrentIndex(void* ptr, int index){
	QMetaObject::invokeMethod(static_cast<QTabWidget*>(ptr), "setCurrentIndex", Q_ARG(int, index));
}

void QTabWidget_SetDocumentMode(void* ptr, int set){
	static_cast<QTabWidget*>(ptr)->setDocumentMode(set != 0);
}

void QTabWidget_SetElideMode(void* ptr, int v){
	static_cast<QTabWidget*>(ptr)->setElideMode(static_cast<Qt::TextElideMode>(v));
}

void QTabWidget_SetIconSize(void* ptr, void* size){
	static_cast<QTabWidget*>(ptr)->setIconSize(*static_cast<QSize*>(size));
}

void QTabWidget_SetMovable(void* ptr, int movable){
	static_cast<QTabWidget*>(ptr)->setMovable(movable != 0);
}

void QTabWidget_SetTabBarAutoHide(void* ptr, int enabled){
	static_cast<QTabWidget*>(ptr)->setTabBarAutoHide(enabled != 0);
}

void QTabWidget_SetTabPosition(void* ptr, int v){
	static_cast<QTabWidget*>(ptr)->setTabPosition(static_cast<QTabWidget::TabPosition>(v));
}

void QTabWidget_SetTabShape(void* ptr, int s){
	static_cast<QTabWidget*>(ptr)->setTabShape(static_cast<QTabWidget::TabShape>(s));
}

void QTabWidget_SetTabsClosable(void* ptr, int closeable){
	static_cast<QTabWidget*>(ptr)->setTabsClosable(closeable != 0);
}

void QTabWidget_SetUsesScrollButtons(void* ptr, int useButtons){
	static_cast<QTabWidget*>(ptr)->setUsesScrollButtons(useButtons != 0);
}

int QTabWidget_TabBarAutoHide(void* ptr){
	return static_cast<QTabWidget*>(ptr)->tabBarAutoHide();
}

int QTabWidget_TabPosition(void* ptr){
	return static_cast<QTabWidget*>(ptr)->tabPosition();
}

int QTabWidget_TabShape(void* ptr){
	return static_cast<QTabWidget*>(ptr)->tabShape();
}

int QTabWidget_TabsClosable(void* ptr){
	return static_cast<QTabWidget*>(ptr)->tabsClosable();
}

int QTabWidget_UsesScrollButtons(void* ptr){
	return static_cast<QTabWidget*>(ptr)->usesScrollButtons();
}

void* QTabWidget_NewQTabWidget(void* parent){
	return new MyQTabWidget(static_cast<QWidget*>(parent));
}

void QTabWidget_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQTabWidget*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QTabWidget_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QTabWidget*>(ptr)->QTabWidget::changeEvent(static_cast<QEvent*>(ev));
}

void QTabWidget_Clear(void* ptr){
	static_cast<QTabWidget*>(ptr)->clear();
}

void* QTabWidget_CornerWidget(void* ptr, int corner){
	return static_cast<QTabWidget*>(ptr)->cornerWidget(static_cast<Qt::Corner>(corner));
}

void QTabWidget_ConnectCurrentChanged(void* ptr){
	QObject::connect(static_cast<QTabWidget*>(ptr), static_cast<void (QTabWidget::*)(int)>(&QTabWidget::currentChanged), static_cast<MyQTabWidget*>(ptr), static_cast<void (MyQTabWidget::*)(int)>(&MyQTabWidget::Signal_CurrentChanged));;
}

void QTabWidget_DisconnectCurrentChanged(void* ptr){
	QObject::disconnect(static_cast<QTabWidget*>(ptr), static_cast<void (QTabWidget::*)(int)>(&QTabWidget::currentChanged), static_cast<MyQTabWidget*>(ptr), static_cast<void (MyQTabWidget::*)(int)>(&MyQTabWidget::Signal_CurrentChanged));;
}

void QTabWidget_CurrentChanged(void* ptr, int index){
	static_cast<QTabWidget*>(ptr)->currentChanged(index);
}

void* QTabWidget_CurrentWidget(void* ptr){
	return static_cast<QTabWidget*>(ptr)->currentWidget();
}

int QTabWidget_Event(void* ptr, void* ev){
	return static_cast<QTabWidget*>(ptr)->event(static_cast<QEvent*>(ev));
}

int QTabWidget_HasHeightForWidth(void* ptr){
	return static_cast<QTabWidget*>(ptr)->hasHeightForWidth();
}

int QTabWidget_HeightForWidth(void* ptr, int width){
	return static_cast<QTabWidget*>(ptr)->heightForWidth(width);
}

int QTabWidget_IndexOf(void* ptr, void* w){
	return static_cast<QTabWidget*>(ptr)->indexOf(static_cast<QWidget*>(w));
}

int QTabWidget_IsTabEnabled(void* ptr, int index){
	return static_cast<QTabWidget*>(ptr)->isTabEnabled(index);
}

void QTabWidget_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQTabWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QTabWidget_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QTabWidget*>(ptr)->QTabWidget::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void* QTabWidget_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QTabWidget*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QTabWidget*>(ptr)->minimumSizeHint()).height());
}

void QTabWidget_RemoveTab(void* ptr, int index){
	static_cast<QTabWidget*>(ptr)->removeTab(index);
}

void QTabWidget_ResizeEvent(void* ptr, void* e){
	static_cast<MyQTabWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QTabWidget_ResizeEventDefault(void* ptr, void* e){
	static_cast<QTabWidget*>(ptr)->QTabWidget::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QTabWidget_SetCurrentWidget(void* ptr, void* widget){
	QMetaObject::invokeMethod(static_cast<QTabWidget*>(ptr), "setCurrentWidget", Q_ARG(QWidget*, static_cast<QWidget*>(widget)));
}

void QTabWidget_SetTabEnabled(void* ptr, int index, int enable){
	static_cast<QTabWidget*>(ptr)->setTabEnabled(index, enable != 0);
}

void QTabWidget_SetTabIcon(void* ptr, int index, void* icon){
	static_cast<QTabWidget*>(ptr)->setTabIcon(index, *static_cast<QIcon*>(icon));
}

void QTabWidget_SetTabText(void* ptr, int index, char* label){
	static_cast<QTabWidget*>(ptr)->setTabText(index, QString(label));
}

void QTabWidget_SetTabToolTip(void* ptr, int index, char* tip){
	static_cast<QTabWidget*>(ptr)->setTabToolTip(index, QString(tip));
}

void QTabWidget_SetTabWhatsThis(void* ptr, int index, char* text){
	static_cast<QTabWidget*>(ptr)->setTabWhatsThis(index, QString(text));
}

void QTabWidget_ShowEvent(void* ptr, void* v){
	static_cast<MyQTabWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(v));
}

void QTabWidget_ShowEventDefault(void* ptr, void* v){
	static_cast<QTabWidget*>(ptr)->QTabWidget::showEvent(static_cast<QShowEvent*>(v));
}

void* QTabWidget_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QTabWidget*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QTabWidget*>(ptr)->sizeHint()).height());
}

void* QTabWidget_TabBar(void* ptr){
	return static_cast<QTabWidget*>(ptr)->tabBar();
}

void QTabWidget_ConnectTabBarClicked(void* ptr){
	QObject::connect(static_cast<QTabWidget*>(ptr), static_cast<void (QTabWidget::*)(int)>(&QTabWidget::tabBarClicked), static_cast<MyQTabWidget*>(ptr), static_cast<void (MyQTabWidget::*)(int)>(&MyQTabWidget::Signal_TabBarClicked));;
}

void QTabWidget_DisconnectTabBarClicked(void* ptr){
	QObject::disconnect(static_cast<QTabWidget*>(ptr), static_cast<void (QTabWidget::*)(int)>(&QTabWidget::tabBarClicked), static_cast<MyQTabWidget*>(ptr), static_cast<void (MyQTabWidget::*)(int)>(&MyQTabWidget::Signal_TabBarClicked));;
}

void QTabWidget_TabBarClicked(void* ptr, int index){
	static_cast<QTabWidget*>(ptr)->tabBarClicked(index);
}

void QTabWidget_ConnectTabBarDoubleClicked(void* ptr){
	QObject::connect(static_cast<QTabWidget*>(ptr), static_cast<void (QTabWidget::*)(int)>(&QTabWidget::tabBarDoubleClicked), static_cast<MyQTabWidget*>(ptr), static_cast<void (MyQTabWidget::*)(int)>(&MyQTabWidget::Signal_TabBarDoubleClicked));;
}

void QTabWidget_DisconnectTabBarDoubleClicked(void* ptr){
	QObject::disconnect(static_cast<QTabWidget*>(ptr), static_cast<void (QTabWidget::*)(int)>(&QTabWidget::tabBarDoubleClicked), static_cast<MyQTabWidget*>(ptr), static_cast<void (MyQTabWidget::*)(int)>(&MyQTabWidget::Signal_TabBarDoubleClicked));;
}

void QTabWidget_TabBarDoubleClicked(void* ptr, int index){
	static_cast<QTabWidget*>(ptr)->tabBarDoubleClicked(index);
}

void QTabWidget_ConnectTabCloseRequested(void* ptr){
	QObject::connect(static_cast<QTabWidget*>(ptr), static_cast<void (QTabWidget::*)(int)>(&QTabWidget::tabCloseRequested), static_cast<MyQTabWidget*>(ptr), static_cast<void (MyQTabWidget::*)(int)>(&MyQTabWidget::Signal_TabCloseRequested));;
}

void QTabWidget_DisconnectTabCloseRequested(void* ptr){
	QObject::disconnect(static_cast<QTabWidget*>(ptr), static_cast<void (QTabWidget::*)(int)>(&QTabWidget::tabCloseRequested), static_cast<MyQTabWidget*>(ptr), static_cast<void (MyQTabWidget::*)(int)>(&MyQTabWidget::Signal_TabCloseRequested));;
}

void QTabWidget_TabCloseRequested(void* ptr, int index){
	static_cast<QTabWidget*>(ptr)->tabCloseRequested(index);
}

void* QTabWidget_TabIcon(void* ptr, int index){
	return new QIcon(static_cast<QTabWidget*>(ptr)->tabIcon(index));
}

void QTabWidget_TabInserted(void* ptr, int index){
	static_cast<MyQTabWidget*>(ptr)->tabInserted(index);
}

void QTabWidget_TabInsertedDefault(void* ptr, int index){
	static_cast<QTabWidget*>(ptr)->QTabWidget::tabInserted(index);
}

void QTabWidget_TabRemoved(void* ptr, int index){
	static_cast<MyQTabWidget*>(ptr)->tabRemoved(index);
}

void QTabWidget_TabRemovedDefault(void* ptr, int index){
	static_cast<QTabWidget*>(ptr)->QTabWidget::tabRemoved(index);
}

char* QTabWidget_TabText(void* ptr, int index){
	return static_cast<QTabWidget*>(ptr)->tabText(index).toUtf8().data();
}

char* QTabWidget_TabToolTip(void* ptr, int index){
	return static_cast<QTabWidget*>(ptr)->tabToolTip(index).toUtf8().data();
}

char* QTabWidget_TabWhatsThis(void* ptr, int index){
	return static_cast<QTabWidget*>(ptr)->tabWhatsThis(index).toUtf8().data();
}

void* QTabWidget_Widget(void* ptr, int index){
	return static_cast<QTabWidget*>(ptr)->widget(index);
}

void QTabWidget_DestroyQTabWidget(void* ptr){
	static_cast<QTabWidget*>(ptr)->~QTabWidget();
}

void QTabWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QTabWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QTabWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTabWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTabWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTabWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTabWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTabWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTabWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QTabWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::dropEvent(static_cast<QDropEvent*>(event));
}

void QTabWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QTabWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::enterEvent(static_cast<QEvent*>(event));
}

void QTabWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTabWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTabWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTabWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTabWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QTabWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QTabWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QTabWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::leaveEvent(static_cast<QEvent*>(event));
}

void QTabWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QTabWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void QTabWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQTabWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTabWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTabWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTabWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QTabWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QTabWidget_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QTabWidget_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QTabWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQTabWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QTabWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QTabWidget*>(ptr)->QTabWidget::initPainter(static_cast<QPainter*>(painter));
}

void QTabWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTabWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTabWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTabWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTabWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTabWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTabWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTabWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTabWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTabWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTabWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTabWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTabWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTabWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTabWidget_WheelEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QTabWidget_WheelEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QTabWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTabWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTabWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTabWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QTabWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQTabWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTabWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QTabWidget*>(ptr)->QTabWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQTableView: public QTableView {
public:
	MyQTableView(QWidget *parent) : QTableView(parent) {};
	void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags flags) { callbackQTableViewSetSelection(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), flags); };
	void paintEvent(QPaintEvent * event) { callbackQTableViewPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setModel(QAbstractItemModel * model) { callbackQTableViewSetModel(this, this->objectName().toUtf8().data(), model); };
	void setSelectionModel(QItemSelectionModel * selectionModel) { callbackQTableViewSetSelectionModel(this, this->objectName().toUtf8().data(), selectionModel); };
	void timerEvent(QTimerEvent * event) { callbackQTableViewTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void updateGeometries() { if (!callbackQTableViewUpdateGeometries(this, this->objectName().toUtf8().data())) { QTableView::updateGeometries(); }; };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQTableViewDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { if (!callbackQTableViewCloseEditor(this, this->objectName().toUtf8().data(), editor, hint)) { QTableView::closeEditor(editor, hint); }; };
	void commitData(QWidget * editor) { if (!callbackQTableViewCommitData(this, this->objectName().toUtf8().data(), editor)) { QTableView::commitData(editor); }; };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQTableViewDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQTableViewDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQTableViewDropEvent(this, this->objectName().toUtf8().data(), event); };
	void editorDestroyed(QObject * editor) { if (!callbackQTableViewEditorDestroyed(this, this->objectName().toUtf8().data(), editor)) { QTableView::editorDestroyed(editor); }; };
	void focusInEvent(QFocusEvent * event) { callbackQTableViewFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQTableViewFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQTableViewInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQTableViewKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyboardSearch(const QString & search) { callbackQTableViewKeyboardSearch(this, this->objectName().toUtf8().data(), search.toUtf8().data()); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQTableViewMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQTableViewMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQTableViewMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQTableViewMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void reset() { if (!callbackQTableViewReset(this, this->objectName().toUtf8().data())) { QTableView::reset(); }; };
	void resizeEvent(QResizeEvent * event) { callbackQTableViewResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void selectAll() { if (!callbackQTableViewSelectAll(this, this->objectName().toUtf8().data())) { QTableView::selectAll(); }; };
	void startDrag(Qt::DropActions supportedActions) { callbackQTableViewStartDrag(this, this->objectName().toUtf8().data(), supportedActions); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQTableViewContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQTableViewScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void setupViewport(QWidget * viewport) { callbackQTableViewSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQTableViewWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQTableViewChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQTableViewActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQTableViewEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQTableViewHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQTableViewLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQTableViewMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQTableViewSetVisible(this, this->objectName().toUtf8().data(), visible)) { QTableView::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQTableViewShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQTableViewCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQTableViewInitPainter(const_cast<MyQTableView*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQTableViewKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQTableViewTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQTableViewChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQTableViewCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QTableView_GridStyle(void* ptr){
	return static_cast<QTableView*>(ptr)->gridStyle();
}

int QTableView_IsCornerButtonEnabled(void* ptr){
	return static_cast<QTableView*>(ptr)->isCornerButtonEnabled();
}

int QTableView_IsSortingEnabled(void* ptr){
	return static_cast<QTableView*>(ptr)->isSortingEnabled();
}

void QTableView_SetCornerButtonEnabled(void* ptr, int enable){
	static_cast<QTableView*>(ptr)->setCornerButtonEnabled(enable != 0);
}

void QTableView_SetGridStyle(void* ptr, int style){
	static_cast<QTableView*>(ptr)->setGridStyle(static_cast<Qt::PenStyle>(style));
}

void QTableView_SetSelection(void* ptr, void* rect, int flags){
	static_cast<MyQTableView*>(ptr)->setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(flags));
}

void QTableView_SetSelectionDefault(void* ptr, void* rect, int flags){
	static_cast<QTableView*>(ptr)->QTableView::setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(flags));
}

void QTableView_SetShowGrid(void* ptr, int show){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "setShowGrid", Q_ARG(bool, show != 0));
}

void QTableView_SetSpan(void* ptr, int row, int column, int rowSpanCount, int columnSpanCount){
	static_cast<QTableView*>(ptr)->setSpan(row, column, rowSpanCount, columnSpanCount);
}

void QTableView_SetWordWrap(void* ptr, int on){
	static_cast<QTableView*>(ptr)->setWordWrap(on != 0);
}

int QTableView_ShowGrid(void* ptr){
	return static_cast<QTableView*>(ptr)->showGrid();
}

int QTableView_WordWrap(void* ptr){
	return static_cast<QTableView*>(ptr)->wordWrap();
}

void* QTableView_NewQTableView(void* parent){
	return new MyQTableView(static_cast<QWidget*>(parent));
}

void QTableView_ClearSpans(void* ptr){
	static_cast<QTableView*>(ptr)->clearSpans();
}

int QTableView_ColumnAt(void* ptr, int x){
	return static_cast<QTableView*>(ptr)->columnAt(x);
}

int QTableView_ColumnSpan(void* ptr, int row, int column){
	return static_cast<QTableView*>(ptr)->columnSpan(row, column);
}

int QTableView_ColumnViewportPosition(void* ptr, int column){
	return static_cast<QTableView*>(ptr)->columnViewportPosition(column);
}

int QTableView_ColumnWidth(void* ptr, int column){
	return static_cast<QTableView*>(ptr)->columnWidth(column);
}

void QTableView_HideColumn(void* ptr, int column){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "hideColumn", Q_ARG(int, column));
}

void QTableView_HideRow(void* ptr, int row){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "hideRow", Q_ARG(int, row));
}

void* QTableView_HorizontalHeader(void* ptr){
	return static_cast<QTableView*>(ptr)->horizontalHeader();
}

int QTableView_HorizontalOffset(void* ptr){
	return static_cast<QTableView*>(ptr)->horizontalOffset();
}

int QTableView_IsColumnHidden(void* ptr, int column){
	return static_cast<QTableView*>(ptr)->isColumnHidden(column);
}

int QTableView_IsIndexHidden(void* ptr, void* index){
	return static_cast<QTableView*>(ptr)->isIndexHidden(*static_cast<QModelIndex*>(index));
}

int QTableView_IsRowHidden(void* ptr, int row){
	return static_cast<QTableView*>(ptr)->isRowHidden(row);
}

void QTableView_PaintEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QTableView_PaintEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::paintEvent(static_cast<QPaintEvent*>(event));
}

void QTableView_ResizeColumnToContents(void* ptr, int column){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "resizeColumnToContents", Q_ARG(int, column));
}

void QTableView_ResizeColumnsToContents(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "resizeColumnsToContents");
}

void QTableView_ResizeRowToContents(void* ptr, int row){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "resizeRowToContents", Q_ARG(int, row));
}

void QTableView_ResizeRowsToContents(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "resizeRowsToContents");
}

int QTableView_RowAt(void* ptr, int y){
	return static_cast<QTableView*>(ptr)->rowAt(y);
}

int QTableView_RowHeight(void* ptr, int row){
	return static_cast<QTableView*>(ptr)->rowHeight(row);
}

int QTableView_RowSpan(void* ptr, int row, int column){
	return static_cast<QTableView*>(ptr)->rowSpan(row, column);
}

int QTableView_RowViewportPosition(void* ptr, int row){
	return static_cast<QTableView*>(ptr)->rowViewportPosition(row);
}

void QTableView_SelectColumn(void* ptr, int column){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "selectColumn", Q_ARG(int, column));
}

void QTableView_SelectRow(void* ptr, int row){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "selectRow", Q_ARG(int, row));
}

void QTableView_SetColumnHidden(void* ptr, int column, int hide){
	static_cast<QTableView*>(ptr)->setColumnHidden(column, hide != 0);
}

void QTableView_SetColumnWidth(void* ptr, int column, int width){
	static_cast<QTableView*>(ptr)->setColumnWidth(column, width);
}

void QTableView_SetHorizontalHeader(void* ptr, void* header){
	static_cast<QTableView*>(ptr)->setHorizontalHeader(static_cast<QHeaderView*>(header));
}

void QTableView_SetModel(void* ptr, void* model){
	static_cast<MyQTableView*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QTableView_SetModelDefault(void* ptr, void* model){
	static_cast<QTableView*>(ptr)->QTableView::setModel(static_cast<QAbstractItemModel*>(model));
}

void QTableView_SetRowHeight(void* ptr, int row, int height){
	static_cast<QTableView*>(ptr)->setRowHeight(row, height);
}

void QTableView_SetRowHidden(void* ptr, int row, int hide){
	static_cast<QTableView*>(ptr)->setRowHidden(row, hide != 0);
}

void QTableView_SetSelectionModel(void* ptr, void* selectionModel){
	static_cast<MyQTableView*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QTableView_SetSelectionModelDefault(void* ptr, void* selectionModel){
	static_cast<QTableView*>(ptr)->QTableView::setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QTableView_SetSortingEnabled(void* ptr, int enable){
	static_cast<QTableView*>(ptr)->setSortingEnabled(enable != 0);
}

void QTableView_SetVerticalHeader(void* ptr, void* header){
	static_cast<QTableView*>(ptr)->setVerticalHeader(static_cast<QHeaderView*>(header));
}

void QTableView_ShowColumn(void* ptr, int column){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "showColumn", Q_ARG(int, column));
}

void QTableView_ShowRow(void* ptr, int row){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "showRow", Q_ARG(int, row));
}

int QTableView_SizeHintForColumn(void* ptr, int column){
	return static_cast<QTableView*>(ptr)->sizeHintForColumn(column);
}

int QTableView_SizeHintForRow(void* ptr, int row){
	return static_cast<QTableView*>(ptr)->sizeHintForRow(row);
}

void QTableView_SortByColumn(void* ptr, int column, int order){
	static_cast<QTableView*>(ptr)->sortByColumn(column, static_cast<Qt::SortOrder>(order));
}

void QTableView_TimerEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTableView_TimerEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTableView_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTableView*>(ptr), "updateGeometries");
}

void QTableView_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "updateGeometries");
}

void* QTableView_VerticalHeader(void* ptr){
	return static_cast<QTableView*>(ptr)->verticalHeader();
}

int QTableView_VerticalOffset(void* ptr){
	return static_cast<QTableView*>(ptr)->verticalOffset();
}

void* QTableView_ViewOptions(void* ptr){
	return new QStyleOptionViewItem(static_cast<QTableView*>(ptr)->viewOptions());
}

void* QTableView_ViewportSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QTableView*>(ptr)->viewportSizeHint()).width(), static_cast<QSize>(static_cast<QTableView*>(ptr)->viewportSizeHint()).height());
}

void QTableView_DestroyQTableView(void* ptr){
	static_cast<QTableView*>(ptr)->~QTableView();
}

void QTableView_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTableView_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTableView_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<MyQTableView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QTableView_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QTableView_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQTableView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QTableView_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QTableView_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTableView_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTableView_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTableView_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTableView_DropEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QTableView_DropEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::dropEvent(static_cast<QDropEvent*>(event));
}

void QTableView_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQTableView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QTableView_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QTableView_FocusInEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTableView_FocusInEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTableView_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTableView_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTableView_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTableView_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTableView_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTableView_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTableView_KeyboardSearch(void* ptr, char* search){
	static_cast<MyQTableView*>(ptr)->keyboardSearch(QString(search));
}

void QTableView_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QTableView*>(ptr)->QTableView::keyboardSearch(QString(search));
}

void QTableView_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTableView_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTableView_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTableView_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTableView_MousePressEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTableView_MousePressEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTableView_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTableView_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTableView_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTableView*>(ptr), "reset");
}

void QTableView_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "reset");
}

void QTableView_ResizeEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTableView_ResizeEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTableView_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTableView*>(ptr), "selectAll");
}

void QTableView_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "selectAll");
}

void QTableView_StartDrag(void* ptr, int supportedActions){
	static_cast<MyQTableView*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QTableView_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QTableView*>(ptr)->QTableView::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QTableView_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQTableView*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QTableView_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QTableView*>(ptr)->QTableView::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QTableView_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQTableView*>(ptr)->scrollContentsBy(dx, dy);
}

void QTableView_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QTableView*>(ptr)->QTableView::scrollContentsBy(dx, dy);
}

void QTableView_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQTableView*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QTableView_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QTableView*>(ptr)->QTableView::setupViewport(static_cast<QWidget*>(viewport));
}

void QTableView_WheelEvent(void* ptr, void* e){
	static_cast<MyQTableView*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTableView_WheelEventDefault(void* ptr, void* e){
	static_cast<QTableView*>(ptr)->QTableView::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTableView_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQTableView*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QTableView_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QTableView*>(ptr)->QTableView::changeEvent(static_cast<QEvent*>(ev));
}

void QTableView_ActionEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QTableView_ActionEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::actionEvent(static_cast<QActionEvent*>(event));
}

void QTableView_EnterEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QTableView_EnterEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::enterEvent(static_cast<QEvent*>(event));
}

void QTableView_HideEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QTableView_HideEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::hideEvent(static_cast<QHideEvent*>(event));
}

void QTableView_LeaveEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QTableView_LeaveEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::leaveEvent(static_cast<QEvent*>(event));
}

void QTableView_MoveEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QTableView_MoveEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::moveEvent(static_cast<QMoveEvent*>(event));
}

void QTableView_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQTableView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTableView_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTableView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTableView_ShowEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QTableView_ShowEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::showEvent(static_cast<QShowEvent*>(event));
}

void QTableView_CloseEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QTableView_CloseEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::closeEvent(static_cast<QCloseEvent*>(event));
}

void QTableView_InitPainter(void* ptr, void* painter){
	static_cast<MyQTableView*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QTableView_InitPainterDefault(void* ptr, void* painter){
	static_cast<QTableView*>(ptr)->QTableView::initPainter(static_cast<QPainter*>(painter));
}

void QTableView_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTableView_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTableView_TabletEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTableView_TabletEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTableView_ChildEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTableView_ChildEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::childEvent(static_cast<QChildEvent*>(event));
}

void QTableView_CustomEvent(void* ptr, void* event){
	static_cast<MyQTableView*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTableView_CustomEventDefault(void* ptr, void* event){
	static_cast<QTableView*>(ptr)->QTableView::customEvent(static_cast<QEvent*>(event));
}

class MyQTableWidget: public QTableWidget {
public:
	MyQTableWidget(QWidget *parent) : QTableWidget(parent) {};
	MyQTableWidget(int rows, int columns, QWidget *parent) : QTableWidget(rows, columns, parent) {};
	void Signal_CellActivated(int row, int column) { callbackQTableWidgetCellActivated(this, this->objectName().toUtf8().data(), row, column); };
	void Signal_CellChanged(int row, int column) { callbackQTableWidgetCellChanged(this, this->objectName().toUtf8().data(), row, column); };
	void Signal_CellClicked(int row, int column) { callbackQTableWidgetCellClicked(this, this->objectName().toUtf8().data(), row, column); };
	void Signal_CellDoubleClicked(int row, int column) { callbackQTableWidgetCellDoubleClicked(this, this->objectName().toUtf8().data(), row, column); };
	void Signal_CellEntered(int row, int column) { callbackQTableWidgetCellEntered(this, this->objectName().toUtf8().data(), row, column); };
	void Signal_CellPressed(int row, int column) { callbackQTableWidgetCellPressed(this, this->objectName().toUtf8().data(), row, column); };
	void Signal_CurrentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn) { callbackQTableWidgetCurrentCellChanged(this, this->objectName().toUtf8().data(), currentRow, currentColumn, previousRow, previousColumn); };
	void Signal_CurrentItemChanged(QTableWidgetItem * current, QTableWidgetItem * previous) { callbackQTableWidgetCurrentItemChanged(this, this->objectName().toUtf8().data(), current, previous); };
	void dropEvent(QDropEvent * event) { callbackQTableWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_ItemActivated(QTableWidgetItem * item) { callbackQTableWidgetItemActivated(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemChanged(QTableWidgetItem * item) { callbackQTableWidgetItemChanged(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemClicked(QTableWidgetItem * item) { callbackQTableWidgetItemClicked(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemDoubleClicked(QTableWidgetItem * item) { callbackQTableWidgetItemDoubleClicked(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemEntered(QTableWidgetItem * item) { callbackQTableWidgetItemEntered(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemPressed(QTableWidgetItem * item) { callbackQTableWidgetItemPressed(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemSelectionChanged() { callbackQTableWidgetItemSelectionChanged(this, this->objectName().toUtf8().data()); };
	void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags flags) { callbackQTableWidgetSetSelection(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), flags); };
	void paintEvent(QPaintEvent * event) { callbackQTableWidgetPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setSelectionModel(QItemSelectionModel * selectionModel) { callbackQTableWidgetSetSelectionModel(this, this->objectName().toUtf8().data(), selectionModel); };
	void timerEvent(QTimerEvent * event) { callbackQTableWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void updateGeometries() { if (!callbackQTableWidgetUpdateGeometries(this, this->objectName().toUtf8().data())) { QTableWidget::updateGeometries(); }; };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQTableWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { if (!callbackQTableWidgetCloseEditor(this, this->objectName().toUtf8().data(), editor, hint)) { QTableWidget::closeEditor(editor, hint); }; };
	void commitData(QWidget * editor) { if (!callbackQTableWidgetCommitData(this, this->objectName().toUtf8().data(), editor)) { QTableWidget::commitData(editor); }; };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQTableWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQTableWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void editorDestroyed(QObject * editor) { if (!callbackQTableWidgetEditorDestroyed(this, this->objectName().toUtf8().data(), editor)) { QTableWidget::editorDestroyed(editor); }; };
	void focusInEvent(QFocusEvent * event) { callbackQTableWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQTableWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQTableWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQTableWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyboardSearch(const QString & search) { callbackQTableWidgetKeyboardSearch(this, this->objectName().toUtf8().data(), search.toUtf8().data()); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQTableWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQTableWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQTableWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQTableWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void reset() { if (!callbackQTableWidgetReset(this, this->objectName().toUtf8().data())) { QTableWidget::reset(); }; };
	void resizeEvent(QResizeEvent * event) { callbackQTableWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void selectAll() { if (!callbackQTableWidgetSelectAll(this, this->objectName().toUtf8().data())) { QTableWidget::selectAll(); }; };
	void startDrag(Qt::DropActions supportedActions) { callbackQTableWidgetStartDrag(this, this->objectName().toUtf8().data(), supportedActions); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQTableWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQTableWidgetScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void setupViewport(QWidget * viewport) { callbackQTableWidgetSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQTableWidgetWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQTableWidgetChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQTableWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQTableWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQTableWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQTableWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQTableWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQTableWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QTableWidget::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQTableWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQTableWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQTableWidgetInitPainter(const_cast<MyQTableWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQTableWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQTableWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQTableWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQTableWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QTableWidget_ItemAt(void* ptr, void* point){
	return static_cast<QTableWidget*>(ptr)->itemAt(*static_cast<QPoint*>(point));
}

void* QTableWidget_NewQTableWidget(void* parent){
	return new MyQTableWidget(static_cast<QWidget*>(parent));
}

void* QTableWidget_NewQTableWidget2(int rows, int columns, void* parent){
	return new MyQTableWidget(rows, columns, static_cast<QWidget*>(parent));
}

void QTableWidget_ConnectCellActivated(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellActivated), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellActivated));;
}

void QTableWidget_DisconnectCellActivated(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellActivated), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellActivated));;
}

void QTableWidget_CellActivated(void* ptr, int row, int column){
	static_cast<QTableWidget*>(ptr)->cellActivated(row, column);
}

void QTableWidget_ConnectCellChanged(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellChanged));;
}

void QTableWidget_DisconnectCellChanged(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellChanged));;
}

void QTableWidget_CellChanged(void* ptr, int row, int column){
	static_cast<QTableWidget*>(ptr)->cellChanged(row, column);
}

void QTableWidget_ConnectCellClicked(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellClicked), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellClicked));;
}

void QTableWidget_DisconnectCellClicked(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellClicked), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellClicked));;
}

void QTableWidget_CellClicked(void* ptr, int row, int column){
	static_cast<QTableWidget*>(ptr)->cellClicked(row, column);
}

void QTableWidget_ConnectCellDoubleClicked(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellDoubleClicked), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellDoubleClicked));;
}

void QTableWidget_DisconnectCellDoubleClicked(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellDoubleClicked), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellDoubleClicked));;
}

void QTableWidget_CellDoubleClicked(void* ptr, int row, int column){
	static_cast<QTableWidget*>(ptr)->cellDoubleClicked(row, column);
}

void QTableWidget_ConnectCellEntered(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellEntered), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellEntered));;
}

void QTableWidget_DisconnectCellEntered(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellEntered), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellEntered));;
}

void QTableWidget_CellEntered(void* ptr, int row, int column){
	static_cast<QTableWidget*>(ptr)->cellEntered(row, column);
}

void QTableWidget_ConnectCellPressed(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellPressed), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellPressed));;
}

void QTableWidget_DisconnectCellPressed(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int)>(&QTableWidget::cellPressed), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int)>(&MyQTableWidget::Signal_CellPressed));;
}

void QTableWidget_CellPressed(void* ptr, int row, int column){
	static_cast<QTableWidget*>(ptr)->cellPressed(row, column);
}

void* QTableWidget_CellWidget(void* ptr, int row, int column){
	return static_cast<QTableWidget*>(ptr)->cellWidget(row, column);
}

void QTableWidget_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "clear");
}

void QTableWidget_ClearContents(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "clearContents");
}

void QTableWidget_ClosePersistentEditor(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->closePersistentEditor(static_cast<QTableWidgetItem*>(item));
}

int QTableWidget_Column(void* ptr, void* item){
	return static_cast<QTableWidget*>(ptr)->column(static_cast<QTableWidgetItem*>(item));
}

int QTableWidget_ColumnCount(void* ptr){
	return static_cast<QTableWidget*>(ptr)->columnCount();
}

void QTableWidget_ConnectCurrentCellChanged(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int, int, int)>(&QTableWidget::currentCellChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int, int, int)>(&MyQTableWidget::Signal_CurrentCellChanged));;
}

void QTableWidget_DisconnectCurrentCellChanged(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(int, int, int, int)>(&QTableWidget::currentCellChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(int, int, int, int)>(&MyQTableWidget::Signal_CurrentCellChanged));;
}

void QTableWidget_CurrentCellChanged(void* ptr, int currentRow, int currentColumn, int previousRow, int previousColumn){
	static_cast<QTableWidget*>(ptr)->currentCellChanged(currentRow, currentColumn, previousRow, previousColumn);
}

int QTableWidget_CurrentColumn(void* ptr){
	return static_cast<QTableWidget*>(ptr)->currentColumn();
}

void* QTableWidget_CurrentItem(void* ptr){
	return static_cast<QTableWidget*>(ptr)->currentItem();
}

void QTableWidget_ConnectCurrentItemChanged(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *, QTableWidgetItem *)>(&QTableWidget::currentItemChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *, QTableWidgetItem *)>(&MyQTableWidget::Signal_CurrentItemChanged));;
}

void QTableWidget_DisconnectCurrentItemChanged(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *, QTableWidgetItem *)>(&QTableWidget::currentItemChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *, QTableWidgetItem *)>(&MyQTableWidget::Signal_CurrentItemChanged));;
}

void QTableWidget_CurrentItemChanged(void* ptr, void* current, void* previous){
	static_cast<QTableWidget*>(ptr)->currentItemChanged(static_cast<QTableWidgetItem*>(current), static_cast<QTableWidgetItem*>(previous));
}

int QTableWidget_CurrentRow(void* ptr){
	return static_cast<QTableWidget*>(ptr)->currentRow();
}

void QTableWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QTableWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::dropEvent(static_cast<QDropEvent*>(event));
}

int QTableWidget_DropMimeData(void* ptr, int row, int column, void* data, int action){
	return static_cast<QTableWidget*>(ptr)->dropMimeData(row, column, static_cast<QMimeData*>(data), static_cast<Qt::DropAction>(action));
}

void QTableWidget_EditItem(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->editItem(static_cast<QTableWidgetItem*>(item));
}

int QTableWidget_Event(void* ptr, void* e){
	return static_cast<QTableWidget*>(ptr)->event(static_cast<QEvent*>(e));
}

void* QTableWidget_HorizontalHeaderItem(void* ptr, int column){
	return static_cast<QTableWidget*>(ptr)->horizontalHeaderItem(column);
}

void QTableWidget_InsertColumn(void* ptr, int column){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "insertColumn", Q_ARG(int, column));
}

void QTableWidget_InsertRow(void* ptr, int row){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "insertRow", Q_ARG(int, row));
}

void* QTableWidget_Item(void* ptr, int row, int column){
	return static_cast<QTableWidget*>(ptr)->item(row, column);
}

void QTableWidget_ConnectItemActivated(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemActivated), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemActivated));;
}

void QTableWidget_DisconnectItemActivated(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemActivated), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemActivated));;
}

void QTableWidget_ItemActivated(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->itemActivated(static_cast<QTableWidgetItem*>(item));
}

void* QTableWidget_ItemAt2(void* ptr, int ax, int ay){
	return static_cast<QTableWidget*>(ptr)->itemAt(ax, ay);
}

void QTableWidget_ConnectItemChanged(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemChanged));;
}

void QTableWidget_DisconnectItemChanged(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemChanged));;
}

void QTableWidget_ItemChanged(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->itemChanged(static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_ConnectItemClicked(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemClicked), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemClicked));;
}

void QTableWidget_DisconnectItemClicked(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemClicked), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemClicked));;
}

void QTableWidget_ItemClicked(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->itemClicked(static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_ConnectItemDoubleClicked(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemDoubleClicked), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemDoubleClicked));;
}

void QTableWidget_DisconnectItemDoubleClicked(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemDoubleClicked), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemDoubleClicked));;
}

void QTableWidget_ItemDoubleClicked(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->itemDoubleClicked(static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_ConnectItemEntered(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemEntered), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemEntered));;
}

void QTableWidget_DisconnectItemEntered(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemEntered), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemEntered));;
}

void QTableWidget_ItemEntered(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->itemEntered(static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_ConnectItemPressed(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemPressed), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemPressed));;
}

void QTableWidget_DisconnectItemPressed(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)(QTableWidgetItem *)>(&QTableWidget::itemPressed), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)(QTableWidgetItem *)>(&MyQTableWidget::Signal_ItemPressed));;
}

void QTableWidget_ItemPressed(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->itemPressed(static_cast<QTableWidgetItem*>(item));
}

void* QTableWidget_ItemPrototype(void* ptr){
	return const_cast<QTableWidgetItem*>(static_cast<QTableWidget*>(ptr)->itemPrototype());
}

void QTableWidget_ConnectItemSelectionChanged(void* ptr){
	QObject::connect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)()>(&QTableWidget::itemSelectionChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)()>(&MyQTableWidget::Signal_ItemSelectionChanged));;
}

void QTableWidget_DisconnectItemSelectionChanged(void* ptr){
	QObject::disconnect(static_cast<QTableWidget*>(ptr), static_cast<void (QTableWidget::*)()>(&QTableWidget::itemSelectionChanged), static_cast<MyQTableWidget*>(ptr), static_cast<void (MyQTableWidget::*)()>(&MyQTableWidget::Signal_ItemSelectionChanged));;
}

void QTableWidget_ItemSelectionChanged(void* ptr){
	static_cast<QTableWidget*>(ptr)->itemSelectionChanged();
}

char* QTableWidget_MimeTypes(void* ptr){
	return static_cast<QTableWidget*>(ptr)->mimeTypes().join("|").toUtf8().data();
}

void QTableWidget_OpenPersistentEditor(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->openPersistentEditor(static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_RemoveCellWidget(void* ptr, int row, int column){
	static_cast<QTableWidget*>(ptr)->removeCellWidget(row, column);
}

void QTableWidget_RemoveColumn(void* ptr, int column){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "removeColumn", Q_ARG(int, column));
}

void QTableWidget_RemoveRow(void* ptr, int row){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "removeRow", Q_ARG(int, row));
}

int QTableWidget_Row(void* ptr, void* item){
	return static_cast<QTableWidget*>(ptr)->row(static_cast<QTableWidgetItem*>(item));
}

int QTableWidget_RowCount(void* ptr){
	return static_cast<QTableWidget*>(ptr)->rowCount();
}

void QTableWidget_ScrollToItem(void* ptr, void* item, int hint){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "scrollToItem", Q_ARG(QTableWidgetItem*, static_cast<QTableWidgetItem*>(item)), Q_ARG(QAbstractItemView::ScrollHint, static_cast<QAbstractItemView::ScrollHint>(hint)));
}

void QTableWidget_SetCellWidget(void* ptr, int row, int column, void* widget){
	static_cast<QTableWidget*>(ptr)->setCellWidget(row, column, static_cast<QWidget*>(widget));
}

void QTableWidget_SetColumnCount(void* ptr, int columns){
	static_cast<QTableWidget*>(ptr)->setColumnCount(columns);
}

void QTableWidget_SetCurrentCell(void* ptr, int row, int column){
	static_cast<QTableWidget*>(ptr)->setCurrentCell(row, column);
}

void QTableWidget_SetCurrentCell2(void* ptr, int row, int column, int command){
	static_cast<QTableWidget*>(ptr)->setCurrentCell(row, column, static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QTableWidget_SetCurrentItem(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->setCurrentItem(static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_SetCurrentItem2(void* ptr, void* item, int command){
	static_cast<QTableWidget*>(ptr)->setCurrentItem(static_cast<QTableWidgetItem*>(item), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QTableWidget_SetHorizontalHeaderItem(void* ptr, int column, void* item){
	static_cast<QTableWidget*>(ptr)->setHorizontalHeaderItem(column, static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_SetHorizontalHeaderLabels(void* ptr, char* labels){
	static_cast<QTableWidget*>(ptr)->setHorizontalHeaderLabels(QString(labels).split("|", QString::SkipEmptyParts));
}

void QTableWidget_SetItem(void* ptr, int row, int column, void* item){
	static_cast<QTableWidget*>(ptr)->setItem(row, column, static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_SetItemPrototype(void* ptr, void* item){
	static_cast<QTableWidget*>(ptr)->setItemPrototype(static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_SetRangeSelected(void* ptr, void* ran, int sele){
	static_cast<QTableWidget*>(ptr)->setRangeSelected(*static_cast<QTableWidgetSelectionRange*>(ran), sele != 0);
}

void QTableWidget_SetRowCount(void* ptr, int rows){
	static_cast<QTableWidget*>(ptr)->setRowCount(rows);
}

void QTableWidget_SetVerticalHeaderItem(void* ptr, int row, void* item){
	static_cast<QTableWidget*>(ptr)->setVerticalHeaderItem(row, static_cast<QTableWidgetItem*>(item));
}

void QTableWidget_SetVerticalHeaderLabels(void* ptr, char* labels){
	static_cast<QTableWidget*>(ptr)->setVerticalHeaderLabels(QString(labels).split("|", QString::SkipEmptyParts));
}

void QTableWidget_SortItems(void* ptr, int column, int order){
	static_cast<QTableWidget*>(ptr)->sortItems(column, static_cast<Qt::SortOrder>(order));
}

int QTableWidget_SupportedDropActions(void* ptr){
	return static_cast<QTableWidget*>(ptr)->supportedDropActions();
}

void* QTableWidget_TakeHorizontalHeaderItem(void* ptr, int column){
	return static_cast<QTableWidget*>(ptr)->takeHorizontalHeaderItem(column);
}

void* QTableWidget_TakeItem(void* ptr, int row, int column){
	return static_cast<QTableWidget*>(ptr)->takeItem(row, column);
}

void* QTableWidget_TakeVerticalHeaderItem(void* ptr, int row){
	return static_cast<QTableWidget*>(ptr)->takeVerticalHeaderItem(row);
}

void* QTableWidget_VerticalHeaderItem(void* ptr, int row){
	return static_cast<QTableWidget*>(ptr)->verticalHeaderItem(row);
}

int QTableWidget_VisualColumn(void* ptr, int logicalColumn){
	return static_cast<QTableWidget*>(ptr)->visualColumn(logicalColumn);
}

void* QTableWidget_VisualItemRect(void* ptr, void* item){
	return new QRect(static_cast<QRect>(static_cast<QTableWidget*>(ptr)->visualItemRect(static_cast<QTableWidgetItem*>(item))).x(), static_cast<QRect>(static_cast<QTableWidget*>(ptr)->visualItemRect(static_cast<QTableWidgetItem*>(item))).y(), static_cast<QRect>(static_cast<QTableWidget*>(ptr)->visualItemRect(static_cast<QTableWidgetItem*>(item))).width(), static_cast<QRect>(static_cast<QTableWidget*>(ptr)->visualItemRect(static_cast<QTableWidgetItem*>(item))).height());
}

int QTableWidget_VisualRow(void* ptr, int logicalRow){
	return static_cast<QTableWidget*>(ptr)->visualRow(logicalRow);
}

void QTableWidget_DestroyQTableWidget(void* ptr){
	static_cast<QTableWidget*>(ptr)->~QTableWidget();
}

void QTableWidget_SetSelection(void* ptr, void* rect, int flags){
	static_cast<MyQTableWidget*>(ptr)->setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(flags));
}

void QTableWidget_SetSelectionDefault(void* ptr, void* rect, int flags){
	static_cast<QTableWidget*>(ptr)->QTableWidget::setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(flags));
}

void QTableWidget_PaintEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QTableWidget_PaintEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::paintEvent(static_cast<QPaintEvent*>(event));
}

void QTableWidget_SetSelectionModel(void* ptr, void* selectionModel){
	static_cast<MyQTableWidget*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QTableWidget_SetSelectionModelDefault(void* ptr, void* selectionModel){
	static_cast<QTableWidget*>(ptr)->QTableWidget::setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QTableWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTableWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTableWidget_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTableWidget*>(ptr), "updateGeometries");
}

void QTableWidget_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "updateGeometries");
}

void QTableWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTableWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTableWidget_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<MyQTableWidget*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QTableWidget_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QTableWidget_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQTableWidget*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QTableWidget_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QTableWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTableWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTableWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTableWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTableWidget_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQTableWidget*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QTableWidget_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QTableWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTableWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTableWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTableWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTableWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTableWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTableWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTableWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTableWidget_KeyboardSearch(void* ptr, char* search){
	static_cast<MyQTableWidget*>(ptr)->keyboardSearch(QString(search));
}

void QTableWidget_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QTableWidget*>(ptr)->QTableWidget::keyboardSearch(QString(search));
}

void QTableWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTableWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTableWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTableWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTableWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTableWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTableWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTableWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTableWidget_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTableWidget*>(ptr), "reset");
}

void QTableWidget_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "reset");
}

void QTableWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTableWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTableWidget_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTableWidget*>(ptr), "selectAll");
}

void QTableWidget_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "selectAll");
}

void QTableWidget_StartDrag(void* ptr, int supportedActions){
	static_cast<MyQTableWidget*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QTableWidget_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QTableWidget*>(ptr)->QTableWidget::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QTableWidget_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQTableWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QTableWidget_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QTableWidget*>(ptr)->QTableWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QTableWidget_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQTableWidget*>(ptr)->scrollContentsBy(dx, dy);
}

void QTableWidget_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QTableWidget*>(ptr)->QTableWidget::scrollContentsBy(dx, dy);
}

void QTableWidget_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQTableWidget*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QTableWidget_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QTableWidget*>(ptr)->QTableWidget::setupViewport(static_cast<QWidget*>(viewport));
}

void QTableWidget_WheelEvent(void* ptr, void* e){
	static_cast<MyQTableWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTableWidget_WheelEventDefault(void* ptr, void* e){
	static_cast<QTableWidget*>(ptr)->QTableWidget::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTableWidget_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQTableWidget*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QTableWidget_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QTableWidget*>(ptr)->QTableWidget::changeEvent(static_cast<QEvent*>(ev));
}

void QTableWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QTableWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QTableWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QTableWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::enterEvent(static_cast<QEvent*>(event));
}

void QTableWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QTableWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QTableWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QTableWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::leaveEvent(static_cast<QEvent*>(event));
}

void QTableWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QTableWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void QTableWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQTableWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTableWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTableWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTableWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QTableWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::showEvent(static_cast<QShowEvent*>(event));
}

void QTableWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QTableWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QTableWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQTableWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QTableWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QTableWidget*>(ptr)->QTableWidget::initPainter(static_cast<QPainter*>(painter));
}

void QTableWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTableWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTableWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTableWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTableWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTableWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QTableWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQTableWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTableWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QTableWidget*>(ptr)->QTableWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQTableWidgetItem: public QTableWidgetItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQTableWidgetItem(const QIcon &icon, const QString &text, int type) : QTableWidgetItem(icon, text, type) {};
	MyQTableWidgetItem(const QString &text, int type) : QTableWidgetItem(text, type) {};
	MyQTableWidgetItem(const QTableWidgetItem &other) : QTableWidgetItem(other) {};
	MyQTableWidgetItem(int type) : QTableWidgetItem(type) {};
	void setData(int role, const QVariant & value) { callbackQTableWidgetItemSetData(this, this->objectNameAbs().toUtf8().data(), role, new QVariant(value)); };
};

void QTableWidgetItem_SetFlags(void* ptr, int flags){
	static_cast<QTableWidgetItem*>(ptr)->setFlags(static_cast<Qt::ItemFlag>(flags));
}

void* QTableWidgetItem_NewQTableWidgetItem3(void* icon, char* text, int ty){
	return new MyQTableWidgetItem(*static_cast<QIcon*>(icon), QString(text), ty);
}

void* QTableWidgetItem_NewQTableWidgetItem2(char* text, int ty){
	return new MyQTableWidgetItem(QString(text), ty);
}

void* QTableWidgetItem_NewQTableWidgetItem4(void* other){
	return new MyQTableWidgetItem(*static_cast<QTableWidgetItem*>(other));
}

void* QTableWidgetItem_NewQTableWidgetItem(int ty){
	return new MyQTableWidgetItem(ty);
}

void* QTableWidgetItem_Background(void* ptr){
	return new QBrush(static_cast<QTableWidgetItem*>(ptr)->background());
}

int QTableWidgetItem_CheckState(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->checkState();
}

void* QTableWidgetItem_Clone(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->clone();
}

int QTableWidgetItem_Column(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->column();
}

void* QTableWidgetItem_Data(void* ptr, int role){
	return new QVariant(static_cast<QTableWidgetItem*>(ptr)->data(role));
}

int QTableWidgetItem_Flags(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->flags();
}

void* QTableWidgetItem_Font(void* ptr){
	return new QFont(static_cast<QTableWidgetItem*>(ptr)->font());
}

void* QTableWidgetItem_Foreground(void* ptr){
	return new QBrush(static_cast<QTableWidgetItem*>(ptr)->foreground());
}

void* QTableWidgetItem_Icon(void* ptr){
	return new QIcon(static_cast<QTableWidgetItem*>(ptr)->icon());
}

int QTableWidgetItem_IsSelected(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->isSelected();
}

int QTableWidgetItem_Row(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->row();
}

void QTableWidgetItem_SetBackground(void* ptr, void* brush){
	static_cast<QTableWidgetItem*>(ptr)->setBackground(*static_cast<QBrush*>(brush));
}

void QTableWidgetItem_SetCheckState(void* ptr, int state){
	static_cast<QTableWidgetItem*>(ptr)->setCheckState(static_cast<Qt::CheckState>(state));
}

void QTableWidgetItem_SetData(void* ptr, int role, void* value){
	static_cast<MyQTableWidgetItem*>(ptr)->setData(role, *static_cast<QVariant*>(value));
}

void QTableWidgetItem_SetDataDefault(void* ptr, int role, void* value){
	static_cast<QTableWidgetItem*>(ptr)->QTableWidgetItem::setData(role, *static_cast<QVariant*>(value));
}

void QTableWidgetItem_SetFont(void* ptr, void* font){
	static_cast<QTableWidgetItem*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QTableWidgetItem_SetForeground(void* ptr, void* brush){
	static_cast<QTableWidgetItem*>(ptr)->setForeground(*static_cast<QBrush*>(brush));
}

void QTableWidgetItem_SetIcon(void* ptr, void* icon){
	static_cast<QTableWidgetItem*>(ptr)->setIcon(*static_cast<QIcon*>(icon));
}

void QTableWidgetItem_SetSelected(void* ptr, int sele){
	static_cast<QTableWidgetItem*>(ptr)->setSelected(sele != 0);
}

void QTableWidgetItem_SetSizeHint(void* ptr, void* size){
	static_cast<QTableWidgetItem*>(ptr)->setSizeHint(*static_cast<QSize*>(size));
}

void QTableWidgetItem_SetStatusTip(void* ptr, char* statusTip){
	static_cast<QTableWidgetItem*>(ptr)->setStatusTip(QString(statusTip));
}

void QTableWidgetItem_SetText(void* ptr, char* text){
	static_cast<QTableWidgetItem*>(ptr)->setText(QString(text));
}

void QTableWidgetItem_SetTextAlignment(void* ptr, int alignment){
	static_cast<QTableWidgetItem*>(ptr)->setTextAlignment(alignment);
}

void QTableWidgetItem_SetToolTip(void* ptr, char* toolTip){
	static_cast<QTableWidgetItem*>(ptr)->setToolTip(QString(toolTip));
}

void QTableWidgetItem_SetWhatsThis(void* ptr, char* whatsThis){
	static_cast<QTableWidgetItem*>(ptr)->setWhatsThis(QString(whatsThis));
}

void* QTableWidgetItem_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QTableWidgetItem*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QTableWidgetItem*>(ptr)->sizeHint()).height());
}

char* QTableWidgetItem_StatusTip(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->statusTip().toUtf8().data();
}

void* QTableWidgetItem_TableWidget(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->tableWidget();
}

char* QTableWidgetItem_Text(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->text().toUtf8().data();
}

int QTableWidgetItem_TextAlignment(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->textAlignment();
}

char* QTableWidgetItem_ToolTip(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->toolTip().toUtf8().data();
}

int QTableWidgetItem_Type(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->type();
}

char* QTableWidgetItem_WhatsThis(void* ptr){
	return static_cast<QTableWidgetItem*>(ptr)->whatsThis().toUtf8().data();
}

void QTableWidgetItem_DestroyQTableWidgetItem(void* ptr){
	static_cast<QTableWidgetItem*>(ptr)->~QTableWidgetItem();
}

char* QTableWidgetItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQTableWidgetItem*>(static_cast<QTableWidgetItem*>(ptr))) {
		return static_cast<MyQTableWidgetItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QTableWidgetItem_BASE").toUtf8().data();
}

void QTableWidgetItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQTableWidgetItem*>(static_cast<QTableWidgetItem*>(ptr))) {
		static_cast<MyQTableWidgetItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

void* QTableWidgetSelectionRange_NewQTableWidgetSelectionRange(){
	return new QTableWidgetSelectionRange();
}

void* QTableWidgetSelectionRange_NewQTableWidgetSelectionRange3(void* other){
	return new QTableWidgetSelectionRange(*static_cast<QTableWidgetSelectionRange*>(other));
}

void* QTableWidgetSelectionRange_NewQTableWidgetSelectionRange2(int top, int left, int bottom, int right){
	return new QTableWidgetSelectionRange(top, left, bottom, right);
}

int QTableWidgetSelectionRange_BottomRow(void* ptr){
	return static_cast<QTableWidgetSelectionRange*>(ptr)->bottomRow();
}

int QTableWidgetSelectionRange_ColumnCount(void* ptr){
	return static_cast<QTableWidgetSelectionRange*>(ptr)->columnCount();
}

int QTableWidgetSelectionRange_LeftColumn(void* ptr){
	return static_cast<QTableWidgetSelectionRange*>(ptr)->leftColumn();
}

int QTableWidgetSelectionRange_RightColumn(void* ptr){
	return static_cast<QTableWidgetSelectionRange*>(ptr)->rightColumn();
}

int QTableWidgetSelectionRange_RowCount(void* ptr){
	return static_cast<QTableWidgetSelectionRange*>(ptr)->rowCount();
}

int QTableWidgetSelectionRange_TopRow(void* ptr){
	return static_cast<QTableWidgetSelectionRange*>(ptr)->topRow();
}

void QTableWidgetSelectionRange_DestroyQTableWidgetSelectionRange(void* ptr){
	static_cast<QTableWidgetSelectionRange*>(ptr)->~QTableWidgetSelectionRange();
}

void QTapAndHoldGesture_SetPosition(void* ptr, void* pos){
	static_cast<QTapAndHoldGesture*>(ptr)->setPosition(*static_cast<QPointF*>(pos));
}

void QTapAndHoldGesture_QTapAndHoldGesture_SetTimeout(int msecs){
	QTapAndHoldGesture::setTimeout(msecs);
}

int QTapAndHoldGesture_QTapAndHoldGesture_Timeout(){
	return QTapAndHoldGesture::timeout();
}

void QTapAndHoldGesture_DestroyQTapAndHoldGesture(void* ptr){
	static_cast<QTapAndHoldGesture*>(ptr)->~QTapAndHoldGesture();
}

void QTapAndHoldGesture_TimerEvent(void* ptr, void* event){
	static_cast<QTapAndHoldGesture*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTapAndHoldGesture_TimerEventDefault(void* ptr, void* event){
	static_cast<QTapAndHoldGesture*>(ptr)->QTapAndHoldGesture::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTapAndHoldGesture_ChildEvent(void* ptr, void* event){
	static_cast<QTapAndHoldGesture*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTapAndHoldGesture_ChildEventDefault(void* ptr, void* event){
	static_cast<QTapAndHoldGesture*>(ptr)->QTapAndHoldGesture::childEvent(static_cast<QChildEvent*>(event));
}

void QTapAndHoldGesture_CustomEvent(void* ptr, void* event){
	static_cast<QTapAndHoldGesture*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTapAndHoldGesture_CustomEventDefault(void* ptr, void* event){
	static_cast<QTapAndHoldGesture*>(ptr)->QTapAndHoldGesture::customEvent(static_cast<QEvent*>(event));
}

void QTapGesture_SetPosition(void* ptr, void* pos){
	static_cast<QTapGesture*>(ptr)->setPosition(*static_cast<QPointF*>(pos));
}

void QTapGesture_DestroyQTapGesture(void* ptr){
	static_cast<QTapGesture*>(ptr)->~QTapGesture();
}

void QTapGesture_TimerEvent(void* ptr, void* event){
	static_cast<QTapGesture*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTapGesture_TimerEventDefault(void* ptr, void* event){
	static_cast<QTapGesture*>(ptr)->QTapGesture::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTapGesture_ChildEvent(void* ptr, void* event){
	static_cast<QTapGesture*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTapGesture_ChildEventDefault(void* ptr, void* event){
	static_cast<QTapGesture*>(ptr)->QTapGesture::childEvent(static_cast<QChildEvent*>(event));
}

void QTapGesture_CustomEvent(void* ptr, void* event){
	static_cast<QTapGesture*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTapGesture_CustomEventDefault(void* ptr, void* event){
	static_cast<QTapGesture*>(ptr)->QTapGesture::customEvent(static_cast<QEvent*>(event));
}

class MyQTextBrowser: public QTextBrowser {
public:
	MyQTextBrowser(QWidget *parent) : QTextBrowser(parent) {};
	void setSource(const QUrl & name) { if (!callbackQTextBrowserSetSource(this, this->objectName().toUtf8().data(), new QUrl(name))) { QTextBrowser::setSource(name); }; };
	void Signal_AnchorClicked(const QUrl & link) { callbackQTextBrowserAnchorClicked(this, this->objectName().toUtf8().data(), new QUrl(link)); };
	void backward() { if (!callbackQTextBrowserBackward(this, this->objectName().toUtf8().data())) { QTextBrowser::backward(); }; };
	void Signal_BackwardAvailable(bool available) { callbackQTextBrowserBackwardAvailable(this, this->objectName().toUtf8().data(), available); };
	void focusOutEvent(QFocusEvent * ev) { callbackQTextBrowserFocusOutEvent(this, this->objectName().toUtf8().data(), ev); };
	void forward() { if (!callbackQTextBrowserForward(this, this->objectName().toUtf8().data())) { QTextBrowser::forward(); }; };
	void Signal_ForwardAvailable(bool available) { callbackQTextBrowserForwardAvailable(this, this->objectName().toUtf8().data(), available); };
	void Signal_Highlighted2(const QString & link) { callbackQTextBrowserHighlighted2(this, this->objectName().toUtf8().data(), link.toUtf8().data()); };
	void Signal_Highlighted(const QUrl & link) { callbackQTextBrowserHighlighted(this, this->objectName().toUtf8().data(), new QUrl(link)); };
	void Signal_HistoryChanged() { callbackQTextBrowserHistoryChanged(this, this->objectName().toUtf8().data()); };
	void home() { if (!callbackQTextBrowserHome(this, this->objectName().toUtf8().data())) { QTextBrowser::home(); }; };
	void keyPressEvent(QKeyEvent * ev) { callbackQTextBrowserKeyPressEvent(this, this->objectName().toUtf8().data(), ev); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQTextBrowserMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQTextBrowserMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQTextBrowserMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * e) { callbackQTextBrowserPaintEvent(this, this->objectName().toUtf8().data(), e); };
	void reload() { if (!callbackQTextBrowserReload(this, this->objectName().toUtf8().data())) { QTextBrowser::reload(); }; };
	void Signal_SourceChanged(const QUrl & src) { callbackQTextBrowserSourceChanged(this, this->objectName().toUtf8().data(), new QUrl(src)); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQTextBrowserContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * e) { callbackQTextBrowserChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void dragEnterEvent(QDragEnterEvent * e) { callbackQTextBrowserDragEnterEvent(this, this->objectName().toUtf8().data(), e); };
	void dragLeaveEvent(QDragLeaveEvent * e) { callbackQTextBrowserDragLeaveEvent(this, this->objectName().toUtf8().data(), e); };
	void dragMoveEvent(QDragMoveEvent * e) { callbackQTextBrowserDragMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void dropEvent(QDropEvent * e) { callbackQTextBrowserDropEvent(this, this->objectName().toUtf8().data(), e); };
	void focusInEvent(QFocusEvent * e) { callbackQTextBrowserFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void inputMethodEvent(QInputMethodEvent * e) { callbackQTextBrowserInputMethodEvent(this, this->objectName().toUtf8().data(), e); };
	void insertFromMimeData(const QMimeData * source) { callbackQTextBrowserInsertFromMimeData(this, this->objectName().toUtf8().data(), const_cast<QMimeData*>(source)); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQTextBrowserKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseDoubleClickEvent(QMouseEvent * e) { callbackQTextBrowserMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), e); };
	void resizeEvent(QResizeEvent * e) { callbackQTextBrowserResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQTextBrowserScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void showEvent(QShowEvent * v) { callbackQTextBrowserShowEvent(this, this->objectName().toUtf8().data(), v); };
	void wheelEvent(QWheelEvent * e) { callbackQTextBrowserWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void setupViewport(QWidget * viewport) { callbackQTextBrowserSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void actionEvent(QActionEvent * event) { callbackQTextBrowserActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQTextBrowserEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQTextBrowserHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQTextBrowserLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQTextBrowserMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQTextBrowserSetVisible(this, this->objectName().toUtf8().data(), visible)) { QTextBrowser::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQTextBrowserCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQTextBrowserInitPainter(const_cast<MyQTextBrowser*>(this), this->objectName().toUtf8().data(), painter); };
	void tabletEvent(QTabletEvent * event) { callbackQTextBrowserTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQTextBrowserTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQTextBrowserChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQTextBrowserCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QTextBrowser_OpenExternalLinks(void* ptr){
	return static_cast<QTextBrowser*>(ptr)->openExternalLinks();
}

int QTextBrowser_OpenLinks(void* ptr){
	return static_cast<QTextBrowser*>(ptr)->openLinks();
}

char* QTextBrowser_SearchPaths(void* ptr){
	return static_cast<QTextBrowser*>(ptr)->searchPaths().join("|").toUtf8().data();
}

void QTextBrowser_SetOpenExternalLinks(void* ptr, int open){
	static_cast<QTextBrowser*>(ptr)->setOpenExternalLinks(open != 0);
}

void QTextBrowser_SetOpenLinks(void* ptr, int open){
	static_cast<QTextBrowser*>(ptr)->setOpenLinks(open != 0);
}

void QTextBrowser_SetSearchPaths(void* ptr, char* paths){
	static_cast<QTextBrowser*>(ptr)->setSearchPaths(QString(paths).split("|", QString::SkipEmptyParts));
}

void QTextBrowser_SetSource(void* ptr, void* name){
	QMetaObject::invokeMethod(static_cast<MyQTextBrowser*>(ptr), "setSource", Q_ARG(QUrl, *static_cast<QUrl*>(name)));
}

void QTextBrowser_SetSourceDefault(void* ptr, void* name){
	QMetaObject::invokeMethod(static_cast<QTextBrowser*>(ptr), "setSource", Q_ARG(QUrl, *static_cast<QUrl*>(name)));
}

void* QTextBrowser_Source(void* ptr){
	return new QUrl(static_cast<QTextBrowser*>(ptr)->source());
}

void* QTextBrowser_NewQTextBrowser(void* parent){
	return new MyQTextBrowser(static_cast<QWidget*>(parent));
}

void QTextBrowser_ConnectAnchorClicked(void* ptr){
	QObject::connect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(const QUrl &)>(&QTextBrowser::anchorClicked), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(const QUrl &)>(&MyQTextBrowser::Signal_AnchorClicked));;
}

void QTextBrowser_DisconnectAnchorClicked(void* ptr){
	QObject::disconnect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(const QUrl &)>(&QTextBrowser::anchorClicked), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(const QUrl &)>(&MyQTextBrowser::Signal_AnchorClicked));;
}

void QTextBrowser_AnchorClicked(void* ptr, void* link){
	static_cast<QTextBrowser*>(ptr)->anchorClicked(*static_cast<QUrl*>(link));
}

void QTextBrowser_Backward(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTextBrowser*>(ptr), "backward");
}

void QTextBrowser_BackwardDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextBrowser*>(ptr), "backward");
}

void QTextBrowser_ConnectBackwardAvailable(void* ptr){
	QObject::connect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(bool)>(&QTextBrowser::backwardAvailable), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(bool)>(&MyQTextBrowser::Signal_BackwardAvailable));;
}

void QTextBrowser_DisconnectBackwardAvailable(void* ptr){
	QObject::disconnect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(bool)>(&QTextBrowser::backwardAvailable), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(bool)>(&MyQTextBrowser::Signal_BackwardAvailable));;
}

void QTextBrowser_BackwardAvailable(void* ptr, int available){
	static_cast<QTextBrowser*>(ptr)->backwardAvailable(available != 0);
}

int QTextBrowser_BackwardHistoryCount(void* ptr){
	return static_cast<QTextBrowser*>(ptr)->backwardHistoryCount();
}

void QTextBrowser_ClearHistory(void* ptr){
	static_cast<QTextBrowser*>(ptr)->clearHistory();
}

int QTextBrowser_Event(void* ptr, void* e){
	return static_cast<QTextBrowser*>(ptr)->event(static_cast<QEvent*>(e));
}

int QTextBrowser_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QTextBrowser*>(ptr)->focusNextPrevChild(next != 0);
}

void QTextBrowser_FocusOutEvent(void* ptr, void* ev){
	static_cast<MyQTextBrowser*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(ev));
}

void QTextBrowser_FocusOutEventDefault(void* ptr, void* ev){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::focusOutEvent(static_cast<QFocusEvent*>(ev));
}

void QTextBrowser_Forward(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTextBrowser*>(ptr), "forward");
}

void QTextBrowser_ForwardDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextBrowser*>(ptr), "forward");
}

void QTextBrowser_ConnectForwardAvailable(void* ptr){
	QObject::connect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(bool)>(&QTextBrowser::forwardAvailable), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(bool)>(&MyQTextBrowser::Signal_ForwardAvailable));;
}

void QTextBrowser_DisconnectForwardAvailable(void* ptr){
	QObject::disconnect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(bool)>(&QTextBrowser::forwardAvailable), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(bool)>(&MyQTextBrowser::Signal_ForwardAvailable));;
}

void QTextBrowser_ForwardAvailable(void* ptr, int available){
	static_cast<QTextBrowser*>(ptr)->forwardAvailable(available != 0);
}

int QTextBrowser_ForwardHistoryCount(void* ptr){
	return static_cast<QTextBrowser*>(ptr)->forwardHistoryCount();
}

void QTextBrowser_ConnectHighlighted2(void* ptr){
	QObject::connect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(const QString &)>(&QTextBrowser::highlighted), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(const QString &)>(&MyQTextBrowser::Signal_Highlighted2));;
}

void QTextBrowser_DisconnectHighlighted2(void* ptr){
	QObject::disconnect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(const QString &)>(&QTextBrowser::highlighted), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(const QString &)>(&MyQTextBrowser::Signal_Highlighted2));;
}

void QTextBrowser_Highlighted2(void* ptr, char* link){
	static_cast<QTextBrowser*>(ptr)->highlighted(QString(link));
}

void QTextBrowser_ConnectHighlighted(void* ptr){
	QObject::connect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(const QUrl &)>(&QTextBrowser::highlighted), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(const QUrl &)>(&MyQTextBrowser::Signal_Highlighted));;
}

void QTextBrowser_DisconnectHighlighted(void* ptr){
	QObject::disconnect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(const QUrl &)>(&QTextBrowser::highlighted), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(const QUrl &)>(&MyQTextBrowser::Signal_Highlighted));;
}

void QTextBrowser_Highlighted(void* ptr, void* link){
	static_cast<QTextBrowser*>(ptr)->highlighted(*static_cast<QUrl*>(link));
}

void QTextBrowser_ConnectHistoryChanged(void* ptr){
	QObject::connect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)()>(&QTextBrowser::historyChanged), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)()>(&MyQTextBrowser::Signal_HistoryChanged));;
}

void QTextBrowser_DisconnectHistoryChanged(void* ptr){
	QObject::disconnect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)()>(&QTextBrowser::historyChanged), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)()>(&MyQTextBrowser::Signal_HistoryChanged));;
}

void QTextBrowser_HistoryChanged(void* ptr){
	static_cast<QTextBrowser*>(ptr)->historyChanged();
}

char* QTextBrowser_HistoryTitle(void* ptr, int i){
	return static_cast<QTextBrowser*>(ptr)->historyTitle(i).toUtf8().data();
}

void* QTextBrowser_HistoryUrl(void* ptr, int i){
	return new QUrl(static_cast<QTextBrowser*>(ptr)->historyUrl(i));
}

void QTextBrowser_Home(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTextBrowser*>(ptr), "home");
}

void QTextBrowser_HomeDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextBrowser*>(ptr), "home");
}

int QTextBrowser_IsBackwardAvailable(void* ptr){
	return static_cast<QTextBrowser*>(ptr)->isBackwardAvailable();
}

int QTextBrowser_IsForwardAvailable(void* ptr){
	return static_cast<QTextBrowser*>(ptr)->isForwardAvailable();
}

void QTextBrowser_KeyPressEvent(void* ptr, void* ev){
	static_cast<MyQTextBrowser*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void QTextBrowser_KeyPressEventDefault(void* ptr, void* ev){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::keyPressEvent(static_cast<QKeyEvent*>(ev));
}

void* QTextBrowser_LoadResource(void* ptr, int ty, void* name){
	return new QVariant(static_cast<QTextBrowser*>(ptr)->loadResource(ty, *static_cast<QUrl*>(name)));
}

void QTextBrowser_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QTextBrowser_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QTextBrowser_MousePressEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QTextBrowser_MousePressEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QTextBrowser_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QTextBrowser_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QTextBrowser_PaintEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QTextBrowser_PaintEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::paintEvent(static_cast<QPaintEvent*>(e));
}

void QTextBrowser_Reload(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTextBrowser*>(ptr), "reload");
}

void QTextBrowser_ReloadDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextBrowser*>(ptr), "reload");
}

void QTextBrowser_ConnectSourceChanged(void* ptr){
	QObject::connect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(const QUrl &)>(&QTextBrowser::sourceChanged), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(const QUrl &)>(&MyQTextBrowser::Signal_SourceChanged));;
}

void QTextBrowser_DisconnectSourceChanged(void* ptr){
	QObject::disconnect(static_cast<QTextBrowser*>(ptr), static_cast<void (QTextBrowser::*)(const QUrl &)>(&QTextBrowser::sourceChanged), static_cast<MyQTextBrowser*>(ptr), static_cast<void (MyQTextBrowser::*)(const QUrl &)>(&MyQTextBrowser::Signal_SourceChanged));;
}

void QTextBrowser_SourceChanged(void* ptr, void* src){
	static_cast<QTextBrowser*>(ptr)->sourceChanged(*static_cast<QUrl*>(src));
}

void QTextBrowser_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QTextBrowser_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QTextBrowser_ChangeEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QTextBrowser_ChangeEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::changeEvent(static_cast<QEvent*>(e));
}

void QTextBrowser_DragEnterEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(e));
}

void QTextBrowser_DragEnterEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::dragEnterEvent(static_cast<QDragEnterEvent*>(e));
}

void QTextBrowser_DragLeaveEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QTextBrowser_DragLeaveEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QTextBrowser_DragMoveEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QTextBrowser_DragMoveEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QTextBrowser_DropEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->dropEvent(static_cast<QDropEvent*>(e));
}

void QTextBrowser_DropEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::dropEvent(static_cast<QDropEvent*>(e));
}

void QTextBrowser_FocusInEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QTextBrowser_FocusInEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QTextBrowser_InputMethodEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void QTextBrowser_InputMethodEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void QTextBrowser_InsertFromMimeData(void* ptr, void* source){
	static_cast<MyQTextBrowser*>(ptr)->insertFromMimeData(static_cast<QMimeData*>(source));
}

void QTextBrowser_InsertFromMimeDataDefault(void* ptr, void* source){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::insertFromMimeData(static_cast<QMimeData*>(source));
}

void QTextBrowser_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QTextBrowser_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QTextBrowser_MouseDoubleClickEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QTextBrowser_MouseDoubleClickEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QTextBrowser_ResizeEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QTextBrowser_ResizeEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QTextBrowser_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQTextBrowser*>(ptr)->scrollContentsBy(dx, dy);
}

void QTextBrowser_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::scrollContentsBy(dx, dy);
}

void QTextBrowser_ShowEvent(void* ptr, void* v){
	static_cast<MyQTextBrowser*>(ptr)->showEvent(static_cast<QShowEvent*>(v));
}

void QTextBrowser_ShowEventDefault(void* ptr, void* v){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::showEvent(static_cast<QShowEvent*>(v));
}

void QTextBrowser_WheelEvent(void* ptr, void* e){
	static_cast<MyQTextBrowser*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTextBrowser_WheelEventDefault(void* ptr, void* e){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTextBrowser_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQTextBrowser*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QTextBrowser_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::setupViewport(static_cast<QWidget*>(viewport));
}

void QTextBrowser_ActionEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QTextBrowser_ActionEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::actionEvent(static_cast<QActionEvent*>(event));
}

void QTextBrowser_EnterEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QTextBrowser_EnterEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::enterEvent(static_cast<QEvent*>(event));
}

void QTextBrowser_HideEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QTextBrowser_HideEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::hideEvent(static_cast<QHideEvent*>(event));
}

void QTextBrowser_LeaveEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QTextBrowser_LeaveEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::leaveEvent(static_cast<QEvent*>(event));
}

void QTextBrowser_MoveEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QTextBrowser_MoveEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::moveEvent(static_cast<QMoveEvent*>(event));
}

void QTextBrowser_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQTextBrowser*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTextBrowser_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTextBrowser*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTextBrowser_CloseEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QTextBrowser_CloseEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::closeEvent(static_cast<QCloseEvent*>(event));
}

void QTextBrowser_InitPainter(void* ptr, void* painter){
	static_cast<MyQTextBrowser*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QTextBrowser_InitPainterDefault(void* ptr, void* painter){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::initPainter(static_cast<QPainter*>(painter));
}

void QTextBrowser_TabletEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTextBrowser_TabletEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTextBrowser_TimerEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTextBrowser_TimerEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTextBrowser_ChildEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTextBrowser_ChildEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::childEvent(static_cast<QChildEvent*>(event));
}

void QTextBrowser_CustomEvent(void* ptr, void* event){
	static_cast<MyQTextBrowser*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTextBrowser_CustomEventDefault(void* ptr, void* event){
	static_cast<QTextBrowser*>(ptr)->QTextBrowser::customEvent(static_cast<QEvent*>(event));
}

class MyQTextEdit: public QTextEdit {
public:
	MyQTextEdit(QWidget *parent) : QTextEdit(parent) {};
	MyQTextEdit(const QString &text, QWidget *parent) : QTextEdit(text, parent) {};
	void contextMenuEvent(QContextMenuEvent * event) { callbackQTextEditContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQTextEditPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * e) { callbackQTextEditChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_CopyAvailable(bool yes) { callbackQTextEditCopyAvailable(this, this->objectName().toUtf8().data(), yes); };
	void Signal_CursorPositionChanged() { callbackQTextEditCursorPositionChanged(this, this->objectName().toUtf8().data()); };
	void dragEnterEvent(QDragEnterEvent * e) { callbackQTextEditDragEnterEvent(this, this->objectName().toUtf8().data(), e); };
	void dragLeaveEvent(QDragLeaveEvent * e) { callbackQTextEditDragLeaveEvent(this, this->objectName().toUtf8().data(), e); };
	void dragMoveEvent(QDragMoveEvent * e) { callbackQTextEditDragMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void dropEvent(QDropEvent * e) { callbackQTextEditDropEvent(this, this->objectName().toUtf8().data(), e); };
	void focusInEvent(QFocusEvent * e) { callbackQTextEditFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQTextEditFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void inputMethodEvent(QInputMethodEvent * e) { callbackQTextEditInputMethodEvent(this, this->objectName().toUtf8().data(), e); };
	void insertFromMimeData(const QMimeData * source) { callbackQTextEditInsertFromMimeData(this, this->objectName().toUtf8().data(), const_cast<QMimeData*>(source)); };
	void keyPressEvent(QKeyEvent * e) { callbackQTextEditKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQTextEditKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseDoubleClickEvent(QMouseEvent * e) { callbackQTextEditMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQTextEditMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQTextEditMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQTextEditMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_RedoAvailable(bool available) { callbackQTextEditRedoAvailable(this, this->objectName().toUtf8().data(), available); };
	void resizeEvent(QResizeEvent * e) { callbackQTextEditResizeEvent(this, this->objectName().toUtf8().data(), e); };
	void scrollContentsBy(int dx, int dy) { callbackQTextEditScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void Signal_SelectionChanged() { callbackQTextEditSelectionChanged(this, this->objectName().toUtf8().data()); };
	void showEvent(QShowEvent * v) { callbackQTextEditShowEvent(this, this->objectName().toUtf8().data(), v); };
	void Signal_TextChanged() { callbackQTextEditTextChanged(this, this->objectName().toUtf8().data()); };
	void Signal_UndoAvailable(bool available) { callbackQTextEditUndoAvailable(this, this->objectName().toUtf8().data(), available); };
	void wheelEvent(QWheelEvent * e) { callbackQTextEditWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void setupViewport(QWidget * viewport) { callbackQTextEditSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void actionEvent(QActionEvent * event) { callbackQTextEditActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQTextEditEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQTextEditHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQTextEditLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQTextEditMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQTextEditSetVisible(this, this->objectName().toUtf8().data(), visible)) { QTextEdit::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQTextEditCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQTextEditInitPainter(const_cast<MyQTextEdit*>(this), this->objectName().toUtf8().data(), painter); };
	void tabletEvent(QTabletEvent * event) { callbackQTextEditTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQTextEditTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQTextEditChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQTextEditCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QTextEdit_AcceptRichText(void* ptr){
	return static_cast<QTextEdit*>(ptr)->acceptRichText();
}

int QTextEdit_AutoFormatting(void* ptr){
	return static_cast<QTextEdit*>(ptr)->autoFormatting();
}

void QTextEdit_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QTextEdit_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

int QTextEdit_CursorWidth(void* ptr){
	return static_cast<QTextEdit*>(ptr)->cursorWidth();
}

void* QTextEdit_Document(void* ptr){
	return static_cast<QTextEdit*>(ptr)->document();
}

int QTextEdit_IsReadOnly(void* ptr){
	return static_cast<QTextEdit*>(ptr)->isReadOnly();
}

int QTextEdit_LineWrapColumnOrWidth(void* ptr){
	return static_cast<QTextEdit*>(ptr)->lineWrapColumnOrWidth();
}

int QTextEdit_LineWrapMode(void* ptr){
	return static_cast<QTextEdit*>(ptr)->lineWrapMode();
}

int QTextEdit_OverwriteMode(void* ptr){
	return static_cast<QTextEdit*>(ptr)->overwriteMode();
}

void QTextEdit_PaintEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QTextEdit_PaintEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::paintEvent(static_cast<QPaintEvent*>(event));
}

char* QTextEdit_PlaceholderText(void* ptr){
	return static_cast<QTextEdit*>(ptr)->placeholderText().toUtf8().data();
}

void QTextEdit_Redo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "redo");
}

void QTextEdit_SetAcceptRichText(void* ptr, int accept){
	static_cast<QTextEdit*>(ptr)->setAcceptRichText(accept != 0);
}

void QTextEdit_SetAutoFormatting(void* ptr, int features){
	static_cast<QTextEdit*>(ptr)->setAutoFormatting(static_cast<QTextEdit::AutoFormattingFlag>(features));
}

void QTextEdit_SetCursorWidth(void* ptr, int width){
	static_cast<QTextEdit*>(ptr)->setCursorWidth(width);
}

void QTextEdit_SetDocument(void* ptr, void* document){
	static_cast<QTextEdit*>(ptr)->setDocument(static_cast<QTextDocument*>(document));
}

void QTextEdit_SetFontWeight(void* ptr, int weight){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setFontWeight", Q_ARG(int, weight));
}

void QTextEdit_SetHtml(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setHtml", Q_ARG(QString, QString(text)));
}

void QTextEdit_SetLineWrapColumnOrWidth(void* ptr, int w){
	static_cast<QTextEdit*>(ptr)->setLineWrapColumnOrWidth(w);
}

void QTextEdit_SetLineWrapMode(void* ptr, int mode){
	static_cast<QTextEdit*>(ptr)->setLineWrapMode(static_cast<QTextEdit::LineWrapMode>(mode));
}

void QTextEdit_SetOverwriteMode(void* ptr, int overwrite){
	static_cast<QTextEdit*>(ptr)->setOverwriteMode(overwrite != 0);
}

void QTextEdit_SetPlaceholderText(void* ptr, char* placeholderText){
	static_cast<QTextEdit*>(ptr)->setPlaceholderText(QString(placeholderText));
}

void QTextEdit_SetReadOnly(void* ptr, int ro){
	static_cast<QTextEdit*>(ptr)->setReadOnly(ro != 0);
}

void QTextEdit_SetTabChangesFocus(void* ptr, int b){
	static_cast<QTextEdit*>(ptr)->setTabChangesFocus(b != 0);
}

void QTextEdit_SetTabStopWidth(void* ptr, int width){
	static_cast<QTextEdit*>(ptr)->setTabStopWidth(width);
}

void QTextEdit_SetTextInteractionFlags(void* ptr, int flags){
	static_cast<QTextEdit*>(ptr)->setTextInteractionFlags(static_cast<Qt::TextInteractionFlag>(flags));
}

void QTextEdit_SetWordWrapMode(void* ptr, int policy){
	static_cast<QTextEdit*>(ptr)->setWordWrapMode(static_cast<QTextOption::WrapMode>(policy));
}

int QTextEdit_TabChangesFocus(void* ptr){
	return static_cast<QTextEdit*>(ptr)->tabChangesFocus();
}

int QTextEdit_TabStopWidth(void* ptr){
	return static_cast<QTextEdit*>(ptr)->tabStopWidth();
}

int QTextEdit_TextInteractionFlags(void* ptr){
	return static_cast<QTextEdit*>(ptr)->textInteractionFlags();
}

char* QTextEdit_ToHtml(void* ptr){
	return static_cast<QTextEdit*>(ptr)->toHtml().toUtf8().data();
}

int QTextEdit_WordWrapMode(void* ptr){
	return static_cast<QTextEdit*>(ptr)->wordWrapMode();
}

void QTextEdit_ZoomIn(void* ptr, int ran){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "zoomIn", Q_ARG(int, ran));
}

void QTextEdit_ZoomOut(void* ptr, int ran){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "zoomOut", Q_ARG(int, ran));
}

void* QTextEdit_NewQTextEdit(void* parent){
	return new MyQTextEdit(static_cast<QWidget*>(parent));
}

void* QTextEdit_NewQTextEdit2(char* text, void* parent){
	return new MyQTextEdit(QString(text), static_cast<QWidget*>(parent));
}

int QTextEdit_Alignment(void* ptr){
	return static_cast<QTextEdit*>(ptr)->alignment();
}

char* QTextEdit_AnchorAt(void* ptr, void* pos){
	return static_cast<QTextEdit*>(ptr)->anchorAt(*static_cast<QPoint*>(pos)).toUtf8().data();
}

void QTextEdit_Append(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "append", Q_ARG(QString, QString(text)));
}

int QTextEdit_CanInsertFromMimeData(void* ptr, void* source){
	return static_cast<QTextEdit*>(ptr)->canInsertFromMimeData(static_cast<QMimeData*>(source));
}

int QTextEdit_CanPaste(void* ptr){
	return static_cast<QTextEdit*>(ptr)->canPaste();
}

void QTextEdit_ChangeEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QTextEdit_ChangeEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::changeEvent(static_cast<QEvent*>(e));
}

void QTextEdit_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "clear");
}

void QTextEdit_Copy(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "copy");
}

void QTextEdit_ConnectCopyAvailable(void* ptr){
	QObject::connect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)(bool)>(&QTextEdit::copyAvailable), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)(bool)>(&MyQTextEdit::Signal_CopyAvailable));;
}

void QTextEdit_DisconnectCopyAvailable(void* ptr){
	QObject::disconnect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)(bool)>(&QTextEdit::copyAvailable), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)(bool)>(&MyQTextEdit::Signal_CopyAvailable));;
}

void QTextEdit_CopyAvailable(void* ptr, int yes){
	static_cast<QTextEdit*>(ptr)->copyAvailable(yes != 0);
}

void* QTextEdit_CreateMimeDataFromSelection(void* ptr){
	return static_cast<QTextEdit*>(ptr)->createMimeDataFromSelection();
}

void* QTextEdit_CreateStandardContextMenu(void* ptr){
	return static_cast<QTextEdit*>(ptr)->createStandardContextMenu();
}

void* QTextEdit_CreateStandardContextMenu2(void* ptr, void* position){
	return static_cast<QTextEdit*>(ptr)->createStandardContextMenu(*static_cast<QPoint*>(position));
}

void* QTextEdit_CurrentFont(void* ptr){
	return new QFont(static_cast<QTextEdit*>(ptr)->currentFont());
}

void* QTextEdit_CursorForPosition(void* ptr, void* pos){
	return new QTextCursor(static_cast<QTextEdit*>(ptr)->cursorForPosition(*static_cast<QPoint*>(pos)));
}

void QTextEdit_ConnectCursorPositionChanged(void* ptr){
	QObject::connect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)()>(&QTextEdit::cursorPositionChanged), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)()>(&MyQTextEdit::Signal_CursorPositionChanged));;
}

void QTextEdit_DisconnectCursorPositionChanged(void* ptr){
	QObject::disconnect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)()>(&QTextEdit::cursorPositionChanged), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)()>(&MyQTextEdit::Signal_CursorPositionChanged));;
}

void QTextEdit_CursorPositionChanged(void* ptr){
	static_cast<QTextEdit*>(ptr)->cursorPositionChanged();
}

void* QTextEdit_CursorRect2(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QTextEdit*>(ptr)->cursorRect()).x(), static_cast<QRect>(static_cast<QTextEdit*>(ptr)->cursorRect()).y(), static_cast<QRect>(static_cast<QTextEdit*>(ptr)->cursorRect()).width(), static_cast<QRect>(static_cast<QTextEdit*>(ptr)->cursorRect()).height());
}

void* QTextEdit_CursorRect(void* ptr, void* cursor){
	return new QRect(static_cast<QRect>(static_cast<QTextEdit*>(ptr)->cursorRect(*static_cast<QTextCursor*>(cursor))).x(), static_cast<QRect>(static_cast<QTextEdit*>(ptr)->cursorRect(*static_cast<QTextCursor*>(cursor))).y(), static_cast<QRect>(static_cast<QTextEdit*>(ptr)->cursorRect(*static_cast<QTextCursor*>(cursor))).width(), static_cast<QRect>(static_cast<QTextEdit*>(ptr)->cursorRect(*static_cast<QTextCursor*>(cursor))).height());
}

void QTextEdit_Cut(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "cut");
}

char* QTextEdit_DocumentTitle(void* ptr){
	return static_cast<QTextEdit*>(ptr)->documentTitle().toUtf8().data();
}

void QTextEdit_DragEnterEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(e));
}

void QTextEdit_DragEnterEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::dragEnterEvent(static_cast<QDragEnterEvent*>(e));
}

void QTextEdit_DragLeaveEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QTextEdit_DragLeaveEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QTextEdit_DragMoveEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QTextEdit_DragMoveEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QTextEdit_DropEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->dropEvent(static_cast<QDropEvent*>(e));
}

void QTextEdit_DropEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::dropEvent(static_cast<QDropEvent*>(e));
}

void QTextEdit_EnsureCursorVisible(void* ptr){
	static_cast<QTextEdit*>(ptr)->ensureCursorVisible();
}

void QTextEdit_FocusInEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QTextEdit_FocusInEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::focusInEvent(static_cast<QFocusEvent*>(e));
}

int QTextEdit_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QTextEdit*>(ptr)->focusNextPrevChild(next != 0);
}

void QTextEdit_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QTextEdit_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::focusOutEvent(static_cast<QFocusEvent*>(e));
}

char* QTextEdit_FontFamily(void* ptr){
	return static_cast<QTextEdit*>(ptr)->fontFamily().toUtf8().data();
}

int QTextEdit_FontItalic(void* ptr){
	return static_cast<QTextEdit*>(ptr)->fontItalic();
}

double QTextEdit_FontPointSize(void* ptr){
	return static_cast<double>(static_cast<QTextEdit*>(ptr)->fontPointSize());
}

int QTextEdit_FontUnderline(void* ptr){
	return static_cast<QTextEdit*>(ptr)->fontUnderline();
}

int QTextEdit_FontWeight(void* ptr){
	return static_cast<QTextEdit*>(ptr)->fontWeight();
}

void QTextEdit_InputMethodEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void QTextEdit_InputMethodEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::inputMethodEvent(static_cast<QInputMethodEvent*>(e));
}

void* QTextEdit_InputMethodQuery(void* ptr, int property){
	return new QVariant(static_cast<QTextEdit*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(property)));
}

void QTextEdit_InsertFromMimeData(void* ptr, void* source){
	static_cast<MyQTextEdit*>(ptr)->insertFromMimeData(static_cast<QMimeData*>(source));
}

void QTextEdit_InsertFromMimeDataDefault(void* ptr, void* source){
	static_cast<QTextEdit*>(ptr)->QTextEdit::insertFromMimeData(static_cast<QMimeData*>(source));
}

void QTextEdit_InsertHtml(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "insertHtml", Q_ARG(QString, QString(text)));
}

void QTextEdit_InsertPlainText(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "insertPlainText", Q_ARG(QString, QString(text)));
}

int QTextEdit_IsUndoRedoEnabled(void* ptr){
	return static_cast<QTextEdit*>(ptr)->isUndoRedoEnabled();
}

void QTextEdit_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QTextEdit_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QTextEdit_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QTextEdit_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void* QTextEdit_LoadResource(void* ptr, int ty, void* name){
	return new QVariant(static_cast<QTextEdit*>(ptr)->loadResource(ty, *static_cast<QUrl*>(name)));
}

void QTextEdit_MergeCurrentCharFormat(void* ptr, void* modifier){
	static_cast<QTextEdit*>(ptr)->mergeCurrentCharFormat(*static_cast<QTextCharFormat*>(modifier));
}

void QTextEdit_MouseDoubleClickEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QTextEdit_MouseDoubleClickEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::mouseDoubleClickEvent(static_cast<QMouseEvent*>(e));
}

void QTextEdit_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QTextEdit_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QTextEdit_MousePressEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QTextEdit_MousePressEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QTextEdit_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QTextEdit_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QTextEdit_MoveCursor(void* ptr, int operation, int mode){
	static_cast<QTextEdit*>(ptr)->moveCursor(static_cast<QTextCursor::MoveOperation>(operation), static_cast<QTextCursor::MoveMode>(mode));
}

void QTextEdit_Paste(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "paste");
}

void QTextEdit_Print(void* ptr, void* printer){
	static_cast<QTextEdit*>(ptr)->print(static_cast<QPagedPaintDevice*>(printer));
}

void QTextEdit_ConnectRedoAvailable(void* ptr){
	QObject::connect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)(bool)>(&QTextEdit::redoAvailable), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)(bool)>(&MyQTextEdit::Signal_RedoAvailable));;
}

void QTextEdit_DisconnectRedoAvailable(void* ptr){
	QObject::disconnect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)(bool)>(&QTextEdit::redoAvailable), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)(bool)>(&MyQTextEdit::Signal_RedoAvailable));;
}

void QTextEdit_RedoAvailable(void* ptr, int available){
	static_cast<QTextEdit*>(ptr)->redoAvailable(available != 0);
}

void QTextEdit_ResizeEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QTextEdit_ResizeEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QTextEdit_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQTextEdit*>(ptr)->scrollContentsBy(dx, dy);
}

void QTextEdit_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QTextEdit*>(ptr)->QTextEdit::scrollContentsBy(dx, dy);
}

void QTextEdit_ScrollToAnchor(void* ptr, char* name){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "scrollToAnchor", Q_ARG(QString, QString(name)));
}

void QTextEdit_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "selectAll");
}

void QTextEdit_ConnectSelectionChanged(void* ptr){
	QObject::connect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)()>(&QTextEdit::selectionChanged), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)()>(&MyQTextEdit::Signal_SelectionChanged));;
}

void QTextEdit_DisconnectSelectionChanged(void* ptr){
	QObject::disconnect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)()>(&QTextEdit::selectionChanged), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)()>(&MyQTextEdit::Signal_SelectionChanged));;
}

void QTextEdit_SelectionChanged(void* ptr){
	static_cast<QTextEdit*>(ptr)->selectionChanged();
}

void QTextEdit_SetAlignment(void* ptr, int a){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setAlignment", Q_ARG(Qt::AlignmentFlag, static_cast<Qt::AlignmentFlag>(a)));
}

void QTextEdit_SetCurrentCharFormat(void* ptr, void* format){
	static_cast<QTextEdit*>(ptr)->setCurrentCharFormat(*static_cast<QTextCharFormat*>(format));
}

void QTextEdit_SetCurrentFont(void* ptr, void* f){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setCurrentFont", Q_ARG(QFont, *static_cast<QFont*>(f)));
}

void QTextEdit_SetDocumentTitle(void* ptr, char* title){
	static_cast<QTextEdit*>(ptr)->setDocumentTitle(QString(title));
}

void QTextEdit_SetFontFamily(void* ptr, char* fontFamily){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setFontFamily", Q_ARG(QString, QString(fontFamily)));
}

void QTextEdit_SetFontItalic(void* ptr, int italic){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setFontItalic", Q_ARG(bool, italic != 0));
}

void QTextEdit_SetFontPointSize(void* ptr, double s){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setFontPointSize", Q_ARG(qreal, static_cast<double>(s)));
}

void QTextEdit_SetFontUnderline(void* ptr, int underline){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setFontUnderline", Q_ARG(bool, underline != 0));
}

void QTextEdit_SetPlainText(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setPlainText", Q_ARG(QString, QString(text)));
}

void QTextEdit_SetText(void* ptr, char* text){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setText", Q_ARG(QString, QString(text)));
}

void QTextEdit_SetTextBackgroundColor(void* ptr, void* c){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setTextBackgroundColor", Q_ARG(QColor, *static_cast<QColor*>(c)));
}

void QTextEdit_SetTextColor(void* ptr, void* c){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setTextColor", Q_ARG(QColor, *static_cast<QColor*>(c)));
}

void QTextEdit_SetTextCursor(void* ptr, void* cursor){
	static_cast<QTextEdit*>(ptr)->setTextCursor(*static_cast<QTextCursor*>(cursor));
}

void QTextEdit_SetUndoRedoEnabled(void* ptr, int enable){
	static_cast<QTextEdit*>(ptr)->setUndoRedoEnabled(enable != 0);
}

void QTextEdit_ShowEvent(void* ptr, void* v){
	static_cast<MyQTextEdit*>(ptr)->showEvent(static_cast<QShowEvent*>(v));
}

void QTextEdit_ShowEventDefault(void* ptr, void* v){
	static_cast<QTextEdit*>(ptr)->QTextEdit::showEvent(static_cast<QShowEvent*>(v));
}

void* QTextEdit_TextBackgroundColor(void* ptr){
	return new QColor(static_cast<QTextEdit*>(ptr)->textBackgroundColor());
}

void QTextEdit_ConnectTextChanged(void* ptr){
	QObject::connect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)()>(&QTextEdit::textChanged), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)()>(&MyQTextEdit::Signal_TextChanged));;
}

void QTextEdit_DisconnectTextChanged(void* ptr){
	QObject::disconnect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)()>(&QTextEdit::textChanged), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)()>(&MyQTextEdit::Signal_TextChanged));;
}

void QTextEdit_TextChanged(void* ptr){
	static_cast<QTextEdit*>(ptr)->textChanged();
}

void* QTextEdit_TextColor(void* ptr){
	return new QColor(static_cast<QTextEdit*>(ptr)->textColor());
}

void* QTextEdit_TextCursor(void* ptr){
	return new QTextCursor(static_cast<QTextEdit*>(ptr)->textCursor());
}

char* QTextEdit_ToPlainText(void* ptr){
	return static_cast<QTextEdit*>(ptr)->toPlainText().toUtf8().data();
}

void QTextEdit_Undo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "undo");
}

void QTextEdit_ConnectUndoAvailable(void* ptr){
	QObject::connect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)(bool)>(&QTextEdit::undoAvailable), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)(bool)>(&MyQTextEdit::Signal_UndoAvailable));;
}

void QTextEdit_DisconnectUndoAvailable(void* ptr){
	QObject::disconnect(static_cast<QTextEdit*>(ptr), static_cast<void (QTextEdit::*)(bool)>(&QTextEdit::undoAvailable), static_cast<MyQTextEdit*>(ptr), static_cast<void (MyQTextEdit::*)(bool)>(&MyQTextEdit::Signal_UndoAvailable));;
}

void QTextEdit_UndoAvailable(void* ptr, int available){
	static_cast<QTextEdit*>(ptr)->undoAvailable(available != 0);
}

void QTextEdit_WheelEvent(void* ptr, void* e){
	static_cast<MyQTextEdit*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTextEdit_WheelEventDefault(void* ptr, void* e){
	static_cast<QTextEdit*>(ptr)->QTextEdit::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTextEdit_DestroyQTextEdit(void* ptr){
	static_cast<QTextEdit*>(ptr)->~QTextEdit();
}

void QTextEdit_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQTextEdit*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QTextEdit_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QTextEdit*>(ptr)->QTextEdit::setupViewport(static_cast<QWidget*>(viewport));
}

void QTextEdit_ActionEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QTextEdit_ActionEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::actionEvent(static_cast<QActionEvent*>(event));
}

void QTextEdit_EnterEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QTextEdit_EnterEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::enterEvent(static_cast<QEvent*>(event));
}

void QTextEdit_HideEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QTextEdit_HideEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::hideEvent(static_cast<QHideEvent*>(event));
}

void QTextEdit_LeaveEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QTextEdit_LeaveEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::leaveEvent(static_cast<QEvent*>(event));
}

void QTextEdit_MoveEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QTextEdit_MoveEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::moveEvent(static_cast<QMoveEvent*>(event));
}

void QTextEdit_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQTextEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTextEdit_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTextEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTextEdit_CloseEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QTextEdit_CloseEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::closeEvent(static_cast<QCloseEvent*>(event));
}

void QTextEdit_InitPainter(void* ptr, void* painter){
	static_cast<MyQTextEdit*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QTextEdit_InitPainterDefault(void* ptr, void* painter){
	static_cast<QTextEdit*>(ptr)->QTextEdit::initPainter(static_cast<QPainter*>(painter));
}

void QTextEdit_TabletEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTextEdit_TabletEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTextEdit_TimerEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTextEdit_TimerEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTextEdit_ChildEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTextEdit_ChildEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::childEvent(static_cast<QChildEvent*>(event));
}

void QTextEdit_CustomEvent(void* ptr, void* event){
	static_cast<MyQTextEdit*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTextEdit_CustomEventDefault(void* ptr, void* event){
	static_cast<QTextEdit*>(ptr)->QTextEdit::customEvent(static_cast<QEvent*>(event));
}

void* QTileRules_NewQTileRules(int horizontalRule, int verticalRule){
	return new QTileRules(static_cast<Qt::TileRule>(horizontalRule), static_cast<Qt::TileRule>(verticalRule));
}

void* QTileRules_NewQTileRules2(int rule){
	return new QTileRules(static_cast<Qt::TileRule>(rule));
}

void* QTimeEdit_NewQTimeEdit(void* parent){
	return new QTimeEdit(static_cast<QWidget*>(parent));
}

void* QTimeEdit_NewQTimeEdit2(void* time, void* parent){
	return new QTimeEdit(*static_cast<QTime*>(time), static_cast<QWidget*>(parent));
}

void QTimeEdit_DestroyQTimeEdit(void* ptr){
	static_cast<QTimeEdit*>(ptr)->~QTimeEdit();
}

void QTimeEdit_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTimeEdit*>(ptr), "clear");
}

void QTimeEdit_ClearDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTimeEdit*>(ptr), "clear");
}

void QTimeEdit_FocusInEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTimeEdit_FocusInEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTimeEdit_KeyPressEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTimeEdit_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTimeEdit_MousePressEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTimeEdit_MousePressEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTimeEdit_PaintEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QTimeEdit_PaintEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::paintEvent(static_cast<QPaintEvent*>(event));
}

void QTimeEdit_StepBy(void* ptr, int steps){
	static_cast<QTimeEdit*>(ptr)->stepBy(steps);
}

void QTimeEdit_StepByDefault(void* ptr, int steps){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::stepBy(steps);
}

void QTimeEdit_WheelEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QTimeEdit_WheelEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QTimeEdit_ChangeEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QTimeEdit_ChangeEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::changeEvent(static_cast<QEvent*>(event));
}

void QTimeEdit_CloseEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QTimeEdit_CloseEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::closeEvent(static_cast<QCloseEvent*>(event));
}

void QTimeEdit_ContextMenuEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QTimeEdit_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QTimeEdit_FocusOutEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTimeEdit_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTimeEdit_HideEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QTimeEdit_HideEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::hideEvent(static_cast<QHideEvent*>(event));
}

void QTimeEdit_KeyReleaseEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTimeEdit_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTimeEdit_MouseMoveEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTimeEdit_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTimeEdit_MouseReleaseEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTimeEdit_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTimeEdit_ResizeEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTimeEdit_ResizeEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTimeEdit_ShowEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QTimeEdit_ShowEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::showEvent(static_cast<QShowEvent*>(event));
}

void QTimeEdit_TimerEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTimeEdit_TimerEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTimeEdit_ActionEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QTimeEdit_ActionEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::actionEvent(static_cast<QActionEvent*>(event));
}

void QTimeEdit_DragEnterEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTimeEdit_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTimeEdit_DragLeaveEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTimeEdit_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTimeEdit_DragMoveEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTimeEdit_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTimeEdit_DropEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QTimeEdit_DropEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::dropEvent(static_cast<QDropEvent*>(event));
}

void QTimeEdit_EnterEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QTimeEdit_EnterEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::enterEvent(static_cast<QEvent*>(event));
}

void QTimeEdit_LeaveEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QTimeEdit_LeaveEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::leaveEvent(static_cast<QEvent*>(event));
}

void QTimeEdit_MoveEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QTimeEdit_MoveEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::moveEvent(static_cast<QMoveEvent*>(event));
}

void QTimeEdit_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTimeEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTimeEdit_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTimeEdit*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTimeEdit_InitPainter(void* ptr, void* painter){
	static_cast<QTimeEdit*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QTimeEdit_InitPainterDefault(void* ptr, void* painter){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::initPainter(static_cast<QPainter*>(painter));
}

void QTimeEdit_InputMethodEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTimeEdit_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTimeEdit_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTimeEdit_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTimeEdit_TabletEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTimeEdit_TabletEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTimeEdit_ChildEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTimeEdit_ChildEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::childEvent(static_cast<QChildEvent*>(event));
}

void QTimeEdit_CustomEvent(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTimeEdit_CustomEventDefault(void* ptr, void* event){
	static_cast<QTimeEdit*>(ptr)->QTimeEdit::customEvent(static_cast<QEvent*>(event));
}

class MyQToolBar: public QToolBar {
public:
	MyQToolBar(QWidget *parent) : QToolBar(parent) {};
	MyQToolBar(const QString &title, QWidget *parent) : QToolBar(title, parent) {};
	void actionEvent(QActionEvent * event) { callbackQToolBarActionEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_ActionTriggered(QAction * action) { callbackQToolBarActionTriggered(this, this->objectName().toUtf8().data(), action); };
	void Signal_AllowedAreasChanged(Qt::ToolBarAreas allowedAreas) { callbackQToolBarAllowedAreasChanged(this, this->objectName().toUtf8().data(), allowedAreas); };
	void changeEvent(QEvent * event) { callbackQToolBarChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_IconSizeChanged(const QSize & iconSize) { callbackQToolBarIconSizeChanged(this, this->objectName().toUtf8().data(), new QSize(static_cast<QSize>(iconSize).width(), static_cast<QSize>(iconSize).height())); };
	void Signal_MovableChanged(bool movable) { callbackQToolBarMovableChanged(this, this->objectName().toUtf8().data(), movable); };
	void Signal_OrientationChanged(Qt::Orientation orientation) { callbackQToolBarOrientationChanged(this, this->objectName().toUtf8().data(), orientation); };
	void paintEvent(QPaintEvent * event) { callbackQToolBarPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_ToolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle) { callbackQToolBarToolButtonStyleChanged(this, this->objectName().toUtf8().data(), toolButtonStyle); };
	void Signal_TopLevelChanged(bool topLevel) { callbackQToolBarTopLevelChanged(this, this->objectName().toUtf8().data(), topLevel); };
	void Signal_VisibilityChanged(bool visible) { callbackQToolBarVisibilityChanged(this, this->objectName().toUtf8().data(), visible); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQToolBarDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQToolBarDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQToolBarDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQToolBarDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQToolBarEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQToolBarFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQToolBarFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQToolBarHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQToolBarLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQToolBarMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQToolBarSetVisible(this, this->objectName().toUtf8().data(), visible)) { QToolBar::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQToolBarShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQToolBarCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQToolBarContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQToolBarInitPainter(const_cast<MyQToolBar*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQToolBarInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQToolBarKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQToolBarKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQToolBarMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQToolBarMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQToolBarMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQToolBarMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQToolBarResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQToolBarTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQToolBarWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQToolBarTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQToolBarChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQToolBarCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QToolBar_AllowedAreas(void* ptr){
	return static_cast<QToolBar*>(ptr)->allowedAreas();
}

void* QToolBar_IconSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QToolBar*>(ptr)->iconSize()).width(), static_cast<QSize>(static_cast<QToolBar*>(ptr)->iconSize()).height());
}

int QToolBar_IsFloatable(void* ptr){
	return static_cast<QToolBar*>(ptr)->isFloatable();
}

int QToolBar_IsFloating(void* ptr){
	return static_cast<QToolBar*>(ptr)->isFloating();
}

int QToolBar_IsMovable(void* ptr){
	return static_cast<QToolBar*>(ptr)->isMovable();
}

int QToolBar_Orientation(void* ptr){
	return static_cast<QToolBar*>(ptr)->orientation();
}

void QToolBar_SetAllowedAreas(void* ptr, int areas){
	static_cast<QToolBar*>(ptr)->setAllowedAreas(static_cast<Qt::ToolBarArea>(areas));
}

void QToolBar_SetFloatable(void* ptr, int floatable){
	static_cast<QToolBar*>(ptr)->setFloatable(floatable != 0);
}

void QToolBar_SetIconSize(void* ptr, void* iconSize){
	QMetaObject::invokeMethod(static_cast<QToolBar*>(ptr), "setIconSize", Q_ARG(QSize, *static_cast<QSize*>(iconSize)));
}

void QToolBar_SetMovable(void* ptr, int movable){
	static_cast<QToolBar*>(ptr)->setMovable(movable != 0);
}

void QToolBar_SetOrientation(void* ptr, int orientation){
	static_cast<QToolBar*>(ptr)->setOrientation(static_cast<Qt::Orientation>(orientation));
}

void QToolBar_SetToolButtonStyle(void* ptr, int toolButtonStyle){
	QMetaObject::invokeMethod(static_cast<QToolBar*>(ptr), "setToolButtonStyle", Q_ARG(Qt::ToolButtonStyle, static_cast<Qt::ToolButtonStyle>(toolButtonStyle)));
}

int QToolBar_ToolButtonStyle(void* ptr){
	return static_cast<QToolBar*>(ptr)->toolButtonStyle();
}

void* QToolBar_NewQToolBar2(void* parent){
	return new MyQToolBar(static_cast<QWidget*>(parent));
}

void* QToolBar_NewQToolBar(char* title, void* parent){
	return new MyQToolBar(QString(title), static_cast<QWidget*>(parent));
}

void* QToolBar_ActionAt(void* ptr, void* p){
	return static_cast<QToolBar*>(ptr)->actionAt(*static_cast<QPoint*>(p));
}

void* QToolBar_ActionAt2(void* ptr, int x, int y){
	return static_cast<QToolBar*>(ptr)->actionAt(x, y);
}

void QToolBar_ActionEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QToolBar_ActionEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::actionEvent(static_cast<QActionEvent*>(event));
}

void QToolBar_ConnectActionTriggered(void* ptr){
	QObject::connect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(QAction *)>(&QToolBar::actionTriggered), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(QAction *)>(&MyQToolBar::Signal_ActionTriggered));;
}

void QToolBar_DisconnectActionTriggered(void* ptr){
	QObject::disconnect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(QAction *)>(&QToolBar::actionTriggered), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(QAction *)>(&MyQToolBar::Signal_ActionTriggered));;
}

void QToolBar_ActionTriggered(void* ptr, void* action){
	static_cast<QToolBar*>(ptr)->actionTriggered(static_cast<QAction*>(action));
}

void* QToolBar_AddAction2(void* ptr, void* icon, char* text){
	return static_cast<QToolBar*>(ptr)->addAction(*static_cast<QIcon*>(icon), QString(text));
}

void* QToolBar_AddAction4(void* ptr, void* icon, char* text, void* receiver, char* member){
	return static_cast<QToolBar*>(ptr)->addAction(*static_cast<QIcon*>(icon), QString(text), static_cast<QObject*>(receiver), const_cast<const char*>(member));
}

void* QToolBar_AddAction(void* ptr, char* text){
	return static_cast<QToolBar*>(ptr)->addAction(QString(text));
}

void* QToolBar_AddAction3(void* ptr, char* text, void* receiver, char* member){
	return static_cast<QToolBar*>(ptr)->addAction(QString(text), static_cast<QObject*>(receiver), const_cast<const char*>(member));
}

void* QToolBar_AddSeparator(void* ptr){
	return static_cast<QToolBar*>(ptr)->addSeparator();
}

void* QToolBar_AddWidget(void* ptr, void* widget){
	return static_cast<QToolBar*>(ptr)->addWidget(static_cast<QWidget*>(widget));
}

void QToolBar_ConnectAllowedAreasChanged(void* ptr){
	QObject::connect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(Qt::ToolBarAreas)>(&QToolBar::allowedAreasChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(Qt::ToolBarAreas)>(&MyQToolBar::Signal_AllowedAreasChanged));;
}

void QToolBar_DisconnectAllowedAreasChanged(void* ptr){
	QObject::disconnect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(Qt::ToolBarAreas)>(&QToolBar::allowedAreasChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(Qt::ToolBarAreas)>(&MyQToolBar::Signal_AllowedAreasChanged));;
}

void QToolBar_AllowedAreasChanged(void* ptr, int allowedAreas){
	static_cast<QToolBar*>(ptr)->allowedAreasChanged(static_cast<Qt::ToolBarArea>(allowedAreas));
}

void QToolBar_ChangeEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QToolBar_ChangeEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::changeEvent(static_cast<QEvent*>(event));
}

void QToolBar_Clear(void* ptr){
	static_cast<QToolBar*>(ptr)->clear();
}

int QToolBar_Event(void* ptr, void* event){
	return static_cast<QToolBar*>(ptr)->event(static_cast<QEvent*>(event));
}

void QToolBar_ConnectIconSizeChanged(void* ptr){
	QObject::connect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(const QSize &)>(&QToolBar::iconSizeChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(const QSize &)>(&MyQToolBar::Signal_IconSizeChanged));;
}

void QToolBar_DisconnectIconSizeChanged(void* ptr){
	QObject::disconnect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(const QSize &)>(&QToolBar::iconSizeChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(const QSize &)>(&MyQToolBar::Signal_IconSizeChanged));;
}

void QToolBar_IconSizeChanged(void* ptr, void* iconSize){
	static_cast<QToolBar*>(ptr)->iconSizeChanged(*static_cast<QSize*>(iconSize));
}

void* QToolBar_InsertSeparator(void* ptr, void* before){
	return static_cast<QToolBar*>(ptr)->insertSeparator(static_cast<QAction*>(before));
}

void* QToolBar_InsertWidget(void* ptr, void* before, void* widget){
	return static_cast<QToolBar*>(ptr)->insertWidget(static_cast<QAction*>(before), static_cast<QWidget*>(widget));
}

int QToolBar_IsAreaAllowed(void* ptr, int area){
	return static_cast<QToolBar*>(ptr)->isAreaAllowed(static_cast<Qt::ToolBarArea>(area));
}

void QToolBar_ConnectMovableChanged(void* ptr){
	QObject::connect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(bool)>(&QToolBar::movableChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(bool)>(&MyQToolBar::Signal_MovableChanged));;
}

void QToolBar_DisconnectMovableChanged(void* ptr){
	QObject::disconnect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(bool)>(&QToolBar::movableChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(bool)>(&MyQToolBar::Signal_MovableChanged));;
}

void QToolBar_MovableChanged(void* ptr, int movable){
	static_cast<QToolBar*>(ptr)->movableChanged(movable != 0);
}

void QToolBar_ConnectOrientationChanged(void* ptr){
	QObject::connect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(Qt::Orientation)>(&QToolBar::orientationChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(Qt::Orientation)>(&MyQToolBar::Signal_OrientationChanged));;
}

void QToolBar_DisconnectOrientationChanged(void* ptr){
	QObject::disconnect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(Qt::Orientation)>(&QToolBar::orientationChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(Qt::Orientation)>(&MyQToolBar::Signal_OrientationChanged));;
}

void QToolBar_OrientationChanged(void* ptr, int orientation){
	static_cast<QToolBar*>(ptr)->orientationChanged(static_cast<Qt::Orientation>(orientation));
}

void QToolBar_PaintEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QToolBar_PaintEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::paintEvent(static_cast<QPaintEvent*>(event));
}

void* QToolBar_ToggleViewAction(void* ptr){
	return static_cast<QToolBar*>(ptr)->toggleViewAction();
}

void QToolBar_ConnectToolButtonStyleChanged(void* ptr){
	QObject::connect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(Qt::ToolButtonStyle)>(&QToolBar::toolButtonStyleChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(Qt::ToolButtonStyle)>(&MyQToolBar::Signal_ToolButtonStyleChanged));;
}

void QToolBar_DisconnectToolButtonStyleChanged(void* ptr){
	QObject::disconnect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(Qt::ToolButtonStyle)>(&QToolBar::toolButtonStyleChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(Qt::ToolButtonStyle)>(&MyQToolBar::Signal_ToolButtonStyleChanged));;
}

void QToolBar_ToolButtonStyleChanged(void* ptr, int toolButtonStyle){
	static_cast<QToolBar*>(ptr)->toolButtonStyleChanged(static_cast<Qt::ToolButtonStyle>(toolButtonStyle));
}

void QToolBar_ConnectTopLevelChanged(void* ptr){
	QObject::connect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(bool)>(&QToolBar::topLevelChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(bool)>(&MyQToolBar::Signal_TopLevelChanged));;
}

void QToolBar_DisconnectTopLevelChanged(void* ptr){
	QObject::disconnect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(bool)>(&QToolBar::topLevelChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(bool)>(&MyQToolBar::Signal_TopLevelChanged));;
}

void QToolBar_TopLevelChanged(void* ptr, int topLevel){
	static_cast<QToolBar*>(ptr)->topLevelChanged(topLevel != 0);
}

void QToolBar_ConnectVisibilityChanged(void* ptr){
	QObject::connect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(bool)>(&QToolBar::visibilityChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(bool)>(&MyQToolBar::Signal_VisibilityChanged));;
}

void QToolBar_DisconnectVisibilityChanged(void* ptr){
	QObject::disconnect(static_cast<QToolBar*>(ptr), static_cast<void (QToolBar::*)(bool)>(&QToolBar::visibilityChanged), static_cast<MyQToolBar*>(ptr), static_cast<void (MyQToolBar::*)(bool)>(&MyQToolBar::Signal_VisibilityChanged));;
}

void QToolBar_VisibilityChanged(void* ptr, int visible){
	static_cast<QToolBar*>(ptr)->visibilityChanged(visible != 0);
}

void* QToolBar_WidgetForAction(void* ptr, void* action){
	return static_cast<QToolBar*>(ptr)->widgetForAction(static_cast<QAction*>(action));
}

void QToolBar_DestroyQToolBar(void* ptr){
	static_cast<QToolBar*>(ptr)->~QToolBar();
}

void QToolBar_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QToolBar_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QToolBar_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QToolBar_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QToolBar_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QToolBar_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QToolBar_DropEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QToolBar_DropEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::dropEvent(static_cast<QDropEvent*>(event));
}

void QToolBar_EnterEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QToolBar_EnterEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::enterEvent(static_cast<QEvent*>(event));
}

void QToolBar_FocusInEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QToolBar_FocusInEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QToolBar_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QToolBar_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QToolBar_HideEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QToolBar_HideEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::hideEvent(static_cast<QHideEvent*>(event));
}

void QToolBar_LeaveEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QToolBar_LeaveEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::leaveEvent(static_cast<QEvent*>(event));
}

void QToolBar_MoveEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QToolBar_MoveEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::moveEvent(static_cast<QMoveEvent*>(event));
}

void QToolBar_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQToolBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QToolBar_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QToolBar*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QToolBar_ShowEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QToolBar_ShowEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::showEvent(static_cast<QShowEvent*>(event));
}

void QToolBar_CloseEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QToolBar_CloseEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::closeEvent(static_cast<QCloseEvent*>(event));
}

void QToolBar_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QToolBar_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QToolBar_InitPainter(void* ptr, void* painter){
	static_cast<MyQToolBar*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QToolBar_InitPainterDefault(void* ptr, void* painter){
	static_cast<QToolBar*>(ptr)->QToolBar::initPainter(static_cast<QPainter*>(painter));
}

void QToolBar_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QToolBar_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QToolBar_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QToolBar_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QToolBar_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QToolBar_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QToolBar_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QToolBar_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QToolBar_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QToolBar_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QToolBar_MousePressEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QToolBar_MousePressEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QToolBar_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QToolBar_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QToolBar_ResizeEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QToolBar_ResizeEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QToolBar_TabletEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QToolBar_TabletEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QToolBar_WheelEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QToolBar_WheelEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QToolBar_TimerEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QToolBar_TimerEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::timerEvent(static_cast<QTimerEvent*>(event));
}

void QToolBar_ChildEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QToolBar_ChildEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::childEvent(static_cast<QChildEvent*>(event));
}

void QToolBar_CustomEvent(void* ptr, void* event){
	static_cast<MyQToolBar*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QToolBar_CustomEventDefault(void* ptr, void* event){
	static_cast<QToolBar*>(ptr)->QToolBar::customEvent(static_cast<QEvent*>(event));
}

class MyQToolBox: public QToolBox {
public:
	MyQToolBox(QWidget *parent, Qt::WindowFlags f) : QToolBox(parent, f) {};
	void changeEvent(QEvent * ev) { callbackQToolBoxChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void Signal_CurrentChanged(int index) { callbackQToolBoxCurrentChanged(this, this->objectName().toUtf8().data(), index); };
	void itemInserted(int index) { callbackQToolBoxItemInserted(this, this->objectName().toUtf8().data(), index); };
	void itemRemoved(int index) { callbackQToolBoxItemRemoved(this, this->objectName().toUtf8().data(), index); };
	void showEvent(QShowEvent * e) { callbackQToolBoxShowEvent(this, this->objectName().toUtf8().data(), e); };
	void paintEvent(QPaintEvent * v) { callbackQToolBoxPaintEvent(this, this->objectName().toUtf8().data(), v); };
	void actionEvent(QActionEvent * event) { callbackQToolBoxActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQToolBoxDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQToolBoxDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQToolBoxDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQToolBoxDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQToolBoxEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQToolBoxFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQToolBoxFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQToolBoxHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQToolBoxLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQToolBoxMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQToolBoxSetVisible(this, this->objectName().toUtf8().data(), visible)) { QToolBox::setVisible(visible); }; };
	void closeEvent(QCloseEvent * event) { callbackQToolBoxCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQToolBoxContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQToolBoxInitPainter(const_cast<MyQToolBox*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQToolBoxInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQToolBoxKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQToolBoxKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQToolBoxMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQToolBoxMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQToolBoxMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQToolBoxMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQToolBoxResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQToolBoxTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQToolBoxWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQToolBoxTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQToolBoxChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQToolBoxCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QToolBox_Count(void* ptr){
	return static_cast<QToolBox*>(ptr)->count();
}

int QToolBox_CurrentIndex(void* ptr){
	return static_cast<QToolBox*>(ptr)->currentIndex();
}

void QToolBox_SetCurrentIndex(void* ptr, int index){
	QMetaObject::invokeMethod(static_cast<QToolBox*>(ptr), "setCurrentIndex", Q_ARG(int, index));
}

void* QToolBox_NewQToolBox(void* parent, int f){
	return new MyQToolBox(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

int QToolBox_AddItem2(void* ptr, void* w, char* text){
	return static_cast<QToolBox*>(ptr)->addItem(static_cast<QWidget*>(w), QString(text));
}

int QToolBox_AddItem(void* ptr, void* widget, void* iconSet, char* text){
	return static_cast<QToolBox*>(ptr)->addItem(static_cast<QWidget*>(widget), *static_cast<QIcon*>(iconSet), QString(text));
}

void QToolBox_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQToolBox*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QToolBox_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QToolBox*>(ptr)->QToolBox::changeEvent(static_cast<QEvent*>(ev));
}

void QToolBox_ConnectCurrentChanged(void* ptr){
	QObject::connect(static_cast<QToolBox*>(ptr), static_cast<void (QToolBox::*)(int)>(&QToolBox::currentChanged), static_cast<MyQToolBox*>(ptr), static_cast<void (MyQToolBox::*)(int)>(&MyQToolBox::Signal_CurrentChanged));;
}

void QToolBox_DisconnectCurrentChanged(void* ptr){
	QObject::disconnect(static_cast<QToolBox*>(ptr), static_cast<void (QToolBox::*)(int)>(&QToolBox::currentChanged), static_cast<MyQToolBox*>(ptr), static_cast<void (MyQToolBox::*)(int)>(&MyQToolBox::Signal_CurrentChanged));;
}

void QToolBox_CurrentChanged(void* ptr, int index){
	static_cast<QToolBox*>(ptr)->currentChanged(index);
}

void* QToolBox_CurrentWidget(void* ptr){
	return static_cast<QToolBox*>(ptr)->currentWidget();
}

int QToolBox_Event(void* ptr, void* e){
	return static_cast<QToolBox*>(ptr)->event(static_cast<QEvent*>(e));
}

int QToolBox_IndexOf(void* ptr, void* widget){
	return static_cast<QToolBox*>(ptr)->indexOf(static_cast<QWidget*>(widget));
}

int QToolBox_InsertItem(void* ptr, int index, void* widget, void* icon, char* text){
	return static_cast<QToolBox*>(ptr)->insertItem(index, static_cast<QWidget*>(widget), *static_cast<QIcon*>(icon), QString(text));
}

int QToolBox_InsertItem2(void* ptr, int index, void* widget, char* text){
	return static_cast<QToolBox*>(ptr)->insertItem(index, static_cast<QWidget*>(widget), QString(text));
}

int QToolBox_IsItemEnabled(void* ptr, int index){
	return static_cast<QToolBox*>(ptr)->isItemEnabled(index);
}

void* QToolBox_ItemIcon(void* ptr, int index){
	return new QIcon(static_cast<QToolBox*>(ptr)->itemIcon(index));
}

void QToolBox_ItemInserted(void* ptr, int index){
	static_cast<MyQToolBox*>(ptr)->itemInserted(index);
}

void QToolBox_ItemInsertedDefault(void* ptr, int index){
	static_cast<QToolBox*>(ptr)->QToolBox::itemInserted(index);
}

void QToolBox_ItemRemoved(void* ptr, int index){
	static_cast<MyQToolBox*>(ptr)->itemRemoved(index);
}

void QToolBox_ItemRemovedDefault(void* ptr, int index){
	static_cast<QToolBox*>(ptr)->QToolBox::itemRemoved(index);
}

char* QToolBox_ItemText(void* ptr, int index){
	return static_cast<QToolBox*>(ptr)->itemText(index).toUtf8().data();
}

char* QToolBox_ItemToolTip(void* ptr, int index){
	return static_cast<QToolBox*>(ptr)->itemToolTip(index).toUtf8().data();
}

void QToolBox_RemoveItem(void* ptr, int index){
	static_cast<QToolBox*>(ptr)->removeItem(index);
}

void QToolBox_SetCurrentWidget(void* ptr, void* widget){
	QMetaObject::invokeMethod(static_cast<QToolBox*>(ptr), "setCurrentWidget", Q_ARG(QWidget*, static_cast<QWidget*>(widget)));
}

void QToolBox_SetItemEnabled(void* ptr, int index, int enabled){
	static_cast<QToolBox*>(ptr)->setItemEnabled(index, enabled != 0);
}

void QToolBox_SetItemIcon(void* ptr, int index, void* icon){
	static_cast<QToolBox*>(ptr)->setItemIcon(index, *static_cast<QIcon*>(icon));
}

void QToolBox_SetItemText(void* ptr, int index, char* text){
	static_cast<QToolBox*>(ptr)->setItemText(index, QString(text));
}

void QToolBox_SetItemToolTip(void* ptr, int index, char* toolTip){
	static_cast<QToolBox*>(ptr)->setItemToolTip(index, QString(toolTip));
}

void QToolBox_ShowEvent(void* ptr, void* e){
	static_cast<MyQToolBox*>(ptr)->showEvent(static_cast<QShowEvent*>(e));
}

void QToolBox_ShowEventDefault(void* ptr, void* e){
	static_cast<QToolBox*>(ptr)->QToolBox::showEvent(static_cast<QShowEvent*>(e));
}

void* QToolBox_Widget(void* ptr, int index){
	return static_cast<QToolBox*>(ptr)->widget(index);
}

void QToolBox_DestroyQToolBox(void* ptr){
	static_cast<QToolBox*>(ptr)->~QToolBox();
}

void QToolBox_PaintEvent(void* ptr, void* v){
	static_cast<MyQToolBox*>(ptr)->paintEvent(static_cast<QPaintEvent*>(v));
}

void QToolBox_PaintEventDefault(void* ptr, void* v){
	static_cast<QToolBox*>(ptr)->QToolBox::paintEvent(static_cast<QPaintEvent*>(v));
}

void QToolBox_ActionEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QToolBox_ActionEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::actionEvent(static_cast<QActionEvent*>(event));
}

void QToolBox_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QToolBox_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QToolBox_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QToolBox_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QToolBox_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QToolBox_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QToolBox_DropEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QToolBox_DropEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::dropEvent(static_cast<QDropEvent*>(event));
}

void QToolBox_EnterEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QToolBox_EnterEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::enterEvent(static_cast<QEvent*>(event));
}

void QToolBox_FocusInEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QToolBox_FocusInEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QToolBox_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QToolBox_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QToolBox_HideEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QToolBox_HideEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::hideEvent(static_cast<QHideEvent*>(event));
}

void QToolBox_LeaveEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QToolBox_LeaveEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::leaveEvent(static_cast<QEvent*>(event));
}

void QToolBox_MoveEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QToolBox_MoveEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::moveEvent(static_cast<QMoveEvent*>(event));
}

void QToolBox_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQToolBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QToolBox_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QToolBox*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QToolBox_CloseEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QToolBox_CloseEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::closeEvent(static_cast<QCloseEvent*>(event));
}

void QToolBox_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QToolBox_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QToolBox_InitPainter(void* ptr, void* painter){
	static_cast<MyQToolBox*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QToolBox_InitPainterDefault(void* ptr, void* painter){
	static_cast<QToolBox*>(ptr)->QToolBox::initPainter(static_cast<QPainter*>(painter));
}

void QToolBox_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QToolBox_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QToolBox_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QToolBox_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QToolBox_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QToolBox_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QToolBox_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QToolBox_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QToolBox_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QToolBox_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QToolBox_MousePressEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QToolBox_MousePressEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QToolBox_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QToolBox_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QToolBox_ResizeEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QToolBox_ResizeEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QToolBox_TabletEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QToolBox_TabletEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QToolBox_WheelEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QToolBox_WheelEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QToolBox_TimerEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QToolBox_TimerEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::timerEvent(static_cast<QTimerEvent*>(event));
}

void QToolBox_ChildEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QToolBox_ChildEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::childEvent(static_cast<QChildEvent*>(event));
}

void QToolBox_CustomEvent(void* ptr, void* event){
	static_cast<MyQToolBox*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QToolBox_CustomEventDefault(void* ptr, void* event){
	static_cast<QToolBox*>(ptr)->QToolBox::customEvent(static_cast<QEvent*>(event));
}

class MyQToolButton: public QToolButton {
public:
	MyQToolButton(QWidget *parent) : QToolButton(parent) {};
	void paintEvent(QPaintEvent * event) { callbackQToolButtonPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQToolButtonActionEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * e) { callbackQToolButtonChangeEvent(this, this->objectName().toUtf8().data(), e); };
	void enterEvent(QEvent * e) { callbackQToolButtonEnterEvent(this, this->objectName().toUtf8().data(), e); };
	void leaveEvent(QEvent * e) { callbackQToolButtonLeaveEvent(this, this->objectName().toUtf8().data(), e); };
	void mousePressEvent(QMouseEvent * e) { callbackQToolButtonMousePressEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseReleaseEvent(QMouseEvent * e) { callbackQToolButtonMouseReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void nextCheckState() { callbackQToolButtonNextCheckState(this, this->objectName().toUtf8().data()); };
	void timerEvent(QTimerEvent * e) { callbackQToolButtonTimerEvent(this, this->objectName().toUtf8().data(), e); };
	void Signal_Triggered(QAction * action) { callbackQToolButtonTriggered(this, this->objectName().toUtf8().data(), action); };
	void checkStateSet() { callbackQToolButtonCheckStateSet(this, this->objectName().toUtf8().data()); };
	void focusInEvent(QFocusEvent * e) { callbackQToolButtonFocusInEvent(this, this->objectName().toUtf8().data(), e); };
	void focusOutEvent(QFocusEvent * e) { callbackQToolButtonFocusOutEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQToolButtonKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void keyReleaseEvent(QKeyEvent * e) { callbackQToolButtonKeyReleaseEvent(this, this->objectName().toUtf8().data(), e); };
	void mouseMoveEvent(QMouseEvent * e) { callbackQToolButtonMouseMoveEvent(this, this->objectName().toUtf8().data(), e); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQToolButtonDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQToolButtonDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQToolButtonDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQToolButtonDropEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQToolButtonHideEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQToolButtonMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQToolButtonSetVisible(this, this->objectName().toUtf8().data(), visible)) { QToolButton::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQToolButtonShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQToolButtonCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQToolButtonContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQToolButtonInitPainter(const_cast<MyQToolButton*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQToolButtonInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQToolButtonMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQToolButtonResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQToolButtonTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQToolButtonWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQToolButtonChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQToolButtonCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QToolButton_ArrowType(void* ptr){
	return static_cast<QToolButton*>(ptr)->arrowType();
}

int QToolButton_AutoRaise(void* ptr){
	return static_cast<QToolButton*>(ptr)->autoRaise();
}

void QToolButton_PaintEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QToolButton_PaintEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::paintEvent(static_cast<QPaintEvent*>(event));
}

int QToolButton_PopupMode(void* ptr){
	return static_cast<QToolButton*>(ptr)->popupMode();
}

void QToolButton_SetArrowType(void* ptr, int ty){
	static_cast<QToolButton*>(ptr)->setArrowType(static_cast<Qt::ArrowType>(ty));
}

void QToolButton_SetAutoRaise(void* ptr, int enable){
	static_cast<QToolButton*>(ptr)->setAutoRaise(enable != 0);
}

void QToolButton_SetPopupMode(void* ptr, int mode){
	static_cast<QToolButton*>(ptr)->setPopupMode(static_cast<QToolButton::ToolButtonPopupMode>(mode));
}

void QToolButton_SetToolButtonStyle(void* ptr, int style){
	QMetaObject::invokeMethod(static_cast<QToolButton*>(ptr), "setToolButtonStyle", Q_ARG(Qt::ToolButtonStyle, static_cast<Qt::ToolButtonStyle>(style)));
}

int QToolButton_ToolButtonStyle(void* ptr){
	return static_cast<QToolButton*>(ptr)->toolButtonStyle();
}

void* QToolButton_NewQToolButton(void* parent){
	return new MyQToolButton(static_cast<QWidget*>(parent));
}

void QToolButton_ActionEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QToolButton_ActionEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::actionEvent(static_cast<QActionEvent*>(event));
}

void QToolButton_ChangeEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->changeEvent(static_cast<QEvent*>(e));
}

void QToolButton_ChangeEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::changeEvent(static_cast<QEvent*>(e));
}

void QToolButton_EnterEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->enterEvent(static_cast<QEvent*>(e));
}

void QToolButton_EnterEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::enterEvent(static_cast<QEvent*>(e));
}

int QToolButton_Event(void* ptr, void* event){
	return static_cast<QToolButton*>(ptr)->event(static_cast<QEvent*>(event));
}

int QToolButton_HitButton(void* ptr, void* pos){
	return static_cast<QToolButton*>(ptr)->hitButton(*static_cast<QPoint*>(pos));
}

void QToolButton_LeaveEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->leaveEvent(static_cast<QEvent*>(e));
}

void QToolButton_LeaveEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::leaveEvent(static_cast<QEvent*>(e));
}

void* QToolButton_Menu(void* ptr){
	return static_cast<QToolButton*>(ptr)->menu();
}

void* QToolButton_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QToolButton*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QToolButton*>(ptr)->minimumSizeHint()).height());
}

void QToolButton_MousePressEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QToolButton_MousePressEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::mousePressEvent(static_cast<QMouseEvent*>(e));
}

void QToolButton_MouseReleaseEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QToolButton_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QToolButton_NextCheckState(void* ptr){
	static_cast<MyQToolButton*>(ptr)->nextCheckState();
}

void QToolButton_NextCheckStateDefault(void* ptr){
	static_cast<QToolButton*>(ptr)->QToolButton::nextCheckState();
}

void QToolButton_SetMenu(void* ptr, void* menu){
	static_cast<QToolButton*>(ptr)->setMenu(static_cast<QMenu*>(menu));
}

void QToolButton_ShowMenu(void* ptr){
	QMetaObject::invokeMethod(static_cast<QToolButton*>(ptr), "showMenu");
}

void* QToolButton_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QToolButton*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QToolButton*>(ptr)->sizeHint()).height());
}

void QToolButton_TimerEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QToolButton_TimerEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::timerEvent(static_cast<QTimerEvent*>(e));
}

void QToolButton_ConnectTriggered(void* ptr){
	QObject::connect(static_cast<QToolButton*>(ptr), static_cast<void (QToolButton::*)(QAction *)>(&QToolButton::triggered), static_cast<MyQToolButton*>(ptr), static_cast<void (MyQToolButton::*)(QAction *)>(&MyQToolButton::Signal_Triggered));;
}

void QToolButton_DisconnectTriggered(void* ptr){
	QObject::disconnect(static_cast<QToolButton*>(ptr), static_cast<void (QToolButton::*)(QAction *)>(&QToolButton::triggered), static_cast<MyQToolButton*>(ptr), static_cast<void (MyQToolButton::*)(QAction *)>(&MyQToolButton::Signal_Triggered));;
}

void QToolButton_Triggered(void* ptr, void* action){
	static_cast<QToolButton*>(ptr)->triggered(static_cast<QAction*>(action));
}

void QToolButton_DestroyQToolButton(void* ptr){
	static_cast<QToolButton*>(ptr)->~QToolButton();
}

void QToolButton_CheckStateSet(void* ptr){
	static_cast<MyQToolButton*>(ptr)->checkStateSet();
}

void QToolButton_CheckStateSetDefault(void* ptr){
	static_cast<QToolButton*>(ptr)->QToolButton::checkStateSet();
}

void QToolButton_FocusInEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(e));
}

void QToolButton_FocusInEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::focusInEvent(static_cast<QFocusEvent*>(e));
}

void QToolButton_FocusOutEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QToolButton_FocusOutEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::focusOutEvent(static_cast<QFocusEvent*>(e));
}

void QToolButton_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QToolButton_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QToolButton_KeyReleaseEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QToolButton_KeyReleaseEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::keyReleaseEvent(static_cast<QKeyEvent*>(e));
}

void QToolButton_MouseMoveEvent(void* ptr, void* e){
	static_cast<MyQToolButton*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QToolButton_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QToolButton*>(ptr)->QToolButton::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QToolButton_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QToolButton_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QToolButton_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QToolButton_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QToolButton_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QToolButton_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QToolButton_DropEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QToolButton_DropEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::dropEvent(static_cast<QDropEvent*>(event));
}

void QToolButton_HideEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QToolButton_HideEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::hideEvent(static_cast<QHideEvent*>(event));
}

void QToolButton_MoveEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QToolButton_MoveEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::moveEvent(static_cast<QMoveEvent*>(event));
}

void QToolButton_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQToolButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QToolButton_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QToolButton*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QToolButton_ShowEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QToolButton_ShowEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::showEvent(static_cast<QShowEvent*>(event));
}

void QToolButton_CloseEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QToolButton_CloseEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::closeEvent(static_cast<QCloseEvent*>(event));
}

void QToolButton_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QToolButton_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QToolButton_InitPainter(void* ptr, void* painter){
	static_cast<MyQToolButton*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QToolButton_InitPainterDefault(void* ptr, void* painter){
	static_cast<QToolButton*>(ptr)->QToolButton::initPainter(static_cast<QPainter*>(painter));
}

void QToolButton_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QToolButton_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QToolButton_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QToolButton_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QToolButton_ResizeEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QToolButton_ResizeEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QToolButton_TabletEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QToolButton_TabletEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QToolButton_WheelEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QToolButton_WheelEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QToolButton_ChildEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QToolButton_ChildEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::childEvent(static_cast<QChildEvent*>(event));
}

void QToolButton_CustomEvent(void* ptr, void* event){
	static_cast<MyQToolButton*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QToolButton_CustomEventDefault(void* ptr, void* event){
	static_cast<QToolButton*>(ptr)->QToolButton::customEvent(static_cast<QEvent*>(event));
}

void* QToolTip_QToolTip_Font(){
	return new QFont(QToolTip::font());
}

void QToolTip_QToolTip_HideText(){
	QToolTip::hideText();
}

int QToolTip_QToolTip_IsVisible(){
	return QToolTip::isVisible();
}

void* QToolTip_QToolTip_Palette(){
	return new QPalette(QToolTip::palette());
}

void QToolTip_QToolTip_SetFont(void* font){
	QToolTip::setFont(*static_cast<QFont*>(font));
}

void QToolTip_QToolTip_SetPalette(void* palette){
	QToolTip::setPalette(*static_cast<QPalette*>(palette));
}

void QToolTip_QToolTip_ShowText3(void* pos, char* text, void* w){
	QToolTip::showText(*static_cast<QPoint*>(pos), QString(text), static_cast<QWidget*>(w));
}

void QToolTip_QToolTip_ShowText(void* pos, char* text, void* w, void* rect){
	QToolTip::showText(*static_cast<QPoint*>(pos), QString(text), static_cast<QWidget*>(w), *static_cast<QRect*>(rect));
}

void QToolTip_QToolTip_ShowText2(void* pos, char* text, void* w, void* rect, int msecDisplayTime){
	QToolTip::showText(*static_cast<QPoint*>(pos), QString(text), static_cast<QWidget*>(w), *static_cast<QRect*>(rect), msecDisplayTime);
}

char* QToolTip_QToolTip_Text(){
	return QToolTip::text().toUtf8().data();
}

class MyQTreeView: public QTreeView {
public:
	MyQTreeView(QWidget *parent) : QTreeView(parent) {};
	void dragMoveEvent(QDragMoveEvent * event) { callbackQTreeViewDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQTreeViewKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyboardSearch(const QString & search) { callbackQTreeViewKeyboardSearch(this, this->objectName().toUtf8().data(), search.toUtf8().data()); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQTreeViewMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQTreeViewMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQTreeViewMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQTreeViewMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQTreeViewPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void reset() { if (!callbackQTreeViewReset(this, this->objectName().toUtf8().data())) { QTreeView::reset(); }; };
	void scrollContentsBy(int dx, int dy) { callbackQTreeViewScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void selectAll() { if (!callbackQTreeViewSelectAll(this, this->objectName().toUtf8().data())) { QTreeView::selectAll(); }; };
	void setModel(QAbstractItemModel * model) { callbackQTreeViewSetModel(this, this->objectName().toUtf8().data(), model); };
	void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags command) { callbackQTreeViewSetSelection(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), command); };
	void setSelectionModel(QItemSelectionModel * selectionModel) { callbackQTreeViewSetSelectionModel(this, this->objectName().toUtf8().data(), selectionModel); };
	void timerEvent(QTimerEvent * event) { callbackQTreeViewTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void updateGeometries() { if (!callbackQTreeViewUpdateGeometries(this, this->objectName().toUtf8().data())) { QTreeView::updateGeometries(); }; };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQTreeViewDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { if (!callbackQTreeViewCloseEditor(this, this->objectName().toUtf8().data(), editor, hint)) { QTreeView::closeEditor(editor, hint); }; };
	void commitData(QWidget * editor) { if (!callbackQTreeViewCommitData(this, this->objectName().toUtf8().data(), editor)) { QTreeView::commitData(editor); }; };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQTreeViewDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQTreeViewDropEvent(this, this->objectName().toUtf8().data(), event); };
	void editorDestroyed(QObject * editor) { if (!callbackQTreeViewEditorDestroyed(this, this->objectName().toUtf8().data(), editor)) { QTreeView::editorDestroyed(editor); }; };
	void focusInEvent(QFocusEvent * event) { callbackQTreeViewFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQTreeViewFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQTreeViewInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQTreeViewResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void startDrag(Qt::DropActions supportedActions) { callbackQTreeViewStartDrag(this, this->objectName().toUtf8().data(), supportedActions); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQTreeViewContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void setupViewport(QWidget * viewport) { callbackQTreeViewSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQTreeViewWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQTreeViewChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQTreeViewActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQTreeViewEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQTreeViewHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQTreeViewLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQTreeViewMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQTreeViewSetVisible(this, this->objectName().toUtf8().data(), visible)) { QTreeView::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQTreeViewShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQTreeViewCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQTreeViewInitPainter(const_cast<MyQTreeView*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQTreeViewKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQTreeViewTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQTreeViewChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQTreeViewCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QTreeView_AllColumnsShowFocus(void* ptr){
	return static_cast<QTreeView*>(ptr)->allColumnsShowFocus();
}

int QTreeView_AutoExpandDelay(void* ptr){
	return static_cast<QTreeView*>(ptr)->autoExpandDelay();
}

void QTreeView_Collapse(void* ptr, void* index){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "collapse", Q_ARG(QModelIndex, *static_cast<QModelIndex*>(index)));
}

void QTreeView_Expand(void* ptr, void* index){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "expand", Q_ARG(QModelIndex, *static_cast<QModelIndex*>(index)));
}

int QTreeView_ExpandsOnDoubleClick(void* ptr){
	return static_cast<QTreeView*>(ptr)->expandsOnDoubleClick();
}

int QTreeView_Indentation(void* ptr){
	return static_cast<QTreeView*>(ptr)->indentation();
}

int QTreeView_IsAnimated(void* ptr){
	return static_cast<QTreeView*>(ptr)->isAnimated();
}

int QTreeView_IsExpanded(void* ptr, void* index){
	return static_cast<QTreeView*>(ptr)->isExpanded(*static_cast<QModelIndex*>(index));
}

int QTreeView_IsHeaderHidden(void* ptr){
	return static_cast<QTreeView*>(ptr)->isHeaderHidden();
}

int QTreeView_IsSortingEnabled(void* ptr){
	return static_cast<QTreeView*>(ptr)->isSortingEnabled();
}

int QTreeView_ItemsExpandable(void* ptr){
	return static_cast<QTreeView*>(ptr)->itemsExpandable();
}

void QTreeView_ResetIndentation(void* ptr){
	static_cast<QTreeView*>(ptr)->resetIndentation();
}

int QTreeView_RootIsDecorated(void* ptr){
	return static_cast<QTreeView*>(ptr)->rootIsDecorated();
}

void QTreeView_SetAllColumnsShowFocus(void* ptr, int enable){
	static_cast<QTreeView*>(ptr)->setAllColumnsShowFocus(enable != 0);
}

void QTreeView_SetAnimated(void* ptr, int enable){
	static_cast<QTreeView*>(ptr)->setAnimated(enable != 0);
}

void QTreeView_SetAutoExpandDelay(void* ptr, int delay){
	static_cast<QTreeView*>(ptr)->setAutoExpandDelay(delay);
}

void QTreeView_SetExpandsOnDoubleClick(void* ptr, int enable){
	static_cast<QTreeView*>(ptr)->setExpandsOnDoubleClick(enable != 0);
}

void QTreeView_SetHeaderHidden(void* ptr, int hide){
	static_cast<QTreeView*>(ptr)->setHeaderHidden(hide != 0);
}

void QTreeView_SetIndentation(void* ptr, int i){
	static_cast<QTreeView*>(ptr)->setIndentation(i);
}

void QTreeView_SetItemsExpandable(void* ptr, int enable){
	static_cast<QTreeView*>(ptr)->setItemsExpandable(enable != 0);
}

void QTreeView_SetRootIsDecorated(void* ptr, int show){
	static_cast<QTreeView*>(ptr)->setRootIsDecorated(show != 0);
}

void QTreeView_SetSortingEnabled(void* ptr, int enable){
	static_cast<QTreeView*>(ptr)->setSortingEnabled(enable != 0);
}

void QTreeView_SetUniformRowHeights(void* ptr, int uniform){
	static_cast<QTreeView*>(ptr)->setUniformRowHeights(uniform != 0);
}

void QTreeView_SetWordWrap(void* ptr, int on){
	static_cast<QTreeView*>(ptr)->setWordWrap(on != 0);
}

int QTreeView_UniformRowHeights(void* ptr){
	return static_cast<QTreeView*>(ptr)->uniformRowHeights();
}

int QTreeView_WordWrap(void* ptr){
	return static_cast<QTreeView*>(ptr)->wordWrap();
}

void* QTreeView_NewQTreeView(void* parent){
	return new MyQTreeView(static_cast<QWidget*>(parent));
}

void QTreeView_CollapseAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "collapseAll");
}

int QTreeView_ColumnAt(void* ptr, int x){
	return static_cast<QTreeView*>(ptr)->columnAt(x);
}

int QTreeView_ColumnViewportPosition(void* ptr, int column){
	return static_cast<QTreeView*>(ptr)->columnViewportPosition(column);
}

int QTreeView_ColumnWidth(void* ptr, int column){
	return static_cast<QTreeView*>(ptr)->columnWidth(column);
}

void QTreeView_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTreeView_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTreeView_ExpandAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "expandAll");
}

void QTreeView_ExpandToDepth(void* ptr, int depth){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "expandToDepth", Q_ARG(int, depth));
}

void* QTreeView_Header(void* ptr){
	return static_cast<QTreeView*>(ptr)->header();
}

void QTreeView_HideColumn(void* ptr, int column){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "hideColumn", Q_ARG(int, column));
}

int QTreeView_HorizontalOffset(void* ptr){
	return static_cast<QTreeView*>(ptr)->horizontalOffset();
}

int QTreeView_IsColumnHidden(void* ptr, int column){
	return static_cast<QTreeView*>(ptr)->isColumnHidden(column);
}

int QTreeView_IsFirstColumnSpanned(void* ptr, int row, void* parent){
	return static_cast<QTreeView*>(ptr)->isFirstColumnSpanned(row, *static_cast<QModelIndex*>(parent));
}

int QTreeView_IsIndexHidden(void* ptr, void* index){
	return static_cast<QTreeView*>(ptr)->isIndexHidden(*static_cast<QModelIndex*>(index));
}

int QTreeView_IsRowHidden(void* ptr, int row, void* parent){
	return static_cast<QTreeView*>(ptr)->isRowHidden(row, *static_cast<QModelIndex*>(parent));
}

void QTreeView_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTreeView_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTreeView_KeyboardSearch(void* ptr, char* search){
	static_cast<MyQTreeView*>(ptr)->keyboardSearch(QString(search));
}

void QTreeView_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QTreeView*>(ptr)->QTreeView::keyboardSearch(QString(search));
}

void QTreeView_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTreeView_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTreeView_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTreeView_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTreeView_MousePressEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTreeView_MousePressEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTreeView_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTreeView_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTreeView_PaintEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QTreeView_PaintEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::paintEvent(static_cast<QPaintEvent*>(event));
}

void QTreeView_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTreeView*>(ptr), "reset");
}

void QTreeView_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "reset");
}

void QTreeView_ResizeColumnToContents(void* ptr, int column){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "resizeColumnToContents", Q_ARG(int, column));
}

void QTreeView_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQTreeView*>(ptr)->scrollContentsBy(dx, dy);
}

void QTreeView_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QTreeView*>(ptr)->QTreeView::scrollContentsBy(dx, dy);
}

void QTreeView_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTreeView*>(ptr), "selectAll");
}

void QTreeView_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "selectAll");
}

void QTreeView_SetColumnHidden(void* ptr, int column, int hide){
	static_cast<QTreeView*>(ptr)->setColumnHidden(column, hide != 0);
}

void QTreeView_SetColumnWidth(void* ptr, int column, int width){
	static_cast<QTreeView*>(ptr)->setColumnWidth(column, width);
}

void QTreeView_SetExpanded(void* ptr, void* index, int expanded){
	static_cast<QTreeView*>(ptr)->setExpanded(*static_cast<QModelIndex*>(index), expanded != 0);
}

void QTreeView_SetFirstColumnSpanned(void* ptr, int row, void* parent, int span){
	static_cast<QTreeView*>(ptr)->setFirstColumnSpanned(row, *static_cast<QModelIndex*>(parent), span != 0);
}

void QTreeView_SetHeader(void* ptr, void* header){
	static_cast<QTreeView*>(ptr)->setHeader(static_cast<QHeaderView*>(header));
}

void QTreeView_SetModel(void* ptr, void* model){
	static_cast<MyQTreeView*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QTreeView_SetModelDefault(void* ptr, void* model){
	static_cast<QTreeView*>(ptr)->QTreeView::setModel(static_cast<QAbstractItemModel*>(model));
}

void QTreeView_SetRowHidden(void* ptr, int row, void* parent, int hide){
	static_cast<QTreeView*>(ptr)->setRowHidden(row, *static_cast<QModelIndex*>(parent), hide != 0);
}

void QTreeView_SetSelection(void* ptr, void* rect, int command){
	static_cast<MyQTreeView*>(ptr)->setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QTreeView_SetSelectionDefault(void* ptr, void* rect, int command){
	static_cast<QTreeView*>(ptr)->QTreeView::setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QTreeView_SetSelectionModel(void* ptr, void* selectionModel){
	static_cast<MyQTreeView*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QTreeView_SetSelectionModelDefault(void* ptr, void* selectionModel){
	static_cast<QTreeView*>(ptr)->QTreeView::setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QTreeView_SetTreePosition(void* ptr, int index){
	static_cast<QTreeView*>(ptr)->setTreePosition(index);
}

void QTreeView_ShowColumn(void* ptr, int column){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "showColumn", Q_ARG(int, column));
}

int QTreeView_SizeHintForColumn(void* ptr, int column){
	return static_cast<QTreeView*>(ptr)->sizeHintForColumn(column);
}

void QTreeView_SortByColumn(void* ptr, int column, int order){
	static_cast<QTreeView*>(ptr)->sortByColumn(column, static_cast<Qt::SortOrder>(order));
}

void QTreeView_TimerEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTreeView_TimerEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::timerEvent(static_cast<QTimerEvent*>(event));
}

int QTreeView_TreePosition(void* ptr){
	return static_cast<QTreeView*>(ptr)->treePosition();
}

void QTreeView_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTreeView*>(ptr), "updateGeometries");
}

void QTreeView_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "updateGeometries");
}

int QTreeView_VerticalOffset(void* ptr){
	return static_cast<QTreeView*>(ptr)->verticalOffset();
}

int QTreeView_ViewportEvent(void* ptr, void* event){
	return static_cast<QTreeView*>(ptr)->viewportEvent(static_cast<QEvent*>(event));
}

void* QTreeView_ViewportSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QTreeView*>(ptr)->viewportSizeHint()).width(), static_cast<QSize>(static_cast<QTreeView*>(ptr)->viewportSizeHint()).height());
}

void* QTreeView_VisualRect(void* ptr, void* index){
	return new QRect(static_cast<QRect>(static_cast<QTreeView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).x(), static_cast<QRect>(static_cast<QTreeView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).y(), static_cast<QRect>(static_cast<QTreeView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).width(), static_cast<QRect>(static_cast<QTreeView*>(ptr)->visualRect(*static_cast<QModelIndex*>(index))).height());
}

void* QTreeView_VisualRegionForSelection(void* ptr, void* selection){
	return new QRegion(static_cast<QTreeView*>(ptr)->visualRegionForSelection(*static_cast<QItemSelection*>(selection)));
}

void QTreeView_DestroyQTreeView(void* ptr){
	static_cast<QTreeView*>(ptr)->~QTreeView();
}

void QTreeView_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTreeView_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTreeView_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<MyQTreeView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QTreeView_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QTreeView_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQTreeView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QTreeView_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QTreeView_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTreeView_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTreeView_DropEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QTreeView_DropEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::dropEvent(static_cast<QDropEvent*>(event));
}

void QTreeView_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQTreeView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QTreeView_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QTreeView_FocusInEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTreeView_FocusInEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTreeView_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTreeView_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTreeView_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTreeView_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTreeView_ResizeEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTreeView_ResizeEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTreeView_StartDrag(void* ptr, int supportedActions){
	static_cast<MyQTreeView*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QTreeView_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QTreeView*>(ptr)->QTreeView::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QTreeView_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQTreeView*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QTreeView_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QTreeView*>(ptr)->QTreeView::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QTreeView_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQTreeView*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QTreeView_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QTreeView*>(ptr)->QTreeView::setupViewport(static_cast<QWidget*>(viewport));
}

void QTreeView_WheelEvent(void* ptr, void* e){
	static_cast<MyQTreeView*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTreeView_WheelEventDefault(void* ptr, void* e){
	static_cast<QTreeView*>(ptr)->QTreeView::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTreeView_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQTreeView*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QTreeView_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QTreeView*>(ptr)->QTreeView::changeEvent(static_cast<QEvent*>(ev));
}

void QTreeView_ActionEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QTreeView_ActionEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::actionEvent(static_cast<QActionEvent*>(event));
}

void QTreeView_EnterEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QTreeView_EnterEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::enterEvent(static_cast<QEvent*>(event));
}

void QTreeView_HideEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QTreeView_HideEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::hideEvent(static_cast<QHideEvent*>(event));
}

void QTreeView_LeaveEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QTreeView_LeaveEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::leaveEvent(static_cast<QEvent*>(event));
}

void QTreeView_MoveEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QTreeView_MoveEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::moveEvent(static_cast<QMoveEvent*>(event));
}

void QTreeView_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQTreeView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTreeView_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTreeView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTreeView_ShowEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QTreeView_ShowEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::showEvent(static_cast<QShowEvent*>(event));
}

void QTreeView_CloseEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QTreeView_CloseEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::closeEvent(static_cast<QCloseEvent*>(event));
}

void QTreeView_InitPainter(void* ptr, void* painter){
	static_cast<MyQTreeView*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QTreeView_InitPainterDefault(void* ptr, void* painter){
	static_cast<QTreeView*>(ptr)->QTreeView::initPainter(static_cast<QPainter*>(painter));
}

void QTreeView_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTreeView_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTreeView_TabletEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTreeView_TabletEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTreeView_ChildEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTreeView_ChildEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::childEvent(static_cast<QChildEvent*>(event));
}

void QTreeView_CustomEvent(void* ptr, void* event){
	static_cast<MyQTreeView*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTreeView_CustomEventDefault(void* ptr, void* event){
	static_cast<QTreeView*>(ptr)->QTreeView::customEvent(static_cast<QEvent*>(event));
}

class MyQTreeWidget: public QTreeWidget {
public:
	MyQTreeWidget(QWidget *parent) : QTreeWidget(parent) {};
	void Signal_CurrentItemChanged(QTreeWidgetItem * current, QTreeWidgetItem * previous) { callbackQTreeWidgetCurrentItemChanged(this, this->objectName().toUtf8().data(), current, previous); };
	void dropEvent(QDropEvent * event) { callbackQTreeWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_ItemActivated(QTreeWidgetItem * item, int column) { callbackQTreeWidgetItemActivated(this, this->objectName().toUtf8().data(), item, column); };
	void Signal_ItemChanged(QTreeWidgetItem * item, int column) { callbackQTreeWidgetItemChanged(this, this->objectName().toUtf8().data(), item, column); };
	void Signal_ItemClicked(QTreeWidgetItem * item, int column) { callbackQTreeWidgetItemClicked(this, this->objectName().toUtf8().data(), item, column); };
	void Signal_ItemCollapsed(QTreeWidgetItem * item) { callbackQTreeWidgetItemCollapsed(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemDoubleClicked(QTreeWidgetItem * item, int column) { callbackQTreeWidgetItemDoubleClicked(this, this->objectName().toUtf8().data(), item, column); };
	void Signal_ItemEntered(QTreeWidgetItem * item, int column) { callbackQTreeWidgetItemEntered(this, this->objectName().toUtf8().data(), item, column); };
	void Signal_ItemExpanded(QTreeWidgetItem * item) { callbackQTreeWidgetItemExpanded(this, this->objectName().toUtf8().data(), item); };
	void Signal_ItemPressed(QTreeWidgetItem * item, int column) { callbackQTreeWidgetItemPressed(this, this->objectName().toUtf8().data(), item, column); };
	void Signal_ItemSelectionChanged() { callbackQTreeWidgetItemSelectionChanged(this, this->objectName().toUtf8().data()); };
	void setSelectionModel(QItemSelectionModel * selectionModel) { callbackQTreeWidgetSetSelectionModel(this, this->objectName().toUtf8().data(), selectionModel); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQTreeWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQTreeWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyboardSearch(const QString & search) { callbackQTreeWidgetKeyboardSearch(this, this->objectName().toUtf8().data(), search.toUtf8().data()); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQTreeWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQTreeWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQTreeWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQTreeWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQTreeWidgetPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void reset() { if (!callbackQTreeWidgetReset(this, this->objectName().toUtf8().data())) { QTreeWidget::reset(); }; };
	void scrollContentsBy(int dx, int dy) { callbackQTreeWidgetScrollContentsBy(this, this->objectName().toUtf8().data(), dx, dy); };
	void selectAll() { if (!callbackQTreeWidgetSelectAll(this, this->objectName().toUtf8().data())) { QTreeWidget::selectAll(); }; };
	void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags command) { callbackQTreeWidgetSetSelection(this, this->objectName().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height()), command); };
	void timerEvent(QTimerEvent * event) { callbackQTreeWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void updateGeometries() { if (!callbackQTreeWidgetUpdateGeometries(this, this->objectName().toUtf8().data())) { QTreeWidget::updateGeometries(); }; };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQTreeWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEditor(QWidget * editor, QAbstractItemDelegate::EndEditHint hint) { if (!callbackQTreeWidgetCloseEditor(this, this->objectName().toUtf8().data(), editor, hint)) { QTreeWidget::closeEditor(editor, hint); }; };
	void commitData(QWidget * editor) { if (!callbackQTreeWidgetCommitData(this, this->objectName().toUtf8().data(), editor)) { QTreeWidget::commitData(editor); }; };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQTreeWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void editorDestroyed(QObject * editor) { if (!callbackQTreeWidgetEditorDestroyed(this, this->objectName().toUtf8().data(), editor)) { QTreeWidget::editorDestroyed(editor); }; };
	void focusInEvent(QFocusEvent * event) { callbackQTreeWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQTreeWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQTreeWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQTreeWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void startDrag(Qt::DropActions supportedActions) { callbackQTreeWidgetStartDrag(this, this->objectName().toUtf8().data(), supportedActions); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQTreeWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void setupViewport(QWidget * viewport) { callbackQTreeWidgetSetupViewport(this, this->objectName().toUtf8().data(), viewport); };
	void wheelEvent(QWheelEvent * e) { callbackQTreeWidgetWheelEvent(this, this->objectName().toUtf8().data(), e); };
	void changeEvent(QEvent * ev) { callbackQTreeWidgetChangeEvent(this, this->objectName().toUtf8().data(), ev); };
	void actionEvent(QActionEvent * event) { callbackQTreeWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQTreeWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQTreeWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQTreeWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQTreeWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQTreeWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QTreeWidget::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQTreeWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQTreeWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQTreeWidgetInitPainter(const_cast<MyQTreeWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQTreeWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQTreeWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQTreeWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQTreeWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QTreeWidget_ColumnCount(void* ptr){
	return static_cast<QTreeWidget*>(ptr)->columnCount();
}

void QTreeWidget_SetColumnCount(void* ptr, int columns){
	static_cast<QTreeWidget*>(ptr)->setColumnCount(columns);
}

int QTreeWidget_TopLevelItemCount(void* ptr){
	return static_cast<QTreeWidget*>(ptr)->topLevelItemCount();
}

void* QTreeWidget_NewQTreeWidget(void* parent){
	return new MyQTreeWidget(static_cast<QWidget*>(parent));
}

void QTreeWidget_AddTopLevelItem(void* ptr, void* item){
	static_cast<QTreeWidget*>(ptr)->addTopLevelItem(static_cast<QTreeWidgetItem*>(item));
}

void QTreeWidget_Clear(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "clear");
}

void QTreeWidget_ClosePersistentEditor(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->closePersistentEditor(static_cast<QTreeWidgetItem*>(item), column);
}

void QTreeWidget_CollapseItem(void* ptr, void* item){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "collapseItem", Q_ARG(QTreeWidgetItem*, static_cast<QTreeWidgetItem*>(item)));
}

int QTreeWidget_CurrentColumn(void* ptr){
	return static_cast<QTreeWidget*>(ptr)->currentColumn();
}

void* QTreeWidget_CurrentItem(void* ptr){
	return static_cast<QTreeWidget*>(ptr)->currentItem();
}

void QTreeWidget_ConnectCurrentItemChanged(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, QTreeWidgetItem *)>(&QTreeWidget::currentItemChanged), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, QTreeWidgetItem *)>(&MyQTreeWidget::Signal_CurrentItemChanged));;
}

void QTreeWidget_DisconnectCurrentItemChanged(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, QTreeWidgetItem *)>(&QTreeWidget::currentItemChanged), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, QTreeWidgetItem *)>(&MyQTreeWidget::Signal_CurrentItemChanged));;
}

void QTreeWidget_CurrentItemChanged(void* ptr, void* current, void* previous){
	static_cast<QTreeWidget*>(ptr)->currentItemChanged(static_cast<QTreeWidgetItem*>(current), static_cast<QTreeWidgetItem*>(previous));
}

void QTreeWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QTreeWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::dropEvent(static_cast<QDropEvent*>(event));
}

int QTreeWidget_DropMimeData(void* ptr, void* parent, int index, void* data, int action){
	return static_cast<QTreeWidget*>(ptr)->dropMimeData(static_cast<QTreeWidgetItem*>(parent), index, static_cast<QMimeData*>(data), static_cast<Qt::DropAction>(action));
}

void QTreeWidget_EditItem(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->editItem(static_cast<QTreeWidgetItem*>(item), column);
}

int QTreeWidget_Event(void* ptr, void* e){
	return static_cast<QTreeWidget*>(ptr)->event(static_cast<QEvent*>(e));
}

void QTreeWidget_ExpandItem(void* ptr, void* item){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "expandItem", Q_ARG(QTreeWidgetItem*, static_cast<QTreeWidgetItem*>(item)));
}

void* QTreeWidget_HeaderItem(void* ptr){
	return static_cast<QTreeWidget*>(ptr)->headerItem();
}

int QTreeWidget_IndexOfTopLevelItem(void* ptr, void* item){
	return static_cast<QTreeWidget*>(ptr)->indexOfTopLevelItem(static_cast<QTreeWidgetItem*>(item));
}

void QTreeWidget_InsertTopLevelItem(void* ptr, int index, void* item){
	static_cast<QTreeWidget*>(ptr)->insertTopLevelItem(index, static_cast<QTreeWidgetItem*>(item));
}

void* QTreeWidget_InvisibleRootItem(void* ptr){
	return static_cast<QTreeWidget*>(ptr)->invisibleRootItem();
}

int QTreeWidget_IsFirstItemColumnSpanned(void* ptr, void* item){
	return static_cast<QTreeWidget*>(ptr)->isFirstItemColumnSpanned(static_cast<QTreeWidgetItem*>(item));
}

void* QTreeWidget_ItemAbove(void* ptr, void* item){
	return static_cast<QTreeWidget*>(ptr)->itemAbove(static_cast<QTreeWidgetItem*>(item));
}

void QTreeWidget_ConnectItemActivated(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemActivated), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemActivated));;
}

void QTreeWidget_DisconnectItemActivated(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemActivated), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemActivated));;
}

void QTreeWidget_ItemActivated(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->itemActivated(static_cast<QTreeWidgetItem*>(item), column);
}

void* QTreeWidget_ItemAt(void* ptr, void* p){
	return static_cast<QTreeWidget*>(ptr)->itemAt(*static_cast<QPoint*>(p));
}

void* QTreeWidget_ItemAt2(void* ptr, int x, int y){
	return static_cast<QTreeWidget*>(ptr)->itemAt(x, y);
}

void* QTreeWidget_ItemBelow(void* ptr, void* item){
	return static_cast<QTreeWidget*>(ptr)->itemBelow(static_cast<QTreeWidgetItem*>(item));
}

void QTreeWidget_ConnectItemChanged(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemChanged), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemChanged));;
}

void QTreeWidget_DisconnectItemChanged(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemChanged), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemChanged));;
}

void QTreeWidget_ItemChanged(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->itemChanged(static_cast<QTreeWidgetItem*>(item), column);
}

void QTreeWidget_ConnectItemClicked(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemClicked), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemClicked));;
}

void QTreeWidget_DisconnectItemClicked(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemClicked), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemClicked));;
}

void QTreeWidget_ItemClicked(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->itemClicked(static_cast<QTreeWidgetItem*>(item), column);
}

void QTreeWidget_ConnectItemCollapsed(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *)>(&QTreeWidget::itemCollapsed), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *)>(&MyQTreeWidget::Signal_ItemCollapsed));;
}

void QTreeWidget_DisconnectItemCollapsed(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *)>(&QTreeWidget::itemCollapsed), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *)>(&MyQTreeWidget::Signal_ItemCollapsed));;
}

void QTreeWidget_ItemCollapsed(void* ptr, void* item){
	static_cast<QTreeWidget*>(ptr)->itemCollapsed(static_cast<QTreeWidgetItem*>(item));
}

void QTreeWidget_ConnectItemDoubleClicked(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemDoubleClicked), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemDoubleClicked));;
}

void QTreeWidget_DisconnectItemDoubleClicked(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemDoubleClicked), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemDoubleClicked));;
}

void QTreeWidget_ItemDoubleClicked(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->itemDoubleClicked(static_cast<QTreeWidgetItem*>(item), column);
}

void QTreeWidget_ConnectItemEntered(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemEntered), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemEntered));;
}

void QTreeWidget_DisconnectItemEntered(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemEntered), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemEntered));;
}

void QTreeWidget_ItemEntered(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->itemEntered(static_cast<QTreeWidgetItem*>(item), column);
}

void QTreeWidget_ConnectItemExpanded(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *)>(&QTreeWidget::itemExpanded), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *)>(&MyQTreeWidget::Signal_ItemExpanded));;
}

void QTreeWidget_DisconnectItemExpanded(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *)>(&QTreeWidget::itemExpanded), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *)>(&MyQTreeWidget::Signal_ItemExpanded));;
}

void QTreeWidget_ItemExpanded(void* ptr, void* item){
	static_cast<QTreeWidget*>(ptr)->itemExpanded(static_cast<QTreeWidgetItem*>(item));
}

void QTreeWidget_ConnectItemPressed(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemPressed), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemPressed));;
}

void QTreeWidget_DisconnectItemPressed(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)(QTreeWidgetItem *, int)>(&QTreeWidget::itemPressed), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)(QTreeWidgetItem *, int)>(&MyQTreeWidget::Signal_ItemPressed));;
}

void QTreeWidget_ItemPressed(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->itemPressed(static_cast<QTreeWidgetItem*>(item), column);
}

void QTreeWidget_ConnectItemSelectionChanged(void* ptr){
	QObject::connect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)()>(&QTreeWidget::itemSelectionChanged), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)()>(&MyQTreeWidget::Signal_ItemSelectionChanged));;
}

void QTreeWidget_DisconnectItemSelectionChanged(void* ptr){
	QObject::disconnect(static_cast<QTreeWidget*>(ptr), static_cast<void (QTreeWidget::*)()>(&QTreeWidget::itemSelectionChanged), static_cast<MyQTreeWidget*>(ptr), static_cast<void (MyQTreeWidget::*)()>(&MyQTreeWidget::Signal_ItemSelectionChanged));;
}

void QTreeWidget_ItemSelectionChanged(void* ptr){
	static_cast<QTreeWidget*>(ptr)->itemSelectionChanged();
}

void* QTreeWidget_ItemWidget(void* ptr, void* item, int column){
	return static_cast<QTreeWidget*>(ptr)->itemWidget(static_cast<QTreeWidgetItem*>(item), column);
}

char* QTreeWidget_MimeTypes(void* ptr){
	return static_cast<QTreeWidget*>(ptr)->mimeTypes().join("|").toUtf8().data();
}

void QTreeWidget_OpenPersistentEditor(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->openPersistentEditor(static_cast<QTreeWidgetItem*>(item), column);
}

void QTreeWidget_RemoveItemWidget(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->removeItemWidget(static_cast<QTreeWidgetItem*>(item), column);
}

void QTreeWidget_ScrollToItem(void* ptr, void* item, int hint){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "scrollToItem", Q_ARG(QTreeWidgetItem*, static_cast<QTreeWidgetItem*>(item)), Q_ARG(QAbstractItemView::ScrollHint, static_cast<QAbstractItemView::ScrollHint>(hint)));
}

void QTreeWidget_SetCurrentItem(void* ptr, void* item){
	static_cast<QTreeWidget*>(ptr)->setCurrentItem(static_cast<QTreeWidgetItem*>(item));
}

void QTreeWidget_SetCurrentItem2(void* ptr, void* item, int column){
	static_cast<QTreeWidget*>(ptr)->setCurrentItem(static_cast<QTreeWidgetItem*>(item), column);
}

void QTreeWidget_SetCurrentItem3(void* ptr, void* item, int column, int command){
	static_cast<QTreeWidget*>(ptr)->setCurrentItem(static_cast<QTreeWidgetItem*>(item), column, static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QTreeWidget_SetFirstItemColumnSpanned(void* ptr, void* item, int span){
	static_cast<QTreeWidget*>(ptr)->setFirstItemColumnSpanned(static_cast<QTreeWidgetItem*>(item), span != 0);
}

void QTreeWidget_SetHeaderItem(void* ptr, void* item){
	static_cast<QTreeWidget*>(ptr)->setHeaderItem(static_cast<QTreeWidgetItem*>(item));
}

void QTreeWidget_SetHeaderLabel(void* ptr, char* label){
	static_cast<QTreeWidget*>(ptr)->setHeaderLabel(QString(label));
}

void QTreeWidget_SetHeaderLabels(void* ptr, char* labels){
	static_cast<QTreeWidget*>(ptr)->setHeaderLabels(QString(labels).split("|", QString::SkipEmptyParts));
}

void QTreeWidget_SetItemWidget(void* ptr, void* item, int column, void* widget){
	static_cast<QTreeWidget*>(ptr)->setItemWidget(static_cast<QTreeWidgetItem*>(item), column, static_cast<QWidget*>(widget));
}

void QTreeWidget_SetSelectionModel(void* ptr, void* selectionModel){
	static_cast<MyQTreeWidget*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QTreeWidget_SetSelectionModelDefault(void* ptr, void* selectionModel){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

int QTreeWidget_SortColumn(void* ptr){
	return static_cast<QTreeWidget*>(ptr)->sortColumn();
}

void QTreeWidget_SortItems(void* ptr, int column, int order){
	static_cast<QTreeWidget*>(ptr)->sortItems(column, static_cast<Qt::SortOrder>(order));
}

int QTreeWidget_SupportedDropActions(void* ptr){
	return static_cast<QTreeWidget*>(ptr)->supportedDropActions();
}

void* QTreeWidget_TakeTopLevelItem(void* ptr, int index){
	return static_cast<QTreeWidget*>(ptr)->takeTopLevelItem(index);
}

void* QTreeWidget_TopLevelItem(void* ptr, int index){
	return static_cast<QTreeWidget*>(ptr)->topLevelItem(index);
}

void* QTreeWidget_VisualItemRect(void* ptr, void* item){
	return new QRect(static_cast<QRect>(static_cast<QTreeWidget*>(ptr)->visualItemRect(static_cast<QTreeWidgetItem*>(item))).x(), static_cast<QRect>(static_cast<QTreeWidget*>(ptr)->visualItemRect(static_cast<QTreeWidgetItem*>(item))).y(), static_cast<QRect>(static_cast<QTreeWidget*>(ptr)->visualItemRect(static_cast<QTreeWidgetItem*>(item))).width(), static_cast<QRect>(static_cast<QTreeWidget*>(ptr)->visualItemRect(static_cast<QTreeWidgetItem*>(item))).height());
}

void QTreeWidget_DestroyQTreeWidget(void* ptr){
	static_cast<QTreeWidget*>(ptr)->~QTreeWidget();
}

void QTreeWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTreeWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QTreeWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTreeWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QTreeWidget_KeyboardSearch(void* ptr, char* search){
	static_cast<MyQTreeWidget*>(ptr)->keyboardSearch(QString(search));
}

void QTreeWidget_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::keyboardSearch(QString(search));
}

void QTreeWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTreeWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QTreeWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTreeWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QTreeWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTreeWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QTreeWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTreeWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QTreeWidget_PaintEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QTreeWidget_PaintEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::paintEvent(static_cast<QPaintEvent*>(event));
}

void QTreeWidget_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTreeWidget*>(ptr), "reset");
}

void QTreeWidget_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "reset");
}

void QTreeWidget_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<MyQTreeWidget*>(ptr)->scrollContentsBy(dx, dy);
}

void QTreeWidget_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::scrollContentsBy(dx, dy);
}

void QTreeWidget_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTreeWidget*>(ptr), "selectAll");
}

void QTreeWidget_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "selectAll");
}

void QTreeWidget_SetSelection(void* ptr, void* rect, int command){
	static_cast<MyQTreeWidget*>(ptr)->setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QTreeWidget_SetSelectionDefault(void* ptr, void* rect, int command){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QTreeWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QTreeWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QTreeWidget_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQTreeWidget*>(ptr), "updateGeometries");
}

void QTreeWidget_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "updateGeometries");
}

void QTreeWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTreeWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QTreeWidget_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<MyQTreeWidget*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QTreeWidget_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QTreeWidget_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQTreeWidget*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QTreeWidget_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QTreeWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTreeWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QTreeWidget_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<MyQTreeWidget*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QTreeWidget_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QTreeWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTreeWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QTreeWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTreeWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QTreeWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTreeWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QTreeWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTreeWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QTreeWidget_StartDrag(void* ptr, int supportedActions){
	static_cast<MyQTreeWidget*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QTreeWidget_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QTreeWidget_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQTreeWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QTreeWidget_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QTreeWidget_SetupViewport(void* ptr, void* viewport){
	static_cast<MyQTreeWidget*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QTreeWidget_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::setupViewport(static_cast<QWidget*>(viewport));
}

void QTreeWidget_WheelEvent(void* ptr, void* e){
	static_cast<MyQTreeWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTreeWidget_WheelEventDefault(void* ptr, void* e){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QTreeWidget_ChangeEvent(void* ptr, void* ev){
	static_cast<MyQTreeWidget*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QTreeWidget_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::changeEvent(static_cast<QEvent*>(ev));
}

void QTreeWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QTreeWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QTreeWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QTreeWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::enterEvent(static_cast<QEvent*>(event));
}

void QTreeWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QTreeWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::hideEvent(static_cast<QHideEvent*>(event));
}

void QTreeWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QTreeWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::leaveEvent(static_cast<QEvent*>(event));
}

void QTreeWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QTreeWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void QTreeWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQTreeWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTreeWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QTreeWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QTreeWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QTreeWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::showEvent(static_cast<QShowEvent*>(event));
}

void QTreeWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QTreeWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void QTreeWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQTreeWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QTreeWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::initPainter(static_cast<QPainter*>(painter));
}

void QTreeWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTreeWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QTreeWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTreeWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QTreeWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QTreeWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QTreeWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQTreeWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QTreeWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QTreeWidget*>(ptr)->QTreeWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQTreeWidgetItem: public QTreeWidgetItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQTreeWidgetItem(QTreeWidget *parent, QTreeWidgetItem *preceding, int type) : QTreeWidgetItem(parent, preceding, type) {};
	MyQTreeWidgetItem(QTreeWidget *parent, const QStringList &strings, int type) : QTreeWidgetItem(parent, strings, type) {};
	MyQTreeWidgetItem(QTreeWidget *parent, int type) : QTreeWidgetItem(parent, type) {};
	MyQTreeWidgetItem(QTreeWidgetItem *parent, QTreeWidgetItem *preceding, int type) : QTreeWidgetItem(parent, preceding, type) {};
	MyQTreeWidgetItem(QTreeWidgetItem *parent, const QStringList &strings, int type) : QTreeWidgetItem(parent, strings, type) {};
	MyQTreeWidgetItem(QTreeWidgetItem *parent, int type) : QTreeWidgetItem(parent, type) {};
	MyQTreeWidgetItem(const QStringList &strings, int type) : QTreeWidgetItem(strings, type) {};
	MyQTreeWidgetItem(const QTreeWidgetItem &other) : QTreeWidgetItem(other) {};
	MyQTreeWidgetItem(int type) : QTreeWidgetItem(type) {};
	void setData(int column, int role, const QVariant & value) { callbackQTreeWidgetItemSetData(this, this->objectNameAbs().toUtf8().data(), column, role, new QVariant(value)); };
};

void* QTreeWidgetItem_NewQTreeWidgetItem5(void* parent, void* preceding, int ty){
	return new MyQTreeWidgetItem(static_cast<QTreeWidget*>(parent), static_cast<QTreeWidgetItem*>(preceding), ty);
}

void* QTreeWidgetItem_NewQTreeWidgetItem4(void* parent, char* strin, int ty){
	return new MyQTreeWidgetItem(static_cast<QTreeWidget*>(parent), QString(strin).split("|", QString::SkipEmptyParts), ty);
}

void* QTreeWidgetItem_NewQTreeWidgetItem3(void* parent, int ty){
	return new MyQTreeWidgetItem(static_cast<QTreeWidget*>(parent), ty);
}

void* QTreeWidgetItem_NewQTreeWidgetItem8(void* parent, void* preceding, int ty){
	return new MyQTreeWidgetItem(static_cast<QTreeWidgetItem*>(parent), static_cast<QTreeWidgetItem*>(preceding), ty);
}

int QTreeWidgetItem_Flags(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->flags();
}

void QTreeWidgetItem_SetFlags(void* ptr, int flags){
	static_cast<QTreeWidgetItem*>(ptr)->setFlags(static_cast<Qt::ItemFlag>(flags));
}

void* QTreeWidgetItem_NewQTreeWidgetItem7(void* parent, char* strin, int ty){
	return new MyQTreeWidgetItem(static_cast<QTreeWidgetItem*>(parent), QString(strin).split("|", QString::SkipEmptyParts), ty);
}

void* QTreeWidgetItem_NewQTreeWidgetItem6(void* parent, int ty){
	return new MyQTreeWidgetItem(static_cast<QTreeWidgetItem*>(parent), ty);
}

void* QTreeWidgetItem_NewQTreeWidgetItem2(char* strin, int ty){
	return new MyQTreeWidgetItem(QString(strin).split("|", QString::SkipEmptyParts), ty);
}

void* QTreeWidgetItem_NewQTreeWidgetItem9(void* other){
	return new MyQTreeWidgetItem(*static_cast<QTreeWidgetItem*>(other));
}

void* QTreeWidgetItem_NewQTreeWidgetItem(int ty){
	return new MyQTreeWidgetItem(ty);
}

void QTreeWidgetItem_AddChild(void* ptr, void* child){
	static_cast<QTreeWidgetItem*>(ptr)->addChild(static_cast<QTreeWidgetItem*>(child));
}

void* QTreeWidgetItem_Background(void* ptr, int column){
	return new QBrush(static_cast<QTreeWidgetItem*>(ptr)->background(column));
}

int QTreeWidgetItem_CheckState(void* ptr, int column){
	return static_cast<QTreeWidgetItem*>(ptr)->checkState(column);
}

void* QTreeWidgetItem_Child(void* ptr, int index){
	return static_cast<QTreeWidgetItem*>(ptr)->child(index);
}

int QTreeWidgetItem_ChildCount(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->childCount();
}

int QTreeWidgetItem_ChildIndicatorPolicy(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->childIndicatorPolicy();
}

int QTreeWidgetItem_ColumnCount(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->columnCount();
}

void* QTreeWidgetItem_Data(void* ptr, int column, int role){
	return new QVariant(static_cast<QTreeWidgetItem*>(ptr)->data(column, role));
}

void* QTreeWidgetItem_Clone(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->clone();
}

void* QTreeWidgetItem_Font(void* ptr, int column){
	return new QFont(static_cast<QTreeWidgetItem*>(ptr)->font(column));
}

void* QTreeWidgetItem_Foreground(void* ptr, int column){
	return new QBrush(static_cast<QTreeWidgetItem*>(ptr)->foreground(column));
}

void* QTreeWidgetItem_Icon(void* ptr, int column){
	return new QIcon(static_cast<QTreeWidgetItem*>(ptr)->icon(column));
}

int QTreeWidgetItem_IndexOfChild(void* ptr, void* child){
	return static_cast<QTreeWidgetItem*>(ptr)->indexOfChild(static_cast<QTreeWidgetItem*>(child));
}

void QTreeWidgetItem_InsertChild(void* ptr, int index, void* child){
	static_cast<QTreeWidgetItem*>(ptr)->insertChild(index, static_cast<QTreeWidgetItem*>(child));
}

int QTreeWidgetItem_IsDisabled(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->isDisabled();
}

int QTreeWidgetItem_IsExpanded(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->isExpanded();
}

int QTreeWidgetItem_IsFirstColumnSpanned(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->isFirstColumnSpanned();
}

int QTreeWidgetItem_IsHidden(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->isHidden();
}

int QTreeWidgetItem_IsSelected(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->isSelected();
}

void* QTreeWidgetItem_Parent(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->parent();
}

void QTreeWidgetItem_RemoveChild(void* ptr, void* child){
	static_cast<QTreeWidgetItem*>(ptr)->removeChild(static_cast<QTreeWidgetItem*>(child));
}

void QTreeWidgetItem_SetBackground(void* ptr, int column, void* brush){
	static_cast<QTreeWidgetItem*>(ptr)->setBackground(column, *static_cast<QBrush*>(brush));
}

void QTreeWidgetItem_SetCheckState(void* ptr, int column, int state){
	static_cast<QTreeWidgetItem*>(ptr)->setCheckState(column, static_cast<Qt::CheckState>(state));
}

void QTreeWidgetItem_SetChildIndicatorPolicy(void* ptr, int policy){
	static_cast<QTreeWidgetItem*>(ptr)->setChildIndicatorPolicy(static_cast<QTreeWidgetItem::ChildIndicatorPolicy>(policy));
}

void QTreeWidgetItem_SetData(void* ptr, int column, int role, void* value){
	static_cast<MyQTreeWidgetItem*>(ptr)->setData(column, role, *static_cast<QVariant*>(value));
}

void QTreeWidgetItem_SetDataDefault(void* ptr, int column, int role, void* value){
	static_cast<QTreeWidgetItem*>(ptr)->QTreeWidgetItem::setData(column, role, *static_cast<QVariant*>(value));
}

void QTreeWidgetItem_SetDisabled(void* ptr, int disabled){
	static_cast<QTreeWidgetItem*>(ptr)->setDisabled(disabled != 0);
}

void QTreeWidgetItem_SetExpanded(void* ptr, int expand){
	static_cast<QTreeWidgetItem*>(ptr)->setExpanded(expand != 0);
}

void QTreeWidgetItem_SetFirstColumnSpanned(void* ptr, int span){
	static_cast<QTreeWidgetItem*>(ptr)->setFirstColumnSpanned(span != 0);
}

void QTreeWidgetItem_SetFont(void* ptr, int column, void* font){
	static_cast<QTreeWidgetItem*>(ptr)->setFont(column, *static_cast<QFont*>(font));
}

void QTreeWidgetItem_SetForeground(void* ptr, int column, void* brush){
	static_cast<QTreeWidgetItem*>(ptr)->setForeground(column, *static_cast<QBrush*>(brush));
}

void QTreeWidgetItem_SetHidden(void* ptr, int hide){
	static_cast<QTreeWidgetItem*>(ptr)->setHidden(hide != 0);
}

void QTreeWidgetItem_SetIcon(void* ptr, int column, void* icon){
	static_cast<QTreeWidgetItem*>(ptr)->setIcon(column, *static_cast<QIcon*>(icon));
}

void QTreeWidgetItem_SetSelected(void* ptr, int sele){
	static_cast<QTreeWidgetItem*>(ptr)->setSelected(sele != 0);
}

void QTreeWidgetItem_SetSizeHint(void* ptr, int column, void* size){
	static_cast<QTreeWidgetItem*>(ptr)->setSizeHint(column, *static_cast<QSize*>(size));
}

void QTreeWidgetItem_SetStatusTip(void* ptr, int column, char* statusTip){
	static_cast<QTreeWidgetItem*>(ptr)->setStatusTip(column, QString(statusTip));
}

void QTreeWidgetItem_SetText(void* ptr, int column, char* text){
	static_cast<QTreeWidgetItem*>(ptr)->setText(column, QString(text));
}

void QTreeWidgetItem_SetTextAlignment(void* ptr, int column, int alignment){
	static_cast<QTreeWidgetItem*>(ptr)->setTextAlignment(column, alignment);
}

void QTreeWidgetItem_SetToolTip(void* ptr, int column, char* toolTip){
	static_cast<QTreeWidgetItem*>(ptr)->setToolTip(column, QString(toolTip));
}

void QTreeWidgetItem_SetWhatsThis(void* ptr, int column, char* whatsThis){
	static_cast<QTreeWidgetItem*>(ptr)->setWhatsThis(column, QString(whatsThis));
}

void* QTreeWidgetItem_SizeHint(void* ptr, int column){
	return new QSize(static_cast<QSize>(static_cast<QTreeWidgetItem*>(ptr)->sizeHint(column)).width(), static_cast<QSize>(static_cast<QTreeWidgetItem*>(ptr)->sizeHint(column)).height());
}

void QTreeWidgetItem_SortChildren(void* ptr, int column, int order){
	static_cast<QTreeWidgetItem*>(ptr)->sortChildren(column, static_cast<Qt::SortOrder>(order));
}

char* QTreeWidgetItem_StatusTip(void* ptr, int column){
	return static_cast<QTreeWidgetItem*>(ptr)->statusTip(column).toUtf8().data();
}

void* QTreeWidgetItem_TakeChild(void* ptr, int index){
	return static_cast<QTreeWidgetItem*>(ptr)->takeChild(index);
}

char* QTreeWidgetItem_Text(void* ptr, int column){
	return static_cast<QTreeWidgetItem*>(ptr)->text(column).toUtf8().data();
}

int QTreeWidgetItem_TextAlignment(void* ptr, int column){
	return static_cast<QTreeWidgetItem*>(ptr)->textAlignment(column);
}

char* QTreeWidgetItem_ToolTip(void* ptr, int column){
	return static_cast<QTreeWidgetItem*>(ptr)->toolTip(column).toUtf8().data();
}

void* QTreeWidgetItem_TreeWidget(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->treeWidget();
}

int QTreeWidgetItem_Type(void* ptr){
	return static_cast<QTreeWidgetItem*>(ptr)->type();
}

char* QTreeWidgetItem_WhatsThis(void* ptr, int column){
	return static_cast<QTreeWidgetItem*>(ptr)->whatsThis(column).toUtf8().data();
}

void QTreeWidgetItem_DestroyQTreeWidgetItem(void* ptr){
	static_cast<QTreeWidgetItem*>(ptr)->~QTreeWidgetItem();
}

char* QTreeWidgetItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQTreeWidgetItem*>(static_cast<QTreeWidgetItem*>(ptr))) {
		return static_cast<MyQTreeWidgetItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QTreeWidgetItem_BASE").toUtf8().data();
}

void QTreeWidgetItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQTreeWidgetItem*>(static_cast<QTreeWidgetItem*>(ptr))) {
		static_cast<MyQTreeWidgetItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQUndoCommand: public QUndoCommand {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQUndoCommand(QUndoCommand *parent) : QUndoCommand(parent) {};
	MyQUndoCommand(const QString &text, QUndoCommand *parent) : QUndoCommand(text, parent) {};
	void redo() { callbackQUndoCommandRedo(this, this->objectNameAbs().toUtf8().data()); };
	void undo() { callbackQUndoCommandUndo(this, this->objectNameAbs().toUtf8().data()); };
};

void* QUndoCommand_NewQUndoCommand(void* parent){
	return new MyQUndoCommand(static_cast<QUndoCommand*>(parent));
}

void* QUndoCommand_NewQUndoCommand2(char* text, void* parent){
	return new MyQUndoCommand(QString(text), static_cast<QUndoCommand*>(parent));
}

char* QUndoCommand_ActionText(void* ptr){
	return static_cast<QUndoCommand*>(ptr)->actionText().toUtf8().data();
}

void* QUndoCommand_Child(void* ptr, int index){
	return const_cast<QUndoCommand*>(static_cast<QUndoCommand*>(ptr)->child(index));
}

int QUndoCommand_ChildCount(void* ptr){
	return static_cast<QUndoCommand*>(ptr)->childCount();
}

int QUndoCommand_Id(void* ptr){
	return static_cast<QUndoCommand*>(ptr)->id();
}

int QUndoCommand_MergeWith(void* ptr, void* command){
	return static_cast<QUndoCommand*>(ptr)->mergeWith(static_cast<QUndoCommand*>(command));
}

void QUndoCommand_Redo(void* ptr){
	static_cast<MyQUndoCommand*>(ptr)->redo();
}

void QUndoCommand_RedoDefault(void* ptr){
	static_cast<QUndoCommand*>(ptr)->QUndoCommand::redo();
}

void QUndoCommand_SetText(void* ptr, char* text){
	static_cast<QUndoCommand*>(ptr)->setText(QString(text));
}

char* QUndoCommand_Text(void* ptr){
	return static_cast<QUndoCommand*>(ptr)->text().toUtf8().data();
}

void QUndoCommand_Undo(void* ptr){
	static_cast<MyQUndoCommand*>(ptr)->undo();
}

void QUndoCommand_UndoDefault(void* ptr){
	static_cast<QUndoCommand*>(ptr)->QUndoCommand::undo();
}

void QUndoCommand_DestroyQUndoCommand(void* ptr){
	static_cast<QUndoCommand*>(ptr)->~QUndoCommand();
}

char* QUndoCommand_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQUndoCommand*>(static_cast<QUndoCommand*>(ptr))) {
		return static_cast<MyQUndoCommand*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QUndoCommand_BASE").toUtf8().data();
}

void QUndoCommand_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQUndoCommand*>(static_cast<QUndoCommand*>(ptr))) {
		static_cast<MyQUndoCommand*>(ptr)->setObjectNameAbs(QString(name));
	}
}

class MyQUndoGroup: public QUndoGroup {
public:
	void Signal_ActiveStackChanged(QUndoStack * stack) { callbackQUndoGroupActiveStackChanged(this, this->objectName().toUtf8().data(), stack); };
	void Signal_CanRedoChanged(bool canRedo) { callbackQUndoGroupCanRedoChanged(this, this->objectName().toUtf8().data(), canRedo); };
	void Signal_CanUndoChanged(bool canUndo) { callbackQUndoGroupCanUndoChanged(this, this->objectName().toUtf8().data(), canUndo); };
	void Signal_CleanChanged(bool clean) { callbackQUndoGroupCleanChanged(this, this->objectName().toUtf8().data(), clean); };
	void Signal_IndexChanged(int idx) { callbackQUndoGroupIndexChanged(this, this->objectName().toUtf8().data(), idx); };
	void Signal_RedoTextChanged(const QString & redoText) { callbackQUndoGroupRedoTextChanged(this, this->objectName().toUtf8().data(), redoText.toUtf8().data()); };
	void Signal_UndoTextChanged(const QString & undoText) { callbackQUndoGroupUndoTextChanged(this, this->objectName().toUtf8().data(), undoText.toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQUndoGroupTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQUndoGroupChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQUndoGroupCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QUndoGroup_NewQUndoGroup(void* parent){
	return new QUndoGroup(static_cast<QObject*>(parent));
}

void* QUndoGroup_ActiveStack(void* ptr){
	return static_cast<QUndoGroup*>(ptr)->activeStack();
}

void QUndoGroup_ConnectActiveStackChanged(void* ptr){
	QObject::connect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(QUndoStack *)>(&QUndoGroup::activeStackChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(QUndoStack *)>(&MyQUndoGroup::Signal_ActiveStackChanged));;
}

void QUndoGroup_DisconnectActiveStackChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(QUndoStack *)>(&QUndoGroup::activeStackChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(QUndoStack *)>(&MyQUndoGroup::Signal_ActiveStackChanged));;
}

void QUndoGroup_ActiveStackChanged(void* ptr, void* stack){
	static_cast<QUndoGroup*>(ptr)->activeStackChanged(static_cast<QUndoStack*>(stack));
}

void QUndoGroup_AddStack(void* ptr, void* stack){
	static_cast<QUndoGroup*>(ptr)->addStack(static_cast<QUndoStack*>(stack));
}

int QUndoGroup_CanRedo(void* ptr){
	return static_cast<QUndoGroup*>(ptr)->canRedo();
}

void QUndoGroup_ConnectCanRedoChanged(void* ptr){
	QObject::connect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(bool)>(&QUndoGroup::canRedoChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(bool)>(&MyQUndoGroup::Signal_CanRedoChanged));;
}

void QUndoGroup_DisconnectCanRedoChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(bool)>(&QUndoGroup::canRedoChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(bool)>(&MyQUndoGroup::Signal_CanRedoChanged));;
}

void QUndoGroup_CanRedoChanged(void* ptr, int canRedo){
	static_cast<QUndoGroup*>(ptr)->canRedoChanged(canRedo != 0);
}

int QUndoGroup_CanUndo(void* ptr){
	return static_cast<QUndoGroup*>(ptr)->canUndo();
}

void QUndoGroup_ConnectCanUndoChanged(void* ptr){
	QObject::connect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(bool)>(&QUndoGroup::canUndoChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(bool)>(&MyQUndoGroup::Signal_CanUndoChanged));;
}

void QUndoGroup_DisconnectCanUndoChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(bool)>(&QUndoGroup::canUndoChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(bool)>(&MyQUndoGroup::Signal_CanUndoChanged));;
}

void QUndoGroup_CanUndoChanged(void* ptr, int canUndo){
	static_cast<QUndoGroup*>(ptr)->canUndoChanged(canUndo != 0);
}

void QUndoGroup_ConnectCleanChanged(void* ptr){
	QObject::connect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(bool)>(&QUndoGroup::cleanChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(bool)>(&MyQUndoGroup::Signal_CleanChanged));;
}

void QUndoGroup_DisconnectCleanChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(bool)>(&QUndoGroup::cleanChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(bool)>(&MyQUndoGroup::Signal_CleanChanged));;
}

void QUndoGroup_CleanChanged(void* ptr, int clean){
	static_cast<QUndoGroup*>(ptr)->cleanChanged(clean != 0);
}

void* QUndoGroup_CreateRedoAction(void* ptr, void* parent, char* prefix){
	return static_cast<QUndoGroup*>(ptr)->createRedoAction(static_cast<QObject*>(parent), QString(prefix));
}

void* QUndoGroup_CreateUndoAction(void* ptr, void* parent, char* prefix){
	return static_cast<QUndoGroup*>(ptr)->createUndoAction(static_cast<QObject*>(parent), QString(prefix));
}

void QUndoGroup_ConnectIndexChanged(void* ptr){
	QObject::connect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(int)>(&QUndoGroup::indexChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(int)>(&MyQUndoGroup::Signal_IndexChanged));;
}

void QUndoGroup_DisconnectIndexChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(int)>(&QUndoGroup::indexChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(int)>(&MyQUndoGroup::Signal_IndexChanged));;
}

void QUndoGroup_IndexChanged(void* ptr, int idx){
	static_cast<QUndoGroup*>(ptr)->indexChanged(idx);
}

int QUndoGroup_IsClean(void* ptr){
	return static_cast<QUndoGroup*>(ptr)->isClean();
}

void QUndoGroup_Redo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoGroup*>(ptr), "redo");
}

char* QUndoGroup_RedoText(void* ptr){
	return static_cast<QUndoGroup*>(ptr)->redoText().toUtf8().data();
}

void QUndoGroup_ConnectRedoTextChanged(void* ptr){
	QObject::connect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(const QString &)>(&QUndoGroup::redoTextChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(const QString &)>(&MyQUndoGroup::Signal_RedoTextChanged));;
}

void QUndoGroup_DisconnectRedoTextChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(const QString &)>(&QUndoGroup::redoTextChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(const QString &)>(&MyQUndoGroup::Signal_RedoTextChanged));;
}

void QUndoGroup_RedoTextChanged(void* ptr, char* redoText){
	static_cast<QUndoGroup*>(ptr)->redoTextChanged(QString(redoText));
}

void QUndoGroup_RemoveStack(void* ptr, void* stack){
	static_cast<QUndoGroup*>(ptr)->removeStack(static_cast<QUndoStack*>(stack));
}

void QUndoGroup_SetActiveStack(void* ptr, void* stack){
	QMetaObject::invokeMethod(static_cast<QUndoGroup*>(ptr), "setActiveStack", Q_ARG(QUndoStack*, static_cast<QUndoStack*>(stack)));
}

void QUndoGroup_Undo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoGroup*>(ptr), "undo");
}

char* QUndoGroup_UndoText(void* ptr){
	return static_cast<QUndoGroup*>(ptr)->undoText().toUtf8().data();
}

void QUndoGroup_ConnectUndoTextChanged(void* ptr){
	QObject::connect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(const QString &)>(&QUndoGroup::undoTextChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(const QString &)>(&MyQUndoGroup::Signal_UndoTextChanged));;
}

void QUndoGroup_DisconnectUndoTextChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoGroup*>(ptr), static_cast<void (QUndoGroup::*)(const QString &)>(&QUndoGroup::undoTextChanged), static_cast<MyQUndoGroup*>(ptr), static_cast<void (MyQUndoGroup::*)(const QString &)>(&MyQUndoGroup::Signal_UndoTextChanged));;
}

void QUndoGroup_UndoTextChanged(void* ptr, char* undoText){
	static_cast<QUndoGroup*>(ptr)->undoTextChanged(QString(undoText));
}

void QUndoGroup_DestroyQUndoGroup(void* ptr){
	static_cast<QUndoGroup*>(ptr)->~QUndoGroup();
}

void QUndoGroup_TimerEvent(void* ptr, void* event){
	static_cast<MyQUndoGroup*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QUndoGroup_TimerEventDefault(void* ptr, void* event){
	static_cast<QUndoGroup*>(ptr)->QUndoGroup::timerEvent(static_cast<QTimerEvent*>(event));
}

void QUndoGroup_ChildEvent(void* ptr, void* event){
	static_cast<MyQUndoGroup*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QUndoGroup_ChildEventDefault(void* ptr, void* event){
	static_cast<QUndoGroup*>(ptr)->QUndoGroup::childEvent(static_cast<QChildEvent*>(event));
}

void QUndoGroup_CustomEvent(void* ptr, void* event){
	static_cast<MyQUndoGroup*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QUndoGroup_CustomEventDefault(void* ptr, void* event){
	static_cast<QUndoGroup*>(ptr)->QUndoGroup::customEvent(static_cast<QEvent*>(event));
}

class MyQUndoStack: public QUndoStack {
public:
	void Signal_CanRedoChanged(bool canRedo) { callbackQUndoStackCanRedoChanged(this, this->objectName().toUtf8().data(), canRedo); };
	void Signal_CanUndoChanged(bool canUndo) { callbackQUndoStackCanUndoChanged(this, this->objectName().toUtf8().data(), canUndo); };
	void Signal_CleanChanged(bool clean) { callbackQUndoStackCleanChanged(this, this->objectName().toUtf8().data(), clean); };
	void Signal_IndexChanged(int idx) { callbackQUndoStackIndexChanged(this, this->objectName().toUtf8().data(), idx); };
	void Signal_RedoTextChanged(const QString & redoText) { callbackQUndoStackRedoTextChanged(this, this->objectName().toUtf8().data(), redoText.toUtf8().data()); };
	void Signal_UndoTextChanged(const QString & undoText) { callbackQUndoStackUndoTextChanged(this, this->objectName().toUtf8().data(), undoText.toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQUndoStackTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQUndoStackChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQUndoStackCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QUndoStack_IsActive(void* ptr){
	return static_cast<QUndoStack*>(ptr)->isActive();
}

void QUndoStack_SetActive(void* ptr, int active){
	QMetaObject::invokeMethod(static_cast<QUndoStack*>(ptr), "setActive", Q_ARG(bool, active != 0));
}

void QUndoStack_SetUndoLimit(void* ptr, int limit){
	static_cast<QUndoStack*>(ptr)->setUndoLimit(limit);
}

int QUndoStack_UndoLimit(void* ptr){
	return static_cast<QUndoStack*>(ptr)->undoLimit();
}

void* QUndoStack_NewQUndoStack(void* parent){
	return new QUndoStack(static_cast<QObject*>(parent));
}

void QUndoStack_BeginMacro(void* ptr, char* text){
	static_cast<QUndoStack*>(ptr)->beginMacro(QString(text));
}

int QUndoStack_CanRedo(void* ptr){
	return static_cast<QUndoStack*>(ptr)->canRedo();
}

void QUndoStack_ConnectCanRedoChanged(void* ptr){
	QObject::connect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(bool)>(&QUndoStack::canRedoChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(bool)>(&MyQUndoStack::Signal_CanRedoChanged));;
}

void QUndoStack_DisconnectCanRedoChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(bool)>(&QUndoStack::canRedoChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(bool)>(&MyQUndoStack::Signal_CanRedoChanged));;
}

void QUndoStack_CanRedoChanged(void* ptr, int canRedo){
	static_cast<QUndoStack*>(ptr)->canRedoChanged(canRedo != 0);
}

int QUndoStack_CanUndo(void* ptr){
	return static_cast<QUndoStack*>(ptr)->canUndo();
}

void QUndoStack_ConnectCanUndoChanged(void* ptr){
	QObject::connect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(bool)>(&QUndoStack::canUndoChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(bool)>(&MyQUndoStack::Signal_CanUndoChanged));;
}

void QUndoStack_DisconnectCanUndoChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(bool)>(&QUndoStack::canUndoChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(bool)>(&MyQUndoStack::Signal_CanUndoChanged));;
}

void QUndoStack_CanUndoChanged(void* ptr, int canUndo){
	static_cast<QUndoStack*>(ptr)->canUndoChanged(canUndo != 0);
}

void QUndoStack_ConnectCleanChanged(void* ptr){
	QObject::connect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(bool)>(&QUndoStack::cleanChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(bool)>(&MyQUndoStack::Signal_CleanChanged));;
}

void QUndoStack_DisconnectCleanChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(bool)>(&QUndoStack::cleanChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(bool)>(&MyQUndoStack::Signal_CleanChanged));;
}

void QUndoStack_CleanChanged(void* ptr, int clean){
	static_cast<QUndoStack*>(ptr)->cleanChanged(clean != 0);
}

int QUndoStack_CleanIndex(void* ptr){
	return static_cast<QUndoStack*>(ptr)->cleanIndex();
}

void QUndoStack_Clear(void* ptr){
	static_cast<QUndoStack*>(ptr)->clear();
}

void* QUndoStack_Command(void* ptr, int index){
	return const_cast<QUndoCommand*>(static_cast<QUndoStack*>(ptr)->command(index));
}

int QUndoStack_Count(void* ptr){
	return static_cast<QUndoStack*>(ptr)->count();
}

void* QUndoStack_CreateRedoAction(void* ptr, void* parent, char* prefix){
	return static_cast<QUndoStack*>(ptr)->createRedoAction(static_cast<QObject*>(parent), QString(prefix));
}

void* QUndoStack_CreateUndoAction(void* ptr, void* parent, char* prefix){
	return static_cast<QUndoStack*>(ptr)->createUndoAction(static_cast<QObject*>(parent), QString(prefix));
}

void QUndoStack_EndMacro(void* ptr){
	static_cast<QUndoStack*>(ptr)->endMacro();
}

int QUndoStack_Index(void* ptr){
	return static_cast<QUndoStack*>(ptr)->index();
}

void QUndoStack_ConnectIndexChanged(void* ptr){
	QObject::connect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(int)>(&QUndoStack::indexChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(int)>(&MyQUndoStack::Signal_IndexChanged));;
}

void QUndoStack_DisconnectIndexChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(int)>(&QUndoStack::indexChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(int)>(&MyQUndoStack::Signal_IndexChanged));;
}

void QUndoStack_IndexChanged(void* ptr, int idx){
	static_cast<QUndoStack*>(ptr)->indexChanged(idx);
}

int QUndoStack_IsClean(void* ptr){
	return static_cast<QUndoStack*>(ptr)->isClean();
}

void QUndoStack_Push(void* ptr, void* cmd){
	static_cast<QUndoStack*>(ptr)->push(static_cast<QUndoCommand*>(cmd));
}

void QUndoStack_Redo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoStack*>(ptr), "redo");
}

char* QUndoStack_RedoText(void* ptr){
	return static_cast<QUndoStack*>(ptr)->redoText().toUtf8().data();
}

void QUndoStack_ConnectRedoTextChanged(void* ptr){
	QObject::connect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(const QString &)>(&QUndoStack::redoTextChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(const QString &)>(&MyQUndoStack::Signal_RedoTextChanged));;
}

void QUndoStack_DisconnectRedoTextChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(const QString &)>(&QUndoStack::redoTextChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(const QString &)>(&MyQUndoStack::Signal_RedoTextChanged));;
}

void QUndoStack_RedoTextChanged(void* ptr, char* redoText){
	static_cast<QUndoStack*>(ptr)->redoTextChanged(QString(redoText));
}

void QUndoStack_SetClean(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoStack*>(ptr), "setClean");
}

void QUndoStack_SetIndex(void* ptr, int idx){
	QMetaObject::invokeMethod(static_cast<QUndoStack*>(ptr), "setIndex", Q_ARG(int, idx));
}

char* QUndoStack_Text(void* ptr, int idx){
	return static_cast<QUndoStack*>(ptr)->text(idx).toUtf8().data();
}

void QUndoStack_Undo(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoStack*>(ptr), "undo");
}

char* QUndoStack_UndoText(void* ptr){
	return static_cast<QUndoStack*>(ptr)->undoText().toUtf8().data();
}

void QUndoStack_ConnectUndoTextChanged(void* ptr){
	QObject::connect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(const QString &)>(&QUndoStack::undoTextChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(const QString &)>(&MyQUndoStack::Signal_UndoTextChanged));;
}

void QUndoStack_DisconnectUndoTextChanged(void* ptr){
	QObject::disconnect(static_cast<QUndoStack*>(ptr), static_cast<void (QUndoStack::*)(const QString &)>(&QUndoStack::undoTextChanged), static_cast<MyQUndoStack*>(ptr), static_cast<void (MyQUndoStack::*)(const QString &)>(&MyQUndoStack::Signal_UndoTextChanged));;
}

void QUndoStack_UndoTextChanged(void* ptr, char* undoText){
	static_cast<QUndoStack*>(ptr)->undoTextChanged(QString(undoText));
}

void QUndoStack_DestroyQUndoStack(void* ptr){
	static_cast<QUndoStack*>(ptr)->~QUndoStack();
}

void QUndoStack_TimerEvent(void* ptr, void* event){
	static_cast<MyQUndoStack*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QUndoStack_TimerEventDefault(void* ptr, void* event){
	static_cast<QUndoStack*>(ptr)->QUndoStack::timerEvent(static_cast<QTimerEvent*>(event));
}

void QUndoStack_ChildEvent(void* ptr, void* event){
	static_cast<MyQUndoStack*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QUndoStack_ChildEventDefault(void* ptr, void* event){
	static_cast<QUndoStack*>(ptr)->QUndoStack::childEvent(static_cast<QChildEvent*>(event));
}

void QUndoStack_CustomEvent(void* ptr, void* event){
	static_cast<MyQUndoStack*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QUndoStack_CustomEventDefault(void* ptr, void* event){
	static_cast<QUndoStack*>(ptr)->QUndoStack::customEvent(static_cast<QEvent*>(event));
}

void* QUndoView_CleanIcon(void* ptr){
	return new QIcon(static_cast<QUndoView*>(ptr)->cleanIcon());
}

char* QUndoView_EmptyLabel(void* ptr){
	return static_cast<QUndoView*>(ptr)->emptyLabel().toUtf8().data();
}

void QUndoView_SetCleanIcon(void* ptr, void* icon){
	static_cast<QUndoView*>(ptr)->setCleanIcon(*static_cast<QIcon*>(icon));
}

void QUndoView_SetEmptyLabel(void* ptr, char* label){
	static_cast<QUndoView*>(ptr)->setEmptyLabel(QString(label));
}

void* QUndoView_NewQUndoView3(void* group, void* parent){
	return new QUndoView(static_cast<QUndoGroup*>(group), static_cast<QWidget*>(parent));
}

void* QUndoView_NewQUndoView2(void* stack, void* parent){
	return new QUndoView(static_cast<QUndoStack*>(stack), static_cast<QWidget*>(parent));
}

void* QUndoView_NewQUndoView(void* parent){
	return new QUndoView(static_cast<QWidget*>(parent));
}

void* QUndoView_Group(void* ptr){
	return static_cast<QUndoView*>(ptr)->group();
}

void QUndoView_SetGroup(void* ptr, void* group){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "setGroup", Q_ARG(QUndoGroup*, static_cast<QUndoGroup*>(group)));
}

void QUndoView_SetStack(void* ptr, void* stack){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "setStack", Q_ARG(QUndoStack*, static_cast<QUndoStack*>(stack)));
}

void* QUndoView_Stack(void* ptr){
	return static_cast<QUndoView*>(ptr)->stack();
}

void QUndoView_DestroyQUndoView(void* ptr){
	static_cast<QUndoView*>(ptr)->~QUndoView();
}

void QUndoView_DragLeaveEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QUndoView_DragLeaveEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::dragLeaveEvent(static_cast<QDragLeaveEvent*>(e));
}

void QUndoView_DragMoveEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QUndoView_DragMoveEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::dragMoveEvent(static_cast<QDragMoveEvent*>(e));
}

void QUndoView_DropEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->dropEvent(static_cast<QDropEvent*>(e));
}

void QUndoView_DropEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::dropEvent(static_cast<QDropEvent*>(e));
}

void QUndoView_MouseMoveEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QUndoView_MouseMoveEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::mouseMoveEvent(static_cast<QMouseEvent*>(e));
}

void QUndoView_MouseReleaseEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QUndoView_MouseReleaseEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::mouseReleaseEvent(static_cast<QMouseEvent*>(e));
}

void QUndoView_PaintEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->paintEvent(static_cast<QPaintEvent*>(e));
}

void QUndoView_PaintEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::paintEvent(static_cast<QPaintEvent*>(e));
}

void QUndoView_ResizeEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(e));
}

void QUndoView_ResizeEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::resizeEvent(static_cast<QResizeEvent*>(e));
}

void QUndoView_SetSelection(void* ptr, void* rect, int command){
	static_cast<QUndoView*>(ptr)->setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QUndoView_SetSelectionDefault(void* ptr, void* rect, int command){
	static_cast<QUndoView*>(ptr)->QUndoView::setSelection(*static_cast<QRect*>(rect), static_cast<QItemSelectionModel::SelectionFlag>(command));
}

void QUndoView_StartDrag(void* ptr, int supportedActions){
	static_cast<QUndoView*>(ptr)->startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QUndoView_StartDragDefault(void* ptr, int supportedActions){
	static_cast<QUndoView*>(ptr)->QUndoView::startDrag(static_cast<Qt::DropAction>(supportedActions));
}

void QUndoView_TimerEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->timerEvent(static_cast<QTimerEvent*>(e));
}

void QUndoView_TimerEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::timerEvent(static_cast<QTimerEvent*>(e));
}

void QUndoView_UpdateGeometries(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "updateGeometries");
}

void QUndoView_UpdateGeometriesDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "updateGeometries");
}

void QUndoView_CloseEditor(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QUndoView_CloseEditorDefault(void* ptr, void* editor, int hint){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "closeEditor", Q_ARG(QWidget*, static_cast<QWidget*>(editor)), Q_ARG(QAbstractItemDelegate::EndEditHint, static_cast<QAbstractItemDelegate::EndEditHint>(hint)));
}

void QUndoView_CommitData(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QUndoView_CommitDataDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "commitData", Q_ARG(QWidget*, static_cast<QWidget*>(editor)));
}

void QUndoView_DragEnterEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QUndoView_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QUndoView_EditorDestroyed(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QUndoView_EditorDestroyedDefault(void* ptr, void* editor){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "editorDestroyed", Q_ARG(QObject*, static_cast<QObject*>(editor)));
}

void QUndoView_FocusInEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QUndoView_FocusInEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QUndoView_FocusOutEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QUndoView_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QUndoView_InputMethodEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QUndoView_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QUndoView_KeyPressEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QUndoView_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QUndoView_KeyboardSearch(void* ptr, char* search){
	static_cast<QUndoView*>(ptr)->keyboardSearch(QString(search));
}

void QUndoView_KeyboardSearchDefault(void* ptr, char* search){
	static_cast<QUndoView*>(ptr)->QUndoView::keyboardSearch(QString(search));
}

void QUndoView_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QUndoView_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QUndoView_MousePressEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QUndoView_MousePressEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QUndoView_Reset(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "reset");
}

void QUndoView_ResetDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "reset");
}

void QUndoView_SelectAll(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "selectAll");
}

void QUndoView_SelectAllDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "selectAll");
}

void QUndoView_SetModel(void* ptr, void* model){
	static_cast<QUndoView*>(ptr)->setModel(static_cast<QAbstractItemModel*>(model));
}

void QUndoView_SetModelDefault(void* ptr, void* model){
	static_cast<QUndoView*>(ptr)->QUndoView::setModel(static_cast<QAbstractItemModel*>(model));
}

void QUndoView_SetSelectionModel(void* ptr, void* selectionModel){
	static_cast<QUndoView*>(ptr)->setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QUndoView_SetSelectionModelDefault(void* ptr, void* selectionModel){
	static_cast<QUndoView*>(ptr)->QUndoView::setSelectionModel(static_cast<QItemSelectionModel*>(selectionModel));
}

void QUndoView_ContextMenuEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QUndoView_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QUndoView_ScrollContentsBy(void* ptr, int dx, int dy){
	static_cast<QUndoView*>(ptr)->scrollContentsBy(dx, dy);
}

void QUndoView_ScrollContentsByDefault(void* ptr, int dx, int dy){
	static_cast<QUndoView*>(ptr)->QUndoView::scrollContentsBy(dx, dy);
}

void QUndoView_SetupViewport(void* ptr, void* viewport){
	static_cast<QUndoView*>(ptr)->setupViewport(static_cast<QWidget*>(viewport));
}

void QUndoView_SetupViewportDefault(void* ptr, void* viewport){
	static_cast<QUndoView*>(ptr)->QUndoView::setupViewport(static_cast<QWidget*>(viewport));
}

void QUndoView_WheelEvent(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(e));
}

void QUndoView_WheelEventDefault(void* ptr, void* e){
	static_cast<QUndoView*>(ptr)->QUndoView::wheelEvent(static_cast<QWheelEvent*>(e));
}

void QUndoView_ChangeEvent(void* ptr, void* ev){
	static_cast<QUndoView*>(ptr)->changeEvent(static_cast<QEvent*>(ev));
}

void QUndoView_ChangeEventDefault(void* ptr, void* ev){
	static_cast<QUndoView*>(ptr)->QUndoView::changeEvent(static_cast<QEvent*>(ev));
}

void QUndoView_ActionEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QUndoView_ActionEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::actionEvent(static_cast<QActionEvent*>(event));
}

void QUndoView_EnterEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QUndoView_EnterEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::enterEvent(static_cast<QEvent*>(event));
}

void QUndoView_HideEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QUndoView_HideEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::hideEvent(static_cast<QHideEvent*>(event));
}

void QUndoView_LeaveEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QUndoView_LeaveEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::leaveEvent(static_cast<QEvent*>(event));
}

void QUndoView_MoveEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QUndoView_MoveEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::moveEvent(static_cast<QMoveEvent*>(event));
}

void QUndoView_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QUndoView_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QUndoView*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QUndoView_ShowEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QUndoView_ShowEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::showEvent(static_cast<QShowEvent*>(event));
}

void QUndoView_CloseEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QUndoView_CloseEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::closeEvent(static_cast<QCloseEvent*>(event));
}

void QUndoView_InitPainter(void* ptr, void* painter){
	static_cast<QUndoView*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QUndoView_InitPainterDefault(void* ptr, void* painter){
	static_cast<QUndoView*>(ptr)->QUndoView::initPainter(static_cast<QPainter*>(painter));
}

void QUndoView_KeyReleaseEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QUndoView_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QUndoView_TabletEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QUndoView_TabletEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QUndoView_ChildEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QUndoView_ChildEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::childEvent(static_cast<QChildEvent*>(event));
}

void QUndoView_CustomEvent(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QUndoView_CustomEventDefault(void* ptr, void* event){
	static_cast<QUndoView*>(ptr)->QUndoView::customEvent(static_cast<QEvent*>(event));
}

void* QVBoxLayout_NewQVBoxLayout(){
	return new QVBoxLayout();
}

void* QVBoxLayout_NewQVBoxLayout2(void* parent){
	return new QVBoxLayout(static_cast<QWidget*>(parent));
}

void QVBoxLayout_DestroyQVBoxLayout(void* ptr){
	static_cast<QVBoxLayout*>(ptr)->~QVBoxLayout();
}

void QVBoxLayout_AddItem(void* ptr, void* item){
	static_cast<QVBoxLayout*>(ptr)->addItem(static_cast<QLayoutItem*>(item));
}

void QVBoxLayout_AddItemDefault(void* ptr, void* item){
	static_cast<QVBoxLayout*>(ptr)->QVBoxLayout::addItem(static_cast<QLayoutItem*>(item));
}

void QVBoxLayout_Invalidate(void* ptr){
	static_cast<QVBoxLayout*>(ptr)->invalidate();
}

void QVBoxLayout_InvalidateDefault(void* ptr){
	static_cast<QVBoxLayout*>(ptr)->QVBoxLayout::invalidate();
}

void QVBoxLayout_SetGeometry(void* ptr, void* r){
	static_cast<QVBoxLayout*>(ptr)->setGeometry(*static_cast<QRect*>(r));
}

void QVBoxLayout_SetGeometryDefault(void* ptr, void* r){
	static_cast<QVBoxLayout*>(ptr)->QVBoxLayout::setGeometry(*static_cast<QRect*>(r));
}

void QVBoxLayout_ChildEvent(void* ptr, void* e){
	static_cast<QVBoxLayout*>(ptr)->childEvent(static_cast<QChildEvent*>(e));
}

void QVBoxLayout_ChildEventDefault(void* ptr, void* e){
	static_cast<QVBoxLayout*>(ptr)->QVBoxLayout::childEvent(static_cast<QChildEvent*>(e));
}

void QVBoxLayout_TimerEvent(void* ptr, void* event){
	static_cast<QVBoxLayout*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QVBoxLayout_TimerEventDefault(void* ptr, void* event){
	static_cast<QVBoxLayout*>(ptr)->QVBoxLayout::timerEvent(static_cast<QTimerEvent*>(event));
}

void QVBoxLayout_CustomEvent(void* ptr, void* event){
	static_cast<QVBoxLayout*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QVBoxLayout_CustomEventDefault(void* ptr, void* event){
	static_cast<QVBoxLayout*>(ptr)->QVBoxLayout::customEvent(static_cast<QEvent*>(event));
}

void* QWhatsThis_QWhatsThis_CreateAction(void* parent){
	return QWhatsThis::createAction(static_cast<QObject*>(parent));
}

void QWhatsThis_QWhatsThis_EnterWhatsThisMode(){
	QWhatsThis::enterWhatsThisMode();
}

void QWhatsThis_QWhatsThis_HideText(){
	QWhatsThis::hideText();
}

int QWhatsThis_QWhatsThis_InWhatsThisMode(){
	return QWhatsThis::inWhatsThisMode();
}

void QWhatsThis_QWhatsThis_LeaveWhatsThisMode(){
	QWhatsThis::leaveWhatsThisMode();
}

void QWhatsThis_QWhatsThis_ShowText(void* pos, char* text, void* w){
	QWhatsThis::showText(*static_cast<QPoint*>(pos), QString(text), static_cast<QWidget*>(w));
}

class MyQWidget: public QWidget {
public:
	MyQWidget(QWidget *parent, Qt::WindowFlags f) : QWidget(parent, f) {};
	void actionEvent(QActionEvent * event) { callbackQWidgetActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQWidgetDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQWidgetDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQWidgetDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQWidgetDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQWidgetEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQWidgetFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQWidgetFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQWidgetHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQWidgetLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQWidgetMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQWidgetPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQWidgetSetVisible(this, this->objectName().toUtf8().data(), visible)) { QWidget::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQWidgetShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQWidgetChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQWidgetCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQWidgetContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_CustomContextMenuRequested(const QPoint & pos) { callbackQWidgetCustomContextMenuRequested(this, this->objectName().toUtf8().data(), new QPoint(static_cast<QPoint>(pos).x(), static_cast<QPoint>(pos).y())); };
	void initPainter(QPainter * painter) const { callbackQWidgetInitPainter(const_cast<MyQWidget*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQWidgetInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQWidgetKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQWidgetKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQWidgetMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQWidgetMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQWidgetMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQWidgetMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQWidgetResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQWidgetTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQWidgetWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void Signal_WindowIconChanged(const QIcon & icon) { callbackQWidgetWindowIconChanged(this, this->objectName().toUtf8().data(), new QIcon(icon)); };
	void Signal_WindowIconTextChanged(const QString & iconText) { callbackQWidgetWindowIconTextChanged(this, this->objectName().toUtf8().data(), iconText.toUtf8().data()); };
	void Signal_WindowTitleChanged(const QString & title) { callbackQWidgetWindowTitleChanged(this, this->objectName().toUtf8().data(), title.toUtf8().data()); };
	void timerEvent(QTimerEvent * event) { callbackQWidgetTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQWidgetChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQWidgetCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

int QWidget_AcceptDrops(void* ptr){
	return static_cast<QWidget*>(ptr)->acceptDrops();
}

char* QWidget_AccessibleDescription(void* ptr){
	return static_cast<QWidget*>(ptr)->accessibleDescription().toUtf8().data();
}

char* QWidget_AccessibleName(void* ptr){
	return static_cast<QWidget*>(ptr)->accessibleName().toUtf8().data();
}

void QWidget_ActionEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QWidget_ActionEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::actionEvent(static_cast<QActionEvent*>(event));
}

void QWidget_ActivateWindow(void* ptr){
	static_cast<QWidget*>(ptr)->activateWindow();
}

int QWidget_AutoFillBackground(void* ptr){
	return static_cast<QWidget*>(ptr)->autoFillBackground();
}

void* QWidget_BaseSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidget*>(ptr)->baseSize()).width(), static_cast<QSize>(static_cast<QWidget*>(ptr)->baseSize()).height());
}

void* QWidget_ChildrenRect(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QWidget*>(ptr)->childrenRect()).x(), static_cast<QRect>(static_cast<QWidget*>(ptr)->childrenRect()).y(), static_cast<QRect>(static_cast<QWidget*>(ptr)->childrenRect()).width(), static_cast<QRect>(static_cast<QWidget*>(ptr)->childrenRect()).height());
}

void* QWidget_ChildrenRegion(void* ptr){
	return new QRegion(static_cast<QWidget*>(ptr)->childrenRegion());
}

void QWidget_ClearMask(void* ptr){
	static_cast<QWidget*>(ptr)->clearMask();
}

int QWidget_ContextMenuPolicy(void* ptr){
	return static_cast<QWidget*>(ptr)->contextMenuPolicy();
}

void* QWidget_Cursor(void* ptr){
	return new QCursor(static_cast<QWidget*>(ptr)->cursor());
}

void QWidget_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QWidget_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QWidget_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QWidget_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QWidget_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QWidget_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QWidget_DropEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QWidget_DropEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::dropEvent(static_cast<QDropEvent*>(event));
}

void QWidget_EnterEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QWidget_EnterEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::enterEvent(static_cast<QEvent*>(event));
}

void QWidget_FocusInEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QWidget_FocusInEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QWidget_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QWidget_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::focusOutEvent(static_cast<QFocusEvent*>(event));
}

int QWidget_FocusPolicy(void* ptr){
	return static_cast<QWidget*>(ptr)->focusPolicy();
}

void* QWidget_FrameGeometry(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QWidget*>(ptr)->frameGeometry()).x(), static_cast<QRect>(static_cast<QWidget*>(ptr)->frameGeometry()).y(), static_cast<QRect>(static_cast<QWidget*>(ptr)->frameGeometry()).width(), static_cast<QRect>(static_cast<QWidget*>(ptr)->frameGeometry()).height());
}

void* QWidget_FrameSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidget*>(ptr)->frameSize()).width(), static_cast<QSize>(static_cast<QWidget*>(ptr)->frameSize()).height());
}

void QWidget_GrabKeyboard(void* ptr){
	static_cast<QWidget*>(ptr)->grabKeyboard();
}

void QWidget_GrabMouse(void* ptr){
	static_cast<QWidget*>(ptr)->grabMouse();
}

void QWidget_GrabMouse2(void* ptr, void* cursor){
	static_cast<QWidget*>(ptr)->grabMouse(*static_cast<QCursor*>(cursor));
}

int QWidget_HasFocus(void* ptr){
	return static_cast<QWidget*>(ptr)->hasFocus();
}

void QWidget_HideEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QWidget_HideEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::hideEvent(static_cast<QHideEvent*>(event));
}

int QWidget_InputMethodHints(void* ptr){
	return static_cast<QWidget*>(ptr)->inputMethodHints();
}

int QWidget_IsActiveWindow(void* ptr){
	return static_cast<QWidget*>(ptr)->isActiveWindow();
}

int QWidget_IsFullScreen(void* ptr){
	return static_cast<QWidget*>(ptr)->isFullScreen();
}

int QWidget_IsMaximized(void* ptr){
	return static_cast<QWidget*>(ptr)->isMaximized();
}

int QWidget_IsMinimized(void* ptr){
	return static_cast<QWidget*>(ptr)->isMinimized();
}

int QWidget_IsWindowModified(void* ptr){
	return static_cast<QWidget*>(ptr)->isWindowModified();
}

void* QWidget_QWidget_KeyboardGrabber(){
	return QWidget::keyboardGrabber();
}

int QWidget_LayoutDirection(void* ptr){
	return static_cast<QWidget*>(ptr)->layoutDirection();
}

void QWidget_LeaveEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QWidget_LeaveEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::leaveEvent(static_cast<QEvent*>(event));
}

void* QWidget_Locale(void* ptr){
	return new QLocale(static_cast<QWidget*>(ptr)->locale());
}

void* QWidget_MapFromGlobal(void* ptr, void* pos){
	return new QPoint(static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapFromGlobal(*static_cast<QPoint*>(pos))).x(), static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapFromGlobal(*static_cast<QPoint*>(pos))).y());
}

void* QWidget_MapToGlobal(void* ptr, void* pos){
	return new QPoint(static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapToGlobal(*static_cast<QPoint*>(pos))).x(), static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapToGlobal(*static_cast<QPoint*>(pos))).y());
}

void* QWidget_MaximumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidget*>(ptr)->maximumSize()).width(), static_cast<QSize>(static_cast<QWidget*>(ptr)->maximumSize()).height());
}

int QWidget_Metric(void* ptr, int m){
	return static_cast<QWidget*>(ptr)->metric(static_cast<QPaintDevice::PaintDeviceMetric>(m));
}

void* QWidget_MinimumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidget*>(ptr)->minimumSize()).width(), static_cast<QSize>(static_cast<QWidget*>(ptr)->minimumSize()).height());
}

void* QWidget_MinimumSizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidget*>(ptr)->minimumSizeHint()).width(), static_cast<QSize>(static_cast<QWidget*>(ptr)->minimumSizeHint()).height());
}

void* QWidget_QWidget_MouseGrabber(){
	return QWidget::mouseGrabber();
}

void QWidget_Move(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->move(*static_cast<QPoint*>(v));
}

void QWidget_MoveEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QWidget_MoveEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::moveEvent(static_cast<QMoveEvent*>(event));
}

void* QWidget_NormalGeometry(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QWidget*>(ptr)->normalGeometry()).x(), static_cast<QRect>(static_cast<QWidget*>(ptr)->normalGeometry()).y(), static_cast<QRect>(static_cast<QWidget*>(ptr)->normalGeometry()).width(), static_cast<QRect>(static_cast<QWidget*>(ptr)->normalGeometry()).height());
}

void* QWidget_PaintEngine(void* ptr){
	return static_cast<QWidget*>(ptr)->paintEngine();
}

void QWidget_PaintEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QWidget_PaintEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::paintEvent(static_cast<QPaintEvent*>(event));
}

void* QWidget_Palette(void* ptr){
	return new QPalette(static_cast<QWidget*>(ptr)->palette());
}

void* QWidget_Pos(void* ptr){
	return new QPoint(static_cast<QPoint>(static_cast<QWidget*>(ptr)->pos()).x(), static_cast<QPoint>(static_cast<QWidget*>(ptr)->pos()).y());
}

void QWidget_ReleaseKeyboard(void* ptr){
	static_cast<QWidget*>(ptr)->releaseKeyboard();
}

void QWidget_ReleaseMouse(void* ptr){
	static_cast<QWidget*>(ptr)->releaseMouse();
}

void QWidget_Resize(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->resize(*static_cast<QSize*>(v));
}

void QWidget_SetAcceptDrops(void* ptr, int on){
	static_cast<QWidget*>(ptr)->setAcceptDrops(on != 0);
}

void QWidget_SetAccessibleDescription(void* ptr, char* description){
	static_cast<QWidget*>(ptr)->setAccessibleDescription(QString(description));
}

void QWidget_SetAccessibleName(void* ptr, char* name){
	static_cast<QWidget*>(ptr)->setAccessibleName(QString(name));
}

void QWidget_SetAutoFillBackground(void* ptr, int enabled){
	static_cast<QWidget*>(ptr)->setAutoFillBackground(enabled != 0);
}

void QWidget_SetContextMenuPolicy(void* ptr, int policy){
	static_cast<QWidget*>(ptr)->setContextMenuPolicy(static_cast<Qt::ContextMenuPolicy>(policy));
}

void QWidget_SetCursor(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->setCursor(*static_cast<QCursor*>(v));
}

void QWidget_SetEnabled(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "setEnabled", Q_ARG(bool, v != 0));
}

void QWidget_SetFixedSize2(void* ptr, int w, int h){
	static_cast<QWidget*>(ptr)->setFixedSize(w, h);
}

void QWidget_SetFocusPolicy(void* ptr, int policy){
	static_cast<QWidget*>(ptr)->setFocusPolicy(static_cast<Qt::FocusPolicy>(policy));
}

void QWidget_SetFont(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->setFont(*static_cast<QFont*>(v));
}

void QWidget_SetGeometry(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->setGeometry(*static_cast<QRect*>(v));
}

void QWidget_SetInputMethodHints(void* ptr, int hints){
	static_cast<QWidget*>(ptr)->setInputMethodHints(static_cast<Qt::InputMethodHint>(hints));
}

void QWidget_SetLayout(void* ptr, void* layout){
	static_cast<QWidget*>(ptr)->setLayout(static_cast<QLayout*>(layout));
}

void QWidget_SetLayoutDirection(void* ptr, int direction){
	static_cast<QWidget*>(ptr)->setLayoutDirection(static_cast<Qt::LayoutDirection>(direction));
}

void QWidget_SetLocale(void* ptr, void* locale){
	static_cast<QWidget*>(ptr)->setLocale(*static_cast<QLocale*>(locale));
}

void QWidget_SetMask(void* ptr, void* bitmap){
	static_cast<QWidget*>(ptr)->setMask(*static_cast<QBitmap*>(bitmap));
}

void QWidget_SetMask2(void* ptr, void* region){
	static_cast<QWidget*>(ptr)->setMask(*static_cast<QRegion*>(region));
}

void QWidget_SetMaximumHeight(void* ptr, int maxh){
	static_cast<QWidget*>(ptr)->setMaximumHeight(maxh);
}

void QWidget_SetMaximumWidth(void* ptr, int maxw){
	static_cast<QWidget*>(ptr)->setMaximumWidth(maxw);
}

void QWidget_SetMinimumHeight(void* ptr, int minh){
	static_cast<QWidget*>(ptr)->setMinimumHeight(minh);
}

void QWidget_SetMinimumWidth(void* ptr, int minw){
	static_cast<QWidget*>(ptr)->setMinimumWidth(minw);
}

void QWidget_SetPalette(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->setPalette(*static_cast<QPalette*>(v));
}

void QWidget_SetSizePolicy(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->setSizePolicy(*static_cast<QSizePolicy*>(v));
}

void QWidget_SetStatusTip(void* ptr, char* v){
	static_cast<QWidget*>(ptr)->setStatusTip(QString(v));
}

void QWidget_SetStyleSheet(void* ptr, char* styleSheet){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "setStyleSheet", Q_ARG(QString, QString(styleSheet)));
}

void QWidget_SetToolTip(void* ptr, char* v){
	static_cast<QWidget*>(ptr)->setToolTip(QString(v));
}

void QWidget_SetToolTipDuration(void* ptr, int msec){
	static_cast<QWidget*>(ptr)->setToolTipDuration(msec);
}

void QWidget_SetUpdatesEnabled(void* ptr, int enable){
	static_cast<QWidget*>(ptr)->setUpdatesEnabled(enable != 0);
}

void QWidget_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QWidget_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QWidget_SetWhatsThis(void* ptr, char* v){
	static_cast<QWidget*>(ptr)->setWhatsThis(QString(v));
}

void QWidget_SetWindowFilePath(void* ptr, char* filePath){
	static_cast<QWidget*>(ptr)->setWindowFilePath(QString(filePath));
}

void QWidget_SetWindowFlags(void* ptr, int ty){
	static_cast<QWidget*>(ptr)->setWindowFlags(static_cast<Qt::WindowType>(ty));
}

void QWidget_SetWindowIcon(void* ptr, void* icon){
	static_cast<QWidget*>(ptr)->setWindowIcon(*static_cast<QIcon*>(icon));
}

void QWidget_SetWindowIconText(void* ptr, char* v){
	static_cast<QWidget*>(ptr)->setWindowIconText(QString(v));
}

void QWidget_SetWindowModality(void* ptr, int windowModality){
	static_cast<QWidget*>(ptr)->setWindowModality(static_cast<Qt::WindowModality>(windowModality));
}

void QWidget_SetWindowModified(void* ptr, int v){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "setWindowModified", Q_ARG(bool, v != 0));
}

void QWidget_SetWindowOpacity(void* ptr, double level){
	static_cast<QWidget*>(ptr)->setWindowOpacity(static_cast<double>(level));
}

void QWidget_SetWindowState(void* ptr, int windowState){
	static_cast<QWidget*>(ptr)->setWindowState(static_cast<Qt::WindowState>(windowState));
}

void QWidget_SetWindowTitle(void* ptr, char* v){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "setWindowTitle", Q_ARG(QString, QString(v)));
}

void QWidget_ShowEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QWidget_ShowEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::showEvent(static_cast<QShowEvent*>(event));
}

void* QWidget_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidget*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QWidget*>(ptr)->sizeHint()).height());
}

void* QWidget_SizeIncrement(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidget*>(ptr)->sizeIncrement()).width(), static_cast<QSize>(static_cast<QWidget*>(ptr)->sizeIncrement()).height());
}

char* QWidget_StatusTip(void* ptr){
	return static_cast<QWidget*>(ptr)->statusTip().toUtf8().data();
}

char* QWidget_StyleSheet(void* ptr){
	return static_cast<QWidget*>(ptr)->styleSheet().toUtf8().data();
}

char* QWidget_ToolTip(void* ptr){
	return static_cast<QWidget*>(ptr)->toolTip().toUtf8().data();
}

int QWidget_ToolTipDuration(void* ptr){
	return static_cast<QWidget*>(ptr)->toolTipDuration();
}

void QWidget_UnsetCursor(void* ptr){
	static_cast<QWidget*>(ptr)->unsetCursor();
}

void QWidget_UnsetLayoutDirection(void* ptr){
	static_cast<QWidget*>(ptr)->unsetLayoutDirection();
}

void QWidget_UnsetLocale(void* ptr){
	static_cast<QWidget*>(ptr)->unsetLocale();
}

char* QWidget_WhatsThis(void* ptr){
	return static_cast<QWidget*>(ptr)->whatsThis().toUtf8().data();
}

unsigned long long QWidget_WinId(void* ptr){
	return static_cast<unsigned long long>(static_cast<QWidget*>(ptr)->winId());
}

char* QWidget_WindowFilePath(void* ptr){
	return static_cast<QWidget*>(ptr)->windowFilePath().toUtf8().data();
}

void* QWidget_WindowIcon(void* ptr){
	return new QIcon(static_cast<QWidget*>(ptr)->windowIcon());
}

char* QWidget_WindowIconText(void* ptr){
	return static_cast<QWidget*>(ptr)->windowIconText().toUtf8().data();
}

int QWidget_WindowModality(void* ptr){
	return static_cast<QWidget*>(ptr)->windowModality();
}

double QWidget_WindowOpacity(void* ptr){
	return static_cast<double>(static_cast<QWidget*>(ptr)->windowOpacity());
}

char* QWidget_WindowTitle(void* ptr){
	return static_cast<QWidget*>(ptr)->windowTitle().toUtf8().data();
}

int QWidget_X(void* ptr){
	return static_cast<QWidget*>(ptr)->x();
}

int QWidget_Y(void* ptr){
	return static_cast<QWidget*>(ptr)->y();
}

void* QWidget_NewQWidget(void* parent, int f){
	return new MyQWidget(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

void QWidget_AddAction(void* ptr, void* action){
	static_cast<QWidget*>(ptr)->addAction(static_cast<QAction*>(action));
}

void QWidget_AdjustSize(void* ptr){
	static_cast<QWidget*>(ptr)->adjustSize();
}

int QWidget_BackgroundRole(void* ptr){
	return static_cast<QWidget*>(ptr)->backgroundRole();
}

void* QWidget_BackingStore(void* ptr){
	return static_cast<QWidget*>(ptr)->backingStore();
}

void QWidget_ChangeEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QWidget_ChangeEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::changeEvent(static_cast<QEvent*>(event));
}

void* QWidget_ChildAt2(void* ptr, void* p){
	return static_cast<QWidget*>(ptr)->childAt(*static_cast<QPoint*>(p));
}

void* QWidget_ChildAt(void* ptr, int x, int y){
	return static_cast<QWidget*>(ptr)->childAt(x, y);
}

void QWidget_ClearFocus(void* ptr){
	static_cast<QWidget*>(ptr)->clearFocus();
}

int QWidget_Close(void* ptr){
	return QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "close");
}

void QWidget_CloseEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QWidget_CloseEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::closeEvent(static_cast<QCloseEvent*>(event));
}

void* QWidget_ContentsRect(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QWidget*>(ptr)->contentsRect()).x(), static_cast<QRect>(static_cast<QWidget*>(ptr)->contentsRect()).y(), static_cast<QRect>(static_cast<QWidget*>(ptr)->contentsRect()).width(), static_cast<QRect>(static_cast<QWidget*>(ptr)->contentsRect()).height());
}

void QWidget_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QWidget_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QWidget_ConnectCustomContextMenuRequested(void* ptr){
	QObject::connect(static_cast<QWidget*>(ptr), static_cast<void (QWidget::*)(const QPoint &)>(&QWidget::customContextMenuRequested), static_cast<MyQWidget*>(ptr), static_cast<void (MyQWidget::*)(const QPoint &)>(&MyQWidget::Signal_CustomContextMenuRequested));;
}

void QWidget_DisconnectCustomContextMenuRequested(void* ptr){
	QObject::disconnect(static_cast<QWidget*>(ptr), static_cast<void (QWidget::*)(const QPoint &)>(&QWidget::customContextMenuRequested), static_cast<MyQWidget*>(ptr), static_cast<void (MyQWidget::*)(const QPoint &)>(&MyQWidget::Signal_CustomContextMenuRequested));;
}

void QWidget_CustomContextMenuRequested(void* ptr, void* pos){
	static_cast<QWidget*>(ptr)->customContextMenuRequested(*static_cast<QPoint*>(pos));
}

unsigned long long QWidget_EffectiveWinId(void* ptr){
	return static_cast<unsigned long long>(static_cast<QWidget*>(ptr)->effectiveWinId());
}

void QWidget_EnsurePolished(void* ptr){
	static_cast<QWidget*>(ptr)->ensurePolished();
}

int QWidget_Event(void* ptr, void* event){
	return static_cast<QWidget*>(ptr)->event(static_cast<QEvent*>(event));
}

int QWidget_FocusNextPrevChild(void* ptr, int next){
	return static_cast<QWidget*>(ptr)->focusNextPrevChild(next != 0);
}

void* QWidget_FocusProxy(void* ptr){
	return static_cast<QWidget*>(ptr)->focusProxy();
}

void* QWidget_FocusWidget(void* ptr){
	return static_cast<QWidget*>(ptr)->focusWidget();
}

void* QWidget_Font(void* ptr){
	return new QFont(static_cast<QWidget*>(ptr)->font());
}

void* QWidget_FontInfo(void* ptr){
	return new QFontInfo(static_cast<QWidget*>(ptr)->fontInfo());
}

void* QWidget_FontMetrics(void* ptr){
	return new QFontMetrics(static_cast<QWidget*>(ptr)->fontMetrics());
}

int QWidget_ForegroundRole(void* ptr){
	return static_cast<QWidget*>(ptr)->foregroundRole();
}

void* QWidget_Geometry(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QWidget*>(ptr)->geometry()).x(), static_cast<QRect>(static_cast<QWidget*>(ptr)->geometry()).y(), static_cast<QRect>(static_cast<QWidget*>(ptr)->geometry()).width(), static_cast<QRect>(static_cast<QWidget*>(ptr)->geometry()).height());
}

void QWidget_GetContentsMargins(void* ptr, int left, int top, int right, int bottom){
	static_cast<QWidget*>(ptr)->getContentsMargins(&left, &top, &right, &bottom);
}

void* QWidget_Grab(void* ptr, void* rectangle){
	return new QPixmap(static_cast<QWidget*>(ptr)->grab(*static_cast<QRect*>(rectangle)));
}

void QWidget_GrabGesture(void* ptr, int gesture, int flags){
	static_cast<QWidget*>(ptr)->grabGesture(static_cast<Qt::GestureType>(gesture), static_cast<Qt::GestureFlag>(flags));
}

int QWidget_GrabShortcut(void* ptr, void* key, int context){
	return static_cast<QWidget*>(ptr)->grabShortcut(*static_cast<QKeySequence*>(key), static_cast<Qt::ShortcutContext>(context));
}

void* QWidget_GraphicsEffect(void* ptr){
	return static_cast<QWidget*>(ptr)->graphicsEffect();
}

void* QWidget_GraphicsProxyWidget(void* ptr){
	return static_cast<QWidget*>(ptr)->graphicsProxyWidget();
}

int QWidget_HasHeightForWidth(void* ptr){
	return static_cast<QWidget*>(ptr)->hasHeightForWidth();
}

int QWidget_HasMouseTracking(void* ptr){
	return static_cast<QWidget*>(ptr)->hasMouseTracking();
}

int QWidget_Height(void* ptr){
	return static_cast<QWidget*>(ptr)->height();
}

int QWidget_HeightForWidth(void* ptr, int w){
	return static_cast<QWidget*>(ptr)->heightForWidth(w);
}

void QWidget_Hide(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "hide");
}

void QWidget_InitPainter(void* ptr, void* painter){
	static_cast<MyQWidget*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QWidget_InitPainterDefault(void* ptr, void* painter){
	static_cast<QWidget*>(ptr)->QWidget::initPainter(static_cast<QPainter*>(painter));
}

void QWidget_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QWidget_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void* QWidget_InputMethodQuery(void* ptr, int query){
	return new QVariant(static_cast<QWidget*>(ptr)->inputMethodQuery(static_cast<Qt::InputMethodQuery>(query)));
}

void QWidget_InsertAction(void* ptr, void* before, void* action){
	static_cast<QWidget*>(ptr)->insertAction(static_cast<QAction*>(before), static_cast<QAction*>(action));
}

int QWidget_IsAncestorOf(void* ptr, void* child){
	return static_cast<QWidget*>(ptr)->isAncestorOf(static_cast<QWidget*>(child));
}

int QWidget_IsEnabled(void* ptr){
	return static_cast<QWidget*>(ptr)->isEnabled();
}

int QWidget_IsEnabledTo(void* ptr, void* ancestor){
	return static_cast<QWidget*>(ptr)->isEnabledTo(static_cast<QWidget*>(ancestor));
}

int QWidget_IsHidden(void* ptr){
	return static_cast<QWidget*>(ptr)->isHidden();
}

int QWidget_IsModal(void* ptr){
	return static_cast<QWidget*>(ptr)->isModal();
}

int QWidget_IsVisible(void* ptr){
	return static_cast<QWidget*>(ptr)->isVisible();
}

int QWidget_IsVisibleTo(void* ptr, void* ancestor){
	return static_cast<QWidget*>(ptr)->isVisibleTo(static_cast<QWidget*>(ancestor));
}

int QWidget_IsWindow(void* ptr){
	return static_cast<QWidget*>(ptr)->isWindow();
}

void QWidget_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QWidget_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QWidget_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QWidget_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void* QWidget_Layout(void* ptr){
	return static_cast<QWidget*>(ptr)->layout();
}

void QWidget_Lower(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "lower");
}

void* QWidget_MapFrom(void* ptr, void* parent, void* pos){
	return new QPoint(static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapFrom(static_cast<QWidget*>(parent), *static_cast<QPoint*>(pos))).x(), static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapFrom(static_cast<QWidget*>(parent), *static_cast<QPoint*>(pos))).y());
}

void* QWidget_MapFromParent(void* ptr, void* pos){
	return new QPoint(static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapFromParent(*static_cast<QPoint*>(pos))).x(), static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapFromParent(*static_cast<QPoint*>(pos))).y());
}

void* QWidget_MapTo(void* ptr, void* parent, void* pos){
	return new QPoint(static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapTo(static_cast<QWidget*>(parent), *static_cast<QPoint*>(pos))).x(), static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapTo(static_cast<QWidget*>(parent), *static_cast<QPoint*>(pos))).y());
}

void* QWidget_MapToParent(void* ptr, void* pos){
	return new QPoint(static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapToParent(*static_cast<QPoint*>(pos))).x(), static_cast<QPoint>(static_cast<QWidget*>(ptr)->mapToParent(*static_cast<QPoint*>(pos))).y());
}

void* QWidget_Mask(void* ptr){
	return new QRegion(static_cast<QWidget*>(ptr)->mask());
}

int QWidget_MaximumHeight(void* ptr){
	return static_cast<QWidget*>(ptr)->maximumHeight();
}

int QWidget_MaximumWidth(void* ptr){
	return static_cast<QWidget*>(ptr)->maximumWidth();
}

int QWidget_MinimumHeight(void* ptr){
	return static_cast<QWidget*>(ptr)->minimumHeight();
}

int QWidget_MinimumWidth(void* ptr){
	return static_cast<QWidget*>(ptr)->minimumWidth();
}

void QWidget_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QWidget_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QWidget_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QWidget_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QWidget_MousePressEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QWidget_MousePressEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QWidget_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QWidget_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QWidget_Move2(void* ptr, int x, int y){
	static_cast<QWidget*>(ptr)->move(x, y);
}

void* QWidget_NativeParentWidget(void* ptr){
	return static_cast<QWidget*>(ptr)->nativeParentWidget();
}

void* QWidget_NextInFocusChain(void* ptr){
	return static_cast<QWidget*>(ptr)->nextInFocusChain();
}

void QWidget_OverrideWindowFlags(void* ptr, int flags){
	static_cast<QWidget*>(ptr)->overrideWindowFlags(static_cast<Qt::WindowType>(flags));
}

void* QWidget_ParentWidget(void* ptr){
	return static_cast<QWidget*>(ptr)->parentWidget();
}

void* QWidget_PreviousInFocusChain(void* ptr){
	return static_cast<QWidget*>(ptr)->previousInFocusChain();
}

void QWidget_Raise(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "raise");
}

void* QWidget_Rect(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QWidget*>(ptr)->rect()).x(), static_cast<QRect>(static_cast<QWidget*>(ptr)->rect()).y(), static_cast<QRect>(static_cast<QWidget*>(ptr)->rect()).width(), static_cast<QRect>(static_cast<QWidget*>(ptr)->rect()).height());
}

void QWidget_ReleaseShortcut(void* ptr, int id){
	static_cast<QWidget*>(ptr)->releaseShortcut(id);
}

void QWidget_RemoveAction(void* ptr, void* action){
	static_cast<QWidget*>(ptr)->removeAction(static_cast<QAction*>(action));
}

void QWidget_Render(void* ptr, void* target, void* targetOffset, void* sourceRegion, int renderFlags){
	static_cast<QWidget*>(ptr)->render(static_cast<QPaintDevice*>(target), *static_cast<QPoint*>(targetOffset), *static_cast<QRegion*>(sourceRegion), static_cast<QWidget::RenderFlag>(renderFlags));
}

void QWidget_Render2(void* ptr, void* painter, void* targetOffset, void* sourceRegion, int renderFlags){
	static_cast<QWidget*>(ptr)->render(static_cast<QPainter*>(painter), *static_cast<QPoint*>(targetOffset), *static_cast<QRegion*>(sourceRegion), static_cast<QWidget::RenderFlag>(renderFlags));
}

void QWidget_Repaint(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "repaint");
}

void QWidget_Repaint3(void* ptr, void* rect){
	static_cast<QWidget*>(ptr)->repaint(*static_cast<QRect*>(rect));
}

void QWidget_Repaint4(void* ptr, void* rgn){
	static_cast<QWidget*>(ptr)->repaint(*static_cast<QRegion*>(rgn));
}

void QWidget_Repaint2(void* ptr, int x, int y, int w, int h){
	static_cast<QWidget*>(ptr)->repaint(x, y, w, h);
}

void QWidget_Resize2(void* ptr, int w, int h){
	static_cast<QWidget*>(ptr)->resize(w, h);
}

void QWidget_ResizeEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QWidget_ResizeEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::resizeEvent(static_cast<QResizeEvent*>(event));
}

int QWidget_RestoreGeometry(void* ptr, char* geometry){
	return static_cast<QWidget*>(ptr)->restoreGeometry(QByteArray(geometry));
}

char* QWidget_SaveGeometry(void* ptr){
	return QString(static_cast<QWidget*>(ptr)->saveGeometry()).toUtf8().data();
}

void QWidget_Scroll(void* ptr, int dx, int dy){
	static_cast<QWidget*>(ptr)->scroll(dx, dy);
}

void QWidget_Scroll2(void* ptr, int dx, int dy, void* r){
	static_cast<QWidget*>(ptr)->scroll(dx, dy, *static_cast<QRect*>(r));
}

void QWidget_SetAttribute(void* ptr, int attribute, int on){
	static_cast<QWidget*>(ptr)->setAttribute(static_cast<Qt::WidgetAttribute>(attribute), on != 0);
}

void QWidget_SetBackgroundRole(void* ptr, int role){
	static_cast<QWidget*>(ptr)->setBackgroundRole(static_cast<QPalette::ColorRole>(role));
}

void QWidget_SetBaseSize(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->setBaseSize(*static_cast<QSize*>(v));
}

void QWidget_SetBaseSize2(void* ptr, int basew, int baseh){
	static_cast<QWidget*>(ptr)->setBaseSize(basew, baseh);
}

void QWidget_SetContentsMargins2(void* ptr, void* margins){
	static_cast<QWidget*>(ptr)->setContentsMargins(*static_cast<QMargins*>(margins));
}

void QWidget_SetContentsMargins(void* ptr, int left, int top, int right, int bottom){
	static_cast<QWidget*>(ptr)->setContentsMargins(left, top, right, bottom);
}

void QWidget_SetDisabled(void* ptr, int disable){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "setDisabled", Q_ARG(bool, disable != 0));
}

void QWidget_SetFixedHeight(void* ptr, int h){
	static_cast<QWidget*>(ptr)->setFixedHeight(h);
}

void QWidget_SetFixedSize(void* ptr, void* s){
	static_cast<QWidget*>(ptr)->setFixedSize(*static_cast<QSize*>(s));
}

void QWidget_SetFixedWidth(void* ptr, int w){
	static_cast<QWidget*>(ptr)->setFixedWidth(w);
}

void QWidget_SetFocus2(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "setFocus");
}

void QWidget_SetFocus(void* ptr, int reason){
	static_cast<QWidget*>(ptr)->setFocus(static_cast<Qt::FocusReason>(reason));
}

void QWidget_SetFocusProxy(void* ptr, void* w){
	static_cast<QWidget*>(ptr)->setFocusProxy(static_cast<QWidget*>(w));
}

void QWidget_SetForegroundRole(void* ptr, int role){
	static_cast<QWidget*>(ptr)->setForegroundRole(static_cast<QPalette::ColorRole>(role));
}

void QWidget_SetGeometry2(void* ptr, int x, int y, int w, int h){
	static_cast<QWidget*>(ptr)->setGeometry(x, y, w, h);
}

void QWidget_SetGraphicsEffect(void* ptr, void* effect){
	static_cast<QWidget*>(ptr)->setGraphicsEffect(static_cast<QGraphicsEffect*>(effect));
}

void QWidget_SetHidden(void* ptr, int hidden){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "setHidden", Q_ARG(bool, hidden != 0));
}

void QWidget_SetMaximumSize(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->setMaximumSize(*static_cast<QSize*>(v));
}

void QWidget_SetMaximumSize2(void* ptr, int maxw, int maxh){
	static_cast<QWidget*>(ptr)->setMaximumSize(maxw, maxh);
}

void QWidget_SetMinimumSize(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->setMinimumSize(*static_cast<QSize*>(v));
}

void QWidget_SetMinimumSize2(void* ptr, int minw, int minh){
	static_cast<QWidget*>(ptr)->setMinimumSize(minw, minh);
}

void QWidget_SetMouseTracking(void* ptr, int enable){
	static_cast<QWidget*>(ptr)->setMouseTracking(enable != 0);
}

void QWidget_SetParent(void* ptr, void* parent){
	static_cast<QWidget*>(ptr)->setParent(static_cast<QWidget*>(parent));
}

void QWidget_SetParent2(void* ptr, void* parent, int f){
	static_cast<QWidget*>(ptr)->setParent(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(f));
}

void QWidget_SetShortcutAutoRepeat(void* ptr, int id, int enable){
	static_cast<QWidget*>(ptr)->setShortcutAutoRepeat(id, enable != 0);
}

void QWidget_SetShortcutEnabled(void* ptr, int id, int enable){
	static_cast<QWidget*>(ptr)->setShortcutEnabled(id, enable != 0);
}

void QWidget_SetSizeIncrement(void* ptr, void* v){
	static_cast<QWidget*>(ptr)->setSizeIncrement(*static_cast<QSize*>(v));
}

void QWidget_SetSizeIncrement2(void* ptr, int w, int h){
	static_cast<QWidget*>(ptr)->setSizeIncrement(w, h);
}

void QWidget_SetSizePolicy2(void* ptr, int horizontal, int vertical){
	static_cast<QWidget*>(ptr)->setSizePolicy(static_cast<QSizePolicy::Policy>(horizontal), static_cast<QSizePolicy::Policy>(vertical));
}

void QWidget_SetStyle(void* ptr, void* style){
	static_cast<QWidget*>(ptr)->setStyle(static_cast<QStyle*>(style));
}

void QWidget_QWidget_SetTabOrder(void* first, void* second){
	QWidget::setTabOrder(static_cast<QWidget*>(first), static_cast<QWidget*>(second));
}

void QWidget_SetWindowRole(void* ptr, char* role){
	static_cast<QWidget*>(ptr)->setWindowRole(QString(role));
}

void QWidget_Show(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "show");
}

void QWidget_ShowFullScreen(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "showFullScreen");
}

void QWidget_ShowMaximized(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "showMaximized");
}

void QWidget_ShowMinimized(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "showMinimized");
}

void QWidget_ShowNormal(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "showNormal");
}

void* QWidget_Size(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidget*>(ptr)->size()).width(), static_cast<QSize>(static_cast<QWidget*>(ptr)->size()).height());
}

void QWidget_StackUnder(void* ptr, void* w){
	static_cast<QWidget*>(ptr)->stackUnder(static_cast<QWidget*>(w));
}

void* QWidget_Style(void* ptr){
	return static_cast<QWidget*>(ptr)->style();
}

void QWidget_TabletEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QWidget_TabletEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::tabletEvent(static_cast<QTabletEvent*>(event));
}

int QWidget_TestAttribute(void* ptr, int attribute){
	return static_cast<QWidget*>(ptr)->testAttribute(static_cast<Qt::WidgetAttribute>(attribute));
}

int QWidget_UnderMouse(void* ptr){
	return static_cast<QWidget*>(ptr)->underMouse();
}

void QWidget_UngrabGesture(void* ptr, int gesture){
	static_cast<QWidget*>(ptr)->ungrabGesture(static_cast<Qt::GestureType>(gesture));
}

void QWidget_Update(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWidget*>(ptr), "update");
}

void QWidget_Update3(void* ptr, void* rect){
	static_cast<QWidget*>(ptr)->update(*static_cast<QRect*>(rect));
}

void QWidget_Update4(void* ptr, void* rgn){
	static_cast<QWidget*>(ptr)->update(*static_cast<QRegion*>(rgn));
}

void QWidget_Update2(void* ptr, int x, int y, int w, int h){
	static_cast<QWidget*>(ptr)->update(x, y, w, h);
}

void QWidget_UpdateGeometry(void* ptr){
	static_cast<QWidget*>(ptr)->updateGeometry();
}

int QWidget_UpdatesEnabled(void* ptr){
	return static_cast<QWidget*>(ptr)->updatesEnabled();
}

void* QWidget_VisibleRegion(void* ptr){
	return new QRegion(static_cast<QWidget*>(ptr)->visibleRegion());
}

void QWidget_WheelEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QWidget_WheelEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::wheelEvent(static_cast<QWheelEvent*>(event));
}

int QWidget_Width(void* ptr){
	return static_cast<QWidget*>(ptr)->width();
}

void* QWidget_Window(void* ptr){
	return static_cast<QWidget*>(ptr)->window();
}

int QWidget_WindowFlags(void* ptr){
	return static_cast<QWidget*>(ptr)->windowFlags();
}

void* QWidget_WindowHandle(void* ptr){
	return static_cast<QWidget*>(ptr)->windowHandle();
}

void QWidget_ConnectWindowIconChanged(void* ptr){
	QObject::connect(static_cast<QWidget*>(ptr), static_cast<void (QWidget::*)(const QIcon &)>(&QWidget::windowIconChanged), static_cast<MyQWidget*>(ptr), static_cast<void (MyQWidget::*)(const QIcon &)>(&MyQWidget::Signal_WindowIconChanged));;
}

void QWidget_DisconnectWindowIconChanged(void* ptr){
	QObject::disconnect(static_cast<QWidget*>(ptr), static_cast<void (QWidget::*)(const QIcon &)>(&QWidget::windowIconChanged), static_cast<MyQWidget*>(ptr), static_cast<void (MyQWidget::*)(const QIcon &)>(&MyQWidget::Signal_WindowIconChanged));;
}

void QWidget_WindowIconChanged(void* ptr, void* icon){
	static_cast<QWidget*>(ptr)->windowIconChanged(*static_cast<QIcon*>(icon));
}

void QWidget_ConnectWindowIconTextChanged(void* ptr){
	QObject::connect(static_cast<QWidget*>(ptr), static_cast<void (QWidget::*)(const QString &)>(&QWidget::windowIconTextChanged), static_cast<MyQWidget*>(ptr), static_cast<void (MyQWidget::*)(const QString &)>(&MyQWidget::Signal_WindowIconTextChanged));;
}

void QWidget_DisconnectWindowIconTextChanged(void* ptr){
	QObject::disconnect(static_cast<QWidget*>(ptr), static_cast<void (QWidget::*)(const QString &)>(&QWidget::windowIconTextChanged), static_cast<MyQWidget*>(ptr), static_cast<void (MyQWidget::*)(const QString &)>(&MyQWidget::Signal_WindowIconTextChanged));;
}

void QWidget_WindowIconTextChanged(void* ptr, char* iconText){
	static_cast<QWidget*>(ptr)->windowIconTextChanged(QString(iconText));
}

char* QWidget_WindowRole(void* ptr){
	return static_cast<QWidget*>(ptr)->windowRole().toUtf8().data();
}

int QWidget_WindowState(void* ptr){
	return static_cast<QWidget*>(ptr)->windowState();
}

void QWidget_ConnectWindowTitleChanged(void* ptr){
	QObject::connect(static_cast<QWidget*>(ptr), static_cast<void (QWidget::*)(const QString &)>(&QWidget::windowTitleChanged), static_cast<MyQWidget*>(ptr), static_cast<void (MyQWidget::*)(const QString &)>(&MyQWidget::Signal_WindowTitleChanged));;
}

void QWidget_DisconnectWindowTitleChanged(void* ptr){
	QObject::disconnect(static_cast<QWidget*>(ptr), static_cast<void (QWidget::*)(const QString &)>(&QWidget::windowTitleChanged), static_cast<MyQWidget*>(ptr), static_cast<void (MyQWidget::*)(const QString &)>(&MyQWidget::Signal_WindowTitleChanged));;
}

void QWidget_WindowTitleChanged(void* ptr, char* title){
	static_cast<QWidget*>(ptr)->windowTitleChanged(QString(title));
}

int QWidget_WindowType(void* ptr){
	return static_cast<QWidget*>(ptr)->windowType();
}

void QWidget_DestroyQWidget(void* ptr){
	static_cast<QWidget*>(ptr)->~QWidget();
}

void* QWidget_QWidget_CreateWindowContainer(void* window, void* parent, int flags){
	return QWidget::createWindowContainer(static_cast<QWindow*>(window), static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(flags));
}

void QWidget_TimerEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QWidget_TimerEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::timerEvent(static_cast<QTimerEvent*>(event));
}

void QWidget_ChildEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QWidget_ChildEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::childEvent(static_cast<QChildEvent*>(event));
}

void QWidget_CustomEvent(void* ptr, void* event){
	static_cast<MyQWidget*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QWidget_CustomEventDefault(void* ptr, void* event){
	static_cast<QWidget*>(ptr)->QWidget::customEvent(static_cast<QEvent*>(event));
}

class MyQWidgetAction: public QWidgetAction {
public:
	MyQWidgetAction(QObject *parent) : QWidgetAction(parent) {};
	void deleteWidget(QWidget * widget) { callbackQWidgetActionDeleteWidget(this, this->objectName().toUtf8().data(), widget); };
	void timerEvent(QTimerEvent * event) { callbackQWidgetActionTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQWidgetActionChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQWidgetActionCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void* QWidgetAction_NewQWidgetAction(void* parent){
	return new MyQWidgetAction(static_cast<QObject*>(parent));
}

void* QWidgetAction_CreateWidget(void* ptr, void* parent){
	return static_cast<QWidgetAction*>(ptr)->createWidget(static_cast<QWidget*>(parent));
}

void* QWidgetAction_DefaultWidget(void* ptr){
	return static_cast<QWidgetAction*>(ptr)->defaultWidget();
}

void QWidgetAction_DeleteWidget(void* ptr, void* widget){
	static_cast<MyQWidgetAction*>(ptr)->deleteWidget(static_cast<QWidget*>(widget));
}

void QWidgetAction_DeleteWidgetDefault(void* ptr, void* widget){
	static_cast<QWidgetAction*>(ptr)->QWidgetAction::deleteWidget(static_cast<QWidget*>(widget));
}

int QWidgetAction_Event(void* ptr, void* event){
	return static_cast<QWidgetAction*>(ptr)->event(static_cast<QEvent*>(event));
}

int QWidgetAction_EventFilter(void* ptr, void* obj, void* event){
	return static_cast<QWidgetAction*>(ptr)->eventFilter(static_cast<QObject*>(obj), static_cast<QEvent*>(event));
}

void QWidgetAction_ReleaseWidget(void* ptr, void* widget){
	static_cast<QWidgetAction*>(ptr)->releaseWidget(static_cast<QWidget*>(widget));
}

void* QWidgetAction_RequestWidget(void* ptr, void* parent){
	return static_cast<QWidgetAction*>(ptr)->requestWidget(static_cast<QWidget*>(parent));
}

void QWidgetAction_SetDefaultWidget(void* ptr, void* widget){
	static_cast<QWidgetAction*>(ptr)->setDefaultWidget(static_cast<QWidget*>(widget));
}

void QWidgetAction_DestroyQWidgetAction(void* ptr){
	static_cast<QWidgetAction*>(ptr)->~QWidgetAction();
}

void QWidgetAction_TimerEvent(void* ptr, void* event){
	static_cast<MyQWidgetAction*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QWidgetAction_TimerEventDefault(void* ptr, void* event){
	static_cast<QWidgetAction*>(ptr)->QWidgetAction::timerEvent(static_cast<QTimerEvent*>(event));
}

void QWidgetAction_ChildEvent(void* ptr, void* event){
	static_cast<MyQWidgetAction*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QWidgetAction_ChildEventDefault(void* ptr, void* event){
	static_cast<QWidgetAction*>(ptr)->QWidgetAction::childEvent(static_cast<QChildEvent*>(event));
}

void QWidgetAction_CustomEvent(void* ptr, void* event){
	static_cast<MyQWidgetAction*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QWidgetAction_CustomEventDefault(void* ptr, void* event){
	static_cast<QWidgetAction*>(ptr)->QWidgetAction::customEvent(static_cast<QEvent*>(event));
}

class MyQWidgetItem: public QWidgetItem {
public:
	QString _objectName;
	QString objectNameAbs() const { return this->_objectName; };
	void setObjectNameAbs(const QString &name) { this->_objectName = name; };
	MyQWidgetItem(QWidget *widget) : QWidgetItem(widget) {};
	void setGeometry(const QRect & rect) { callbackQWidgetItemSetGeometry(this, this->objectNameAbs().toUtf8().data(), new QRect(static_cast<QRect>(rect).x(), static_cast<QRect>(rect).y(), static_cast<QRect>(rect).width(), static_cast<QRect>(rect).height())); };
	void invalidate() { callbackQWidgetItemInvalidate(this, this->objectNameAbs().toUtf8().data()); };
};

void* QWidgetItem_NewQWidgetItem(void* widget){
	return new MyQWidgetItem(static_cast<QWidget*>(widget));
}

int QWidgetItem_ControlTypes(void* ptr){
	return static_cast<QWidgetItem*>(ptr)->controlTypes();
}

int QWidgetItem_ExpandingDirections(void* ptr){
	return static_cast<QWidgetItem*>(ptr)->expandingDirections();
}

void* QWidgetItem_Geometry(void* ptr){
	return new QRect(static_cast<QRect>(static_cast<QWidgetItem*>(ptr)->geometry()).x(), static_cast<QRect>(static_cast<QWidgetItem*>(ptr)->geometry()).y(), static_cast<QRect>(static_cast<QWidgetItem*>(ptr)->geometry()).width(), static_cast<QRect>(static_cast<QWidgetItem*>(ptr)->geometry()).height());
}

int QWidgetItem_HasHeightForWidth(void* ptr){
	return static_cast<QWidgetItem*>(ptr)->hasHeightForWidth();
}

int QWidgetItem_HeightForWidth(void* ptr, int w){
	return static_cast<QWidgetItem*>(ptr)->heightForWidth(w);
}

int QWidgetItem_IsEmpty(void* ptr){
	return static_cast<QWidgetItem*>(ptr)->isEmpty();
}

void* QWidgetItem_MaximumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidgetItem*>(ptr)->maximumSize()).width(), static_cast<QSize>(static_cast<QWidgetItem*>(ptr)->maximumSize()).height());
}

void* QWidgetItem_MinimumSize(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidgetItem*>(ptr)->minimumSize()).width(), static_cast<QSize>(static_cast<QWidgetItem*>(ptr)->minimumSize()).height());
}

void QWidgetItem_SetGeometry(void* ptr, void* rect){
	static_cast<MyQWidgetItem*>(ptr)->setGeometry(*static_cast<QRect*>(rect));
}

void QWidgetItem_SetGeometryDefault(void* ptr, void* rect){
	static_cast<QWidgetItem*>(ptr)->QWidgetItem::setGeometry(*static_cast<QRect*>(rect));
}

void* QWidgetItem_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWidgetItem*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QWidgetItem*>(ptr)->sizeHint()).height());
}

void* QWidgetItem_Widget(void* ptr){
	return static_cast<QWidgetItem*>(ptr)->widget();
}

void QWidgetItem_DestroyQWidgetItem(void* ptr){
	static_cast<QWidgetItem*>(ptr)->~QWidgetItem();
}

char* QWidgetItem_ObjectNameAbs(void* ptr){
	if (dynamic_cast<MyQWidgetItem*>(static_cast<QWidgetItem*>(ptr))) {
		return static_cast<MyQWidgetItem*>(ptr)->objectNameAbs().toUtf8().data();
	}
	return QString("QWidgetItem_BASE").toUtf8().data();
}

void QWidgetItem_SetObjectNameAbs(void* ptr, char* name){
	if (dynamic_cast<MyQWidgetItem*>(static_cast<QWidgetItem*>(ptr))) {
		static_cast<MyQWidgetItem*>(ptr)->setObjectNameAbs(QString(name));
	}
}

void QWidgetItem_Invalidate(void* ptr){
	static_cast<MyQWidgetItem*>(ptr)->invalidate();
}

void QWidgetItem_InvalidateDefault(void* ptr){
	static_cast<QWidgetItem*>(ptr)->QWidgetItem::invalidate();
}

class MyQWizard: public QWizard {
public:
	MyQWizard(QWidget *parent, Qt::WindowFlags flags) : QWizard(parent, flags) {};
	void cleanupPage(int id) { callbackQWizardCleanupPage(this, this->objectName().toUtf8().data(), id); };
	void initializePage(int id) { callbackQWizardInitializePage(this, this->objectName().toUtf8().data(), id); };
	void Signal_CurrentIdChanged(int id) { callbackQWizardCurrentIdChanged(this, this->objectName().toUtf8().data(), id); };
	void Signal_CustomButtonClicked(int which) { callbackQWizardCustomButtonClicked(this, this->objectName().toUtf8().data(), which); };
	void done(int result) { if (!callbackQWizardDone(this, this->objectName().toUtf8().data(), result)) { QWizard::done(result); }; };
	void Signal_HelpRequested() { callbackQWizardHelpRequested(this, this->objectName().toUtf8().data()); };
	void Signal_PageAdded(int id) { callbackQWizardPageAdded(this, this->objectName().toUtf8().data(), id); };
	void Signal_PageRemoved(int id) { callbackQWizardPageRemoved(this, this->objectName().toUtf8().data(), id); };
	void paintEvent(QPaintEvent * event) { callbackQWizardPaintEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQWizardResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQWizardSetVisible(this, this->objectName().toUtf8().data(), visible)) { QWizard::setVisible(visible); }; };
	void accept() { if (!callbackQWizardAccept(this, this->objectName().toUtf8().data())) { QWizard::accept(); }; };
	void closeEvent(QCloseEvent * e) { callbackQWizardCloseEvent(this, this->objectName().toUtf8().data(), e); };
	void contextMenuEvent(QContextMenuEvent * e) { callbackQWizardContextMenuEvent(this, this->objectName().toUtf8().data(), e); };
	void keyPressEvent(QKeyEvent * e) { callbackQWizardKeyPressEvent(this, this->objectName().toUtf8().data(), e); };
	void open() { if (!callbackQWizardOpen(this, this->objectName().toUtf8().data())) { QWizard::open(); }; };
	void reject() { if (!callbackQWizardReject(this, this->objectName().toUtf8().data())) { QWizard::reject(); }; };
	void showEvent(QShowEvent * event) { callbackQWizardShowEvent(this, this->objectName().toUtf8().data(), event); };
	void actionEvent(QActionEvent * event) { callbackQWizardActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQWizardDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQWizardDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQWizardDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQWizardDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQWizardEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQWizardFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQWizardFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQWizardHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQWizardLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQWizardMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQWizardChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQWizardInitPainter(const_cast<MyQWizard*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQWizardInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQWizardKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQWizardMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQWizardMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQWizardMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQWizardMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQWizardTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQWizardWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQWizardTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQWizardChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQWizardCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QWizard_CleanupPage(void* ptr, int id){
	static_cast<MyQWizard*>(ptr)->cleanupPage(id);
}

void QWizard_CleanupPageDefault(void* ptr, int id){
	static_cast<QWizard*>(ptr)->QWizard::cleanupPage(id);
}

int QWizard_CurrentId(void* ptr){
	return static_cast<QWizard*>(ptr)->currentId();
}

int QWizard_HasVisitedPage(void* ptr, int id){
	return static_cast<QWizard*>(ptr)->hasVisitedPage(id);
}

void QWizard_InitializePage(void* ptr, int id){
	static_cast<MyQWizard*>(ptr)->initializePage(id);
}

void QWizard_InitializePageDefault(void* ptr, int id){
	static_cast<QWizard*>(ptr)->QWizard::initializePage(id);
}

int QWizard_Options(void* ptr){
	return static_cast<QWizard*>(ptr)->options();
}

void* QWizard_Page(void* ptr, int id){
	return static_cast<QWizard*>(ptr)->page(id);
}

void QWizard_SetOptions(void* ptr, int options){
	static_cast<QWizard*>(ptr)->setOptions(static_cast<QWizard::WizardOption>(options));
}

void QWizard_SetPage(void* ptr, int id, void* page){
	static_cast<QWizard*>(ptr)->setPage(id, static_cast<QWizardPage*>(page));
}

void QWizard_SetStartId(void* ptr, int id){
	static_cast<QWizard*>(ptr)->setStartId(id);
}

void QWizard_SetSubTitleFormat(void* ptr, int format){
	static_cast<QWizard*>(ptr)->setSubTitleFormat(static_cast<Qt::TextFormat>(format));
}

void QWizard_SetTitleFormat(void* ptr, int format){
	static_cast<QWizard*>(ptr)->setTitleFormat(static_cast<Qt::TextFormat>(format));
}

void QWizard_SetWizardStyle(void* ptr, int style){
	static_cast<QWizard*>(ptr)->setWizardStyle(static_cast<QWizard::WizardStyle>(style));
}

int QWizard_StartId(void* ptr){
	return static_cast<QWizard*>(ptr)->startId();
}

int QWizard_SubTitleFormat(void* ptr){
	return static_cast<QWizard*>(ptr)->subTitleFormat();
}

int QWizard_TitleFormat(void* ptr){
	return static_cast<QWizard*>(ptr)->titleFormat();
}

int QWizard_WizardStyle(void* ptr){
	return static_cast<QWizard*>(ptr)->wizardStyle();
}

void* QWizard_NewQWizard(void* parent, int flags){
	return new MyQWizard(static_cast<QWidget*>(parent), static_cast<Qt::WindowType>(flags));
}

int QWizard_AddPage(void* ptr, void* page){
	return static_cast<QWizard*>(ptr)->addPage(static_cast<QWizardPage*>(page));
}

void QWizard_Back(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWizard*>(ptr), "back");
}

void* QWizard_Button(void* ptr, int which){
	return static_cast<QWizard*>(ptr)->button(static_cast<QWizard::WizardButton>(which));
}

char* QWizard_ButtonText(void* ptr, int which){
	return static_cast<QWizard*>(ptr)->buttonText(static_cast<QWizard::WizardButton>(which)).toUtf8().data();
}

void QWizard_ConnectCurrentIdChanged(void* ptr){
	QObject::connect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)(int)>(&QWizard::currentIdChanged), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)(int)>(&MyQWizard::Signal_CurrentIdChanged));;
}

void QWizard_DisconnectCurrentIdChanged(void* ptr){
	QObject::disconnect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)(int)>(&QWizard::currentIdChanged), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)(int)>(&MyQWizard::Signal_CurrentIdChanged));;
}

void QWizard_CurrentIdChanged(void* ptr, int id){
	static_cast<QWizard*>(ptr)->currentIdChanged(id);
}

void* QWizard_CurrentPage(void* ptr){
	return static_cast<QWizard*>(ptr)->currentPage();
}

void QWizard_ConnectCustomButtonClicked(void* ptr){
	QObject::connect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)(int)>(&QWizard::customButtonClicked), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)(int)>(&MyQWizard::Signal_CustomButtonClicked));;
}

void QWizard_DisconnectCustomButtonClicked(void* ptr){
	QObject::disconnect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)(int)>(&QWizard::customButtonClicked), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)(int)>(&MyQWizard::Signal_CustomButtonClicked));;
}

void QWizard_CustomButtonClicked(void* ptr, int which){
	static_cast<QWizard*>(ptr)->customButtonClicked(which);
}

void QWizard_Done(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<MyQWizard*>(ptr), "done", Q_ARG(int, result));
}

void QWizard_DoneDefault(void* ptr, int result){
	QMetaObject::invokeMethod(static_cast<QWizard*>(ptr), "done", Q_ARG(int, result));
}

int QWizard_Event(void* ptr, void* event){
	return static_cast<QWizard*>(ptr)->event(static_cast<QEvent*>(event));
}

void* QWizard_Field(void* ptr, char* name){
	return new QVariant(static_cast<QWizard*>(ptr)->field(QString(name)));
}

void QWizard_ConnectHelpRequested(void* ptr){
	QObject::connect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)()>(&QWizard::helpRequested), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)()>(&MyQWizard::Signal_HelpRequested));;
}

void QWizard_DisconnectHelpRequested(void* ptr){
	QObject::disconnect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)()>(&QWizard::helpRequested), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)()>(&MyQWizard::Signal_HelpRequested));;
}

void QWizard_HelpRequested(void* ptr){
	static_cast<QWizard*>(ptr)->helpRequested();
}

void QWizard_Next(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWizard*>(ptr), "next");
}

int QWizard_NextId(void* ptr){
	return static_cast<QWizard*>(ptr)->nextId();
}

void QWizard_ConnectPageAdded(void* ptr){
	QObject::connect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)(int)>(&QWizard::pageAdded), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)(int)>(&MyQWizard::Signal_PageAdded));;
}

void QWizard_DisconnectPageAdded(void* ptr){
	QObject::disconnect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)(int)>(&QWizard::pageAdded), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)(int)>(&MyQWizard::Signal_PageAdded));;
}

void QWizard_PageAdded(void* ptr, int id){
	static_cast<QWizard*>(ptr)->pageAdded(id);
}

void QWizard_ConnectPageRemoved(void* ptr){
	QObject::connect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)(int)>(&QWizard::pageRemoved), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)(int)>(&MyQWizard::Signal_PageRemoved));;
}

void QWizard_DisconnectPageRemoved(void* ptr){
	QObject::disconnect(static_cast<QWizard*>(ptr), static_cast<void (QWizard::*)(int)>(&QWizard::pageRemoved), static_cast<MyQWizard*>(ptr), static_cast<void (MyQWizard::*)(int)>(&MyQWizard::Signal_PageRemoved));;
}

void QWizard_PageRemoved(void* ptr, int id){
	static_cast<QWizard*>(ptr)->pageRemoved(id);
}

void QWizard_PaintEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QWizard_PaintEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::paintEvent(static_cast<QPaintEvent*>(event));
}

void* QWizard_Pixmap(void* ptr, int which){
	return new QPixmap(static_cast<QWizard*>(ptr)->pixmap(static_cast<QWizard::WizardPixmap>(which)));
}

void QWizard_RemovePage(void* ptr, int id){
	static_cast<QWizard*>(ptr)->removePage(id);
}

void QWizard_ResizeEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QWizard_ResizeEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QWizard_Restart(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWizard*>(ptr), "restart");
}

void QWizard_SetButton(void* ptr, int which, void* button){
	static_cast<QWizard*>(ptr)->setButton(static_cast<QWizard::WizardButton>(which), static_cast<QAbstractButton*>(button));
}

void QWizard_SetButtonText(void* ptr, int which, char* text){
	static_cast<QWizard*>(ptr)->setButtonText(static_cast<QWizard::WizardButton>(which), QString(text));
}

void QWizard_SetDefaultProperty(void* ptr, char* className, char* property, char* changedSignal){
	static_cast<QWizard*>(ptr)->setDefaultProperty(const_cast<const char*>(className), const_cast<const char*>(property), const_cast<const char*>(changedSignal));
}

void QWizard_SetField(void* ptr, char* name, void* value){
	static_cast<QWizard*>(ptr)->setField(QString(name), *static_cast<QVariant*>(value));
}

void QWizard_SetOption(void* ptr, int option, int on){
	static_cast<QWizard*>(ptr)->setOption(static_cast<QWizard::WizardOption>(option), on != 0);
}

void QWizard_SetPixmap(void* ptr, int which, void* pixmap){
	static_cast<QWizard*>(ptr)->setPixmap(static_cast<QWizard::WizardPixmap>(which), *static_cast<QPixmap*>(pixmap));
}

void QWizard_SetSideWidget(void* ptr, void* widget){
	static_cast<QWizard*>(ptr)->setSideWidget(static_cast<QWidget*>(widget));
}

void QWizard_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQWizard*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QWizard_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QWizard*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void* QWizard_SideWidget(void* ptr){
	return static_cast<QWizard*>(ptr)->sideWidget();
}

void* QWizard_SizeHint(void* ptr){
	return new QSize(static_cast<QSize>(static_cast<QWizard*>(ptr)->sizeHint()).width(), static_cast<QSize>(static_cast<QWizard*>(ptr)->sizeHint()).height());
}

int QWizard_TestOption(void* ptr, int option){
	return static_cast<QWizard*>(ptr)->testOption(static_cast<QWizard::WizardOption>(option));
}

int QWizard_ValidateCurrentPage(void* ptr){
	return static_cast<QWizard*>(ptr)->validateCurrentPage();
}

void QWizard_DestroyQWizard(void* ptr){
	static_cast<QWizard*>(ptr)->~QWizard();
}

void QWizard_Accept(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQWizard*>(ptr), "accept");
}

void QWizard_AcceptDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWizard*>(ptr), "accept");
}

void QWizard_CloseEvent(void* ptr, void* e){
	static_cast<MyQWizard*>(ptr)->closeEvent(static_cast<QCloseEvent*>(e));
}

void QWizard_CloseEventDefault(void* ptr, void* e){
	static_cast<QWizard*>(ptr)->QWizard::closeEvent(static_cast<QCloseEvent*>(e));
}

void QWizard_ContextMenuEvent(void* ptr, void* e){
	static_cast<MyQWizard*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QWizard_ContextMenuEventDefault(void* ptr, void* e){
	static_cast<QWizard*>(ptr)->QWizard::contextMenuEvent(static_cast<QContextMenuEvent*>(e));
}

void QWizard_KeyPressEvent(void* ptr, void* e){
	static_cast<MyQWizard*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QWizard_KeyPressEventDefault(void* ptr, void* e){
	static_cast<QWizard*>(ptr)->QWizard::keyPressEvent(static_cast<QKeyEvent*>(e));
}

void QWizard_Open(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQWizard*>(ptr), "open");
}

void QWizard_OpenDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWizard*>(ptr), "open");
}

void QWizard_Reject(void* ptr){
	QMetaObject::invokeMethod(static_cast<MyQWizard*>(ptr), "reject");
}

void QWizard_RejectDefault(void* ptr){
	QMetaObject::invokeMethod(static_cast<QWizard*>(ptr), "reject");
}

void QWizard_ShowEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QWizard_ShowEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::showEvent(static_cast<QShowEvent*>(event));
}

void QWizard_ActionEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QWizard_ActionEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::actionEvent(static_cast<QActionEvent*>(event));
}

void QWizard_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QWizard_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QWizard_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QWizard_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QWizard_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QWizard_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QWizard_DropEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QWizard_DropEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::dropEvent(static_cast<QDropEvent*>(event));
}

void QWizard_EnterEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QWizard_EnterEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::enterEvent(static_cast<QEvent*>(event));
}

void QWizard_FocusInEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QWizard_FocusInEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QWizard_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QWizard_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QWizard_HideEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QWizard_HideEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::hideEvent(static_cast<QHideEvent*>(event));
}

void QWizard_LeaveEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QWizard_LeaveEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::leaveEvent(static_cast<QEvent*>(event));
}

void QWizard_MoveEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QWizard_MoveEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::moveEvent(static_cast<QMoveEvent*>(event));
}

void QWizard_ChangeEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QWizard_ChangeEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::changeEvent(static_cast<QEvent*>(event));
}

void QWizard_InitPainter(void* ptr, void* painter){
	static_cast<MyQWizard*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QWizard_InitPainterDefault(void* ptr, void* painter){
	static_cast<QWizard*>(ptr)->QWizard::initPainter(static_cast<QPainter*>(painter));
}

void QWizard_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QWizard_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QWizard_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QWizard_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QWizard_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QWizard_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QWizard_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QWizard_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QWizard_MousePressEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QWizard_MousePressEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QWizard_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QWizard_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QWizard_TabletEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QWizard_TabletEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QWizard_WheelEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QWizard_WheelEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QWizard_TimerEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QWizard_TimerEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::timerEvent(static_cast<QTimerEvent*>(event));
}

void QWizard_ChildEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QWizard_ChildEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::childEvent(static_cast<QChildEvent*>(event));
}

void QWizard_CustomEvent(void* ptr, void* event){
	static_cast<MyQWizard*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QWizard_CustomEventDefault(void* ptr, void* event){
	static_cast<QWizard*>(ptr)->QWizard::customEvent(static_cast<QEvent*>(event));
}

class MyQWizardPage: public QWizardPage {
public:
	MyQWizardPage(QWidget *parent) : QWizardPage(parent) {};
	void cleanupPage() { callbackQWizardPageCleanupPage(this, this->objectName().toUtf8().data()); };
	void Signal_CompleteChanged() { callbackQWizardPageCompleteChanged(this, this->objectName().toUtf8().data()); };
	void initializePage() { callbackQWizardPageInitializePage(this, this->objectName().toUtf8().data()); };
	void actionEvent(QActionEvent * event) { callbackQWizardPageActionEvent(this, this->objectName().toUtf8().data(), event); };
	void dragEnterEvent(QDragEnterEvent * event) { callbackQWizardPageDragEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void dragLeaveEvent(QDragLeaveEvent * event) { callbackQWizardPageDragLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void dragMoveEvent(QDragMoveEvent * event) { callbackQWizardPageDragMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void dropEvent(QDropEvent * event) { callbackQWizardPageDropEvent(this, this->objectName().toUtf8().data(), event); };
	void enterEvent(QEvent * event) { callbackQWizardPageEnterEvent(this, this->objectName().toUtf8().data(), event); };
	void focusInEvent(QFocusEvent * event) { callbackQWizardPageFocusInEvent(this, this->objectName().toUtf8().data(), event); };
	void focusOutEvent(QFocusEvent * event) { callbackQWizardPageFocusOutEvent(this, this->objectName().toUtf8().data(), event); };
	void hideEvent(QHideEvent * event) { callbackQWizardPageHideEvent(this, this->objectName().toUtf8().data(), event); };
	void leaveEvent(QEvent * event) { callbackQWizardPageLeaveEvent(this, this->objectName().toUtf8().data(), event); };
	void moveEvent(QMoveEvent * event) { callbackQWizardPageMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void paintEvent(QPaintEvent * event) { callbackQWizardPagePaintEvent(this, this->objectName().toUtf8().data(), event); };
	void setVisible(bool visible) { if (!callbackQWizardPageSetVisible(this, this->objectName().toUtf8().data(), visible)) { QWizardPage::setVisible(visible); }; };
	void showEvent(QShowEvent * event) { callbackQWizardPageShowEvent(this, this->objectName().toUtf8().data(), event); };
	void changeEvent(QEvent * event) { callbackQWizardPageChangeEvent(this, this->objectName().toUtf8().data(), event); };
	void closeEvent(QCloseEvent * event) { callbackQWizardPageCloseEvent(this, this->objectName().toUtf8().data(), event); };
	void contextMenuEvent(QContextMenuEvent * event) { callbackQWizardPageContextMenuEvent(this, this->objectName().toUtf8().data(), event); };
	void initPainter(QPainter * painter) const { callbackQWizardPageInitPainter(const_cast<MyQWizardPage*>(this), this->objectName().toUtf8().data(), painter); };
	void inputMethodEvent(QInputMethodEvent * event) { callbackQWizardPageInputMethodEvent(this, this->objectName().toUtf8().data(), event); };
	void keyPressEvent(QKeyEvent * event) { callbackQWizardPageKeyPressEvent(this, this->objectName().toUtf8().data(), event); };
	void keyReleaseEvent(QKeyEvent * event) { callbackQWizardPageKeyReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseDoubleClickEvent(QMouseEvent * event) { callbackQWizardPageMouseDoubleClickEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseMoveEvent(QMouseEvent * event) { callbackQWizardPageMouseMoveEvent(this, this->objectName().toUtf8().data(), event); };
	void mousePressEvent(QMouseEvent * event) { callbackQWizardPageMousePressEvent(this, this->objectName().toUtf8().data(), event); };
	void mouseReleaseEvent(QMouseEvent * event) { callbackQWizardPageMouseReleaseEvent(this, this->objectName().toUtf8().data(), event); };
	void resizeEvent(QResizeEvent * event) { callbackQWizardPageResizeEvent(this, this->objectName().toUtf8().data(), event); };
	void tabletEvent(QTabletEvent * event) { callbackQWizardPageTabletEvent(this, this->objectName().toUtf8().data(), event); };
	void wheelEvent(QWheelEvent * event) { callbackQWizardPageWheelEvent(this, this->objectName().toUtf8().data(), event); };
	void timerEvent(QTimerEvent * event) { callbackQWizardPageTimerEvent(this, this->objectName().toUtf8().data(), event); };
	void childEvent(QChildEvent * event) { callbackQWizardPageChildEvent(this, this->objectName().toUtf8().data(), event); };
	void customEvent(QEvent * event) { callbackQWizardPageCustomEvent(this, this->objectName().toUtf8().data(), event); };
};

void QWizardPage_SetSubTitle(void* ptr, char* subTitle){
	static_cast<QWizardPage*>(ptr)->setSubTitle(QString(subTitle));
}

void QWizardPage_SetTitle(void* ptr, char* title){
	static_cast<QWizardPage*>(ptr)->setTitle(QString(title));
}

char* QWizardPage_SubTitle(void* ptr){
	return static_cast<QWizardPage*>(ptr)->subTitle().toUtf8().data();
}

char* QWizardPage_Title(void* ptr){
	return static_cast<QWizardPage*>(ptr)->title().toUtf8().data();
}

void* QWizardPage_NewQWizardPage(void* parent){
	return new MyQWizardPage(static_cast<QWidget*>(parent));
}

char* QWizardPage_ButtonText(void* ptr, int which){
	return static_cast<QWizardPage*>(ptr)->buttonText(static_cast<QWizard::WizardButton>(which)).toUtf8().data();
}

void QWizardPage_CleanupPage(void* ptr){
	static_cast<MyQWizardPage*>(ptr)->cleanupPage();
}

void QWizardPage_CleanupPageDefault(void* ptr){
	static_cast<QWizardPage*>(ptr)->QWizardPage::cleanupPage();
}

void QWizardPage_ConnectCompleteChanged(void* ptr){
	QObject::connect(static_cast<QWizardPage*>(ptr), static_cast<void (QWizardPage::*)()>(&QWizardPage::completeChanged), static_cast<MyQWizardPage*>(ptr), static_cast<void (MyQWizardPage::*)()>(&MyQWizardPage::Signal_CompleteChanged));;
}

void QWizardPage_DisconnectCompleteChanged(void* ptr){
	QObject::disconnect(static_cast<QWizardPage*>(ptr), static_cast<void (QWizardPage::*)()>(&QWizardPage::completeChanged), static_cast<MyQWizardPage*>(ptr), static_cast<void (MyQWizardPage::*)()>(&MyQWizardPage::Signal_CompleteChanged));;
}

void QWizardPage_CompleteChanged(void* ptr){
	static_cast<QWizardPage*>(ptr)->completeChanged();
}

void QWizardPage_InitializePage(void* ptr){
	static_cast<MyQWizardPage*>(ptr)->initializePage();
}

void QWizardPage_InitializePageDefault(void* ptr){
	static_cast<QWizardPage*>(ptr)->QWizardPage::initializePage();
}

int QWizardPage_IsCommitPage(void* ptr){
	return static_cast<QWizardPage*>(ptr)->isCommitPage();
}

int QWizardPage_IsComplete(void* ptr){
	return static_cast<QWizardPage*>(ptr)->isComplete();
}

int QWizardPage_IsFinalPage(void* ptr){
	return static_cast<QWizardPage*>(ptr)->isFinalPage();
}

int QWizardPage_NextId(void* ptr){
	return static_cast<QWizardPage*>(ptr)->nextId();
}

void* QWizardPage_Pixmap(void* ptr, int which){
	return new QPixmap(static_cast<QWizardPage*>(ptr)->pixmap(static_cast<QWizard::WizardPixmap>(which)));
}

void QWizardPage_SetButtonText(void* ptr, int which, char* text){
	static_cast<QWizardPage*>(ptr)->setButtonText(static_cast<QWizard::WizardButton>(which), QString(text));
}

void QWizardPage_SetCommitPage(void* ptr, int commitPage){
	static_cast<QWizardPage*>(ptr)->setCommitPage(commitPage != 0);
}

void QWizardPage_SetFinalPage(void* ptr, int finalPage){
	static_cast<QWizardPage*>(ptr)->setFinalPage(finalPage != 0);
}

void QWizardPage_SetPixmap(void* ptr, int which, void* pixmap){
	static_cast<QWizardPage*>(ptr)->setPixmap(static_cast<QWizard::WizardPixmap>(which), *static_cast<QPixmap*>(pixmap));
}

int QWizardPage_ValidatePage(void* ptr){
	return static_cast<QWizardPage*>(ptr)->validatePage();
}

void QWizardPage_DestroyQWizardPage(void* ptr){
	static_cast<QWizardPage*>(ptr)->~QWizardPage();
}

void QWizardPage_ActionEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->actionEvent(static_cast<QActionEvent*>(event));
}

void QWizardPage_ActionEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::actionEvent(static_cast<QActionEvent*>(event));
}

void QWizardPage_DragEnterEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QWizardPage_DragEnterEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::dragEnterEvent(static_cast<QDragEnterEvent*>(event));
}

void QWizardPage_DragLeaveEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QWizardPage_DragLeaveEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::dragLeaveEvent(static_cast<QDragLeaveEvent*>(event));
}

void QWizardPage_DragMoveEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QWizardPage_DragMoveEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::dragMoveEvent(static_cast<QDragMoveEvent*>(event));
}

void QWizardPage_DropEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->dropEvent(static_cast<QDropEvent*>(event));
}

void QWizardPage_DropEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::dropEvent(static_cast<QDropEvent*>(event));
}

void QWizardPage_EnterEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->enterEvent(static_cast<QEvent*>(event));
}

void QWizardPage_EnterEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::enterEvent(static_cast<QEvent*>(event));
}

void QWizardPage_FocusInEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(event));
}

void QWizardPage_FocusInEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::focusInEvent(static_cast<QFocusEvent*>(event));
}

void QWizardPage_FocusOutEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QWizardPage_FocusOutEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::focusOutEvent(static_cast<QFocusEvent*>(event));
}

void QWizardPage_HideEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->hideEvent(static_cast<QHideEvent*>(event));
}

void QWizardPage_HideEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::hideEvent(static_cast<QHideEvent*>(event));
}

void QWizardPage_LeaveEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->leaveEvent(static_cast<QEvent*>(event));
}

void QWizardPage_LeaveEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::leaveEvent(static_cast<QEvent*>(event));
}

void QWizardPage_MoveEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->moveEvent(static_cast<QMoveEvent*>(event));
}

void QWizardPage_MoveEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::moveEvent(static_cast<QMoveEvent*>(event));
}

void QWizardPage_PaintEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QWizardPage_PaintEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::paintEvent(static_cast<QPaintEvent*>(event));
}

void QWizardPage_SetVisible(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<MyQWizardPage*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QWizardPage_SetVisibleDefault(void* ptr, int visible){
	QMetaObject::invokeMethod(static_cast<QWizardPage*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
}

void QWizardPage_ShowEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->showEvent(static_cast<QShowEvent*>(event));
}

void QWizardPage_ShowEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::showEvent(static_cast<QShowEvent*>(event));
}

void QWizardPage_ChangeEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->changeEvent(static_cast<QEvent*>(event));
}

void QWizardPage_ChangeEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::changeEvent(static_cast<QEvent*>(event));
}

void QWizardPage_CloseEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->closeEvent(static_cast<QCloseEvent*>(event));
}

void QWizardPage_CloseEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::closeEvent(static_cast<QCloseEvent*>(event));
}

void QWizardPage_ContextMenuEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QWizardPage_ContextMenuEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::contextMenuEvent(static_cast<QContextMenuEvent*>(event));
}

void QWizardPage_InitPainter(void* ptr, void* painter){
	static_cast<MyQWizardPage*>(ptr)->initPainter(static_cast<QPainter*>(painter));
}

void QWizardPage_InitPainterDefault(void* ptr, void* painter){
	static_cast<QWizardPage*>(ptr)->QWizardPage::initPainter(static_cast<QPainter*>(painter));
}

void QWizardPage_InputMethodEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QWizardPage_InputMethodEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::inputMethodEvent(static_cast<QInputMethodEvent*>(event));
}

void QWizardPage_KeyPressEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QWizardPage_KeyPressEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::keyPressEvent(static_cast<QKeyEvent*>(event));
}

void QWizardPage_KeyReleaseEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QWizardPage_KeyReleaseEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::keyReleaseEvent(static_cast<QKeyEvent*>(event));
}

void QWizardPage_MouseDoubleClickEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QWizardPage_MouseDoubleClickEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::mouseDoubleClickEvent(static_cast<QMouseEvent*>(event));
}

void QWizardPage_MouseMoveEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QWizardPage_MouseMoveEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::mouseMoveEvent(static_cast<QMouseEvent*>(event));
}

void QWizardPage_MousePressEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QWizardPage_MousePressEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::mousePressEvent(static_cast<QMouseEvent*>(event));
}

void QWizardPage_MouseReleaseEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QWizardPage_MouseReleaseEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::mouseReleaseEvent(static_cast<QMouseEvent*>(event));
}

void QWizardPage_ResizeEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(event));
}

void QWizardPage_ResizeEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::resizeEvent(static_cast<QResizeEvent*>(event));
}

void QWizardPage_TabletEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(event));
}

void QWizardPage_TabletEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::tabletEvent(static_cast<QTabletEvent*>(event));
}

void QWizardPage_WheelEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(event));
}

void QWizardPage_WheelEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::wheelEvent(static_cast<QWheelEvent*>(event));
}

void QWizardPage_TimerEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QWizardPage_TimerEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::timerEvent(static_cast<QTimerEvent*>(event));
}

void QWizardPage_ChildEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QWizardPage_ChildEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::childEvent(static_cast<QChildEvent*>(event));
}

void QWizardPage_CustomEvent(void* ptr, void* event){
	static_cast<MyQWizardPage*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QWizardPage_CustomEventDefault(void* ptr, void* event){
	static_cast<QWizardPage*>(ptr)->QWizardPage::customEvent(static_cast<QEvent*>(event));
}

