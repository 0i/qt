// +build !minimal

package multimedia

//#include <stdint.h>
//#include <stdlib.h>
//#include "multimedia.h"
import "C"
import (
	"encoding/hex"
	"fmt"
	"github.com/therecipe/qt"
	"github.com/therecipe/qt/core"
	"github.com/therecipe/qt/gui"
	"github.com/therecipe/qt/network"
	"github.com/therecipe/qt/widgets"
	"runtime"
	"strings"
	"unsafe"
)

type QAbstractPlanarVideoBuffer struct {
	QAbstractVideoBuffer
}

type QAbstractPlanarVideoBuffer_ITF interface {
	QAbstractVideoBuffer_ITF
	QAbstractPlanarVideoBuffer_PTR() *QAbstractPlanarVideoBuffer
}

func (p *QAbstractPlanarVideoBuffer) QAbstractPlanarVideoBuffer_PTR() *QAbstractPlanarVideoBuffer {
	return p
}

func (p *QAbstractPlanarVideoBuffer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractVideoBuffer_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractPlanarVideoBuffer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractVideoBuffer_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractPlanarVideoBuffer(ptr QAbstractPlanarVideoBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractPlanarVideoBuffer_PTR().Pointer()
	}
	return nil
}

func NewQAbstractPlanarVideoBufferFromPointer(ptr unsafe.Pointer) *QAbstractPlanarVideoBuffer {
	var n = new(QAbstractPlanarVideoBuffer)
	n.SetPointer(ptr)
	return n
}
func (ptr *QAbstractPlanarVideoBuffer) DestroyQAbstractPlanarVideoBuffer() {
	defer qt.Recovering("QAbstractPlanarVideoBuffer::~QAbstractPlanarVideoBuffer")

	if ptr.Pointer() != nil {
		C.QAbstractPlanarVideoBuffer_DestroyQAbstractPlanarVideoBuffer(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractPlanarVideoBuffer_Handle
func callbackQAbstractPlanarVideoBuffer_Handle(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractPlanarVideoBuffer::handle")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractPlanarVideoBuffer::handle"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(NewQAbstractPlanarVideoBufferFromPointer(ptr).HandleDefault())
}

func (ptr *QAbstractPlanarVideoBuffer) ConnectHandle(f func() *core.QVariant) {
	defer qt.Recovering("connect QAbstractPlanarVideoBuffer::handle")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractPlanarVideoBuffer::handle", f)
	}
}

func (ptr *QAbstractPlanarVideoBuffer) DisconnectHandle() {
	defer qt.Recovering("disconnect QAbstractPlanarVideoBuffer::handle")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractPlanarVideoBuffer::handle")
	}
}

func (ptr *QAbstractPlanarVideoBuffer) Handle() *core.QVariant {
	defer qt.Recovering("QAbstractPlanarVideoBuffer::handle")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAbstractPlanarVideoBuffer_Handle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractPlanarVideoBuffer) HandleDefault() *core.QVariant {
	defer qt.Recovering("QAbstractPlanarVideoBuffer::handle")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAbstractPlanarVideoBuffer_HandleDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractPlanarVideoBuffer_MapMode
func callbackQAbstractPlanarVideoBuffer_MapMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QAbstractPlanarVideoBuffer::mapMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractPlanarVideoBuffer::mapMode"); signal != nil {
		return C.longlong(signal.(func() QAbstractVideoBuffer__MapMode)())
	}

	return C.longlong(0)
}

func (ptr *QAbstractPlanarVideoBuffer) ConnectMapMode(f func() QAbstractVideoBuffer__MapMode) {
	defer qt.Recovering("connect QAbstractPlanarVideoBuffer::mapMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractPlanarVideoBuffer::mapMode", f)
	}
}

func (ptr *QAbstractPlanarVideoBuffer) DisconnectMapMode() {
	defer qt.Recovering("disconnect QAbstractPlanarVideoBuffer::mapMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractPlanarVideoBuffer::mapMode")
	}
}

func (ptr *QAbstractPlanarVideoBuffer) MapMode() QAbstractVideoBuffer__MapMode {
	defer qt.Recovering("QAbstractPlanarVideoBuffer::mapMode")

	if ptr.Pointer() != nil {
		return QAbstractVideoBuffer__MapMode(C.QAbstractPlanarVideoBuffer_MapMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractPlanarVideoBuffer_Release
func callbackQAbstractPlanarVideoBuffer_Release(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractPlanarVideoBuffer::release")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractPlanarVideoBuffer::release"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractPlanarVideoBufferFromPointer(ptr).ReleaseDefault()
	}
}

func (ptr *QAbstractPlanarVideoBuffer) ConnectRelease(f func()) {
	defer qt.Recovering("connect QAbstractPlanarVideoBuffer::release")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractPlanarVideoBuffer::release", f)
	}
}

func (ptr *QAbstractPlanarVideoBuffer) DisconnectRelease() {
	defer qt.Recovering("disconnect QAbstractPlanarVideoBuffer::release")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractPlanarVideoBuffer::release")
	}
}

func (ptr *QAbstractPlanarVideoBuffer) Release() {
	defer qt.Recovering("QAbstractPlanarVideoBuffer::release")

	if ptr.Pointer() != nil {
		C.QAbstractPlanarVideoBuffer_Release(ptr.Pointer())
	}
}

func (ptr *QAbstractPlanarVideoBuffer) ReleaseDefault() {
	defer qt.Recovering("QAbstractPlanarVideoBuffer::release")

	if ptr.Pointer() != nil {
		C.QAbstractPlanarVideoBuffer_ReleaseDefault(ptr.Pointer())
	}
}

//export callbackQAbstractPlanarVideoBuffer_Unmap
func callbackQAbstractPlanarVideoBuffer_Unmap(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractPlanarVideoBuffer::unmap")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractPlanarVideoBuffer::unmap"); signal != nil {
		signal.(func())()
	} else {

	}
}

func (ptr *QAbstractPlanarVideoBuffer) ConnectUnmap(f func()) {
	defer qt.Recovering("connect QAbstractPlanarVideoBuffer::unmap")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractPlanarVideoBuffer::unmap", f)
	}
}

func (ptr *QAbstractPlanarVideoBuffer) DisconnectUnmap() {
	defer qt.Recovering("disconnect QAbstractPlanarVideoBuffer::unmap")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractPlanarVideoBuffer::unmap")
	}
}

func (ptr *QAbstractPlanarVideoBuffer) Unmap() {
	defer qt.Recovering("QAbstractPlanarVideoBuffer::unmap")

	if ptr.Pointer() != nil {
		C.QAbstractPlanarVideoBuffer_Unmap(ptr.Pointer())
	}
}

//QAbstractVideoBuffer::HandleType
type QAbstractVideoBuffer__HandleType int64

const (
	QAbstractVideoBuffer__NoHandle         = QAbstractVideoBuffer__HandleType(0)
	QAbstractVideoBuffer__GLTextureHandle  = QAbstractVideoBuffer__HandleType(1)
	QAbstractVideoBuffer__XvShmImageHandle = QAbstractVideoBuffer__HandleType(2)
	QAbstractVideoBuffer__CoreImageHandle  = QAbstractVideoBuffer__HandleType(3)
	QAbstractVideoBuffer__QPixmapHandle    = QAbstractVideoBuffer__HandleType(4)
	QAbstractVideoBuffer__EGLImageHandle   = QAbstractVideoBuffer__HandleType(5)
	QAbstractVideoBuffer__UserHandle       = QAbstractVideoBuffer__HandleType(1000)
)

//QAbstractVideoBuffer::MapMode
type QAbstractVideoBuffer__MapMode int64

const (
	QAbstractVideoBuffer__NotMapped = QAbstractVideoBuffer__MapMode(0x00)
	QAbstractVideoBuffer__ReadOnly  = QAbstractVideoBuffer__MapMode(0x01)
	QAbstractVideoBuffer__WriteOnly = QAbstractVideoBuffer__MapMode(0x02)
	QAbstractVideoBuffer__ReadWrite = QAbstractVideoBuffer__MapMode(QAbstractVideoBuffer__ReadOnly | QAbstractVideoBuffer__WriteOnly)
)

type QAbstractVideoBuffer struct {
	ptr unsafe.Pointer
}

type QAbstractVideoBuffer_ITF interface {
	QAbstractVideoBuffer_PTR() *QAbstractVideoBuffer
}

func (p *QAbstractVideoBuffer) QAbstractVideoBuffer_PTR() *QAbstractVideoBuffer {
	return p
}

func (p *QAbstractVideoBuffer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAbstractVideoBuffer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAbstractVideoBuffer(ptr QAbstractVideoBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractVideoBuffer_PTR().Pointer()
	}
	return nil
}

func NewQAbstractVideoBufferFromPointer(ptr unsafe.Pointer) *QAbstractVideoBuffer {
	var n = new(QAbstractVideoBuffer)
	n.SetPointer(ptr)
	return n
}

//export callbackQAbstractVideoBuffer_Handle
func callbackQAbstractVideoBuffer_Handle(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractVideoBuffer::handle")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoBuffer::handle"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(NewQAbstractVideoBufferFromPointer(ptr).HandleDefault())
}

func (ptr *QAbstractVideoBuffer) ConnectHandle(f func() *core.QVariant) {
	defer qt.Recovering("connect QAbstractVideoBuffer::handle")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoBuffer::handle", f)
	}
}

func (ptr *QAbstractVideoBuffer) DisconnectHandle() {
	defer qt.Recovering("disconnect QAbstractVideoBuffer::handle")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoBuffer::handle")
	}
}

func (ptr *QAbstractVideoBuffer) Handle() *core.QVariant {
	defer qt.Recovering("QAbstractVideoBuffer::handle")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAbstractVideoBuffer_Handle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractVideoBuffer) HandleDefault() *core.QVariant {
	defer qt.Recovering("QAbstractVideoBuffer::handle")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAbstractVideoBuffer_HandleDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractVideoBuffer) HandleType() QAbstractVideoBuffer__HandleType {
	defer qt.Recovering("QAbstractVideoBuffer::handleType")

	if ptr.Pointer() != nil {
		return QAbstractVideoBuffer__HandleType(C.QAbstractVideoBuffer_HandleType(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractVideoBuffer_MapMode
func callbackQAbstractVideoBuffer_MapMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QAbstractVideoBuffer::mapMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoBuffer::mapMode"); signal != nil {
		return C.longlong(signal.(func() QAbstractVideoBuffer__MapMode)())
	}

	return C.longlong(0)
}

func (ptr *QAbstractVideoBuffer) ConnectMapMode(f func() QAbstractVideoBuffer__MapMode) {
	defer qt.Recovering("connect QAbstractVideoBuffer::mapMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoBuffer::mapMode", f)
	}
}

func (ptr *QAbstractVideoBuffer) DisconnectMapMode() {
	defer qt.Recovering("disconnect QAbstractVideoBuffer::mapMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoBuffer::mapMode")
	}
}

func (ptr *QAbstractVideoBuffer) MapMode() QAbstractVideoBuffer__MapMode {
	defer qt.Recovering("QAbstractVideoBuffer::mapMode")

	if ptr.Pointer() != nil {
		return QAbstractVideoBuffer__MapMode(C.QAbstractVideoBuffer_MapMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractVideoBuffer_Release
func callbackQAbstractVideoBuffer_Release(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoBuffer::release")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoBuffer::release"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractVideoBufferFromPointer(ptr).ReleaseDefault()
	}
}

func (ptr *QAbstractVideoBuffer) ConnectRelease(f func()) {
	defer qt.Recovering("connect QAbstractVideoBuffer::release")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoBuffer::release", f)
	}
}

func (ptr *QAbstractVideoBuffer) DisconnectRelease() {
	defer qt.Recovering("disconnect QAbstractVideoBuffer::release")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoBuffer::release")
	}
}

func (ptr *QAbstractVideoBuffer) Release() {
	defer qt.Recovering("QAbstractVideoBuffer::release")

	if ptr.Pointer() != nil {
		C.QAbstractVideoBuffer_Release(ptr.Pointer())
	}
}

func (ptr *QAbstractVideoBuffer) ReleaseDefault() {
	defer qt.Recovering("QAbstractVideoBuffer::release")

	if ptr.Pointer() != nil {
		C.QAbstractVideoBuffer_ReleaseDefault(ptr.Pointer())
	}
}

//export callbackQAbstractVideoBuffer_Unmap
func callbackQAbstractVideoBuffer_Unmap(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoBuffer::unmap")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoBuffer::unmap"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractVideoBuffer) ConnectUnmap(f func()) {
	defer qt.Recovering("connect QAbstractVideoBuffer::unmap")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoBuffer::unmap", f)
	}
}

func (ptr *QAbstractVideoBuffer) DisconnectUnmap() {
	defer qt.Recovering("disconnect QAbstractVideoBuffer::unmap")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoBuffer::unmap")
	}
}

func (ptr *QAbstractVideoBuffer) Unmap() {
	defer qt.Recovering("QAbstractVideoBuffer::unmap")

	if ptr.Pointer() != nil {
		C.QAbstractVideoBuffer_Unmap(ptr.Pointer())
	}
}

func (ptr *QAbstractVideoBuffer) DestroyQAbstractVideoBuffer() {
	defer qt.Recovering("QAbstractVideoBuffer::~QAbstractVideoBuffer")

	if ptr.Pointer() != nil {
		C.QAbstractVideoBuffer_DestroyQAbstractVideoBuffer(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractVideoBuffer) M_type() QAbstractVideoBuffer__HandleType {
	defer qt.Recovering("QAbstractVideoBuffer::m_type")

	if ptr.Pointer() != nil {
		return QAbstractVideoBuffer__HandleType(C.QAbstractVideoBuffer_M_type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractVideoBuffer) SetM_type(vha QAbstractVideoBuffer__HandleType) {
	defer qt.Recovering("QAbstractVideoBuffer::setM_type")

	if ptr.Pointer() != nil {
		C.QAbstractVideoBuffer_SetM_type(ptr.Pointer(), C.longlong(vha))
	}
}

type QAbstractVideoFilter struct {
	core.QObject
}

type QAbstractVideoFilter_ITF interface {
	core.QObject_ITF
	QAbstractVideoFilter_PTR() *QAbstractVideoFilter
}

func (p *QAbstractVideoFilter) QAbstractVideoFilter_PTR() *QAbstractVideoFilter {
	return p
}

func (p *QAbstractVideoFilter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractVideoFilter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractVideoFilter(ptr QAbstractVideoFilter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractVideoFilter_PTR().Pointer()
	}
	return nil
}

func NewQAbstractVideoFilterFromPointer(ptr unsafe.Pointer) *QAbstractVideoFilter {
	var n = new(QAbstractVideoFilter)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAbstractVideoFilter) DestroyQAbstractVideoFilter() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QAbstractVideoFilter) IsActive() bool {
	defer qt.Recovering("QAbstractVideoFilter::isActive")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoFilter_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAbstractVideoFilter) SetActive(v bool) {
	defer qt.Recovering("QAbstractVideoFilter::setActive")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_SetActive(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(v))))
	}
}

func NewQAbstractVideoFilter(parent core.QObject_ITF) *QAbstractVideoFilter {
	defer qt.Recovering("QAbstractVideoFilter::QAbstractVideoFilter")

	var tmpValue = NewQAbstractVideoFilterFromPointer(C.QAbstractVideoFilter_NewQAbstractVideoFilter(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAbstractVideoFilter_ActiveChanged
func callbackQAbstractVideoFilter_ActiveChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoFilter::activeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::activeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractVideoFilter) ConnectActiveChanged(f func()) {
	defer qt.Recovering("connect QAbstractVideoFilter::activeChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_ConnectActiveChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::activeChanged", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectActiveChanged() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::activeChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_DisconnectActiveChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::activeChanged")
	}
}

func (ptr *QAbstractVideoFilter) ActiveChanged() {
	defer qt.Recovering("QAbstractVideoFilter::activeChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_ActiveChanged(ptr.Pointer())
	}
}

//export callbackQAbstractVideoFilter_CreateFilterRunnable
func callbackQAbstractVideoFilter_CreateFilterRunnable(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractVideoFilter::createFilterRunnable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::createFilterRunnable"); signal != nil {
		return PointerFromQVideoFilterRunnable(signal.(func() *QVideoFilterRunnable)())
	}

	return PointerFromQVideoFilterRunnable(nil)
}

func (ptr *QAbstractVideoFilter) ConnectCreateFilterRunnable(f func() *QVideoFilterRunnable) {
	defer qt.Recovering("connect QAbstractVideoFilter::createFilterRunnable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::createFilterRunnable", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectCreateFilterRunnable() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::createFilterRunnable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::createFilterRunnable")
	}
}

func (ptr *QAbstractVideoFilter) CreateFilterRunnable() *QVideoFilterRunnable {
	defer qt.Recovering("QAbstractVideoFilter::createFilterRunnable")

	if ptr.Pointer() != nil {
		return NewQVideoFilterRunnableFromPointer(C.QAbstractVideoFilter_CreateFilterRunnable(ptr.Pointer()))
	}
	return nil
}

//export callbackQAbstractVideoFilter_TimerEvent
func callbackQAbstractVideoFilter_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoFilter::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractVideoFilterFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractVideoFilter) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAbstractVideoFilter::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::timerEvent", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::timerEvent")
	}
}

func (ptr *QAbstractVideoFilter) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::timerEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractVideoFilter) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::timerEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractVideoFilter_ChildEvent
func callbackQAbstractVideoFilter_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoFilter::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAbstractVideoFilterFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractVideoFilter) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAbstractVideoFilter::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::childEvent", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::childEvent")
	}
}

func (ptr *QAbstractVideoFilter) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::childEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractVideoFilter) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::childEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractVideoFilter_ConnectNotify
func callbackQAbstractVideoFilter_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoFilter::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractVideoFilterFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractVideoFilter) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAbstractVideoFilter::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::connectNotify", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::connectNotify")
	}
}

func (ptr *QAbstractVideoFilter) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::connectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractVideoFilter) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::connectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractVideoFilter_CustomEvent
func callbackQAbstractVideoFilter_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoFilter::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAbstractVideoFilterFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractVideoFilter) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAbstractVideoFilter::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::customEvent", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::customEvent")
	}
}

func (ptr *QAbstractVideoFilter) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::customEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAbstractVideoFilter) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::customEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAbstractVideoFilter_DeleteLater
func callbackQAbstractVideoFilter_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoFilter::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractVideoFilterFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractVideoFilter) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAbstractVideoFilter::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::deleteLater", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::deleteLater")
	}
}

func (ptr *QAbstractVideoFilter) DeleteLater() {
	defer qt.Recovering("QAbstractVideoFilter::deleteLater")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractVideoFilter) DeleteLaterDefault() {
	defer qt.Recovering("QAbstractVideoFilter::deleteLater")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractVideoFilter_DisconnectNotify
func callbackQAbstractVideoFilter_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoFilter::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractVideoFilterFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractVideoFilter) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAbstractVideoFilter::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::disconnectNotify", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::disconnectNotify")
	}
}

func (ptr *QAbstractVideoFilter) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractVideoFilter) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractVideoFilter::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractVideoFilter_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractVideoFilter_Event
func callbackQAbstractVideoFilter_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAbstractVideoFilter::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractVideoFilterFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAbstractVideoFilter) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAbstractVideoFilter::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::event", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectEvent() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::event")
	}
}

func (ptr *QAbstractVideoFilter) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractVideoFilter::event")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoFilter_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractVideoFilter) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractVideoFilter::event")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoFilter_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractVideoFilter_EventFilter
func callbackQAbstractVideoFilter_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAbstractVideoFilter::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractVideoFilterFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAbstractVideoFilter) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAbstractVideoFilter::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::eventFilter", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::eventFilter")
	}
}

func (ptr *QAbstractVideoFilter) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractVideoFilter::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoFilter_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractVideoFilter) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractVideoFilter::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoFilter_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractVideoFilter_MetaObject
func callbackQAbstractVideoFilter_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractVideoFilter::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoFilter::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAbstractVideoFilterFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractVideoFilter) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAbstractVideoFilter::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::metaObject", f)
	}
}

func (ptr *QAbstractVideoFilter) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAbstractVideoFilter::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoFilter::metaObject")
	}
}

func (ptr *QAbstractVideoFilter) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAbstractVideoFilter::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAbstractVideoFilter_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractVideoFilter) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAbstractVideoFilter::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAbstractVideoFilter_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QAbstractVideoSurface::Error
type QAbstractVideoSurface__Error int64

const (
	QAbstractVideoSurface__NoError                = QAbstractVideoSurface__Error(0)
	QAbstractVideoSurface__UnsupportedFormatError = QAbstractVideoSurface__Error(1)
	QAbstractVideoSurface__IncorrectFormatError   = QAbstractVideoSurface__Error(2)
	QAbstractVideoSurface__StoppedError           = QAbstractVideoSurface__Error(3)
	QAbstractVideoSurface__ResourceError          = QAbstractVideoSurface__Error(4)
)

type QAbstractVideoSurface struct {
	core.QObject
}

type QAbstractVideoSurface_ITF interface {
	core.QObject_ITF
	QAbstractVideoSurface_PTR() *QAbstractVideoSurface
}

func (p *QAbstractVideoSurface) QAbstractVideoSurface_PTR() *QAbstractVideoSurface {
	return p
}

func (p *QAbstractVideoSurface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractVideoSurface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractVideoSurface(ptr QAbstractVideoSurface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractVideoSurface_PTR().Pointer()
	}
	return nil
}

func NewQAbstractVideoSurfaceFromPointer(ptr unsafe.Pointer) *QAbstractVideoSurface {
	var n = new(QAbstractVideoSurface)
	n.SetPointer(ptr)
	return n
}
func (ptr *QAbstractVideoSurface) NativeResolution() *core.QSize {
	defer qt.Recovering("QAbstractVideoSurface::nativeResolution")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QAbstractVideoSurface_NativeResolution(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractVideoSurface_ActiveChanged
func callbackQAbstractVideoSurface_ActiveChanged(ptr unsafe.Pointer, active C.char) {
	defer qt.Recovering("callback QAbstractVideoSurface::activeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::activeChanged"); signal != nil {
		signal.(func(bool))(int8(active) != 0)
	}

}

func (ptr *QAbstractVideoSurface) ConnectActiveChanged(f func(active bool)) {
	defer qt.Recovering("connect QAbstractVideoSurface::activeChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_ConnectActiveChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::activeChanged", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectActiveChanged() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::activeChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_DisconnectActiveChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::activeChanged")
	}
}

func (ptr *QAbstractVideoSurface) ActiveChanged(active bool) {
	defer qt.Recovering("QAbstractVideoSurface::activeChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_ActiveChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(active))))
	}
}

func (ptr *QAbstractVideoSurface) Error() QAbstractVideoSurface__Error {
	defer qt.Recovering("QAbstractVideoSurface::error")

	if ptr.Pointer() != nil {
		return QAbstractVideoSurface__Error(C.QAbstractVideoSurface_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractVideoSurface) IsActive() bool {
	defer qt.Recovering("QAbstractVideoSurface::isActive")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_IsActive(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAbstractVideoSurface_IsFormatSupported
func callbackQAbstractVideoSurface_IsFormatSupported(ptr unsafe.Pointer, format unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAbstractVideoSurface::isFormatSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::isFormatSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QVideoSurfaceFormat) bool)(NewQVideoSurfaceFormatFromPointer(format)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractVideoSurfaceFromPointer(ptr).IsFormatSupportedDefault(NewQVideoSurfaceFormatFromPointer(format)))))
}

func (ptr *QAbstractVideoSurface) ConnectIsFormatSupported(f func(format *QVideoSurfaceFormat) bool) {
	defer qt.Recovering("connect QAbstractVideoSurface::isFormatSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::isFormatSupported", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectIsFormatSupported() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::isFormatSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::isFormatSupported")
	}
}

func (ptr *QAbstractVideoSurface) IsFormatSupported(format QVideoSurfaceFormat_ITF) bool {
	defer qt.Recovering("QAbstractVideoSurface::isFormatSupported")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_IsFormatSupported(ptr.Pointer(), PointerFromQVideoSurfaceFormat(format)) != 0
	}
	return false
}

func (ptr *QAbstractVideoSurface) IsFormatSupportedDefault(format QVideoSurfaceFormat_ITF) bool {
	defer qt.Recovering("QAbstractVideoSurface::isFormatSupported")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_IsFormatSupportedDefault(ptr.Pointer(), PointerFromQVideoSurfaceFormat(format)) != 0
	}
	return false
}

//export callbackQAbstractVideoSurface_NativeResolutionChanged
func callbackQAbstractVideoSurface_NativeResolutionChanged(ptr unsafe.Pointer, resolution unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::nativeResolutionChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::nativeResolutionChanged"); signal != nil {
		signal.(func(*core.QSize))(core.NewQSizeFromPointer(resolution))
	}

}

func (ptr *QAbstractVideoSurface) ConnectNativeResolutionChanged(f func(resolution *core.QSize)) {
	defer qt.Recovering("connect QAbstractVideoSurface::nativeResolutionChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_ConnectNativeResolutionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::nativeResolutionChanged", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectNativeResolutionChanged() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::nativeResolutionChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_DisconnectNativeResolutionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::nativeResolutionChanged")
	}
}

func (ptr *QAbstractVideoSurface) NativeResolutionChanged(resolution core.QSize_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::nativeResolutionChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_NativeResolutionChanged(ptr.Pointer(), core.PointerFromQSize(resolution))
	}
}

//export callbackQAbstractVideoSurface_NearestFormat
func callbackQAbstractVideoSurface_NearestFormat(ptr unsafe.Pointer, format unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractVideoSurface::nearestFormat")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::nearestFormat"); signal != nil {
		return PointerFromQVideoSurfaceFormat(signal.(func(*QVideoSurfaceFormat) *QVideoSurfaceFormat)(NewQVideoSurfaceFormatFromPointer(format)))
	}

	return PointerFromQVideoSurfaceFormat(NewQAbstractVideoSurfaceFromPointer(ptr).NearestFormatDefault(NewQVideoSurfaceFormatFromPointer(format)))
}

func (ptr *QAbstractVideoSurface) ConnectNearestFormat(f func(format *QVideoSurfaceFormat) *QVideoSurfaceFormat) {
	defer qt.Recovering("connect QAbstractVideoSurface::nearestFormat")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::nearestFormat", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectNearestFormat() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::nearestFormat")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::nearestFormat")
	}
}

func (ptr *QAbstractVideoSurface) NearestFormat(format QVideoSurfaceFormat_ITF) *QVideoSurfaceFormat {
	defer qt.Recovering("QAbstractVideoSurface::nearestFormat")

	if ptr.Pointer() != nil {
		var tmpValue = NewQVideoSurfaceFormatFromPointer(C.QAbstractVideoSurface_NearestFormat(ptr.Pointer(), PointerFromQVideoSurfaceFormat(format)))
		runtime.SetFinalizer(tmpValue, (*QVideoSurfaceFormat).DestroyQVideoSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractVideoSurface) NearestFormatDefault(format QVideoSurfaceFormat_ITF) *QVideoSurfaceFormat {
	defer qt.Recovering("QAbstractVideoSurface::nearestFormat")

	if ptr.Pointer() != nil {
		var tmpValue = NewQVideoSurfaceFormatFromPointer(C.QAbstractVideoSurface_NearestFormatDefault(ptr.Pointer(), PointerFromQVideoSurfaceFormat(format)))
		runtime.SetFinalizer(tmpValue, (*QVideoSurfaceFormat).DestroyQVideoSurfaceFormat)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractVideoSurface_Present
func callbackQAbstractVideoSurface_Present(ptr unsafe.Pointer, frame unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAbstractVideoSurface::present")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::present"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QVideoFrame) bool)(NewQVideoFrameFromPointer(frame)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAbstractVideoSurface) ConnectPresent(f func(frame *QVideoFrame) bool) {
	defer qt.Recovering("connect QAbstractVideoSurface::present")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::present", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectPresent(frame QVideoFrame_ITF) {
	defer qt.Recovering("disconnect QAbstractVideoSurface::present")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::present")
	}
}

func (ptr *QAbstractVideoSurface) Present(frame QVideoFrame_ITF) bool {
	defer qt.Recovering("QAbstractVideoSurface::present")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_Present(ptr.Pointer(), PointerFromQVideoFrame(frame)) != 0
	}
	return false
}

func (ptr *QAbstractVideoSurface) SetError(error QAbstractVideoSurface__Error) {
	defer qt.Recovering("QAbstractVideoSurface::setError")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_SetError(ptr.Pointer(), C.longlong(error))
	}
}

func (ptr *QAbstractVideoSurface) SetNativeResolution(resolution core.QSize_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::setNativeResolution")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_SetNativeResolution(ptr.Pointer(), core.PointerFromQSize(resolution))
	}
}

//export callbackQAbstractVideoSurface_Start
func callbackQAbstractVideoSurface_Start(ptr unsafe.Pointer, format unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAbstractVideoSurface::start")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::start"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QVideoSurfaceFormat) bool)(NewQVideoSurfaceFormatFromPointer(format)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractVideoSurfaceFromPointer(ptr).StartDefault(NewQVideoSurfaceFormatFromPointer(format)))))
}

func (ptr *QAbstractVideoSurface) ConnectStart(f func(format *QVideoSurfaceFormat) bool) {
	defer qt.Recovering("connect QAbstractVideoSurface::start")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::start", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectStart() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::start")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::start")
	}
}

func (ptr *QAbstractVideoSurface) Start(format QVideoSurfaceFormat_ITF) bool {
	defer qt.Recovering("QAbstractVideoSurface::start")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_Start(ptr.Pointer(), PointerFromQVideoSurfaceFormat(format)) != 0
	}
	return false
}

func (ptr *QAbstractVideoSurface) StartDefault(format QVideoSurfaceFormat_ITF) bool {
	defer qt.Recovering("QAbstractVideoSurface::start")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_StartDefault(ptr.Pointer(), PointerFromQVideoSurfaceFormat(format)) != 0
	}
	return false
}

//export callbackQAbstractVideoSurface_Stop
func callbackQAbstractVideoSurface_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::stop"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractVideoSurfaceFromPointer(ptr).StopDefault()
	}
}

func (ptr *QAbstractVideoSurface) ConnectStop(f func()) {
	defer qt.Recovering("connect QAbstractVideoSurface::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::stop", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectStop() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::stop")
	}
}

func (ptr *QAbstractVideoSurface) Stop() {
	defer qt.Recovering("QAbstractVideoSurface::stop")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_Stop(ptr.Pointer())
	}
}

func (ptr *QAbstractVideoSurface) StopDefault() {
	defer qt.Recovering("QAbstractVideoSurface::stop")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_StopDefault(ptr.Pointer())
	}
}

//export callbackQAbstractVideoSurface_SupportedFormatsChanged
func callbackQAbstractVideoSurface_SupportedFormatsChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::supportedFormatsChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::supportedFormatsChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractVideoSurface) ConnectSupportedFormatsChanged(f func()) {
	defer qt.Recovering("connect QAbstractVideoSurface::supportedFormatsChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_ConnectSupportedFormatsChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::supportedFormatsChanged", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectSupportedFormatsChanged() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::supportedFormatsChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_DisconnectSupportedFormatsChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::supportedFormatsChanged")
	}
}

func (ptr *QAbstractVideoSurface) SupportedFormatsChanged() {
	defer qt.Recovering("QAbstractVideoSurface::supportedFormatsChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_SupportedFormatsChanged(ptr.Pointer())
	}
}

func (ptr *QAbstractVideoSurface) SurfaceFormat() *QVideoSurfaceFormat {
	defer qt.Recovering("QAbstractVideoSurface::surfaceFormat")

	if ptr.Pointer() != nil {
		var tmpValue = NewQVideoSurfaceFormatFromPointer(C.QAbstractVideoSurface_SurfaceFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVideoSurfaceFormat).DestroyQVideoSurfaceFormat)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractVideoSurface_SurfaceFormatChanged
func callbackQAbstractVideoSurface_SurfaceFormatChanged(ptr unsafe.Pointer, format unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::surfaceFormatChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::surfaceFormatChanged"); signal != nil {
		signal.(func(*QVideoSurfaceFormat))(NewQVideoSurfaceFormatFromPointer(format))
	}

}

func (ptr *QAbstractVideoSurface) ConnectSurfaceFormatChanged(f func(format *QVideoSurfaceFormat)) {
	defer qt.Recovering("connect QAbstractVideoSurface::surfaceFormatChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_ConnectSurfaceFormatChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::surfaceFormatChanged", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectSurfaceFormatChanged() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::surfaceFormatChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_DisconnectSurfaceFormatChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::surfaceFormatChanged")
	}
}

func (ptr *QAbstractVideoSurface) SurfaceFormatChanged(format QVideoSurfaceFormat_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::surfaceFormatChanged")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_SurfaceFormatChanged(ptr.Pointer(), PointerFromQVideoSurfaceFormat(format))
	}
}

func (ptr *QAbstractVideoSurface) DestroyQAbstractVideoSurface() {
	defer qt.Recovering("QAbstractVideoSurface::~QAbstractVideoSurface")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_DestroyQAbstractVideoSurface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractVideoSurface_TimerEvent
func callbackQAbstractVideoSurface_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractVideoSurfaceFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractVideoSurface) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAbstractVideoSurface::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::timerEvent", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::timerEvent")
	}
}

func (ptr *QAbstractVideoSurface) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::timerEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractVideoSurface) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::timerEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractVideoSurface_ChildEvent
func callbackQAbstractVideoSurface_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAbstractVideoSurfaceFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractVideoSurface) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAbstractVideoSurface::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::childEvent", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::childEvent")
	}
}

func (ptr *QAbstractVideoSurface) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::childEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractVideoSurface) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::childEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractVideoSurface_ConnectNotify
func callbackQAbstractVideoSurface_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractVideoSurfaceFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractVideoSurface) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAbstractVideoSurface::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::connectNotify", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::connectNotify")
	}
}

func (ptr *QAbstractVideoSurface) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::connectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractVideoSurface) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::connectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractVideoSurface_CustomEvent
func callbackQAbstractVideoSurface_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAbstractVideoSurfaceFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractVideoSurface) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAbstractVideoSurface::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::customEvent", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::customEvent")
	}
}

func (ptr *QAbstractVideoSurface) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::customEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAbstractVideoSurface) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::customEvent")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAbstractVideoSurface_DeleteLater
func callbackQAbstractVideoSurface_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractVideoSurfaceFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractVideoSurface) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAbstractVideoSurface::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::deleteLater", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::deleteLater")
	}
}

func (ptr *QAbstractVideoSurface) DeleteLater() {
	defer qt.Recovering("QAbstractVideoSurface::deleteLater")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractVideoSurface) DeleteLaterDefault() {
	defer qt.Recovering("QAbstractVideoSurface::deleteLater")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractVideoSurface_DisconnectNotify
func callbackQAbstractVideoSurface_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAbstractVideoSurface::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractVideoSurfaceFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractVideoSurface) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAbstractVideoSurface::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::disconnectNotify", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::disconnectNotify")
	}
}

func (ptr *QAbstractVideoSurface) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractVideoSurface) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAbstractVideoSurface::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAbstractVideoSurface_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractVideoSurface_Event
func callbackQAbstractVideoSurface_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAbstractVideoSurface::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractVideoSurfaceFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAbstractVideoSurface) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAbstractVideoSurface::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::event", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectEvent() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::event")
	}
}

func (ptr *QAbstractVideoSurface) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractVideoSurface::event")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractVideoSurface) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractVideoSurface::event")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractVideoSurface_EventFilter
func callbackQAbstractVideoSurface_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAbstractVideoSurface::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractVideoSurfaceFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAbstractVideoSurface) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAbstractVideoSurface::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::eventFilter", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::eventFilter")
	}
}

func (ptr *QAbstractVideoSurface) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractVideoSurface::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractVideoSurface) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAbstractVideoSurface::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAbstractVideoSurface_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractVideoSurface_MetaObject
func callbackQAbstractVideoSurface_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAbstractVideoSurface::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractVideoSurface::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAbstractVideoSurfaceFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractVideoSurface) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAbstractVideoSurface::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::metaObject", f)
	}
}

func (ptr *QAbstractVideoSurface) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAbstractVideoSurface::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractVideoSurface::metaObject")
	}
}

func (ptr *QAbstractVideoSurface) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAbstractVideoSurface::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAbstractVideoSurface_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractVideoSurface) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAbstractVideoSurface::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAbstractVideoSurface_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QAudio::Error
type QAudio__Error int64

const (
	QAudio__NoError       = QAudio__Error(0)
	QAudio__OpenError     = QAudio__Error(1)
	QAudio__IOError       = QAudio__Error(2)
	QAudio__UnderrunError = QAudio__Error(3)
	QAudio__FatalError    = QAudio__Error(4)
)

//QAudio::Mode
type QAudio__Mode int64

const (
	QAudio__AudioInput  = QAudio__Mode(0)
	QAudio__AudioOutput = QAudio__Mode(1)
)

//QAudio::Role
type QAudio__Role int64

const (
	QAudio__UnknownRole            = QAudio__Role(0)
	QAudio__MusicRole              = QAudio__Role(1)
	QAudio__VideoRole              = QAudio__Role(2)
	QAudio__VoiceCommunicationRole = QAudio__Role(3)
	QAudio__AlarmRole              = QAudio__Role(4)
	QAudio__NotificationRole       = QAudio__Role(5)
	QAudio__RingtoneRole           = QAudio__Role(6)
	QAudio__AccessibilityRole      = QAudio__Role(7)
	QAudio__SonificationRole       = QAudio__Role(8)
	QAudio__GameRole               = QAudio__Role(9)
)

//QAudio::State
type QAudio__State int64

const (
	QAudio__ActiveState    = QAudio__State(0)
	QAudio__SuspendedState = QAudio__State(1)
	QAudio__StoppedState   = QAudio__State(2)
	QAudio__IdleState      = QAudio__State(3)
)

type QAudio struct {
	ptr unsafe.Pointer
}

type QAudio_ITF interface {
	QAudio_PTR() *QAudio
}

func (p *QAudio) QAudio_PTR() *QAudio {
	return p
}

func (p *QAudio) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAudio) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAudio(ptr QAudio_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudio_PTR().Pointer()
	}
	return nil
}

func NewQAudioFromPointer(ptr unsafe.Pointer) *QAudio {
	var n = new(QAudio)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAudio) DestroyQAudio() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QAudioBuffer struct {
	ptr unsafe.Pointer
}

type QAudioBuffer_ITF interface {
	QAudioBuffer_PTR() *QAudioBuffer
}

func (p *QAudioBuffer) QAudioBuffer_PTR() *QAudioBuffer {
	return p
}

func (p *QAudioBuffer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAudioBuffer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAudioBuffer(ptr QAudioBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioBuffer_PTR().Pointer()
	}
	return nil
}

func NewQAudioBufferFromPointer(ptr unsafe.Pointer) *QAudioBuffer {
	var n = new(QAudioBuffer)
	n.SetPointer(ptr)
	return n
}
func NewQAudioBuffer() *QAudioBuffer {
	defer qt.Recovering("QAudioBuffer::QAudioBuffer")

	var tmpValue = NewQAudioBufferFromPointer(C.QAudioBuffer_NewQAudioBuffer())
	runtime.SetFinalizer(tmpValue, (*QAudioBuffer).DestroyQAudioBuffer)
	return tmpValue
}

func NewQAudioBuffer3(other QAudioBuffer_ITF) *QAudioBuffer {
	defer qt.Recovering("QAudioBuffer::QAudioBuffer")

	var tmpValue = NewQAudioBufferFromPointer(C.QAudioBuffer_NewQAudioBuffer3(PointerFromQAudioBuffer(other)))
	runtime.SetFinalizer(tmpValue, (*QAudioBuffer).DestroyQAudioBuffer)
	return tmpValue
}

func NewQAudioBuffer4(data string, format QAudioFormat_ITF, startTime int64) *QAudioBuffer {
	defer qt.Recovering("QAudioBuffer::QAudioBuffer")

	var dataC = C.CString(hex.EncodeToString([]byte(data)))
	defer C.free(unsafe.Pointer(dataC))
	var tmpValue = NewQAudioBufferFromPointer(C.QAudioBuffer_NewQAudioBuffer4(dataC, PointerFromQAudioFormat(format), C.longlong(startTime)))
	runtime.SetFinalizer(tmpValue, (*QAudioBuffer).DestroyQAudioBuffer)
	return tmpValue
}

func NewQAudioBuffer5(numFrames int, format QAudioFormat_ITF, startTime int64) *QAudioBuffer {
	defer qt.Recovering("QAudioBuffer::QAudioBuffer")

	var tmpValue = NewQAudioBufferFromPointer(C.QAudioBuffer_NewQAudioBuffer5(C.int(int32(numFrames)), PointerFromQAudioFormat(format), C.longlong(startTime)))
	runtime.SetFinalizer(tmpValue, (*QAudioBuffer).DestroyQAudioBuffer)
	return tmpValue
}

func (ptr *QAudioBuffer) ByteCount() int {
	defer qt.Recovering("QAudioBuffer::byteCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioBuffer_ByteCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioBuffer) ConstData2() unsafe.Pointer {
	defer qt.Recovering("QAudioBuffer::constData")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAudioBuffer_ConstData2(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioBuffer) ConstData() unsafe.Pointer {
	defer qt.Recovering("QAudioBuffer::constData")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAudioBuffer_ConstData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioBuffer) Data4() unsafe.Pointer {
	defer qt.Recovering("QAudioBuffer::data")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAudioBuffer_Data4(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioBuffer) Data2() unsafe.Pointer {
	defer qt.Recovering("QAudioBuffer::data")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAudioBuffer_Data2(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioBuffer) Data3() unsafe.Pointer {
	defer qt.Recovering("QAudioBuffer::data")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAudioBuffer_Data3(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioBuffer) Data() unsafe.Pointer {
	defer qt.Recovering("QAudioBuffer::data")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAudioBuffer_Data(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioBuffer) Duration() int64 {
	defer qt.Recovering("QAudioBuffer::duration")

	if ptr.Pointer() != nil {
		return int64(C.QAudioBuffer_Duration(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioBuffer) Format() *QAudioFormat {
	defer qt.Recovering("QAudioBuffer::format")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioFormatFromPointer(C.QAudioBuffer_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioFormat).DestroyQAudioFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QAudioBuffer) FrameCount() int {
	defer qt.Recovering("QAudioBuffer::frameCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioBuffer_FrameCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioBuffer) IsValid() bool {
	defer qt.Recovering("QAudioBuffer::isValid")

	if ptr.Pointer() != nil {
		return C.QAudioBuffer_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAudioBuffer) SampleCount() int {
	defer qt.Recovering("QAudioBuffer::sampleCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioBuffer_SampleCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioBuffer) StartTime() int64 {
	defer qt.Recovering("QAudioBuffer::startTime")

	if ptr.Pointer() != nil {
		return int64(C.QAudioBuffer_StartTime(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioBuffer) DestroyQAudioBuffer() {
	defer qt.Recovering("QAudioBuffer::~QAudioBuffer")

	if ptr.Pointer() != nil {
		C.QAudioBuffer_DestroyQAudioBuffer(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QAudioDecoder::Error
type QAudioDecoder__Error int64

const (
	QAudioDecoder__NoError             = QAudioDecoder__Error(0)
	QAudioDecoder__ResourceError       = QAudioDecoder__Error(1)
	QAudioDecoder__FormatError         = QAudioDecoder__Error(2)
	QAudioDecoder__AccessDeniedError   = QAudioDecoder__Error(3)
	QAudioDecoder__ServiceMissingError = QAudioDecoder__Error(4)
)

//QAudioDecoder::State
type QAudioDecoder__State int64

const (
	QAudioDecoder__StoppedState  = QAudioDecoder__State(0)
	QAudioDecoder__DecodingState = QAudioDecoder__State(1)
)

type QAudioDecoder struct {
	QMediaObject
}

type QAudioDecoder_ITF interface {
	QMediaObject_ITF
	QAudioDecoder_PTR() *QAudioDecoder
}

func (p *QAudioDecoder) QAudioDecoder_PTR() *QAudioDecoder {
	return p
}

func (p *QAudioDecoder) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaObject_PTR().Pointer()
	}
	return nil
}

func (p *QAudioDecoder) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioDecoder(ptr QAudioDecoder_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioDecoder_PTR().Pointer()
	}
	return nil
}

func NewQAudioDecoderFromPointer(ptr unsafe.Pointer) *QAudioDecoder {
	var n = new(QAudioDecoder)
	n.SetPointer(ptr)
	return n
}
func (ptr *QAudioDecoder) ErrorString() string {
	defer qt.Recovering("QAudioDecoder::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioDecoder_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAudioDecoder) State() QAudioDecoder__State {
	defer qt.Recovering("QAudioDecoder::state")

	if ptr.Pointer() != nil {
		return QAudioDecoder__State(C.QAudioDecoder_State(ptr.Pointer()))
	}
	return 0
}

func NewQAudioDecoder(parent core.QObject_ITF) *QAudioDecoder {
	defer qt.Recovering("QAudioDecoder::QAudioDecoder")

	var tmpValue = NewQAudioDecoderFromPointer(C.QAudioDecoder_NewQAudioDecoder(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAudioDecoder) AudioFormat() *QAudioFormat {
	defer qt.Recovering("QAudioDecoder::audioFormat")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioFormatFromPointer(C.QAudioDecoder_AudioFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioFormat).DestroyQAudioFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QAudioDecoder) BufferAvailable() bool {
	defer qt.Recovering("QAudioDecoder::bufferAvailable")

	if ptr.Pointer() != nil {
		return C.QAudioDecoder_BufferAvailable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAudioDecoder_BufferAvailableChanged
func callbackQAudioDecoder_BufferAvailableChanged(ptr unsafe.Pointer, available C.char) {
	defer qt.Recovering("callback QAudioDecoder::bufferAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::bufferAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QAudioDecoder) ConnectBufferAvailableChanged(f func(available bool)) {
	defer qt.Recovering("connect QAudioDecoder::bufferAvailableChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectBufferAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::bufferAvailableChanged", f)
	}
}

func (ptr *QAudioDecoder) DisconnectBufferAvailableChanged() {
	defer qt.Recovering("disconnect QAudioDecoder::bufferAvailableChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectBufferAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::bufferAvailableChanged")
	}
}

func (ptr *QAudioDecoder) BufferAvailableChanged(available bool) {
	defer qt.Recovering("QAudioDecoder::bufferAvailableChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_BufferAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

//export callbackQAudioDecoder_BufferReady
func callbackQAudioDecoder_BufferReady(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::bufferReady")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::bufferReady"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoder) ConnectBufferReady(f func()) {
	defer qt.Recovering("connect QAudioDecoder::bufferReady")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectBufferReady(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::bufferReady", f)
	}
}

func (ptr *QAudioDecoder) DisconnectBufferReady() {
	defer qt.Recovering("disconnect QAudioDecoder::bufferReady")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectBufferReady(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::bufferReady")
	}
}

func (ptr *QAudioDecoder) BufferReady() {
	defer qt.Recovering("QAudioDecoder::bufferReady")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_BufferReady(ptr.Pointer())
	}
}

func (ptr *QAudioDecoder) Duration() int64 {
	defer qt.Recovering("QAudioDecoder::duration")

	if ptr.Pointer() != nil {
		return int64(C.QAudioDecoder_Duration(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioDecoder_DurationChanged
func callbackQAudioDecoder_DurationChanged(ptr unsafe.Pointer, duration C.longlong) {
	defer qt.Recovering("callback QAudioDecoder::durationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::durationChanged"); signal != nil {
		signal.(func(int64))(int64(duration))
	}

}

func (ptr *QAudioDecoder) ConnectDurationChanged(f func(duration int64)) {
	defer qt.Recovering("connect QAudioDecoder::durationChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectDurationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::durationChanged", f)
	}
}

func (ptr *QAudioDecoder) DisconnectDurationChanged() {
	defer qt.Recovering("disconnect QAudioDecoder::durationChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectDurationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::durationChanged")
	}
}

func (ptr *QAudioDecoder) DurationChanged(duration int64) {
	defer qt.Recovering("QAudioDecoder::durationChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DurationChanged(ptr.Pointer(), C.longlong(duration))
	}
}

//export callbackQAudioDecoder_Error2
func callbackQAudioDecoder_Error2(ptr unsafe.Pointer, error C.longlong) {
	defer qt.Recovering("callback QAudioDecoder::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::error2"); signal != nil {
		signal.(func(QAudioDecoder__Error))(QAudioDecoder__Error(error))
	}

}

func (ptr *QAudioDecoder) ConnectError2(f func(error QAudioDecoder__Error)) {
	defer qt.Recovering("connect QAudioDecoder::error")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectError2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::error2", f)
	}
}

func (ptr *QAudioDecoder) DisconnectError2() {
	defer qt.Recovering("disconnect QAudioDecoder::error")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectError2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::error2")
	}
}

func (ptr *QAudioDecoder) Error2(error QAudioDecoder__Error) {
	defer qt.Recovering("QAudioDecoder::error")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_Error2(ptr.Pointer(), C.longlong(error))
	}
}

func (ptr *QAudioDecoder) Error() QAudioDecoder__Error {
	defer qt.Recovering("QAudioDecoder::error")

	if ptr.Pointer() != nil {
		return QAudioDecoder__Error(C.QAudioDecoder_Error(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioDecoder_Finished
func callbackQAudioDecoder_Finished(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::finished")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::finished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoder) ConnectFinished(f func()) {
	defer qt.Recovering("connect QAudioDecoder::finished")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectFinished(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::finished", f)
	}
}

func (ptr *QAudioDecoder) DisconnectFinished() {
	defer qt.Recovering("disconnect QAudioDecoder::finished")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectFinished(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::finished")
	}
}

func (ptr *QAudioDecoder) Finished() {
	defer qt.Recovering("QAudioDecoder::finished")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_Finished(ptr.Pointer())
	}
}

//export callbackQAudioDecoder_FormatChanged
func callbackQAudioDecoder_FormatChanged(ptr unsafe.Pointer, format unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::formatChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::formatChanged"); signal != nil {
		signal.(func(*QAudioFormat))(NewQAudioFormatFromPointer(format))
	}

}

func (ptr *QAudioDecoder) ConnectFormatChanged(f func(format *QAudioFormat)) {
	defer qt.Recovering("connect QAudioDecoder::formatChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectFormatChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::formatChanged", f)
	}
}

func (ptr *QAudioDecoder) DisconnectFormatChanged() {
	defer qt.Recovering("disconnect QAudioDecoder::formatChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectFormatChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::formatChanged")
	}
}

func (ptr *QAudioDecoder) FormatChanged(format QAudioFormat_ITF) {
	defer qt.Recovering("QAudioDecoder::formatChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_FormatChanged(ptr.Pointer(), PointerFromQAudioFormat(format))
	}
}

func QAudioDecoder_HasSupport(mimeType string, codecs []string) QMultimedia__SupportEstimate {
	defer qt.Recovering("QAudioDecoder::hasSupport")

	var mimeTypeC = C.CString(mimeType)
	defer C.free(unsafe.Pointer(mimeTypeC))
	var codecsC = C.CString(strings.Join(codecs, "|"))
	defer C.free(unsafe.Pointer(codecsC))
	return QMultimedia__SupportEstimate(C.QAudioDecoder_QAudioDecoder_HasSupport(mimeTypeC, codecsC))
}

func (ptr *QAudioDecoder) HasSupport(mimeType string, codecs []string) QMultimedia__SupportEstimate {
	defer qt.Recovering("QAudioDecoder::hasSupport")

	var mimeTypeC = C.CString(mimeType)
	defer C.free(unsafe.Pointer(mimeTypeC))
	var codecsC = C.CString(strings.Join(codecs, "|"))
	defer C.free(unsafe.Pointer(codecsC))
	return QMultimedia__SupportEstimate(C.QAudioDecoder_QAudioDecoder_HasSupport(mimeTypeC, codecsC))
}

func (ptr *QAudioDecoder) Position() int64 {
	defer qt.Recovering("QAudioDecoder::position")

	if ptr.Pointer() != nil {
		return int64(C.QAudioDecoder_Position(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioDecoder_PositionChanged
func callbackQAudioDecoder_PositionChanged(ptr unsafe.Pointer, position C.longlong) {
	defer qt.Recovering("callback QAudioDecoder::positionChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::positionChanged"); signal != nil {
		signal.(func(int64))(int64(position))
	}

}

func (ptr *QAudioDecoder) ConnectPositionChanged(f func(position int64)) {
	defer qt.Recovering("connect QAudioDecoder::positionChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectPositionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::positionChanged", f)
	}
}

func (ptr *QAudioDecoder) DisconnectPositionChanged() {
	defer qt.Recovering("disconnect QAudioDecoder::positionChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectPositionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::positionChanged")
	}
}

func (ptr *QAudioDecoder) PositionChanged(position int64) {
	defer qt.Recovering("QAudioDecoder::positionChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_PositionChanged(ptr.Pointer(), C.longlong(position))
	}
}

func (ptr *QAudioDecoder) Read() *QAudioBuffer {
	defer qt.Recovering("QAudioDecoder::read")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioBufferFromPointer(C.QAudioDecoder_Read(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioBuffer).DestroyQAudioBuffer)
		return tmpValue
	}
	return nil
}

func (ptr *QAudioDecoder) SetAudioFormat(format QAudioFormat_ITF) {
	defer qt.Recovering("QAudioDecoder::setAudioFormat")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_SetAudioFormat(ptr.Pointer(), PointerFromQAudioFormat(format))
	}
}

func (ptr *QAudioDecoder) SetSourceDevice(device core.QIODevice_ITF) {
	defer qt.Recovering("QAudioDecoder::setSourceDevice")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_SetSourceDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QAudioDecoder) SetSourceFilename(fileName string) {
	defer qt.Recovering("QAudioDecoder::setSourceFilename")

	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QAudioDecoder_SetSourceFilename(ptr.Pointer(), fileNameC)
	}
}

//export callbackQAudioDecoder_SourceChanged
func callbackQAudioDecoder_SourceChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::sourceChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::sourceChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoder) ConnectSourceChanged(f func()) {
	defer qt.Recovering("connect QAudioDecoder::sourceChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectSourceChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::sourceChanged", f)
	}
}

func (ptr *QAudioDecoder) DisconnectSourceChanged() {
	defer qt.Recovering("disconnect QAudioDecoder::sourceChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectSourceChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::sourceChanged")
	}
}

func (ptr *QAudioDecoder) SourceChanged() {
	defer qt.Recovering("QAudioDecoder::sourceChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_SourceChanged(ptr.Pointer())
	}
}

func (ptr *QAudioDecoder) SourceDevice() *core.QIODevice {
	defer qt.Recovering("QAudioDecoder::sourceDevice")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QAudioDecoder_SourceDevice(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAudioDecoder) SourceFilename() string {
	defer qt.Recovering("QAudioDecoder::sourceFilename")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioDecoder_SourceFilename(ptr.Pointer()))
	}
	return ""
}

//export callbackQAudioDecoder_Start
func callbackQAudioDecoder_Start(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::start")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoder) ConnectStart(f func()) {
	defer qt.Recovering("connect QAudioDecoder::start")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::start", f)
	}
}

func (ptr *QAudioDecoder) DisconnectStart() {
	defer qt.Recovering("disconnect QAudioDecoder::start")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::start")
	}
}

func (ptr *QAudioDecoder) Start() {
	defer qt.Recovering("QAudioDecoder::start")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_Start(ptr.Pointer())
	}
}

//export callbackQAudioDecoder_StateChanged
func callbackQAudioDecoder_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QAudioDecoder::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::stateChanged"); signal != nil {
		signal.(func(QAudioDecoder__State))(QAudioDecoder__State(state))
	}

}

func (ptr *QAudioDecoder) ConnectStateChanged(f func(state QAudioDecoder__State)) {
	defer qt.Recovering("connect QAudioDecoder::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::stateChanged", f)
	}
}

func (ptr *QAudioDecoder) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QAudioDecoder::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::stateChanged")
	}
}

func (ptr *QAudioDecoder) StateChanged(state QAudioDecoder__State) {
	defer qt.Recovering("QAudioDecoder::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQAudioDecoder_Stop
func callbackQAudioDecoder_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoder) ConnectStop(f func()) {
	defer qt.Recovering("connect QAudioDecoder::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::stop", f)
	}
}

func (ptr *QAudioDecoder) DisconnectStop() {
	defer qt.Recovering("disconnect QAudioDecoder::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::stop")
	}
}

func (ptr *QAudioDecoder) Stop() {
	defer qt.Recovering("QAudioDecoder::stop")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_Stop(ptr.Pointer())
	}
}

func (ptr *QAudioDecoder) DestroyQAudioDecoder() {
	defer qt.Recovering("QAudioDecoder::~QAudioDecoder")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DestroyQAudioDecoder(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioDecoder_Availability
func callbackQAudioDecoder_Availability(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QAudioDecoder::availability")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::availability"); signal != nil {
		return C.longlong(signal.(func() QMultimedia__AvailabilityStatus)())
	}

	return C.longlong(NewQAudioDecoderFromPointer(ptr).AvailabilityDefault())
}

func (ptr *QAudioDecoder) ConnectAvailability(f func() QMultimedia__AvailabilityStatus) {
	defer qt.Recovering("connect QAudioDecoder::availability")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::availability", f)
	}
}

func (ptr *QAudioDecoder) DisconnectAvailability() {
	defer qt.Recovering("disconnect QAudioDecoder::availability")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::availability")
	}
}

func (ptr *QAudioDecoder) Availability() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QAudioDecoder::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QAudioDecoder_Availability(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioDecoder) AvailabilityDefault() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QAudioDecoder::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QAudioDecoder_AvailabilityDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioDecoder_Bind
func callbackQAudioDecoder_Bind(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioDecoder::bind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::bind"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject) bool)(core.NewQObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioDecoderFromPointer(ptr).BindDefault(core.NewQObjectFromPointer(object)))))
}

func (ptr *QAudioDecoder) ConnectBind(f func(object *core.QObject) bool) {
	defer qt.Recovering("connect QAudioDecoder::bind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::bind", f)
	}
}

func (ptr *QAudioDecoder) DisconnectBind() {
	defer qt.Recovering("disconnect QAudioDecoder::bind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::bind")
	}
}

func (ptr *QAudioDecoder) Bind(object core.QObject_ITF) bool {
	defer qt.Recovering("QAudioDecoder::bind")

	if ptr.Pointer() != nil {
		return C.QAudioDecoder_Bind(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QAudioDecoder) BindDefault(object core.QObject_ITF) bool {
	defer qt.Recovering("QAudioDecoder::bind")

	if ptr.Pointer() != nil {
		return C.QAudioDecoder_BindDefault(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

//export callbackQAudioDecoder_IsAvailable
func callbackQAudioDecoder_IsAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioDecoder::isAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::isAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioDecoderFromPointer(ptr).IsAvailableDefault())))
}

func (ptr *QAudioDecoder) ConnectIsAvailable(f func() bool) {
	defer qt.Recovering("connect QAudioDecoder::isAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::isAvailable", f)
	}
}

func (ptr *QAudioDecoder) DisconnectIsAvailable() {
	defer qt.Recovering("disconnect QAudioDecoder::isAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::isAvailable")
	}
}

func (ptr *QAudioDecoder) IsAvailable() bool {
	defer qt.Recovering("QAudioDecoder::isAvailable")

	if ptr.Pointer() != nil {
		return C.QAudioDecoder_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAudioDecoder) IsAvailableDefault() bool {
	defer qt.Recovering("QAudioDecoder::isAvailable")

	if ptr.Pointer() != nil {
		return C.QAudioDecoder_IsAvailableDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAudioDecoder_Service
func callbackQAudioDecoder_Service(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioDecoder::service")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::service"); signal != nil {
		return PointerFromQMediaService(signal.(func() *QMediaService)())
	}

	return PointerFromQMediaService(NewQAudioDecoderFromPointer(ptr).ServiceDefault())
}

func (ptr *QAudioDecoder) ConnectService(f func() *QMediaService) {
	defer qt.Recovering("connect QAudioDecoder::service")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::service", f)
	}
}

func (ptr *QAudioDecoder) DisconnectService() {
	defer qt.Recovering("disconnect QAudioDecoder::service")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::service")
	}
}

func (ptr *QAudioDecoder) Service() *QMediaService {
	defer qt.Recovering("QAudioDecoder::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QAudioDecoder_Service(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAudioDecoder) ServiceDefault() *QMediaService {
	defer qt.Recovering("QAudioDecoder::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QAudioDecoder_ServiceDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAudioDecoder_Unbind
func callbackQAudioDecoder_Unbind(ptr unsafe.Pointer, object unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::unbind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::unbind"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(object))
	} else {
		NewQAudioDecoderFromPointer(ptr).UnbindDefault(core.NewQObjectFromPointer(object))
	}
}

func (ptr *QAudioDecoder) ConnectUnbind(f func(object *core.QObject)) {
	defer qt.Recovering("connect QAudioDecoder::unbind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::unbind", f)
	}
}

func (ptr *QAudioDecoder) DisconnectUnbind() {
	defer qt.Recovering("disconnect QAudioDecoder::unbind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::unbind")
	}
}

func (ptr *QAudioDecoder) Unbind(object core.QObject_ITF) {
	defer qt.Recovering("QAudioDecoder::unbind")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_Unbind(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

func (ptr *QAudioDecoder) UnbindDefault(object core.QObject_ITF) {
	defer qt.Recovering("QAudioDecoder::unbind")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_UnbindDefault(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

//export callbackQAudioDecoder_TimerEvent
func callbackQAudioDecoder_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioDecoderFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioDecoder) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioDecoder::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::timerEvent", f)
	}
}

func (ptr *QAudioDecoder) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioDecoder::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::timerEvent")
	}
}

func (ptr *QAudioDecoder) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioDecoder::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioDecoder) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioDecoder::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioDecoder_ChildEvent
func callbackQAudioDecoder_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioDecoderFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioDecoder) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioDecoder::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::childEvent", f)
	}
}

func (ptr *QAudioDecoder) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioDecoder::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::childEvent")
	}
}

func (ptr *QAudioDecoder) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioDecoder::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioDecoder) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioDecoder::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioDecoder_ConnectNotify
func callbackQAudioDecoder_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioDecoderFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioDecoder) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioDecoder::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::connectNotify", f)
	}
}

func (ptr *QAudioDecoder) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioDecoder::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::connectNotify")
	}
}

func (ptr *QAudioDecoder) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioDecoder::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioDecoder) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioDecoder::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioDecoder_CustomEvent
func callbackQAudioDecoder_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioDecoderFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioDecoder) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioDecoder::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::customEvent", f)
	}
}

func (ptr *QAudioDecoder) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioDecoder::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::customEvent")
	}
}

func (ptr *QAudioDecoder) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioDecoder::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioDecoder) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioDecoder::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioDecoder_DeleteLater
func callbackQAudioDecoder_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioDecoderFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioDecoder) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioDecoder::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::deleteLater", f)
	}
}

func (ptr *QAudioDecoder) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioDecoder::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::deleteLater")
	}
}

func (ptr *QAudioDecoder) DeleteLater() {
	defer qt.Recovering("QAudioDecoder::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioDecoder) DeleteLaterDefault() {
	defer qt.Recovering("QAudioDecoder::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioDecoder_DisconnectNotify
func callbackQAudioDecoder_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoder::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioDecoderFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioDecoder) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioDecoder::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::disconnectNotify", f)
	}
}

func (ptr *QAudioDecoder) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioDecoder::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::disconnectNotify")
	}
}

func (ptr *QAudioDecoder) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioDecoder::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioDecoder) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioDecoder::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioDecoder_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioDecoder_Event
func callbackQAudioDecoder_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioDecoder::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioDecoderFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioDecoder) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioDecoder::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::event", f)
	}
}

func (ptr *QAudioDecoder) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioDecoder::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::event")
	}
}

func (ptr *QAudioDecoder) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioDecoder::event")

	if ptr.Pointer() != nil {
		return C.QAudioDecoder_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioDecoder) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioDecoder::event")

	if ptr.Pointer() != nil {
		return C.QAudioDecoder_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioDecoder_EventFilter
func callbackQAudioDecoder_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioDecoder::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioDecoderFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioDecoder) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioDecoder::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::eventFilter", f)
	}
}

func (ptr *QAudioDecoder) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioDecoder::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::eventFilter")
	}
}

func (ptr *QAudioDecoder) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioDecoder::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioDecoder_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioDecoder) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioDecoder::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioDecoder_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioDecoder_MetaObject
func callbackQAudioDecoder_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioDecoder::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoder::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioDecoderFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioDecoder) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioDecoder::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::metaObject", f)
	}
}

func (ptr *QAudioDecoder) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioDecoder::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoder::metaObject")
	}
}

func (ptr *QAudioDecoder) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioDecoder::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioDecoder_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioDecoder) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioDecoder::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioDecoder_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAudioDecoderControl struct {
	QMediaControl
}

type QAudioDecoderControl_ITF interface {
	QMediaControl_ITF
	QAudioDecoderControl_PTR() *QAudioDecoderControl
}

func (p *QAudioDecoderControl) QAudioDecoderControl_PTR() *QAudioDecoderControl {
	return p
}

func (p *QAudioDecoderControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QAudioDecoderControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioDecoderControl(ptr QAudioDecoderControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioDecoderControl_PTR().Pointer()
	}
	return nil
}

func NewQAudioDecoderControlFromPointer(ptr unsafe.Pointer) *QAudioDecoderControl {
	var n = new(QAudioDecoderControl)
	n.SetPointer(ptr)
	return n
}
func NewQAudioDecoderControl(parent core.QObject_ITF) *QAudioDecoderControl {
	defer qt.Recovering("QAudioDecoderControl::QAudioDecoderControl")

	var tmpValue = NewQAudioDecoderControlFromPointer(C.QAudioDecoderControl_NewQAudioDecoderControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAudioDecoderControl_AudioFormat
func callbackQAudioDecoderControl_AudioFormat(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioDecoderControl::audioFormat")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::audioFormat"); signal != nil {
		return PointerFromQAudioFormat(signal.(func() *QAudioFormat)())
	}

	return PointerFromQAudioFormat(nil)
}

func (ptr *QAudioDecoderControl) ConnectAudioFormat(f func() *QAudioFormat) {
	defer qt.Recovering("connect QAudioDecoderControl::audioFormat")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::audioFormat", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectAudioFormat() {
	defer qt.Recovering("disconnect QAudioDecoderControl::audioFormat")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::audioFormat")
	}
}

func (ptr *QAudioDecoderControl) AudioFormat() *QAudioFormat {
	defer qt.Recovering("QAudioDecoderControl::audioFormat")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioFormatFromPointer(C.QAudioDecoderControl_AudioFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioFormat).DestroyQAudioFormat)
		return tmpValue
	}
	return nil
}

//export callbackQAudioDecoderControl_BufferAvailable
func callbackQAudioDecoderControl_BufferAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioDecoderControl::bufferAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::bufferAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAudioDecoderControl) ConnectBufferAvailable(f func() bool) {
	defer qt.Recovering("connect QAudioDecoderControl::bufferAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::bufferAvailable", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectBufferAvailable() {
	defer qt.Recovering("disconnect QAudioDecoderControl::bufferAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::bufferAvailable")
	}
}

func (ptr *QAudioDecoderControl) BufferAvailable() bool {
	defer qt.Recovering("QAudioDecoderControl::bufferAvailable")

	if ptr.Pointer() != nil {
		return C.QAudioDecoderControl_BufferAvailable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAudioDecoderControl_BufferAvailableChanged
func callbackQAudioDecoderControl_BufferAvailableChanged(ptr unsafe.Pointer, available C.char) {
	defer qt.Recovering("callback QAudioDecoderControl::bufferAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::bufferAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QAudioDecoderControl) ConnectBufferAvailableChanged(f func(available bool)) {
	defer qt.Recovering("connect QAudioDecoderControl::bufferAvailableChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectBufferAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::bufferAvailableChanged", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectBufferAvailableChanged() {
	defer qt.Recovering("disconnect QAudioDecoderControl::bufferAvailableChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectBufferAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::bufferAvailableChanged")
	}
}

func (ptr *QAudioDecoderControl) BufferAvailableChanged(available bool) {
	defer qt.Recovering("QAudioDecoderControl::bufferAvailableChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_BufferAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

//export callbackQAudioDecoderControl_BufferReady
func callbackQAudioDecoderControl_BufferReady(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::bufferReady")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::bufferReady"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoderControl) ConnectBufferReady(f func()) {
	defer qt.Recovering("connect QAudioDecoderControl::bufferReady")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectBufferReady(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::bufferReady", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectBufferReady() {
	defer qt.Recovering("disconnect QAudioDecoderControl::bufferReady")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectBufferReady(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::bufferReady")
	}
}

func (ptr *QAudioDecoderControl) BufferReady() {
	defer qt.Recovering("QAudioDecoderControl::bufferReady")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_BufferReady(ptr.Pointer())
	}
}

//export callbackQAudioDecoderControl_Duration
func callbackQAudioDecoderControl_Duration(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QAudioDecoderControl::duration")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::duration"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(0)
}

func (ptr *QAudioDecoderControl) ConnectDuration(f func() int64) {
	defer qt.Recovering("connect QAudioDecoderControl::duration")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::duration", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectDuration() {
	defer qt.Recovering("disconnect QAudioDecoderControl::duration")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::duration")
	}
}

func (ptr *QAudioDecoderControl) Duration() int64 {
	defer qt.Recovering("QAudioDecoderControl::duration")

	if ptr.Pointer() != nil {
		return int64(C.QAudioDecoderControl_Duration(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioDecoderControl_DurationChanged
func callbackQAudioDecoderControl_DurationChanged(ptr unsafe.Pointer, duration C.longlong) {
	defer qt.Recovering("callback QAudioDecoderControl::durationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::durationChanged"); signal != nil {
		signal.(func(int64))(int64(duration))
	}

}

func (ptr *QAudioDecoderControl) ConnectDurationChanged(f func(duration int64)) {
	defer qt.Recovering("connect QAudioDecoderControl::durationChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectDurationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::durationChanged", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectDurationChanged() {
	defer qt.Recovering("disconnect QAudioDecoderControl::durationChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectDurationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::durationChanged")
	}
}

func (ptr *QAudioDecoderControl) DurationChanged(duration int64) {
	defer qt.Recovering("QAudioDecoderControl::durationChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DurationChanged(ptr.Pointer(), C.longlong(duration))
	}
}

//export callbackQAudioDecoderControl_Error
func callbackQAudioDecoderControl_Error(ptr unsafe.Pointer, error C.int, errorString *C.char) {
	defer qt.Recovering("callback QAudioDecoderControl::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::error"); signal != nil {
		signal.(func(int, string))(int(int32(error)), C.GoString(errorString))
	}

}

func (ptr *QAudioDecoderControl) ConnectError(f func(error int, errorString string)) {
	defer qt.Recovering("connect QAudioDecoderControl::error")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectError(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::error", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectError() {
	defer qt.Recovering("disconnect QAudioDecoderControl::error")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectError(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::error")
	}
}

func (ptr *QAudioDecoderControl) Error(error int, errorString string) {
	defer qt.Recovering("QAudioDecoderControl::error")

	if ptr.Pointer() != nil {
		var errorStringC = C.CString(errorString)
		defer C.free(unsafe.Pointer(errorStringC))
		C.QAudioDecoderControl_Error(ptr.Pointer(), C.int(int32(error)), errorStringC)
	}
}

//export callbackQAudioDecoderControl_Finished
func callbackQAudioDecoderControl_Finished(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::finished")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::finished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoderControl) ConnectFinished(f func()) {
	defer qt.Recovering("connect QAudioDecoderControl::finished")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectFinished(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::finished", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectFinished() {
	defer qt.Recovering("disconnect QAudioDecoderControl::finished")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectFinished(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::finished")
	}
}

func (ptr *QAudioDecoderControl) Finished() {
	defer qt.Recovering("QAudioDecoderControl::finished")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_Finished(ptr.Pointer())
	}
}

//export callbackQAudioDecoderControl_FormatChanged
func callbackQAudioDecoderControl_FormatChanged(ptr unsafe.Pointer, format unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::formatChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::formatChanged"); signal != nil {
		signal.(func(*QAudioFormat))(NewQAudioFormatFromPointer(format))
	}

}

func (ptr *QAudioDecoderControl) ConnectFormatChanged(f func(format *QAudioFormat)) {
	defer qt.Recovering("connect QAudioDecoderControl::formatChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectFormatChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::formatChanged", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectFormatChanged() {
	defer qt.Recovering("disconnect QAudioDecoderControl::formatChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectFormatChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::formatChanged")
	}
}

func (ptr *QAudioDecoderControl) FormatChanged(format QAudioFormat_ITF) {
	defer qt.Recovering("QAudioDecoderControl::formatChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_FormatChanged(ptr.Pointer(), PointerFromQAudioFormat(format))
	}
}

//export callbackQAudioDecoderControl_Position
func callbackQAudioDecoderControl_Position(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QAudioDecoderControl::position")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::position"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(0)
}

func (ptr *QAudioDecoderControl) ConnectPosition(f func() int64) {
	defer qt.Recovering("connect QAudioDecoderControl::position")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::position", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectPosition() {
	defer qt.Recovering("disconnect QAudioDecoderControl::position")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::position")
	}
}

func (ptr *QAudioDecoderControl) Position() int64 {
	defer qt.Recovering("QAudioDecoderControl::position")

	if ptr.Pointer() != nil {
		return int64(C.QAudioDecoderControl_Position(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioDecoderControl_PositionChanged
func callbackQAudioDecoderControl_PositionChanged(ptr unsafe.Pointer, position C.longlong) {
	defer qt.Recovering("callback QAudioDecoderControl::positionChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::positionChanged"); signal != nil {
		signal.(func(int64))(int64(position))
	}

}

func (ptr *QAudioDecoderControl) ConnectPositionChanged(f func(position int64)) {
	defer qt.Recovering("connect QAudioDecoderControl::positionChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectPositionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::positionChanged", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectPositionChanged() {
	defer qt.Recovering("disconnect QAudioDecoderControl::positionChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectPositionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::positionChanged")
	}
}

func (ptr *QAudioDecoderControl) PositionChanged(position int64) {
	defer qt.Recovering("QAudioDecoderControl::positionChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_PositionChanged(ptr.Pointer(), C.longlong(position))
	}
}

//export callbackQAudioDecoderControl_Read
func callbackQAudioDecoderControl_Read(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioDecoderControl::read")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::read"); signal != nil {
		return PointerFromQAudioBuffer(signal.(func() *QAudioBuffer)())
	}

	return PointerFromQAudioBuffer(nil)
}

func (ptr *QAudioDecoderControl) ConnectRead(f func() *QAudioBuffer) {
	defer qt.Recovering("connect QAudioDecoderControl::read")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::read", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectRead() {
	defer qt.Recovering("disconnect QAudioDecoderControl::read")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::read")
	}
}

func (ptr *QAudioDecoderControl) Read() *QAudioBuffer {
	defer qt.Recovering("QAudioDecoderControl::read")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioBufferFromPointer(C.QAudioDecoderControl_Read(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioBuffer).DestroyQAudioBuffer)
		return tmpValue
	}
	return nil
}

//export callbackQAudioDecoderControl_SetAudioFormat
func callbackQAudioDecoderControl_SetAudioFormat(ptr unsafe.Pointer, format unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::setAudioFormat")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::setAudioFormat"); signal != nil {
		signal.(func(*QAudioFormat))(NewQAudioFormatFromPointer(format))
	}

}

func (ptr *QAudioDecoderControl) ConnectSetAudioFormat(f func(format *QAudioFormat)) {
	defer qt.Recovering("connect QAudioDecoderControl::setAudioFormat")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::setAudioFormat", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectSetAudioFormat(format QAudioFormat_ITF) {
	defer qt.Recovering("disconnect QAudioDecoderControl::setAudioFormat")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::setAudioFormat")
	}
}

func (ptr *QAudioDecoderControl) SetAudioFormat(format QAudioFormat_ITF) {
	defer qt.Recovering("QAudioDecoderControl::setAudioFormat")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_SetAudioFormat(ptr.Pointer(), PointerFromQAudioFormat(format))
	}
}

//export callbackQAudioDecoderControl_SetSourceDevice
func callbackQAudioDecoderControl_SetSourceDevice(ptr unsafe.Pointer, device unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::setSourceDevice")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::setSourceDevice"); signal != nil {
		signal.(func(*core.QIODevice))(core.NewQIODeviceFromPointer(device))
	}

}

func (ptr *QAudioDecoderControl) ConnectSetSourceDevice(f func(device *core.QIODevice)) {
	defer qt.Recovering("connect QAudioDecoderControl::setSourceDevice")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::setSourceDevice", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectSetSourceDevice(device core.QIODevice_ITF) {
	defer qt.Recovering("disconnect QAudioDecoderControl::setSourceDevice")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::setSourceDevice")
	}
}

func (ptr *QAudioDecoderControl) SetSourceDevice(device core.QIODevice_ITF) {
	defer qt.Recovering("QAudioDecoderControl::setSourceDevice")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_SetSourceDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

//export callbackQAudioDecoderControl_SetSourceFilename
func callbackQAudioDecoderControl_SetSourceFilename(ptr unsafe.Pointer, fileName *C.char) {
	defer qt.Recovering("callback QAudioDecoderControl::setSourceFilename")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::setSourceFilename"); signal != nil {
		signal.(func(string))(C.GoString(fileName))
	}

}

func (ptr *QAudioDecoderControl) ConnectSetSourceFilename(f func(fileName string)) {
	defer qt.Recovering("connect QAudioDecoderControl::setSourceFilename")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::setSourceFilename", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectSetSourceFilename(fileName string) {
	defer qt.Recovering("disconnect QAudioDecoderControl::setSourceFilename")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::setSourceFilename")
	}
}

func (ptr *QAudioDecoderControl) SetSourceFilename(fileName string) {
	defer qt.Recovering("QAudioDecoderControl::setSourceFilename")

	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QAudioDecoderControl_SetSourceFilename(ptr.Pointer(), fileNameC)
	}
}

//export callbackQAudioDecoderControl_SourceChanged
func callbackQAudioDecoderControl_SourceChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::sourceChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::sourceChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoderControl) ConnectSourceChanged(f func()) {
	defer qt.Recovering("connect QAudioDecoderControl::sourceChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectSourceChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::sourceChanged", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectSourceChanged() {
	defer qt.Recovering("disconnect QAudioDecoderControl::sourceChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectSourceChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::sourceChanged")
	}
}

func (ptr *QAudioDecoderControl) SourceChanged() {
	defer qt.Recovering("QAudioDecoderControl::sourceChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_SourceChanged(ptr.Pointer())
	}
}

//export callbackQAudioDecoderControl_SourceDevice
func callbackQAudioDecoderControl_SourceDevice(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioDecoderControl::sourceDevice")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::sourceDevice"); signal != nil {
		return core.PointerFromQIODevice(signal.(func() *core.QIODevice)())
	}

	return core.PointerFromQIODevice(nil)
}

func (ptr *QAudioDecoderControl) ConnectSourceDevice(f func() *core.QIODevice) {
	defer qt.Recovering("connect QAudioDecoderControl::sourceDevice")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::sourceDevice", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectSourceDevice() {
	defer qt.Recovering("disconnect QAudioDecoderControl::sourceDevice")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::sourceDevice")
	}
}

func (ptr *QAudioDecoderControl) SourceDevice() *core.QIODevice {
	defer qt.Recovering("QAudioDecoderControl::sourceDevice")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QAudioDecoderControl_SourceDevice(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAudioDecoderControl_SourceFilename
func callbackQAudioDecoderControl_SourceFilename(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QAudioDecoderControl::sourceFilename")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::sourceFilename"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QAudioDecoderControl) ConnectSourceFilename(f func() string) {
	defer qt.Recovering("connect QAudioDecoderControl::sourceFilename")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::sourceFilename", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectSourceFilename() {
	defer qt.Recovering("disconnect QAudioDecoderControl::sourceFilename")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::sourceFilename")
	}
}

func (ptr *QAudioDecoderControl) SourceFilename() string {
	defer qt.Recovering("QAudioDecoderControl::sourceFilename")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioDecoderControl_SourceFilename(ptr.Pointer()))
	}
	return ""
}

//export callbackQAudioDecoderControl_Start
func callbackQAudioDecoderControl_Start(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::start")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoderControl) ConnectStart(f func()) {
	defer qt.Recovering("connect QAudioDecoderControl::start")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::start", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectStart() {
	defer qt.Recovering("disconnect QAudioDecoderControl::start")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::start")
	}
}

func (ptr *QAudioDecoderControl) Start() {
	defer qt.Recovering("QAudioDecoderControl::start")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_Start(ptr.Pointer())
	}
}

//export callbackQAudioDecoderControl_State
func callbackQAudioDecoderControl_State(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QAudioDecoderControl::state")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::state"); signal != nil {
		return C.longlong(signal.(func() QAudioDecoder__State)())
	}

	return C.longlong(0)
}

func (ptr *QAudioDecoderControl) ConnectState(f func() QAudioDecoder__State) {
	defer qt.Recovering("connect QAudioDecoderControl::state")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::state", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectState() {
	defer qt.Recovering("disconnect QAudioDecoderControl::state")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::state")
	}
}

func (ptr *QAudioDecoderControl) State() QAudioDecoder__State {
	defer qt.Recovering("QAudioDecoderControl::state")

	if ptr.Pointer() != nil {
		return QAudioDecoder__State(C.QAudioDecoderControl_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioDecoderControl_StateChanged
func callbackQAudioDecoderControl_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QAudioDecoderControl::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::stateChanged"); signal != nil {
		signal.(func(QAudioDecoder__State))(QAudioDecoder__State(state))
	}

}

func (ptr *QAudioDecoderControl) ConnectStateChanged(f func(state QAudioDecoder__State)) {
	defer qt.Recovering("connect QAudioDecoderControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::stateChanged", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QAudioDecoderControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::stateChanged")
	}
}

func (ptr *QAudioDecoderControl) StateChanged(state QAudioDecoder__State) {
	defer qt.Recovering("QAudioDecoderControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQAudioDecoderControl_Stop
func callbackQAudioDecoderControl_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioDecoderControl) ConnectStop(f func()) {
	defer qt.Recovering("connect QAudioDecoderControl::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::stop", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectStop() {
	defer qt.Recovering("disconnect QAudioDecoderControl::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::stop")
	}
}

func (ptr *QAudioDecoderControl) Stop() {
	defer qt.Recovering("QAudioDecoderControl::stop")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_Stop(ptr.Pointer())
	}
}

func (ptr *QAudioDecoderControl) DestroyQAudioDecoderControl() {
	defer qt.Recovering("QAudioDecoderControl::~QAudioDecoderControl")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DestroyQAudioDecoderControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioDecoderControl_TimerEvent
func callbackQAudioDecoderControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioDecoderControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioDecoderControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioDecoderControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::timerEvent", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioDecoderControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::timerEvent")
	}
}

func (ptr *QAudioDecoderControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioDecoderControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioDecoderControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioDecoderControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioDecoderControl_ChildEvent
func callbackQAudioDecoderControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioDecoderControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioDecoderControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioDecoderControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::childEvent", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioDecoderControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::childEvent")
	}
}

func (ptr *QAudioDecoderControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioDecoderControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioDecoderControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioDecoderControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioDecoderControl_ConnectNotify
func callbackQAudioDecoderControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioDecoderControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioDecoderControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioDecoderControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::connectNotify", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioDecoderControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::connectNotify")
	}
}

func (ptr *QAudioDecoderControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioDecoderControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioDecoderControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioDecoderControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioDecoderControl_CustomEvent
func callbackQAudioDecoderControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioDecoderControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioDecoderControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioDecoderControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::customEvent", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioDecoderControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::customEvent")
	}
}

func (ptr *QAudioDecoderControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioDecoderControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioDecoderControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioDecoderControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioDecoderControl_DeleteLater
func callbackQAudioDecoderControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioDecoderControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioDecoderControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioDecoderControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::deleteLater", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioDecoderControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::deleteLater")
	}
}

func (ptr *QAudioDecoderControl) DeleteLater() {
	defer qt.Recovering("QAudioDecoderControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioDecoderControl) DeleteLaterDefault() {
	defer qt.Recovering("QAudioDecoderControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioDecoderControl_DisconnectNotify
func callbackQAudioDecoderControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioDecoderControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioDecoderControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioDecoderControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioDecoderControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::disconnectNotify", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioDecoderControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::disconnectNotify")
	}
}

func (ptr *QAudioDecoderControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioDecoderControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioDecoderControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioDecoderControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioDecoderControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioDecoderControl_Event
func callbackQAudioDecoderControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioDecoderControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioDecoderControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioDecoderControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioDecoderControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::event", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioDecoderControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::event")
	}
}

func (ptr *QAudioDecoderControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioDecoderControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioDecoderControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioDecoderControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioDecoderControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioDecoderControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioDecoderControl_EventFilter
func callbackQAudioDecoderControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioDecoderControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioDecoderControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioDecoderControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioDecoderControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::eventFilter", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioDecoderControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::eventFilter")
	}
}

func (ptr *QAudioDecoderControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioDecoderControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioDecoderControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioDecoderControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioDecoderControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioDecoderControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioDecoderControl_MetaObject
func callbackQAudioDecoderControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioDecoderControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioDecoderControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioDecoderControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioDecoderControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioDecoderControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::metaObject", f)
	}
}

func (ptr *QAudioDecoderControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioDecoderControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioDecoderControl::metaObject")
	}
}

func (ptr *QAudioDecoderControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioDecoderControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioDecoderControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioDecoderControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioDecoderControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioDecoderControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAudioDeviceInfo struct {
	ptr unsafe.Pointer
}

type QAudioDeviceInfo_ITF interface {
	QAudioDeviceInfo_PTR() *QAudioDeviceInfo
}

func (p *QAudioDeviceInfo) QAudioDeviceInfo_PTR() *QAudioDeviceInfo {
	return p
}

func (p *QAudioDeviceInfo) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAudioDeviceInfo) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAudioDeviceInfo(ptr QAudioDeviceInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioDeviceInfo_PTR().Pointer()
	}
	return nil
}

func NewQAudioDeviceInfoFromPointer(ptr unsafe.Pointer) *QAudioDeviceInfo {
	var n = new(QAudioDeviceInfo)
	n.SetPointer(ptr)
	return n
}
func NewQAudioDeviceInfo() *QAudioDeviceInfo {
	defer qt.Recovering("QAudioDeviceInfo::QAudioDeviceInfo")

	var tmpValue = NewQAudioDeviceInfoFromPointer(C.QAudioDeviceInfo_NewQAudioDeviceInfo())
	runtime.SetFinalizer(tmpValue, (*QAudioDeviceInfo).DestroyQAudioDeviceInfo)
	return tmpValue
}

func NewQAudioDeviceInfo2(other QAudioDeviceInfo_ITF) *QAudioDeviceInfo {
	defer qt.Recovering("QAudioDeviceInfo::QAudioDeviceInfo")

	var tmpValue = NewQAudioDeviceInfoFromPointer(C.QAudioDeviceInfo_NewQAudioDeviceInfo2(PointerFromQAudioDeviceInfo(other)))
	runtime.SetFinalizer(tmpValue, (*QAudioDeviceInfo).DestroyQAudioDeviceInfo)
	return tmpValue
}

func QAudioDeviceInfo_DefaultInputDevice() *QAudioDeviceInfo {
	defer qt.Recovering("QAudioDeviceInfo::defaultInputDevice")

	var tmpValue = NewQAudioDeviceInfoFromPointer(C.QAudioDeviceInfo_QAudioDeviceInfo_DefaultInputDevice())
	runtime.SetFinalizer(tmpValue, (*QAudioDeviceInfo).DestroyQAudioDeviceInfo)
	return tmpValue
}

func (ptr *QAudioDeviceInfo) DefaultInputDevice() *QAudioDeviceInfo {
	defer qt.Recovering("QAudioDeviceInfo::defaultInputDevice")

	var tmpValue = NewQAudioDeviceInfoFromPointer(C.QAudioDeviceInfo_QAudioDeviceInfo_DefaultInputDevice())
	runtime.SetFinalizer(tmpValue, (*QAudioDeviceInfo).DestroyQAudioDeviceInfo)
	return tmpValue
}

func QAudioDeviceInfo_DefaultOutputDevice() *QAudioDeviceInfo {
	defer qt.Recovering("QAudioDeviceInfo::defaultOutputDevice")

	var tmpValue = NewQAudioDeviceInfoFromPointer(C.QAudioDeviceInfo_QAudioDeviceInfo_DefaultOutputDevice())
	runtime.SetFinalizer(tmpValue, (*QAudioDeviceInfo).DestroyQAudioDeviceInfo)
	return tmpValue
}

func (ptr *QAudioDeviceInfo) DefaultOutputDevice() *QAudioDeviceInfo {
	defer qt.Recovering("QAudioDeviceInfo::defaultOutputDevice")

	var tmpValue = NewQAudioDeviceInfoFromPointer(C.QAudioDeviceInfo_QAudioDeviceInfo_DefaultOutputDevice())
	runtime.SetFinalizer(tmpValue, (*QAudioDeviceInfo).DestroyQAudioDeviceInfo)
	return tmpValue
}

func (ptr *QAudioDeviceInfo) DeviceName() string {
	defer qt.Recovering("QAudioDeviceInfo::deviceName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioDeviceInfo_DeviceName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAudioDeviceInfo) IsFormatSupported(settings QAudioFormat_ITF) bool {
	defer qt.Recovering("QAudioDeviceInfo::isFormatSupported")

	if ptr.Pointer() != nil {
		return C.QAudioDeviceInfo_IsFormatSupported(ptr.Pointer(), PointerFromQAudioFormat(settings)) != 0
	}
	return false
}

func (ptr *QAudioDeviceInfo) IsNull() bool {
	defer qt.Recovering("QAudioDeviceInfo::isNull")

	if ptr.Pointer() != nil {
		return C.QAudioDeviceInfo_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAudioDeviceInfo) NearestFormat(settings QAudioFormat_ITF) *QAudioFormat {
	defer qt.Recovering("QAudioDeviceInfo::nearestFormat")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioFormatFromPointer(C.QAudioDeviceInfo_NearestFormat(ptr.Pointer(), PointerFromQAudioFormat(settings)))
		runtime.SetFinalizer(tmpValue, (*QAudioFormat).DestroyQAudioFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QAudioDeviceInfo) PreferredFormat() *QAudioFormat {
	defer qt.Recovering("QAudioDeviceInfo::preferredFormat")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioFormatFromPointer(C.QAudioDeviceInfo_PreferredFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioFormat).DestroyQAudioFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QAudioDeviceInfo) SupportedCodecs() []string {
	defer qt.Recovering("QAudioDeviceInfo::supportedCodecs")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QAudioDeviceInfo_SupportedCodecs(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QAudioDeviceInfo) DestroyQAudioDeviceInfo() {
	defer qt.Recovering("QAudioDeviceInfo::~QAudioDeviceInfo")

	if ptr.Pointer() != nil {
		C.QAudioDeviceInfo_DestroyQAudioDeviceInfo(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QAudioEncoderSettings struct {
	ptr unsafe.Pointer
}

type QAudioEncoderSettings_ITF interface {
	QAudioEncoderSettings_PTR() *QAudioEncoderSettings
}

func (p *QAudioEncoderSettings) QAudioEncoderSettings_PTR() *QAudioEncoderSettings {
	return p
}

func (p *QAudioEncoderSettings) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAudioEncoderSettings) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAudioEncoderSettings(ptr QAudioEncoderSettings_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioEncoderSettings_PTR().Pointer()
	}
	return nil
}

func NewQAudioEncoderSettingsFromPointer(ptr unsafe.Pointer) *QAudioEncoderSettings {
	var n = new(QAudioEncoderSettings)
	n.SetPointer(ptr)
	return n
}
func NewQAudioEncoderSettings() *QAudioEncoderSettings {
	defer qt.Recovering("QAudioEncoderSettings::QAudioEncoderSettings")

	var tmpValue = NewQAudioEncoderSettingsFromPointer(C.QAudioEncoderSettings_NewQAudioEncoderSettings())
	runtime.SetFinalizer(tmpValue, (*QAudioEncoderSettings).DestroyQAudioEncoderSettings)
	return tmpValue
}

func NewQAudioEncoderSettings2(other QAudioEncoderSettings_ITF) *QAudioEncoderSettings {
	defer qt.Recovering("QAudioEncoderSettings::QAudioEncoderSettings")

	var tmpValue = NewQAudioEncoderSettingsFromPointer(C.QAudioEncoderSettings_NewQAudioEncoderSettings2(PointerFromQAudioEncoderSettings(other)))
	runtime.SetFinalizer(tmpValue, (*QAudioEncoderSettings).DestroyQAudioEncoderSettings)
	return tmpValue
}

func (ptr *QAudioEncoderSettings) BitRate() int {
	defer qt.Recovering("QAudioEncoderSettings::bitRate")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioEncoderSettings_BitRate(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioEncoderSettings) ChannelCount() int {
	defer qt.Recovering("QAudioEncoderSettings::channelCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioEncoderSettings_ChannelCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioEncoderSettings) Codec() string {
	defer qt.Recovering("QAudioEncoderSettings::codec")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioEncoderSettings_Codec(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAudioEncoderSettings) EncodingMode() QMultimedia__EncodingMode {
	defer qt.Recovering("QAudioEncoderSettings::encodingMode")

	if ptr.Pointer() != nil {
		return QMultimedia__EncodingMode(C.QAudioEncoderSettings_EncodingMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioEncoderSettings) EncodingOption(option string) *core.QVariant {
	defer qt.Recovering("QAudioEncoderSettings::encodingOption")

	if ptr.Pointer() != nil {
		var optionC = C.CString(option)
		defer C.free(unsafe.Pointer(optionC))
		var tmpValue = core.NewQVariantFromPointer(C.QAudioEncoderSettings_EncodingOption(ptr.Pointer(), optionC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAudioEncoderSettings) IsNull() bool {
	defer qt.Recovering("QAudioEncoderSettings::isNull")

	if ptr.Pointer() != nil {
		return C.QAudioEncoderSettings_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAudioEncoderSettings) Quality() QMultimedia__EncodingQuality {
	defer qt.Recovering("QAudioEncoderSettings::quality")

	if ptr.Pointer() != nil {
		return QMultimedia__EncodingQuality(C.QAudioEncoderSettings_Quality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioEncoderSettings) SampleRate() int {
	defer qt.Recovering("QAudioEncoderSettings::sampleRate")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioEncoderSettings_SampleRate(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioEncoderSettings) SetBitRate(rate int) {
	defer qt.Recovering("QAudioEncoderSettings::setBitRate")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettings_SetBitRate(ptr.Pointer(), C.int(int32(rate)))
	}
}

func (ptr *QAudioEncoderSettings) SetChannelCount(channels int) {
	defer qt.Recovering("QAudioEncoderSettings::setChannelCount")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettings_SetChannelCount(ptr.Pointer(), C.int(int32(channels)))
	}
}

func (ptr *QAudioEncoderSettings) SetCodec(codec string) {
	defer qt.Recovering("QAudioEncoderSettings::setCodec")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		C.QAudioEncoderSettings_SetCodec(ptr.Pointer(), codecC)
	}
}

func (ptr *QAudioEncoderSettings) SetEncodingMode(mode QMultimedia__EncodingMode) {
	defer qt.Recovering("QAudioEncoderSettings::setEncodingMode")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettings_SetEncodingMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QAudioEncoderSettings) SetEncodingOption(option string, value core.QVariant_ITF) {
	defer qt.Recovering("QAudioEncoderSettings::setEncodingOption")

	if ptr.Pointer() != nil {
		var optionC = C.CString(option)
		defer C.free(unsafe.Pointer(optionC))
		C.QAudioEncoderSettings_SetEncodingOption(ptr.Pointer(), optionC, core.PointerFromQVariant(value))
	}
}

func (ptr *QAudioEncoderSettings) SetQuality(quality QMultimedia__EncodingQuality) {
	defer qt.Recovering("QAudioEncoderSettings::setQuality")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettings_SetQuality(ptr.Pointer(), C.longlong(quality))
	}
}

func (ptr *QAudioEncoderSettings) SetSampleRate(rate int) {
	defer qt.Recovering("QAudioEncoderSettings::setSampleRate")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettings_SetSampleRate(ptr.Pointer(), C.int(int32(rate)))
	}
}

func (ptr *QAudioEncoderSettings) DestroyQAudioEncoderSettings() {
	defer qt.Recovering("QAudioEncoderSettings::~QAudioEncoderSettings")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettings_DestroyQAudioEncoderSettings(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QAudioEncoderSettingsControl struct {
	QMediaControl
}

type QAudioEncoderSettingsControl_ITF interface {
	QMediaControl_ITF
	QAudioEncoderSettingsControl_PTR() *QAudioEncoderSettingsControl
}

func (p *QAudioEncoderSettingsControl) QAudioEncoderSettingsControl_PTR() *QAudioEncoderSettingsControl {
	return p
}

func (p *QAudioEncoderSettingsControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QAudioEncoderSettingsControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioEncoderSettingsControl(ptr QAudioEncoderSettingsControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioEncoderSettingsControl_PTR().Pointer()
	}
	return nil
}

func NewQAudioEncoderSettingsControlFromPointer(ptr unsafe.Pointer) *QAudioEncoderSettingsControl {
	var n = new(QAudioEncoderSettingsControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQAudioEncoderSettingsControl_AudioSettings
func callbackQAudioEncoderSettingsControl_AudioSettings(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::audioSettings")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::audioSettings"); signal != nil {
		return PointerFromQAudioEncoderSettings(signal.(func() *QAudioEncoderSettings)())
	}

	return PointerFromQAudioEncoderSettings(nil)
}

func (ptr *QAudioEncoderSettingsControl) ConnectAudioSettings(f func() *QAudioEncoderSettings) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::audioSettings")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::audioSettings", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectAudioSettings() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::audioSettings")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::audioSettings")
	}
}

func (ptr *QAudioEncoderSettingsControl) AudioSettings() *QAudioEncoderSettings {
	defer qt.Recovering("QAudioEncoderSettingsControl::audioSettings")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioEncoderSettingsFromPointer(C.QAudioEncoderSettingsControl_AudioSettings(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioEncoderSettings).DestroyQAudioEncoderSettings)
		return tmpValue
	}
	return nil
}

//export callbackQAudioEncoderSettingsControl_CodecDescription
func callbackQAudioEncoderSettingsControl_CodecDescription(ptr unsafe.Pointer, codec *C.char) *C.char {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::codecDescription")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::codecDescription"); signal != nil {
		return C.CString(signal.(func(string) string)(C.GoString(codec)))
	}

	return C.CString("")
}

func (ptr *QAudioEncoderSettingsControl) ConnectCodecDescription(f func(codec string) string) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::codecDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::codecDescription", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectCodecDescription(codec string) {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::codecDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::codecDescription")
	}
}

func (ptr *QAudioEncoderSettingsControl) CodecDescription(codec string) string {
	defer qt.Recovering("QAudioEncoderSettingsControl::codecDescription")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		return C.GoString(C.QAudioEncoderSettingsControl_CodecDescription(ptr.Pointer(), codecC))
	}
	return ""
}

//export callbackQAudioEncoderSettingsControl_SetAudioSettings
func callbackQAudioEncoderSettingsControl_SetAudioSettings(ptr unsafe.Pointer, settings unsafe.Pointer) {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::setAudioSettings")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::setAudioSettings"); signal != nil {
		signal.(func(*QAudioEncoderSettings))(NewQAudioEncoderSettingsFromPointer(settings))
	}

}

func (ptr *QAudioEncoderSettingsControl) ConnectSetAudioSettings(f func(settings *QAudioEncoderSettings)) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::setAudioSettings")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::setAudioSettings", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectSetAudioSettings(settings QAudioEncoderSettings_ITF) {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::setAudioSettings")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::setAudioSettings")
	}
}

func (ptr *QAudioEncoderSettingsControl) SetAudioSettings(settings QAudioEncoderSettings_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::setAudioSettings")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_SetAudioSettings(ptr.Pointer(), PointerFromQAudioEncoderSettings(settings))
	}
}

//export callbackQAudioEncoderSettingsControl_SupportedAudioCodecs
func callbackQAudioEncoderSettingsControl_SupportedAudioCodecs(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::supportedAudioCodecs")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::supportedAudioCodecs"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QAudioEncoderSettingsControl) ConnectSupportedAudioCodecs(f func() []string) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::supportedAudioCodecs")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::supportedAudioCodecs", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectSupportedAudioCodecs() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::supportedAudioCodecs")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::supportedAudioCodecs")
	}
}

func (ptr *QAudioEncoderSettingsControl) SupportedAudioCodecs() []string {
	defer qt.Recovering("QAudioEncoderSettingsControl::supportedAudioCodecs")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QAudioEncoderSettingsControl_SupportedAudioCodecs(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QAudioEncoderSettingsControl) DestroyQAudioEncoderSettingsControl() {
	defer qt.Recovering("QAudioEncoderSettingsControl::~QAudioEncoderSettingsControl")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_DestroyQAudioEncoderSettingsControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioEncoderSettingsControl_TimerEvent
func callbackQAudioEncoderSettingsControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioEncoderSettingsControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioEncoderSettingsControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::timerEvent", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::timerEvent")
	}
}

func (ptr *QAudioEncoderSettingsControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioEncoderSettingsControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioEncoderSettingsControl_ChildEvent
func callbackQAudioEncoderSettingsControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioEncoderSettingsControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioEncoderSettingsControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::childEvent", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::childEvent")
	}
}

func (ptr *QAudioEncoderSettingsControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioEncoderSettingsControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioEncoderSettingsControl_ConnectNotify
func callbackQAudioEncoderSettingsControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioEncoderSettingsControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioEncoderSettingsControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::connectNotify", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::connectNotify")
	}
}

func (ptr *QAudioEncoderSettingsControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioEncoderSettingsControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioEncoderSettingsControl_CustomEvent
func callbackQAudioEncoderSettingsControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioEncoderSettingsControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioEncoderSettingsControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::customEvent", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::customEvent")
	}
}

func (ptr *QAudioEncoderSettingsControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioEncoderSettingsControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioEncoderSettingsControl_DeleteLater
func callbackQAudioEncoderSettingsControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioEncoderSettingsControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioEncoderSettingsControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::deleteLater", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::deleteLater")
	}
}

func (ptr *QAudioEncoderSettingsControl) DeleteLater() {
	defer qt.Recovering("QAudioEncoderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioEncoderSettingsControl) DeleteLaterDefault() {
	defer qt.Recovering("QAudioEncoderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioEncoderSettingsControl_DisconnectNotify
func callbackQAudioEncoderSettingsControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioEncoderSettingsControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioEncoderSettingsControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::disconnectNotify", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::disconnectNotify")
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioEncoderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioEncoderSettingsControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioEncoderSettingsControl_Event
func callbackQAudioEncoderSettingsControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioEncoderSettingsControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioEncoderSettingsControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::event", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::event")
	}
}

func (ptr *QAudioEncoderSettingsControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioEncoderSettingsControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioEncoderSettingsControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioEncoderSettingsControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioEncoderSettingsControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioEncoderSettingsControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioEncoderSettingsControl_EventFilter
func callbackQAudioEncoderSettingsControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioEncoderSettingsControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioEncoderSettingsControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::eventFilter", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::eventFilter")
	}
}

func (ptr *QAudioEncoderSettingsControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioEncoderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioEncoderSettingsControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioEncoderSettingsControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioEncoderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioEncoderSettingsControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioEncoderSettingsControl_MetaObject
func callbackQAudioEncoderSettingsControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioEncoderSettingsControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioEncoderSettingsControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioEncoderSettingsControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioEncoderSettingsControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioEncoderSettingsControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::metaObject", f)
	}
}

func (ptr *QAudioEncoderSettingsControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioEncoderSettingsControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioEncoderSettingsControl::metaObject")
	}
}

func (ptr *QAudioEncoderSettingsControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioEncoderSettingsControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioEncoderSettingsControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioEncoderSettingsControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioEncoderSettingsControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioEncoderSettingsControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QAudioFormat::Endian
type QAudioFormat__Endian int64

const (
	QAudioFormat__BigEndian    = QAudioFormat__Endian(core.QSysInfo__BigEndian)
	QAudioFormat__LittleEndian = QAudioFormat__Endian(core.QSysInfo__LittleEndian)
)

//QAudioFormat::SampleType
type QAudioFormat__SampleType int64

const (
	QAudioFormat__Unknown     = QAudioFormat__SampleType(0)
	QAudioFormat__SignedInt   = QAudioFormat__SampleType(1)
	QAudioFormat__UnSignedInt = QAudioFormat__SampleType(2)
	QAudioFormat__Float       = QAudioFormat__SampleType(3)
)

type QAudioFormat struct {
	ptr unsafe.Pointer
}

type QAudioFormat_ITF interface {
	QAudioFormat_PTR() *QAudioFormat
}

func (p *QAudioFormat) QAudioFormat_PTR() *QAudioFormat {
	return p
}

func (p *QAudioFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAudioFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAudioFormat(ptr QAudioFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioFormat_PTR().Pointer()
	}
	return nil
}

func NewQAudioFormatFromPointer(ptr unsafe.Pointer) *QAudioFormat {
	var n = new(QAudioFormat)
	n.SetPointer(ptr)
	return n
}
func NewQAudioFormat() *QAudioFormat {
	defer qt.Recovering("QAudioFormat::QAudioFormat")

	var tmpValue = NewQAudioFormatFromPointer(C.QAudioFormat_NewQAudioFormat())
	runtime.SetFinalizer(tmpValue, (*QAudioFormat).DestroyQAudioFormat)
	return tmpValue
}

func NewQAudioFormat2(other QAudioFormat_ITF) *QAudioFormat {
	defer qt.Recovering("QAudioFormat::QAudioFormat")

	var tmpValue = NewQAudioFormatFromPointer(C.QAudioFormat_NewQAudioFormat2(PointerFromQAudioFormat(other)))
	runtime.SetFinalizer(tmpValue, (*QAudioFormat).DestroyQAudioFormat)
	return tmpValue
}

func (ptr *QAudioFormat) ByteOrder() QAudioFormat__Endian {
	defer qt.Recovering("QAudioFormat::byteOrder")

	if ptr.Pointer() != nil {
		return QAudioFormat__Endian(C.QAudioFormat_ByteOrder(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioFormat) BytesForDuration(duration int64) int {
	defer qt.Recovering("QAudioFormat::bytesForDuration")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioFormat_BytesForDuration(ptr.Pointer(), C.longlong(duration))))
	}
	return 0
}

func (ptr *QAudioFormat) BytesForFrames(frameCount int) int {
	defer qt.Recovering("QAudioFormat::bytesForFrames")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioFormat_BytesForFrames(ptr.Pointer(), C.int(int32(frameCount)))))
	}
	return 0
}

func (ptr *QAudioFormat) BytesPerFrame() int {
	defer qt.Recovering("QAudioFormat::bytesPerFrame")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioFormat_BytesPerFrame(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioFormat) ChannelCount() int {
	defer qt.Recovering("QAudioFormat::channelCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioFormat_ChannelCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioFormat) Codec() string {
	defer qt.Recovering("QAudioFormat::codec")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioFormat_Codec(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAudioFormat) DurationForBytes(bytes int) int64 {
	defer qt.Recovering("QAudioFormat::durationForBytes")

	if ptr.Pointer() != nil {
		return int64(C.QAudioFormat_DurationForBytes(ptr.Pointer(), C.int(int32(bytes))))
	}
	return 0
}

func (ptr *QAudioFormat) DurationForFrames(frameCount int) int64 {
	defer qt.Recovering("QAudioFormat::durationForFrames")

	if ptr.Pointer() != nil {
		return int64(C.QAudioFormat_DurationForFrames(ptr.Pointer(), C.int(int32(frameCount))))
	}
	return 0
}

func (ptr *QAudioFormat) FramesForBytes(byteCount int) int {
	defer qt.Recovering("QAudioFormat::framesForBytes")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioFormat_FramesForBytes(ptr.Pointer(), C.int(int32(byteCount)))))
	}
	return 0
}

func (ptr *QAudioFormat) FramesForDuration(duration int64) int {
	defer qt.Recovering("QAudioFormat::framesForDuration")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioFormat_FramesForDuration(ptr.Pointer(), C.longlong(duration))))
	}
	return 0
}

func (ptr *QAudioFormat) IsValid() bool {
	defer qt.Recovering("QAudioFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QAudioFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAudioFormat) SampleRate() int {
	defer qt.Recovering("QAudioFormat::sampleRate")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioFormat_SampleRate(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioFormat) SampleSize() int {
	defer qt.Recovering("QAudioFormat::sampleSize")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioFormat_SampleSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioFormat) SampleType() QAudioFormat__SampleType {
	defer qt.Recovering("QAudioFormat::sampleType")

	if ptr.Pointer() != nil {
		return QAudioFormat__SampleType(C.QAudioFormat_SampleType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioFormat) SetByteOrder(byteOrder QAudioFormat__Endian) {
	defer qt.Recovering("QAudioFormat::setByteOrder")

	if ptr.Pointer() != nil {
		C.QAudioFormat_SetByteOrder(ptr.Pointer(), C.longlong(byteOrder))
	}
}

func (ptr *QAudioFormat) SetChannelCount(channels int) {
	defer qt.Recovering("QAudioFormat::setChannelCount")

	if ptr.Pointer() != nil {
		C.QAudioFormat_SetChannelCount(ptr.Pointer(), C.int(int32(channels)))
	}
}

func (ptr *QAudioFormat) SetCodec(codec string) {
	defer qt.Recovering("QAudioFormat::setCodec")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		C.QAudioFormat_SetCodec(ptr.Pointer(), codecC)
	}
}

func (ptr *QAudioFormat) SetSampleRate(samplerate int) {
	defer qt.Recovering("QAudioFormat::setSampleRate")

	if ptr.Pointer() != nil {
		C.QAudioFormat_SetSampleRate(ptr.Pointer(), C.int(int32(samplerate)))
	}
}

func (ptr *QAudioFormat) SetSampleSize(sampleSize int) {
	defer qt.Recovering("QAudioFormat::setSampleSize")

	if ptr.Pointer() != nil {
		C.QAudioFormat_SetSampleSize(ptr.Pointer(), C.int(int32(sampleSize)))
	}
}

func (ptr *QAudioFormat) SetSampleType(sampleType QAudioFormat__SampleType) {
	defer qt.Recovering("QAudioFormat::setSampleType")

	if ptr.Pointer() != nil {
		C.QAudioFormat_SetSampleType(ptr.Pointer(), C.longlong(sampleType))
	}
}

func (ptr *QAudioFormat) DestroyQAudioFormat() {
	defer qt.Recovering("QAudioFormat::~QAudioFormat")

	if ptr.Pointer() != nil {
		C.QAudioFormat_DestroyQAudioFormat(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QAudioInput struct {
	core.QObject
}

type QAudioInput_ITF interface {
	core.QObject_ITF
	QAudioInput_PTR() *QAudioInput
}

func (p *QAudioInput) QAudioInput_PTR() *QAudioInput {
	return p
}

func (p *QAudioInput) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAudioInput) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioInput(ptr QAudioInput_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioInput_PTR().Pointer()
	}
	return nil
}

func NewQAudioInputFromPointer(ptr unsafe.Pointer) *QAudioInput {
	var n = new(QAudioInput)
	n.SetPointer(ptr)
	return n
}
func NewQAudioInput2(audioDevice QAudioDeviceInfo_ITF, format QAudioFormat_ITF, parent core.QObject_ITF) *QAudioInput {
	defer qt.Recovering("QAudioInput::QAudioInput")

	var tmpValue = NewQAudioInputFromPointer(C.QAudioInput_NewQAudioInput2(PointerFromQAudioDeviceInfo(audioDevice), PointerFromQAudioFormat(format), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQAudioInput(format QAudioFormat_ITF, parent core.QObject_ITF) *QAudioInput {
	defer qt.Recovering("QAudioInput::QAudioInput")

	var tmpValue = NewQAudioInputFromPointer(C.QAudioInput_NewQAudioInput(PointerFromQAudioFormat(format), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAudioInput) BufferSize() int {
	defer qt.Recovering("QAudioInput::bufferSize")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioInput_BufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioInput) BytesReady() int {
	defer qt.Recovering("QAudioInput::bytesReady")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioInput_BytesReady(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioInput) ElapsedUSecs() int64 {
	defer qt.Recovering("QAudioInput::elapsedUSecs")

	if ptr.Pointer() != nil {
		return int64(C.QAudioInput_ElapsedUSecs(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioInput) Error() QAudio__Error {
	defer qt.Recovering("QAudioInput::error")

	if ptr.Pointer() != nil {
		return QAudio__Error(C.QAudioInput_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioInput) Format() *QAudioFormat {
	defer qt.Recovering("QAudioInput::format")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioFormatFromPointer(C.QAudioInput_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioFormat).DestroyQAudioFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QAudioInput) NotifyInterval() int {
	defer qt.Recovering("QAudioInput::notifyInterval")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioInput_NotifyInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioInput) PeriodSize() int {
	defer qt.Recovering("QAudioInput::periodSize")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioInput_PeriodSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioInput) ProcessedUSecs() int64 {
	defer qt.Recovering("QAudioInput::processedUSecs")

	if ptr.Pointer() != nil {
		return int64(C.QAudioInput_ProcessedUSecs(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioInput) Reset() {
	defer qt.Recovering("QAudioInput::reset")

	if ptr.Pointer() != nil {
		C.QAudioInput_Reset(ptr.Pointer())
	}
}

func (ptr *QAudioInput) Resume() {
	defer qt.Recovering("QAudioInput::resume")

	if ptr.Pointer() != nil {
		C.QAudioInput_Resume(ptr.Pointer())
	}
}

func (ptr *QAudioInput) SetBufferSize(value int) {
	defer qt.Recovering("QAudioInput::setBufferSize")

	if ptr.Pointer() != nil {
		C.QAudioInput_SetBufferSize(ptr.Pointer(), C.int(int32(value)))
	}
}

func (ptr *QAudioInput) SetNotifyInterval(ms int) {
	defer qt.Recovering("QAudioInput::setNotifyInterval")

	if ptr.Pointer() != nil {
		C.QAudioInput_SetNotifyInterval(ptr.Pointer(), C.int(int32(ms)))
	}
}

func (ptr *QAudioInput) SetVolume(volume float64) {
	defer qt.Recovering("QAudioInput::setVolume")

	if ptr.Pointer() != nil {
		C.QAudioInput_SetVolume(ptr.Pointer(), C.double(volume))
	}
}

func (ptr *QAudioInput) Start2() *core.QIODevice {
	defer qt.Recovering("QAudioInput::start")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QAudioInput_Start2(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAudioInput) Start(device core.QIODevice_ITF) {
	defer qt.Recovering("QAudioInput::start")

	if ptr.Pointer() != nil {
		C.QAudioInput_Start(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QAudioInput) State() QAudio__State {
	defer qt.Recovering("QAudioInput::state")

	if ptr.Pointer() != nil {
		return QAudio__State(C.QAudioInput_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioInput_StateChanged
func callbackQAudioInput_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QAudioInput::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::stateChanged"); signal != nil {
		signal.(func(QAudio__State))(QAudio__State(state))
	}

}

func (ptr *QAudioInput) ConnectStateChanged(f func(state QAudio__State)) {
	defer qt.Recovering("connect QAudioInput::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioInput_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::stateChanged", f)
	}
}

func (ptr *QAudioInput) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QAudioInput::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioInput_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::stateChanged")
	}
}

func (ptr *QAudioInput) StateChanged(state QAudio__State) {
	defer qt.Recovering("QAudioInput::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioInput_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

func (ptr *QAudioInput) Stop() {
	defer qt.Recovering("QAudioInput::stop")

	if ptr.Pointer() != nil {
		C.QAudioInput_Stop(ptr.Pointer())
	}
}

func (ptr *QAudioInput) Suspend() {
	defer qt.Recovering("QAudioInput::suspend")

	if ptr.Pointer() != nil {
		C.QAudioInput_Suspend(ptr.Pointer())
	}
}

func (ptr *QAudioInput) Volume() float64 {
	defer qt.Recovering("QAudioInput::volume")

	if ptr.Pointer() != nil {
		return float64(C.QAudioInput_Volume(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioInput) DestroyQAudioInput() {
	defer qt.Recovering("QAudioInput::~QAudioInput")

	if ptr.Pointer() != nil {
		C.QAudioInput_DestroyQAudioInput(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioInput_TimerEvent
func callbackQAudioInput_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInput::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioInputFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioInput) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioInput::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::timerEvent", f)
	}
}

func (ptr *QAudioInput) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioInput::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::timerEvent")
	}
}

func (ptr *QAudioInput) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioInput::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioInput_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioInput) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioInput::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioInput_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioInput_ChildEvent
func callbackQAudioInput_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInput::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioInputFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioInput) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioInput::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::childEvent", f)
	}
}

func (ptr *QAudioInput) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioInput::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::childEvent")
	}
}

func (ptr *QAudioInput) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioInput::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioInput_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioInput) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioInput::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioInput_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioInput_ConnectNotify
func callbackQAudioInput_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInput::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioInputFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioInput) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioInput::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::connectNotify", f)
	}
}

func (ptr *QAudioInput) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioInput::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::connectNotify")
	}
}

func (ptr *QAudioInput) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioInput::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioInput_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioInput) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioInput::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioInput_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioInput_CustomEvent
func callbackQAudioInput_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInput::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioInputFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioInput) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioInput::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::customEvent", f)
	}
}

func (ptr *QAudioInput) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioInput::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::customEvent")
	}
}

func (ptr *QAudioInput) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioInput::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioInput_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioInput) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioInput::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioInput_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioInput_DeleteLater
func callbackQAudioInput_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInput::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioInputFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioInput) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioInput::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::deleteLater", f)
	}
}

func (ptr *QAudioInput) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioInput::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::deleteLater")
	}
}

func (ptr *QAudioInput) DeleteLater() {
	defer qt.Recovering("QAudioInput::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioInput_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioInput) DeleteLaterDefault() {
	defer qt.Recovering("QAudioInput::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioInput_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioInput_DisconnectNotify
func callbackQAudioInput_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInput::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioInputFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioInput) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioInput::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::disconnectNotify", f)
	}
}

func (ptr *QAudioInput) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioInput::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::disconnectNotify")
	}
}

func (ptr *QAudioInput) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioInput::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioInput_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioInput) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioInput::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioInput_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioInput_Event
func callbackQAudioInput_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioInput::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioInputFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioInput) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioInput::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::event", f)
	}
}

func (ptr *QAudioInput) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioInput::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::event")
	}
}

func (ptr *QAudioInput) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioInput::event")

	if ptr.Pointer() != nil {
		return C.QAudioInput_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioInput) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioInput::event")

	if ptr.Pointer() != nil {
		return C.QAudioInput_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioInput_EventFilter
func callbackQAudioInput_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioInput::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioInputFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioInput) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioInput::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::eventFilter", f)
	}
}

func (ptr *QAudioInput) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioInput::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::eventFilter")
	}
}

func (ptr *QAudioInput) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioInput::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioInput_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioInput) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioInput::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioInput_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioInput_MetaObject
func callbackQAudioInput_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioInput::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInput::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioInputFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioInput) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioInput::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::metaObject", f)
	}
}

func (ptr *QAudioInput) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioInput::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInput::metaObject")
	}
}

func (ptr *QAudioInput) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioInput::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioInput_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioInput) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioInput::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioInput_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAudioInputSelectorControl struct {
	QMediaControl
}

type QAudioInputSelectorControl_ITF interface {
	QMediaControl_ITF
	QAudioInputSelectorControl_PTR() *QAudioInputSelectorControl
}

func (p *QAudioInputSelectorControl) QAudioInputSelectorControl_PTR() *QAudioInputSelectorControl {
	return p
}

func (p *QAudioInputSelectorControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QAudioInputSelectorControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioInputSelectorControl(ptr QAudioInputSelectorControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioInputSelectorControl_PTR().Pointer()
	}
	return nil
}

func NewQAudioInputSelectorControlFromPointer(ptr unsafe.Pointer) *QAudioInputSelectorControl {
	var n = new(QAudioInputSelectorControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQAudioInputSelectorControl_ActiveInput
func callbackQAudioInputSelectorControl_ActiveInput(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QAudioInputSelectorControl::activeInput")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::activeInput"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QAudioInputSelectorControl) ConnectActiveInput(f func() string) {
	defer qt.Recovering("connect QAudioInputSelectorControl::activeInput")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::activeInput", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectActiveInput() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::activeInput")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::activeInput")
	}
}

func (ptr *QAudioInputSelectorControl) ActiveInput() string {
	defer qt.Recovering("QAudioInputSelectorControl::activeInput")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioInputSelectorControl_ActiveInput(ptr.Pointer()))
	}
	return ""
}

//export callbackQAudioInputSelectorControl_ActiveInputChanged
func callbackQAudioInputSelectorControl_ActiveInputChanged(ptr unsafe.Pointer, name *C.char) {
	defer qt.Recovering("callback QAudioInputSelectorControl::activeInputChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::activeInputChanged"); signal != nil {
		signal.(func(string))(C.GoString(name))
	}

}

func (ptr *QAudioInputSelectorControl) ConnectActiveInputChanged(f func(name string)) {
	defer qt.Recovering("connect QAudioInputSelectorControl::activeInputChanged")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_ConnectActiveInputChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::activeInputChanged", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectActiveInputChanged() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::activeInputChanged")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_DisconnectActiveInputChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::activeInputChanged")
	}
}

func (ptr *QAudioInputSelectorControl) ActiveInputChanged(name string) {
	defer qt.Recovering("QAudioInputSelectorControl::activeInputChanged")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QAudioInputSelectorControl_ActiveInputChanged(ptr.Pointer(), nameC)
	}
}

//export callbackQAudioInputSelectorControl_AvailableInputsChanged
func callbackQAudioInputSelectorControl_AvailableInputsChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInputSelectorControl::availableInputsChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::availableInputsChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioInputSelectorControl) ConnectAvailableInputsChanged(f func()) {
	defer qt.Recovering("connect QAudioInputSelectorControl::availableInputsChanged")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_ConnectAvailableInputsChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::availableInputsChanged", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectAvailableInputsChanged() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::availableInputsChanged")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_DisconnectAvailableInputsChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::availableInputsChanged")
	}
}

func (ptr *QAudioInputSelectorControl) AvailableInputsChanged() {
	defer qt.Recovering("QAudioInputSelectorControl::availableInputsChanged")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_AvailableInputsChanged(ptr.Pointer())
	}
}

//export callbackQAudioInputSelectorControl_DefaultInput
func callbackQAudioInputSelectorControl_DefaultInput(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QAudioInputSelectorControl::defaultInput")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::defaultInput"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QAudioInputSelectorControl) ConnectDefaultInput(f func() string) {
	defer qt.Recovering("connect QAudioInputSelectorControl::defaultInput")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::defaultInput", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectDefaultInput() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::defaultInput")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::defaultInput")
	}
}

func (ptr *QAudioInputSelectorControl) DefaultInput() string {
	defer qt.Recovering("QAudioInputSelectorControl::defaultInput")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioInputSelectorControl_DefaultInput(ptr.Pointer()))
	}
	return ""
}

//export callbackQAudioInputSelectorControl_InputDescription
func callbackQAudioInputSelectorControl_InputDescription(ptr unsafe.Pointer, name *C.char) *C.char {
	defer qt.Recovering("callback QAudioInputSelectorControl::inputDescription")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::inputDescription"); signal != nil {
		return C.CString(signal.(func(string) string)(C.GoString(name)))
	}

	return C.CString("")
}

func (ptr *QAudioInputSelectorControl) ConnectInputDescription(f func(name string) string) {
	defer qt.Recovering("connect QAudioInputSelectorControl::inputDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::inputDescription", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectInputDescription(name string) {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::inputDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::inputDescription")
	}
}

func (ptr *QAudioInputSelectorControl) InputDescription(name string) string {
	defer qt.Recovering("QAudioInputSelectorControl::inputDescription")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return C.GoString(C.QAudioInputSelectorControl_InputDescription(ptr.Pointer(), nameC))
	}
	return ""
}

//export callbackQAudioInputSelectorControl_SetActiveInput
func callbackQAudioInputSelectorControl_SetActiveInput(ptr unsafe.Pointer, name *C.char) {
	defer qt.Recovering("callback QAudioInputSelectorControl::setActiveInput")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::setActiveInput"); signal != nil {
		signal.(func(string))(C.GoString(name))
	}

}

func (ptr *QAudioInputSelectorControl) ConnectSetActiveInput(f func(name string)) {
	defer qt.Recovering("connect QAudioInputSelectorControl::setActiveInput")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::setActiveInput", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectSetActiveInput(name string) {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::setActiveInput")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::setActiveInput")
	}
}

func (ptr *QAudioInputSelectorControl) SetActiveInput(name string) {
	defer qt.Recovering("QAudioInputSelectorControl::setActiveInput")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QAudioInputSelectorControl_SetActiveInput(ptr.Pointer(), nameC)
	}
}

func (ptr *QAudioInputSelectorControl) DestroyQAudioInputSelectorControl() {
	defer qt.Recovering("QAudioInputSelectorControl::~QAudioInputSelectorControl")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_DestroyQAudioInputSelectorControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioInputSelectorControl_TimerEvent
func callbackQAudioInputSelectorControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInputSelectorControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioInputSelectorControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioInputSelectorControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioInputSelectorControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::timerEvent", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::timerEvent")
	}
}

func (ptr *QAudioInputSelectorControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioInputSelectorControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioInputSelectorControl_ChildEvent
func callbackQAudioInputSelectorControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInputSelectorControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioInputSelectorControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioInputSelectorControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioInputSelectorControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::childEvent", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::childEvent")
	}
}

func (ptr *QAudioInputSelectorControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioInputSelectorControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioInputSelectorControl_ConnectNotify
func callbackQAudioInputSelectorControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInputSelectorControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioInputSelectorControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioInputSelectorControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioInputSelectorControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::connectNotify", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::connectNotify")
	}
}

func (ptr *QAudioInputSelectorControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioInputSelectorControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioInputSelectorControl_CustomEvent
func callbackQAudioInputSelectorControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInputSelectorControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioInputSelectorControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioInputSelectorControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioInputSelectorControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::customEvent", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::customEvent")
	}
}

func (ptr *QAudioInputSelectorControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioInputSelectorControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioInputSelectorControl_DeleteLater
func callbackQAudioInputSelectorControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInputSelectorControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioInputSelectorControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioInputSelectorControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioInputSelectorControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::deleteLater", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::deleteLater")
	}
}

func (ptr *QAudioInputSelectorControl) DeleteLater() {
	defer qt.Recovering("QAudioInputSelectorControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioInputSelectorControl) DeleteLaterDefault() {
	defer qt.Recovering("QAudioInputSelectorControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioInputSelectorControl_DisconnectNotify
func callbackQAudioInputSelectorControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioInputSelectorControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioInputSelectorControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioInputSelectorControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioInputSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::disconnectNotify", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::disconnectNotify")
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioInputSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioInputSelectorControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioInputSelectorControl_Event
func callbackQAudioInputSelectorControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioInputSelectorControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioInputSelectorControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioInputSelectorControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioInputSelectorControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::event", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::event")
	}
}

func (ptr *QAudioInputSelectorControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioInputSelectorControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioInputSelectorControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioInputSelectorControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioInputSelectorControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioInputSelectorControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioInputSelectorControl_EventFilter
func callbackQAudioInputSelectorControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioInputSelectorControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioInputSelectorControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioInputSelectorControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioInputSelectorControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::eventFilter", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::eventFilter")
	}
}

func (ptr *QAudioInputSelectorControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioInputSelectorControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioInputSelectorControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioInputSelectorControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioInputSelectorControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioInputSelectorControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioInputSelectorControl_MetaObject
func callbackQAudioInputSelectorControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioInputSelectorControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioInputSelectorControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioInputSelectorControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioInputSelectorControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioInputSelectorControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::metaObject", f)
	}
}

func (ptr *QAudioInputSelectorControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioInputSelectorControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioInputSelectorControl::metaObject")
	}
}

func (ptr *QAudioInputSelectorControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioInputSelectorControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioInputSelectorControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioInputSelectorControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioInputSelectorControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioInputSelectorControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAudioOutput struct {
	core.QObject
}

type QAudioOutput_ITF interface {
	core.QObject_ITF
	QAudioOutput_PTR() *QAudioOutput
}

func (p *QAudioOutput) QAudioOutput_PTR() *QAudioOutput {
	return p
}

func (p *QAudioOutput) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAudioOutput) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioOutput(ptr QAudioOutput_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioOutput_PTR().Pointer()
	}
	return nil
}

func NewQAudioOutputFromPointer(ptr unsafe.Pointer) *QAudioOutput {
	var n = new(QAudioOutput)
	n.SetPointer(ptr)
	return n
}
func NewQAudioOutput2(audioDevice QAudioDeviceInfo_ITF, format QAudioFormat_ITF, parent core.QObject_ITF) *QAudioOutput {
	defer qt.Recovering("QAudioOutput::QAudioOutput")

	var tmpValue = NewQAudioOutputFromPointer(C.QAudioOutput_NewQAudioOutput2(PointerFromQAudioDeviceInfo(audioDevice), PointerFromQAudioFormat(format), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQAudioOutput(format QAudioFormat_ITF, parent core.QObject_ITF) *QAudioOutput {
	defer qt.Recovering("QAudioOutput::QAudioOutput")

	var tmpValue = NewQAudioOutputFromPointer(C.QAudioOutput_NewQAudioOutput(PointerFromQAudioFormat(format), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAudioOutput) BufferSize() int {
	defer qt.Recovering("QAudioOutput::bufferSize")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioOutput_BufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioOutput) BytesFree() int {
	defer qt.Recovering("QAudioOutput::bytesFree")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioOutput_BytesFree(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioOutput) Category() string {
	defer qt.Recovering("QAudioOutput::category")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioOutput_Category(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAudioOutput) ElapsedUSecs() int64 {
	defer qt.Recovering("QAudioOutput::elapsedUSecs")

	if ptr.Pointer() != nil {
		return int64(C.QAudioOutput_ElapsedUSecs(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioOutput) Error() QAudio__Error {
	defer qt.Recovering("QAudioOutput::error")

	if ptr.Pointer() != nil {
		return QAudio__Error(C.QAudioOutput_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioOutput) Format() *QAudioFormat {
	defer qt.Recovering("QAudioOutput::format")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioFormatFromPointer(C.QAudioOutput_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioFormat).DestroyQAudioFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QAudioOutput) NotifyInterval() int {
	defer qt.Recovering("QAudioOutput::notifyInterval")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioOutput_NotifyInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioOutput) PeriodSize() int {
	defer qt.Recovering("QAudioOutput::periodSize")

	if ptr.Pointer() != nil {
		return int(int32(C.QAudioOutput_PeriodSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAudioOutput) ProcessedUSecs() int64 {
	defer qt.Recovering("QAudioOutput::processedUSecs")

	if ptr.Pointer() != nil {
		return int64(C.QAudioOutput_ProcessedUSecs(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioOutput) Reset() {
	defer qt.Recovering("QAudioOutput::reset")

	if ptr.Pointer() != nil {
		C.QAudioOutput_Reset(ptr.Pointer())
	}
}

func (ptr *QAudioOutput) Resume() {
	defer qt.Recovering("QAudioOutput::resume")

	if ptr.Pointer() != nil {
		C.QAudioOutput_Resume(ptr.Pointer())
	}
}

func (ptr *QAudioOutput) SetBufferSize(value int) {
	defer qt.Recovering("QAudioOutput::setBufferSize")

	if ptr.Pointer() != nil {
		C.QAudioOutput_SetBufferSize(ptr.Pointer(), C.int(int32(value)))
	}
}

func (ptr *QAudioOutput) SetCategory(category string) {
	defer qt.Recovering("QAudioOutput::setCategory")

	if ptr.Pointer() != nil {
		var categoryC = C.CString(category)
		defer C.free(unsafe.Pointer(categoryC))
		C.QAudioOutput_SetCategory(ptr.Pointer(), categoryC)
	}
}

func (ptr *QAudioOutput) SetNotifyInterval(ms int) {
	defer qt.Recovering("QAudioOutput::setNotifyInterval")

	if ptr.Pointer() != nil {
		C.QAudioOutput_SetNotifyInterval(ptr.Pointer(), C.int(int32(ms)))
	}
}

func (ptr *QAudioOutput) SetVolume(volume float64) {
	defer qt.Recovering("QAudioOutput::setVolume")

	if ptr.Pointer() != nil {
		C.QAudioOutput_SetVolume(ptr.Pointer(), C.double(volume))
	}
}

func (ptr *QAudioOutput) Start2() *core.QIODevice {
	defer qt.Recovering("QAudioOutput::start")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QAudioOutput_Start2(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAudioOutput) Start(device core.QIODevice_ITF) {
	defer qt.Recovering("QAudioOutput::start")

	if ptr.Pointer() != nil {
		C.QAudioOutput_Start(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QAudioOutput) State() QAudio__State {
	defer qt.Recovering("QAudioOutput::state")

	if ptr.Pointer() != nil {
		return QAudio__State(C.QAudioOutput_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioOutput_StateChanged
func callbackQAudioOutput_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QAudioOutput::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::stateChanged"); signal != nil {
		signal.(func(QAudio__State))(QAudio__State(state))
	}

}

func (ptr *QAudioOutput) ConnectStateChanged(f func(state QAudio__State)) {
	defer qt.Recovering("connect QAudioOutput::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioOutput_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::stateChanged", f)
	}
}

func (ptr *QAudioOutput) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QAudioOutput::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioOutput_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::stateChanged")
	}
}

func (ptr *QAudioOutput) StateChanged(state QAudio__State) {
	defer qt.Recovering("QAudioOutput::stateChanged")

	if ptr.Pointer() != nil {
		C.QAudioOutput_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

func (ptr *QAudioOutput) Stop() {
	defer qt.Recovering("QAudioOutput::stop")

	if ptr.Pointer() != nil {
		C.QAudioOutput_Stop(ptr.Pointer())
	}
}

func (ptr *QAudioOutput) Suspend() {
	defer qt.Recovering("QAudioOutput::suspend")

	if ptr.Pointer() != nil {
		C.QAudioOutput_Suspend(ptr.Pointer())
	}
}

func (ptr *QAudioOutput) Volume() float64 {
	defer qt.Recovering("QAudioOutput::volume")

	if ptr.Pointer() != nil {
		return float64(C.QAudioOutput_Volume(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAudioOutput) DestroyQAudioOutput() {
	defer qt.Recovering("QAudioOutput::~QAudioOutput")

	if ptr.Pointer() != nil {
		C.QAudioOutput_DestroyQAudioOutput(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioOutput_TimerEvent
func callbackQAudioOutput_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutput::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioOutputFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioOutput) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioOutput::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::timerEvent", f)
	}
}

func (ptr *QAudioOutput) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioOutput::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::timerEvent")
	}
}

func (ptr *QAudioOutput) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioOutput::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutput_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioOutput) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioOutput::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutput_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioOutput_ChildEvent
func callbackQAudioOutput_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutput::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioOutputFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioOutput) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioOutput::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::childEvent", f)
	}
}

func (ptr *QAudioOutput) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioOutput::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::childEvent")
	}
}

func (ptr *QAudioOutput) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioOutput::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutput_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioOutput) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioOutput::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutput_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioOutput_ConnectNotify
func callbackQAudioOutput_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutput::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioOutputFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioOutput) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioOutput::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::connectNotify", f)
	}
}

func (ptr *QAudioOutput) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioOutput::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::connectNotify")
	}
}

func (ptr *QAudioOutput) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioOutput::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioOutput_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioOutput) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioOutput::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioOutput_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioOutput_CustomEvent
func callbackQAudioOutput_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutput::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioOutputFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioOutput) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioOutput::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::customEvent", f)
	}
}

func (ptr *QAudioOutput) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioOutput::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::customEvent")
	}
}

func (ptr *QAudioOutput) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioOutput::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutput_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioOutput) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioOutput::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutput_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioOutput_DeleteLater
func callbackQAudioOutput_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutput::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioOutputFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioOutput) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioOutput::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::deleteLater", f)
	}
}

func (ptr *QAudioOutput) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioOutput::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::deleteLater")
	}
}

func (ptr *QAudioOutput) DeleteLater() {
	defer qt.Recovering("QAudioOutput::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioOutput_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioOutput) DeleteLaterDefault() {
	defer qt.Recovering("QAudioOutput::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioOutput_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioOutput_DisconnectNotify
func callbackQAudioOutput_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutput::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioOutputFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioOutput) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioOutput::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::disconnectNotify", f)
	}
}

func (ptr *QAudioOutput) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioOutput::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::disconnectNotify")
	}
}

func (ptr *QAudioOutput) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioOutput::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioOutput_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioOutput) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioOutput::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioOutput_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioOutput_Event
func callbackQAudioOutput_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioOutput::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioOutputFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioOutput) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioOutput::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::event", f)
	}
}

func (ptr *QAudioOutput) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioOutput::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::event")
	}
}

func (ptr *QAudioOutput) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioOutput::event")

	if ptr.Pointer() != nil {
		return C.QAudioOutput_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioOutput) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioOutput::event")

	if ptr.Pointer() != nil {
		return C.QAudioOutput_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioOutput_EventFilter
func callbackQAudioOutput_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioOutput::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioOutputFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioOutput) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioOutput::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::eventFilter", f)
	}
}

func (ptr *QAudioOutput) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioOutput::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::eventFilter")
	}
}

func (ptr *QAudioOutput) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioOutput::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioOutput_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioOutput) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioOutput::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioOutput_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioOutput_MetaObject
func callbackQAudioOutput_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioOutput::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutput::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioOutputFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioOutput) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioOutput::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::metaObject", f)
	}
}

func (ptr *QAudioOutput) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioOutput::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutput::metaObject")
	}
}

func (ptr *QAudioOutput) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioOutput::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioOutput_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioOutput) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioOutput::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioOutput_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAudioOutputSelectorControl struct {
	QMediaControl
}

type QAudioOutputSelectorControl_ITF interface {
	QMediaControl_ITF
	QAudioOutputSelectorControl_PTR() *QAudioOutputSelectorControl
}

func (p *QAudioOutputSelectorControl) QAudioOutputSelectorControl_PTR() *QAudioOutputSelectorControl {
	return p
}

func (p *QAudioOutputSelectorControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QAudioOutputSelectorControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioOutputSelectorControl(ptr QAudioOutputSelectorControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioOutputSelectorControl_PTR().Pointer()
	}
	return nil
}

func NewQAudioOutputSelectorControlFromPointer(ptr unsafe.Pointer) *QAudioOutputSelectorControl {
	var n = new(QAudioOutputSelectorControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQAudioOutputSelectorControl_ActiveOutput
func callbackQAudioOutputSelectorControl_ActiveOutput(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QAudioOutputSelectorControl::activeOutput")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::activeOutput"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QAudioOutputSelectorControl) ConnectActiveOutput(f func() string) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::activeOutput")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::activeOutput", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectActiveOutput() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::activeOutput")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::activeOutput")
	}
}

func (ptr *QAudioOutputSelectorControl) ActiveOutput() string {
	defer qt.Recovering("QAudioOutputSelectorControl::activeOutput")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioOutputSelectorControl_ActiveOutput(ptr.Pointer()))
	}
	return ""
}

//export callbackQAudioOutputSelectorControl_ActiveOutputChanged
func callbackQAudioOutputSelectorControl_ActiveOutputChanged(ptr unsafe.Pointer, name *C.char) {
	defer qt.Recovering("callback QAudioOutputSelectorControl::activeOutputChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::activeOutputChanged"); signal != nil {
		signal.(func(string))(C.GoString(name))
	}

}

func (ptr *QAudioOutputSelectorControl) ConnectActiveOutputChanged(f func(name string)) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::activeOutputChanged")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_ConnectActiveOutputChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::activeOutputChanged", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectActiveOutputChanged() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::activeOutputChanged")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_DisconnectActiveOutputChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::activeOutputChanged")
	}
}

func (ptr *QAudioOutputSelectorControl) ActiveOutputChanged(name string) {
	defer qt.Recovering("QAudioOutputSelectorControl::activeOutputChanged")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QAudioOutputSelectorControl_ActiveOutputChanged(ptr.Pointer(), nameC)
	}
}

//export callbackQAudioOutputSelectorControl_AvailableOutputsChanged
func callbackQAudioOutputSelectorControl_AvailableOutputsChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutputSelectorControl::availableOutputsChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::availableOutputsChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioOutputSelectorControl) ConnectAvailableOutputsChanged(f func()) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::availableOutputsChanged")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_ConnectAvailableOutputsChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::availableOutputsChanged", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectAvailableOutputsChanged() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::availableOutputsChanged")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_DisconnectAvailableOutputsChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::availableOutputsChanged")
	}
}

func (ptr *QAudioOutputSelectorControl) AvailableOutputsChanged() {
	defer qt.Recovering("QAudioOutputSelectorControl::availableOutputsChanged")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_AvailableOutputsChanged(ptr.Pointer())
	}
}

//export callbackQAudioOutputSelectorControl_DefaultOutput
func callbackQAudioOutputSelectorControl_DefaultOutput(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QAudioOutputSelectorControl::defaultOutput")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::defaultOutput"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QAudioOutputSelectorControl) ConnectDefaultOutput(f func() string) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::defaultOutput")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::defaultOutput", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectDefaultOutput() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::defaultOutput")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::defaultOutput")
	}
}

func (ptr *QAudioOutputSelectorControl) DefaultOutput() string {
	defer qt.Recovering("QAudioOutputSelectorControl::defaultOutput")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioOutputSelectorControl_DefaultOutput(ptr.Pointer()))
	}
	return ""
}

//export callbackQAudioOutputSelectorControl_OutputDescription
func callbackQAudioOutputSelectorControl_OutputDescription(ptr unsafe.Pointer, name *C.char) *C.char {
	defer qt.Recovering("callback QAudioOutputSelectorControl::outputDescription")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::outputDescription"); signal != nil {
		return C.CString(signal.(func(string) string)(C.GoString(name)))
	}

	return C.CString("")
}

func (ptr *QAudioOutputSelectorControl) ConnectOutputDescription(f func(name string) string) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::outputDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::outputDescription", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectOutputDescription(name string) {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::outputDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::outputDescription")
	}
}

func (ptr *QAudioOutputSelectorControl) OutputDescription(name string) string {
	defer qt.Recovering("QAudioOutputSelectorControl::outputDescription")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return C.GoString(C.QAudioOutputSelectorControl_OutputDescription(ptr.Pointer(), nameC))
	}
	return ""
}

//export callbackQAudioOutputSelectorControl_SetActiveOutput
func callbackQAudioOutputSelectorControl_SetActiveOutput(ptr unsafe.Pointer, name *C.char) {
	defer qt.Recovering("callback QAudioOutputSelectorControl::setActiveOutput")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::setActiveOutput"); signal != nil {
		signal.(func(string))(C.GoString(name))
	}

}

func (ptr *QAudioOutputSelectorControl) ConnectSetActiveOutput(f func(name string)) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::setActiveOutput")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::setActiveOutput", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectSetActiveOutput(name string) {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::setActiveOutput")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::setActiveOutput")
	}
}

func (ptr *QAudioOutputSelectorControl) SetActiveOutput(name string) {
	defer qt.Recovering("QAudioOutputSelectorControl::setActiveOutput")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QAudioOutputSelectorControl_SetActiveOutput(ptr.Pointer(), nameC)
	}
}

func (ptr *QAudioOutputSelectorControl) DestroyQAudioOutputSelectorControl() {
	defer qt.Recovering("QAudioOutputSelectorControl::~QAudioOutputSelectorControl")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_DestroyQAudioOutputSelectorControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioOutputSelectorControl_TimerEvent
func callbackQAudioOutputSelectorControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutputSelectorControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioOutputSelectorControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioOutputSelectorControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::timerEvent", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::timerEvent")
	}
}

func (ptr *QAudioOutputSelectorControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioOutputSelectorControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioOutputSelectorControl_ChildEvent
func callbackQAudioOutputSelectorControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutputSelectorControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioOutputSelectorControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioOutputSelectorControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::childEvent", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::childEvent")
	}
}

func (ptr *QAudioOutputSelectorControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioOutputSelectorControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioOutputSelectorControl_ConnectNotify
func callbackQAudioOutputSelectorControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutputSelectorControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioOutputSelectorControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioOutputSelectorControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::connectNotify", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::connectNotify")
	}
}

func (ptr *QAudioOutputSelectorControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioOutputSelectorControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioOutputSelectorControl_CustomEvent
func callbackQAudioOutputSelectorControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutputSelectorControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioOutputSelectorControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioOutputSelectorControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::customEvent", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::customEvent")
	}
}

func (ptr *QAudioOutputSelectorControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioOutputSelectorControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioOutputSelectorControl_DeleteLater
func callbackQAudioOutputSelectorControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutputSelectorControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioOutputSelectorControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioOutputSelectorControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::deleteLater", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::deleteLater")
	}
}

func (ptr *QAudioOutputSelectorControl) DeleteLater() {
	defer qt.Recovering("QAudioOutputSelectorControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioOutputSelectorControl) DeleteLaterDefault() {
	defer qt.Recovering("QAudioOutputSelectorControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioOutputSelectorControl_DisconnectNotify
func callbackQAudioOutputSelectorControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioOutputSelectorControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioOutputSelectorControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioOutputSelectorControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::disconnectNotify", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::disconnectNotify")
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioOutputSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioOutputSelectorControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioOutputSelectorControl_Event
func callbackQAudioOutputSelectorControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioOutputSelectorControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioOutputSelectorControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioOutputSelectorControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::event", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::event")
	}
}

func (ptr *QAudioOutputSelectorControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioOutputSelectorControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioOutputSelectorControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioOutputSelectorControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioOutputSelectorControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioOutputSelectorControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioOutputSelectorControl_EventFilter
func callbackQAudioOutputSelectorControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioOutputSelectorControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioOutputSelectorControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioOutputSelectorControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::eventFilter", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::eventFilter")
	}
}

func (ptr *QAudioOutputSelectorControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioOutputSelectorControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioOutputSelectorControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioOutputSelectorControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioOutputSelectorControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioOutputSelectorControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioOutputSelectorControl_MetaObject
func callbackQAudioOutputSelectorControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioOutputSelectorControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioOutputSelectorControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioOutputSelectorControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioOutputSelectorControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioOutputSelectorControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::metaObject", f)
	}
}

func (ptr *QAudioOutputSelectorControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioOutputSelectorControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioOutputSelectorControl::metaObject")
	}
}

func (ptr *QAudioOutputSelectorControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioOutputSelectorControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioOutputSelectorControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioOutputSelectorControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioOutputSelectorControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioOutputSelectorControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAudioProbe struct {
	core.QObject
}

type QAudioProbe_ITF interface {
	core.QObject_ITF
	QAudioProbe_PTR() *QAudioProbe
}

func (p *QAudioProbe) QAudioProbe_PTR() *QAudioProbe {
	return p
}

func (p *QAudioProbe) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAudioProbe) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioProbe(ptr QAudioProbe_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioProbe_PTR().Pointer()
	}
	return nil
}

func NewQAudioProbeFromPointer(ptr unsafe.Pointer) *QAudioProbe {
	var n = new(QAudioProbe)
	n.SetPointer(ptr)
	return n
}
func NewQAudioProbe(parent core.QObject_ITF) *QAudioProbe {
	defer qt.Recovering("QAudioProbe::QAudioProbe")

	var tmpValue = NewQAudioProbeFromPointer(C.QAudioProbe_NewQAudioProbe(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAudioProbe_AudioBufferProbed
func callbackQAudioProbe_AudioBufferProbed(ptr unsafe.Pointer, buffer unsafe.Pointer) {
	defer qt.Recovering("callback QAudioProbe::audioBufferProbed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::audioBufferProbed"); signal != nil {
		signal.(func(*QAudioBuffer))(NewQAudioBufferFromPointer(buffer))
	}

}

func (ptr *QAudioProbe) ConnectAudioBufferProbed(f func(buffer *QAudioBuffer)) {
	defer qt.Recovering("connect QAudioProbe::audioBufferProbed")

	if ptr.Pointer() != nil {
		C.QAudioProbe_ConnectAudioBufferProbed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::audioBufferProbed", f)
	}
}

func (ptr *QAudioProbe) DisconnectAudioBufferProbed() {
	defer qt.Recovering("disconnect QAudioProbe::audioBufferProbed")

	if ptr.Pointer() != nil {
		C.QAudioProbe_DisconnectAudioBufferProbed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::audioBufferProbed")
	}
}

func (ptr *QAudioProbe) AudioBufferProbed(buffer QAudioBuffer_ITF) {
	defer qt.Recovering("QAudioProbe::audioBufferProbed")

	if ptr.Pointer() != nil {
		C.QAudioProbe_AudioBufferProbed(ptr.Pointer(), PointerFromQAudioBuffer(buffer))
	}
}

//export callbackQAudioProbe_Flush
func callbackQAudioProbe_Flush(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioProbe::flush")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::flush"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioProbe) ConnectFlush(f func()) {
	defer qt.Recovering("connect QAudioProbe::flush")

	if ptr.Pointer() != nil {
		C.QAudioProbe_ConnectFlush(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::flush", f)
	}
}

func (ptr *QAudioProbe) DisconnectFlush() {
	defer qt.Recovering("disconnect QAudioProbe::flush")

	if ptr.Pointer() != nil {
		C.QAudioProbe_DisconnectFlush(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::flush")
	}
}

func (ptr *QAudioProbe) Flush() {
	defer qt.Recovering("QAudioProbe::flush")

	if ptr.Pointer() != nil {
		C.QAudioProbe_Flush(ptr.Pointer())
	}
}

func (ptr *QAudioProbe) IsActive() bool {
	defer qt.Recovering("QAudioProbe::isActive")

	if ptr.Pointer() != nil {
		return C.QAudioProbe_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAudioProbe) SetSource(source QMediaObject_ITF) bool {
	defer qt.Recovering("QAudioProbe::setSource")

	if ptr.Pointer() != nil {
		return C.QAudioProbe_SetSource(ptr.Pointer(), PointerFromQMediaObject(source)) != 0
	}
	return false
}

func (ptr *QAudioProbe) SetSource2(mediaRecorder QMediaRecorder_ITF) bool {
	defer qt.Recovering("QAudioProbe::setSource")

	if ptr.Pointer() != nil {
		return C.QAudioProbe_SetSource2(ptr.Pointer(), PointerFromQMediaRecorder(mediaRecorder)) != 0
	}
	return false
}

func (ptr *QAudioProbe) DestroyQAudioProbe() {
	defer qt.Recovering("QAudioProbe::~QAudioProbe")

	if ptr.Pointer() != nil {
		C.QAudioProbe_DestroyQAudioProbe(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioProbe_TimerEvent
func callbackQAudioProbe_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioProbe::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioProbeFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioProbe) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioProbe::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::timerEvent", f)
	}
}

func (ptr *QAudioProbe) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioProbe::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::timerEvent")
	}
}

func (ptr *QAudioProbe) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioProbe::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioProbe_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioProbe) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioProbe::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioProbe_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioProbe_ChildEvent
func callbackQAudioProbe_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioProbe::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioProbeFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioProbe) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioProbe::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::childEvent", f)
	}
}

func (ptr *QAudioProbe) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioProbe::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::childEvent")
	}
}

func (ptr *QAudioProbe) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioProbe::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioProbe_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioProbe) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioProbe::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioProbe_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioProbe_ConnectNotify
func callbackQAudioProbe_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioProbe::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioProbeFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioProbe) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioProbe::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::connectNotify", f)
	}
}

func (ptr *QAudioProbe) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioProbe::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::connectNotify")
	}
}

func (ptr *QAudioProbe) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioProbe::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioProbe_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioProbe) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioProbe::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioProbe_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioProbe_CustomEvent
func callbackQAudioProbe_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioProbe::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioProbeFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioProbe) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioProbe::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::customEvent", f)
	}
}

func (ptr *QAudioProbe) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioProbe::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::customEvent")
	}
}

func (ptr *QAudioProbe) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioProbe::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioProbe_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioProbe) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioProbe::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioProbe_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioProbe_DeleteLater
func callbackQAudioProbe_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioProbe::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioProbeFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioProbe) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioProbe::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::deleteLater", f)
	}
}

func (ptr *QAudioProbe) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioProbe::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::deleteLater")
	}
}

func (ptr *QAudioProbe) DeleteLater() {
	defer qt.Recovering("QAudioProbe::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioProbe_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioProbe) DeleteLaterDefault() {
	defer qt.Recovering("QAudioProbe::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioProbe_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioProbe_DisconnectNotify
func callbackQAudioProbe_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioProbe::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioProbeFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioProbe) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioProbe::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::disconnectNotify", f)
	}
}

func (ptr *QAudioProbe) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioProbe::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::disconnectNotify")
	}
}

func (ptr *QAudioProbe) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioProbe::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioProbe_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioProbe) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioProbe::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioProbe_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioProbe_Event
func callbackQAudioProbe_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioProbe::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioProbeFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioProbe) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioProbe::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::event", f)
	}
}

func (ptr *QAudioProbe) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioProbe::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::event")
	}
}

func (ptr *QAudioProbe) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioProbe::event")

	if ptr.Pointer() != nil {
		return C.QAudioProbe_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioProbe) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioProbe::event")

	if ptr.Pointer() != nil {
		return C.QAudioProbe_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioProbe_EventFilter
func callbackQAudioProbe_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioProbe::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioProbeFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioProbe) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioProbe::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::eventFilter", f)
	}
}

func (ptr *QAudioProbe) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioProbe::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::eventFilter")
	}
}

func (ptr *QAudioProbe) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioProbe::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioProbe_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioProbe) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioProbe::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioProbe_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioProbe_MetaObject
func callbackQAudioProbe_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioProbe::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioProbe::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioProbeFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioProbe) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioProbe::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::metaObject", f)
	}
}

func (ptr *QAudioProbe) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioProbe::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioProbe::metaObject")
	}
}

func (ptr *QAudioProbe) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioProbe::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioProbe_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioProbe) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioProbe::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioProbe_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAudioRecorder struct {
	QMediaRecorder
}

type QAudioRecorder_ITF interface {
	QMediaRecorder_ITF
	QAudioRecorder_PTR() *QAudioRecorder
}

func (p *QAudioRecorder) QAudioRecorder_PTR() *QAudioRecorder {
	return p
}

func (p *QAudioRecorder) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaRecorder_PTR().Pointer()
	}
	return nil
}

func (p *QAudioRecorder) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaRecorder_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioRecorder(ptr QAudioRecorder_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioRecorder_PTR().Pointer()
	}
	return nil
}

func NewQAudioRecorderFromPointer(ptr unsafe.Pointer) *QAudioRecorder {
	var n = new(QAudioRecorder)
	n.SetPointer(ptr)
	return n
}
func NewQAudioRecorder(parent core.QObject_ITF) *QAudioRecorder {
	defer qt.Recovering("QAudioRecorder::QAudioRecorder")

	var tmpValue = NewQAudioRecorderFromPointer(C.QAudioRecorder_NewQAudioRecorder(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAudioRecorder) AudioInput() string {
	defer qt.Recovering("QAudioRecorder::audioInput")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioRecorder_AudioInput(ptr.Pointer()))
	}
	return ""
}

//export callbackQAudioRecorder_AudioInputChanged
func callbackQAudioRecorder_AudioInputChanged(ptr unsafe.Pointer, name *C.char) {
	defer qt.Recovering("callback QAudioRecorder::audioInputChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::audioInputChanged"); signal != nil {
		signal.(func(string))(C.GoString(name))
	}

}

func (ptr *QAudioRecorder) ConnectAudioInputChanged(f func(name string)) {
	defer qt.Recovering("connect QAudioRecorder::audioInputChanged")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_ConnectAudioInputChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::audioInputChanged", f)
	}
}

func (ptr *QAudioRecorder) DisconnectAudioInputChanged() {
	defer qt.Recovering("disconnect QAudioRecorder::audioInputChanged")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_DisconnectAudioInputChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::audioInputChanged")
	}
}

func (ptr *QAudioRecorder) AudioInputChanged(name string) {
	defer qt.Recovering("QAudioRecorder::audioInputChanged")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QAudioRecorder_AudioInputChanged(ptr.Pointer(), nameC)
	}
}

func (ptr *QAudioRecorder) AudioInputDescription(name string) string {
	defer qt.Recovering("QAudioRecorder::audioInputDescription")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return C.GoString(C.QAudioRecorder_AudioInputDescription(ptr.Pointer(), nameC))
	}
	return ""
}

func (ptr *QAudioRecorder) AudioInputs() []string {
	defer qt.Recovering("QAudioRecorder::audioInputs")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QAudioRecorder_AudioInputs(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQAudioRecorder_AvailableAudioInputsChanged
func callbackQAudioRecorder_AvailableAudioInputsChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::availableAudioInputsChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::availableAudioInputsChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAudioRecorder) ConnectAvailableAudioInputsChanged(f func()) {
	defer qt.Recovering("connect QAudioRecorder::availableAudioInputsChanged")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_ConnectAvailableAudioInputsChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::availableAudioInputsChanged", f)
	}
}

func (ptr *QAudioRecorder) DisconnectAvailableAudioInputsChanged() {
	defer qt.Recovering("disconnect QAudioRecorder::availableAudioInputsChanged")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_DisconnectAvailableAudioInputsChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::availableAudioInputsChanged")
	}
}

func (ptr *QAudioRecorder) AvailableAudioInputsChanged() {
	defer qt.Recovering("QAudioRecorder::availableAudioInputsChanged")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_AvailableAudioInputsChanged(ptr.Pointer())
	}
}

func (ptr *QAudioRecorder) DefaultAudioInput() string {
	defer qt.Recovering("QAudioRecorder::defaultAudioInput")

	if ptr.Pointer() != nil {
		return C.GoString(C.QAudioRecorder_DefaultAudioInput(ptr.Pointer()))
	}
	return ""
}

//export callbackQAudioRecorder_SetAudioInput
func callbackQAudioRecorder_SetAudioInput(ptr unsafe.Pointer, name *C.char) {
	defer qt.Recovering("callback QAudioRecorder::setAudioInput")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::setAudioInput"); signal != nil {
		signal.(func(string))(C.GoString(name))
	}

}

func (ptr *QAudioRecorder) ConnectSetAudioInput(f func(name string)) {
	defer qt.Recovering("connect QAudioRecorder::setAudioInput")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::setAudioInput", f)
	}
}

func (ptr *QAudioRecorder) DisconnectSetAudioInput(name string) {
	defer qt.Recovering("disconnect QAudioRecorder::setAudioInput")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::setAudioInput")
	}
}

func (ptr *QAudioRecorder) SetAudioInput(name string) {
	defer qt.Recovering("QAudioRecorder::setAudioInput")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QAudioRecorder_SetAudioInput(ptr.Pointer(), nameC)
	}
}

func (ptr *QAudioRecorder) DestroyQAudioRecorder() {
	defer qt.Recovering("QAudioRecorder::~QAudioRecorder")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_DestroyQAudioRecorder(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioRecorder_SetMuted
func callbackQAudioRecorder_SetMuted(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QAudioRecorder::setMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::setMuted"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	} else {
		NewQAudioRecorderFromPointer(ptr).SetMutedDefault(int8(muted) != 0)
	}
}

func (ptr *QAudioRecorder) ConnectSetMuted(f func(muted bool)) {
	defer qt.Recovering("connect QAudioRecorder::setMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::setMuted", f)
	}
}

func (ptr *QAudioRecorder) DisconnectSetMuted() {
	defer qt.Recovering("disconnect QAudioRecorder::setMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::setMuted")
	}
}

func (ptr *QAudioRecorder) SetMuted(muted bool) {
	defer qt.Recovering("QAudioRecorder::setMuted")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_SetMuted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

func (ptr *QAudioRecorder) SetMutedDefault(muted bool) {
	defer qt.Recovering("QAudioRecorder::setMuted")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_SetMutedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

//export callbackQAudioRecorder_SetVolume
func callbackQAudioRecorder_SetVolume(ptr unsafe.Pointer, volume C.double) {
	defer qt.Recovering("callback QAudioRecorder::setVolume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::setVolume"); signal != nil {
		signal.(func(float64))(float64(volume))
	} else {
		NewQAudioRecorderFromPointer(ptr).SetVolumeDefault(float64(volume))
	}
}

func (ptr *QAudioRecorder) ConnectSetVolume(f func(volume float64)) {
	defer qt.Recovering("connect QAudioRecorder::setVolume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::setVolume", f)
	}
}

func (ptr *QAudioRecorder) DisconnectSetVolume() {
	defer qt.Recovering("disconnect QAudioRecorder::setVolume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::setVolume")
	}
}

func (ptr *QAudioRecorder) SetVolume(volume float64) {
	defer qt.Recovering("QAudioRecorder::setVolume")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_SetVolume(ptr.Pointer(), C.double(volume))
	}
}

func (ptr *QAudioRecorder) SetVolumeDefault(volume float64) {
	defer qt.Recovering("QAudioRecorder::setVolume")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_SetVolumeDefault(ptr.Pointer(), C.double(volume))
	}
}

//export callbackQAudioRecorder_MediaObject
func callbackQAudioRecorder_MediaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioRecorder::mediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::mediaObject"); signal != nil {
		return PointerFromQMediaObject(signal.(func() *QMediaObject)())
	}

	return PointerFromQMediaObject(NewQAudioRecorderFromPointer(ptr).MediaObjectDefault())
}

func (ptr *QAudioRecorder) ConnectMediaObject(f func() *QMediaObject) {
	defer qt.Recovering("connect QAudioRecorder::mediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::mediaObject", f)
	}
}

func (ptr *QAudioRecorder) DisconnectMediaObject() {
	defer qt.Recovering("disconnect QAudioRecorder::mediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::mediaObject")
	}
}

func (ptr *QAudioRecorder) MediaObject() *QMediaObject {
	defer qt.Recovering("QAudioRecorder::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QAudioRecorder_MediaObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAudioRecorder) MediaObjectDefault() *QMediaObject {
	defer qt.Recovering("QAudioRecorder::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QAudioRecorder_MediaObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAudioRecorder_Pause
func callbackQAudioRecorder_Pause(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::pause")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::pause"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioRecorderFromPointer(ptr).PauseDefault()
	}
}

func (ptr *QAudioRecorder) ConnectPause(f func()) {
	defer qt.Recovering("connect QAudioRecorder::pause")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::pause", f)
	}
}

func (ptr *QAudioRecorder) DisconnectPause() {
	defer qt.Recovering("disconnect QAudioRecorder::pause")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::pause")
	}
}

func (ptr *QAudioRecorder) Pause() {
	defer qt.Recovering("QAudioRecorder::pause")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_Pause(ptr.Pointer())
	}
}

func (ptr *QAudioRecorder) PauseDefault() {
	defer qt.Recovering("QAudioRecorder::pause")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_PauseDefault(ptr.Pointer())
	}
}

//export callbackQAudioRecorder_Record
func callbackQAudioRecorder_Record(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::record")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::record"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioRecorderFromPointer(ptr).RecordDefault()
	}
}

func (ptr *QAudioRecorder) ConnectRecord(f func()) {
	defer qt.Recovering("connect QAudioRecorder::record")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::record", f)
	}
}

func (ptr *QAudioRecorder) DisconnectRecord() {
	defer qt.Recovering("disconnect QAudioRecorder::record")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::record")
	}
}

func (ptr *QAudioRecorder) Record() {
	defer qt.Recovering("QAudioRecorder::record")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_Record(ptr.Pointer())
	}
}

func (ptr *QAudioRecorder) RecordDefault() {
	defer qt.Recovering("QAudioRecorder::record")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_RecordDefault(ptr.Pointer())
	}
}

//export callbackQAudioRecorder_Stop
func callbackQAudioRecorder_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::stop"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioRecorderFromPointer(ptr).StopDefault()
	}
}

func (ptr *QAudioRecorder) ConnectStop(f func()) {
	defer qt.Recovering("connect QAudioRecorder::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::stop", f)
	}
}

func (ptr *QAudioRecorder) DisconnectStop() {
	defer qt.Recovering("disconnect QAudioRecorder::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::stop")
	}
}

func (ptr *QAudioRecorder) Stop() {
	defer qt.Recovering("QAudioRecorder::stop")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_Stop(ptr.Pointer())
	}
}

func (ptr *QAudioRecorder) StopDefault() {
	defer qt.Recovering("QAudioRecorder::stop")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_StopDefault(ptr.Pointer())
	}
}

//export callbackQAudioRecorder_TimerEvent
func callbackQAudioRecorder_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioRecorderFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioRecorder) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioRecorder::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::timerEvent", f)
	}
}

func (ptr *QAudioRecorder) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioRecorder::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::timerEvent")
	}
}

func (ptr *QAudioRecorder) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioRecorder::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioRecorder) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioRecorder::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioRecorder_ChildEvent
func callbackQAudioRecorder_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioRecorderFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioRecorder) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioRecorder::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::childEvent", f)
	}
}

func (ptr *QAudioRecorder) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioRecorder::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::childEvent")
	}
}

func (ptr *QAudioRecorder) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioRecorder::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioRecorder) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioRecorder::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioRecorder_ConnectNotify
func callbackQAudioRecorder_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioRecorderFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioRecorder) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioRecorder::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::connectNotify", f)
	}
}

func (ptr *QAudioRecorder) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioRecorder::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::connectNotify")
	}
}

func (ptr *QAudioRecorder) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioRecorder::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioRecorder) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioRecorder::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioRecorder_CustomEvent
func callbackQAudioRecorder_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioRecorderFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioRecorder) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioRecorder::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::customEvent", f)
	}
}

func (ptr *QAudioRecorder) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioRecorder::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::customEvent")
	}
}

func (ptr *QAudioRecorder) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioRecorder::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioRecorder) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioRecorder::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioRecorder_DeleteLater
func callbackQAudioRecorder_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioRecorderFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioRecorder) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioRecorder::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::deleteLater", f)
	}
}

func (ptr *QAudioRecorder) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioRecorder::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::deleteLater")
	}
}

func (ptr *QAudioRecorder) DeleteLater() {
	defer qt.Recovering("QAudioRecorder::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioRecorder) DeleteLaterDefault() {
	defer qt.Recovering("QAudioRecorder::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioRecorder_DisconnectNotify
func callbackQAudioRecorder_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRecorder::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioRecorderFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioRecorder) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioRecorder::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::disconnectNotify", f)
	}
}

func (ptr *QAudioRecorder) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioRecorder::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::disconnectNotify")
	}
}

func (ptr *QAudioRecorder) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioRecorder::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioRecorder) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioRecorder::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioRecorder_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioRecorder_Event
func callbackQAudioRecorder_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioRecorder::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioRecorderFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioRecorder) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioRecorder::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::event", f)
	}
}

func (ptr *QAudioRecorder) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioRecorder::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::event")
	}
}

func (ptr *QAudioRecorder) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioRecorder::event")

	if ptr.Pointer() != nil {
		return C.QAudioRecorder_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioRecorder) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioRecorder::event")

	if ptr.Pointer() != nil {
		return C.QAudioRecorder_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioRecorder_EventFilter
func callbackQAudioRecorder_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioRecorder::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioRecorderFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioRecorder) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioRecorder::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::eventFilter", f)
	}
}

func (ptr *QAudioRecorder) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioRecorder::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::eventFilter")
	}
}

func (ptr *QAudioRecorder) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioRecorder::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioRecorder_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioRecorder) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioRecorder::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioRecorder_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioRecorder_MetaObject
func callbackQAudioRecorder_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioRecorder::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioRecorderFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioRecorder) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioRecorder::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::metaObject", f)
	}
}

func (ptr *QAudioRecorder) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioRecorder::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::metaObject")
	}
}

func (ptr *QAudioRecorder) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioRecorder::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioRecorder_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioRecorder) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioRecorder::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioRecorder_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAudioRecorder_SetMediaObject
func callbackQAudioRecorder_SetMediaObject(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioRecorder::setMediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRecorder::setMediaObject"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMediaObject) bool)(NewQMediaObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioRecorderFromPointer(ptr).SetMediaObjectDefault(NewQMediaObjectFromPointer(object)))))
}

func (ptr *QAudioRecorder) ConnectSetMediaObject(f func(object *QMediaObject) bool) {
	defer qt.Recovering("connect QAudioRecorder::setMediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::setMediaObject", f)
	}
}

func (ptr *QAudioRecorder) DisconnectSetMediaObject() {
	defer qt.Recovering("disconnect QAudioRecorder::setMediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRecorder::setMediaObject")
	}
}

func (ptr *QAudioRecorder) SetMediaObject(object QMediaObject_ITF) bool {
	defer qt.Recovering("QAudioRecorder::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QAudioRecorder_SetMediaObject(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

func (ptr *QAudioRecorder) SetMediaObjectDefault(object QMediaObject_ITF) bool {
	defer qt.Recovering("QAudioRecorder::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QAudioRecorder_SetMediaObjectDefault(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

type QAudioRoleControl struct {
	QMediaControl
}

type QAudioRoleControl_ITF interface {
	QMediaControl_ITF
	QAudioRoleControl_PTR() *QAudioRoleControl
}

func (p *QAudioRoleControl) QAudioRoleControl_PTR() *QAudioRoleControl {
	return p
}

func (p *QAudioRoleControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QAudioRoleControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQAudioRoleControl(ptr QAudioRoleControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAudioRoleControl_PTR().Pointer()
	}
	return nil
}

func NewQAudioRoleControlFromPointer(ptr unsafe.Pointer) *QAudioRoleControl {
	var n = new(QAudioRoleControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQAudioRoleControl_AudioRole
func callbackQAudioRoleControl_AudioRole(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QAudioRoleControl::audioRole")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::audioRole"); signal != nil {
		return C.longlong(signal.(func() QAudio__Role)())
	}

	return C.longlong(0)
}

func (ptr *QAudioRoleControl) ConnectAudioRole(f func() QAudio__Role) {
	defer qt.Recovering("connect QAudioRoleControl::audioRole")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::audioRole", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectAudioRole() {
	defer qt.Recovering("disconnect QAudioRoleControl::audioRole")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::audioRole")
	}
}

func (ptr *QAudioRoleControl) AudioRole() QAudio__Role {
	defer qt.Recovering("QAudioRoleControl::audioRole")

	if ptr.Pointer() != nil {
		return QAudio__Role(C.QAudioRoleControl_AudioRole(ptr.Pointer()))
	}
	return 0
}

//export callbackQAudioRoleControl_AudioRoleChanged
func callbackQAudioRoleControl_AudioRoleChanged(ptr unsafe.Pointer, role C.longlong) {
	defer qt.Recovering("callback QAudioRoleControl::audioRoleChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::audioRoleChanged"); signal != nil {
		signal.(func(QAudio__Role))(QAudio__Role(role))
	}

}

func (ptr *QAudioRoleControl) ConnectAudioRoleChanged(f func(role QAudio__Role)) {
	defer qt.Recovering("connect QAudioRoleControl::audioRoleChanged")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_ConnectAudioRoleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::audioRoleChanged", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectAudioRoleChanged() {
	defer qt.Recovering("disconnect QAudioRoleControl::audioRoleChanged")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_DisconnectAudioRoleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::audioRoleChanged")
	}
}

func (ptr *QAudioRoleControl) AudioRoleChanged(role QAudio__Role) {
	defer qt.Recovering("QAudioRoleControl::audioRoleChanged")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_AudioRoleChanged(ptr.Pointer(), C.longlong(role))
	}
}

//export callbackQAudioRoleControl_SetAudioRole
func callbackQAudioRoleControl_SetAudioRole(ptr unsafe.Pointer, role C.longlong) {
	defer qt.Recovering("callback QAudioRoleControl::setAudioRole")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::setAudioRole"); signal != nil {
		signal.(func(QAudio__Role))(QAudio__Role(role))
	}

}

func (ptr *QAudioRoleControl) ConnectSetAudioRole(f func(role QAudio__Role)) {
	defer qt.Recovering("connect QAudioRoleControl::setAudioRole")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::setAudioRole", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectSetAudioRole(role QAudio__Role) {
	defer qt.Recovering("disconnect QAudioRoleControl::setAudioRole")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::setAudioRole")
	}
}

func (ptr *QAudioRoleControl) SetAudioRole(role QAudio__Role) {
	defer qt.Recovering("QAudioRoleControl::setAudioRole")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_SetAudioRole(ptr.Pointer(), C.longlong(role))
	}
}

func (ptr *QAudioRoleControl) DestroyQAudioRoleControl() {
	defer qt.Recovering("QAudioRoleControl::~QAudioRoleControl")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_DestroyQAudioRoleControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioRoleControl_TimerEvent
func callbackQAudioRoleControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRoleControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAudioRoleControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAudioRoleControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QAudioRoleControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::timerEvent", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QAudioRoleControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::timerEvent")
	}
}

func (ptr *QAudioRoleControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioRoleControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAudioRoleControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QAudioRoleControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAudioRoleControl_ChildEvent
func callbackQAudioRoleControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRoleControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAudioRoleControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAudioRoleControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QAudioRoleControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::childEvent", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QAudioRoleControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::childEvent")
	}
}

func (ptr *QAudioRoleControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioRoleControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAudioRoleControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QAudioRoleControl::childEvent")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAudioRoleControl_ConnectNotify
func callbackQAudioRoleControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRoleControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioRoleControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioRoleControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioRoleControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::connectNotify", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QAudioRoleControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::connectNotify")
	}
}

func (ptr *QAudioRoleControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioRoleControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioRoleControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioRoleControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioRoleControl_CustomEvent
func callbackQAudioRoleControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRoleControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAudioRoleControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAudioRoleControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QAudioRoleControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::customEvent", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QAudioRoleControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::customEvent")
	}
}

func (ptr *QAudioRoleControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioRoleControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAudioRoleControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QAudioRoleControl::customEvent")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAudioRoleControl_DeleteLater
func callbackQAudioRoleControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRoleControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAudioRoleControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAudioRoleControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QAudioRoleControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::deleteLater", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QAudioRoleControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::deleteLater")
	}
}

func (ptr *QAudioRoleControl) DeleteLater() {
	defer qt.Recovering("QAudioRoleControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAudioRoleControl) DeleteLaterDefault() {
	defer qt.Recovering("QAudioRoleControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAudioRoleControl_DisconnectNotify
func callbackQAudioRoleControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QAudioRoleControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAudioRoleControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAudioRoleControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QAudioRoleControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::disconnectNotify", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QAudioRoleControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::disconnectNotify")
	}
}

func (ptr *QAudioRoleControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioRoleControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAudioRoleControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QAudioRoleControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QAudioRoleControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAudioRoleControl_Event
func callbackQAudioRoleControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioRoleControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioRoleControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAudioRoleControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioRoleControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::event", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QAudioRoleControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::event")
	}
}

func (ptr *QAudioRoleControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioRoleControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioRoleControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAudioRoleControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioRoleControl::event")

	if ptr.Pointer() != nil {
		return C.QAudioRoleControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAudioRoleControl_EventFilter
func callbackQAudioRoleControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QAudioRoleControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAudioRoleControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAudioRoleControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QAudioRoleControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::eventFilter", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QAudioRoleControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::eventFilter")
	}
}

func (ptr *QAudioRoleControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioRoleControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioRoleControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAudioRoleControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QAudioRoleControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QAudioRoleControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAudioRoleControl_MetaObject
func callbackQAudioRoleControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QAudioRoleControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAudioRoleControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAudioRoleControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAudioRoleControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QAudioRoleControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::metaObject", f)
	}
}

func (ptr *QAudioRoleControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QAudioRoleControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAudioRoleControl::metaObject")
	}
}

func (ptr *QAudioRoleControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QAudioRoleControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioRoleControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAudioRoleControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QAudioRoleControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAudioRoleControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCamera::CaptureMode
type QCamera__CaptureMode int64

const (
	QCamera__CaptureViewfinder = QCamera__CaptureMode(0)
	QCamera__CaptureStillImage = QCamera__CaptureMode(0x01)
	QCamera__CaptureVideo      = QCamera__CaptureMode(0x02)
)

//QCamera::Error
type QCamera__Error int64

const (
	QCamera__NoError                  = QCamera__Error(0)
	QCamera__CameraError              = QCamera__Error(1)
	QCamera__InvalidRequestError      = QCamera__Error(2)
	QCamera__ServiceMissingError      = QCamera__Error(3)
	QCamera__NotSupportedFeatureError = QCamera__Error(4)
)

//QCamera::LockChangeReason
type QCamera__LockChangeReason int64

const (
	QCamera__UserRequest       = QCamera__LockChangeReason(0)
	QCamera__LockAcquired      = QCamera__LockChangeReason(1)
	QCamera__LockFailed        = QCamera__LockChangeReason(2)
	QCamera__LockLost          = QCamera__LockChangeReason(3)
	QCamera__LockTemporaryLost = QCamera__LockChangeReason(4)
)

//QCamera::LockStatus
type QCamera__LockStatus int64

const (
	QCamera__Unlocked  = QCamera__LockStatus(0)
	QCamera__Searching = QCamera__LockStatus(1)
	QCamera__Locked    = QCamera__LockStatus(2)
)

//QCamera::LockType
type QCamera__LockType int64

const (
	QCamera__NoLock           = QCamera__LockType(0)
	QCamera__LockExposure     = QCamera__LockType(0x01)
	QCamera__LockWhiteBalance = QCamera__LockType(0x02)
	QCamera__LockFocus        = QCamera__LockType(0x04)
)

//QCamera::Position
type QCamera__Position int64

const (
	QCamera__UnspecifiedPosition = QCamera__Position(0)
	QCamera__BackFace            = QCamera__Position(1)
	QCamera__FrontFace           = QCamera__Position(2)
)

//QCamera::State
type QCamera__State int64

const (
	QCamera__UnloadedState = QCamera__State(0)
	QCamera__LoadedState   = QCamera__State(1)
	QCamera__ActiveState   = QCamera__State(2)
)

//QCamera::Status
type QCamera__Status int64

const (
	QCamera__UnavailableStatus = QCamera__Status(0)
	QCamera__UnloadedStatus    = QCamera__Status(1)
	QCamera__LoadingStatus     = QCamera__Status(2)
	QCamera__UnloadingStatus   = QCamera__Status(3)
	QCamera__LoadedStatus      = QCamera__Status(4)
	QCamera__StandbyStatus     = QCamera__Status(5)
	QCamera__StartingStatus    = QCamera__Status(6)
	QCamera__StoppingStatus    = QCamera__Status(7)
	QCamera__ActiveStatus      = QCamera__Status(8)
)

type QCamera struct {
	QMediaObject
}

type QCamera_ITF interface {
	QMediaObject_ITF
	QCamera_PTR() *QCamera
}

func (p *QCamera) QCamera_PTR() *QCamera {
	return p
}

func (p *QCamera) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaObject_PTR().Pointer()
	}
	return nil
}

func (p *QCamera) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQCamera(ptr QCamera_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCamera_PTR().Pointer()
	}
	return nil
}

func NewQCameraFromPointer(ptr unsafe.Pointer) *QCamera {
	var n = new(QCamera)
	n.SetPointer(ptr)
	return n
}
func (ptr *QCamera) CaptureMode() QCamera__CaptureMode {
	defer qt.Recovering("QCamera::captureMode")

	if ptr.Pointer() != nil {
		return QCamera__CaptureMode(C.QCamera_CaptureMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQCamera_SearchAndLock2
func callbackQCamera_SearchAndLock2(ptr unsafe.Pointer, locks C.longlong) {
	defer qt.Recovering("callback QCamera::searchAndLock")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::searchAndLock2"); signal != nil {
		signal.(func(QCamera__LockType))(QCamera__LockType(locks))
	}

}

func (ptr *QCamera) ConnectSearchAndLock2(f func(locks QCamera__LockType)) {
	defer qt.Recovering("connect QCamera::searchAndLock")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::searchAndLock2", f)
	}
}

func (ptr *QCamera) DisconnectSearchAndLock2(locks QCamera__LockType) {
	defer qt.Recovering("disconnect QCamera::searchAndLock")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::searchAndLock2")
	}
}

func (ptr *QCamera) SearchAndLock2(locks QCamera__LockType) {
	defer qt.Recovering("QCamera::searchAndLock")

	if ptr.Pointer() != nil {
		C.QCamera_SearchAndLock2(ptr.Pointer(), C.longlong(locks))
	}
}

//export callbackQCamera_SetCaptureMode
func callbackQCamera_SetCaptureMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCamera::setCaptureMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::setCaptureMode"); signal != nil {
		signal.(func(QCamera__CaptureMode))(QCamera__CaptureMode(mode))
	}

}

func (ptr *QCamera) ConnectSetCaptureMode(f func(mode QCamera__CaptureMode)) {
	defer qt.Recovering("connect QCamera::setCaptureMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::setCaptureMode", f)
	}
}

func (ptr *QCamera) DisconnectSetCaptureMode(mode QCamera__CaptureMode) {
	defer qt.Recovering("disconnect QCamera::setCaptureMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::setCaptureMode")
	}
}

func (ptr *QCamera) SetCaptureMode(mode QCamera__CaptureMode) {
	defer qt.Recovering("QCamera::setCaptureMode")

	if ptr.Pointer() != nil {
		C.QCamera_SetCaptureMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QCamera) State() QCamera__State {
	defer qt.Recovering("QCamera::state")

	if ptr.Pointer() != nil {
		return QCamera__State(C.QCamera_State(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCamera) Status() QCamera__Status {
	defer qt.Recovering("QCamera::status")

	if ptr.Pointer() != nil {
		return QCamera__Status(C.QCamera_Status(ptr.Pointer()))
	}
	return 0
}

func NewQCamera4(position QCamera__Position, parent core.QObject_ITF) *QCamera {
	defer qt.Recovering("QCamera::QCamera")

	var tmpValue = NewQCameraFromPointer(C.QCamera_NewQCamera4(C.longlong(position), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQCamera(parent core.QObject_ITF) *QCamera {
	defer qt.Recovering("QCamera::QCamera")

	var tmpValue = NewQCameraFromPointer(C.QCamera_NewQCamera(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQCamera2(deviceName string, parent core.QObject_ITF) *QCamera {
	defer qt.Recovering("QCamera::QCamera")

	var deviceNameC = C.CString(hex.EncodeToString([]byte(deviceName)))
	defer C.free(unsafe.Pointer(deviceNameC))
	var tmpValue = NewQCameraFromPointer(C.QCamera_NewQCamera2(deviceNameC, core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQCamera3(cameraInfo QCameraInfo_ITF, parent core.QObject_ITF) *QCamera {
	defer qt.Recovering("QCamera::QCamera")

	var tmpValue = NewQCameraFromPointer(C.QCamera_NewQCamera3(PointerFromQCameraInfo(cameraInfo), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCamera_Availability
func callbackQCamera_Availability(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCamera::availability")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::availability"); signal != nil {
		return C.longlong(signal.(func() QMultimedia__AvailabilityStatus)())
	}

	return C.longlong(NewQCameraFromPointer(ptr).AvailabilityDefault())
}

func (ptr *QCamera) ConnectAvailability(f func() QMultimedia__AvailabilityStatus) {
	defer qt.Recovering("connect QCamera::availability")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::availability", f)
	}
}

func (ptr *QCamera) DisconnectAvailability() {
	defer qt.Recovering("disconnect QCamera::availability")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::availability")
	}
}

func (ptr *QCamera) Availability() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QCamera::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QCamera_Availability(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCamera) AvailabilityDefault() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QCamera::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QCamera_AvailabilityDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQCamera_CaptureModeChanged
func callbackQCamera_CaptureModeChanged(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCamera::captureModeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::captureModeChanged"); signal != nil {
		signal.(func(QCamera__CaptureMode))(QCamera__CaptureMode(mode))
	}

}

func (ptr *QCamera) ConnectCaptureModeChanged(f func(mode QCamera__CaptureMode)) {
	defer qt.Recovering("connect QCamera::captureModeChanged")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectCaptureModeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::captureModeChanged", f)
	}
}

func (ptr *QCamera) DisconnectCaptureModeChanged() {
	defer qt.Recovering("disconnect QCamera::captureModeChanged")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectCaptureModeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::captureModeChanged")
	}
}

func (ptr *QCamera) CaptureModeChanged(mode QCamera__CaptureMode) {
	defer qt.Recovering("QCamera::captureModeChanged")

	if ptr.Pointer() != nil {
		C.QCamera_CaptureModeChanged(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCamera_Error2
func callbackQCamera_Error2(ptr unsafe.Pointer, value C.longlong) {
	defer qt.Recovering("callback QCamera::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::error2"); signal != nil {
		signal.(func(QCamera__Error))(QCamera__Error(value))
	}

}

func (ptr *QCamera) ConnectError2(f func(value QCamera__Error)) {
	defer qt.Recovering("connect QCamera::error")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectError2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::error2", f)
	}
}

func (ptr *QCamera) DisconnectError2() {
	defer qt.Recovering("disconnect QCamera::error")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectError2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::error2")
	}
}

func (ptr *QCamera) Error2(value QCamera__Error) {
	defer qt.Recovering("QCamera::error")

	if ptr.Pointer() != nil {
		C.QCamera_Error2(ptr.Pointer(), C.longlong(value))
	}
}

func (ptr *QCamera) Error() QCamera__Error {
	defer qt.Recovering("QCamera::error")

	if ptr.Pointer() != nil {
		return QCamera__Error(C.QCamera_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCamera) ErrorString() string {
	defer qt.Recovering("QCamera::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QCamera_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QCamera) Exposure() *QCameraExposure {
	defer qt.Recovering("QCamera::exposure")

	if ptr.Pointer() != nil {
		var tmpValue = NewQCameraExposureFromPointer(C.QCamera_Exposure(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QCamera) Focus() *QCameraFocus {
	defer qt.Recovering("QCamera::focus")

	if ptr.Pointer() != nil {
		var tmpValue = NewQCameraFocusFromPointer(C.QCamera_Focus(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QCamera) ImageProcessing() *QCameraImageProcessing {
	defer qt.Recovering("QCamera::imageProcessing")

	if ptr.Pointer() != nil {
		var tmpValue = NewQCameraImageProcessingFromPointer(C.QCamera_ImageProcessing(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QCamera) IsCaptureModeSupported(mode QCamera__CaptureMode) bool {
	defer qt.Recovering("QCamera::isCaptureModeSupported")

	if ptr.Pointer() != nil {
		return C.QCamera_IsCaptureModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

//export callbackQCamera_Load
func callbackQCamera_Load(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::load")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::load"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCamera) ConnectLoad(f func()) {
	defer qt.Recovering("connect QCamera::load")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::load", f)
	}
}

func (ptr *QCamera) DisconnectLoad() {
	defer qt.Recovering("disconnect QCamera::load")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::load")
	}
}

func (ptr *QCamera) Load() {
	defer qt.Recovering("QCamera::load")

	if ptr.Pointer() != nil {
		C.QCamera_Load(ptr.Pointer())
	}
}

//export callbackQCamera_LockFailed
func callbackQCamera_LockFailed(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::lockFailed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::lockFailed"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCamera) ConnectLockFailed(f func()) {
	defer qt.Recovering("connect QCamera::lockFailed")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectLockFailed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::lockFailed", f)
	}
}

func (ptr *QCamera) DisconnectLockFailed() {
	defer qt.Recovering("disconnect QCamera::lockFailed")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectLockFailed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::lockFailed")
	}
}

func (ptr *QCamera) LockFailed() {
	defer qt.Recovering("QCamera::lockFailed")

	if ptr.Pointer() != nil {
		C.QCamera_LockFailed(ptr.Pointer())
	}
}

func (ptr *QCamera) LockStatus() QCamera__LockStatus {
	defer qt.Recovering("QCamera::lockStatus")

	if ptr.Pointer() != nil {
		return QCamera__LockStatus(C.QCamera_LockStatus(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCamera) LockStatus2(lockType QCamera__LockType) QCamera__LockStatus {
	defer qt.Recovering("QCamera::lockStatus")

	if ptr.Pointer() != nil {
		return QCamera__LockStatus(C.QCamera_LockStatus2(ptr.Pointer(), C.longlong(lockType)))
	}
	return 0
}

//export callbackQCamera_LockStatusChanged
func callbackQCamera_LockStatusChanged(ptr unsafe.Pointer, status C.longlong, reason C.longlong) {
	defer qt.Recovering("callback QCamera::lockStatusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::lockStatusChanged"); signal != nil {
		signal.(func(QCamera__LockStatus, QCamera__LockChangeReason))(QCamera__LockStatus(status), QCamera__LockChangeReason(reason))
	}

}

func (ptr *QCamera) ConnectLockStatusChanged(f func(status QCamera__LockStatus, reason QCamera__LockChangeReason)) {
	defer qt.Recovering("connect QCamera::lockStatusChanged")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectLockStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::lockStatusChanged", f)
	}
}

func (ptr *QCamera) DisconnectLockStatusChanged() {
	defer qt.Recovering("disconnect QCamera::lockStatusChanged")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectLockStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::lockStatusChanged")
	}
}

func (ptr *QCamera) LockStatusChanged(status QCamera__LockStatus, reason QCamera__LockChangeReason) {
	defer qt.Recovering("QCamera::lockStatusChanged")

	if ptr.Pointer() != nil {
		C.QCamera_LockStatusChanged(ptr.Pointer(), C.longlong(status), C.longlong(reason))
	}
}

//export callbackQCamera_LockStatusChanged2
func callbackQCamera_LockStatusChanged2(ptr unsafe.Pointer, lock C.longlong, status C.longlong, reason C.longlong) {
	defer qt.Recovering("callback QCamera::lockStatusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::lockStatusChanged2"); signal != nil {
		signal.(func(QCamera__LockType, QCamera__LockStatus, QCamera__LockChangeReason))(QCamera__LockType(lock), QCamera__LockStatus(status), QCamera__LockChangeReason(reason))
	}

}

func (ptr *QCamera) ConnectLockStatusChanged2(f func(lock QCamera__LockType, status QCamera__LockStatus, reason QCamera__LockChangeReason)) {
	defer qt.Recovering("connect QCamera::lockStatusChanged")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectLockStatusChanged2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::lockStatusChanged2", f)
	}
}

func (ptr *QCamera) DisconnectLockStatusChanged2() {
	defer qt.Recovering("disconnect QCamera::lockStatusChanged")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectLockStatusChanged2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::lockStatusChanged2")
	}
}

func (ptr *QCamera) LockStatusChanged2(lock QCamera__LockType, status QCamera__LockStatus, reason QCamera__LockChangeReason) {
	defer qt.Recovering("QCamera::lockStatusChanged")

	if ptr.Pointer() != nil {
		C.QCamera_LockStatusChanged2(ptr.Pointer(), C.longlong(lock), C.longlong(status), C.longlong(reason))
	}
}

//export callbackQCamera_Locked
func callbackQCamera_Locked(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::locked")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::locked"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCamera) ConnectLocked(f func()) {
	defer qt.Recovering("connect QCamera::locked")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectLocked(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::locked", f)
	}
}

func (ptr *QCamera) DisconnectLocked() {
	defer qt.Recovering("disconnect QCamera::locked")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectLocked(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::locked")
	}
}

func (ptr *QCamera) Locked() {
	defer qt.Recovering("QCamera::locked")

	if ptr.Pointer() != nil {
		C.QCamera_Locked(ptr.Pointer())
	}
}

func (ptr *QCamera) RequestedLocks() QCamera__LockType {
	defer qt.Recovering("QCamera::requestedLocks")

	if ptr.Pointer() != nil {
		return QCamera__LockType(C.QCamera_RequestedLocks(ptr.Pointer()))
	}
	return 0
}

//export callbackQCamera_SearchAndLock
func callbackQCamera_SearchAndLock(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::searchAndLock")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::searchAndLock"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCamera) ConnectSearchAndLock(f func()) {
	defer qt.Recovering("connect QCamera::searchAndLock")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::searchAndLock", f)
	}
}

func (ptr *QCamera) DisconnectSearchAndLock() {
	defer qt.Recovering("disconnect QCamera::searchAndLock")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::searchAndLock")
	}
}

func (ptr *QCamera) SearchAndLock() {
	defer qt.Recovering("QCamera::searchAndLock")

	if ptr.Pointer() != nil {
		C.QCamera_SearchAndLock(ptr.Pointer())
	}
}

func (ptr *QCamera) SetViewfinder3(surface QAbstractVideoSurface_ITF) {
	defer qt.Recovering("QCamera::setViewfinder")

	if ptr.Pointer() != nil {
		C.QCamera_SetViewfinder3(ptr.Pointer(), PointerFromQAbstractVideoSurface(surface))
	}
}

func (ptr *QCamera) SetViewfinder2(viewfinder QGraphicsVideoItem_ITF) {
	defer qt.Recovering("QCamera::setViewfinder")

	if ptr.Pointer() != nil {
		C.QCamera_SetViewfinder2(ptr.Pointer(), PointerFromQGraphicsVideoItem(viewfinder))
	}
}

func (ptr *QCamera) SetViewfinder(viewfinder QVideoWidget_ITF) {
	defer qt.Recovering("QCamera::setViewfinder")

	if ptr.Pointer() != nil {
		C.QCamera_SetViewfinder(ptr.Pointer(), PointerFromQVideoWidget(viewfinder))
	}
}

func (ptr *QCamera) SetViewfinderSettings(settings QCameraViewfinderSettings_ITF) {
	defer qt.Recovering("QCamera::setViewfinderSettings")

	if ptr.Pointer() != nil {
		C.QCamera_SetViewfinderSettings(ptr.Pointer(), PointerFromQCameraViewfinderSettings(settings))
	}
}

//export callbackQCamera_Start
func callbackQCamera_Start(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::start")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCamera) ConnectStart(f func()) {
	defer qt.Recovering("connect QCamera::start")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::start", f)
	}
}

func (ptr *QCamera) DisconnectStart() {
	defer qt.Recovering("disconnect QCamera::start")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::start")
	}
}

func (ptr *QCamera) Start() {
	defer qt.Recovering("QCamera::start")

	if ptr.Pointer() != nil {
		C.QCamera_Start(ptr.Pointer())
	}
}

//export callbackQCamera_StateChanged
func callbackQCamera_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QCamera::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::stateChanged"); signal != nil {
		signal.(func(QCamera__State))(QCamera__State(state))
	}

}

func (ptr *QCamera) ConnectStateChanged(f func(state QCamera__State)) {
	defer qt.Recovering("connect QCamera::stateChanged")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::stateChanged", f)
	}
}

func (ptr *QCamera) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QCamera::stateChanged")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::stateChanged")
	}
}

func (ptr *QCamera) StateChanged(state QCamera__State) {
	defer qt.Recovering("QCamera::stateChanged")

	if ptr.Pointer() != nil {
		C.QCamera_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQCamera_StatusChanged
func callbackQCamera_StatusChanged(ptr unsafe.Pointer, status C.longlong) {
	defer qt.Recovering("callback QCamera::statusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::statusChanged"); signal != nil {
		signal.(func(QCamera__Status))(QCamera__Status(status))
	}

}

func (ptr *QCamera) ConnectStatusChanged(f func(status QCamera__Status)) {
	defer qt.Recovering("connect QCamera::statusChanged")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::statusChanged", f)
	}
}

func (ptr *QCamera) DisconnectStatusChanged() {
	defer qt.Recovering("disconnect QCamera::statusChanged")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::statusChanged")
	}
}

func (ptr *QCamera) StatusChanged(status QCamera__Status) {
	defer qt.Recovering("QCamera::statusChanged")

	if ptr.Pointer() != nil {
		C.QCamera_StatusChanged(ptr.Pointer(), C.longlong(status))
	}
}

//export callbackQCamera_Stop
func callbackQCamera_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCamera) ConnectStop(f func()) {
	defer qt.Recovering("connect QCamera::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::stop", f)
	}
}

func (ptr *QCamera) DisconnectStop() {
	defer qt.Recovering("disconnect QCamera::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::stop")
	}
}

func (ptr *QCamera) Stop() {
	defer qt.Recovering("QCamera::stop")

	if ptr.Pointer() != nil {
		C.QCamera_Stop(ptr.Pointer())
	}
}

func (ptr *QCamera) SupportedLocks() QCamera__LockType {
	defer qt.Recovering("QCamera::supportedLocks")

	if ptr.Pointer() != nil {
		return QCamera__LockType(C.QCamera_SupportedLocks(ptr.Pointer()))
	}
	return 0
}

//export callbackQCamera_Unload
func callbackQCamera_Unload(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::unload")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::unload"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCamera) ConnectUnload(f func()) {
	defer qt.Recovering("connect QCamera::unload")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::unload", f)
	}
}

func (ptr *QCamera) DisconnectUnload() {
	defer qt.Recovering("disconnect QCamera::unload")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::unload")
	}
}

func (ptr *QCamera) Unload() {
	defer qt.Recovering("QCamera::unload")

	if ptr.Pointer() != nil {
		C.QCamera_Unload(ptr.Pointer())
	}
}

//export callbackQCamera_Unlock
func callbackQCamera_Unlock(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::unlock")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::unlock"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCamera) ConnectUnlock(f func()) {
	defer qt.Recovering("connect QCamera::unlock")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::unlock", f)
	}
}

func (ptr *QCamera) DisconnectUnlock() {
	defer qt.Recovering("disconnect QCamera::unlock")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::unlock")
	}
}

func (ptr *QCamera) Unlock() {
	defer qt.Recovering("QCamera::unlock")

	if ptr.Pointer() != nil {
		C.QCamera_Unlock(ptr.Pointer())
	}
}

//export callbackQCamera_Unlock2
func callbackQCamera_Unlock2(ptr unsafe.Pointer, locks C.longlong) {
	defer qt.Recovering("callback QCamera::unlock")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::unlock2"); signal != nil {
		signal.(func(QCamera__LockType))(QCamera__LockType(locks))
	}

}

func (ptr *QCamera) ConnectUnlock2(f func(locks QCamera__LockType)) {
	defer qt.Recovering("connect QCamera::unlock")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::unlock2", f)
	}
}

func (ptr *QCamera) DisconnectUnlock2(locks QCamera__LockType) {
	defer qt.Recovering("disconnect QCamera::unlock")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::unlock2")
	}
}

func (ptr *QCamera) Unlock2(locks QCamera__LockType) {
	defer qt.Recovering("QCamera::unlock")

	if ptr.Pointer() != nil {
		C.QCamera_Unlock2(ptr.Pointer(), C.longlong(locks))
	}
}

func (ptr *QCamera) ViewfinderSettings() *QCameraViewfinderSettings {
	defer qt.Recovering("QCamera::viewfinderSettings")

	if ptr.Pointer() != nil {
		var tmpValue = NewQCameraViewfinderSettingsFromPointer(C.QCamera_ViewfinderSettings(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QCameraViewfinderSettings).DestroyQCameraViewfinderSettings)
		return tmpValue
	}
	return nil
}

func (ptr *QCamera) DestroyQCamera() {
	defer qt.Recovering("QCamera::~QCamera")

	if ptr.Pointer() != nil {
		C.QCamera_DestroyQCamera(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCamera_Bind
func callbackQCamera_Bind(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCamera::bind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::bind"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject) bool)(core.NewQObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFromPointer(ptr).BindDefault(core.NewQObjectFromPointer(object)))))
}

func (ptr *QCamera) ConnectBind(f func(object *core.QObject) bool) {
	defer qt.Recovering("connect QCamera::bind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::bind", f)
	}
}

func (ptr *QCamera) DisconnectBind() {
	defer qt.Recovering("disconnect QCamera::bind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::bind")
	}
}

func (ptr *QCamera) Bind(object core.QObject_ITF) bool {
	defer qt.Recovering("QCamera::bind")

	if ptr.Pointer() != nil {
		return C.QCamera_Bind(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QCamera) BindDefault(object core.QObject_ITF) bool {
	defer qt.Recovering("QCamera::bind")

	if ptr.Pointer() != nil {
		return C.QCamera_BindDefault(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

//export callbackQCamera_IsAvailable
func callbackQCamera_IsAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCamera::isAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::isAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFromPointer(ptr).IsAvailableDefault())))
}

func (ptr *QCamera) ConnectIsAvailable(f func() bool) {
	defer qt.Recovering("connect QCamera::isAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::isAvailable", f)
	}
}

func (ptr *QCamera) DisconnectIsAvailable() {
	defer qt.Recovering("disconnect QCamera::isAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::isAvailable")
	}
}

func (ptr *QCamera) IsAvailable() bool {
	defer qt.Recovering("QCamera::isAvailable")

	if ptr.Pointer() != nil {
		return C.QCamera_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCamera) IsAvailableDefault() bool {
	defer qt.Recovering("QCamera::isAvailable")

	if ptr.Pointer() != nil {
		return C.QCamera_IsAvailableDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQCamera_Service
func callbackQCamera_Service(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCamera::service")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::service"); signal != nil {
		return PointerFromQMediaService(signal.(func() *QMediaService)())
	}

	return PointerFromQMediaService(NewQCameraFromPointer(ptr).ServiceDefault())
}

func (ptr *QCamera) ConnectService(f func() *QMediaService) {
	defer qt.Recovering("connect QCamera::service")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::service", f)
	}
}

func (ptr *QCamera) DisconnectService() {
	defer qt.Recovering("disconnect QCamera::service")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::service")
	}
}

func (ptr *QCamera) Service() *QMediaService {
	defer qt.Recovering("QCamera::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QCamera_Service(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QCamera) ServiceDefault() *QMediaService {
	defer qt.Recovering("QCamera::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QCamera_ServiceDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQCamera_Unbind
func callbackQCamera_Unbind(ptr unsafe.Pointer, object unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::unbind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::unbind"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(object))
	} else {
		NewQCameraFromPointer(ptr).UnbindDefault(core.NewQObjectFromPointer(object))
	}
}

func (ptr *QCamera) ConnectUnbind(f func(object *core.QObject)) {
	defer qt.Recovering("connect QCamera::unbind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::unbind", f)
	}
}

func (ptr *QCamera) DisconnectUnbind() {
	defer qt.Recovering("disconnect QCamera::unbind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::unbind")
	}
}

func (ptr *QCamera) Unbind(object core.QObject_ITF) {
	defer qt.Recovering("QCamera::unbind")

	if ptr.Pointer() != nil {
		C.QCamera_Unbind(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

func (ptr *QCamera) UnbindDefault(object core.QObject_ITF) {
	defer qt.Recovering("QCamera::unbind")

	if ptr.Pointer() != nil {
		C.QCamera_UnbindDefault(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

//export callbackQCamera_TimerEvent
func callbackQCamera_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCamera) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCamera::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::timerEvent", f)
	}
}

func (ptr *QCamera) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCamera::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::timerEvent")
	}
}

func (ptr *QCamera) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCamera::timerEvent")

	if ptr.Pointer() != nil {
		C.QCamera_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCamera) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCamera::timerEvent")

	if ptr.Pointer() != nil {
		C.QCamera_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCamera_ChildEvent
func callbackQCamera_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCamera) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCamera::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::childEvent", f)
	}
}

func (ptr *QCamera) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCamera::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::childEvent")
	}
}

func (ptr *QCamera) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCamera::childEvent")

	if ptr.Pointer() != nil {
		C.QCamera_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCamera) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCamera::childEvent")

	if ptr.Pointer() != nil {
		C.QCamera_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCamera_ConnectNotify
func callbackQCamera_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCamera) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCamera::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::connectNotify", f)
	}
}

func (ptr *QCamera) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCamera::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::connectNotify")
	}
}

func (ptr *QCamera) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCamera::connectNotify")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCamera) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCamera::connectNotify")

	if ptr.Pointer() != nil {
		C.QCamera_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCamera_CustomEvent
func callbackQCamera_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCamera) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCamera::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::customEvent", f)
	}
}

func (ptr *QCamera) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCamera::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::customEvent")
	}
}

func (ptr *QCamera) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCamera::customEvent")

	if ptr.Pointer() != nil {
		C.QCamera_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCamera) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCamera::customEvent")

	if ptr.Pointer() != nil {
		C.QCamera_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCamera_DeleteLater
func callbackQCamera_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCamera) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCamera::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::deleteLater", f)
	}
}

func (ptr *QCamera) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCamera::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::deleteLater")
	}
}

func (ptr *QCamera) DeleteLater() {
	defer qt.Recovering("QCamera::deleteLater")

	if ptr.Pointer() != nil {
		C.QCamera_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCamera) DeleteLaterDefault() {
	defer qt.Recovering("QCamera::deleteLater")

	if ptr.Pointer() != nil {
		C.QCamera_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCamera_DisconnectNotify
func callbackQCamera_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCamera::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCamera) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCamera::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::disconnectNotify", f)
	}
}

func (ptr *QCamera) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCamera::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::disconnectNotify")
	}
}

func (ptr *QCamera) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCamera::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCamera) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCamera::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCamera_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCamera_Event
func callbackQCamera_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCamera::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCamera) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCamera::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::event", f)
	}
}

func (ptr *QCamera) DisconnectEvent() {
	defer qt.Recovering("disconnect QCamera::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::event")
	}
}

func (ptr *QCamera) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCamera::event")

	if ptr.Pointer() != nil {
		return C.QCamera_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCamera) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCamera::event")

	if ptr.Pointer() != nil {
		return C.QCamera_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCamera_EventFilter
func callbackQCamera_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCamera::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCamera) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCamera::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::eventFilter", f)
	}
}

func (ptr *QCamera) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCamera::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::eventFilter")
	}
}

func (ptr *QCamera) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCamera::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCamera_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCamera) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCamera::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCamera_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCamera_MetaObject
func callbackQCamera_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCamera::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCamera::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCamera) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCamera::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::metaObject", f)
	}
}

func (ptr *QCamera) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCamera::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCamera::metaObject")
	}
}

func (ptr *QCamera) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCamera::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCamera_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCamera) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCamera::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCamera_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraCaptureBufferFormatControl struct {
	QMediaControl
}

type QCameraCaptureBufferFormatControl_ITF interface {
	QMediaControl_ITF
	QCameraCaptureBufferFormatControl_PTR() *QCameraCaptureBufferFormatControl
}

func (p *QCameraCaptureBufferFormatControl) QCameraCaptureBufferFormatControl_PTR() *QCameraCaptureBufferFormatControl {
	return p
}

func (p *QCameraCaptureBufferFormatControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraCaptureBufferFormatControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraCaptureBufferFormatControl(ptr QCameraCaptureBufferFormatControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraCaptureBufferFormatControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraCaptureBufferFormatControlFromPointer(ptr unsafe.Pointer) *QCameraCaptureBufferFormatControl {
	var n = new(QCameraCaptureBufferFormatControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQCameraCaptureBufferFormatControl_BufferFormat
func callbackQCameraCaptureBufferFormatControl_BufferFormat(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::bufferFormat")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::bufferFormat"); signal != nil {
		return C.longlong(signal.(func() QVideoFrame__PixelFormat)())
	}

	return C.longlong(0)
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectBufferFormat(f func() QVideoFrame__PixelFormat) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::bufferFormat")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::bufferFormat", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectBufferFormat() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::bufferFormat")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::bufferFormat")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) BufferFormat() QVideoFrame__PixelFormat {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::bufferFormat")

	if ptr.Pointer() != nil {
		return QVideoFrame__PixelFormat(C.QCameraCaptureBufferFormatControl_BufferFormat(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraCaptureBufferFormatControl_BufferFormatChanged
func callbackQCameraCaptureBufferFormatControl_BufferFormatChanged(ptr unsafe.Pointer, format C.longlong) {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::bufferFormatChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::bufferFormatChanged"); signal != nil {
		signal.(func(QVideoFrame__PixelFormat))(QVideoFrame__PixelFormat(format))
	}

}

func (ptr *QCameraCaptureBufferFormatControl) ConnectBufferFormatChanged(f func(format QVideoFrame__PixelFormat)) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::bufferFormatChanged")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_ConnectBufferFormatChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::bufferFormatChanged", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectBufferFormatChanged() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::bufferFormatChanged")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_DisconnectBufferFormatChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::bufferFormatChanged")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) BufferFormatChanged(format QVideoFrame__PixelFormat) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::bufferFormatChanged")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_BufferFormatChanged(ptr.Pointer(), C.longlong(format))
	}
}

//export callbackQCameraCaptureBufferFormatControl_SetBufferFormat
func callbackQCameraCaptureBufferFormatControl_SetBufferFormat(ptr unsafe.Pointer, format C.longlong) {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::setBufferFormat")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::setBufferFormat"); signal != nil {
		signal.(func(QVideoFrame__PixelFormat))(QVideoFrame__PixelFormat(format))
	}

}

func (ptr *QCameraCaptureBufferFormatControl) ConnectSetBufferFormat(f func(format QVideoFrame__PixelFormat)) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::setBufferFormat")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::setBufferFormat", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectSetBufferFormat(format QVideoFrame__PixelFormat) {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::setBufferFormat")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::setBufferFormat")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) SetBufferFormat(format QVideoFrame__PixelFormat) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::setBufferFormat")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_SetBufferFormat(ptr.Pointer(), C.longlong(format))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DestroyQCameraCaptureBufferFormatControl() {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::~QCameraCaptureBufferFormatControl")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_DestroyQCameraCaptureBufferFormatControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraCaptureBufferFormatControl_TimerEvent
func callbackQCameraCaptureBufferFormatControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraCaptureBufferFormatControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::timerEvent", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::timerEvent")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraCaptureBufferFormatControl_ChildEvent
func callbackQCameraCaptureBufferFormatControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraCaptureBufferFormatControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::childEvent", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::childEvent")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraCaptureBufferFormatControl_ConnectNotify
func callbackQCameraCaptureBufferFormatControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraCaptureBufferFormatControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::connectNotify", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::connectNotify")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraCaptureBufferFormatControl_CustomEvent
func callbackQCameraCaptureBufferFormatControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraCaptureBufferFormatControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::customEvent", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::customEvent")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraCaptureBufferFormatControl_DeleteLater
func callbackQCameraCaptureBufferFormatControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraCaptureBufferFormatControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::deleteLater", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::deleteLater")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DeleteLater() {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraCaptureBufferFormatControl_DisconnectNotify
func callbackQCameraCaptureBufferFormatControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraCaptureBufferFormatControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::disconnectNotify", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::disconnectNotify")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraCaptureBufferFormatControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraCaptureBufferFormatControl_Event
func callbackQCameraCaptureBufferFormatControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraCaptureBufferFormatControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::event", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::event")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraCaptureBufferFormatControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraCaptureBufferFormatControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraCaptureBufferFormatControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraCaptureBufferFormatControl_EventFilter
func callbackQCameraCaptureBufferFormatControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraCaptureBufferFormatControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::eventFilter", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::eventFilter")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraCaptureBufferFormatControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraCaptureBufferFormatControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraCaptureBufferFormatControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraCaptureBufferFormatControl_MetaObject
func callbackQCameraCaptureBufferFormatControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraCaptureBufferFormatControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureBufferFormatControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraCaptureBufferFormatControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraCaptureBufferFormatControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraCaptureBufferFormatControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::metaObject", f)
	}
}

func (ptr *QCameraCaptureBufferFormatControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraCaptureBufferFormatControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureBufferFormatControl::metaObject")
	}
}

func (ptr *QCameraCaptureBufferFormatControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraCaptureBufferFormatControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraCaptureBufferFormatControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraCaptureBufferFormatControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraCaptureBufferFormatControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraCaptureDestinationControl struct {
	QMediaControl
}

type QCameraCaptureDestinationControl_ITF interface {
	QMediaControl_ITF
	QCameraCaptureDestinationControl_PTR() *QCameraCaptureDestinationControl
}

func (p *QCameraCaptureDestinationControl) QCameraCaptureDestinationControl_PTR() *QCameraCaptureDestinationControl {
	return p
}

func (p *QCameraCaptureDestinationControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraCaptureDestinationControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraCaptureDestinationControl(ptr QCameraCaptureDestinationControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraCaptureDestinationControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraCaptureDestinationControlFromPointer(ptr unsafe.Pointer) *QCameraCaptureDestinationControl {
	var n = new(QCameraCaptureDestinationControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraCaptureDestinationControl(parent core.QObject_ITF) *QCameraCaptureDestinationControl {
	defer qt.Recovering("QCameraCaptureDestinationControl::QCameraCaptureDestinationControl")

	var tmpValue = NewQCameraCaptureDestinationControlFromPointer(C.QCameraCaptureDestinationControl_NewQCameraCaptureDestinationControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraCaptureDestinationControl_CaptureDestination
func callbackQCameraCaptureDestinationControl_CaptureDestination(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::captureDestination")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::captureDestination"); signal != nil {
		return C.longlong(signal.(func() QCameraImageCapture__CaptureDestination)())
	}

	return C.longlong(0)
}

func (ptr *QCameraCaptureDestinationControl) ConnectCaptureDestination(f func() QCameraImageCapture__CaptureDestination) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::captureDestination")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::captureDestination", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectCaptureDestination() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::captureDestination")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::captureDestination")
	}
}

func (ptr *QCameraCaptureDestinationControl) CaptureDestination() QCameraImageCapture__CaptureDestination {
	defer qt.Recovering("QCameraCaptureDestinationControl::captureDestination")

	if ptr.Pointer() != nil {
		return QCameraImageCapture__CaptureDestination(C.QCameraCaptureDestinationControl_CaptureDestination(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraCaptureDestinationControl_CaptureDestinationChanged
func callbackQCameraCaptureDestinationControl_CaptureDestinationChanged(ptr unsafe.Pointer, destination C.longlong) {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::captureDestinationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::captureDestinationChanged"); signal != nil {
		signal.(func(QCameraImageCapture__CaptureDestination))(QCameraImageCapture__CaptureDestination(destination))
	}

}

func (ptr *QCameraCaptureDestinationControl) ConnectCaptureDestinationChanged(f func(destination QCameraImageCapture__CaptureDestination)) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::captureDestinationChanged")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_ConnectCaptureDestinationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::captureDestinationChanged", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectCaptureDestinationChanged() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::captureDestinationChanged")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_DisconnectCaptureDestinationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::captureDestinationChanged")
	}
}

func (ptr *QCameraCaptureDestinationControl) CaptureDestinationChanged(destination QCameraImageCapture__CaptureDestination) {
	defer qt.Recovering("QCameraCaptureDestinationControl::captureDestinationChanged")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_CaptureDestinationChanged(ptr.Pointer(), C.longlong(destination))
	}
}

//export callbackQCameraCaptureDestinationControl_IsCaptureDestinationSupported
func callbackQCameraCaptureDestinationControl_IsCaptureDestinationSupported(ptr unsafe.Pointer, destination C.longlong) C.char {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::isCaptureDestinationSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::isCaptureDestinationSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraImageCapture__CaptureDestination) bool)(QCameraImageCapture__CaptureDestination(destination)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraCaptureDestinationControl) ConnectIsCaptureDestinationSupported(f func(destination QCameraImageCapture__CaptureDestination) bool) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::isCaptureDestinationSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::isCaptureDestinationSupported", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectIsCaptureDestinationSupported(destination QCameraImageCapture__CaptureDestination) {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::isCaptureDestinationSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::isCaptureDestinationSupported")
	}
}

func (ptr *QCameraCaptureDestinationControl) IsCaptureDestinationSupported(destination QCameraImageCapture__CaptureDestination) bool {
	defer qt.Recovering("QCameraCaptureDestinationControl::isCaptureDestinationSupported")

	if ptr.Pointer() != nil {
		return C.QCameraCaptureDestinationControl_IsCaptureDestinationSupported(ptr.Pointer(), C.longlong(destination)) != 0
	}
	return false
}

//export callbackQCameraCaptureDestinationControl_SetCaptureDestination
func callbackQCameraCaptureDestinationControl_SetCaptureDestination(ptr unsafe.Pointer, destination C.longlong) {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::setCaptureDestination")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::setCaptureDestination"); signal != nil {
		signal.(func(QCameraImageCapture__CaptureDestination))(QCameraImageCapture__CaptureDestination(destination))
	}

}

func (ptr *QCameraCaptureDestinationControl) ConnectSetCaptureDestination(f func(destination QCameraImageCapture__CaptureDestination)) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::setCaptureDestination")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::setCaptureDestination", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectSetCaptureDestination(destination QCameraImageCapture__CaptureDestination) {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::setCaptureDestination")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::setCaptureDestination")
	}
}

func (ptr *QCameraCaptureDestinationControl) SetCaptureDestination(destination QCameraImageCapture__CaptureDestination) {
	defer qt.Recovering("QCameraCaptureDestinationControl::setCaptureDestination")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_SetCaptureDestination(ptr.Pointer(), C.longlong(destination))
	}
}

func (ptr *QCameraCaptureDestinationControl) DestroyQCameraCaptureDestinationControl() {
	defer qt.Recovering("QCameraCaptureDestinationControl::~QCameraCaptureDestinationControl")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_DestroyQCameraCaptureDestinationControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraCaptureDestinationControl_TimerEvent
func callbackQCameraCaptureDestinationControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraCaptureDestinationControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraCaptureDestinationControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::timerEvent", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::timerEvent")
	}
}

func (ptr *QCameraCaptureDestinationControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraCaptureDestinationControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraCaptureDestinationControl_ChildEvent
func callbackQCameraCaptureDestinationControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraCaptureDestinationControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraCaptureDestinationControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::childEvent", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::childEvent")
	}
}

func (ptr *QCameraCaptureDestinationControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraCaptureDestinationControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraCaptureDestinationControl_ConnectNotify
func callbackQCameraCaptureDestinationControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraCaptureDestinationControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraCaptureDestinationControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::connectNotify", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::connectNotify")
	}
}

func (ptr *QCameraCaptureDestinationControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraCaptureDestinationControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraCaptureDestinationControl_CustomEvent
func callbackQCameraCaptureDestinationControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraCaptureDestinationControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraCaptureDestinationControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::customEvent", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::customEvent")
	}
}

func (ptr *QCameraCaptureDestinationControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraCaptureDestinationControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraCaptureDestinationControl_DeleteLater
func callbackQCameraCaptureDestinationControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraCaptureDestinationControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraCaptureDestinationControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::deleteLater", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::deleteLater")
	}
}

func (ptr *QCameraCaptureDestinationControl) DeleteLater() {
	defer qt.Recovering("QCameraCaptureDestinationControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraCaptureDestinationControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraCaptureDestinationControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraCaptureDestinationControl_DisconnectNotify
func callbackQCameraCaptureDestinationControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraCaptureDestinationControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraCaptureDestinationControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::disconnectNotify", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::disconnectNotify")
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraCaptureDestinationControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraCaptureDestinationControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraCaptureDestinationControl_Event
func callbackQCameraCaptureDestinationControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraCaptureDestinationControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraCaptureDestinationControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::event", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::event")
	}
}

func (ptr *QCameraCaptureDestinationControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraCaptureDestinationControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraCaptureDestinationControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraCaptureDestinationControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraCaptureDestinationControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraCaptureDestinationControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraCaptureDestinationControl_EventFilter
func callbackQCameraCaptureDestinationControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraCaptureDestinationControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraCaptureDestinationControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::eventFilter", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::eventFilter")
	}
}

func (ptr *QCameraCaptureDestinationControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraCaptureDestinationControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraCaptureDestinationControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraCaptureDestinationControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraCaptureDestinationControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraCaptureDestinationControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraCaptureDestinationControl_MetaObject
func callbackQCameraCaptureDestinationControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraCaptureDestinationControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraCaptureDestinationControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraCaptureDestinationControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraCaptureDestinationControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraCaptureDestinationControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::metaObject", f)
	}
}

func (ptr *QCameraCaptureDestinationControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraCaptureDestinationControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraCaptureDestinationControl::metaObject")
	}
}

func (ptr *QCameraCaptureDestinationControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraCaptureDestinationControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraCaptureDestinationControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraCaptureDestinationControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraCaptureDestinationControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraCaptureDestinationControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCameraControl::PropertyChangeType
type QCameraControl__PropertyChangeType int64

const (
	QCameraControl__CaptureMode           = QCameraControl__PropertyChangeType(1)
	QCameraControl__ImageEncodingSettings = QCameraControl__PropertyChangeType(2)
	QCameraControl__VideoEncodingSettings = QCameraControl__PropertyChangeType(3)
	QCameraControl__Viewfinder            = QCameraControl__PropertyChangeType(4)
	QCameraControl__ViewfinderSettings    = QCameraControl__PropertyChangeType(5)
)

type QCameraControl struct {
	QMediaControl
}

type QCameraControl_ITF interface {
	QMediaControl_ITF
	QCameraControl_PTR() *QCameraControl
}

func (p *QCameraControl) QCameraControl_PTR() *QCameraControl {
	return p
}

func (p *QCameraControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraControl(ptr QCameraControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraControlFromPointer(ptr unsafe.Pointer) *QCameraControl {
	var n = new(QCameraControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraControl(parent core.QObject_ITF) *QCameraControl {
	defer qt.Recovering("QCameraControl::QCameraControl")

	var tmpValue = NewQCameraControlFromPointer(C.QCameraControl_NewQCameraControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraControl_CanChangeProperty
func callbackQCameraControl_CanChangeProperty(ptr unsafe.Pointer, changeType C.longlong, status C.longlong) C.char {
	defer qt.Recovering("callback QCameraControl::canChangeProperty")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::canChangeProperty"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraControl__PropertyChangeType, QCamera__Status) bool)(QCameraControl__PropertyChangeType(changeType), QCamera__Status(status)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraControl) ConnectCanChangeProperty(f func(changeType QCameraControl__PropertyChangeType, status QCamera__Status) bool) {
	defer qt.Recovering("connect QCameraControl::canChangeProperty")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::canChangeProperty", f)
	}
}

func (ptr *QCameraControl) DisconnectCanChangeProperty(changeType QCameraControl__PropertyChangeType, status QCamera__Status) {
	defer qt.Recovering("disconnect QCameraControl::canChangeProperty")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::canChangeProperty")
	}
}

func (ptr *QCameraControl) CanChangeProperty(changeType QCameraControl__PropertyChangeType, status QCamera__Status) bool {
	defer qt.Recovering("QCameraControl::canChangeProperty")

	if ptr.Pointer() != nil {
		return C.QCameraControl_CanChangeProperty(ptr.Pointer(), C.longlong(changeType), C.longlong(status)) != 0
	}
	return false
}

//export callbackQCameraControl_CaptureMode
func callbackQCameraControl_CaptureMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraControl::captureMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::captureMode"); signal != nil {
		return C.longlong(signal.(func() QCamera__CaptureMode)())
	}

	return C.longlong(0)
}

func (ptr *QCameraControl) ConnectCaptureMode(f func() QCamera__CaptureMode) {
	defer qt.Recovering("connect QCameraControl::captureMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::captureMode", f)
	}
}

func (ptr *QCameraControl) DisconnectCaptureMode() {
	defer qt.Recovering("disconnect QCameraControl::captureMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::captureMode")
	}
}

func (ptr *QCameraControl) CaptureMode() QCamera__CaptureMode {
	defer qt.Recovering("QCameraControl::captureMode")

	if ptr.Pointer() != nil {
		return QCamera__CaptureMode(C.QCameraControl_CaptureMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraControl_CaptureModeChanged
func callbackQCameraControl_CaptureModeChanged(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraControl::captureModeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::captureModeChanged"); signal != nil {
		signal.(func(QCamera__CaptureMode))(QCamera__CaptureMode(mode))
	}

}

func (ptr *QCameraControl) ConnectCaptureModeChanged(f func(mode QCamera__CaptureMode)) {
	defer qt.Recovering("connect QCameraControl::captureModeChanged")

	if ptr.Pointer() != nil {
		C.QCameraControl_ConnectCaptureModeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::captureModeChanged", f)
	}
}

func (ptr *QCameraControl) DisconnectCaptureModeChanged() {
	defer qt.Recovering("disconnect QCameraControl::captureModeChanged")

	if ptr.Pointer() != nil {
		C.QCameraControl_DisconnectCaptureModeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::captureModeChanged")
	}
}

func (ptr *QCameraControl) CaptureModeChanged(mode QCamera__CaptureMode) {
	defer qt.Recovering("QCameraControl::captureModeChanged")

	if ptr.Pointer() != nil {
		C.QCameraControl_CaptureModeChanged(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCameraControl_Error
func callbackQCameraControl_Error(ptr unsafe.Pointer, error C.int, errorString *C.char) {
	defer qt.Recovering("callback QCameraControl::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::error"); signal != nil {
		signal.(func(int, string))(int(int32(error)), C.GoString(errorString))
	}

}

func (ptr *QCameraControl) ConnectError(f func(error int, errorString string)) {
	defer qt.Recovering("connect QCameraControl::error")

	if ptr.Pointer() != nil {
		C.QCameraControl_ConnectError(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::error", f)
	}
}

func (ptr *QCameraControl) DisconnectError() {
	defer qt.Recovering("disconnect QCameraControl::error")

	if ptr.Pointer() != nil {
		C.QCameraControl_DisconnectError(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::error")
	}
}

func (ptr *QCameraControl) Error(error int, errorString string) {
	defer qt.Recovering("QCameraControl::error")

	if ptr.Pointer() != nil {
		var errorStringC = C.CString(errorString)
		defer C.free(unsafe.Pointer(errorStringC))
		C.QCameraControl_Error(ptr.Pointer(), C.int(int32(error)), errorStringC)
	}
}

//export callbackQCameraControl_IsCaptureModeSupported
func callbackQCameraControl_IsCaptureModeSupported(ptr unsafe.Pointer, mode C.longlong) C.char {
	defer qt.Recovering("callback QCameraControl::isCaptureModeSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::isCaptureModeSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCamera__CaptureMode) bool)(QCamera__CaptureMode(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraControl) ConnectIsCaptureModeSupported(f func(mode QCamera__CaptureMode) bool) {
	defer qt.Recovering("connect QCameraControl::isCaptureModeSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::isCaptureModeSupported", f)
	}
}

func (ptr *QCameraControl) DisconnectIsCaptureModeSupported(mode QCamera__CaptureMode) {
	defer qt.Recovering("disconnect QCameraControl::isCaptureModeSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::isCaptureModeSupported")
	}
}

func (ptr *QCameraControl) IsCaptureModeSupported(mode QCamera__CaptureMode) bool {
	defer qt.Recovering("QCameraControl::isCaptureModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraControl_IsCaptureModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

//export callbackQCameraControl_SetCaptureMode
func callbackQCameraControl_SetCaptureMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraControl::setCaptureMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::setCaptureMode"); signal != nil {
		signal.(func(QCamera__CaptureMode))(QCamera__CaptureMode(mode))
	}

}

func (ptr *QCameraControl) ConnectSetCaptureMode(f func(mode QCamera__CaptureMode)) {
	defer qt.Recovering("connect QCameraControl::setCaptureMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::setCaptureMode", f)
	}
}

func (ptr *QCameraControl) DisconnectSetCaptureMode(mode QCamera__CaptureMode) {
	defer qt.Recovering("disconnect QCameraControl::setCaptureMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::setCaptureMode")
	}
}

func (ptr *QCameraControl) SetCaptureMode(mode QCamera__CaptureMode) {
	defer qt.Recovering("QCameraControl::setCaptureMode")

	if ptr.Pointer() != nil {
		C.QCameraControl_SetCaptureMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCameraControl_SetState
func callbackQCameraControl_SetState(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QCameraControl::setState")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::setState"); signal != nil {
		signal.(func(QCamera__State))(QCamera__State(state))
	}

}

func (ptr *QCameraControl) ConnectSetState(f func(state QCamera__State)) {
	defer qt.Recovering("connect QCameraControl::setState")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::setState", f)
	}
}

func (ptr *QCameraControl) DisconnectSetState(state QCamera__State) {
	defer qt.Recovering("disconnect QCameraControl::setState")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::setState")
	}
}

func (ptr *QCameraControl) SetState(state QCamera__State) {
	defer qt.Recovering("QCameraControl::setState")

	if ptr.Pointer() != nil {
		C.QCameraControl_SetState(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQCameraControl_State
func callbackQCameraControl_State(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraControl::state")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::state"); signal != nil {
		return C.longlong(signal.(func() QCamera__State)())
	}

	return C.longlong(0)
}

func (ptr *QCameraControl) ConnectState(f func() QCamera__State) {
	defer qt.Recovering("connect QCameraControl::state")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::state", f)
	}
}

func (ptr *QCameraControl) DisconnectState() {
	defer qt.Recovering("disconnect QCameraControl::state")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::state")
	}
}

func (ptr *QCameraControl) State() QCamera__State {
	defer qt.Recovering("QCameraControl::state")

	if ptr.Pointer() != nil {
		return QCamera__State(C.QCameraControl_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraControl_StateChanged
func callbackQCameraControl_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QCameraControl::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::stateChanged"); signal != nil {
		signal.(func(QCamera__State))(QCamera__State(state))
	}

}

func (ptr *QCameraControl) ConnectStateChanged(f func(state QCamera__State)) {
	defer qt.Recovering("connect QCameraControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QCameraControl_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::stateChanged", f)
	}
}

func (ptr *QCameraControl) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QCameraControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QCameraControl_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::stateChanged")
	}
}

func (ptr *QCameraControl) StateChanged(state QCamera__State) {
	defer qt.Recovering("QCameraControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QCameraControl_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQCameraControl_Status
func callbackQCameraControl_Status(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraControl::status")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::status"); signal != nil {
		return C.longlong(signal.(func() QCamera__Status)())
	}

	return C.longlong(0)
}

func (ptr *QCameraControl) ConnectStatus(f func() QCamera__Status) {
	defer qt.Recovering("connect QCameraControl::status")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::status", f)
	}
}

func (ptr *QCameraControl) DisconnectStatus() {
	defer qt.Recovering("disconnect QCameraControl::status")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::status")
	}
}

func (ptr *QCameraControl) Status() QCamera__Status {
	defer qt.Recovering("QCameraControl::status")

	if ptr.Pointer() != nil {
		return QCamera__Status(C.QCameraControl_Status(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraControl_StatusChanged
func callbackQCameraControl_StatusChanged(ptr unsafe.Pointer, status C.longlong) {
	defer qt.Recovering("callback QCameraControl::statusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::statusChanged"); signal != nil {
		signal.(func(QCamera__Status))(QCamera__Status(status))
	}

}

func (ptr *QCameraControl) ConnectStatusChanged(f func(status QCamera__Status)) {
	defer qt.Recovering("connect QCameraControl::statusChanged")

	if ptr.Pointer() != nil {
		C.QCameraControl_ConnectStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::statusChanged", f)
	}
}

func (ptr *QCameraControl) DisconnectStatusChanged() {
	defer qt.Recovering("disconnect QCameraControl::statusChanged")

	if ptr.Pointer() != nil {
		C.QCameraControl_DisconnectStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::statusChanged")
	}
}

func (ptr *QCameraControl) StatusChanged(status QCamera__Status) {
	defer qt.Recovering("QCameraControl::statusChanged")

	if ptr.Pointer() != nil {
		C.QCameraControl_StatusChanged(ptr.Pointer(), C.longlong(status))
	}
}

func (ptr *QCameraControl) DestroyQCameraControl() {
	defer qt.Recovering("QCameraControl::~QCameraControl")

	if ptr.Pointer() != nil {
		C.QCameraControl_DestroyQCameraControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraControl_TimerEvent
func callbackQCameraControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::timerEvent", f)
	}
}

func (ptr *QCameraControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::timerEvent")
	}
}

func (ptr *QCameraControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraControl_ChildEvent
func callbackQCameraControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::childEvent", f)
	}
}

func (ptr *QCameraControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::childEvent")
	}
}

func (ptr *QCameraControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraControl_ConnectNotify
func callbackQCameraControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::connectNotify", f)
	}
}

func (ptr *QCameraControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::connectNotify")
	}
}

func (ptr *QCameraControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraControl_CustomEvent
func callbackQCameraControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::customEvent", f)
	}
}

func (ptr *QCameraControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::customEvent")
	}
}

func (ptr *QCameraControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraControl_DeleteLater
func callbackQCameraControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::deleteLater", f)
	}
}

func (ptr *QCameraControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::deleteLater")
	}
}

func (ptr *QCameraControl) DeleteLater() {
	defer qt.Recovering("QCameraControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraControl_DisconnectNotify
func callbackQCameraControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::disconnectNotify", f)
	}
}

func (ptr *QCameraControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::disconnectNotify")
	}
}

func (ptr *QCameraControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraControl_Event
func callbackQCameraControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::event", f)
	}
}

func (ptr *QCameraControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::event")
	}
}

func (ptr *QCameraControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraControl_EventFilter
func callbackQCameraControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::eventFilter", f)
	}
}

func (ptr *QCameraControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::eventFilter")
	}
}

func (ptr *QCameraControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraControl_MetaObject
func callbackQCameraControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::metaObject", f)
	}
}

func (ptr *QCameraControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraControl::metaObject")
	}
}

func (ptr *QCameraControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCameraExposure::ExposureMode
type QCameraExposure__ExposureMode int64

const (
	QCameraExposure__ExposureAuto          = QCameraExposure__ExposureMode(0)
	QCameraExposure__ExposureManual        = QCameraExposure__ExposureMode(1)
	QCameraExposure__ExposurePortrait      = QCameraExposure__ExposureMode(2)
	QCameraExposure__ExposureNight         = QCameraExposure__ExposureMode(3)
	QCameraExposure__ExposureBacklight     = QCameraExposure__ExposureMode(4)
	QCameraExposure__ExposureSpotlight     = QCameraExposure__ExposureMode(5)
	QCameraExposure__ExposureSports        = QCameraExposure__ExposureMode(6)
	QCameraExposure__ExposureSnow          = QCameraExposure__ExposureMode(7)
	QCameraExposure__ExposureBeach         = QCameraExposure__ExposureMode(8)
	QCameraExposure__ExposureLargeAperture = QCameraExposure__ExposureMode(9)
	QCameraExposure__ExposureSmallAperture = QCameraExposure__ExposureMode(10)
	QCameraExposure__ExposureAction        = QCameraExposure__ExposureMode(11)
	QCameraExposure__ExposureLandscape     = QCameraExposure__ExposureMode(12)
	QCameraExposure__ExposureNightPortrait = QCameraExposure__ExposureMode(13)
	QCameraExposure__ExposureTheatre       = QCameraExposure__ExposureMode(14)
	QCameraExposure__ExposureSunset        = QCameraExposure__ExposureMode(15)
	QCameraExposure__ExposureSteadyPhoto   = QCameraExposure__ExposureMode(16)
	QCameraExposure__ExposureFireworks     = QCameraExposure__ExposureMode(17)
	QCameraExposure__ExposureParty         = QCameraExposure__ExposureMode(18)
	QCameraExposure__ExposureCandlelight   = QCameraExposure__ExposureMode(19)
	QCameraExposure__ExposureBarcode       = QCameraExposure__ExposureMode(20)
	QCameraExposure__ExposureModeVendor    = QCameraExposure__ExposureMode(1000)
)

//QCameraExposure::FlashMode
type QCameraExposure__FlashMode int64

const (
	QCameraExposure__FlashAuto                 = QCameraExposure__FlashMode(0x1)
	QCameraExposure__FlashOff                  = QCameraExposure__FlashMode(0x2)
	QCameraExposure__FlashOn                   = QCameraExposure__FlashMode(0x4)
	QCameraExposure__FlashRedEyeReduction      = QCameraExposure__FlashMode(0x8)
	QCameraExposure__FlashFill                 = QCameraExposure__FlashMode(0x10)
	QCameraExposure__FlashTorch                = QCameraExposure__FlashMode(0x20)
	QCameraExposure__FlashVideoLight           = QCameraExposure__FlashMode(0x40)
	QCameraExposure__FlashSlowSyncFrontCurtain = QCameraExposure__FlashMode(0x80)
	QCameraExposure__FlashSlowSyncRearCurtain  = QCameraExposure__FlashMode(0x100)
	QCameraExposure__FlashManual               = QCameraExposure__FlashMode(0x200)
)

//QCameraExposure::MeteringMode
type QCameraExposure__MeteringMode int64

const (
	QCameraExposure__MeteringMatrix  = QCameraExposure__MeteringMode(1)
	QCameraExposure__MeteringAverage = QCameraExposure__MeteringMode(2)
	QCameraExposure__MeteringSpot    = QCameraExposure__MeteringMode(3)
)

type QCameraExposure struct {
	core.QObject
}

type QCameraExposure_ITF interface {
	core.QObject_ITF
	QCameraExposure_PTR() *QCameraExposure
}

func (p *QCameraExposure) QCameraExposure_PTR() *QCameraExposure {
	return p
}

func (p *QCameraExposure) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QCameraExposure) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraExposure(ptr QCameraExposure_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraExposure_PTR().Pointer()
	}
	return nil
}

func NewQCameraExposureFromPointer(ptr unsafe.Pointer) *QCameraExposure {
	var n = new(QCameraExposure)
	n.SetPointer(ptr)
	return n
}

func (ptr *QCameraExposure) DestroyQCameraExposure() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QCameraExposure) Aperture() float64 {
	defer qt.Recovering("QCameraExposure::aperture")

	if ptr.Pointer() != nil {
		return float64(C.QCameraExposure_Aperture(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraExposure) ExposureCompensation() float64 {
	defer qt.Recovering("QCameraExposure::exposureCompensation")

	if ptr.Pointer() != nil {
		return float64(C.QCameraExposure_ExposureCompensation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraExposure) ExposureMode() QCameraExposure__ExposureMode {
	defer qt.Recovering("QCameraExposure::exposureMode")

	if ptr.Pointer() != nil {
		return QCameraExposure__ExposureMode(C.QCameraExposure_ExposureMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraExposure) FlashMode() QCameraExposure__FlashMode {
	defer qt.Recovering("QCameraExposure::flashMode")

	if ptr.Pointer() != nil {
		return QCameraExposure__FlashMode(C.QCameraExposure_FlashMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraExposure) IsoSensitivity() int {
	defer qt.Recovering("QCameraExposure::isoSensitivity")

	if ptr.Pointer() != nil {
		return int(int32(C.QCameraExposure_IsoSensitivity(ptr.Pointer())))
	}
	return 0
}

func (ptr *QCameraExposure) MeteringMode() QCameraExposure__MeteringMode {
	defer qt.Recovering("QCameraExposure::meteringMode")

	if ptr.Pointer() != nil {
		return QCameraExposure__MeteringMode(C.QCameraExposure_MeteringMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraExposure_SetAutoAperture
func callbackQCameraExposure_SetAutoAperture(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::setAutoAperture")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setAutoAperture"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCameraExposure) ConnectSetAutoAperture(f func()) {
	defer qt.Recovering("connect QCameraExposure::setAutoAperture")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setAutoAperture", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetAutoAperture() {
	defer qt.Recovering("disconnect QCameraExposure::setAutoAperture")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setAutoAperture")
	}
}

func (ptr *QCameraExposure) SetAutoAperture() {
	defer qt.Recovering("QCameraExposure::setAutoAperture")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetAutoAperture(ptr.Pointer())
	}
}

//export callbackQCameraExposure_SetAutoIsoSensitivity
func callbackQCameraExposure_SetAutoIsoSensitivity(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::setAutoIsoSensitivity")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setAutoIsoSensitivity"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCameraExposure) ConnectSetAutoIsoSensitivity(f func()) {
	defer qt.Recovering("connect QCameraExposure::setAutoIsoSensitivity")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setAutoIsoSensitivity", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetAutoIsoSensitivity() {
	defer qt.Recovering("disconnect QCameraExposure::setAutoIsoSensitivity")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setAutoIsoSensitivity")
	}
}

func (ptr *QCameraExposure) SetAutoIsoSensitivity() {
	defer qt.Recovering("QCameraExposure::setAutoIsoSensitivity")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetAutoIsoSensitivity(ptr.Pointer())
	}
}

//export callbackQCameraExposure_SetExposureCompensation
func callbackQCameraExposure_SetExposureCompensation(ptr unsafe.Pointer, ev C.double) {
	defer qt.Recovering("callback QCameraExposure::setExposureCompensation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setExposureCompensation"); signal != nil {
		signal.(func(float64))(float64(ev))
	}

}

func (ptr *QCameraExposure) ConnectSetExposureCompensation(f func(ev float64)) {
	defer qt.Recovering("connect QCameraExposure::setExposureCompensation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setExposureCompensation", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetExposureCompensation(ev float64) {
	defer qt.Recovering("disconnect QCameraExposure::setExposureCompensation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setExposureCompensation")
	}
}

func (ptr *QCameraExposure) SetExposureCompensation(ev float64) {
	defer qt.Recovering("QCameraExposure::setExposureCompensation")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetExposureCompensation(ptr.Pointer(), C.double(ev))
	}
}

//export callbackQCameraExposure_SetExposureMode
func callbackQCameraExposure_SetExposureMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraExposure::setExposureMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setExposureMode"); signal != nil {
		signal.(func(QCameraExposure__ExposureMode))(QCameraExposure__ExposureMode(mode))
	}

}

func (ptr *QCameraExposure) ConnectSetExposureMode(f func(mode QCameraExposure__ExposureMode)) {
	defer qt.Recovering("connect QCameraExposure::setExposureMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setExposureMode", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetExposureMode(mode QCameraExposure__ExposureMode) {
	defer qt.Recovering("disconnect QCameraExposure::setExposureMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setExposureMode")
	}
}

func (ptr *QCameraExposure) SetExposureMode(mode QCameraExposure__ExposureMode) {
	defer qt.Recovering("QCameraExposure::setExposureMode")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetExposureMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCameraExposure_SetFlashMode
func callbackQCameraExposure_SetFlashMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraExposure::setFlashMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setFlashMode"); signal != nil {
		signal.(func(QCameraExposure__FlashMode))(QCameraExposure__FlashMode(mode))
	}

}

func (ptr *QCameraExposure) ConnectSetFlashMode(f func(mode QCameraExposure__FlashMode)) {
	defer qt.Recovering("connect QCameraExposure::setFlashMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setFlashMode", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetFlashMode(mode QCameraExposure__FlashMode) {
	defer qt.Recovering("disconnect QCameraExposure::setFlashMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setFlashMode")
	}
}

func (ptr *QCameraExposure) SetFlashMode(mode QCameraExposure__FlashMode) {
	defer qt.Recovering("QCameraExposure::setFlashMode")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetFlashMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCameraExposure_SetManualAperture
func callbackQCameraExposure_SetManualAperture(ptr unsafe.Pointer, aperture C.double) {
	defer qt.Recovering("callback QCameraExposure::setManualAperture")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setManualAperture"); signal != nil {
		signal.(func(float64))(float64(aperture))
	}

}

func (ptr *QCameraExposure) ConnectSetManualAperture(f func(aperture float64)) {
	defer qt.Recovering("connect QCameraExposure::setManualAperture")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setManualAperture", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetManualAperture(aperture float64) {
	defer qt.Recovering("disconnect QCameraExposure::setManualAperture")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setManualAperture")
	}
}

func (ptr *QCameraExposure) SetManualAperture(aperture float64) {
	defer qt.Recovering("QCameraExposure::setManualAperture")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetManualAperture(ptr.Pointer(), C.double(aperture))
	}
}

//export callbackQCameraExposure_SetManualIsoSensitivity
func callbackQCameraExposure_SetManualIsoSensitivity(ptr unsafe.Pointer, iso C.int) {
	defer qt.Recovering("callback QCameraExposure::setManualIsoSensitivity")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setManualIsoSensitivity"); signal != nil {
		signal.(func(int))(int(int32(iso)))
	}

}

func (ptr *QCameraExposure) ConnectSetManualIsoSensitivity(f func(iso int)) {
	defer qt.Recovering("connect QCameraExposure::setManualIsoSensitivity")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setManualIsoSensitivity", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetManualIsoSensitivity(iso int) {
	defer qt.Recovering("disconnect QCameraExposure::setManualIsoSensitivity")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setManualIsoSensitivity")
	}
}

func (ptr *QCameraExposure) SetManualIsoSensitivity(iso int) {
	defer qt.Recovering("QCameraExposure::setManualIsoSensitivity")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetManualIsoSensitivity(ptr.Pointer(), C.int(int32(iso)))
	}
}

//export callbackQCameraExposure_SetMeteringMode
func callbackQCameraExposure_SetMeteringMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraExposure::setMeteringMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setMeteringMode"); signal != nil {
		signal.(func(QCameraExposure__MeteringMode))(QCameraExposure__MeteringMode(mode))
	}

}

func (ptr *QCameraExposure) ConnectSetMeteringMode(f func(mode QCameraExposure__MeteringMode)) {
	defer qt.Recovering("connect QCameraExposure::setMeteringMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setMeteringMode", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetMeteringMode(mode QCameraExposure__MeteringMode) {
	defer qt.Recovering("disconnect QCameraExposure::setMeteringMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setMeteringMode")
	}
}

func (ptr *QCameraExposure) SetMeteringMode(mode QCameraExposure__MeteringMode) {
	defer qt.Recovering("QCameraExposure::setMeteringMode")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetMeteringMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QCameraExposure) SetSpotMeteringPoint(point core.QPointF_ITF) {
	defer qt.Recovering("QCameraExposure::setSpotMeteringPoint")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetSpotMeteringPoint(ptr.Pointer(), core.PointerFromQPointF(point))
	}
}

func (ptr *QCameraExposure) SpotMeteringPoint() *core.QPointF {
	defer qt.Recovering("QCameraExposure::spotMeteringPoint")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QCameraExposure_SpotMeteringPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

//export callbackQCameraExposure_ApertureChanged
func callbackQCameraExposure_ApertureChanged(ptr unsafe.Pointer, value C.double) {
	defer qt.Recovering("callback QCameraExposure::apertureChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::apertureChanged"); signal != nil {
		signal.(func(float64))(float64(value))
	}

}

func (ptr *QCameraExposure) ConnectApertureChanged(f func(value float64)) {
	defer qt.Recovering("connect QCameraExposure::apertureChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ConnectApertureChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::apertureChanged", f)
	}
}

func (ptr *QCameraExposure) DisconnectApertureChanged() {
	defer qt.Recovering("disconnect QCameraExposure::apertureChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DisconnectApertureChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::apertureChanged")
	}
}

func (ptr *QCameraExposure) ApertureChanged(value float64) {
	defer qt.Recovering("QCameraExposure::apertureChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ApertureChanged(ptr.Pointer(), C.double(value))
	}
}

//export callbackQCameraExposure_ApertureRangeChanged
func callbackQCameraExposure_ApertureRangeChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::apertureRangeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::apertureRangeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCameraExposure) ConnectApertureRangeChanged(f func()) {
	defer qt.Recovering("connect QCameraExposure::apertureRangeChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ConnectApertureRangeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::apertureRangeChanged", f)
	}
}

func (ptr *QCameraExposure) DisconnectApertureRangeChanged() {
	defer qt.Recovering("disconnect QCameraExposure::apertureRangeChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DisconnectApertureRangeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::apertureRangeChanged")
	}
}

func (ptr *QCameraExposure) ApertureRangeChanged() {
	defer qt.Recovering("QCameraExposure::apertureRangeChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ApertureRangeChanged(ptr.Pointer())
	}
}

//export callbackQCameraExposure_ExposureCompensationChanged
func callbackQCameraExposure_ExposureCompensationChanged(ptr unsafe.Pointer, value C.double) {
	defer qt.Recovering("callback QCameraExposure::exposureCompensationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::exposureCompensationChanged"); signal != nil {
		signal.(func(float64))(float64(value))
	}

}

func (ptr *QCameraExposure) ConnectExposureCompensationChanged(f func(value float64)) {
	defer qt.Recovering("connect QCameraExposure::exposureCompensationChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ConnectExposureCompensationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::exposureCompensationChanged", f)
	}
}

func (ptr *QCameraExposure) DisconnectExposureCompensationChanged() {
	defer qt.Recovering("disconnect QCameraExposure::exposureCompensationChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DisconnectExposureCompensationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::exposureCompensationChanged")
	}
}

func (ptr *QCameraExposure) ExposureCompensationChanged(value float64) {
	defer qt.Recovering("QCameraExposure::exposureCompensationChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ExposureCompensationChanged(ptr.Pointer(), C.double(value))
	}
}

//export callbackQCameraExposure_FlashReady
func callbackQCameraExposure_FlashReady(ptr unsafe.Pointer, ready C.char) {
	defer qt.Recovering("callback QCameraExposure::flashReady")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::flashReady"); signal != nil {
		signal.(func(bool))(int8(ready) != 0)
	}

}

func (ptr *QCameraExposure) ConnectFlashReady(f func(ready bool)) {
	defer qt.Recovering("connect QCameraExposure::flashReady")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ConnectFlashReady(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::flashReady", f)
	}
}

func (ptr *QCameraExposure) DisconnectFlashReady() {
	defer qt.Recovering("disconnect QCameraExposure::flashReady")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DisconnectFlashReady(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::flashReady")
	}
}

func (ptr *QCameraExposure) FlashReady(ready bool) {
	defer qt.Recovering("QCameraExposure::flashReady")

	if ptr.Pointer() != nil {
		C.QCameraExposure_FlashReady(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ready))))
	}
}

func (ptr *QCameraExposure) IsAvailable() bool {
	defer qt.Recovering("QCameraExposure::isAvailable")

	if ptr.Pointer() != nil {
		return C.QCameraExposure_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraExposure) IsExposureModeSupported(mode QCameraExposure__ExposureMode) bool {
	defer qt.Recovering("QCameraExposure::isExposureModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraExposure_IsExposureModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QCameraExposure) IsFlashModeSupported(mode QCameraExposure__FlashMode) bool {
	defer qt.Recovering("QCameraExposure::isFlashModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraExposure_IsFlashModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QCameraExposure) IsFlashReady() bool {
	defer qt.Recovering("QCameraExposure::isFlashReady")

	if ptr.Pointer() != nil {
		return C.QCameraExposure_IsFlashReady(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraExposure) IsMeteringModeSupported(mode QCameraExposure__MeteringMode) bool {
	defer qt.Recovering("QCameraExposure::isMeteringModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraExposure_IsMeteringModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

//export callbackQCameraExposure_IsoSensitivityChanged
func callbackQCameraExposure_IsoSensitivityChanged(ptr unsafe.Pointer, value C.int) {
	defer qt.Recovering("callback QCameraExposure::isoSensitivityChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::isoSensitivityChanged"); signal != nil {
		signal.(func(int))(int(int32(value)))
	}

}

func (ptr *QCameraExposure) ConnectIsoSensitivityChanged(f func(value int)) {
	defer qt.Recovering("connect QCameraExposure::isoSensitivityChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ConnectIsoSensitivityChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::isoSensitivityChanged", f)
	}
}

func (ptr *QCameraExposure) DisconnectIsoSensitivityChanged() {
	defer qt.Recovering("disconnect QCameraExposure::isoSensitivityChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DisconnectIsoSensitivityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::isoSensitivityChanged")
	}
}

func (ptr *QCameraExposure) IsoSensitivityChanged(value int) {
	defer qt.Recovering("QCameraExposure::isoSensitivityChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_IsoSensitivityChanged(ptr.Pointer(), C.int(int32(value)))
	}
}

func (ptr *QCameraExposure) RequestedAperture() float64 {
	defer qt.Recovering("QCameraExposure::requestedAperture")

	if ptr.Pointer() != nil {
		return float64(C.QCameraExposure_RequestedAperture(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraExposure) RequestedIsoSensitivity() int {
	defer qt.Recovering("QCameraExposure::requestedIsoSensitivity")

	if ptr.Pointer() != nil {
		return int(int32(C.QCameraExposure_RequestedIsoSensitivity(ptr.Pointer())))
	}
	return 0
}

func (ptr *QCameraExposure) RequestedShutterSpeed() float64 {
	defer qt.Recovering("QCameraExposure::requestedShutterSpeed")

	if ptr.Pointer() != nil {
		return float64(C.QCameraExposure_RequestedShutterSpeed(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraExposure_SetAutoShutterSpeed
func callbackQCameraExposure_SetAutoShutterSpeed(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::setAutoShutterSpeed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setAutoShutterSpeed"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCameraExposure) ConnectSetAutoShutterSpeed(f func()) {
	defer qt.Recovering("connect QCameraExposure::setAutoShutterSpeed")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setAutoShutterSpeed", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetAutoShutterSpeed() {
	defer qt.Recovering("disconnect QCameraExposure::setAutoShutterSpeed")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setAutoShutterSpeed")
	}
}

func (ptr *QCameraExposure) SetAutoShutterSpeed() {
	defer qt.Recovering("QCameraExposure::setAutoShutterSpeed")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetAutoShutterSpeed(ptr.Pointer())
	}
}

//export callbackQCameraExposure_SetManualShutterSpeed
func callbackQCameraExposure_SetManualShutterSpeed(ptr unsafe.Pointer, seconds C.double) {
	defer qt.Recovering("callback QCameraExposure::setManualShutterSpeed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::setManualShutterSpeed"); signal != nil {
		signal.(func(float64))(float64(seconds))
	}

}

func (ptr *QCameraExposure) ConnectSetManualShutterSpeed(f func(seconds float64)) {
	defer qt.Recovering("connect QCameraExposure::setManualShutterSpeed")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setManualShutterSpeed", f)
	}
}

func (ptr *QCameraExposure) DisconnectSetManualShutterSpeed(seconds float64) {
	defer qt.Recovering("disconnect QCameraExposure::setManualShutterSpeed")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::setManualShutterSpeed")
	}
}

func (ptr *QCameraExposure) SetManualShutterSpeed(seconds float64) {
	defer qt.Recovering("QCameraExposure::setManualShutterSpeed")

	if ptr.Pointer() != nil {
		C.QCameraExposure_SetManualShutterSpeed(ptr.Pointer(), C.double(seconds))
	}
}

func (ptr *QCameraExposure) ShutterSpeed() float64 {
	defer qt.Recovering("QCameraExposure::shutterSpeed")

	if ptr.Pointer() != nil {
		return float64(C.QCameraExposure_ShutterSpeed(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraExposure_ShutterSpeedChanged
func callbackQCameraExposure_ShutterSpeedChanged(ptr unsafe.Pointer, speed C.double) {
	defer qt.Recovering("callback QCameraExposure::shutterSpeedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::shutterSpeedChanged"); signal != nil {
		signal.(func(float64))(float64(speed))
	}

}

func (ptr *QCameraExposure) ConnectShutterSpeedChanged(f func(speed float64)) {
	defer qt.Recovering("connect QCameraExposure::shutterSpeedChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ConnectShutterSpeedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::shutterSpeedChanged", f)
	}
}

func (ptr *QCameraExposure) DisconnectShutterSpeedChanged() {
	defer qt.Recovering("disconnect QCameraExposure::shutterSpeedChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DisconnectShutterSpeedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::shutterSpeedChanged")
	}
}

func (ptr *QCameraExposure) ShutterSpeedChanged(speed float64) {
	defer qt.Recovering("QCameraExposure::shutterSpeedChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ShutterSpeedChanged(ptr.Pointer(), C.double(speed))
	}
}

//export callbackQCameraExposure_ShutterSpeedRangeChanged
func callbackQCameraExposure_ShutterSpeedRangeChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::shutterSpeedRangeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::shutterSpeedRangeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCameraExposure) ConnectShutterSpeedRangeChanged(f func()) {
	defer qt.Recovering("connect QCameraExposure::shutterSpeedRangeChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ConnectShutterSpeedRangeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::shutterSpeedRangeChanged", f)
	}
}

func (ptr *QCameraExposure) DisconnectShutterSpeedRangeChanged() {
	defer qt.Recovering("disconnect QCameraExposure::shutterSpeedRangeChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DisconnectShutterSpeedRangeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::shutterSpeedRangeChanged")
	}
}

func (ptr *QCameraExposure) ShutterSpeedRangeChanged() {
	defer qt.Recovering("QCameraExposure::shutterSpeedRangeChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ShutterSpeedRangeChanged(ptr.Pointer())
	}
}

//export callbackQCameraExposure_TimerEvent
func callbackQCameraExposure_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraExposureFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraExposure) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraExposure::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::timerEvent", f)
	}
}

func (ptr *QCameraExposure) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraExposure::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::timerEvent")
	}
}

func (ptr *QCameraExposure) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraExposure::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposure_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraExposure) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraExposure::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposure_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraExposure_ChildEvent
func callbackQCameraExposure_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraExposureFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraExposure) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraExposure::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::childEvent", f)
	}
}

func (ptr *QCameraExposure) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraExposure::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::childEvent")
	}
}

func (ptr *QCameraExposure) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraExposure::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraExposure) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraExposure::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraExposure_ConnectNotify
func callbackQCameraExposure_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraExposureFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraExposure) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraExposure::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::connectNotify", f)
	}
}

func (ptr *QCameraExposure) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraExposure::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::connectNotify")
	}
}

func (ptr *QCameraExposure) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraExposure::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraExposure) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraExposure::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraExposure_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraExposure_CustomEvent
func callbackQCameraExposure_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraExposureFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraExposure) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraExposure::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::customEvent", f)
	}
}

func (ptr *QCameraExposure) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraExposure::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::customEvent")
	}
}

func (ptr *QCameraExposure) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraExposure::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposure_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraExposure) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraExposure::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposure_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraExposure_DeleteLater
func callbackQCameraExposure_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraExposureFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraExposure) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraExposure::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::deleteLater", f)
	}
}

func (ptr *QCameraExposure) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraExposure::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::deleteLater")
	}
}

func (ptr *QCameraExposure) DeleteLater() {
	defer qt.Recovering("QCameraExposure::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraExposure) DeleteLaterDefault() {
	defer qt.Recovering("QCameraExposure::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraExposure_DisconnectNotify
func callbackQCameraExposure_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposure::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraExposureFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraExposure) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraExposure::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::disconnectNotify", f)
	}
}

func (ptr *QCameraExposure) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraExposure::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::disconnectNotify")
	}
}

func (ptr *QCameraExposure) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraExposure::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraExposure) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraExposure::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraExposure_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraExposure_Event
func callbackQCameraExposure_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraExposure::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraExposureFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraExposure) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraExposure::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::event", f)
	}
}

func (ptr *QCameraExposure) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraExposure::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::event")
	}
}

func (ptr *QCameraExposure) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraExposure::event")

	if ptr.Pointer() != nil {
		return C.QCameraExposure_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraExposure) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraExposure::event")

	if ptr.Pointer() != nil {
		return C.QCameraExposure_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraExposure_EventFilter
func callbackQCameraExposure_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraExposure::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraExposureFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraExposure) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraExposure::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::eventFilter", f)
	}
}

func (ptr *QCameraExposure) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraExposure::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::eventFilter")
	}
}

func (ptr *QCameraExposure) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraExposure::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraExposure_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraExposure) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraExposure::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraExposure_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraExposure_MetaObject
func callbackQCameraExposure_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraExposure::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposure::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraExposureFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraExposure) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraExposure::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::metaObject", f)
	}
}

func (ptr *QCameraExposure) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraExposure::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposure::metaObject")
	}
}

func (ptr *QCameraExposure) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraExposure::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraExposure_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraExposure) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraExposure::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraExposure_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCameraExposureControl::ExposureParameter
type QCameraExposureControl__ExposureParameter int64

const (
	QCameraExposureControl__ISO                       = QCameraExposureControl__ExposureParameter(0)
	QCameraExposureControl__Aperture                  = QCameraExposureControl__ExposureParameter(1)
	QCameraExposureControl__ShutterSpeed              = QCameraExposureControl__ExposureParameter(2)
	QCameraExposureControl__ExposureCompensation      = QCameraExposureControl__ExposureParameter(3)
	QCameraExposureControl__FlashPower                = QCameraExposureControl__ExposureParameter(4)
	QCameraExposureControl__FlashCompensation         = QCameraExposureControl__ExposureParameter(5)
	QCameraExposureControl__TorchPower                = QCameraExposureControl__ExposureParameter(6)
	QCameraExposureControl__SpotMeteringPoint         = QCameraExposureControl__ExposureParameter(7)
	QCameraExposureControl__ExposureMode              = QCameraExposureControl__ExposureParameter(8)
	QCameraExposureControl__MeteringMode              = QCameraExposureControl__ExposureParameter(9)
	QCameraExposureControl__ExtendedExposureParameter = QCameraExposureControl__ExposureParameter(1000)
)

type QCameraExposureControl struct {
	QMediaControl
}

type QCameraExposureControl_ITF interface {
	QMediaControl_ITF
	QCameraExposureControl_PTR() *QCameraExposureControl
}

func (p *QCameraExposureControl) QCameraExposureControl_PTR() *QCameraExposureControl {
	return p
}

func (p *QCameraExposureControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraExposureControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraExposureControl(ptr QCameraExposureControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraExposureControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraExposureControlFromPointer(ptr unsafe.Pointer) *QCameraExposureControl {
	var n = new(QCameraExposureControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQCameraExposureControl_ActualValue
func callbackQCameraExposureControl_ActualValue(ptr unsafe.Pointer, parameter C.longlong) unsafe.Pointer {
	defer qt.Recovering("callback QCameraExposureControl::actualValue")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::actualValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func(QCameraExposureControl__ExposureParameter) *core.QVariant)(QCameraExposureControl__ExposureParameter(parameter)))
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QCameraExposureControl) ConnectActualValue(f func(parameter QCameraExposureControl__ExposureParameter) *core.QVariant) {
	defer qt.Recovering("connect QCameraExposureControl::actualValue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::actualValue", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectActualValue(parameter QCameraExposureControl__ExposureParameter) {
	defer qt.Recovering("disconnect QCameraExposureControl::actualValue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::actualValue")
	}
}

func (ptr *QCameraExposureControl) ActualValue(parameter QCameraExposureControl__ExposureParameter) *core.QVariant {
	defer qt.Recovering("QCameraExposureControl::actualValue")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QCameraExposureControl_ActualValue(ptr.Pointer(), C.longlong(parameter)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQCameraExposureControl_ActualValueChanged
func callbackQCameraExposureControl_ActualValueChanged(ptr unsafe.Pointer, parameter C.int) {
	defer qt.Recovering("callback QCameraExposureControl::actualValueChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::actualValueChanged"); signal != nil {
		signal.(func(int))(int(int32(parameter)))
	}

}

func (ptr *QCameraExposureControl) ConnectActualValueChanged(f func(parameter int)) {
	defer qt.Recovering("connect QCameraExposureControl::actualValueChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_ConnectActualValueChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::actualValueChanged", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectActualValueChanged() {
	defer qt.Recovering("disconnect QCameraExposureControl::actualValueChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_DisconnectActualValueChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::actualValueChanged")
	}
}

func (ptr *QCameraExposureControl) ActualValueChanged(parameter int) {
	defer qt.Recovering("QCameraExposureControl::actualValueChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_ActualValueChanged(ptr.Pointer(), C.int(int32(parameter)))
	}
}

//export callbackQCameraExposureControl_IsParameterSupported
func callbackQCameraExposureControl_IsParameterSupported(ptr unsafe.Pointer, parameter C.longlong) C.char {
	defer qt.Recovering("callback QCameraExposureControl::isParameterSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::isParameterSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraExposureControl__ExposureParameter) bool)(QCameraExposureControl__ExposureParameter(parameter)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraExposureControl) ConnectIsParameterSupported(f func(parameter QCameraExposureControl__ExposureParameter) bool) {
	defer qt.Recovering("connect QCameraExposureControl::isParameterSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::isParameterSupported", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectIsParameterSupported(parameter QCameraExposureControl__ExposureParameter) {
	defer qt.Recovering("disconnect QCameraExposureControl::isParameterSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::isParameterSupported")
	}
}

func (ptr *QCameraExposureControl) IsParameterSupported(parameter QCameraExposureControl__ExposureParameter) bool {
	defer qt.Recovering("QCameraExposureControl::isParameterSupported")

	if ptr.Pointer() != nil {
		return C.QCameraExposureControl_IsParameterSupported(ptr.Pointer(), C.longlong(parameter)) != 0
	}
	return false
}

//export callbackQCameraExposureControl_ParameterRangeChanged
func callbackQCameraExposureControl_ParameterRangeChanged(ptr unsafe.Pointer, parameter C.int) {
	defer qt.Recovering("callback QCameraExposureControl::parameterRangeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::parameterRangeChanged"); signal != nil {
		signal.(func(int))(int(int32(parameter)))
	}

}

func (ptr *QCameraExposureControl) ConnectParameterRangeChanged(f func(parameter int)) {
	defer qt.Recovering("connect QCameraExposureControl::parameterRangeChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_ConnectParameterRangeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::parameterRangeChanged", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectParameterRangeChanged() {
	defer qt.Recovering("disconnect QCameraExposureControl::parameterRangeChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_DisconnectParameterRangeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::parameterRangeChanged")
	}
}

func (ptr *QCameraExposureControl) ParameterRangeChanged(parameter int) {
	defer qt.Recovering("QCameraExposureControl::parameterRangeChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_ParameterRangeChanged(ptr.Pointer(), C.int(int32(parameter)))
	}
}

//export callbackQCameraExposureControl_RequestedValue
func callbackQCameraExposureControl_RequestedValue(ptr unsafe.Pointer, parameter C.longlong) unsafe.Pointer {
	defer qt.Recovering("callback QCameraExposureControl::requestedValue")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::requestedValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func(QCameraExposureControl__ExposureParameter) *core.QVariant)(QCameraExposureControl__ExposureParameter(parameter)))
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QCameraExposureControl) ConnectRequestedValue(f func(parameter QCameraExposureControl__ExposureParameter) *core.QVariant) {
	defer qt.Recovering("connect QCameraExposureControl::requestedValue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::requestedValue", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectRequestedValue(parameter QCameraExposureControl__ExposureParameter) {
	defer qt.Recovering("disconnect QCameraExposureControl::requestedValue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::requestedValue")
	}
}

func (ptr *QCameraExposureControl) RequestedValue(parameter QCameraExposureControl__ExposureParameter) *core.QVariant {
	defer qt.Recovering("QCameraExposureControl::requestedValue")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QCameraExposureControl_RequestedValue(ptr.Pointer(), C.longlong(parameter)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQCameraExposureControl_RequestedValueChanged
func callbackQCameraExposureControl_RequestedValueChanged(ptr unsafe.Pointer, parameter C.int) {
	defer qt.Recovering("callback QCameraExposureControl::requestedValueChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::requestedValueChanged"); signal != nil {
		signal.(func(int))(int(int32(parameter)))
	}

}

func (ptr *QCameraExposureControl) ConnectRequestedValueChanged(f func(parameter int)) {
	defer qt.Recovering("connect QCameraExposureControl::requestedValueChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_ConnectRequestedValueChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::requestedValueChanged", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectRequestedValueChanged() {
	defer qt.Recovering("disconnect QCameraExposureControl::requestedValueChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_DisconnectRequestedValueChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::requestedValueChanged")
	}
}

func (ptr *QCameraExposureControl) RequestedValueChanged(parameter int) {
	defer qt.Recovering("QCameraExposureControl::requestedValueChanged")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_RequestedValueChanged(ptr.Pointer(), C.int(int32(parameter)))
	}
}

//export callbackQCameraExposureControl_SetValue
func callbackQCameraExposureControl_SetValue(ptr unsafe.Pointer, parameter C.longlong, value unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraExposureControl::setValue")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::setValue"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraExposureControl__ExposureParameter, *core.QVariant) bool)(QCameraExposureControl__ExposureParameter(parameter), core.NewQVariantFromPointer(value)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraExposureControl) ConnectSetValue(f func(parameter QCameraExposureControl__ExposureParameter, value *core.QVariant) bool) {
	defer qt.Recovering("connect QCameraExposureControl::setValue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::setValue", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectSetValue(parameter QCameraExposureControl__ExposureParameter, value core.QVariant_ITF) {
	defer qt.Recovering("disconnect QCameraExposureControl::setValue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::setValue")
	}
}

func (ptr *QCameraExposureControl) SetValue(parameter QCameraExposureControl__ExposureParameter, value core.QVariant_ITF) bool {
	defer qt.Recovering("QCameraExposureControl::setValue")

	if ptr.Pointer() != nil {
		return C.QCameraExposureControl_SetValue(ptr.Pointer(), C.longlong(parameter), core.PointerFromQVariant(value)) != 0
	}
	return false
}

func (ptr *QCameraExposureControl) DestroyQCameraExposureControl() {
	defer qt.Recovering("QCameraExposureControl::~QCameraExposureControl")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_DestroyQCameraExposureControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraExposureControl_TimerEvent
func callbackQCameraExposureControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposureControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraExposureControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraExposureControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraExposureControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::timerEvent", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraExposureControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::timerEvent")
	}
}

func (ptr *QCameraExposureControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraExposureControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraExposureControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraExposureControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraExposureControl_ChildEvent
func callbackQCameraExposureControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposureControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraExposureControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraExposureControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraExposureControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::childEvent", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraExposureControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::childEvent")
	}
}

func (ptr *QCameraExposureControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraExposureControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraExposureControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraExposureControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraExposureControl_ConnectNotify
func callbackQCameraExposureControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposureControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraExposureControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraExposureControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraExposureControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::connectNotify", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraExposureControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::connectNotify")
	}
}

func (ptr *QCameraExposureControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraExposureControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraExposureControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraExposureControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraExposureControl_CustomEvent
func callbackQCameraExposureControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposureControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraExposureControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraExposureControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraExposureControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::customEvent", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraExposureControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::customEvent")
	}
}

func (ptr *QCameraExposureControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraExposureControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraExposureControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraExposureControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraExposureControl_DeleteLater
func callbackQCameraExposureControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposureControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraExposureControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraExposureControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraExposureControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::deleteLater", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraExposureControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::deleteLater")
	}
}

func (ptr *QCameraExposureControl) DeleteLater() {
	defer qt.Recovering("QCameraExposureControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraExposureControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraExposureControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraExposureControl_DisconnectNotify
func callbackQCameraExposureControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraExposureControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraExposureControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraExposureControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraExposureControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::disconnectNotify", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraExposureControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::disconnectNotify")
	}
}

func (ptr *QCameraExposureControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraExposureControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraExposureControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraExposureControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraExposureControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraExposureControl_Event
func callbackQCameraExposureControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraExposureControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraExposureControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraExposureControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraExposureControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::event", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraExposureControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::event")
	}
}

func (ptr *QCameraExposureControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraExposureControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraExposureControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraExposureControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraExposureControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraExposureControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraExposureControl_EventFilter
func callbackQCameraExposureControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraExposureControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraExposureControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraExposureControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraExposureControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::eventFilter", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraExposureControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::eventFilter")
	}
}

func (ptr *QCameraExposureControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraExposureControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraExposureControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraExposureControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraExposureControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraExposureControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraExposureControl_MetaObject
func callbackQCameraExposureControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraExposureControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraExposureControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraExposureControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraExposureControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraExposureControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::metaObject", f)
	}
}

func (ptr *QCameraExposureControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraExposureControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraExposureControl::metaObject")
	}
}

func (ptr *QCameraExposureControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraExposureControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraExposureControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraExposureControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraExposureControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraExposureControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCameraFeedbackControl::EventType
type QCameraFeedbackControl__EventType int64

const (
	QCameraFeedbackControl__ViewfinderStarted   = QCameraFeedbackControl__EventType(1)
	QCameraFeedbackControl__ViewfinderStopped   = QCameraFeedbackControl__EventType(2)
	QCameraFeedbackControl__ImageCaptured       = QCameraFeedbackControl__EventType(3)
	QCameraFeedbackControl__ImageSaved          = QCameraFeedbackControl__EventType(4)
	QCameraFeedbackControl__ImageError          = QCameraFeedbackControl__EventType(5)
	QCameraFeedbackControl__RecordingStarted    = QCameraFeedbackControl__EventType(6)
	QCameraFeedbackControl__RecordingInProgress = QCameraFeedbackControl__EventType(7)
	QCameraFeedbackControl__RecordingStopped    = QCameraFeedbackControl__EventType(8)
	QCameraFeedbackControl__AutoFocusInProgress = QCameraFeedbackControl__EventType(9)
	QCameraFeedbackControl__AutoFocusLocked     = QCameraFeedbackControl__EventType(10)
	QCameraFeedbackControl__AutoFocusFailed     = QCameraFeedbackControl__EventType(11)
)

type QCameraFeedbackControl struct {
	QMediaControl
}

type QCameraFeedbackControl_ITF interface {
	QMediaControl_ITF
	QCameraFeedbackControl_PTR() *QCameraFeedbackControl
}

func (p *QCameraFeedbackControl) QCameraFeedbackControl_PTR() *QCameraFeedbackControl {
	return p
}

func (p *QCameraFeedbackControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraFeedbackControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraFeedbackControl(ptr QCameraFeedbackControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraFeedbackControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraFeedbackControlFromPointer(ptr unsafe.Pointer) *QCameraFeedbackControl {
	var n = new(QCameraFeedbackControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraFeedbackControl(parent core.QObject_ITF) *QCameraFeedbackControl {
	defer qt.Recovering("QCameraFeedbackControl::QCameraFeedbackControl")

	var tmpValue = NewQCameraFeedbackControlFromPointer(C.QCameraFeedbackControl_NewQCameraFeedbackControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraFeedbackControl_IsEventFeedbackEnabled
func callbackQCameraFeedbackControl_IsEventFeedbackEnabled(ptr unsafe.Pointer, event C.longlong) C.char {
	defer qt.Recovering("callback QCameraFeedbackControl::isEventFeedbackEnabled")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::isEventFeedbackEnabled"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraFeedbackControl__EventType) bool)(QCameraFeedbackControl__EventType(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraFeedbackControl) ConnectIsEventFeedbackEnabled(f func(event QCameraFeedbackControl__EventType) bool) {
	defer qt.Recovering("connect QCameraFeedbackControl::isEventFeedbackEnabled")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::isEventFeedbackEnabled", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectIsEventFeedbackEnabled(event QCameraFeedbackControl__EventType) {
	defer qt.Recovering("disconnect QCameraFeedbackControl::isEventFeedbackEnabled")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::isEventFeedbackEnabled")
	}
}

func (ptr *QCameraFeedbackControl) IsEventFeedbackEnabled(event QCameraFeedbackControl__EventType) bool {
	defer qt.Recovering("QCameraFeedbackControl::isEventFeedbackEnabled")

	if ptr.Pointer() != nil {
		return C.QCameraFeedbackControl_IsEventFeedbackEnabled(ptr.Pointer(), C.longlong(event)) != 0
	}
	return false
}

//export callbackQCameraFeedbackControl_IsEventFeedbackLocked
func callbackQCameraFeedbackControl_IsEventFeedbackLocked(ptr unsafe.Pointer, event C.longlong) C.char {
	defer qt.Recovering("callback QCameraFeedbackControl::isEventFeedbackLocked")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::isEventFeedbackLocked"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraFeedbackControl__EventType) bool)(QCameraFeedbackControl__EventType(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraFeedbackControl) ConnectIsEventFeedbackLocked(f func(event QCameraFeedbackControl__EventType) bool) {
	defer qt.Recovering("connect QCameraFeedbackControl::isEventFeedbackLocked")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::isEventFeedbackLocked", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectIsEventFeedbackLocked(event QCameraFeedbackControl__EventType) {
	defer qt.Recovering("disconnect QCameraFeedbackControl::isEventFeedbackLocked")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::isEventFeedbackLocked")
	}
}

func (ptr *QCameraFeedbackControl) IsEventFeedbackLocked(event QCameraFeedbackControl__EventType) bool {
	defer qt.Recovering("QCameraFeedbackControl::isEventFeedbackLocked")

	if ptr.Pointer() != nil {
		return C.QCameraFeedbackControl_IsEventFeedbackLocked(ptr.Pointer(), C.longlong(event)) != 0
	}
	return false
}

//export callbackQCameraFeedbackControl_ResetEventFeedback
func callbackQCameraFeedbackControl_ResetEventFeedback(ptr unsafe.Pointer, event C.longlong) {
	defer qt.Recovering("callback QCameraFeedbackControl::resetEventFeedback")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::resetEventFeedback"); signal != nil {
		signal.(func(QCameraFeedbackControl__EventType))(QCameraFeedbackControl__EventType(event))
	}

}

func (ptr *QCameraFeedbackControl) ConnectResetEventFeedback(f func(event QCameraFeedbackControl__EventType)) {
	defer qt.Recovering("connect QCameraFeedbackControl::resetEventFeedback")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::resetEventFeedback", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectResetEventFeedback(event QCameraFeedbackControl__EventType) {
	defer qt.Recovering("disconnect QCameraFeedbackControl::resetEventFeedback")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::resetEventFeedback")
	}
}

func (ptr *QCameraFeedbackControl) ResetEventFeedback(event QCameraFeedbackControl__EventType) {
	defer qt.Recovering("QCameraFeedbackControl::resetEventFeedback")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_ResetEventFeedback(ptr.Pointer(), C.longlong(event))
	}
}

//export callbackQCameraFeedbackControl_SetEventFeedbackEnabled
func callbackQCameraFeedbackControl_SetEventFeedbackEnabled(ptr unsafe.Pointer, event C.longlong, enabled C.char) C.char {
	defer qt.Recovering("callback QCameraFeedbackControl::setEventFeedbackEnabled")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::setEventFeedbackEnabled"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraFeedbackControl__EventType, bool) bool)(QCameraFeedbackControl__EventType(event), int8(enabled) != 0))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraFeedbackControl) ConnectSetEventFeedbackEnabled(f func(event QCameraFeedbackControl__EventType, enabled bool) bool) {
	defer qt.Recovering("connect QCameraFeedbackControl::setEventFeedbackEnabled")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::setEventFeedbackEnabled", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectSetEventFeedbackEnabled(event QCameraFeedbackControl__EventType, enabled bool) {
	defer qt.Recovering("disconnect QCameraFeedbackControl::setEventFeedbackEnabled")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::setEventFeedbackEnabled")
	}
}

func (ptr *QCameraFeedbackControl) SetEventFeedbackEnabled(event QCameraFeedbackControl__EventType, enabled bool) bool {
	defer qt.Recovering("QCameraFeedbackControl::setEventFeedbackEnabled")

	if ptr.Pointer() != nil {
		return C.QCameraFeedbackControl_SetEventFeedbackEnabled(ptr.Pointer(), C.longlong(event), C.char(int8(qt.GoBoolToInt(enabled)))) != 0
	}
	return false
}

//export callbackQCameraFeedbackControl_SetEventFeedbackSound
func callbackQCameraFeedbackControl_SetEventFeedbackSound(ptr unsafe.Pointer, event C.longlong, filePath *C.char) C.char {
	defer qt.Recovering("callback QCameraFeedbackControl::setEventFeedbackSound")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::setEventFeedbackSound"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraFeedbackControl__EventType, string) bool)(QCameraFeedbackControl__EventType(event), C.GoString(filePath)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraFeedbackControl) ConnectSetEventFeedbackSound(f func(event QCameraFeedbackControl__EventType, filePath string) bool) {
	defer qt.Recovering("connect QCameraFeedbackControl::setEventFeedbackSound")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::setEventFeedbackSound", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectSetEventFeedbackSound(event QCameraFeedbackControl__EventType, filePath string) {
	defer qt.Recovering("disconnect QCameraFeedbackControl::setEventFeedbackSound")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::setEventFeedbackSound")
	}
}

func (ptr *QCameraFeedbackControl) SetEventFeedbackSound(event QCameraFeedbackControl__EventType, filePath string) bool {
	defer qt.Recovering("QCameraFeedbackControl::setEventFeedbackSound")

	if ptr.Pointer() != nil {
		var filePathC = C.CString(filePath)
		defer C.free(unsafe.Pointer(filePathC))
		return C.QCameraFeedbackControl_SetEventFeedbackSound(ptr.Pointer(), C.longlong(event), filePathC) != 0
	}
	return false
}

func (ptr *QCameraFeedbackControl) DestroyQCameraFeedbackControl() {
	defer qt.Recovering("QCameraFeedbackControl::~QCameraFeedbackControl")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_DestroyQCameraFeedbackControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraFeedbackControl_TimerEvent
func callbackQCameraFeedbackControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFeedbackControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraFeedbackControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraFeedbackControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraFeedbackControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::timerEvent", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraFeedbackControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::timerEvent")
	}
}

func (ptr *QCameraFeedbackControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraFeedbackControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraFeedbackControl_ChildEvent
func callbackQCameraFeedbackControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFeedbackControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraFeedbackControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraFeedbackControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraFeedbackControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::childEvent", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraFeedbackControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::childEvent")
	}
}

func (ptr *QCameraFeedbackControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraFeedbackControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraFeedbackControl_ConnectNotify
func callbackQCameraFeedbackControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFeedbackControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFeedbackControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraFeedbackControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraFeedbackControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::connectNotify", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraFeedbackControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::connectNotify")
	}
}

func (ptr *QCameraFeedbackControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraFeedbackControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraFeedbackControl_CustomEvent
func callbackQCameraFeedbackControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFeedbackControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraFeedbackControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraFeedbackControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraFeedbackControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::customEvent", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraFeedbackControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::customEvent")
	}
}

func (ptr *QCameraFeedbackControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraFeedbackControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraFeedbackControl_DeleteLater
func callbackQCameraFeedbackControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFeedbackControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraFeedbackControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraFeedbackControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraFeedbackControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::deleteLater", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraFeedbackControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::deleteLater")
	}
}

func (ptr *QCameraFeedbackControl) DeleteLater() {
	defer qt.Recovering("QCameraFeedbackControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraFeedbackControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraFeedbackControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraFeedbackControl_DisconnectNotify
func callbackQCameraFeedbackControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFeedbackControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFeedbackControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraFeedbackControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraFeedbackControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::disconnectNotify", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraFeedbackControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::disconnectNotify")
	}
}

func (ptr *QCameraFeedbackControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraFeedbackControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFeedbackControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFeedbackControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraFeedbackControl_Event
func callbackQCameraFeedbackControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraFeedbackControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFeedbackControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraFeedbackControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraFeedbackControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::event", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraFeedbackControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::event")
	}
}

func (ptr *QCameraFeedbackControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFeedbackControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraFeedbackControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraFeedbackControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFeedbackControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraFeedbackControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraFeedbackControl_EventFilter
func callbackQCameraFeedbackControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraFeedbackControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFeedbackControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraFeedbackControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraFeedbackControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::eventFilter", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraFeedbackControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::eventFilter")
	}
}

func (ptr *QCameraFeedbackControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFeedbackControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraFeedbackControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraFeedbackControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFeedbackControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraFeedbackControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraFeedbackControl_MetaObject
func callbackQCameraFeedbackControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraFeedbackControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFeedbackControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraFeedbackControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraFeedbackControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraFeedbackControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::metaObject", f)
	}
}

func (ptr *QCameraFeedbackControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraFeedbackControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFeedbackControl::metaObject")
	}
}

func (ptr *QCameraFeedbackControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraFeedbackControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraFeedbackControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraFeedbackControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraFeedbackControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraFeedbackControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraFlashControl struct {
	QMediaControl
}

type QCameraFlashControl_ITF interface {
	QMediaControl_ITF
	QCameraFlashControl_PTR() *QCameraFlashControl
}

func (p *QCameraFlashControl) QCameraFlashControl_PTR() *QCameraFlashControl {
	return p
}

func (p *QCameraFlashControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraFlashControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraFlashControl(ptr QCameraFlashControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraFlashControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraFlashControlFromPointer(ptr unsafe.Pointer) *QCameraFlashControl {
	var n = new(QCameraFlashControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraFlashControl(parent core.QObject_ITF) *QCameraFlashControl {
	defer qt.Recovering("QCameraFlashControl::QCameraFlashControl")

	var tmpValue = NewQCameraFlashControlFromPointer(C.QCameraFlashControl_NewQCameraFlashControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraFlashControl_FlashMode
func callbackQCameraFlashControl_FlashMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraFlashControl::flashMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::flashMode"); signal != nil {
		return C.longlong(signal.(func() QCameraExposure__FlashMode)())
	}

	return C.longlong(0)
}

func (ptr *QCameraFlashControl) ConnectFlashMode(f func() QCameraExposure__FlashMode) {
	defer qt.Recovering("connect QCameraFlashControl::flashMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::flashMode", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectFlashMode() {
	defer qt.Recovering("disconnect QCameraFlashControl::flashMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::flashMode")
	}
}

func (ptr *QCameraFlashControl) FlashMode() QCameraExposure__FlashMode {
	defer qt.Recovering("QCameraFlashControl::flashMode")

	if ptr.Pointer() != nil {
		return QCameraExposure__FlashMode(C.QCameraFlashControl_FlashMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraFlashControl_FlashReady
func callbackQCameraFlashControl_FlashReady(ptr unsafe.Pointer, ready C.char) {
	defer qt.Recovering("callback QCameraFlashControl::flashReady")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::flashReady"); signal != nil {
		signal.(func(bool))(int8(ready) != 0)
	}

}

func (ptr *QCameraFlashControl) ConnectFlashReady(f func(ready bool)) {
	defer qt.Recovering("connect QCameraFlashControl::flashReady")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_ConnectFlashReady(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::flashReady", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectFlashReady() {
	defer qt.Recovering("disconnect QCameraFlashControl::flashReady")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_DisconnectFlashReady(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::flashReady")
	}
}

func (ptr *QCameraFlashControl) FlashReady(ready bool) {
	defer qt.Recovering("QCameraFlashControl::flashReady")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_FlashReady(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ready))))
	}
}

//export callbackQCameraFlashControl_IsFlashModeSupported
func callbackQCameraFlashControl_IsFlashModeSupported(ptr unsafe.Pointer, mode C.longlong) C.char {
	defer qt.Recovering("callback QCameraFlashControl::isFlashModeSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::isFlashModeSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraExposure__FlashMode) bool)(QCameraExposure__FlashMode(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraFlashControl) ConnectIsFlashModeSupported(f func(mode QCameraExposure__FlashMode) bool) {
	defer qt.Recovering("connect QCameraFlashControl::isFlashModeSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::isFlashModeSupported", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectIsFlashModeSupported(mode QCameraExposure__FlashMode) {
	defer qt.Recovering("disconnect QCameraFlashControl::isFlashModeSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::isFlashModeSupported")
	}
}

func (ptr *QCameraFlashControl) IsFlashModeSupported(mode QCameraExposure__FlashMode) bool {
	defer qt.Recovering("QCameraFlashControl::isFlashModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraFlashControl_IsFlashModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

//export callbackQCameraFlashControl_IsFlashReady
func callbackQCameraFlashControl_IsFlashReady(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraFlashControl::isFlashReady")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::isFlashReady"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraFlashControl) ConnectIsFlashReady(f func() bool) {
	defer qt.Recovering("connect QCameraFlashControl::isFlashReady")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::isFlashReady", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectIsFlashReady() {
	defer qt.Recovering("disconnect QCameraFlashControl::isFlashReady")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::isFlashReady")
	}
}

func (ptr *QCameraFlashControl) IsFlashReady() bool {
	defer qt.Recovering("QCameraFlashControl::isFlashReady")

	if ptr.Pointer() != nil {
		return C.QCameraFlashControl_IsFlashReady(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQCameraFlashControl_SetFlashMode
func callbackQCameraFlashControl_SetFlashMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraFlashControl::setFlashMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::setFlashMode"); signal != nil {
		signal.(func(QCameraExposure__FlashMode))(QCameraExposure__FlashMode(mode))
	}

}

func (ptr *QCameraFlashControl) ConnectSetFlashMode(f func(mode QCameraExposure__FlashMode)) {
	defer qt.Recovering("connect QCameraFlashControl::setFlashMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::setFlashMode", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectSetFlashMode(mode QCameraExposure__FlashMode) {
	defer qt.Recovering("disconnect QCameraFlashControl::setFlashMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::setFlashMode")
	}
}

func (ptr *QCameraFlashControl) SetFlashMode(mode QCameraExposure__FlashMode) {
	defer qt.Recovering("QCameraFlashControl::setFlashMode")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_SetFlashMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QCameraFlashControl) DestroyQCameraFlashControl() {
	defer qt.Recovering("QCameraFlashControl::~QCameraFlashControl")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_DestroyQCameraFlashControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraFlashControl_TimerEvent
func callbackQCameraFlashControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFlashControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraFlashControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraFlashControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraFlashControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::timerEvent", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraFlashControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::timerEvent")
	}
}

func (ptr *QCameraFlashControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraFlashControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraFlashControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraFlashControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraFlashControl_ChildEvent
func callbackQCameraFlashControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFlashControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraFlashControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraFlashControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraFlashControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::childEvent", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraFlashControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::childEvent")
	}
}

func (ptr *QCameraFlashControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraFlashControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraFlashControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraFlashControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraFlashControl_ConnectNotify
func callbackQCameraFlashControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFlashControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFlashControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraFlashControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraFlashControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::connectNotify", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraFlashControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::connectNotify")
	}
}

func (ptr *QCameraFlashControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFlashControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraFlashControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFlashControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraFlashControl_CustomEvent
func callbackQCameraFlashControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFlashControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraFlashControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraFlashControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraFlashControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::customEvent", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraFlashControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::customEvent")
	}
}

func (ptr *QCameraFlashControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraFlashControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraFlashControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraFlashControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraFlashControl_DeleteLater
func callbackQCameraFlashControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFlashControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraFlashControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraFlashControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraFlashControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::deleteLater", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraFlashControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::deleteLater")
	}
}

func (ptr *QCameraFlashControl) DeleteLater() {
	defer qt.Recovering("QCameraFlashControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraFlashControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraFlashControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraFlashControl_DisconnectNotify
func callbackQCameraFlashControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFlashControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFlashControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraFlashControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraFlashControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::disconnectNotify", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraFlashControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::disconnectNotify")
	}
}

func (ptr *QCameraFlashControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFlashControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraFlashControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFlashControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFlashControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraFlashControl_Event
func callbackQCameraFlashControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraFlashControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFlashControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraFlashControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraFlashControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::event", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraFlashControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::event")
	}
}

func (ptr *QCameraFlashControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFlashControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraFlashControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraFlashControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFlashControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraFlashControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraFlashControl_EventFilter
func callbackQCameraFlashControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraFlashControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFlashControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraFlashControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraFlashControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::eventFilter", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraFlashControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::eventFilter")
	}
}

func (ptr *QCameraFlashControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFlashControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraFlashControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraFlashControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFlashControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraFlashControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraFlashControl_MetaObject
func callbackQCameraFlashControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraFlashControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFlashControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraFlashControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraFlashControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraFlashControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::metaObject", f)
	}
}

func (ptr *QCameraFlashControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraFlashControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFlashControl::metaObject")
	}
}

func (ptr *QCameraFlashControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraFlashControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraFlashControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraFlashControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraFlashControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraFlashControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCameraFocus::FocusMode
type QCameraFocus__FocusMode int64

const (
	QCameraFocus__ManualFocus     = QCameraFocus__FocusMode(0x1)
	QCameraFocus__HyperfocalFocus = QCameraFocus__FocusMode(0x02)
	QCameraFocus__InfinityFocus   = QCameraFocus__FocusMode(0x04)
	QCameraFocus__AutoFocus       = QCameraFocus__FocusMode(0x8)
	QCameraFocus__ContinuousFocus = QCameraFocus__FocusMode(0x10)
	QCameraFocus__MacroFocus      = QCameraFocus__FocusMode(0x20)
)

//QCameraFocus::FocusPointMode
type QCameraFocus__FocusPointMode int64

const (
	QCameraFocus__FocusPointAuto          = QCameraFocus__FocusPointMode(0)
	QCameraFocus__FocusPointCenter        = QCameraFocus__FocusPointMode(1)
	QCameraFocus__FocusPointFaceDetection = QCameraFocus__FocusPointMode(2)
	QCameraFocus__FocusPointCustom        = QCameraFocus__FocusPointMode(3)
)

type QCameraFocus struct {
	core.QObject
}

type QCameraFocus_ITF interface {
	core.QObject_ITF
	QCameraFocus_PTR() *QCameraFocus
}

func (p *QCameraFocus) QCameraFocus_PTR() *QCameraFocus {
	return p
}

func (p *QCameraFocus) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QCameraFocus) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraFocus(ptr QCameraFocus_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraFocus_PTR().Pointer()
	}
	return nil
}

func NewQCameraFocusFromPointer(ptr unsafe.Pointer) *QCameraFocus {
	var n = new(QCameraFocus)
	n.SetPointer(ptr)
	return n
}

func (ptr *QCameraFocus) DestroyQCameraFocus() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QCameraFocus) CustomFocusPoint() *core.QPointF {
	defer qt.Recovering("QCameraFocus::customFocusPoint")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QCameraFocus_CustomFocusPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QCameraFocus) DigitalZoom() float64 {
	defer qt.Recovering("QCameraFocus::digitalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraFocus_DigitalZoom(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraFocus) FocusMode() QCameraFocus__FocusMode {
	defer qt.Recovering("QCameraFocus::focusMode")

	if ptr.Pointer() != nil {
		return QCameraFocus__FocusMode(C.QCameraFocus_FocusMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraFocus) FocusPointMode() QCameraFocus__FocusPointMode {
	defer qt.Recovering("QCameraFocus::focusPointMode")

	if ptr.Pointer() != nil {
		return QCameraFocus__FocusPointMode(C.QCameraFocus_FocusPointMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraFocus) OpticalZoom() float64 {
	defer qt.Recovering("QCameraFocus::opticalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraFocus_OpticalZoom(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraFocus) SetCustomFocusPoint(point core.QPointF_ITF) {
	defer qt.Recovering("QCameraFocus::setCustomFocusPoint")

	if ptr.Pointer() != nil {
		C.QCameraFocus_SetCustomFocusPoint(ptr.Pointer(), core.PointerFromQPointF(point))
	}
}

func (ptr *QCameraFocus) SetFocusMode(mode QCameraFocus__FocusMode) {
	defer qt.Recovering("QCameraFocus::setFocusMode")

	if ptr.Pointer() != nil {
		C.QCameraFocus_SetFocusMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QCameraFocus) SetFocusPointMode(mode QCameraFocus__FocusPointMode) {
	defer qt.Recovering("QCameraFocus::setFocusPointMode")

	if ptr.Pointer() != nil {
		C.QCameraFocus_SetFocusPointMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCameraFocus_DigitalZoomChanged
func callbackQCameraFocus_DigitalZoomChanged(ptr unsafe.Pointer, value C.double) {
	defer qt.Recovering("callback QCameraFocus::digitalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::digitalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(value))
	}

}

func (ptr *QCameraFocus) ConnectDigitalZoomChanged(f func(value float64)) {
	defer qt.Recovering("connect QCameraFocus::digitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ConnectDigitalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::digitalZoomChanged", f)
	}
}

func (ptr *QCameraFocus) DisconnectDigitalZoomChanged() {
	defer qt.Recovering("disconnect QCameraFocus::digitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DisconnectDigitalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::digitalZoomChanged")
	}
}

func (ptr *QCameraFocus) DigitalZoomChanged(value float64) {
	defer qt.Recovering("QCameraFocus::digitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DigitalZoomChanged(ptr.Pointer(), C.double(value))
	}
}

//export callbackQCameraFocus_FocusZonesChanged
func callbackQCameraFocus_FocusZonesChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocus::focusZonesChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::focusZonesChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCameraFocus) ConnectFocusZonesChanged(f func()) {
	defer qt.Recovering("connect QCameraFocus::focusZonesChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ConnectFocusZonesChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::focusZonesChanged", f)
	}
}

func (ptr *QCameraFocus) DisconnectFocusZonesChanged() {
	defer qt.Recovering("disconnect QCameraFocus::focusZonesChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DisconnectFocusZonesChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::focusZonesChanged")
	}
}

func (ptr *QCameraFocus) FocusZonesChanged() {
	defer qt.Recovering("QCameraFocus::focusZonesChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_FocusZonesChanged(ptr.Pointer())
	}
}

func (ptr *QCameraFocus) IsAvailable() bool {
	defer qt.Recovering("QCameraFocus::isAvailable")

	if ptr.Pointer() != nil {
		return C.QCameraFocus_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraFocus) IsFocusModeSupported(mode QCameraFocus__FocusMode) bool {
	defer qt.Recovering("QCameraFocus::isFocusModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraFocus_IsFocusModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QCameraFocus) IsFocusPointModeSupported(mode QCameraFocus__FocusPointMode) bool {
	defer qt.Recovering("QCameraFocus::isFocusPointModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraFocus_IsFocusPointModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QCameraFocus) MaximumDigitalZoom() float64 {
	defer qt.Recovering("QCameraFocus::maximumDigitalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraFocus_MaximumDigitalZoom(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraFocus_MaximumDigitalZoomChanged
func callbackQCameraFocus_MaximumDigitalZoomChanged(ptr unsafe.Pointer, zoom C.double) {
	defer qt.Recovering("callback QCameraFocus::maximumDigitalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::maximumDigitalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(zoom))
	}

}

func (ptr *QCameraFocus) ConnectMaximumDigitalZoomChanged(f func(zoom float64)) {
	defer qt.Recovering("connect QCameraFocus::maximumDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ConnectMaximumDigitalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::maximumDigitalZoomChanged", f)
	}
}

func (ptr *QCameraFocus) DisconnectMaximumDigitalZoomChanged() {
	defer qt.Recovering("disconnect QCameraFocus::maximumDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DisconnectMaximumDigitalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::maximumDigitalZoomChanged")
	}
}

func (ptr *QCameraFocus) MaximumDigitalZoomChanged(zoom float64) {
	defer qt.Recovering("QCameraFocus::maximumDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_MaximumDigitalZoomChanged(ptr.Pointer(), C.double(zoom))
	}
}

func (ptr *QCameraFocus) MaximumOpticalZoom() float64 {
	defer qt.Recovering("QCameraFocus::maximumOpticalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraFocus_MaximumOpticalZoom(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraFocus_MaximumOpticalZoomChanged
func callbackQCameraFocus_MaximumOpticalZoomChanged(ptr unsafe.Pointer, zoom C.double) {
	defer qt.Recovering("callback QCameraFocus::maximumOpticalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::maximumOpticalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(zoom))
	}

}

func (ptr *QCameraFocus) ConnectMaximumOpticalZoomChanged(f func(zoom float64)) {
	defer qt.Recovering("connect QCameraFocus::maximumOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ConnectMaximumOpticalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::maximumOpticalZoomChanged", f)
	}
}

func (ptr *QCameraFocus) DisconnectMaximumOpticalZoomChanged() {
	defer qt.Recovering("disconnect QCameraFocus::maximumOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DisconnectMaximumOpticalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::maximumOpticalZoomChanged")
	}
}

func (ptr *QCameraFocus) MaximumOpticalZoomChanged(zoom float64) {
	defer qt.Recovering("QCameraFocus::maximumOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_MaximumOpticalZoomChanged(ptr.Pointer(), C.double(zoom))
	}
}

//export callbackQCameraFocus_OpticalZoomChanged
func callbackQCameraFocus_OpticalZoomChanged(ptr unsafe.Pointer, value C.double) {
	defer qt.Recovering("callback QCameraFocus::opticalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::opticalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(value))
	}

}

func (ptr *QCameraFocus) ConnectOpticalZoomChanged(f func(value float64)) {
	defer qt.Recovering("connect QCameraFocus::opticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ConnectOpticalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::opticalZoomChanged", f)
	}
}

func (ptr *QCameraFocus) DisconnectOpticalZoomChanged() {
	defer qt.Recovering("disconnect QCameraFocus::opticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DisconnectOpticalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::opticalZoomChanged")
	}
}

func (ptr *QCameraFocus) OpticalZoomChanged(value float64) {
	defer qt.Recovering("QCameraFocus::opticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocus_OpticalZoomChanged(ptr.Pointer(), C.double(value))
	}
}

func (ptr *QCameraFocus) ZoomTo(optical float64, digital float64) {
	defer qt.Recovering("QCameraFocus::zoomTo")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ZoomTo(ptr.Pointer(), C.double(optical), C.double(digital))
	}
}

//export callbackQCameraFocus_TimerEvent
func callbackQCameraFocus_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocus::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraFocusFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraFocus) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraFocus::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::timerEvent", f)
	}
}

func (ptr *QCameraFocus) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraFocus::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::timerEvent")
	}
}

func (ptr *QCameraFocus) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraFocus::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocus_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraFocus) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraFocus::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocus_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraFocus_ChildEvent
func callbackQCameraFocus_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocus::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraFocusFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraFocus) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraFocus::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::childEvent", f)
	}
}

func (ptr *QCameraFocus) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraFocus::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::childEvent")
	}
}

func (ptr *QCameraFocus) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraFocus::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraFocus) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraFocus::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraFocus_ConnectNotify
func callbackQCameraFocus_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocus::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFocusFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraFocus) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraFocus::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::connectNotify", f)
	}
}

func (ptr *QCameraFocus) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraFocus::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::connectNotify")
	}
}

func (ptr *QCameraFocus) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFocus::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraFocus) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFocus::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFocus_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraFocus_CustomEvent
func callbackQCameraFocus_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocus::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraFocusFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraFocus) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraFocus::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::customEvent", f)
	}
}

func (ptr *QCameraFocus) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraFocus::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::customEvent")
	}
}

func (ptr *QCameraFocus) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraFocus::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocus_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraFocus) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraFocus::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocus_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraFocus_DeleteLater
func callbackQCameraFocus_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocus::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraFocusFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraFocus) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraFocus::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::deleteLater", f)
	}
}

func (ptr *QCameraFocus) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraFocus::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::deleteLater")
	}
}

func (ptr *QCameraFocus) DeleteLater() {
	defer qt.Recovering("QCameraFocus::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraFocus) DeleteLaterDefault() {
	defer qt.Recovering("QCameraFocus::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraFocus_DisconnectNotify
func callbackQCameraFocus_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocus::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFocusFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraFocus) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraFocus::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::disconnectNotify", f)
	}
}

func (ptr *QCameraFocus) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraFocus::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::disconnectNotify")
	}
}

func (ptr *QCameraFocus) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFocus::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraFocus) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFocus::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFocus_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraFocus_Event
func callbackQCameraFocus_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraFocus::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFocusFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraFocus) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraFocus::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::event", f)
	}
}

func (ptr *QCameraFocus) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraFocus::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::event")
	}
}

func (ptr *QCameraFocus) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFocus::event")

	if ptr.Pointer() != nil {
		return C.QCameraFocus_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraFocus) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFocus::event")

	if ptr.Pointer() != nil {
		return C.QCameraFocus_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraFocus_EventFilter
func callbackQCameraFocus_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraFocus::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFocusFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraFocus) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraFocus::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::eventFilter", f)
	}
}

func (ptr *QCameraFocus) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraFocus::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::eventFilter")
	}
}

func (ptr *QCameraFocus) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFocus::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraFocus_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraFocus) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFocus::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraFocus_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraFocus_MetaObject
func callbackQCameraFocus_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraFocus::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocus::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraFocusFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraFocus) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraFocus::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::metaObject", f)
	}
}

func (ptr *QCameraFocus) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraFocus::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocus::metaObject")
	}
}

func (ptr *QCameraFocus) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraFocus::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraFocus_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraFocus) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraFocus::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraFocus_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraFocusControl struct {
	QMediaControl
}

type QCameraFocusControl_ITF interface {
	QMediaControl_ITF
	QCameraFocusControl_PTR() *QCameraFocusControl
}

func (p *QCameraFocusControl) QCameraFocusControl_PTR() *QCameraFocusControl {
	return p
}

func (p *QCameraFocusControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraFocusControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraFocusControl(ptr QCameraFocusControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraFocusControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraFocusControlFromPointer(ptr unsafe.Pointer) *QCameraFocusControl {
	var n = new(QCameraFocusControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQCameraFocusControl_CustomFocusPoint
func callbackQCameraFocusControl_CustomFocusPoint(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraFocusControl::customFocusPoint")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::customFocusPoint"); signal != nil {
		return core.PointerFromQPointF(signal.(func() *core.QPointF)())
	}

	return core.PointerFromQPointF(nil)
}

func (ptr *QCameraFocusControl) ConnectCustomFocusPoint(f func() *core.QPointF) {
	defer qt.Recovering("connect QCameraFocusControl::customFocusPoint")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::customFocusPoint", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectCustomFocusPoint() {
	defer qt.Recovering("disconnect QCameraFocusControl::customFocusPoint")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::customFocusPoint")
	}
}

func (ptr *QCameraFocusControl) CustomFocusPoint() *core.QPointF {
	defer qt.Recovering("QCameraFocusControl::customFocusPoint")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QCameraFocusControl_CustomFocusPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

//export callbackQCameraFocusControl_CustomFocusPointChanged
func callbackQCameraFocusControl_CustomFocusPointChanged(ptr unsafe.Pointer, point unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocusControl::customFocusPointChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::customFocusPointChanged"); signal != nil {
		signal.(func(*core.QPointF))(core.NewQPointFFromPointer(point))
	}

}

func (ptr *QCameraFocusControl) ConnectCustomFocusPointChanged(f func(point *core.QPointF)) {
	defer qt.Recovering("connect QCameraFocusControl::customFocusPointChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_ConnectCustomFocusPointChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::customFocusPointChanged", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectCustomFocusPointChanged() {
	defer qt.Recovering("disconnect QCameraFocusControl::customFocusPointChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_DisconnectCustomFocusPointChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::customFocusPointChanged")
	}
}

func (ptr *QCameraFocusControl) CustomFocusPointChanged(point core.QPointF_ITF) {
	defer qt.Recovering("QCameraFocusControl::customFocusPointChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_CustomFocusPointChanged(ptr.Pointer(), core.PointerFromQPointF(point))
	}
}

//export callbackQCameraFocusControl_FocusMode
func callbackQCameraFocusControl_FocusMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraFocusControl::focusMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::focusMode"); signal != nil {
		return C.longlong(signal.(func() QCameraFocus__FocusMode)())
	}

	return C.longlong(0)
}

func (ptr *QCameraFocusControl) ConnectFocusMode(f func() QCameraFocus__FocusMode) {
	defer qt.Recovering("connect QCameraFocusControl::focusMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusMode", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectFocusMode() {
	defer qt.Recovering("disconnect QCameraFocusControl::focusMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusMode")
	}
}

func (ptr *QCameraFocusControl) FocusMode() QCameraFocus__FocusMode {
	defer qt.Recovering("QCameraFocusControl::focusMode")

	if ptr.Pointer() != nil {
		return QCameraFocus__FocusMode(C.QCameraFocusControl_FocusMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraFocusControl_FocusModeChanged
func callbackQCameraFocusControl_FocusModeChanged(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraFocusControl::focusModeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::focusModeChanged"); signal != nil {
		signal.(func(QCameraFocus__FocusMode))(QCameraFocus__FocusMode(mode))
	}

}

func (ptr *QCameraFocusControl) ConnectFocusModeChanged(f func(mode QCameraFocus__FocusMode)) {
	defer qt.Recovering("connect QCameraFocusControl::focusModeChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_ConnectFocusModeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusModeChanged", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectFocusModeChanged() {
	defer qt.Recovering("disconnect QCameraFocusControl::focusModeChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_DisconnectFocusModeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusModeChanged")
	}
}

func (ptr *QCameraFocusControl) FocusModeChanged(mode QCameraFocus__FocusMode) {
	defer qt.Recovering("QCameraFocusControl::focusModeChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_FocusModeChanged(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCameraFocusControl_FocusPointMode
func callbackQCameraFocusControl_FocusPointMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraFocusControl::focusPointMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::focusPointMode"); signal != nil {
		return C.longlong(signal.(func() QCameraFocus__FocusPointMode)())
	}

	return C.longlong(0)
}

func (ptr *QCameraFocusControl) ConnectFocusPointMode(f func() QCameraFocus__FocusPointMode) {
	defer qt.Recovering("connect QCameraFocusControl::focusPointMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusPointMode", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectFocusPointMode() {
	defer qt.Recovering("disconnect QCameraFocusControl::focusPointMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusPointMode")
	}
}

func (ptr *QCameraFocusControl) FocusPointMode() QCameraFocus__FocusPointMode {
	defer qt.Recovering("QCameraFocusControl::focusPointMode")

	if ptr.Pointer() != nil {
		return QCameraFocus__FocusPointMode(C.QCameraFocusControl_FocusPointMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraFocusControl_FocusPointModeChanged
func callbackQCameraFocusControl_FocusPointModeChanged(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraFocusControl::focusPointModeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::focusPointModeChanged"); signal != nil {
		signal.(func(QCameraFocus__FocusPointMode))(QCameraFocus__FocusPointMode(mode))
	}

}

func (ptr *QCameraFocusControl) ConnectFocusPointModeChanged(f func(mode QCameraFocus__FocusPointMode)) {
	defer qt.Recovering("connect QCameraFocusControl::focusPointModeChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_ConnectFocusPointModeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusPointModeChanged", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectFocusPointModeChanged() {
	defer qt.Recovering("disconnect QCameraFocusControl::focusPointModeChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_DisconnectFocusPointModeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusPointModeChanged")
	}
}

func (ptr *QCameraFocusControl) FocusPointModeChanged(mode QCameraFocus__FocusPointMode) {
	defer qt.Recovering("QCameraFocusControl::focusPointModeChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_FocusPointModeChanged(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCameraFocusControl_FocusZonesChanged
func callbackQCameraFocusControl_FocusZonesChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocusControl::focusZonesChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::focusZonesChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCameraFocusControl) ConnectFocusZonesChanged(f func()) {
	defer qt.Recovering("connect QCameraFocusControl::focusZonesChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_ConnectFocusZonesChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusZonesChanged", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectFocusZonesChanged() {
	defer qt.Recovering("disconnect QCameraFocusControl::focusZonesChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_DisconnectFocusZonesChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::focusZonesChanged")
	}
}

func (ptr *QCameraFocusControl) FocusZonesChanged() {
	defer qt.Recovering("QCameraFocusControl::focusZonesChanged")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_FocusZonesChanged(ptr.Pointer())
	}
}

//export callbackQCameraFocusControl_IsFocusModeSupported
func callbackQCameraFocusControl_IsFocusModeSupported(ptr unsafe.Pointer, mode C.longlong) C.char {
	defer qt.Recovering("callback QCameraFocusControl::isFocusModeSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::isFocusModeSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraFocus__FocusMode) bool)(QCameraFocus__FocusMode(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraFocusControl) ConnectIsFocusModeSupported(f func(mode QCameraFocus__FocusMode) bool) {
	defer qt.Recovering("connect QCameraFocusControl::isFocusModeSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::isFocusModeSupported", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectIsFocusModeSupported(mode QCameraFocus__FocusMode) {
	defer qt.Recovering("disconnect QCameraFocusControl::isFocusModeSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::isFocusModeSupported")
	}
}

func (ptr *QCameraFocusControl) IsFocusModeSupported(mode QCameraFocus__FocusMode) bool {
	defer qt.Recovering("QCameraFocusControl::isFocusModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraFocusControl_IsFocusModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

//export callbackQCameraFocusControl_IsFocusPointModeSupported
func callbackQCameraFocusControl_IsFocusPointModeSupported(ptr unsafe.Pointer, mode C.longlong) C.char {
	defer qt.Recovering("callback QCameraFocusControl::isFocusPointModeSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::isFocusPointModeSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraFocus__FocusPointMode) bool)(QCameraFocus__FocusPointMode(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraFocusControl) ConnectIsFocusPointModeSupported(f func(mode QCameraFocus__FocusPointMode) bool) {
	defer qt.Recovering("connect QCameraFocusControl::isFocusPointModeSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::isFocusPointModeSupported", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectIsFocusPointModeSupported(mode QCameraFocus__FocusPointMode) {
	defer qt.Recovering("disconnect QCameraFocusControl::isFocusPointModeSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::isFocusPointModeSupported")
	}
}

func (ptr *QCameraFocusControl) IsFocusPointModeSupported(mode QCameraFocus__FocusPointMode) bool {
	defer qt.Recovering("QCameraFocusControl::isFocusPointModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraFocusControl_IsFocusPointModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

//export callbackQCameraFocusControl_SetCustomFocusPoint
func callbackQCameraFocusControl_SetCustomFocusPoint(ptr unsafe.Pointer, point unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocusControl::setCustomFocusPoint")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::setCustomFocusPoint"); signal != nil {
		signal.(func(*core.QPointF))(core.NewQPointFFromPointer(point))
	}

}

func (ptr *QCameraFocusControl) ConnectSetCustomFocusPoint(f func(point *core.QPointF)) {
	defer qt.Recovering("connect QCameraFocusControl::setCustomFocusPoint")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::setCustomFocusPoint", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectSetCustomFocusPoint(point core.QPointF_ITF) {
	defer qt.Recovering("disconnect QCameraFocusControl::setCustomFocusPoint")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::setCustomFocusPoint")
	}
}

func (ptr *QCameraFocusControl) SetCustomFocusPoint(point core.QPointF_ITF) {
	defer qt.Recovering("QCameraFocusControl::setCustomFocusPoint")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_SetCustomFocusPoint(ptr.Pointer(), core.PointerFromQPointF(point))
	}
}

//export callbackQCameraFocusControl_SetFocusMode
func callbackQCameraFocusControl_SetFocusMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraFocusControl::setFocusMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::setFocusMode"); signal != nil {
		signal.(func(QCameraFocus__FocusMode))(QCameraFocus__FocusMode(mode))
	}

}

func (ptr *QCameraFocusControl) ConnectSetFocusMode(f func(mode QCameraFocus__FocusMode)) {
	defer qt.Recovering("connect QCameraFocusControl::setFocusMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::setFocusMode", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectSetFocusMode(mode QCameraFocus__FocusMode) {
	defer qt.Recovering("disconnect QCameraFocusControl::setFocusMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::setFocusMode")
	}
}

func (ptr *QCameraFocusControl) SetFocusMode(mode QCameraFocus__FocusMode) {
	defer qt.Recovering("QCameraFocusControl::setFocusMode")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_SetFocusMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCameraFocusControl_SetFocusPointMode
func callbackQCameraFocusControl_SetFocusPointMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraFocusControl::setFocusPointMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::setFocusPointMode"); signal != nil {
		signal.(func(QCameraFocus__FocusPointMode))(QCameraFocus__FocusPointMode(mode))
	}

}

func (ptr *QCameraFocusControl) ConnectSetFocusPointMode(f func(mode QCameraFocus__FocusPointMode)) {
	defer qt.Recovering("connect QCameraFocusControl::setFocusPointMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::setFocusPointMode", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectSetFocusPointMode(mode QCameraFocus__FocusPointMode) {
	defer qt.Recovering("disconnect QCameraFocusControl::setFocusPointMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::setFocusPointMode")
	}
}

func (ptr *QCameraFocusControl) SetFocusPointMode(mode QCameraFocus__FocusPointMode) {
	defer qt.Recovering("QCameraFocusControl::setFocusPointMode")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_SetFocusPointMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QCameraFocusControl) DestroyQCameraFocusControl() {
	defer qt.Recovering("QCameraFocusControl::~QCameraFocusControl")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_DestroyQCameraFocusControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraFocusControl_TimerEvent
func callbackQCameraFocusControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocusControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraFocusControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraFocusControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraFocusControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::timerEvent", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraFocusControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::timerEvent")
	}
}

func (ptr *QCameraFocusControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraFocusControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraFocusControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraFocusControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraFocusControl_ChildEvent
func callbackQCameraFocusControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocusControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraFocusControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraFocusControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraFocusControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::childEvent", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraFocusControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::childEvent")
	}
}

func (ptr *QCameraFocusControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraFocusControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraFocusControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraFocusControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraFocusControl_ConnectNotify
func callbackQCameraFocusControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocusControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFocusControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraFocusControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraFocusControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::connectNotify", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraFocusControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::connectNotify")
	}
}

func (ptr *QCameraFocusControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFocusControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraFocusControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFocusControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraFocusControl_CustomEvent
func callbackQCameraFocusControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocusControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraFocusControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraFocusControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraFocusControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::customEvent", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraFocusControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::customEvent")
	}
}

func (ptr *QCameraFocusControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraFocusControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraFocusControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraFocusControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraFocusControl_DeleteLater
func callbackQCameraFocusControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocusControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraFocusControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraFocusControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraFocusControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::deleteLater", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraFocusControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::deleteLater")
	}
}

func (ptr *QCameraFocusControl) DeleteLater() {
	defer qt.Recovering("QCameraFocusControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraFocusControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraFocusControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraFocusControl_DisconnectNotify
func callbackQCameraFocusControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraFocusControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraFocusControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraFocusControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraFocusControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::disconnectNotify", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraFocusControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::disconnectNotify")
	}
}

func (ptr *QCameraFocusControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFocusControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraFocusControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraFocusControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraFocusControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraFocusControl_Event
func callbackQCameraFocusControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraFocusControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFocusControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraFocusControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraFocusControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::event", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraFocusControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::event")
	}
}

func (ptr *QCameraFocusControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFocusControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraFocusControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraFocusControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFocusControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraFocusControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraFocusControl_EventFilter
func callbackQCameraFocusControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraFocusControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraFocusControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraFocusControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraFocusControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::eventFilter", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraFocusControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::eventFilter")
	}
}

func (ptr *QCameraFocusControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFocusControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraFocusControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraFocusControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraFocusControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraFocusControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraFocusControl_MetaObject
func callbackQCameraFocusControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraFocusControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraFocusControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraFocusControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraFocusControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraFocusControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::metaObject", f)
	}
}

func (ptr *QCameraFocusControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraFocusControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraFocusControl::metaObject")
	}
}

func (ptr *QCameraFocusControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraFocusControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraFocusControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraFocusControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraFocusControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraFocusControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCameraFocusZone::FocusZoneStatus
type QCameraFocusZone__FocusZoneStatus int64

const (
	QCameraFocusZone__Invalid  = QCameraFocusZone__FocusZoneStatus(0)
	QCameraFocusZone__Unused   = QCameraFocusZone__FocusZoneStatus(1)
	QCameraFocusZone__Selected = QCameraFocusZone__FocusZoneStatus(2)
	QCameraFocusZone__Focused  = QCameraFocusZone__FocusZoneStatus(3)
)

type QCameraFocusZone struct {
	ptr unsafe.Pointer
}

type QCameraFocusZone_ITF interface {
	QCameraFocusZone_PTR() *QCameraFocusZone
}

func (p *QCameraFocusZone) QCameraFocusZone_PTR() *QCameraFocusZone {
	return p
}

func (p *QCameraFocusZone) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCameraFocusZone) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCameraFocusZone(ptr QCameraFocusZone_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraFocusZone_PTR().Pointer()
	}
	return nil
}

func NewQCameraFocusZoneFromPointer(ptr unsafe.Pointer) *QCameraFocusZone {
	var n = new(QCameraFocusZone)
	n.SetPointer(ptr)
	return n
}
func NewQCameraFocusZone(other QCameraFocusZone_ITF) *QCameraFocusZone {
	defer qt.Recovering("QCameraFocusZone::QCameraFocusZone")

	var tmpValue = NewQCameraFocusZoneFromPointer(C.QCameraFocusZone_NewQCameraFocusZone(PointerFromQCameraFocusZone(other)))
	runtime.SetFinalizer(tmpValue, (*QCameraFocusZone).DestroyQCameraFocusZone)
	return tmpValue
}

func (ptr *QCameraFocusZone) Area() *core.QRectF {
	defer qt.Recovering("QCameraFocusZone::area")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QCameraFocusZone_Area(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QCameraFocusZone) IsValid() bool {
	defer qt.Recovering("QCameraFocusZone::isValid")

	if ptr.Pointer() != nil {
		return C.QCameraFocusZone_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraFocusZone) Status() QCameraFocusZone__FocusZoneStatus {
	defer qt.Recovering("QCameraFocusZone::status")

	if ptr.Pointer() != nil {
		return QCameraFocusZone__FocusZoneStatus(C.QCameraFocusZone_Status(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraFocusZone) DestroyQCameraFocusZone() {
	defer qt.Recovering("QCameraFocusZone::~QCameraFocusZone")

	if ptr.Pointer() != nil {
		C.QCameraFocusZone_DestroyQCameraFocusZone(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QCameraImageCapture::CaptureDestination
type QCameraImageCapture__CaptureDestination int64

const (
	QCameraImageCapture__CaptureToFile   = QCameraImageCapture__CaptureDestination(0x01)
	QCameraImageCapture__CaptureToBuffer = QCameraImageCapture__CaptureDestination(0x02)
)

//QCameraImageCapture::DriveMode
type QCameraImageCapture__DriveMode int64

const (
	QCameraImageCapture__SingleImageCapture = QCameraImageCapture__DriveMode(0)
)

//QCameraImageCapture::Error
type QCameraImageCapture__Error int64

const (
	QCameraImageCapture__NoError                  = QCameraImageCapture__Error(0)
	QCameraImageCapture__NotReadyError            = QCameraImageCapture__Error(1)
	QCameraImageCapture__ResourceError            = QCameraImageCapture__Error(2)
	QCameraImageCapture__OutOfSpaceError          = QCameraImageCapture__Error(3)
	QCameraImageCapture__NotSupportedFeatureError = QCameraImageCapture__Error(4)
	QCameraImageCapture__FormatError              = QCameraImageCapture__Error(5)
)

type QCameraImageCapture struct {
	core.QObject
	QMediaBindableInterface
}

type QCameraImageCapture_ITF interface {
	core.QObject_ITF
	QMediaBindableInterface_ITF
	QCameraImageCapture_PTR() *QCameraImageCapture
}

func (p *QCameraImageCapture) QCameraImageCapture_PTR() *QCameraImageCapture {
	return p
}

func (p *QCameraImageCapture) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QCameraImageCapture) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QMediaBindableInterface_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraImageCapture(ptr QCameraImageCapture_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraImageCapture_PTR().Pointer()
	}
	return nil
}

func NewQCameraImageCaptureFromPointer(ptr unsafe.Pointer) *QCameraImageCapture {
	var n = new(QCameraImageCapture)
	n.SetPointer(ptr)
	return n
}
func (ptr *QCameraImageCapture) IsReadyForCapture() bool {
	defer qt.Recovering("QCameraImageCapture::isReadyForCapture")

	if ptr.Pointer() != nil {
		return C.QCameraImageCapture_IsReadyForCapture(ptr.Pointer()) != 0
	}
	return false
}

func NewQCameraImageCapture(mediaObject QMediaObject_ITF, parent core.QObject_ITF) *QCameraImageCapture {
	defer qt.Recovering("QCameraImageCapture::QCameraImageCapture")

	var tmpValue = NewQCameraImageCaptureFromPointer(C.QCameraImageCapture_NewQCameraImageCapture(PointerFromQMediaObject(mediaObject), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QCameraImageCapture) Availability() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QCameraImageCapture::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QCameraImageCapture_Availability(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraImageCapture) BufferFormat() QVideoFrame__PixelFormat {
	defer qt.Recovering("QCameraImageCapture::bufferFormat")

	if ptr.Pointer() != nil {
		return QVideoFrame__PixelFormat(C.QCameraImageCapture_BufferFormat(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraImageCapture_BufferFormatChanged
func callbackQCameraImageCapture_BufferFormatChanged(ptr unsafe.Pointer, format C.longlong) {
	defer qt.Recovering("callback QCameraImageCapture::bufferFormatChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::bufferFormatChanged"); signal != nil {
		signal.(func(QVideoFrame__PixelFormat))(QVideoFrame__PixelFormat(format))
	}

}

func (ptr *QCameraImageCapture) ConnectBufferFormatChanged(f func(format QVideoFrame__PixelFormat)) {
	defer qt.Recovering("connect QCameraImageCapture::bufferFormatChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectBufferFormatChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::bufferFormatChanged", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectBufferFormatChanged() {
	defer qt.Recovering("disconnect QCameraImageCapture::bufferFormatChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectBufferFormatChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::bufferFormatChanged")
	}
}

func (ptr *QCameraImageCapture) BufferFormatChanged(format QVideoFrame__PixelFormat) {
	defer qt.Recovering("QCameraImageCapture::bufferFormatChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_BufferFormatChanged(ptr.Pointer(), C.longlong(format))
	}
}

//export callbackQCameraImageCapture_CancelCapture
func callbackQCameraImageCapture_CancelCapture(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::cancelCapture")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::cancelCapture"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCameraImageCapture) ConnectCancelCapture(f func()) {
	defer qt.Recovering("connect QCameraImageCapture::cancelCapture")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::cancelCapture", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectCancelCapture() {
	defer qt.Recovering("disconnect QCameraImageCapture::cancelCapture")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::cancelCapture")
	}
}

func (ptr *QCameraImageCapture) CancelCapture() {
	defer qt.Recovering("QCameraImageCapture::cancelCapture")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_CancelCapture(ptr.Pointer())
	}
}

//export callbackQCameraImageCapture_Capture
func callbackQCameraImageCapture_Capture(ptr unsafe.Pointer, file *C.char) C.int {
	defer qt.Recovering("callback QCameraImageCapture::capture")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::capture"); signal != nil {
		return C.int(int32(signal.(func(string) int)(C.GoString(file))))
	}

	return C.int(int32(0))
}

func (ptr *QCameraImageCapture) ConnectCapture(f func(file string) int) {
	defer qt.Recovering("connect QCameraImageCapture::capture")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::capture", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectCapture(file string) {
	defer qt.Recovering("disconnect QCameraImageCapture::capture")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::capture")
	}
}

func (ptr *QCameraImageCapture) Capture(file string) int {
	defer qt.Recovering("QCameraImageCapture::capture")

	if ptr.Pointer() != nil {
		var fileC = C.CString(file)
		defer C.free(unsafe.Pointer(fileC))
		return int(int32(C.QCameraImageCapture_Capture(ptr.Pointer(), fileC)))
	}
	return 0
}

func (ptr *QCameraImageCapture) CaptureDestination() QCameraImageCapture__CaptureDestination {
	defer qt.Recovering("QCameraImageCapture::captureDestination")

	if ptr.Pointer() != nil {
		return QCameraImageCapture__CaptureDestination(C.QCameraImageCapture_CaptureDestination(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraImageCapture_CaptureDestinationChanged
func callbackQCameraImageCapture_CaptureDestinationChanged(ptr unsafe.Pointer, destination C.longlong) {
	defer qt.Recovering("callback QCameraImageCapture::captureDestinationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::captureDestinationChanged"); signal != nil {
		signal.(func(QCameraImageCapture__CaptureDestination))(QCameraImageCapture__CaptureDestination(destination))
	}

}

func (ptr *QCameraImageCapture) ConnectCaptureDestinationChanged(f func(destination QCameraImageCapture__CaptureDestination)) {
	defer qt.Recovering("connect QCameraImageCapture::captureDestinationChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectCaptureDestinationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::captureDestinationChanged", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectCaptureDestinationChanged() {
	defer qt.Recovering("disconnect QCameraImageCapture::captureDestinationChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectCaptureDestinationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::captureDestinationChanged")
	}
}

func (ptr *QCameraImageCapture) CaptureDestinationChanged(destination QCameraImageCapture__CaptureDestination) {
	defer qt.Recovering("QCameraImageCapture::captureDestinationChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_CaptureDestinationChanged(ptr.Pointer(), C.longlong(destination))
	}
}

func (ptr *QCameraImageCapture) EncodingSettings() *QImageEncoderSettings {
	defer qt.Recovering("QCameraImageCapture::encodingSettings")

	if ptr.Pointer() != nil {
		var tmpValue = NewQImageEncoderSettingsFromPointer(C.QCameraImageCapture_EncodingSettings(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImageEncoderSettings).DestroyQImageEncoderSettings)
		return tmpValue
	}
	return nil
}

//export callbackQCameraImageCapture_Error2
func callbackQCameraImageCapture_Error2(ptr unsafe.Pointer, id C.int, error C.longlong, errorString *C.char) {
	defer qt.Recovering("callback QCameraImageCapture::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::error2"); signal != nil {
		signal.(func(int, QCameraImageCapture__Error, string))(int(int32(id)), QCameraImageCapture__Error(error), C.GoString(errorString))
	}

}

func (ptr *QCameraImageCapture) ConnectError2(f func(id int, error QCameraImageCapture__Error, errorString string)) {
	defer qt.Recovering("connect QCameraImageCapture::error")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectError2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::error2", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectError2() {
	defer qt.Recovering("disconnect QCameraImageCapture::error")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectError2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::error2")
	}
}

func (ptr *QCameraImageCapture) Error2(id int, error QCameraImageCapture__Error, errorString string) {
	defer qt.Recovering("QCameraImageCapture::error")

	if ptr.Pointer() != nil {
		var errorStringC = C.CString(errorString)
		defer C.free(unsafe.Pointer(errorStringC))
		C.QCameraImageCapture_Error2(ptr.Pointer(), C.int(int32(id)), C.longlong(error), errorStringC)
	}
}

func (ptr *QCameraImageCapture) Error() QCameraImageCapture__Error {
	defer qt.Recovering("QCameraImageCapture::error")

	if ptr.Pointer() != nil {
		return QCameraImageCapture__Error(C.QCameraImageCapture_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraImageCapture) ErrorString() string {
	defer qt.Recovering("QCameraImageCapture::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QCameraImageCapture_ErrorString(ptr.Pointer()))
	}
	return ""
}

//export callbackQCameraImageCapture_ImageAvailable
func callbackQCameraImageCapture_ImageAvailable(ptr unsafe.Pointer, id C.int, buffer unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::imageAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::imageAvailable"); signal != nil {
		signal.(func(int, *QVideoFrame))(int(int32(id)), NewQVideoFrameFromPointer(buffer))
	}

}

func (ptr *QCameraImageCapture) ConnectImageAvailable(f func(id int, buffer *QVideoFrame)) {
	defer qt.Recovering("connect QCameraImageCapture::imageAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectImageAvailable(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageAvailable", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectImageAvailable() {
	defer qt.Recovering("disconnect QCameraImageCapture::imageAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectImageAvailable(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageAvailable")
	}
}

func (ptr *QCameraImageCapture) ImageAvailable(id int, buffer QVideoFrame_ITF) {
	defer qt.Recovering("QCameraImageCapture::imageAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ImageAvailable(ptr.Pointer(), C.int(int32(id)), PointerFromQVideoFrame(buffer))
	}
}

//export callbackQCameraImageCapture_ImageCaptured
func callbackQCameraImageCapture_ImageCaptured(ptr unsafe.Pointer, id C.int, preview unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::imageCaptured")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::imageCaptured"); signal != nil {
		signal.(func(int, *gui.QImage))(int(int32(id)), gui.NewQImageFromPointer(preview))
	}

}

func (ptr *QCameraImageCapture) ConnectImageCaptured(f func(id int, preview *gui.QImage)) {
	defer qt.Recovering("connect QCameraImageCapture::imageCaptured")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectImageCaptured(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageCaptured", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectImageCaptured() {
	defer qt.Recovering("disconnect QCameraImageCapture::imageCaptured")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectImageCaptured(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageCaptured")
	}
}

func (ptr *QCameraImageCapture) ImageCaptured(id int, preview gui.QImage_ITF) {
	defer qt.Recovering("QCameraImageCapture::imageCaptured")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ImageCaptured(ptr.Pointer(), C.int(int32(id)), gui.PointerFromQImage(preview))
	}
}

func (ptr *QCameraImageCapture) ImageCodecDescription(codec string) string {
	defer qt.Recovering("QCameraImageCapture::imageCodecDescription")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		return C.GoString(C.QCameraImageCapture_ImageCodecDescription(ptr.Pointer(), codecC))
	}
	return ""
}

//export callbackQCameraImageCapture_ImageExposed
func callbackQCameraImageCapture_ImageExposed(ptr unsafe.Pointer, id C.int) {
	defer qt.Recovering("callback QCameraImageCapture::imageExposed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::imageExposed"); signal != nil {
		signal.(func(int))(int(int32(id)))
	}

}

func (ptr *QCameraImageCapture) ConnectImageExposed(f func(id int)) {
	defer qt.Recovering("connect QCameraImageCapture::imageExposed")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectImageExposed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageExposed", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectImageExposed() {
	defer qt.Recovering("disconnect QCameraImageCapture::imageExposed")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectImageExposed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageExposed")
	}
}

func (ptr *QCameraImageCapture) ImageExposed(id int) {
	defer qt.Recovering("QCameraImageCapture::imageExposed")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ImageExposed(ptr.Pointer(), C.int(int32(id)))
	}
}

//export callbackQCameraImageCapture_ImageMetadataAvailable
func callbackQCameraImageCapture_ImageMetadataAvailable(ptr unsafe.Pointer, id C.int, key *C.char, value unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::imageMetadataAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::imageMetadataAvailable"); signal != nil {
		signal.(func(int, string, *core.QVariant))(int(int32(id)), C.GoString(key), core.NewQVariantFromPointer(value))
	}

}

func (ptr *QCameraImageCapture) ConnectImageMetadataAvailable(f func(id int, key string, value *core.QVariant)) {
	defer qt.Recovering("connect QCameraImageCapture::imageMetadataAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectImageMetadataAvailable(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageMetadataAvailable", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectImageMetadataAvailable() {
	defer qt.Recovering("disconnect QCameraImageCapture::imageMetadataAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectImageMetadataAvailable(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageMetadataAvailable")
	}
}

func (ptr *QCameraImageCapture) ImageMetadataAvailable(id int, key string, value core.QVariant_ITF) {
	defer qt.Recovering("QCameraImageCapture::imageMetadataAvailable")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QCameraImageCapture_ImageMetadataAvailable(ptr.Pointer(), C.int(int32(id)), keyC, core.PointerFromQVariant(value))
	}
}

//export callbackQCameraImageCapture_ImageSaved
func callbackQCameraImageCapture_ImageSaved(ptr unsafe.Pointer, id C.int, fileName *C.char) {
	defer qt.Recovering("callback QCameraImageCapture::imageSaved")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::imageSaved"); signal != nil {
		signal.(func(int, string))(int(int32(id)), C.GoString(fileName))
	}

}

func (ptr *QCameraImageCapture) ConnectImageSaved(f func(id int, fileName string)) {
	defer qt.Recovering("connect QCameraImageCapture::imageSaved")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectImageSaved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageSaved", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectImageSaved() {
	defer qt.Recovering("disconnect QCameraImageCapture::imageSaved")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectImageSaved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::imageSaved")
	}
}

func (ptr *QCameraImageCapture) ImageSaved(id int, fileName string) {
	defer qt.Recovering("QCameraImageCapture::imageSaved")

	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QCameraImageCapture_ImageSaved(ptr.Pointer(), C.int(int32(id)), fileNameC)
	}
}

func (ptr *QCameraImageCapture) IsAvailable() bool {
	defer qt.Recovering("QCameraImageCapture::isAvailable")

	if ptr.Pointer() != nil {
		return C.QCameraImageCapture_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraImageCapture) IsCaptureDestinationSupported(destination QCameraImageCapture__CaptureDestination) bool {
	defer qt.Recovering("QCameraImageCapture::isCaptureDestinationSupported")

	if ptr.Pointer() != nil {
		return C.QCameraImageCapture_IsCaptureDestinationSupported(ptr.Pointer(), C.longlong(destination)) != 0
	}
	return false
}

//export callbackQCameraImageCapture_MediaObject
func callbackQCameraImageCapture_MediaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraImageCapture::mediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::mediaObject"); signal != nil {
		return PointerFromQMediaObject(signal.(func() *QMediaObject)())
	}

	return PointerFromQMediaObject(NewQCameraImageCaptureFromPointer(ptr).MediaObjectDefault())
}

func (ptr *QCameraImageCapture) ConnectMediaObject(f func() *QMediaObject) {
	defer qt.Recovering("connect QCameraImageCapture::mediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::mediaObject", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectMediaObject() {
	defer qt.Recovering("disconnect QCameraImageCapture::mediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::mediaObject")
	}
}

func (ptr *QCameraImageCapture) MediaObject() *QMediaObject {
	defer qt.Recovering("QCameraImageCapture::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QCameraImageCapture_MediaObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QCameraImageCapture) MediaObjectDefault() *QMediaObject {
	defer qt.Recovering("QCameraImageCapture::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QCameraImageCapture_MediaObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQCameraImageCapture_ReadyForCaptureChanged
func callbackQCameraImageCapture_ReadyForCaptureChanged(ptr unsafe.Pointer, ready C.char) {
	defer qt.Recovering("callback QCameraImageCapture::readyForCaptureChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::readyForCaptureChanged"); signal != nil {
		signal.(func(bool))(int8(ready) != 0)
	}

}

func (ptr *QCameraImageCapture) ConnectReadyForCaptureChanged(f func(ready bool)) {
	defer qt.Recovering("connect QCameraImageCapture::readyForCaptureChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectReadyForCaptureChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::readyForCaptureChanged", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectReadyForCaptureChanged() {
	defer qt.Recovering("disconnect QCameraImageCapture::readyForCaptureChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectReadyForCaptureChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::readyForCaptureChanged")
	}
}

func (ptr *QCameraImageCapture) ReadyForCaptureChanged(ready bool) {
	defer qt.Recovering("QCameraImageCapture::readyForCaptureChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ReadyForCaptureChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ready))))
	}
}

func (ptr *QCameraImageCapture) SetBufferFormat(format QVideoFrame__PixelFormat) {
	defer qt.Recovering("QCameraImageCapture::setBufferFormat")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_SetBufferFormat(ptr.Pointer(), C.longlong(format))
	}
}

func (ptr *QCameraImageCapture) SetCaptureDestination(destination QCameraImageCapture__CaptureDestination) {
	defer qt.Recovering("QCameraImageCapture::setCaptureDestination")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_SetCaptureDestination(ptr.Pointer(), C.longlong(destination))
	}
}

func (ptr *QCameraImageCapture) SetEncodingSettings(settings QImageEncoderSettings_ITF) {
	defer qt.Recovering("QCameraImageCapture::setEncodingSettings")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_SetEncodingSettings(ptr.Pointer(), PointerFromQImageEncoderSettings(settings))
	}
}

//export callbackQCameraImageCapture_SetMediaObject
func callbackQCameraImageCapture_SetMediaObject(ptr unsafe.Pointer, mediaObject unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageCapture::setMediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::setMediaObject"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMediaObject) bool)(NewQMediaObjectFromPointer(mediaObject)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraImageCaptureFromPointer(ptr).SetMediaObjectDefault(NewQMediaObjectFromPointer(mediaObject)))))
}

func (ptr *QCameraImageCapture) ConnectSetMediaObject(f func(mediaObject *QMediaObject) bool) {
	defer qt.Recovering("connect QCameraImageCapture::setMediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::setMediaObject", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectSetMediaObject() {
	defer qt.Recovering("disconnect QCameraImageCapture::setMediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::setMediaObject")
	}
}

func (ptr *QCameraImageCapture) SetMediaObject(mediaObject QMediaObject_ITF) bool {
	defer qt.Recovering("QCameraImageCapture::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QCameraImageCapture_SetMediaObject(ptr.Pointer(), PointerFromQMediaObject(mediaObject)) != 0
	}
	return false
}

func (ptr *QCameraImageCapture) SetMediaObjectDefault(mediaObject QMediaObject_ITF) bool {
	defer qt.Recovering("QCameraImageCapture::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QCameraImageCapture_SetMediaObjectDefault(ptr.Pointer(), PointerFromQMediaObject(mediaObject)) != 0
	}
	return false
}

func (ptr *QCameraImageCapture) SupportedImageCodecs() []string {
	defer qt.Recovering("QCameraImageCapture::supportedImageCodecs")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QCameraImageCapture_SupportedImageCodecs(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QCameraImageCapture) DestroyQCameraImageCapture() {
	defer qt.Recovering("QCameraImageCapture::~QCameraImageCapture")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DestroyQCameraImageCapture(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraImageCapture_TimerEvent
func callbackQCameraImageCapture_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraImageCaptureFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraImageCapture) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraImageCapture::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::timerEvent", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraImageCapture::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::timerEvent")
	}
}

func (ptr *QCameraImageCapture) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraImageCapture::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraImageCapture) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraImageCapture::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraImageCapture_ChildEvent
func callbackQCameraImageCapture_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraImageCaptureFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraImageCapture) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraImageCapture::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::childEvent", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraImageCapture::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::childEvent")
	}
}

func (ptr *QCameraImageCapture) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraImageCapture::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraImageCapture) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraImageCapture::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraImageCapture_ConnectNotify
func callbackQCameraImageCapture_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraImageCaptureFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraImageCapture) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraImageCapture::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::connectNotify", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraImageCapture::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::connectNotify")
	}
}

func (ptr *QCameraImageCapture) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageCapture::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraImageCapture) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageCapture::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraImageCapture_CustomEvent
func callbackQCameraImageCapture_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraImageCaptureFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraImageCapture) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraImageCapture::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::customEvent", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraImageCapture::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::customEvent")
	}
}

func (ptr *QCameraImageCapture) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraImageCapture::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraImageCapture) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraImageCapture::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraImageCapture_DeleteLater
func callbackQCameraImageCapture_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraImageCaptureFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraImageCapture) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraImageCapture::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::deleteLater", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraImageCapture::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::deleteLater")
	}
}

func (ptr *QCameraImageCapture) DeleteLater() {
	defer qt.Recovering("QCameraImageCapture::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraImageCapture) DeleteLaterDefault() {
	defer qt.Recovering("QCameraImageCapture::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraImageCapture_DisconnectNotify
func callbackQCameraImageCapture_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCapture::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraImageCaptureFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraImageCapture) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraImageCapture::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::disconnectNotify", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraImageCapture::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::disconnectNotify")
	}
}

func (ptr *QCameraImageCapture) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageCapture::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraImageCapture) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageCapture::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageCapture_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraImageCapture_Event
func callbackQCameraImageCapture_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageCapture::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraImageCaptureFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraImageCapture) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraImageCapture::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::event", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraImageCapture::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::event")
	}
}

func (ptr *QCameraImageCapture) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageCapture::event")

	if ptr.Pointer() != nil {
		return C.QCameraImageCapture_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraImageCapture) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageCapture::event")

	if ptr.Pointer() != nil {
		return C.QCameraImageCapture_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraImageCapture_EventFilter
func callbackQCameraImageCapture_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageCapture::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraImageCaptureFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraImageCapture) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraImageCapture::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::eventFilter", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraImageCapture::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::eventFilter")
	}
}

func (ptr *QCameraImageCapture) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageCapture::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraImageCapture_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraImageCapture) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageCapture::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraImageCapture_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraImageCapture_MetaObject
func callbackQCameraImageCapture_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraImageCapture::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCapture::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraImageCaptureFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraImageCapture) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraImageCapture::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::metaObject", f)
	}
}

func (ptr *QCameraImageCapture) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraImageCapture::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCapture::metaObject")
	}
}

func (ptr *QCameraImageCapture) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraImageCapture::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraImageCapture_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraImageCapture) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraImageCapture::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraImageCapture_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraImageCaptureControl struct {
	QMediaControl
}

type QCameraImageCaptureControl_ITF interface {
	QMediaControl_ITF
	QCameraImageCaptureControl_PTR() *QCameraImageCaptureControl
}

func (p *QCameraImageCaptureControl) QCameraImageCaptureControl_PTR() *QCameraImageCaptureControl {
	return p
}

func (p *QCameraImageCaptureControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraImageCaptureControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraImageCaptureControl(ptr QCameraImageCaptureControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraImageCaptureControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraImageCaptureControlFromPointer(ptr unsafe.Pointer) *QCameraImageCaptureControl {
	var n = new(QCameraImageCaptureControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraImageCaptureControl(parent core.QObject_ITF) *QCameraImageCaptureControl {
	defer qt.Recovering("QCameraImageCaptureControl::QCameraImageCaptureControl")

	var tmpValue = NewQCameraImageCaptureControlFromPointer(C.QCameraImageCaptureControl_NewQCameraImageCaptureControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraImageCaptureControl_CancelCapture
func callbackQCameraImageCaptureControl_CancelCapture(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::cancelCapture")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::cancelCapture"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCameraImageCaptureControl) ConnectCancelCapture(f func()) {
	defer qt.Recovering("connect QCameraImageCaptureControl::cancelCapture")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::cancelCapture", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectCancelCapture() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::cancelCapture")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::cancelCapture")
	}
}

func (ptr *QCameraImageCaptureControl) CancelCapture() {
	defer qt.Recovering("QCameraImageCaptureControl::cancelCapture")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_CancelCapture(ptr.Pointer())
	}
}

//export callbackQCameraImageCaptureControl_Capture
func callbackQCameraImageCaptureControl_Capture(ptr unsafe.Pointer, fileName *C.char) C.int {
	defer qt.Recovering("callback QCameraImageCaptureControl::capture")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::capture"); signal != nil {
		return C.int(int32(signal.(func(string) int)(C.GoString(fileName))))
	}

	return C.int(int32(0))
}

func (ptr *QCameraImageCaptureControl) ConnectCapture(f func(fileName string) int) {
	defer qt.Recovering("connect QCameraImageCaptureControl::capture")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::capture", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectCapture(fileName string) {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::capture")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::capture")
	}
}

func (ptr *QCameraImageCaptureControl) Capture(fileName string) int {
	defer qt.Recovering("QCameraImageCaptureControl::capture")

	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		return int(int32(C.QCameraImageCaptureControl_Capture(ptr.Pointer(), fileNameC)))
	}
	return 0
}

//export callbackQCameraImageCaptureControl_DriveMode
func callbackQCameraImageCaptureControl_DriveMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraImageCaptureControl::driveMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::driveMode"); signal != nil {
		return C.longlong(signal.(func() QCameraImageCapture__DriveMode)())
	}

	return C.longlong(0)
}

func (ptr *QCameraImageCaptureControl) ConnectDriveMode(f func() QCameraImageCapture__DriveMode) {
	defer qt.Recovering("connect QCameraImageCaptureControl::driveMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::driveMode", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectDriveMode() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::driveMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::driveMode")
	}
}

func (ptr *QCameraImageCaptureControl) DriveMode() QCameraImageCapture__DriveMode {
	defer qt.Recovering("QCameraImageCaptureControl::driveMode")

	if ptr.Pointer() != nil {
		return QCameraImageCapture__DriveMode(C.QCameraImageCaptureControl_DriveMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraImageCaptureControl_Error
func callbackQCameraImageCaptureControl_Error(ptr unsafe.Pointer, id C.int, error C.int, errorString *C.char) {
	defer qt.Recovering("callback QCameraImageCaptureControl::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::error"); signal != nil {
		signal.(func(int, int, string))(int(int32(id)), int(int32(error)), C.GoString(errorString))
	}

}

func (ptr *QCameraImageCaptureControl) ConnectError(f func(id int, error int, errorString string)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::error")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ConnectError(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::error", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectError() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::error")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DisconnectError(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::error")
	}
}

func (ptr *QCameraImageCaptureControl) Error(id int, error int, errorString string) {
	defer qt.Recovering("QCameraImageCaptureControl::error")

	if ptr.Pointer() != nil {
		var errorStringC = C.CString(errorString)
		defer C.free(unsafe.Pointer(errorStringC))
		C.QCameraImageCaptureControl_Error(ptr.Pointer(), C.int(int32(id)), C.int(int32(error)), errorStringC)
	}
}

//export callbackQCameraImageCaptureControl_ImageAvailable
func callbackQCameraImageCaptureControl_ImageAvailable(ptr unsafe.Pointer, requestId C.int, buffer unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::imageAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::imageAvailable"); signal != nil {
		signal.(func(int, *QVideoFrame))(int(int32(requestId)), NewQVideoFrameFromPointer(buffer))
	}

}

func (ptr *QCameraImageCaptureControl) ConnectImageAvailable(f func(requestId int, buffer *QVideoFrame)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::imageAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ConnectImageAvailable(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageAvailable", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectImageAvailable() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::imageAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DisconnectImageAvailable(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageAvailable")
	}
}

func (ptr *QCameraImageCaptureControl) ImageAvailable(requestId int, buffer QVideoFrame_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::imageAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ImageAvailable(ptr.Pointer(), C.int(int32(requestId)), PointerFromQVideoFrame(buffer))
	}
}

//export callbackQCameraImageCaptureControl_ImageCaptured
func callbackQCameraImageCaptureControl_ImageCaptured(ptr unsafe.Pointer, requestId C.int, preview unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::imageCaptured")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::imageCaptured"); signal != nil {
		signal.(func(int, *gui.QImage))(int(int32(requestId)), gui.NewQImageFromPointer(preview))
	}

}

func (ptr *QCameraImageCaptureControl) ConnectImageCaptured(f func(requestId int, preview *gui.QImage)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::imageCaptured")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ConnectImageCaptured(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageCaptured", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectImageCaptured() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::imageCaptured")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DisconnectImageCaptured(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageCaptured")
	}
}

func (ptr *QCameraImageCaptureControl) ImageCaptured(requestId int, preview gui.QImage_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::imageCaptured")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ImageCaptured(ptr.Pointer(), C.int(int32(requestId)), gui.PointerFromQImage(preview))
	}
}

//export callbackQCameraImageCaptureControl_ImageExposed
func callbackQCameraImageCaptureControl_ImageExposed(ptr unsafe.Pointer, requestId C.int) {
	defer qt.Recovering("callback QCameraImageCaptureControl::imageExposed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::imageExposed"); signal != nil {
		signal.(func(int))(int(int32(requestId)))
	}

}

func (ptr *QCameraImageCaptureControl) ConnectImageExposed(f func(requestId int)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::imageExposed")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ConnectImageExposed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageExposed", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectImageExposed() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::imageExposed")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DisconnectImageExposed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageExposed")
	}
}

func (ptr *QCameraImageCaptureControl) ImageExposed(requestId int) {
	defer qt.Recovering("QCameraImageCaptureControl::imageExposed")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ImageExposed(ptr.Pointer(), C.int(int32(requestId)))
	}
}

//export callbackQCameraImageCaptureControl_ImageMetadataAvailable
func callbackQCameraImageCaptureControl_ImageMetadataAvailable(ptr unsafe.Pointer, id C.int, key *C.char, value unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::imageMetadataAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::imageMetadataAvailable"); signal != nil {
		signal.(func(int, string, *core.QVariant))(int(int32(id)), C.GoString(key), core.NewQVariantFromPointer(value))
	}

}

func (ptr *QCameraImageCaptureControl) ConnectImageMetadataAvailable(f func(id int, key string, value *core.QVariant)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::imageMetadataAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ConnectImageMetadataAvailable(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageMetadataAvailable", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectImageMetadataAvailable() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::imageMetadataAvailable")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DisconnectImageMetadataAvailable(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageMetadataAvailable")
	}
}

func (ptr *QCameraImageCaptureControl) ImageMetadataAvailable(id int, key string, value core.QVariant_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::imageMetadataAvailable")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QCameraImageCaptureControl_ImageMetadataAvailable(ptr.Pointer(), C.int(int32(id)), keyC, core.PointerFromQVariant(value))
	}
}

//export callbackQCameraImageCaptureControl_ImageSaved
func callbackQCameraImageCaptureControl_ImageSaved(ptr unsafe.Pointer, requestId C.int, fileName *C.char) {
	defer qt.Recovering("callback QCameraImageCaptureControl::imageSaved")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::imageSaved"); signal != nil {
		signal.(func(int, string))(int(int32(requestId)), C.GoString(fileName))
	}

}

func (ptr *QCameraImageCaptureControl) ConnectImageSaved(f func(requestId int, fileName string)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::imageSaved")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ConnectImageSaved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageSaved", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectImageSaved() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::imageSaved")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DisconnectImageSaved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::imageSaved")
	}
}

func (ptr *QCameraImageCaptureControl) ImageSaved(requestId int, fileName string) {
	defer qt.Recovering("QCameraImageCaptureControl::imageSaved")

	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QCameraImageCaptureControl_ImageSaved(ptr.Pointer(), C.int(int32(requestId)), fileNameC)
	}
}

//export callbackQCameraImageCaptureControl_IsReadyForCapture
func callbackQCameraImageCaptureControl_IsReadyForCapture(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageCaptureControl::isReadyForCapture")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::isReadyForCapture"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraImageCaptureControl) ConnectIsReadyForCapture(f func() bool) {
	defer qt.Recovering("connect QCameraImageCaptureControl::isReadyForCapture")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::isReadyForCapture", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectIsReadyForCapture() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::isReadyForCapture")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::isReadyForCapture")
	}
}

func (ptr *QCameraImageCaptureControl) IsReadyForCapture() bool {
	defer qt.Recovering("QCameraImageCaptureControl::isReadyForCapture")

	if ptr.Pointer() != nil {
		return C.QCameraImageCaptureControl_IsReadyForCapture(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQCameraImageCaptureControl_ReadyForCaptureChanged
func callbackQCameraImageCaptureControl_ReadyForCaptureChanged(ptr unsafe.Pointer, ready C.char) {
	defer qt.Recovering("callback QCameraImageCaptureControl::readyForCaptureChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::readyForCaptureChanged"); signal != nil {
		signal.(func(bool))(int8(ready) != 0)
	}

}

func (ptr *QCameraImageCaptureControl) ConnectReadyForCaptureChanged(f func(ready bool)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::readyForCaptureChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ConnectReadyForCaptureChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::readyForCaptureChanged", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectReadyForCaptureChanged() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::readyForCaptureChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DisconnectReadyForCaptureChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::readyForCaptureChanged")
	}
}

func (ptr *QCameraImageCaptureControl) ReadyForCaptureChanged(ready bool) {
	defer qt.Recovering("QCameraImageCaptureControl::readyForCaptureChanged")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ReadyForCaptureChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ready))))
	}
}

//export callbackQCameraImageCaptureControl_SetDriveMode
func callbackQCameraImageCaptureControl_SetDriveMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraImageCaptureControl::setDriveMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::setDriveMode"); signal != nil {
		signal.(func(QCameraImageCapture__DriveMode))(QCameraImageCapture__DriveMode(mode))
	}

}

func (ptr *QCameraImageCaptureControl) ConnectSetDriveMode(f func(mode QCameraImageCapture__DriveMode)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::setDriveMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::setDriveMode", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectSetDriveMode(mode QCameraImageCapture__DriveMode) {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::setDriveMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::setDriveMode")
	}
}

func (ptr *QCameraImageCaptureControl) SetDriveMode(mode QCameraImageCapture__DriveMode) {
	defer qt.Recovering("QCameraImageCaptureControl::setDriveMode")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_SetDriveMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QCameraImageCaptureControl) DestroyQCameraImageCaptureControl() {
	defer qt.Recovering("QCameraImageCaptureControl::~QCameraImageCaptureControl")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DestroyQCameraImageCaptureControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraImageCaptureControl_TimerEvent
func callbackQCameraImageCaptureControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraImageCaptureControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraImageCaptureControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::timerEvent", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::timerEvent")
	}
}

func (ptr *QCameraImageCaptureControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraImageCaptureControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraImageCaptureControl_ChildEvent
func callbackQCameraImageCaptureControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraImageCaptureControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraImageCaptureControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::childEvent", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::childEvent")
	}
}

func (ptr *QCameraImageCaptureControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraImageCaptureControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraImageCaptureControl_ConnectNotify
func callbackQCameraImageCaptureControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraImageCaptureControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraImageCaptureControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::connectNotify", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::connectNotify")
	}
}

func (ptr *QCameraImageCaptureControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraImageCaptureControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraImageCaptureControl_CustomEvent
func callbackQCameraImageCaptureControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraImageCaptureControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraImageCaptureControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::customEvent", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::customEvent")
	}
}

func (ptr *QCameraImageCaptureControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraImageCaptureControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraImageCaptureControl_DeleteLater
func callbackQCameraImageCaptureControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraImageCaptureControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraImageCaptureControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraImageCaptureControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::deleteLater", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::deleteLater")
	}
}

func (ptr *QCameraImageCaptureControl) DeleteLater() {
	defer qt.Recovering("QCameraImageCaptureControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraImageCaptureControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraImageCaptureControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraImageCaptureControl_DisconnectNotify
func callbackQCameraImageCaptureControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageCaptureControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraImageCaptureControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraImageCaptureControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraImageCaptureControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::disconnectNotify", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::disconnectNotify")
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageCaptureControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageCaptureControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraImageCaptureControl_Event
func callbackQCameraImageCaptureControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageCaptureControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraImageCaptureControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraImageCaptureControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraImageCaptureControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::event", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::event")
	}
}

func (ptr *QCameraImageCaptureControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageCaptureControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraImageCaptureControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraImageCaptureControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageCaptureControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraImageCaptureControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraImageCaptureControl_EventFilter
func callbackQCameraImageCaptureControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageCaptureControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraImageCaptureControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraImageCaptureControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraImageCaptureControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::eventFilter", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::eventFilter")
	}
}

func (ptr *QCameraImageCaptureControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageCaptureControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraImageCaptureControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraImageCaptureControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageCaptureControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraImageCaptureControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraImageCaptureControl_MetaObject
func callbackQCameraImageCaptureControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraImageCaptureControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageCaptureControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraImageCaptureControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraImageCaptureControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraImageCaptureControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::metaObject", f)
	}
}

func (ptr *QCameraImageCaptureControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraImageCaptureControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageCaptureControl::metaObject")
	}
}

func (ptr *QCameraImageCaptureControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraImageCaptureControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraImageCaptureControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraImageCaptureControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraImageCaptureControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraImageCaptureControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCameraImageProcessing::ColorFilter
type QCameraImageProcessing__ColorFilter int64

const (
	QCameraImageProcessing__ColorFilterNone       = QCameraImageProcessing__ColorFilter(0)
	QCameraImageProcessing__ColorFilterGrayscale  = QCameraImageProcessing__ColorFilter(1)
	QCameraImageProcessing__ColorFilterNegative   = QCameraImageProcessing__ColorFilter(2)
	QCameraImageProcessing__ColorFilterSolarize   = QCameraImageProcessing__ColorFilter(3)
	QCameraImageProcessing__ColorFilterSepia      = QCameraImageProcessing__ColorFilter(4)
	QCameraImageProcessing__ColorFilterPosterize  = QCameraImageProcessing__ColorFilter(5)
	QCameraImageProcessing__ColorFilterWhiteboard = QCameraImageProcessing__ColorFilter(6)
	QCameraImageProcessing__ColorFilterBlackboard = QCameraImageProcessing__ColorFilter(7)
	QCameraImageProcessing__ColorFilterAqua       = QCameraImageProcessing__ColorFilter(8)
	QCameraImageProcessing__ColorFilterVendor     = QCameraImageProcessing__ColorFilter(1000)
)

//QCameraImageProcessing::WhiteBalanceMode
type QCameraImageProcessing__WhiteBalanceMode int64

const (
	QCameraImageProcessing__WhiteBalanceAuto        = QCameraImageProcessing__WhiteBalanceMode(0)
	QCameraImageProcessing__WhiteBalanceManual      = QCameraImageProcessing__WhiteBalanceMode(1)
	QCameraImageProcessing__WhiteBalanceSunlight    = QCameraImageProcessing__WhiteBalanceMode(2)
	QCameraImageProcessing__WhiteBalanceCloudy      = QCameraImageProcessing__WhiteBalanceMode(3)
	QCameraImageProcessing__WhiteBalanceShade       = QCameraImageProcessing__WhiteBalanceMode(4)
	QCameraImageProcessing__WhiteBalanceTungsten    = QCameraImageProcessing__WhiteBalanceMode(5)
	QCameraImageProcessing__WhiteBalanceFluorescent = QCameraImageProcessing__WhiteBalanceMode(6)
	QCameraImageProcessing__WhiteBalanceFlash       = QCameraImageProcessing__WhiteBalanceMode(7)
	QCameraImageProcessing__WhiteBalanceSunset      = QCameraImageProcessing__WhiteBalanceMode(8)
	QCameraImageProcessing__WhiteBalanceVendor      = QCameraImageProcessing__WhiteBalanceMode(1000)
)

type QCameraImageProcessing struct {
	core.QObject
}

type QCameraImageProcessing_ITF interface {
	core.QObject_ITF
	QCameraImageProcessing_PTR() *QCameraImageProcessing
}

func (p *QCameraImageProcessing) QCameraImageProcessing_PTR() *QCameraImageProcessing {
	return p
}

func (p *QCameraImageProcessing) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QCameraImageProcessing) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraImageProcessing(ptr QCameraImageProcessing_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraImageProcessing_PTR().Pointer()
	}
	return nil
}

func NewQCameraImageProcessingFromPointer(ptr unsafe.Pointer) *QCameraImageProcessing {
	var n = new(QCameraImageProcessing)
	n.SetPointer(ptr)
	return n
}

func (ptr *QCameraImageProcessing) DestroyQCameraImageProcessing() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QCameraImageProcessing) Brightness() float64 {
	defer qt.Recovering("QCameraImageProcessing::brightness")

	if ptr.Pointer() != nil {
		return float64(C.QCameraImageProcessing_Brightness(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraImageProcessing) ColorFilter() QCameraImageProcessing__ColorFilter {
	defer qt.Recovering("QCameraImageProcessing::colorFilter")

	if ptr.Pointer() != nil {
		return QCameraImageProcessing__ColorFilter(C.QCameraImageProcessing_ColorFilter(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraImageProcessing) Contrast() float64 {
	defer qt.Recovering("QCameraImageProcessing::contrast")

	if ptr.Pointer() != nil {
		return float64(C.QCameraImageProcessing_Contrast(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraImageProcessing) DenoisingLevel() float64 {
	defer qt.Recovering("QCameraImageProcessing::denoisingLevel")

	if ptr.Pointer() != nil {
		return float64(C.QCameraImageProcessing_DenoisingLevel(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraImageProcessing) IsAvailable() bool {
	defer qt.Recovering("QCameraImageProcessing::isAvailable")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessing_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraImageProcessing) IsColorFilterSupported(filter QCameraImageProcessing__ColorFilter) bool {
	defer qt.Recovering("QCameraImageProcessing::isColorFilterSupported")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessing_IsColorFilterSupported(ptr.Pointer(), C.longlong(filter)) != 0
	}
	return false
}

func (ptr *QCameraImageProcessing) IsWhiteBalanceModeSupported(mode QCameraImageProcessing__WhiteBalanceMode) bool {
	defer qt.Recovering("QCameraImageProcessing::isWhiteBalanceModeSupported")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessing_IsWhiteBalanceModeSupported(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QCameraImageProcessing) ManualWhiteBalance() float64 {
	defer qt.Recovering("QCameraImageProcessing::manualWhiteBalance")

	if ptr.Pointer() != nil {
		return float64(C.QCameraImageProcessing_ManualWhiteBalance(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraImageProcessing) Saturation() float64 {
	defer qt.Recovering("QCameraImageProcessing::saturation")

	if ptr.Pointer() != nil {
		return float64(C.QCameraImageProcessing_Saturation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraImageProcessing) SetBrightness(value float64) {
	defer qt.Recovering("QCameraImageProcessing::setBrightness")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_SetBrightness(ptr.Pointer(), C.double(value))
	}
}

func (ptr *QCameraImageProcessing) SetColorFilter(filter QCameraImageProcessing__ColorFilter) {
	defer qt.Recovering("QCameraImageProcessing::setColorFilter")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_SetColorFilter(ptr.Pointer(), C.longlong(filter))
	}
}

func (ptr *QCameraImageProcessing) SetContrast(value float64) {
	defer qt.Recovering("QCameraImageProcessing::setContrast")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_SetContrast(ptr.Pointer(), C.double(value))
	}
}

func (ptr *QCameraImageProcessing) SetDenoisingLevel(level float64) {
	defer qt.Recovering("QCameraImageProcessing::setDenoisingLevel")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_SetDenoisingLevel(ptr.Pointer(), C.double(level))
	}
}

func (ptr *QCameraImageProcessing) SetManualWhiteBalance(colorTemperature float64) {
	defer qt.Recovering("QCameraImageProcessing::setManualWhiteBalance")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_SetManualWhiteBalance(ptr.Pointer(), C.double(colorTemperature))
	}
}

func (ptr *QCameraImageProcessing) SetSaturation(value float64) {
	defer qt.Recovering("QCameraImageProcessing::setSaturation")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_SetSaturation(ptr.Pointer(), C.double(value))
	}
}

func (ptr *QCameraImageProcessing) SetSharpeningLevel(level float64) {
	defer qt.Recovering("QCameraImageProcessing::setSharpeningLevel")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_SetSharpeningLevel(ptr.Pointer(), C.double(level))
	}
}

func (ptr *QCameraImageProcessing) SetWhiteBalanceMode(mode QCameraImageProcessing__WhiteBalanceMode) {
	defer qt.Recovering("QCameraImageProcessing::setWhiteBalanceMode")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_SetWhiteBalanceMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QCameraImageProcessing) SharpeningLevel() float64 {
	defer qt.Recovering("QCameraImageProcessing::sharpeningLevel")

	if ptr.Pointer() != nil {
		return float64(C.QCameraImageProcessing_SharpeningLevel(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraImageProcessing) WhiteBalanceMode() QCameraImageProcessing__WhiteBalanceMode {
	defer qt.Recovering("QCameraImageProcessing::whiteBalanceMode")

	if ptr.Pointer() != nil {
		return QCameraImageProcessing__WhiteBalanceMode(C.QCameraImageProcessing_WhiteBalanceMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraImageProcessing_TimerEvent
func callbackQCameraImageProcessing_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessing::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessing::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraImageProcessingFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraImageProcessing) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraImageProcessing::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::timerEvent", f)
	}
}

func (ptr *QCameraImageProcessing) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraImageProcessing::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::timerEvent")
	}
}

func (ptr *QCameraImageProcessing) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessing::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraImageProcessing) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessing::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraImageProcessing_ChildEvent
func callbackQCameraImageProcessing_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessing::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessing::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraImageProcessingFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraImageProcessing) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraImageProcessing::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::childEvent", f)
	}
}

func (ptr *QCameraImageProcessing) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraImageProcessing::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::childEvent")
	}
}

func (ptr *QCameraImageProcessing) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessing::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraImageProcessing) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessing::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraImageProcessing_ConnectNotify
func callbackQCameraImageProcessing_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessing::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessing::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraImageProcessingFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraImageProcessing) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraImageProcessing::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::connectNotify", f)
	}
}

func (ptr *QCameraImageProcessing) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraImageProcessing::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::connectNotify")
	}
}

func (ptr *QCameraImageProcessing) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageProcessing::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraImageProcessing) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageProcessing::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraImageProcessing_CustomEvent
func callbackQCameraImageProcessing_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessing::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessing::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraImageProcessingFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraImageProcessing) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraImageProcessing::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::customEvent", f)
	}
}

func (ptr *QCameraImageProcessing) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraImageProcessing::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::customEvent")
	}
}

func (ptr *QCameraImageProcessing) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessing::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraImageProcessing) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessing::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraImageProcessing_DeleteLater
func callbackQCameraImageProcessing_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessing::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessing::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraImageProcessingFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraImageProcessing) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraImageProcessing::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::deleteLater", f)
	}
}

func (ptr *QCameraImageProcessing) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraImageProcessing::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::deleteLater")
	}
}

func (ptr *QCameraImageProcessing) DeleteLater() {
	defer qt.Recovering("QCameraImageProcessing::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraImageProcessing) DeleteLaterDefault() {
	defer qt.Recovering("QCameraImageProcessing::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_DeleteLaterDefault(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraImageProcessing_DisconnectNotify
func callbackQCameraImageProcessing_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessing::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessing::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraImageProcessingFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraImageProcessing) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraImageProcessing::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::disconnectNotify", f)
	}
}

func (ptr *QCameraImageProcessing) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraImageProcessing::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::disconnectNotify")
	}
}

func (ptr *QCameraImageProcessing) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageProcessing::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraImageProcessing) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageProcessing::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessing_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraImageProcessing_Event
func callbackQCameraImageProcessing_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageProcessing::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessing::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraImageProcessingFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraImageProcessing) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraImageProcessing::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::event", f)
	}
}

func (ptr *QCameraImageProcessing) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraImageProcessing::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::event")
	}
}

func (ptr *QCameraImageProcessing) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageProcessing::event")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessing_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraImageProcessing) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageProcessing::event")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessing_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraImageProcessing_EventFilter
func callbackQCameraImageProcessing_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageProcessing::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessing::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraImageProcessingFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraImageProcessing) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraImageProcessing::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::eventFilter", f)
	}
}

func (ptr *QCameraImageProcessing) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraImageProcessing::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::eventFilter")
	}
}

func (ptr *QCameraImageProcessing) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageProcessing::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessing_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraImageProcessing) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageProcessing::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessing_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraImageProcessing_MetaObject
func callbackQCameraImageProcessing_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraImageProcessing::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessing::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraImageProcessingFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraImageProcessing) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraImageProcessing::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::metaObject", f)
	}
}

func (ptr *QCameraImageProcessing) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraImageProcessing::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessing::metaObject")
	}
}

func (ptr *QCameraImageProcessing) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraImageProcessing::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraImageProcessing_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraImageProcessing) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraImageProcessing::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraImageProcessing_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCameraImageProcessingControl::ProcessingParameter
type QCameraImageProcessingControl__ProcessingParameter int64

const (
	QCameraImageProcessingControl__WhiteBalancePreset   = QCameraImageProcessingControl__ProcessingParameter(0)
	QCameraImageProcessingControl__ColorTemperature     = QCameraImageProcessingControl__ProcessingParameter(1)
	QCameraImageProcessingControl__Contrast             = QCameraImageProcessingControl__ProcessingParameter(2)
	QCameraImageProcessingControl__Saturation           = QCameraImageProcessingControl__ProcessingParameter(3)
	QCameraImageProcessingControl__Brightness           = QCameraImageProcessingControl__ProcessingParameter(4)
	QCameraImageProcessingControl__Sharpening           = QCameraImageProcessingControl__ProcessingParameter(5)
	QCameraImageProcessingControl__Denoising            = QCameraImageProcessingControl__ProcessingParameter(6)
	QCameraImageProcessingControl__ContrastAdjustment   = QCameraImageProcessingControl__ProcessingParameter(7)
	QCameraImageProcessingControl__SaturationAdjustment = QCameraImageProcessingControl__ProcessingParameter(8)
	QCameraImageProcessingControl__BrightnessAdjustment = QCameraImageProcessingControl__ProcessingParameter(9)
	QCameraImageProcessingControl__SharpeningAdjustment = QCameraImageProcessingControl__ProcessingParameter(10)
	QCameraImageProcessingControl__DenoisingAdjustment  = QCameraImageProcessingControl__ProcessingParameter(11)
	QCameraImageProcessingControl__ColorFilter          = QCameraImageProcessingControl__ProcessingParameter(12)
	QCameraImageProcessingControl__ExtendedParameter    = QCameraImageProcessingControl__ProcessingParameter(1000)
)

type QCameraImageProcessingControl struct {
	QMediaControl
}

type QCameraImageProcessingControl_ITF interface {
	QMediaControl_ITF
	QCameraImageProcessingControl_PTR() *QCameraImageProcessingControl
}

func (p *QCameraImageProcessingControl) QCameraImageProcessingControl_PTR() *QCameraImageProcessingControl {
	return p
}

func (p *QCameraImageProcessingControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraImageProcessingControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraImageProcessingControl(ptr QCameraImageProcessingControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraImageProcessingControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraImageProcessingControlFromPointer(ptr unsafe.Pointer) *QCameraImageProcessingControl {
	var n = new(QCameraImageProcessingControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraImageProcessingControl(parent core.QObject_ITF) *QCameraImageProcessingControl {
	defer qt.Recovering("QCameraImageProcessingControl::QCameraImageProcessingControl")

	var tmpValue = NewQCameraImageProcessingControlFromPointer(C.QCameraImageProcessingControl_NewQCameraImageProcessingControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraImageProcessingControl_IsParameterSupported
func callbackQCameraImageProcessingControl_IsParameterSupported(ptr unsafe.Pointer, parameter C.longlong) C.char {
	defer qt.Recovering("callback QCameraImageProcessingControl::isParameterSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::isParameterSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraImageProcessingControl__ProcessingParameter) bool)(QCameraImageProcessingControl__ProcessingParameter(parameter)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraImageProcessingControl) ConnectIsParameterSupported(f func(parameter QCameraImageProcessingControl__ProcessingParameter) bool) {
	defer qt.Recovering("connect QCameraImageProcessingControl::isParameterSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::isParameterSupported", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectIsParameterSupported(parameter QCameraImageProcessingControl__ProcessingParameter) {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::isParameterSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::isParameterSupported")
	}
}

func (ptr *QCameraImageProcessingControl) IsParameterSupported(parameter QCameraImageProcessingControl__ProcessingParameter) bool {
	defer qt.Recovering("QCameraImageProcessingControl::isParameterSupported")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessingControl_IsParameterSupported(ptr.Pointer(), C.longlong(parameter)) != 0
	}
	return false
}

//export callbackQCameraImageProcessingControl_IsParameterValueSupported
func callbackQCameraImageProcessingControl_IsParameterValueSupported(ptr unsafe.Pointer, parameter C.longlong, value unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageProcessingControl::isParameterValueSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::isParameterValueSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraImageProcessingControl__ProcessingParameter, *core.QVariant) bool)(QCameraImageProcessingControl__ProcessingParameter(parameter), core.NewQVariantFromPointer(value)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraImageProcessingControl) ConnectIsParameterValueSupported(f func(parameter QCameraImageProcessingControl__ProcessingParameter, value *core.QVariant) bool) {
	defer qt.Recovering("connect QCameraImageProcessingControl::isParameterValueSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::isParameterValueSupported", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectIsParameterValueSupported(parameter QCameraImageProcessingControl__ProcessingParameter, value core.QVariant_ITF) {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::isParameterValueSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::isParameterValueSupported")
	}
}

func (ptr *QCameraImageProcessingControl) IsParameterValueSupported(parameter QCameraImageProcessingControl__ProcessingParameter, value core.QVariant_ITF) bool {
	defer qt.Recovering("QCameraImageProcessingControl::isParameterValueSupported")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessingControl_IsParameterValueSupported(ptr.Pointer(), C.longlong(parameter), core.PointerFromQVariant(value)) != 0
	}
	return false
}

//export callbackQCameraImageProcessingControl_Parameter
func callbackQCameraImageProcessingControl_Parameter(ptr unsafe.Pointer, parameter C.longlong) unsafe.Pointer {
	defer qt.Recovering("callback QCameraImageProcessingControl::parameter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::parameter"); signal != nil {
		return core.PointerFromQVariant(signal.(func(QCameraImageProcessingControl__ProcessingParameter) *core.QVariant)(QCameraImageProcessingControl__ProcessingParameter(parameter)))
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QCameraImageProcessingControl) ConnectParameter(f func(parameter QCameraImageProcessingControl__ProcessingParameter) *core.QVariant) {
	defer qt.Recovering("connect QCameraImageProcessingControl::parameter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::parameter", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectParameter(parameter QCameraImageProcessingControl__ProcessingParameter) {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::parameter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::parameter")
	}
}

func (ptr *QCameraImageProcessingControl) Parameter(parameter QCameraImageProcessingControl__ProcessingParameter) *core.QVariant {
	defer qt.Recovering("QCameraImageProcessingControl::parameter")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QCameraImageProcessingControl_Parameter(ptr.Pointer(), C.longlong(parameter)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQCameraImageProcessingControl_SetParameter
func callbackQCameraImageProcessingControl_SetParameter(ptr unsafe.Pointer, parameter C.longlong, value unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessingControl::setParameter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::setParameter"); signal != nil {
		signal.(func(QCameraImageProcessingControl__ProcessingParameter, *core.QVariant))(QCameraImageProcessingControl__ProcessingParameter(parameter), core.NewQVariantFromPointer(value))
	}

}

func (ptr *QCameraImageProcessingControl) ConnectSetParameter(f func(parameter QCameraImageProcessingControl__ProcessingParameter, value *core.QVariant)) {
	defer qt.Recovering("connect QCameraImageProcessingControl::setParameter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::setParameter", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectSetParameter(parameter QCameraImageProcessingControl__ProcessingParameter, value core.QVariant_ITF) {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::setParameter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::setParameter")
	}
}

func (ptr *QCameraImageProcessingControl) SetParameter(parameter QCameraImageProcessingControl__ProcessingParameter, value core.QVariant_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::setParameter")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_SetParameter(ptr.Pointer(), C.longlong(parameter), core.PointerFromQVariant(value))
	}
}

func (ptr *QCameraImageProcessingControl) DestroyQCameraImageProcessingControl() {
	defer qt.Recovering("QCameraImageProcessingControl::~QCameraImageProcessingControl")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_DestroyQCameraImageProcessingControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraImageProcessingControl_TimerEvent
func callbackQCameraImageProcessingControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessingControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraImageProcessingControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraImageProcessingControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraImageProcessingControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::timerEvent", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::timerEvent")
	}
}

func (ptr *QCameraImageProcessingControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraImageProcessingControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraImageProcessingControl_ChildEvent
func callbackQCameraImageProcessingControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessingControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraImageProcessingControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraImageProcessingControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraImageProcessingControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::childEvent", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::childEvent")
	}
}

func (ptr *QCameraImageProcessingControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraImageProcessingControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraImageProcessingControl_ConnectNotify
func callbackQCameraImageProcessingControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessingControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraImageProcessingControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraImageProcessingControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraImageProcessingControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::connectNotify", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::connectNotify")
	}
}

func (ptr *QCameraImageProcessingControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraImageProcessingControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraImageProcessingControl_CustomEvent
func callbackQCameraImageProcessingControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessingControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraImageProcessingControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraImageProcessingControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraImageProcessingControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::customEvent", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::customEvent")
	}
}

func (ptr *QCameraImageProcessingControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraImageProcessingControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraImageProcessingControl_DeleteLater
func callbackQCameraImageProcessingControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessingControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraImageProcessingControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraImageProcessingControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraImageProcessingControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::deleteLater", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::deleteLater")
	}
}

func (ptr *QCameraImageProcessingControl) DeleteLater() {
	defer qt.Recovering("QCameraImageProcessingControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraImageProcessingControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraImageProcessingControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraImageProcessingControl_DisconnectNotify
func callbackQCameraImageProcessingControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraImageProcessingControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraImageProcessingControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraImageProcessingControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraImageProcessingControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::disconnectNotify", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::disconnectNotify")
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraImageProcessingControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraImageProcessingControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraImageProcessingControl_Event
func callbackQCameraImageProcessingControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageProcessingControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraImageProcessingControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraImageProcessingControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraImageProcessingControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::event", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::event")
	}
}

func (ptr *QCameraImageProcessingControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageProcessingControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessingControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraImageProcessingControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageProcessingControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessingControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraImageProcessingControl_EventFilter
func callbackQCameraImageProcessingControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraImageProcessingControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraImageProcessingControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraImageProcessingControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraImageProcessingControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::eventFilter", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::eventFilter")
	}
}

func (ptr *QCameraImageProcessingControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageProcessingControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessingControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraImageProcessingControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraImageProcessingControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraImageProcessingControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraImageProcessingControl_MetaObject
func callbackQCameraImageProcessingControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraImageProcessingControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraImageProcessingControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraImageProcessingControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraImageProcessingControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraImageProcessingControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::metaObject", f)
	}
}

func (ptr *QCameraImageProcessingControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraImageProcessingControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraImageProcessingControl::metaObject")
	}
}

func (ptr *QCameraImageProcessingControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraImageProcessingControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraImageProcessingControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraImageProcessingControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraImageProcessingControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraImageProcessingControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraInfo struct {
	ptr unsafe.Pointer
}

type QCameraInfo_ITF interface {
	QCameraInfo_PTR() *QCameraInfo
}

func (p *QCameraInfo) QCameraInfo_PTR() *QCameraInfo {
	return p
}

func (p *QCameraInfo) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCameraInfo) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCameraInfo(ptr QCameraInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraInfo_PTR().Pointer()
	}
	return nil
}

func NewQCameraInfoFromPointer(ptr unsafe.Pointer) *QCameraInfo {
	var n = new(QCameraInfo)
	n.SetPointer(ptr)
	return n
}
func NewQCameraInfo(name string) *QCameraInfo {
	defer qt.Recovering("QCameraInfo::QCameraInfo")

	var nameC = C.CString(hex.EncodeToString([]byte(name)))
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQCameraInfoFromPointer(C.QCameraInfo_NewQCameraInfo(nameC))
	runtime.SetFinalizer(tmpValue, (*QCameraInfo).DestroyQCameraInfo)
	return tmpValue
}

func NewQCameraInfo2(camera QCamera_ITF) *QCameraInfo {
	defer qt.Recovering("QCameraInfo::QCameraInfo")

	var tmpValue = NewQCameraInfoFromPointer(C.QCameraInfo_NewQCameraInfo2(PointerFromQCamera(camera)))
	runtime.SetFinalizer(tmpValue, (*QCameraInfo).DestroyQCameraInfo)
	return tmpValue
}

func NewQCameraInfo3(other QCameraInfo_ITF) *QCameraInfo {
	defer qt.Recovering("QCameraInfo::QCameraInfo")

	var tmpValue = NewQCameraInfoFromPointer(C.QCameraInfo_NewQCameraInfo3(PointerFromQCameraInfo(other)))
	runtime.SetFinalizer(tmpValue, (*QCameraInfo).DestroyQCameraInfo)
	return tmpValue
}

func QCameraInfo_DefaultCamera() *QCameraInfo {
	defer qt.Recovering("QCameraInfo::defaultCamera")

	var tmpValue = NewQCameraInfoFromPointer(C.QCameraInfo_QCameraInfo_DefaultCamera())
	runtime.SetFinalizer(tmpValue, (*QCameraInfo).DestroyQCameraInfo)
	return tmpValue
}

func (ptr *QCameraInfo) DefaultCamera() *QCameraInfo {
	defer qt.Recovering("QCameraInfo::defaultCamera")

	var tmpValue = NewQCameraInfoFromPointer(C.QCameraInfo_QCameraInfo_DefaultCamera())
	runtime.SetFinalizer(tmpValue, (*QCameraInfo).DestroyQCameraInfo)
	return tmpValue
}

func (ptr *QCameraInfo) Description() string {
	defer qt.Recovering("QCameraInfo::description")

	if ptr.Pointer() != nil {
		return C.GoString(C.QCameraInfo_Description(ptr.Pointer()))
	}
	return ""
}

func (ptr *QCameraInfo) DeviceName() string {
	defer qt.Recovering("QCameraInfo::deviceName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QCameraInfo_DeviceName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QCameraInfo) IsNull() bool {
	defer qt.Recovering("QCameraInfo::isNull")

	if ptr.Pointer() != nil {
		return C.QCameraInfo_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraInfo) Orientation() int {
	defer qt.Recovering("QCameraInfo::orientation")

	if ptr.Pointer() != nil {
		return int(int32(C.QCameraInfo_Orientation(ptr.Pointer())))
	}
	return 0
}

func (ptr *QCameraInfo) Position() QCamera__Position {
	defer qt.Recovering("QCameraInfo::position")

	if ptr.Pointer() != nil {
		return QCamera__Position(C.QCameraInfo_Position(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraInfo) DestroyQCameraInfo() {
	defer qt.Recovering("QCameraInfo::~QCameraInfo")

	if ptr.Pointer() != nil {
		C.QCameraInfo_DestroyQCameraInfo(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QCameraInfoControl struct {
	QMediaControl
}

type QCameraInfoControl_ITF interface {
	QMediaControl_ITF
	QCameraInfoControl_PTR() *QCameraInfoControl
}

func (p *QCameraInfoControl) QCameraInfoControl_PTR() *QCameraInfoControl {
	return p
}

func (p *QCameraInfoControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraInfoControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraInfoControl(ptr QCameraInfoControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraInfoControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraInfoControlFromPointer(ptr unsafe.Pointer) *QCameraInfoControl {
	var n = new(QCameraInfoControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraInfoControl(parent core.QObject_ITF) *QCameraInfoControl {
	defer qt.Recovering("QCameraInfoControl::QCameraInfoControl")

	var tmpValue = NewQCameraInfoControlFromPointer(C.QCameraInfoControl_NewQCameraInfoControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraInfoControl_CameraOrientation
func callbackQCameraInfoControl_CameraOrientation(ptr unsafe.Pointer, deviceName *C.char) C.int {
	defer qt.Recovering("callback QCameraInfoControl::cameraOrientation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::cameraOrientation"); signal != nil {
		return C.int(int32(signal.(func(string) int)(C.GoString(deviceName))))
	}

	return C.int(int32(0))
}

func (ptr *QCameraInfoControl) ConnectCameraOrientation(f func(deviceName string) int) {
	defer qt.Recovering("connect QCameraInfoControl::cameraOrientation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::cameraOrientation", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectCameraOrientation(deviceName string) {
	defer qt.Recovering("disconnect QCameraInfoControl::cameraOrientation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::cameraOrientation")
	}
}

func (ptr *QCameraInfoControl) CameraOrientation(deviceName string) int {
	defer qt.Recovering("QCameraInfoControl::cameraOrientation")

	if ptr.Pointer() != nil {
		var deviceNameC = C.CString(deviceName)
		defer C.free(unsafe.Pointer(deviceNameC))
		return int(int32(C.QCameraInfoControl_CameraOrientation(ptr.Pointer(), deviceNameC)))
	}
	return 0
}

//export callbackQCameraInfoControl_CameraPosition
func callbackQCameraInfoControl_CameraPosition(ptr unsafe.Pointer, deviceName *C.char) C.longlong {
	defer qt.Recovering("callback QCameraInfoControl::cameraPosition")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::cameraPosition"); signal != nil {
		return C.longlong(signal.(func(string) QCamera__Position)(C.GoString(deviceName)))
	}

	return C.longlong(0)
}

func (ptr *QCameraInfoControl) ConnectCameraPosition(f func(deviceName string) QCamera__Position) {
	defer qt.Recovering("connect QCameraInfoControl::cameraPosition")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::cameraPosition", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectCameraPosition(deviceName string) {
	defer qt.Recovering("disconnect QCameraInfoControl::cameraPosition")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::cameraPosition")
	}
}

func (ptr *QCameraInfoControl) CameraPosition(deviceName string) QCamera__Position {
	defer qt.Recovering("QCameraInfoControl::cameraPosition")

	if ptr.Pointer() != nil {
		var deviceNameC = C.CString(deviceName)
		defer C.free(unsafe.Pointer(deviceNameC))
		return QCamera__Position(C.QCameraInfoControl_CameraPosition(ptr.Pointer(), deviceNameC))
	}
	return 0
}

func (ptr *QCameraInfoControl) DestroyQCameraInfoControl() {
	defer qt.Recovering("QCameraInfoControl::~QCameraInfoControl")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_DestroyQCameraInfoControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraInfoControl_TimerEvent
func callbackQCameraInfoControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraInfoControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraInfoControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraInfoControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraInfoControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::timerEvent", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraInfoControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::timerEvent")
	}
}

func (ptr *QCameraInfoControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraInfoControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraInfoControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraInfoControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraInfoControl_ChildEvent
func callbackQCameraInfoControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraInfoControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraInfoControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraInfoControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraInfoControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::childEvent", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraInfoControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::childEvent")
	}
}

func (ptr *QCameraInfoControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraInfoControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraInfoControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraInfoControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraInfoControl_ConnectNotify
func callbackQCameraInfoControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraInfoControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraInfoControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraInfoControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraInfoControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::connectNotify", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraInfoControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::connectNotify")
	}
}

func (ptr *QCameraInfoControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraInfoControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraInfoControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraInfoControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraInfoControl_CustomEvent
func callbackQCameraInfoControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraInfoControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraInfoControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraInfoControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraInfoControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::customEvent", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraInfoControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::customEvent")
	}
}

func (ptr *QCameraInfoControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraInfoControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraInfoControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraInfoControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraInfoControl_DeleteLater
func callbackQCameraInfoControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraInfoControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraInfoControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraInfoControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraInfoControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::deleteLater", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraInfoControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::deleteLater")
	}
}

func (ptr *QCameraInfoControl) DeleteLater() {
	defer qt.Recovering("QCameraInfoControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraInfoControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraInfoControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraInfoControl_DisconnectNotify
func callbackQCameraInfoControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraInfoControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraInfoControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraInfoControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraInfoControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::disconnectNotify", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraInfoControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::disconnectNotify")
	}
}

func (ptr *QCameraInfoControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraInfoControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraInfoControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraInfoControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraInfoControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraInfoControl_Event
func callbackQCameraInfoControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraInfoControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraInfoControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraInfoControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraInfoControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::event", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraInfoControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::event")
	}
}

func (ptr *QCameraInfoControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraInfoControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraInfoControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraInfoControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraInfoControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraInfoControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraInfoControl_EventFilter
func callbackQCameraInfoControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraInfoControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraInfoControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraInfoControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraInfoControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::eventFilter", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraInfoControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::eventFilter")
	}
}

func (ptr *QCameraInfoControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraInfoControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraInfoControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraInfoControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraInfoControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraInfoControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraInfoControl_MetaObject
func callbackQCameraInfoControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraInfoControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraInfoControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraInfoControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraInfoControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraInfoControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::metaObject", f)
	}
}

func (ptr *QCameraInfoControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraInfoControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraInfoControl::metaObject")
	}
}

func (ptr *QCameraInfoControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraInfoControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraInfoControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraInfoControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraInfoControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraInfoControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraLocksControl struct {
	QMediaControl
}

type QCameraLocksControl_ITF interface {
	QMediaControl_ITF
	QCameraLocksControl_PTR() *QCameraLocksControl
}

func (p *QCameraLocksControl) QCameraLocksControl_PTR() *QCameraLocksControl {
	return p
}

func (p *QCameraLocksControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraLocksControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraLocksControl(ptr QCameraLocksControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraLocksControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraLocksControlFromPointer(ptr unsafe.Pointer) *QCameraLocksControl {
	var n = new(QCameraLocksControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraLocksControl(parent core.QObject_ITF) *QCameraLocksControl {
	defer qt.Recovering("QCameraLocksControl::QCameraLocksControl")

	var tmpValue = NewQCameraLocksControlFromPointer(C.QCameraLocksControl_NewQCameraLocksControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraLocksControl_LockStatus
func callbackQCameraLocksControl_LockStatus(ptr unsafe.Pointer, lock C.longlong) C.longlong {
	defer qt.Recovering("callback QCameraLocksControl::lockStatus")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::lockStatus"); signal != nil {
		return C.longlong(signal.(func(QCamera__LockType) QCamera__LockStatus)(QCamera__LockType(lock)))
	}

	return C.longlong(0)
}

func (ptr *QCameraLocksControl) ConnectLockStatus(f func(lock QCamera__LockType) QCamera__LockStatus) {
	defer qt.Recovering("connect QCameraLocksControl::lockStatus")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::lockStatus", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectLockStatus(lock QCamera__LockType) {
	defer qt.Recovering("disconnect QCameraLocksControl::lockStatus")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::lockStatus")
	}
}

func (ptr *QCameraLocksControl) LockStatus(lock QCamera__LockType) QCamera__LockStatus {
	defer qt.Recovering("QCameraLocksControl::lockStatus")

	if ptr.Pointer() != nil {
		return QCamera__LockStatus(C.QCameraLocksControl_LockStatus(ptr.Pointer(), C.longlong(lock)))
	}
	return 0
}

//export callbackQCameraLocksControl_LockStatusChanged
func callbackQCameraLocksControl_LockStatusChanged(ptr unsafe.Pointer, lock C.longlong, status C.longlong, reason C.longlong) {
	defer qt.Recovering("callback QCameraLocksControl::lockStatusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::lockStatusChanged"); signal != nil {
		signal.(func(QCamera__LockType, QCamera__LockStatus, QCamera__LockChangeReason))(QCamera__LockType(lock), QCamera__LockStatus(status), QCamera__LockChangeReason(reason))
	}

}

func (ptr *QCameraLocksControl) ConnectLockStatusChanged(f func(lock QCamera__LockType, status QCamera__LockStatus, reason QCamera__LockChangeReason)) {
	defer qt.Recovering("connect QCameraLocksControl::lockStatusChanged")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_ConnectLockStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::lockStatusChanged", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectLockStatusChanged() {
	defer qt.Recovering("disconnect QCameraLocksControl::lockStatusChanged")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_DisconnectLockStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::lockStatusChanged")
	}
}

func (ptr *QCameraLocksControl) LockStatusChanged(lock QCamera__LockType, status QCamera__LockStatus, reason QCamera__LockChangeReason) {
	defer qt.Recovering("QCameraLocksControl::lockStatusChanged")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_LockStatusChanged(ptr.Pointer(), C.longlong(lock), C.longlong(status), C.longlong(reason))
	}
}

//export callbackQCameraLocksControl_SearchAndLock
func callbackQCameraLocksControl_SearchAndLock(ptr unsafe.Pointer, locks C.longlong) {
	defer qt.Recovering("callback QCameraLocksControl::searchAndLock")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::searchAndLock"); signal != nil {
		signal.(func(QCamera__LockType))(QCamera__LockType(locks))
	}

}

func (ptr *QCameraLocksControl) ConnectSearchAndLock(f func(locks QCamera__LockType)) {
	defer qt.Recovering("connect QCameraLocksControl::searchAndLock")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::searchAndLock", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectSearchAndLock(locks QCamera__LockType) {
	defer qt.Recovering("disconnect QCameraLocksControl::searchAndLock")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::searchAndLock")
	}
}

func (ptr *QCameraLocksControl) SearchAndLock(locks QCamera__LockType) {
	defer qt.Recovering("QCameraLocksControl::searchAndLock")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_SearchAndLock(ptr.Pointer(), C.longlong(locks))
	}
}

//export callbackQCameraLocksControl_SupportedLocks
func callbackQCameraLocksControl_SupportedLocks(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QCameraLocksControl::supportedLocks")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::supportedLocks"); signal != nil {
		return C.longlong(signal.(func() QCamera__LockType)())
	}

	return C.longlong(0)
}

func (ptr *QCameraLocksControl) ConnectSupportedLocks(f func() QCamera__LockType) {
	defer qt.Recovering("connect QCameraLocksControl::supportedLocks")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::supportedLocks", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectSupportedLocks() {
	defer qt.Recovering("disconnect QCameraLocksControl::supportedLocks")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::supportedLocks")
	}
}

func (ptr *QCameraLocksControl) SupportedLocks() QCamera__LockType {
	defer qt.Recovering("QCameraLocksControl::supportedLocks")

	if ptr.Pointer() != nil {
		return QCamera__LockType(C.QCameraLocksControl_SupportedLocks(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraLocksControl_Unlock
func callbackQCameraLocksControl_Unlock(ptr unsafe.Pointer, locks C.longlong) {
	defer qt.Recovering("callback QCameraLocksControl::unlock")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::unlock"); signal != nil {
		signal.(func(QCamera__LockType))(QCamera__LockType(locks))
	}

}

func (ptr *QCameraLocksControl) ConnectUnlock(f func(locks QCamera__LockType)) {
	defer qt.Recovering("connect QCameraLocksControl::unlock")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::unlock", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectUnlock(locks QCamera__LockType) {
	defer qt.Recovering("disconnect QCameraLocksControl::unlock")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::unlock")
	}
}

func (ptr *QCameraLocksControl) Unlock(locks QCamera__LockType) {
	defer qt.Recovering("QCameraLocksControl::unlock")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_Unlock(ptr.Pointer(), C.longlong(locks))
	}
}

func (ptr *QCameraLocksControl) DestroyQCameraLocksControl() {
	defer qt.Recovering("QCameraLocksControl::~QCameraLocksControl")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_DestroyQCameraLocksControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraLocksControl_TimerEvent
func callbackQCameraLocksControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraLocksControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraLocksControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraLocksControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraLocksControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::timerEvent", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraLocksControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::timerEvent")
	}
}

func (ptr *QCameraLocksControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraLocksControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraLocksControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraLocksControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraLocksControl_ChildEvent
func callbackQCameraLocksControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraLocksControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraLocksControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraLocksControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraLocksControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::childEvent", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraLocksControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::childEvent")
	}
}

func (ptr *QCameraLocksControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraLocksControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraLocksControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraLocksControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraLocksControl_ConnectNotify
func callbackQCameraLocksControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraLocksControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraLocksControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraLocksControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraLocksControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::connectNotify", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraLocksControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::connectNotify")
	}
}

func (ptr *QCameraLocksControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraLocksControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraLocksControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraLocksControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraLocksControl_CustomEvent
func callbackQCameraLocksControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraLocksControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraLocksControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraLocksControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraLocksControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::customEvent", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraLocksControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::customEvent")
	}
}

func (ptr *QCameraLocksControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraLocksControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraLocksControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraLocksControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraLocksControl_DeleteLater
func callbackQCameraLocksControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraLocksControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraLocksControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraLocksControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraLocksControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::deleteLater", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraLocksControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::deleteLater")
	}
}

func (ptr *QCameraLocksControl) DeleteLater() {
	defer qt.Recovering("QCameraLocksControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraLocksControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraLocksControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraLocksControl_DisconnectNotify
func callbackQCameraLocksControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraLocksControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraLocksControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraLocksControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraLocksControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::disconnectNotify", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraLocksControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::disconnectNotify")
	}
}

func (ptr *QCameraLocksControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraLocksControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraLocksControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraLocksControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraLocksControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraLocksControl_Event
func callbackQCameraLocksControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraLocksControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraLocksControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraLocksControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraLocksControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::event", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraLocksControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::event")
	}
}

func (ptr *QCameraLocksControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraLocksControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraLocksControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraLocksControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraLocksControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraLocksControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraLocksControl_EventFilter
func callbackQCameraLocksControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraLocksControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraLocksControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraLocksControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraLocksControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::eventFilter", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraLocksControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::eventFilter")
	}
}

func (ptr *QCameraLocksControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraLocksControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraLocksControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraLocksControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraLocksControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraLocksControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraLocksControl_MetaObject
func callbackQCameraLocksControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraLocksControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraLocksControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraLocksControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraLocksControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraLocksControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::metaObject", f)
	}
}

func (ptr *QCameraLocksControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraLocksControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraLocksControl::metaObject")
	}
}

func (ptr *QCameraLocksControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraLocksControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraLocksControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraLocksControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraLocksControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraLocksControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraViewfinder struct {
	QVideoWidget
}

type QCameraViewfinder_ITF interface {
	QVideoWidget_ITF
	QCameraViewfinder_PTR() *QCameraViewfinder
}

func (p *QCameraViewfinder) QCameraViewfinder_PTR() *QCameraViewfinder {
	return p
}

func (p *QCameraViewfinder) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QVideoWidget_PTR().Pointer()
	}
	return nil
}

func (p *QCameraViewfinder) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QVideoWidget_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraViewfinder(ptr QCameraViewfinder_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraViewfinder_PTR().Pointer()
	}
	return nil
}

func NewQCameraViewfinderFromPointer(ptr unsafe.Pointer) *QCameraViewfinder {
	var n = new(QCameraViewfinder)
	n.SetPointer(ptr)
	return n
}
func NewQCameraViewfinder(parent widgets.QWidget_ITF) *QCameraViewfinder {
	defer qt.Recovering("QCameraViewfinder::QCameraViewfinder")

	var tmpValue = NewQCameraViewfinderFromPointer(C.QCameraViewfinder_NewQCameraViewfinder(widgets.PointerFromQWidget(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraViewfinder_MediaObject
func callbackQCameraViewfinder_MediaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraViewfinder::mediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::mediaObject"); signal != nil {
		return PointerFromQMediaObject(signal.(func() *QMediaObject)())
	}

	return PointerFromQMediaObject(NewQCameraViewfinderFromPointer(ptr).MediaObjectDefault())
}

func (ptr *QCameraViewfinder) ConnectMediaObject(f func() *QMediaObject) {
	defer qt.Recovering("connect QCameraViewfinder::mediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mediaObject", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectMediaObject() {
	defer qt.Recovering("disconnect QCameraViewfinder::mediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mediaObject")
	}
}

func (ptr *QCameraViewfinder) MediaObject() *QMediaObject {
	defer qt.Recovering("QCameraViewfinder::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QCameraViewfinder_MediaObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QCameraViewfinder) MediaObjectDefault() *QMediaObject {
	defer qt.Recovering("QCameraViewfinder::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QCameraViewfinder_MediaObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQCameraViewfinder_SetMediaObject
func callbackQCameraViewfinder_SetMediaObject(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraViewfinder::setMediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setMediaObject"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMediaObject) bool)(NewQMediaObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderFromPointer(ptr).SetMediaObjectDefault(NewQMediaObjectFromPointer(object)))))
}

func (ptr *QCameraViewfinder) ConnectSetMediaObject(f func(object *QMediaObject) bool) {
	defer qt.Recovering("connect QCameraViewfinder::setMediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setMediaObject", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetMediaObject() {
	defer qt.Recovering("disconnect QCameraViewfinder::setMediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setMediaObject")
	}
}

func (ptr *QCameraViewfinder) SetMediaObject(object QMediaObject_ITF) bool {
	defer qt.Recovering("QCameraViewfinder::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_SetMediaObject(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

func (ptr *QCameraViewfinder) SetMediaObjectDefault(object QMediaObject_ITF) bool {
	defer qt.Recovering("QCameraViewfinder::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_SetMediaObjectDefault(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

func (ptr *QCameraViewfinder) DestroyQCameraViewfinder() {
	defer qt.Recovering("QCameraViewfinder::~QCameraViewfinder")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DestroyQCameraViewfinder(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraViewfinder_SetAspectRatioMode
func callbackQCameraViewfinder_SetAspectRatioMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QCameraViewfinder::setAspectRatioMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setAspectRatioMode"); signal != nil {
		signal.(func(core.Qt__AspectRatioMode))(core.Qt__AspectRatioMode(mode))
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetAspectRatioModeDefault(core.Qt__AspectRatioMode(mode))
	}
}

func (ptr *QCameraViewfinder) ConnectSetAspectRatioMode(f func(mode core.Qt__AspectRatioMode)) {
	defer qt.Recovering("connect QCameraViewfinder::setAspectRatioMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setAspectRatioMode", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetAspectRatioMode() {
	defer qt.Recovering("disconnect QCameraViewfinder::setAspectRatioMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setAspectRatioMode")
	}
}

func (ptr *QCameraViewfinder) SetAspectRatioMode(mode core.Qt__AspectRatioMode) {
	defer qt.Recovering("QCameraViewfinder::setAspectRatioMode")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetAspectRatioMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QCameraViewfinder) SetAspectRatioModeDefault(mode core.Qt__AspectRatioMode) {
	defer qt.Recovering("QCameraViewfinder::setAspectRatioMode")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetAspectRatioModeDefault(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQCameraViewfinder_SetBrightness
func callbackQCameraViewfinder_SetBrightness(ptr unsafe.Pointer, brightness C.int) {
	defer qt.Recovering("callback QCameraViewfinder::setBrightness")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setBrightness"); signal != nil {
		signal.(func(int))(int(int32(brightness)))
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetBrightnessDefault(int(int32(brightness)))
	}
}

func (ptr *QCameraViewfinder) ConnectSetBrightness(f func(brightness int)) {
	defer qt.Recovering("connect QCameraViewfinder::setBrightness")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setBrightness", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetBrightness() {
	defer qt.Recovering("disconnect QCameraViewfinder::setBrightness")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setBrightness")
	}
}

func (ptr *QCameraViewfinder) SetBrightness(brightness int) {
	defer qt.Recovering("QCameraViewfinder::setBrightness")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetBrightness(ptr.Pointer(), C.int(int32(brightness)))
	}
}

func (ptr *QCameraViewfinder) SetBrightnessDefault(brightness int) {
	defer qt.Recovering("QCameraViewfinder::setBrightness")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetBrightnessDefault(ptr.Pointer(), C.int(int32(brightness)))
	}
}

//export callbackQCameraViewfinder_SetContrast
func callbackQCameraViewfinder_SetContrast(ptr unsafe.Pointer, contrast C.int) {
	defer qt.Recovering("callback QCameraViewfinder::setContrast")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setContrast"); signal != nil {
		signal.(func(int))(int(int32(contrast)))
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetContrastDefault(int(int32(contrast)))
	}
}

func (ptr *QCameraViewfinder) ConnectSetContrast(f func(contrast int)) {
	defer qt.Recovering("connect QCameraViewfinder::setContrast")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setContrast", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetContrast() {
	defer qt.Recovering("disconnect QCameraViewfinder::setContrast")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setContrast")
	}
}

func (ptr *QCameraViewfinder) SetContrast(contrast int) {
	defer qt.Recovering("QCameraViewfinder::setContrast")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetContrast(ptr.Pointer(), C.int(int32(contrast)))
	}
}

func (ptr *QCameraViewfinder) SetContrastDefault(contrast int) {
	defer qt.Recovering("QCameraViewfinder::setContrast")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetContrastDefault(ptr.Pointer(), C.int(int32(contrast)))
	}
}

//export callbackQCameraViewfinder_SetFullScreen
func callbackQCameraViewfinder_SetFullScreen(ptr unsafe.Pointer, fullScreen C.char) {
	defer qt.Recovering("callback QCameraViewfinder::setFullScreen")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setFullScreen"); signal != nil {
		signal.(func(bool))(int8(fullScreen) != 0)
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetFullScreenDefault(int8(fullScreen) != 0)
	}
}

func (ptr *QCameraViewfinder) ConnectSetFullScreen(f func(fullScreen bool)) {
	defer qt.Recovering("connect QCameraViewfinder::setFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setFullScreen", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetFullScreen() {
	defer qt.Recovering("disconnect QCameraViewfinder::setFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setFullScreen")
	}
}

func (ptr *QCameraViewfinder) SetFullScreen(fullScreen bool) {
	defer qt.Recovering("QCameraViewfinder::setFullScreen")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetFullScreen(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fullScreen))))
	}
}

func (ptr *QCameraViewfinder) SetFullScreenDefault(fullScreen bool) {
	defer qt.Recovering("QCameraViewfinder::setFullScreen")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetFullScreenDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fullScreen))))
	}
}

//export callbackQCameraViewfinder_SetHue
func callbackQCameraViewfinder_SetHue(ptr unsafe.Pointer, hue C.int) {
	defer qt.Recovering("callback QCameraViewfinder::setHue")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setHue"); signal != nil {
		signal.(func(int))(int(int32(hue)))
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetHueDefault(int(int32(hue)))
	}
}

func (ptr *QCameraViewfinder) ConnectSetHue(f func(hue int)) {
	defer qt.Recovering("connect QCameraViewfinder::setHue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setHue", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetHue() {
	defer qt.Recovering("disconnect QCameraViewfinder::setHue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setHue")
	}
}

func (ptr *QCameraViewfinder) SetHue(hue int) {
	defer qt.Recovering("QCameraViewfinder::setHue")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetHue(ptr.Pointer(), C.int(int32(hue)))
	}
}

func (ptr *QCameraViewfinder) SetHueDefault(hue int) {
	defer qt.Recovering("QCameraViewfinder::setHue")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetHueDefault(ptr.Pointer(), C.int(int32(hue)))
	}
}

//export callbackQCameraViewfinder_SetSaturation
func callbackQCameraViewfinder_SetSaturation(ptr unsafe.Pointer, saturation C.int) {
	defer qt.Recovering("callback QCameraViewfinder::setSaturation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setSaturation"); signal != nil {
		signal.(func(int))(int(int32(saturation)))
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetSaturationDefault(int(int32(saturation)))
	}
}

func (ptr *QCameraViewfinder) ConnectSetSaturation(f func(saturation int)) {
	defer qt.Recovering("connect QCameraViewfinder::setSaturation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setSaturation", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetSaturation() {
	defer qt.Recovering("disconnect QCameraViewfinder::setSaturation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setSaturation")
	}
}

func (ptr *QCameraViewfinder) SetSaturation(saturation int) {
	defer qt.Recovering("QCameraViewfinder::setSaturation")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetSaturation(ptr.Pointer(), C.int(int32(saturation)))
	}
}

func (ptr *QCameraViewfinder) SetSaturationDefault(saturation int) {
	defer qt.Recovering("QCameraViewfinder::setSaturation")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetSaturationDefault(ptr.Pointer(), C.int(int32(saturation)))
	}
}

//export callbackQCameraViewfinder_ActionEvent
func callbackQCameraViewfinder_ActionEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::actionEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::actionEvent"); signal != nil {
		signal.(func(*gui.QActionEvent))(gui.NewQActionEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).ActionEventDefault(gui.NewQActionEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectActionEvent(f func(event *gui.QActionEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::actionEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::actionEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectActionEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::actionEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::actionEvent")
	}
}

func (ptr *QCameraViewfinder) ActionEvent(event gui.QActionEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::actionEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ActionEvent(ptr.Pointer(), gui.PointerFromQActionEvent(event))
	}
}

func (ptr *QCameraViewfinder) ActionEventDefault(event gui.QActionEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::actionEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ActionEventDefault(ptr.Pointer(), gui.PointerFromQActionEvent(event))
	}
}

//export callbackQCameraViewfinder_DragEnterEvent
func callbackQCameraViewfinder_DragEnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::dragEnterEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::dragEnterEvent"); signal != nil {
		signal.(func(*gui.QDragEnterEvent))(gui.NewQDragEnterEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).DragEnterEventDefault(gui.NewQDragEnterEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectDragEnterEvent(f func(event *gui.QDragEnterEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::dragEnterEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::dragEnterEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectDragEnterEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::dragEnterEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::dragEnterEvent")
	}
}

func (ptr *QCameraViewfinder) DragEnterEvent(event gui.QDragEnterEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::dragEnterEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DragEnterEvent(ptr.Pointer(), gui.PointerFromQDragEnterEvent(event))
	}
}

func (ptr *QCameraViewfinder) DragEnterEventDefault(event gui.QDragEnterEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::dragEnterEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DragEnterEventDefault(ptr.Pointer(), gui.PointerFromQDragEnterEvent(event))
	}
}

//export callbackQCameraViewfinder_DragLeaveEvent
func callbackQCameraViewfinder_DragLeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::dragLeaveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::dragLeaveEvent"); signal != nil {
		signal.(func(*gui.QDragLeaveEvent))(gui.NewQDragLeaveEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).DragLeaveEventDefault(gui.NewQDragLeaveEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectDragLeaveEvent(f func(event *gui.QDragLeaveEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::dragLeaveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::dragLeaveEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectDragLeaveEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::dragLeaveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::dragLeaveEvent")
	}
}

func (ptr *QCameraViewfinder) DragLeaveEvent(event gui.QDragLeaveEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::dragLeaveEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DragLeaveEvent(ptr.Pointer(), gui.PointerFromQDragLeaveEvent(event))
	}
}

func (ptr *QCameraViewfinder) DragLeaveEventDefault(event gui.QDragLeaveEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::dragLeaveEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DragLeaveEventDefault(ptr.Pointer(), gui.PointerFromQDragLeaveEvent(event))
	}
}

//export callbackQCameraViewfinder_DragMoveEvent
func callbackQCameraViewfinder_DragMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::dragMoveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::dragMoveEvent"); signal != nil {
		signal.(func(*gui.QDragMoveEvent))(gui.NewQDragMoveEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).DragMoveEventDefault(gui.NewQDragMoveEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectDragMoveEvent(f func(event *gui.QDragMoveEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::dragMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::dragMoveEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectDragMoveEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::dragMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::dragMoveEvent")
	}
}

func (ptr *QCameraViewfinder) DragMoveEvent(event gui.QDragMoveEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::dragMoveEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DragMoveEvent(ptr.Pointer(), gui.PointerFromQDragMoveEvent(event))
	}
}

func (ptr *QCameraViewfinder) DragMoveEventDefault(event gui.QDragMoveEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::dragMoveEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DragMoveEventDefault(ptr.Pointer(), gui.PointerFromQDragMoveEvent(event))
	}
}

//export callbackQCameraViewfinder_DropEvent
func callbackQCameraViewfinder_DropEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::dropEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::dropEvent"); signal != nil {
		signal.(func(*gui.QDropEvent))(gui.NewQDropEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).DropEventDefault(gui.NewQDropEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectDropEvent(f func(event *gui.QDropEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::dropEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::dropEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectDropEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::dropEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::dropEvent")
	}
}

func (ptr *QCameraViewfinder) DropEvent(event gui.QDropEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::dropEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DropEvent(ptr.Pointer(), gui.PointerFromQDropEvent(event))
	}
}

func (ptr *QCameraViewfinder) DropEventDefault(event gui.QDropEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::dropEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DropEventDefault(ptr.Pointer(), gui.PointerFromQDropEvent(event))
	}
}

//export callbackQCameraViewfinder_EnterEvent
func callbackQCameraViewfinder_EnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::enterEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::enterEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).EnterEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectEnterEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::enterEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::enterEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectEnterEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::enterEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::enterEvent")
	}
}

func (ptr *QCameraViewfinder) EnterEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::enterEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_EnterEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraViewfinder) EnterEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::enterEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_EnterEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraViewfinder_FocusInEvent
func callbackQCameraViewfinder_FocusInEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::focusInEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::focusInEvent"); signal != nil {
		signal.(func(*gui.QFocusEvent))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).FocusInEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectFocusInEvent(f func(event *gui.QFocusEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::focusInEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::focusInEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectFocusInEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::focusInEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::focusInEvent")
	}
}

func (ptr *QCameraViewfinder) FocusInEvent(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::focusInEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_FocusInEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QCameraViewfinder) FocusInEventDefault(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::focusInEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_FocusInEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

//export callbackQCameraViewfinder_FocusOutEvent
func callbackQCameraViewfinder_FocusOutEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::focusOutEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::focusOutEvent"); signal != nil {
		signal.(func(*gui.QFocusEvent))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).FocusOutEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectFocusOutEvent(f func(event *gui.QFocusEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::focusOutEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectFocusOutEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::focusOutEvent")
	}
}

func (ptr *QCameraViewfinder) FocusOutEvent(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_FocusOutEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QCameraViewfinder) FocusOutEventDefault(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_FocusOutEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

//export callbackQCameraViewfinder_LeaveEvent
func callbackQCameraViewfinder_LeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::leaveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::leaveEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).LeaveEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectLeaveEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::leaveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::leaveEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectLeaveEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::leaveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::leaveEvent")
	}
}

func (ptr *QCameraViewfinder) LeaveEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::leaveEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_LeaveEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraViewfinder) LeaveEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::leaveEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_LeaveEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraViewfinder_MinimumSizeHint
func callbackQCameraViewfinder_MinimumSizeHint(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraViewfinder::minimumSizeHint")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::minimumSizeHint"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQCameraViewfinderFromPointer(ptr).MinimumSizeHintDefault())
}

func (ptr *QCameraViewfinder) ConnectMinimumSizeHint(f func() *core.QSize) {
	defer qt.Recovering("connect QCameraViewfinder::minimumSizeHint")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::minimumSizeHint", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectMinimumSizeHint() {
	defer qt.Recovering("disconnect QCameraViewfinder::minimumSizeHint")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::minimumSizeHint")
	}
}

func (ptr *QCameraViewfinder) MinimumSizeHint() *core.QSize {
	defer qt.Recovering("QCameraViewfinder::minimumSizeHint")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QCameraViewfinder_MinimumSizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QCameraViewfinder) MinimumSizeHintDefault() *core.QSize {
	defer qt.Recovering("QCameraViewfinder::minimumSizeHint")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QCameraViewfinder_MinimumSizeHintDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQCameraViewfinder_SetEnabled
func callbackQCameraViewfinder_SetEnabled(ptr unsafe.Pointer, vbo C.char) {
	defer qt.Recovering("callback QCameraViewfinder::setEnabled")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setEnabled"); signal != nil {
		signal.(func(bool))(int8(vbo) != 0)
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetEnabledDefault(int8(vbo) != 0)
	}
}

func (ptr *QCameraViewfinder) ConnectSetEnabled(f func(vbo bool)) {
	defer qt.Recovering("connect QCameraViewfinder::setEnabled")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setEnabled", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetEnabled() {
	defer qt.Recovering("disconnect QCameraViewfinder::setEnabled")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setEnabled")
	}
}

func (ptr *QCameraViewfinder) SetEnabled(vbo bool) {
	defer qt.Recovering("QCameraViewfinder::setEnabled")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QCameraViewfinder) SetEnabledDefault(vbo bool) {
	defer qt.Recovering("QCameraViewfinder::setEnabled")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetEnabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

//export callbackQCameraViewfinder_SetStyleSheet
func callbackQCameraViewfinder_SetStyleSheet(ptr unsafe.Pointer, styleSheet *C.char) {
	defer qt.Recovering("callback QCameraViewfinder::setStyleSheet")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setStyleSheet"); signal != nil {
		signal.(func(string))(C.GoString(styleSheet))
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetStyleSheetDefault(C.GoString(styleSheet))
	}
}

func (ptr *QCameraViewfinder) ConnectSetStyleSheet(f func(styleSheet string)) {
	defer qt.Recovering("connect QCameraViewfinder::setStyleSheet")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setStyleSheet", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetStyleSheet() {
	defer qt.Recovering("disconnect QCameraViewfinder::setStyleSheet")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setStyleSheet")
	}
}

func (ptr *QCameraViewfinder) SetStyleSheet(styleSheet string) {
	defer qt.Recovering("QCameraViewfinder::setStyleSheet")

	if ptr.Pointer() != nil {
		var styleSheetC = C.CString(styleSheet)
		defer C.free(unsafe.Pointer(styleSheetC))
		C.QCameraViewfinder_SetStyleSheet(ptr.Pointer(), styleSheetC)
	}
}

func (ptr *QCameraViewfinder) SetStyleSheetDefault(styleSheet string) {
	defer qt.Recovering("QCameraViewfinder::setStyleSheet")

	if ptr.Pointer() != nil {
		var styleSheetC = C.CString(styleSheet)
		defer C.free(unsafe.Pointer(styleSheetC))
		C.QCameraViewfinder_SetStyleSheetDefault(ptr.Pointer(), styleSheetC)
	}
}

//export callbackQCameraViewfinder_SetVisible
func callbackQCameraViewfinder_SetVisible(ptr unsafe.Pointer, visible C.char) {
	defer qt.Recovering("callback QCameraViewfinder::setVisible")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setVisible"); signal != nil {
		signal.(func(bool))(int8(visible) != 0)
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetVisibleDefault(int8(visible) != 0)
	}
}

func (ptr *QCameraViewfinder) ConnectSetVisible(f func(visible bool)) {
	defer qt.Recovering("connect QCameraViewfinder::setVisible")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setVisible", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetVisible() {
	defer qt.Recovering("disconnect QCameraViewfinder::setVisible")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setVisible")
	}
}

func (ptr *QCameraViewfinder) SetVisible(visible bool) {
	defer qt.Recovering("QCameraViewfinder::setVisible")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QCameraViewfinder) SetVisibleDefault(visible bool) {
	defer qt.Recovering("QCameraViewfinder::setVisible")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetVisibleDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

//export callbackQCameraViewfinder_SetWindowModified
func callbackQCameraViewfinder_SetWindowModified(ptr unsafe.Pointer, vbo C.char) {
	defer qt.Recovering("callback QCameraViewfinder::setWindowModified")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setWindowModified"); signal != nil {
		signal.(func(bool))(int8(vbo) != 0)
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetWindowModifiedDefault(int8(vbo) != 0)
	}
}

func (ptr *QCameraViewfinder) ConnectSetWindowModified(f func(vbo bool)) {
	defer qt.Recovering("connect QCameraViewfinder::setWindowModified")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setWindowModified", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetWindowModified() {
	defer qt.Recovering("disconnect QCameraViewfinder::setWindowModified")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setWindowModified")
	}
}

func (ptr *QCameraViewfinder) SetWindowModified(vbo bool) {
	defer qt.Recovering("QCameraViewfinder::setWindowModified")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetWindowModified(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QCameraViewfinder) SetWindowModifiedDefault(vbo bool) {
	defer qt.Recovering("QCameraViewfinder::setWindowModified")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetWindowModifiedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

//export callbackQCameraViewfinder_SetWindowTitle
func callbackQCameraViewfinder_SetWindowTitle(ptr unsafe.Pointer, vqs *C.char) {
	defer qt.Recovering("callback QCameraViewfinder::setWindowTitle")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setWindowTitle"); signal != nil {
		signal.(func(string))(C.GoString(vqs))
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetWindowTitleDefault(C.GoString(vqs))
	}
}

func (ptr *QCameraViewfinder) ConnectSetWindowTitle(f func(vqs string)) {
	defer qt.Recovering("connect QCameraViewfinder::setWindowTitle")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setWindowTitle", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetWindowTitle() {
	defer qt.Recovering("disconnect QCameraViewfinder::setWindowTitle")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setWindowTitle")
	}
}

func (ptr *QCameraViewfinder) SetWindowTitle(vqs string) {
	defer qt.Recovering("QCameraViewfinder::setWindowTitle")

	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QCameraViewfinder_SetWindowTitle(ptr.Pointer(), vqsC)
	}
}

func (ptr *QCameraViewfinder) SetWindowTitleDefault(vqs string) {
	defer qt.Recovering("QCameraViewfinder::setWindowTitle")

	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QCameraViewfinder_SetWindowTitleDefault(ptr.Pointer(), vqsC)
	}
}

//export callbackQCameraViewfinder_ChangeEvent
func callbackQCameraViewfinder_ChangeEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::changeEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::changeEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).ChangeEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectChangeEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::changeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::changeEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectChangeEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::changeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::changeEvent")
	}
}

func (ptr *QCameraViewfinder) ChangeEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::changeEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ChangeEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraViewfinder) ChangeEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::changeEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ChangeEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraViewfinder_Close
func callbackQCameraViewfinder_Close(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraViewfinder::close")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::close"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderFromPointer(ptr).CloseDefault())))
}

func (ptr *QCameraViewfinder) ConnectClose(f func() bool) {
	defer qt.Recovering("connect QCameraViewfinder::close")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::close", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectClose() {
	defer qt.Recovering("disconnect QCameraViewfinder::close")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::close")
	}
}

func (ptr *QCameraViewfinder) Close() bool {
	defer qt.Recovering("QCameraViewfinder::close")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_Close(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraViewfinder) CloseDefault() bool {
	defer qt.Recovering("QCameraViewfinder::close")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_CloseDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQCameraViewfinder_CloseEvent
func callbackQCameraViewfinder_CloseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::closeEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::closeEvent"); signal != nil {
		signal.(func(*gui.QCloseEvent))(gui.NewQCloseEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).CloseEventDefault(gui.NewQCloseEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectCloseEvent(f func(event *gui.QCloseEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::closeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::closeEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectCloseEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::closeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::closeEvent")
	}
}

func (ptr *QCameraViewfinder) CloseEvent(event gui.QCloseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::closeEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_CloseEvent(ptr.Pointer(), gui.PointerFromQCloseEvent(event))
	}
}

func (ptr *QCameraViewfinder) CloseEventDefault(event gui.QCloseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::closeEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_CloseEventDefault(ptr.Pointer(), gui.PointerFromQCloseEvent(event))
	}
}

//export callbackQCameraViewfinder_ContextMenuEvent
func callbackQCameraViewfinder_ContextMenuEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::contextMenuEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::contextMenuEvent"); signal != nil {
		signal.(func(*gui.QContextMenuEvent))(gui.NewQContextMenuEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).ContextMenuEventDefault(gui.NewQContextMenuEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectContextMenuEvent(f func(event *gui.QContextMenuEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::contextMenuEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::contextMenuEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectContextMenuEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::contextMenuEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::contextMenuEvent")
	}
}

func (ptr *QCameraViewfinder) ContextMenuEvent(event gui.QContextMenuEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::contextMenuEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ContextMenuEvent(ptr.Pointer(), gui.PointerFromQContextMenuEvent(event))
	}
}

func (ptr *QCameraViewfinder) ContextMenuEventDefault(event gui.QContextMenuEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::contextMenuEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ContextMenuEventDefault(ptr.Pointer(), gui.PointerFromQContextMenuEvent(event))
	}
}

//export callbackQCameraViewfinder_FocusNextPrevChild
func callbackQCameraViewfinder_FocusNextPrevChild(ptr unsafe.Pointer, next C.char) C.char {
	defer qt.Recovering("callback QCameraViewfinder::focusNextPrevChild")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::focusNextPrevChild"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(bool) bool)(int8(next) != 0))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderFromPointer(ptr).FocusNextPrevChildDefault(int8(next) != 0))))
}

func (ptr *QCameraViewfinder) ConnectFocusNextPrevChild(f func(next bool) bool) {
	defer qt.Recovering("connect QCameraViewfinder::focusNextPrevChild")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::focusNextPrevChild", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectFocusNextPrevChild() {
	defer qt.Recovering("disconnect QCameraViewfinder::focusNextPrevChild")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::focusNextPrevChild")
	}
}

func (ptr *QCameraViewfinder) FocusNextPrevChild(next bool) bool {
	defer qt.Recovering("QCameraViewfinder::focusNextPrevChild")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_FocusNextPrevChild(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next)))) != 0
	}
	return false
}

func (ptr *QCameraViewfinder) FocusNextPrevChildDefault(next bool) bool {
	defer qt.Recovering("QCameraViewfinder::focusNextPrevChild")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_FocusNextPrevChildDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next)))) != 0
	}
	return false
}

//export callbackQCameraViewfinder_HasHeightForWidth
func callbackQCameraViewfinder_HasHeightForWidth(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraViewfinder::hasHeightForWidth")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::hasHeightForWidth"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderFromPointer(ptr).HasHeightForWidthDefault())))
}

func (ptr *QCameraViewfinder) ConnectHasHeightForWidth(f func() bool) {
	defer qt.Recovering("connect QCameraViewfinder::hasHeightForWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::hasHeightForWidth", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectHasHeightForWidth() {
	defer qt.Recovering("disconnect QCameraViewfinder::hasHeightForWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::hasHeightForWidth")
	}
}

func (ptr *QCameraViewfinder) HasHeightForWidth() bool {
	defer qt.Recovering("QCameraViewfinder::hasHeightForWidth")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_HasHeightForWidth(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraViewfinder) HasHeightForWidthDefault() bool {
	defer qt.Recovering("QCameraViewfinder::hasHeightForWidth")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_HasHeightForWidthDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQCameraViewfinder_HeightForWidth
func callbackQCameraViewfinder_HeightForWidth(ptr unsafe.Pointer, w C.int) C.int {
	defer qt.Recovering("callback QCameraViewfinder::heightForWidth")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::heightForWidth"); signal != nil {
		return C.int(int32(signal.(func(int) int)(int(int32(w)))))
	}

	return C.int(int32(NewQCameraViewfinderFromPointer(ptr).HeightForWidthDefault(int(int32(w)))))
}

func (ptr *QCameraViewfinder) ConnectHeightForWidth(f func(w int) int) {
	defer qt.Recovering("connect QCameraViewfinder::heightForWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::heightForWidth", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectHeightForWidth() {
	defer qt.Recovering("disconnect QCameraViewfinder::heightForWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::heightForWidth")
	}
}

func (ptr *QCameraViewfinder) HeightForWidth(w int) int {
	defer qt.Recovering("QCameraViewfinder::heightForWidth")

	if ptr.Pointer() != nil {
		return int(int32(C.QCameraViewfinder_HeightForWidth(ptr.Pointer(), C.int(int32(w)))))
	}
	return 0
}

func (ptr *QCameraViewfinder) HeightForWidthDefault(w int) int {
	defer qt.Recovering("QCameraViewfinder::heightForWidth")

	if ptr.Pointer() != nil {
		return int(int32(C.QCameraViewfinder_HeightForWidthDefault(ptr.Pointer(), C.int(int32(w)))))
	}
	return 0
}

//export callbackQCameraViewfinder_Hide
func callbackQCameraViewfinder_Hide(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::hide")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::hide"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).HideDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectHide(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::hide")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::hide", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectHide() {
	defer qt.Recovering("disconnect QCameraViewfinder::hide")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::hide")
	}
}

func (ptr *QCameraViewfinder) Hide() {
	defer qt.Recovering("QCameraViewfinder::hide")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_Hide(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) HideDefault() {
	defer qt.Recovering("QCameraViewfinder::hide")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_HideDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_InputMethodEvent
func callbackQCameraViewfinder_InputMethodEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::inputMethodEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::inputMethodEvent"); signal != nil {
		signal.(func(*gui.QInputMethodEvent))(gui.NewQInputMethodEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).InputMethodEventDefault(gui.NewQInputMethodEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectInputMethodEvent(f func(event *gui.QInputMethodEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::inputMethodEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::inputMethodEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectInputMethodEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::inputMethodEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::inputMethodEvent")
	}
}

func (ptr *QCameraViewfinder) InputMethodEvent(event gui.QInputMethodEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::inputMethodEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_InputMethodEvent(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

func (ptr *QCameraViewfinder) InputMethodEventDefault(event gui.QInputMethodEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::inputMethodEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_InputMethodEventDefault(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

//export callbackQCameraViewfinder_InputMethodQuery
func callbackQCameraViewfinder_InputMethodQuery(ptr unsafe.Pointer, query C.longlong) unsafe.Pointer {
	defer qt.Recovering("callback QCameraViewfinder::inputMethodQuery")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::inputMethodQuery"); signal != nil {
		return core.PointerFromQVariant(signal.(func(core.Qt__InputMethodQuery) *core.QVariant)(core.Qt__InputMethodQuery(query)))
	}

	return core.PointerFromQVariant(NewQCameraViewfinderFromPointer(ptr).InputMethodQueryDefault(core.Qt__InputMethodQuery(query)))
}

func (ptr *QCameraViewfinder) ConnectInputMethodQuery(f func(query core.Qt__InputMethodQuery) *core.QVariant) {
	defer qt.Recovering("connect QCameraViewfinder::inputMethodQuery")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::inputMethodQuery", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectInputMethodQuery() {
	defer qt.Recovering("disconnect QCameraViewfinder::inputMethodQuery")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::inputMethodQuery")
	}
}

func (ptr *QCameraViewfinder) InputMethodQuery(query core.Qt__InputMethodQuery) *core.QVariant {
	defer qt.Recovering("QCameraViewfinder::inputMethodQuery")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QCameraViewfinder_InputMethodQuery(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QCameraViewfinder) InputMethodQueryDefault(query core.Qt__InputMethodQuery) *core.QVariant {
	defer qt.Recovering("QCameraViewfinder::inputMethodQuery")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QCameraViewfinder_InputMethodQueryDefault(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQCameraViewfinder_KeyPressEvent
func callbackQCameraViewfinder_KeyPressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::keyPressEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::keyPressEvent"); signal != nil {
		signal.(func(*gui.QKeyEvent))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).KeyPressEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectKeyPressEvent(f func(event *gui.QKeyEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::keyPressEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectKeyPressEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::keyPressEvent")
	}
}

func (ptr *QCameraViewfinder) KeyPressEvent(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_KeyPressEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QCameraViewfinder) KeyPressEventDefault(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_KeyPressEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQCameraViewfinder_KeyReleaseEvent
func callbackQCameraViewfinder_KeyReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::keyReleaseEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::keyReleaseEvent"); signal != nil {
		signal.(func(*gui.QKeyEvent))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).KeyReleaseEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectKeyReleaseEvent(f func(event *gui.QKeyEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::keyReleaseEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectKeyReleaseEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::keyReleaseEvent")
	}
}

func (ptr *QCameraViewfinder) KeyReleaseEvent(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_KeyReleaseEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QCameraViewfinder) KeyReleaseEventDefault(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_KeyReleaseEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQCameraViewfinder_Lower
func callbackQCameraViewfinder_Lower(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::lower")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::lower"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).LowerDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectLower(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::lower")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::lower", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectLower() {
	defer qt.Recovering("disconnect QCameraViewfinder::lower")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::lower")
	}
}

func (ptr *QCameraViewfinder) Lower() {
	defer qt.Recovering("QCameraViewfinder::lower")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_Lower(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) LowerDefault() {
	defer qt.Recovering("QCameraViewfinder::lower")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_LowerDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_MouseDoubleClickEvent
func callbackQCameraViewfinder_MouseDoubleClickEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::mouseDoubleClickEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::mouseDoubleClickEvent"); signal != nil {
		signal.(func(*gui.QMouseEvent))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).MouseDoubleClickEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectMouseDoubleClickEvent(f func(event *gui.QMouseEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mouseDoubleClickEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectMouseDoubleClickEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mouseDoubleClickEvent")
	}
}

func (ptr *QCameraViewfinder) MouseDoubleClickEvent(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_MouseDoubleClickEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QCameraViewfinder) MouseDoubleClickEventDefault(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_MouseDoubleClickEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQCameraViewfinder_MouseMoveEvent
func callbackQCameraViewfinder_MouseMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::mouseMoveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::mouseMoveEvent"); signal != nil {
		signal.(func(*gui.QMouseEvent))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).MouseMoveEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectMouseMoveEvent(f func(event *gui.QMouseEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mouseMoveEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectMouseMoveEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mouseMoveEvent")
	}
}

func (ptr *QCameraViewfinder) MouseMoveEvent(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_MouseMoveEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QCameraViewfinder) MouseMoveEventDefault(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_MouseMoveEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQCameraViewfinder_MousePressEvent
func callbackQCameraViewfinder_MousePressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::mousePressEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::mousePressEvent"); signal != nil {
		signal.(func(*gui.QMouseEvent))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).MousePressEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectMousePressEvent(f func(event *gui.QMouseEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mousePressEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectMousePressEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mousePressEvent")
	}
}

func (ptr *QCameraViewfinder) MousePressEvent(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_MousePressEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QCameraViewfinder) MousePressEventDefault(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_MousePressEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQCameraViewfinder_MouseReleaseEvent
func callbackQCameraViewfinder_MouseReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::mouseReleaseEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::mouseReleaseEvent"); signal != nil {
		signal.(func(*gui.QMouseEvent))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).MouseReleaseEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectMouseReleaseEvent(f func(event *gui.QMouseEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mouseReleaseEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectMouseReleaseEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::mouseReleaseEvent")
	}
}

func (ptr *QCameraViewfinder) MouseReleaseEvent(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_MouseReleaseEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QCameraViewfinder) MouseReleaseEventDefault(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_MouseReleaseEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQCameraViewfinder_NativeEvent
func callbackQCameraViewfinder_NativeEvent(ptr unsafe.Pointer, eventType *C.char, message unsafe.Pointer, result C.long) C.char {
	defer qt.Recovering("callback QCameraViewfinder::nativeEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::nativeEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(string, unsafe.Pointer, int) bool)(qt.HexDecodeToString(C.GoString(eventType)), message, int(int32(result))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderFromPointer(ptr).NativeEventDefault(qt.HexDecodeToString(C.GoString(eventType)), message, int(int32(result))))))
}

func (ptr *QCameraViewfinder) ConnectNativeEvent(f func(eventType string, message unsafe.Pointer, result int) bool) {
	defer qt.Recovering("connect QCameraViewfinder::nativeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::nativeEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectNativeEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::nativeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::nativeEvent")
	}
}

func (ptr *QCameraViewfinder) NativeEvent(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QCameraViewfinder::nativeEvent")

	if ptr.Pointer() != nil {
		var eventTypeC = C.CString(hex.EncodeToString([]byte(eventType)))
		defer C.free(unsafe.Pointer(eventTypeC))
		return C.QCameraViewfinder_NativeEvent(ptr.Pointer(), eventTypeC, message, C.long(int32(result))) != 0
	}
	return false
}

func (ptr *QCameraViewfinder) NativeEventDefault(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QCameraViewfinder::nativeEvent")

	if ptr.Pointer() != nil {
		var eventTypeC = C.CString(hex.EncodeToString([]byte(eventType)))
		defer C.free(unsafe.Pointer(eventTypeC))
		return C.QCameraViewfinder_NativeEventDefault(ptr.Pointer(), eventTypeC, message, C.long(int32(result))) != 0
	}
	return false
}

//export callbackQCameraViewfinder_Raise
func callbackQCameraViewfinder_Raise(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::raise")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::raise"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).RaiseDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectRaise(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::raise")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::raise", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectRaise() {
	defer qt.Recovering("disconnect QCameraViewfinder::raise")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::raise")
	}
}

func (ptr *QCameraViewfinder) Raise() {
	defer qt.Recovering("QCameraViewfinder::raise")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_Raise(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) RaiseDefault() {
	defer qt.Recovering("QCameraViewfinder::raise")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_RaiseDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_Repaint
func callbackQCameraViewfinder_Repaint(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::repaint")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::repaint"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).RepaintDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectRepaint(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::repaint")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::repaint", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectRepaint() {
	defer qt.Recovering("disconnect QCameraViewfinder::repaint")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::repaint")
	}
}

func (ptr *QCameraViewfinder) Repaint() {
	defer qt.Recovering("QCameraViewfinder::repaint")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_Repaint(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) RepaintDefault() {
	defer qt.Recovering("QCameraViewfinder::repaint")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_RepaintDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_SetDisabled
func callbackQCameraViewfinder_SetDisabled(ptr unsafe.Pointer, disable C.char) {
	defer qt.Recovering("callback QCameraViewfinder::setDisabled")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setDisabled"); signal != nil {
		signal.(func(bool))(int8(disable) != 0)
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetDisabledDefault(int8(disable) != 0)
	}
}

func (ptr *QCameraViewfinder) ConnectSetDisabled(f func(disable bool)) {
	defer qt.Recovering("connect QCameraViewfinder::setDisabled")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setDisabled", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetDisabled() {
	defer qt.Recovering("disconnect QCameraViewfinder::setDisabled")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setDisabled")
	}
}

func (ptr *QCameraViewfinder) SetDisabled(disable bool) {
	defer qt.Recovering("QCameraViewfinder::setDisabled")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetDisabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(disable))))
	}
}

func (ptr *QCameraViewfinder) SetDisabledDefault(disable bool) {
	defer qt.Recovering("QCameraViewfinder::setDisabled")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetDisabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(disable))))
	}
}

//export callbackQCameraViewfinder_SetFocus2
func callbackQCameraViewfinder_SetFocus2(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::setFocus")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setFocus2"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetFocus2Default()
	}
}

func (ptr *QCameraViewfinder) ConnectSetFocus2(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::setFocus")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setFocus2", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetFocus2() {
	defer qt.Recovering("disconnect QCameraViewfinder::setFocus")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setFocus2")
	}
}

func (ptr *QCameraViewfinder) SetFocus2() {
	defer qt.Recovering("QCameraViewfinder::setFocus")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetFocus2(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) SetFocus2Default() {
	defer qt.Recovering("QCameraViewfinder::setFocus")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetFocus2Default(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_SetHidden
func callbackQCameraViewfinder_SetHidden(ptr unsafe.Pointer, hidden C.char) {
	defer qt.Recovering("callback QCameraViewfinder::setHidden")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::setHidden"); signal != nil {
		signal.(func(bool))(int8(hidden) != 0)
	} else {
		NewQCameraViewfinderFromPointer(ptr).SetHiddenDefault(int8(hidden) != 0)
	}
}

func (ptr *QCameraViewfinder) ConnectSetHidden(f func(hidden bool)) {
	defer qt.Recovering("connect QCameraViewfinder::setHidden")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setHidden", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectSetHidden() {
	defer qt.Recovering("disconnect QCameraViewfinder::setHidden")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::setHidden")
	}
}

func (ptr *QCameraViewfinder) SetHidden(hidden bool) {
	defer qt.Recovering("QCameraViewfinder::setHidden")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetHidden(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(hidden))))
	}
}

func (ptr *QCameraViewfinder) SetHiddenDefault(hidden bool) {
	defer qt.Recovering("QCameraViewfinder::setHidden")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_SetHiddenDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(hidden))))
	}
}

//export callbackQCameraViewfinder_Show
func callbackQCameraViewfinder_Show(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::show")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::show"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).ShowDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectShow(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::show")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::show", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectShow() {
	defer qt.Recovering("disconnect QCameraViewfinder::show")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::show")
	}
}

func (ptr *QCameraViewfinder) Show() {
	defer qt.Recovering("QCameraViewfinder::show")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_Show(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) ShowDefault() {
	defer qt.Recovering("QCameraViewfinder::show")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ShowDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_ShowFullScreen
func callbackQCameraViewfinder_ShowFullScreen(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::showFullScreen")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::showFullScreen"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).ShowFullScreenDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectShowFullScreen(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::showFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::showFullScreen", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectShowFullScreen() {
	defer qt.Recovering("disconnect QCameraViewfinder::showFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::showFullScreen")
	}
}

func (ptr *QCameraViewfinder) ShowFullScreen() {
	defer qt.Recovering("QCameraViewfinder::showFullScreen")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ShowFullScreen(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) ShowFullScreenDefault() {
	defer qt.Recovering("QCameraViewfinder::showFullScreen")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ShowFullScreenDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_ShowMaximized
func callbackQCameraViewfinder_ShowMaximized(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::showMaximized")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::showMaximized"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).ShowMaximizedDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectShowMaximized(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::showMaximized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::showMaximized", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectShowMaximized() {
	defer qt.Recovering("disconnect QCameraViewfinder::showMaximized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::showMaximized")
	}
}

func (ptr *QCameraViewfinder) ShowMaximized() {
	defer qt.Recovering("QCameraViewfinder::showMaximized")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ShowMaximized(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) ShowMaximizedDefault() {
	defer qt.Recovering("QCameraViewfinder::showMaximized")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ShowMaximizedDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_ShowMinimized
func callbackQCameraViewfinder_ShowMinimized(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::showMinimized")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::showMinimized"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).ShowMinimizedDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectShowMinimized(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::showMinimized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::showMinimized", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectShowMinimized() {
	defer qt.Recovering("disconnect QCameraViewfinder::showMinimized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::showMinimized")
	}
}

func (ptr *QCameraViewfinder) ShowMinimized() {
	defer qt.Recovering("QCameraViewfinder::showMinimized")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ShowMinimized(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) ShowMinimizedDefault() {
	defer qt.Recovering("QCameraViewfinder::showMinimized")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ShowMinimizedDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_ShowNormal
func callbackQCameraViewfinder_ShowNormal(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::showNormal")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::showNormal"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).ShowNormalDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectShowNormal(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::showNormal")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::showNormal", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectShowNormal() {
	defer qt.Recovering("disconnect QCameraViewfinder::showNormal")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::showNormal")
	}
}

func (ptr *QCameraViewfinder) ShowNormal() {
	defer qt.Recovering("QCameraViewfinder::showNormal")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ShowNormal(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) ShowNormalDefault() {
	defer qt.Recovering("QCameraViewfinder::showNormal")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ShowNormalDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_TabletEvent
func callbackQCameraViewfinder_TabletEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::tabletEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::tabletEvent"); signal != nil {
		signal.(func(*gui.QTabletEvent))(gui.NewQTabletEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).TabletEventDefault(gui.NewQTabletEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectTabletEvent(f func(event *gui.QTabletEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::tabletEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::tabletEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectTabletEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::tabletEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::tabletEvent")
	}
}

func (ptr *QCameraViewfinder) TabletEvent(event gui.QTabletEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::tabletEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_TabletEvent(ptr.Pointer(), gui.PointerFromQTabletEvent(event))
	}
}

func (ptr *QCameraViewfinder) TabletEventDefault(event gui.QTabletEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::tabletEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_TabletEventDefault(ptr.Pointer(), gui.PointerFromQTabletEvent(event))
	}
}

//export callbackQCameraViewfinder_Update
func callbackQCameraViewfinder_Update(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::update")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::update"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).UpdateDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectUpdate(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::update")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::update", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectUpdate() {
	defer qt.Recovering("disconnect QCameraViewfinder::update")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::update")
	}
}

func (ptr *QCameraViewfinder) Update() {
	defer qt.Recovering("QCameraViewfinder::update")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_Update(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) UpdateDefault() {
	defer qt.Recovering("QCameraViewfinder::update")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_UpdateDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_UpdateMicroFocus
func callbackQCameraViewfinder_UpdateMicroFocus(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::updateMicroFocus")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::updateMicroFocus"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).UpdateMicroFocusDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectUpdateMicroFocus(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::updateMicroFocus")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::updateMicroFocus", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectUpdateMicroFocus() {
	defer qt.Recovering("disconnect QCameraViewfinder::updateMicroFocus")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::updateMicroFocus")
	}
}

func (ptr *QCameraViewfinder) UpdateMicroFocus() {
	defer qt.Recovering("QCameraViewfinder::updateMicroFocus")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_UpdateMicroFocus(ptr.Pointer())
	}
}

func (ptr *QCameraViewfinder) UpdateMicroFocusDefault() {
	defer qt.Recovering("QCameraViewfinder::updateMicroFocus")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_UpdateMicroFocusDefault(ptr.Pointer())
	}
}

//export callbackQCameraViewfinder_WheelEvent
func callbackQCameraViewfinder_WheelEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::wheelEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::wheelEvent"); signal != nil {
		signal.(func(*gui.QWheelEvent))(gui.NewQWheelEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).WheelEventDefault(gui.NewQWheelEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectWheelEvent(f func(event *gui.QWheelEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::wheelEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::wheelEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectWheelEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::wheelEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::wheelEvent")
	}
}

func (ptr *QCameraViewfinder) WheelEvent(event gui.QWheelEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::wheelEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_WheelEvent(ptr.Pointer(), gui.PointerFromQWheelEvent(event))
	}
}

func (ptr *QCameraViewfinder) WheelEventDefault(event gui.QWheelEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::wheelEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_WheelEventDefault(ptr.Pointer(), gui.PointerFromQWheelEvent(event))
	}
}

//export callbackQCameraViewfinder_TimerEvent
func callbackQCameraViewfinder_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::timerEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::timerEvent")
	}
}

func (ptr *QCameraViewfinder) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraViewfinder) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraViewfinder_ChildEvent
func callbackQCameraViewfinder_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::childEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::childEvent")
	}
}

func (ptr *QCameraViewfinder) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraViewfinder) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraViewfinder_ConnectNotify
func callbackQCameraViewfinder_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraViewfinderFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraViewfinder) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraViewfinder::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::connectNotify", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraViewfinder::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::connectNotify")
	}
}

func (ptr *QCameraViewfinder) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinder::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraViewfinder) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinder::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraViewfinder_CustomEvent
func callbackQCameraViewfinder_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraViewfinderFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinder) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraViewfinder::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::customEvent", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraViewfinder::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::customEvent")
	}
}

func (ptr *QCameraViewfinder) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraViewfinder) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinder::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraViewfinder_DeleteLater
func callbackQCameraViewfinder_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraViewfinder) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraViewfinder::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::deleteLater", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraViewfinder::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::deleteLater")
	}
}

func (ptr *QCameraViewfinder) DeleteLater() {
	defer qt.Recovering("QCameraViewfinder::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraViewfinder) DeleteLaterDefault() {
	defer qt.Recovering("QCameraViewfinder::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraViewfinder_DisconnectNotify
func callbackQCameraViewfinder_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinder::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraViewfinderFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraViewfinder) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraViewfinder::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::disconnectNotify", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraViewfinder::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::disconnectNotify")
	}
}

func (ptr *QCameraViewfinder) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinder::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraViewfinder) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinder::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinder_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraViewfinder_EventFilter
func callbackQCameraViewfinder_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraViewfinder::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraViewfinder) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraViewfinder::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::eventFilter", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraViewfinder::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::eventFilter")
	}
}

func (ptr *QCameraViewfinder) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinder::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraViewfinder) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinder::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinder_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraViewfinder_MetaObject
func callbackQCameraViewfinder_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraViewfinder::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinder::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraViewfinderFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraViewfinder) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraViewfinder::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::metaObject", f)
	}
}

func (ptr *QCameraViewfinder) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraViewfinder::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinder::metaObject")
	}
}

func (ptr *QCameraViewfinder) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraViewfinder::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraViewfinder_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraViewfinder) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraViewfinder::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraViewfinder_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraViewfinderSettings struct {
	ptr unsafe.Pointer
}

type QCameraViewfinderSettings_ITF interface {
	QCameraViewfinderSettings_PTR() *QCameraViewfinderSettings
}

func (p *QCameraViewfinderSettings) QCameraViewfinderSettings_PTR() *QCameraViewfinderSettings {
	return p
}

func (p *QCameraViewfinderSettings) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCameraViewfinderSettings) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCameraViewfinderSettings(ptr QCameraViewfinderSettings_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraViewfinderSettings_PTR().Pointer()
	}
	return nil
}

func NewQCameraViewfinderSettingsFromPointer(ptr unsafe.Pointer) *QCameraViewfinderSettings {
	var n = new(QCameraViewfinderSettings)
	n.SetPointer(ptr)
	return n
}
func NewQCameraViewfinderSettings() *QCameraViewfinderSettings {
	defer qt.Recovering("QCameraViewfinderSettings::QCameraViewfinderSettings")

	var tmpValue = NewQCameraViewfinderSettingsFromPointer(C.QCameraViewfinderSettings_NewQCameraViewfinderSettings())
	runtime.SetFinalizer(tmpValue, (*QCameraViewfinderSettings).DestroyQCameraViewfinderSettings)
	return tmpValue
}

func NewQCameraViewfinderSettings2(other QCameraViewfinderSettings_ITF) *QCameraViewfinderSettings {
	defer qt.Recovering("QCameraViewfinderSettings::QCameraViewfinderSettings")

	var tmpValue = NewQCameraViewfinderSettingsFromPointer(C.QCameraViewfinderSettings_NewQCameraViewfinderSettings2(PointerFromQCameraViewfinderSettings(other)))
	runtime.SetFinalizer(tmpValue, (*QCameraViewfinderSettings).DestroyQCameraViewfinderSettings)
	return tmpValue
}

func (ptr *QCameraViewfinderSettings) IsNull() bool {
	defer qt.Recovering("QCameraViewfinderSettings::isNull")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettings_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCameraViewfinderSettings) MaximumFrameRate() float64 {
	defer qt.Recovering("QCameraViewfinderSettings::maximumFrameRate")

	if ptr.Pointer() != nil {
		return float64(C.QCameraViewfinderSettings_MaximumFrameRate(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraViewfinderSettings) MinimumFrameRate() float64 {
	defer qt.Recovering("QCameraViewfinderSettings::minimumFrameRate")

	if ptr.Pointer() != nil {
		return float64(C.QCameraViewfinderSettings_MinimumFrameRate(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraViewfinderSettings) PixelAspectRatio() *core.QSize {
	defer qt.Recovering("QCameraViewfinderSettings::pixelAspectRatio")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QCameraViewfinderSettings_PixelAspectRatio(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QCameraViewfinderSettings) PixelFormat() QVideoFrame__PixelFormat {
	defer qt.Recovering("QCameraViewfinderSettings::pixelFormat")

	if ptr.Pointer() != nil {
		return QVideoFrame__PixelFormat(C.QCameraViewfinderSettings_PixelFormat(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCameraViewfinderSettings) Resolution() *core.QSize {
	defer qt.Recovering("QCameraViewfinderSettings::resolution")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QCameraViewfinderSettings_Resolution(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QCameraViewfinderSettings) SetMaximumFrameRate(rate float64) {
	defer qt.Recovering("QCameraViewfinderSettings::setMaximumFrameRate")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettings_SetMaximumFrameRate(ptr.Pointer(), C.double(rate))
	}
}

func (ptr *QCameraViewfinderSettings) SetMinimumFrameRate(rate float64) {
	defer qt.Recovering("QCameraViewfinderSettings::setMinimumFrameRate")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettings_SetMinimumFrameRate(ptr.Pointer(), C.double(rate))
	}
}

func (ptr *QCameraViewfinderSettings) SetPixelAspectRatio(ratio core.QSize_ITF) {
	defer qt.Recovering("QCameraViewfinderSettings::setPixelAspectRatio")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettings_SetPixelAspectRatio(ptr.Pointer(), core.PointerFromQSize(ratio))
	}
}

func (ptr *QCameraViewfinderSettings) SetPixelAspectRatio2(horizontal int, vertical int) {
	defer qt.Recovering("QCameraViewfinderSettings::setPixelAspectRatio")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettings_SetPixelAspectRatio2(ptr.Pointer(), C.int(int32(horizontal)), C.int(int32(vertical)))
	}
}

func (ptr *QCameraViewfinderSettings) SetPixelFormat(format QVideoFrame__PixelFormat) {
	defer qt.Recovering("QCameraViewfinderSettings::setPixelFormat")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettings_SetPixelFormat(ptr.Pointer(), C.longlong(format))
	}
}

func (ptr *QCameraViewfinderSettings) SetResolution(resolution core.QSize_ITF) {
	defer qt.Recovering("QCameraViewfinderSettings::setResolution")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettings_SetResolution(ptr.Pointer(), core.PointerFromQSize(resolution))
	}
}

func (ptr *QCameraViewfinderSettings) SetResolution2(width int, height int) {
	defer qt.Recovering("QCameraViewfinderSettings::setResolution")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettings_SetResolution2(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QCameraViewfinderSettings) Swap(other QCameraViewfinderSettings_ITF) {
	defer qt.Recovering("QCameraViewfinderSettings::swap")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettings_Swap(ptr.Pointer(), PointerFromQCameraViewfinderSettings(other))
	}
}

func (ptr *QCameraViewfinderSettings) DestroyQCameraViewfinderSettings() {
	defer qt.Recovering("QCameraViewfinderSettings::~QCameraViewfinderSettings")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettings_DestroyQCameraViewfinderSettings(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QCameraViewfinderSettingsControl::ViewfinderParameter
type QCameraViewfinderSettingsControl__ViewfinderParameter int64

const (
	QCameraViewfinderSettingsControl__Resolution       = QCameraViewfinderSettingsControl__ViewfinderParameter(0)
	QCameraViewfinderSettingsControl__PixelAspectRatio = QCameraViewfinderSettingsControl__ViewfinderParameter(1)
	QCameraViewfinderSettingsControl__MinimumFrameRate = QCameraViewfinderSettingsControl__ViewfinderParameter(2)
	QCameraViewfinderSettingsControl__MaximumFrameRate = QCameraViewfinderSettingsControl__ViewfinderParameter(3)
	QCameraViewfinderSettingsControl__PixelFormat      = QCameraViewfinderSettingsControl__ViewfinderParameter(4)
	QCameraViewfinderSettingsControl__UserParameter    = QCameraViewfinderSettingsControl__ViewfinderParameter(1000)
)

type QCameraViewfinderSettingsControl struct {
	QMediaControl
}

type QCameraViewfinderSettingsControl_ITF interface {
	QMediaControl_ITF
	QCameraViewfinderSettingsControl_PTR() *QCameraViewfinderSettingsControl
}

func (p *QCameraViewfinderSettingsControl) QCameraViewfinderSettingsControl_PTR() *QCameraViewfinderSettingsControl {
	return p
}

func (p *QCameraViewfinderSettingsControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraViewfinderSettingsControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraViewfinderSettingsControl(ptr QCameraViewfinderSettingsControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraViewfinderSettingsControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraViewfinderSettingsControlFromPointer(ptr unsafe.Pointer) *QCameraViewfinderSettingsControl {
	var n = new(QCameraViewfinderSettingsControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraViewfinderSettingsControl(parent core.QObject_ITF) *QCameraViewfinderSettingsControl {
	defer qt.Recovering("QCameraViewfinderSettingsControl::QCameraViewfinderSettingsControl")

	var tmpValue = NewQCameraViewfinderSettingsControlFromPointer(C.QCameraViewfinderSettingsControl_NewQCameraViewfinderSettingsControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraViewfinderSettingsControl_IsViewfinderParameterSupported
func callbackQCameraViewfinderSettingsControl_IsViewfinderParameterSupported(ptr unsafe.Pointer, parameter C.longlong) C.char {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::isViewfinderParameterSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::isViewfinderParameterSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QCameraViewfinderSettingsControl__ViewfinderParameter) bool)(QCameraViewfinderSettingsControl__ViewfinderParameter(parameter)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QCameraViewfinderSettingsControl) ConnectIsViewfinderParameterSupported(f func(parameter QCameraViewfinderSettingsControl__ViewfinderParameter) bool) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::isViewfinderParameterSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::isViewfinderParameterSupported", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectIsViewfinderParameterSupported(parameter QCameraViewfinderSettingsControl__ViewfinderParameter) {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::isViewfinderParameterSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::isViewfinderParameterSupported")
	}
}

func (ptr *QCameraViewfinderSettingsControl) IsViewfinderParameterSupported(parameter QCameraViewfinderSettingsControl__ViewfinderParameter) bool {
	defer qt.Recovering("QCameraViewfinderSettingsControl::isViewfinderParameterSupported")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettingsControl_IsViewfinderParameterSupported(ptr.Pointer(), C.longlong(parameter)) != 0
	}
	return false
}

//export callbackQCameraViewfinderSettingsControl_SetViewfinderParameter
func callbackQCameraViewfinderSettingsControl_SetViewfinderParameter(ptr unsafe.Pointer, parameter C.longlong, value unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::setViewfinderParameter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::setViewfinderParameter"); signal != nil {
		signal.(func(QCameraViewfinderSettingsControl__ViewfinderParameter, *core.QVariant))(QCameraViewfinderSettingsControl__ViewfinderParameter(parameter), core.NewQVariantFromPointer(value))
	}

}

func (ptr *QCameraViewfinderSettingsControl) ConnectSetViewfinderParameter(f func(parameter QCameraViewfinderSettingsControl__ViewfinderParameter, value *core.QVariant)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::setViewfinderParameter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::setViewfinderParameter", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectSetViewfinderParameter(parameter QCameraViewfinderSettingsControl__ViewfinderParameter, value core.QVariant_ITF) {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::setViewfinderParameter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::setViewfinderParameter")
	}
}

func (ptr *QCameraViewfinderSettingsControl) SetViewfinderParameter(parameter QCameraViewfinderSettingsControl__ViewfinderParameter, value core.QVariant_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::setViewfinderParameter")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_SetViewfinderParameter(ptr.Pointer(), C.longlong(parameter), core.PointerFromQVariant(value))
	}
}

//export callbackQCameraViewfinderSettingsControl_ViewfinderParameter
func callbackQCameraViewfinderSettingsControl_ViewfinderParameter(ptr unsafe.Pointer, parameter C.longlong) unsafe.Pointer {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::viewfinderParameter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::viewfinderParameter"); signal != nil {
		return core.PointerFromQVariant(signal.(func(QCameraViewfinderSettingsControl__ViewfinderParameter) *core.QVariant)(QCameraViewfinderSettingsControl__ViewfinderParameter(parameter)))
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QCameraViewfinderSettingsControl) ConnectViewfinderParameter(f func(parameter QCameraViewfinderSettingsControl__ViewfinderParameter) *core.QVariant) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::viewfinderParameter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::viewfinderParameter", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectViewfinderParameter(parameter QCameraViewfinderSettingsControl__ViewfinderParameter) {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::viewfinderParameter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::viewfinderParameter")
	}
}

func (ptr *QCameraViewfinderSettingsControl) ViewfinderParameter(parameter QCameraViewfinderSettingsControl__ViewfinderParameter) *core.QVariant {
	defer qt.Recovering("QCameraViewfinderSettingsControl::viewfinderParameter")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QCameraViewfinderSettingsControl_ViewfinderParameter(ptr.Pointer(), C.longlong(parameter)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QCameraViewfinderSettingsControl) DestroyQCameraViewfinderSettingsControl() {
	defer qt.Recovering("QCameraViewfinderSettingsControl::~QCameraViewfinderSettingsControl")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_DestroyQCameraViewfinderSettingsControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraViewfinderSettingsControl_TimerEvent
func callbackQCameraViewfinderSettingsControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraViewfinderSettingsControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::timerEvent", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::timerEvent")
	}
}

func (ptr *QCameraViewfinderSettingsControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraViewfinderSettingsControl_ChildEvent
func callbackQCameraViewfinderSettingsControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraViewfinderSettingsControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::childEvent", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::childEvent")
	}
}

func (ptr *QCameraViewfinderSettingsControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraViewfinderSettingsControl_ConnectNotify
func callbackQCameraViewfinderSettingsControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraViewfinderSettingsControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraViewfinderSettingsControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::connectNotify", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::connectNotify")
	}
}

func (ptr *QCameraViewfinderSettingsControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraViewfinderSettingsControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraViewfinderSettingsControl_CustomEvent
func callbackQCameraViewfinderSettingsControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraViewfinderSettingsControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::customEvent", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::customEvent")
	}
}

func (ptr *QCameraViewfinderSettingsControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraViewfinderSettingsControl_DeleteLater
func callbackQCameraViewfinderSettingsControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderSettingsControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraViewfinderSettingsControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::deleteLater", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::deleteLater")
	}
}

func (ptr *QCameraViewfinderSettingsControl) DeleteLater() {
	defer qt.Recovering("QCameraViewfinderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraViewfinderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraViewfinderSettingsControl_DisconnectNotify
func callbackQCameraViewfinderSettingsControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraViewfinderSettingsControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraViewfinderSettingsControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::disconnectNotify", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::disconnectNotify")
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraViewfinderSettingsControl_Event
func callbackQCameraViewfinderSettingsControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderSettingsControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraViewfinderSettingsControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::event", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::event")
	}
}

func (ptr *QCameraViewfinderSettingsControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinderSettingsControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettingsControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraViewfinderSettingsControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinderSettingsControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettingsControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraViewfinderSettingsControl_EventFilter
func callbackQCameraViewfinderSettingsControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderSettingsControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraViewfinderSettingsControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::eventFilter", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::eventFilter")
	}
}

func (ptr *QCameraViewfinderSettingsControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettingsControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraViewfinderSettingsControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettingsControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraViewfinderSettingsControl_MetaObject
func callbackQCameraViewfinderSettingsControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraViewfinderSettingsControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraViewfinderSettingsControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::metaObject", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl::metaObject")
	}
}

func (ptr *QCameraViewfinderSettingsControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraViewfinderSettingsControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraViewfinderSettingsControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraViewfinderSettingsControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraViewfinderSettingsControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraViewfinderSettingsControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraViewfinderSettingsControl2 struct {
	QMediaControl
}

type QCameraViewfinderSettingsControl2_ITF interface {
	QMediaControl_ITF
	QCameraViewfinderSettingsControl2_PTR() *QCameraViewfinderSettingsControl2
}

func (p *QCameraViewfinderSettingsControl2) QCameraViewfinderSettingsControl2_PTR() *QCameraViewfinderSettingsControl2 {
	return p
}

func (p *QCameraViewfinderSettingsControl2) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraViewfinderSettingsControl2) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraViewfinderSettingsControl2(ptr QCameraViewfinderSettingsControl2_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraViewfinderSettingsControl2_PTR().Pointer()
	}
	return nil
}

func NewQCameraViewfinderSettingsControl2FromPointer(ptr unsafe.Pointer) *QCameraViewfinderSettingsControl2 {
	var n = new(QCameraViewfinderSettingsControl2)
	n.SetPointer(ptr)
	return n
}

//export callbackQCameraViewfinderSettingsControl2_SetViewfinderSettings
func callbackQCameraViewfinderSettingsControl2_SetViewfinderSettings(ptr unsafe.Pointer, settings unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::setViewfinderSettings")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::setViewfinderSettings"); signal != nil {
		signal.(func(*QCameraViewfinderSettings))(NewQCameraViewfinderSettingsFromPointer(settings))
	}

}

func (ptr *QCameraViewfinderSettingsControl2) ConnectSetViewfinderSettings(f func(settings *QCameraViewfinderSettings)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::setViewfinderSettings")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::setViewfinderSettings", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectSetViewfinderSettings(settings QCameraViewfinderSettings_ITF) {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::setViewfinderSettings")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::setViewfinderSettings")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) SetViewfinderSettings(settings QCameraViewfinderSettings_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::setViewfinderSettings")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_SetViewfinderSettings(ptr.Pointer(), PointerFromQCameraViewfinderSettings(settings))
	}
}

//export callbackQCameraViewfinderSettingsControl2_ViewfinderSettings
func callbackQCameraViewfinderSettingsControl2_ViewfinderSettings(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::viewfinderSettings")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::viewfinderSettings"); signal != nil {
		return PointerFromQCameraViewfinderSettings(signal.(func() *QCameraViewfinderSettings)())
	}

	return PointerFromQCameraViewfinderSettings(nil)
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectViewfinderSettings(f func() *QCameraViewfinderSettings) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::viewfinderSettings")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::viewfinderSettings", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectViewfinderSettings() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::viewfinderSettings")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::viewfinderSettings")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ViewfinderSettings() *QCameraViewfinderSettings {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::viewfinderSettings")

	if ptr.Pointer() != nil {
		var tmpValue = NewQCameraViewfinderSettingsFromPointer(C.QCameraViewfinderSettingsControl2_ViewfinderSettings(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QCameraViewfinderSettings).DestroyQCameraViewfinderSettings)
		return tmpValue
	}
	return nil
}

func (ptr *QCameraViewfinderSettingsControl2) DestroyQCameraViewfinderSettingsControl2() {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::~QCameraViewfinderSettingsControl2")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_DestroyQCameraViewfinderSettingsControl2(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraViewfinderSettingsControl2_TimerEvent
func callbackQCameraViewfinderSettingsControl2_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraViewfinderSettingsControl2FromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::timerEvent", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::timerEvent")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraViewfinderSettingsControl2_ChildEvent
func callbackQCameraViewfinderSettingsControl2_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraViewfinderSettingsControl2FromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::childEvent", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::childEvent")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraViewfinderSettingsControl2_ConnectNotify
func callbackQCameraViewfinderSettingsControl2_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraViewfinderSettingsControl2FromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::connectNotify", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::connectNotify")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraViewfinderSettingsControl2_CustomEvent
func callbackQCameraViewfinderSettingsControl2_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraViewfinderSettingsControl2FromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::customEvent", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::customEvent")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraViewfinderSettingsControl2_DeleteLater
func callbackQCameraViewfinderSettingsControl2_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraViewfinderSettingsControl2FromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::deleteLater", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::deleteLater")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DeleteLater() {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DeleteLaterDefault() {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraViewfinderSettingsControl2_DisconnectNotify
func callbackQCameraViewfinderSettingsControl2_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraViewfinderSettingsControl2FromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::disconnectNotify", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::disconnectNotify")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraViewfinderSettingsControl2_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraViewfinderSettingsControl2_Event
func callbackQCameraViewfinderSettingsControl2_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderSettingsControl2FromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::event", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::event")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::event")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettingsControl2_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraViewfinderSettingsControl2) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::event")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettingsControl2_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraViewfinderSettingsControl2_EventFilter
func callbackQCameraViewfinderSettingsControl2_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraViewfinderSettingsControl2FromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::eventFilter", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::eventFilter")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettingsControl2_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraViewfinderSettingsControl2) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraViewfinderSettingsControl2_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraViewfinderSettingsControl2_MetaObject
func callbackQCameraViewfinderSettingsControl2_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraViewfinderSettingsControl2::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraViewfinderSettingsControl2::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraViewfinderSettingsControl2FromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraViewfinderSettingsControl2) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraViewfinderSettingsControl2::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::metaObject", f)
	}
}

func (ptr *QCameraViewfinderSettingsControl2) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraViewfinderSettingsControl2::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraViewfinderSettingsControl2::metaObject")
	}
}

func (ptr *QCameraViewfinderSettingsControl2) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraViewfinderSettingsControl2_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraViewfinderSettingsControl2) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraViewfinderSettingsControl2::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraViewfinderSettingsControl2_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCameraZoomControl struct {
	QMediaControl
}

type QCameraZoomControl_ITF interface {
	QMediaControl_ITF
	QCameraZoomControl_PTR() *QCameraZoomControl
}

func (p *QCameraZoomControl) QCameraZoomControl_PTR() *QCameraZoomControl {
	return p
}

func (p *QCameraZoomControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QCameraZoomControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQCameraZoomControl(ptr QCameraZoomControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCameraZoomControl_PTR().Pointer()
	}
	return nil
}

func NewQCameraZoomControlFromPointer(ptr unsafe.Pointer) *QCameraZoomControl {
	var n = new(QCameraZoomControl)
	n.SetPointer(ptr)
	return n
}
func NewQCameraZoomControl(parent core.QObject_ITF) *QCameraZoomControl {
	defer qt.Recovering("QCameraZoomControl::QCameraZoomControl")

	var tmpValue = NewQCameraZoomControlFromPointer(C.QCameraZoomControl_NewQCameraZoomControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCameraZoomControl_CurrentDigitalZoom
func callbackQCameraZoomControl_CurrentDigitalZoom(ptr unsafe.Pointer) C.double {
	defer qt.Recovering("callback QCameraZoomControl::currentDigitalZoom")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::currentDigitalZoom"); signal != nil {
		return C.double(signal.(func() float64)())
	}

	return C.double(0)
}

func (ptr *QCameraZoomControl) ConnectCurrentDigitalZoom(f func() float64) {
	defer qt.Recovering("connect QCameraZoomControl::currentDigitalZoom")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::currentDigitalZoom", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectCurrentDigitalZoom() {
	defer qt.Recovering("disconnect QCameraZoomControl::currentDigitalZoom")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::currentDigitalZoom")
	}
}

func (ptr *QCameraZoomControl) CurrentDigitalZoom() float64 {
	defer qt.Recovering("QCameraZoomControl::currentDigitalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraZoomControl_CurrentDigitalZoom(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraZoomControl_CurrentDigitalZoomChanged
func callbackQCameraZoomControl_CurrentDigitalZoomChanged(ptr unsafe.Pointer, zoom C.double) {
	defer qt.Recovering("callback QCameraZoomControl::currentDigitalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::currentDigitalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(zoom))
	}

}

func (ptr *QCameraZoomControl) ConnectCurrentDigitalZoomChanged(f func(zoom float64)) {
	defer qt.Recovering("connect QCameraZoomControl::currentDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ConnectCurrentDigitalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::currentDigitalZoomChanged", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectCurrentDigitalZoomChanged() {
	defer qt.Recovering("disconnect QCameraZoomControl::currentDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DisconnectCurrentDigitalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::currentDigitalZoomChanged")
	}
}

func (ptr *QCameraZoomControl) CurrentDigitalZoomChanged(zoom float64) {
	defer qt.Recovering("QCameraZoomControl::currentDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_CurrentDigitalZoomChanged(ptr.Pointer(), C.double(zoom))
	}
}

//export callbackQCameraZoomControl_CurrentOpticalZoom
func callbackQCameraZoomControl_CurrentOpticalZoom(ptr unsafe.Pointer) C.double {
	defer qt.Recovering("callback QCameraZoomControl::currentOpticalZoom")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::currentOpticalZoom"); signal != nil {
		return C.double(signal.(func() float64)())
	}

	return C.double(0)
}

func (ptr *QCameraZoomControl) ConnectCurrentOpticalZoom(f func() float64) {
	defer qt.Recovering("connect QCameraZoomControl::currentOpticalZoom")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::currentOpticalZoom", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectCurrentOpticalZoom() {
	defer qt.Recovering("disconnect QCameraZoomControl::currentOpticalZoom")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::currentOpticalZoom")
	}
}

func (ptr *QCameraZoomControl) CurrentOpticalZoom() float64 {
	defer qt.Recovering("QCameraZoomControl::currentOpticalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraZoomControl_CurrentOpticalZoom(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraZoomControl_CurrentOpticalZoomChanged
func callbackQCameraZoomControl_CurrentOpticalZoomChanged(ptr unsafe.Pointer, zoom C.double) {
	defer qt.Recovering("callback QCameraZoomControl::currentOpticalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::currentOpticalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(zoom))
	}

}

func (ptr *QCameraZoomControl) ConnectCurrentOpticalZoomChanged(f func(zoom float64)) {
	defer qt.Recovering("connect QCameraZoomControl::currentOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ConnectCurrentOpticalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::currentOpticalZoomChanged", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectCurrentOpticalZoomChanged() {
	defer qt.Recovering("disconnect QCameraZoomControl::currentOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DisconnectCurrentOpticalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::currentOpticalZoomChanged")
	}
}

func (ptr *QCameraZoomControl) CurrentOpticalZoomChanged(zoom float64) {
	defer qt.Recovering("QCameraZoomControl::currentOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_CurrentOpticalZoomChanged(ptr.Pointer(), C.double(zoom))
	}
}

//export callbackQCameraZoomControl_MaximumDigitalZoom
func callbackQCameraZoomControl_MaximumDigitalZoom(ptr unsafe.Pointer) C.double {
	defer qt.Recovering("callback QCameraZoomControl::maximumDigitalZoom")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::maximumDigitalZoom"); signal != nil {
		return C.double(signal.(func() float64)())
	}

	return C.double(0)
}

func (ptr *QCameraZoomControl) ConnectMaximumDigitalZoom(f func() float64) {
	defer qt.Recovering("connect QCameraZoomControl::maximumDigitalZoom")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::maximumDigitalZoom", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectMaximumDigitalZoom() {
	defer qt.Recovering("disconnect QCameraZoomControl::maximumDigitalZoom")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::maximumDigitalZoom")
	}
}

func (ptr *QCameraZoomControl) MaximumDigitalZoom() float64 {
	defer qt.Recovering("QCameraZoomControl::maximumDigitalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraZoomControl_MaximumDigitalZoom(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraZoomControl_MaximumDigitalZoomChanged
func callbackQCameraZoomControl_MaximumDigitalZoomChanged(ptr unsafe.Pointer, zoom C.double) {
	defer qt.Recovering("callback QCameraZoomControl::maximumDigitalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::maximumDigitalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(zoom))
	}

}

func (ptr *QCameraZoomControl) ConnectMaximumDigitalZoomChanged(f func(zoom float64)) {
	defer qt.Recovering("connect QCameraZoomControl::maximumDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ConnectMaximumDigitalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::maximumDigitalZoomChanged", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectMaximumDigitalZoomChanged() {
	defer qt.Recovering("disconnect QCameraZoomControl::maximumDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DisconnectMaximumDigitalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::maximumDigitalZoomChanged")
	}
}

func (ptr *QCameraZoomControl) MaximumDigitalZoomChanged(zoom float64) {
	defer qt.Recovering("QCameraZoomControl::maximumDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_MaximumDigitalZoomChanged(ptr.Pointer(), C.double(zoom))
	}
}

//export callbackQCameraZoomControl_MaximumOpticalZoom
func callbackQCameraZoomControl_MaximumOpticalZoom(ptr unsafe.Pointer) C.double {
	defer qt.Recovering("callback QCameraZoomControl::maximumOpticalZoom")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::maximumOpticalZoom"); signal != nil {
		return C.double(signal.(func() float64)())
	}

	return C.double(0)
}

func (ptr *QCameraZoomControl) ConnectMaximumOpticalZoom(f func() float64) {
	defer qt.Recovering("connect QCameraZoomControl::maximumOpticalZoom")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::maximumOpticalZoom", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectMaximumOpticalZoom() {
	defer qt.Recovering("disconnect QCameraZoomControl::maximumOpticalZoom")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::maximumOpticalZoom")
	}
}

func (ptr *QCameraZoomControl) MaximumOpticalZoom() float64 {
	defer qt.Recovering("QCameraZoomControl::maximumOpticalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraZoomControl_MaximumOpticalZoom(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraZoomControl_MaximumOpticalZoomChanged
func callbackQCameraZoomControl_MaximumOpticalZoomChanged(ptr unsafe.Pointer, zoom C.double) {
	defer qt.Recovering("callback QCameraZoomControl::maximumOpticalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::maximumOpticalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(zoom))
	}

}

func (ptr *QCameraZoomControl) ConnectMaximumOpticalZoomChanged(f func(zoom float64)) {
	defer qt.Recovering("connect QCameraZoomControl::maximumOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ConnectMaximumOpticalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::maximumOpticalZoomChanged", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectMaximumOpticalZoomChanged() {
	defer qt.Recovering("disconnect QCameraZoomControl::maximumOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DisconnectMaximumOpticalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::maximumOpticalZoomChanged")
	}
}

func (ptr *QCameraZoomControl) MaximumOpticalZoomChanged(zoom float64) {
	defer qt.Recovering("QCameraZoomControl::maximumOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_MaximumOpticalZoomChanged(ptr.Pointer(), C.double(zoom))
	}
}

//export callbackQCameraZoomControl_RequestedDigitalZoom
func callbackQCameraZoomControl_RequestedDigitalZoom(ptr unsafe.Pointer) C.double {
	defer qt.Recovering("callback QCameraZoomControl::requestedDigitalZoom")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::requestedDigitalZoom"); signal != nil {
		return C.double(signal.(func() float64)())
	}

	return C.double(0)
}

func (ptr *QCameraZoomControl) ConnectRequestedDigitalZoom(f func() float64) {
	defer qt.Recovering("connect QCameraZoomControl::requestedDigitalZoom")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::requestedDigitalZoom", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectRequestedDigitalZoom() {
	defer qt.Recovering("disconnect QCameraZoomControl::requestedDigitalZoom")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::requestedDigitalZoom")
	}
}

func (ptr *QCameraZoomControl) RequestedDigitalZoom() float64 {
	defer qt.Recovering("QCameraZoomControl::requestedDigitalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraZoomControl_RequestedDigitalZoom(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraZoomControl_RequestedDigitalZoomChanged
func callbackQCameraZoomControl_RequestedDigitalZoomChanged(ptr unsafe.Pointer, zoom C.double) {
	defer qt.Recovering("callback QCameraZoomControl::requestedDigitalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::requestedDigitalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(zoom))
	}

}

func (ptr *QCameraZoomControl) ConnectRequestedDigitalZoomChanged(f func(zoom float64)) {
	defer qt.Recovering("connect QCameraZoomControl::requestedDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ConnectRequestedDigitalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::requestedDigitalZoomChanged", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectRequestedDigitalZoomChanged() {
	defer qt.Recovering("disconnect QCameraZoomControl::requestedDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DisconnectRequestedDigitalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::requestedDigitalZoomChanged")
	}
}

func (ptr *QCameraZoomControl) RequestedDigitalZoomChanged(zoom float64) {
	defer qt.Recovering("QCameraZoomControl::requestedDigitalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_RequestedDigitalZoomChanged(ptr.Pointer(), C.double(zoom))
	}
}

//export callbackQCameraZoomControl_RequestedOpticalZoom
func callbackQCameraZoomControl_RequestedOpticalZoom(ptr unsafe.Pointer) C.double {
	defer qt.Recovering("callback QCameraZoomControl::requestedOpticalZoom")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::requestedOpticalZoom"); signal != nil {
		return C.double(signal.(func() float64)())
	}

	return C.double(0)
}

func (ptr *QCameraZoomControl) ConnectRequestedOpticalZoom(f func() float64) {
	defer qt.Recovering("connect QCameraZoomControl::requestedOpticalZoom")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::requestedOpticalZoom", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectRequestedOpticalZoom() {
	defer qt.Recovering("disconnect QCameraZoomControl::requestedOpticalZoom")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::requestedOpticalZoom")
	}
}

func (ptr *QCameraZoomControl) RequestedOpticalZoom() float64 {
	defer qt.Recovering("QCameraZoomControl::requestedOpticalZoom")

	if ptr.Pointer() != nil {
		return float64(C.QCameraZoomControl_RequestedOpticalZoom(ptr.Pointer()))
	}
	return 0
}

//export callbackQCameraZoomControl_RequestedOpticalZoomChanged
func callbackQCameraZoomControl_RequestedOpticalZoomChanged(ptr unsafe.Pointer, zoom C.double) {
	defer qt.Recovering("callback QCameraZoomControl::requestedOpticalZoomChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::requestedOpticalZoomChanged"); signal != nil {
		signal.(func(float64))(float64(zoom))
	}

}

func (ptr *QCameraZoomControl) ConnectRequestedOpticalZoomChanged(f func(zoom float64)) {
	defer qt.Recovering("connect QCameraZoomControl::requestedOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ConnectRequestedOpticalZoomChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::requestedOpticalZoomChanged", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectRequestedOpticalZoomChanged() {
	defer qt.Recovering("disconnect QCameraZoomControl::requestedOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DisconnectRequestedOpticalZoomChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::requestedOpticalZoomChanged")
	}
}

func (ptr *QCameraZoomControl) RequestedOpticalZoomChanged(zoom float64) {
	defer qt.Recovering("QCameraZoomControl::requestedOpticalZoomChanged")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_RequestedOpticalZoomChanged(ptr.Pointer(), C.double(zoom))
	}
}

//export callbackQCameraZoomControl_ZoomTo
func callbackQCameraZoomControl_ZoomTo(ptr unsafe.Pointer, optical C.double, digital C.double) {
	defer qt.Recovering("callback QCameraZoomControl::zoomTo")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::zoomTo"); signal != nil {
		signal.(func(float64, float64))(float64(optical), float64(digital))
	}

}

func (ptr *QCameraZoomControl) ConnectZoomTo(f func(optical float64, digital float64)) {
	defer qt.Recovering("connect QCameraZoomControl::zoomTo")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::zoomTo", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectZoomTo(optical float64, digital float64) {
	defer qt.Recovering("disconnect QCameraZoomControl::zoomTo")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::zoomTo")
	}
}

func (ptr *QCameraZoomControl) ZoomTo(optical float64, digital float64) {
	defer qt.Recovering("QCameraZoomControl::zoomTo")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ZoomTo(ptr.Pointer(), C.double(optical), C.double(digital))
	}
}

func (ptr *QCameraZoomControl) DestroyQCameraZoomControl() {
	defer qt.Recovering("QCameraZoomControl::~QCameraZoomControl")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DestroyQCameraZoomControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraZoomControl_TimerEvent
func callbackQCameraZoomControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraZoomControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQCameraZoomControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCameraZoomControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QCameraZoomControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::timerEvent", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QCameraZoomControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::timerEvent")
	}
}

func (ptr *QCameraZoomControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraZoomControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QCameraZoomControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QCameraZoomControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQCameraZoomControl_ChildEvent
func callbackQCameraZoomControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraZoomControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQCameraZoomControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QCameraZoomControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QCameraZoomControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::childEvent", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QCameraZoomControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::childEvent")
	}
}

func (ptr *QCameraZoomControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraZoomControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QCameraZoomControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QCameraZoomControl::childEvent")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQCameraZoomControl_ConnectNotify
func callbackQCameraZoomControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraZoomControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraZoomControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraZoomControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraZoomControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::connectNotify", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QCameraZoomControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::connectNotify")
	}
}

func (ptr *QCameraZoomControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraZoomControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraZoomControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraZoomControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraZoomControl_CustomEvent
func callbackQCameraZoomControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QCameraZoomControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQCameraZoomControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QCameraZoomControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QCameraZoomControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::customEvent", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QCameraZoomControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::customEvent")
	}
}

func (ptr *QCameraZoomControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraZoomControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QCameraZoomControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QCameraZoomControl::customEvent")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQCameraZoomControl_DeleteLater
func callbackQCameraZoomControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QCameraZoomControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCameraZoomControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCameraZoomControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QCameraZoomControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::deleteLater", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QCameraZoomControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::deleteLater")
	}
}

func (ptr *QCameraZoomControl) DeleteLater() {
	defer qt.Recovering("QCameraZoomControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCameraZoomControl) DeleteLaterDefault() {
	defer qt.Recovering("QCameraZoomControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCameraZoomControl_DisconnectNotify
func callbackQCameraZoomControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QCameraZoomControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQCameraZoomControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCameraZoomControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QCameraZoomControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::disconnectNotify", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QCameraZoomControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::disconnectNotify")
	}
}

func (ptr *QCameraZoomControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraZoomControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCameraZoomControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QCameraZoomControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QCameraZoomControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQCameraZoomControl_Event
func callbackQCameraZoomControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraZoomControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraZoomControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QCameraZoomControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraZoomControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::event", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QCameraZoomControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::event")
	}
}

func (ptr *QCameraZoomControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraZoomControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraZoomControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCameraZoomControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraZoomControl::event")

	if ptr.Pointer() != nil {
		return C.QCameraZoomControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQCameraZoomControl_EventFilter
func callbackQCameraZoomControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QCameraZoomControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCameraZoomControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QCameraZoomControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QCameraZoomControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::eventFilter", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QCameraZoomControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::eventFilter")
	}
}

func (ptr *QCameraZoomControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraZoomControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraZoomControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCameraZoomControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QCameraZoomControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QCameraZoomControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCameraZoomControl_MetaObject
func callbackQCameraZoomControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QCameraZoomControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCameraZoomControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQCameraZoomControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCameraZoomControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QCameraZoomControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::metaObject", f)
	}
}

func (ptr *QCameraZoomControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QCameraZoomControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCameraZoomControl::metaObject")
	}
}

func (ptr *QCameraZoomControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QCameraZoomControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraZoomControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCameraZoomControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QCameraZoomControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QCameraZoomControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QGraphicsVideoItem struct {
	widgets.QGraphicsObject
	QMediaBindableInterface
}

type QGraphicsVideoItem_ITF interface {
	widgets.QGraphicsObject_ITF
	QMediaBindableInterface_ITF
	QGraphicsVideoItem_PTR() *QGraphicsVideoItem
}

func (p *QGraphicsVideoItem) QGraphicsVideoItem_PTR() *QGraphicsVideoItem {
	return p
}

func (p *QGraphicsVideoItem) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QGraphicsObject_PTR().Pointer()
	}
	return nil
}

func (p *QGraphicsVideoItem) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QGraphicsObject_PTR().SetPointer(ptr)
		p.QMediaBindableInterface_PTR().SetPointer(ptr)
	}
}

func PointerFromQGraphicsVideoItem(ptr QGraphicsVideoItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsVideoItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsVideoItemFromPointer(ptr unsafe.Pointer) *QGraphicsVideoItem {
	var n = new(QGraphicsVideoItem)
	n.SetPointer(ptr)
	return n
}

//export callbackQGraphicsVideoItem_NativeSizeChanged
func callbackQGraphicsVideoItem_NativeSizeChanged(ptr unsafe.Pointer, size unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::nativeSizeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::nativeSizeChanged"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(size))
	}

}

func (ptr *QGraphicsVideoItem) ConnectNativeSizeChanged(f func(size *core.QSizeF)) {
	defer qt.Recovering("connect QGraphicsVideoItem::nativeSizeChanged")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_ConnectNativeSizeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::nativeSizeChanged", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectNativeSizeChanged() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::nativeSizeChanged")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DisconnectNativeSizeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::nativeSizeChanged")
	}
}

func (ptr *QGraphicsVideoItem) NativeSizeChanged(size core.QSizeF_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::nativeSizeChanged")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_NativeSizeChanged(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func NewQGraphicsVideoItem(parent widgets.QGraphicsItem_ITF) *QGraphicsVideoItem {
	defer qt.Recovering("QGraphicsVideoItem::QGraphicsVideoItem")

	var tmpValue = NewQGraphicsVideoItemFromPointer(C.QGraphicsVideoItem_NewQGraphicsVideoItem(widgets.PointerFromQGraphicsItem(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGraphicsVideoItem) AspectRatioMode() core.Qt__AspectRatioMode {
	defer qt.Recovering("QGraphicsVideoItem::aspectRatioMode")

	if ptr.Pointer() != nil {
		return core.Qt__AspectRatioMode(C.QGraphicsVideoItem_AspectRatioMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsVideoItem) BoundingRect() *core.QRectF {
	defer qt.Recovering("QGraphicsVideoItem::boundingRect")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QGraphicsVideoItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsVideoItem_MediaObject
func callbackQGraphicsVideoItem_MediaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QGraphicsVideoItem::mediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::mediaObject"); signal != nil {
		return PointerFromQMediaObject(signal.(func() *QMediaObject)())
	}

	return PointerFromQMediaObject(NewQGraphicsVideoItemFromPointer(ptr).MediaObjectDefault())
}

func (ptr *QGraphicsVideoItem) ConnectMediaObject(f func() *QMediaObject) {
	defer qt.Recovering("connect QGraphicsVideoItem::mediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mediaObject", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectMediaObject() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::mediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mediaObject")
	}
}

func (ptr *QGraphicsVideoItem) MediaObject() *QMediaObject {
	defer qt.Recovering("QGraphicsVideoItem::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QGraphicsVideoItem_MediaObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsVideoItem) MediaObjectDefault() *QMediaObject {
	defer qt.Recovering("QGraphicsVideoItem::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QGraphicsVideoItem_MediaObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsVideoItem) NativeSize() *core.QSizeF {
	defer qt.Recovering("QGraphicsVideoItem::nativeSize")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QGraphicsVideoItem_NativeSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsVideoItem) Offset() *core.QPointF {
	defer qt.Recovering("QGraphicsVideoItem::offset")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QGraphicsVideoItem_Offset(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsVideoItem) Paint(painter gui.QPainter_ITF, option widgets.QStyleOptionGraphicsItem_ITF, widget widgets.QWidget_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::paint")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), widgets.PointerFromQStyleOptionGraphicsItem(option), widgets.PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsVideoItem) SetAspectRatioMode(mode core.Qt__AspectRatioMode) {
	defer qt.Recovering("QGraphicsVideoItem::setAspectRatioMode")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_SetAspectRatioMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QGraphicsVideoItem) SetOffset(offset core.QPointF_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::setOffset")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_SetOffset(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QGraphicsVideoItem) SetSize(size core.QSizeF_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::setSize")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_SetSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QGraphicsVideoItem) Size() *core.QSizeF {
	defer qt.Recovering("QGraphicsVideoItem::size")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QGraphicsVideoItem_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsVideoItem) DestroyQGraphicsVideoItem() {
	defer qt.Recovering("QGraphicsVideoItem::~QGraphicsVideoItem")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DestroyQGraphicsVideoItem(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQGraphicsVideoItem_UpdateMicroFocus
func callbackQGraphicsVideoItem_UpdateMicroFocus(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::updateMicroFocus")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::updateMicroFocus"); signal != nil {
		signal.(func())()
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).UpdateMicroFocusDefault()
	}
}

func (ptr *QGraphicsVideoItem) ConnectUpdateMicroFocus(f func()) {
	defer qt.Recovering("connect QGraphicsVideoItem::updateMicroFocus")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::updateMicroFocus", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectUpdateMicroFocus() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::updateMicroFocus")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::updateMicroFocus")
	}
}

func (ptr *QGraphicsVideoItem) UpdateMicroFocus() {
	defer qt.Recovering("QGraphicsVideoItem::updateMicroFocus")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_UpdateMicroFocus(ptr.Pointer())
	}
}

func (ptr *QGraphicsVideoItem) UpdateMicroFocusDefault() {
	defer qt.Recovering("QGraphicsVideoItem::updateMicroFocus")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_UpdateMicroFocusDefault(ptr.Pointer())
	}
}

//export callbackQGraphicsVideoItem_TimerEvent
func callbackQGraphicsVideoItem_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::timerEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::timerEvent")
	}
}

func (ptr *QGraphicsVideoItem) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::timerEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::timerEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQGraphicsVideoItem_ChildEvent
func callbackQGraphicsVideoItem_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::childEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::childEvent")
	}
}

func (ptr *QGraphicsVideoItem) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::childEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::childEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGraphicsVideoItem_ConnectNotify
func callbackQGraphicsVideoItem_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsVideoItem) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QGraphicsVideoItem::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::connectNotify", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::connectNotify")
	}
}

func (ptr *QGraphicsVideoItem) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::connectNotify")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGraphicsVideoItem) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::connectNotify")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsVideoItem_CustomEvent
func callbackQGraphicsVideoItem_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::customEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::customEvent")
	}
}

func (ptr *QGraphicsVideoItem) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::customEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::customEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGraphicsVideoItem_DeleteLater
func callbackQGraphicsVideoItem_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QGraphicsVideoItem) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QGraphicsVideoItem::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::deleteLater", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::deleteLater")
	}
}

func (ptr *QGraphicsVideoItem) DeleteLater() {
	defer qt.Recovering("QGraphicsVideoItem::deleteLater")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QGraphicsVideoItem) DeleteLaterDefault() {
	defer qt.Recovering("QGraphicsVideoItem::deleteLater")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQGraphicsVideoItem_DisconnectNotify
func callbackQGraphicsVideoItem_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsVideoItem) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QGraphicsVideoItem::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::disconnectNotify", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::disconnectNotify")
	}
}

func (ptr *QGraphicsVideoItem) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGraphicsVideoItem) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsVideoItem_EventFilter
func callbackQGraphicsVideoItem_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QGraphicsVideoItem::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsVideoItemFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsVideoItem) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QGraphicsVideoItem::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::eventFilter", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::eventFilter")
	}
}

func (ptr *QGraphicsVideoItem) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::eventFilter")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QGraphicsVideoItem) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::eventFilter")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQGraphicsVideoItem_MetaObject
func callbackQGraphicsVideoItem_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QGraphicsVideoItem::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQGraphicsVideoItemFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGraphicsVideoItem) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QGraphicsVideoItem::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::metaObject", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::metaObject")
	}
}

func (ptr *QGraphicsVideoItem) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QGraphicsVideoItem::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGraphicsVideoItem_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsVideoItem) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QGraphicsVideoItem::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGraphicsVideoItem_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQGraphicsVideoItem_Advance
func callbackQGraphicsVideoItem_Advance(ptr unsafe.Pointer, phase C.int) {
	defer qt.Recovering("callback QGraphicsVideoItem::advance")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::advance"); signal != nil {
		signal.(func(int))(int(int32(phase)))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).AdvanceDefault(int(int32(phase)))
	}
}

func (ptr *QGraphicsVideoItem) ConnectAdvance(f func(phase int)) {
	defer qt.Recovering("connect QGraphicsVideoItem::advance")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::advance", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectAdvance() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::advance")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::advance")
	}
}

func (ptr *QGraphicsVideoItem) Advance(phase int) {
	defer qt.Recovering("QGraphicsVideoItem::advance")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_Advance(ptr.Pointer(), C.int(int32(phase)))
	}
}

func (ptr *QGraphicsVideoItem) AdvanceDefault(phase int) {
	defer qt.Recovering("QGraphicsVideoItem::advance")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_AdvanceDefault(ptr.Pointer(), C.int(int32(phase)))
	}
}

//export callbackQGraphicsVideoItem_CollidesWithItem
func callbackQGraphicsVideoItem_CollidesWithItem(ptr unsafe.Pointer, other unsafe.Pointer, mode C.longlong) C.char {
	defer qt.Recovering("callback QGraphicsVideoItem::collidesWithItem")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::collidesWithItem"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*widgets.QGraphicsItem, core.Qt__ItemSelectionMode) bool)(widgets.NewQGraphicsItemFromPointer(other), core.Qt__ItemSelectionMode(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsVideoItemFromPointer(ptr).CollidesWithItemDefault(widgets.NewQGraphicsItemFromPointer(other), core.Qt__ItemSelectionMode(mode)))))
}

func (ptr *QGraphicsVideoItem) ConnectCollidesWithItem(f func(other *widgets.QGraphicsItem, mode core.Qt__ItemSelectionMode) bool) {
	defer qt.Recovering("connect QGraphicsVideoItem::collidesWithItem")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::collidesWithItem", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectCollidesWithItem() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::collidesWithItem")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::collidesWithItem")
	}
}

func (ptr *QGraphicsVideoItem) CollidesWithItem(other widgets.QGraphicsItem_ITF, mode core.Qt__ItemSelectionMode) bool {
	defer qt.Recovering("QGraphicsVideoItem::collidesWithItem")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_CollidesWithItem(ptr.Pointer(), widgets.PointerFromQGraphicsItem(other), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QGraphicsVideoItem) CollidesWithItemDefault(other widgets.QGraphicsItem_ITF, mode core.Qt__ItemSelectionMode) bool {
	defer qt.Recovering("QGraphicsVideoItem::collidesWithItem")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_CollidesWithItemDefault(ptr.Pointer(), widgets.PointerFromQGraphicsItem(other), C.longlong(mode)) != 0
	}
	return false
}

//export callbackQGraphicsVideoItem_CollidesWithPath
func callbackQGraphicsVideoItem_CollidesWithPath(ptr unsafe.Pointer, path unsafe.Pointer, mode C.longlong) C.char {
	defer qt.Recovering("callback QGraphicsVideoItem::collidesWithPath")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::collidesWithPath"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*gui.QPainterPath, core.Qt__ItemSelectionMode) bool)(gui.NewQPainterPathFromPointer(path), core.Qt__ItemSelectionMode(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsVideoItemFromPointer(ptr).CollidesWithPathDefault(gui.NewQPainterPathFromPointer(path), core.Qt__ItemSelectionMode(mode)))))
}

func (ptr *QGraphicsVideoItem) ConnectCollidesWithPath(f func(path *gui.QPainterPath, mode core.Qt__ItemSelectionMode) bool) {
	defer qt.Recovering("connect QGraphicsVideoItem::collidesWithPath")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::collidesWithPath", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectCollidesWithPath() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::collidesWithPath")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::collidesWithPath")
	}
}

func (ptr *QGraphicsVideoItem) CollidesWithPath(path gui.QPainterPath_ITF, mode core.Qt__ItemSelectionMode) bool {
	defer qt.Recovering("QGraphicsVideoItem::collidesWithPath")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_CollidesWithPath(ptr.Pointer(), gui.PointerFromQPainterPath(path), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QGraphicsVideoItem) CollidesWithPathDefault(path gui.QPainterPath_ITF, mode core.Qt__ItemSelectionMode) bool {
	defer qt.Recovering("QGraphicsVideoItem::collidesWithPath")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_CollidesWithPathDefault(ptr.Pointer(), gui.PointerFromQPainterPath(path), C.longlong(mode)) != 0
	}
	return false
}

//export callbackQGraphicsVideoItem_Contains
func callbackQGraphicsVideoItem_Contains(ptr unsafe.Pointer, point unsafe.Pointer) C.char {
	defer qt.Recovering("callback QGraphicsVideoItem::contains")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::contains"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QPointF) bool)(core.NewQPointFFromPointer(point)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsVideoItemFromPointer(ptr).ContainsDefault(core.NewQPointFFromPointer(point)))))
}

func (ptr *QGraphicsVideoItem) ConnectContains(f func(point *core.QPointF) bool) {
	defer qt.Recovering("connect QGraphicsVideoItem::contains")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::contains", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectContains() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::contains")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::contains")
	}
}

func (ptr *QGraphicsVideoItem) Contains(point core.QPointF_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::contains")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_Contains(ptr.Pointer(), core.PointerFromQPointF(point)) != 0
	}
	return false
}

func (ptr *QGraphicsVideoItem) ContainsDefault(point core.QPointF_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::contains")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_ContainsDefault(ptr.Pointer(), core.PointerFromQPointF(point)) != 0
	}
	return false
}

//export callbackQGraphicsVideoItem_ContextMenuEvent
func callbackQGraphicsVideoItem_ContextMenuEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::contextMenuEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::contextMenuEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneContextMenuEvent))(widgets.NewQGraphicsSceneContextMenuEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).ContextMenuEventDefault(widgets.NewQGraphicsSceneContextMenuEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectContextMenuEvent(f func(event *widgets.QGraphicsSceneContextMenuEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::contextMenuEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::contextMenuEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectContextMenuEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::contextMenuEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::contextMenuEvent")
	}
}

func (ptr *QGraphicsVideoItem) ContextMenuEvent(event widgets.QGraphicsSceneContextMenuEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::contextMenuEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_ContextMenuEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneContextMenuEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) ContextMenuEventDefault(event widgets.QGraphicsSceneContextMenuEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::contextMenuEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_ContextMenuEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneContextMenuEvent(event))
	}
}

//export callbackQGraphicsVideoItem_DragEnterEvent
func callbackQGraphicsVideoItem_DragEnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::dragEnterEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::dragEnterEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneDragDropEvent))(widgets.NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).DragEnterEventDefault(widgets.NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectDragEnterEvent(f func(event *widgets.QGraphicsSceneDragDropEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::dragEnterEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::dragEnterEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectDragEnterEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::dragEnterEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::dragEnterEvent")
	}
}

func (ptr *QGraphicsVideoItem) DragEnterEvent(event widgets.QGraphicsSceneDragDropEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::dragEnterEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DragEnterEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) DragEnterEventDefault(event widgets.QGraphicsSceneDragDropEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::dragEnterEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DragEnterEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsVideoItem_DragLeaveEvent
func callbackQGraphicsVideoItem_DragLeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::dragLeaveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::dragLeaveEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneDragDropEvent))(widgets.NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).DragLeaveEventDefault(widgets.NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectDragLeaveEvent(f func(event *widgets.QGraphicsSceneDragDropEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::dragLeaveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::dragLeaveEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectDragLeaveEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::dragLeaveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::dragLeaveEvent")
	}
}

func (ptr *QGraphicsVideoItem) DragLeaveEvent(event widgets.QGraphicsSceneDragDropEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::dragLeaveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DragLeaveEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) DragLeaveEventDefault(event widgets.QGraphicsSceneDragDropEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::dragLeaveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DragLeaveEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsVideoItem_DragMoveEvent
func callbackQGraphicsVideoItem_DragMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::dragMoveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::dragMoveEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneDragDropEvent))(widgets.NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).DragMoveEventDefault(widgets.NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectDragMoveEvent(f func(event *widgets.QGraphicsSceneDragDropEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::dragMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::dragMoveEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectDragMoveEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::dragMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::dragMoveEvent")
	}
}

func (ptr *QGraphicsVideoItem) DragMoveEvent(event widgets.QGraphicsSceneDragDropEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::dragMoveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DragMoveEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) DragMoveEventDefault(event widgets.QGraphicsSceneDragDropEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::dragMoveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DragMoveEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsVideoItem_DropEvent
func callbackQGraphicsVideoItem_DropEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::dropEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::dropEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneDragDropEvent))(widgets.NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).DropEventDefault(widgets.NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectDropEvent(f func(event *widgets.QGraphicsSceneDragDropEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::dropEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::dropEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectDropEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::dropEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::dropEvent")
	}
}

func (ptr *QGraphicsVideoItem) DropEvent(event widgets.QGraphicsSceneDragDropEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::dropEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DropEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) DropEventDefault(event widgets.QGraphicsSceneDragDropEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::dropEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_DropEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsVideoItem_FocusInEvent
func callbackQGraphicsVideoItem_FocusInEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::focusInEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::focusInEvent"); signal != nil {
		signal.(func(*gui.QFocusEvent))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).FocusInEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectFocusInEvent(f func(event *gui.QFocusEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::focusInEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::focusInEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectFocusInEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::focusInEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::focusInEvent")
	}
}

func (ptr *QGraphicsVideoItem) FocusInEvent(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::focusInEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_FocusInEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) FocusInEventDefault(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::focusInEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_FocusInEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

//export callbackQGraphicsVideoItem_FocusOutEvent
func callbackQGraphicsVideoItem_FocusOutEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::focusOutEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::focusOutEvent"); signal != nil {
		signal.(func(*gui.QFocusEvent))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).FocusOutEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectFocusOutEvent(f func(event *gui.QFocusEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::focusOutEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectFocusOutEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::focusOutEvent")
	}
}

func (ptr *QGraphicsVideoItem) FocusOutEvent(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_FocusOutEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) FocusOutEventDefault(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_FocusOutEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

//export callbackQGraphicsVideoItem_HoverEnterEvent
func callbackQGraphicsVideoItem_HoverEnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::hoverEnterEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::hoverEnterEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneHoverEvent))(widgets.NewQGraphicsSceneHoverEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).HoverEnterEventDefault(widgets.NewQGraphicsSceneHoverEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectHoverEnterEvent(f func(event *widgets.QGraphicsSceneHoverEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::hoverEnterEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::hoverEnterEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectHoverEnterEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::hoverEnterEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::hoverEnterEvent")
	}
}

func (ptr *QGraphicsVideoItem) HoverEnterEvent(event widgets.QGraphicsSceneHoverEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::hoverEnterEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_HoverEnterEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneHoverEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) HoverEnterEventDefault(event widgets.QGraphicsSceneHoverEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::hoverEnterEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_HoverEnterEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneHoverEvent(event))
	}
}

//export callbackQGraphicsVideoItem_HoverLeaveEvent
func callbackQGraphicsVideoItem_HoverLeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::hoverLeaveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::hoverLeaveEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneHoverEvent))(widgets.NewQGraphicsSceneHoverEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).HoverLeaveEventDefault(widgets.NewQGraphicsSceneHoverEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectHoverLeaveEvent(f func(event *widgets.QGraphicsSceneHoverEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::hoverLeaveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::hoverLeaveEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectHoverLeaveEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::hoverLeaveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::hoverLeaveEvent")
	}
}

func (ptr *QGraphicsVideoItem) HoverLeaveEvent(event widgets.QGraphicsSceneHoverEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::hoverLeaveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_HoverLeaveEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneHoverEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) HoverLeaveEventDefault(event widgets.QGraphicsSceneHoverEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::hoverLeaveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_HoverLeaveEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneHoverEvent(event))
	}
}

//export callbackQGraphicsVideoItem_HoverMoveEvent
func callbackQGraphicsVideoItem_HoverMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::hoverMoveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::hoverMoveEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneHoverEvent))(widgets.NewQGraphicsSceneHoverEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).HoverMoveEventDefault(widgets.NewQGraphicsSceneHoverEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectHoverMoveEvent(f func(event *widgets.QGraphicsSceneHoverEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::hoverMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::hoverMoveEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectHoverMoveEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::hoverMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::hoverMoveEvent")
	}
}

func (ptr *QGraphicsVideoItem) HoverMoveEvent(event widgets.QGraphicsSceneHoverEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::hoverMoveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_HoverMoveEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneHoverEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) HoverMoveEventDefault(event widgets.QGraphicsSceneHoverEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::hoverMoveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_HoverMoveEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneHoverEvent(event))
	}
}

//export callbackQGraphicsVideoItem_InputMethodEvent
func callbackQGraphicsVideoItem_InputMethodEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::inputMethodEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::inputMethodEvent"); signal != nil {
		signal.(func(*gui.QInputMethodEvent))(gui.NewQInputMethodEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).InputMethodEventDefault(gui.NewQInputMethodEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectInputMethodEvent(f func(event *gui.QInputMethodEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::inputMethodEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::inputMethodEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectInputMethodEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::inputMethodEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::inputMethodEvent")
	}
}

func (ptr *QGraphicsVideoItem) InputMethodEvent(event gui.QInputMethodEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::inputMethodEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_InputMethodEvent(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) InputMethodEventDefault(event gui.QInputMethodEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::inputMethodEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_InputMethodEventDefault(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

//export callbackQGraphicsVideoItem_InputMethodQuery
func callbackQGraphicsVideoItem_InputMethodQuery(ptr unsafe.Pointer, query C.longlong) unsafe.Pointer {
	defer qt.Recovering("callback QGraphicsVideoItem::inputMethodQuery")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::inputMethodQuery"); signal != nil {
		return core.PointerFromQVariant(signal.(func(core.Qt__InputMethodQuery) *core.QVariant)(core.Qt__InputMethodQuery(query)))
	}

	return core.PointerFromQVariant(NewQGraphicsVideoItemFromPointer(ptr).InputMethodQueryDefault(core.Qt__InputMethodQuery(query)))
}

func (ptr *QGraphicsVideoItem) ConnectInputMethodQuery(f func(query core.Qt__InputMethodQuery) *core.QVariant) {
	defer qt.Recovering("connect QGraphicsVideoItem::inputMethodQuery")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::inputMethodQuery", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectInputMethodQuery() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::inputMethodQuery")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::inputMethodQuery")
	}
}

func (ptr *QGraphicsVideoItem) InputMethodQuery(query core.Qt__InputMethodQuery) *core.QVariant {
	defer qt.Recovering("QGraphicsVideoItem::inputMethodQuery")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QGraphicsVideoItem_InputMethodQuery(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsVideoItem) InputMethodQueryDefault(query core.Qt__InputMethodQuery) *core.QVariant {
	defer qt.Recovering("QGraphicsVideoItem::inputMethodQuery")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QGraphicsVideoItem_InputMethodQueryDefault(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsVideoItem_IsObscuredBy
func callbackQGraphicsVideoItem_IsObscuredBy(ptr unsafe.Pointer, item unsafe.Pointer) C.char {
	defer qt.Recovering("callback QGraphicsVideoItem::isObscuredBy")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::isObscuredBy"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*widgets.QGraphicsItem) bool)(widgets.NewQGraphicsItemFromPointer(item)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsVideoItemFromPointer(ptr).IsObscuredByDefault(widgets.NewQGraphicsItemFromPointer(item)))))
}

func (ptr *QGraphicsVideoItem) ConnectIsObscuredBy(f func(item *widgets.QGraphicsItem) bool) {
	defer qt.Recovering("connect QGraphicsVideoItem::isObscuredBy")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::isObscuredBy", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectIsObscuredBy() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::isObscuredBy")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::isObscuredBy")
	}
}

func (ptr *QGraphicsVideoItem) IsObscuredBy(item widgets.QGraphicsItem_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::isObscuredBy")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_IsObscuredBy(ptr.Pointer(), widgets.PointerFromQGraphicsItem(item)) != 0
	}
	return false
}

func (ptr *QGraphicsVideoItem) IsObscuredByDefault(item widgets.QGraphicsItem_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::isObscuredBy")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_IsObscuredByDefault(ptr.Pointer(), widgets.PointerFromQGraphicsItem(item)) != 0
	}
	return false
}

//export callbackQGraphicsVideoItem_ItemChange
func callbackQGraphicsVideoItem_ItemChange(ptr unsafe.Pointer, change C.longlong, value unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QGraphicsVideoItem::itemChange")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::itemChange"); signal != nil {
		return core.PointerFromQVariant(signal.(func(widgets.QGraphicsItem__GraphicsItemChange, *core.QVariant) *core.QVariant)(widgets.QGraphicsItem__GraphicsItemChange(change), core.NewQVariantFromPointer(value)))
	}

	return core.PointerFromQVariant(NewQGraphicsVideoItemFromPointer(ptr).ItemChangeDefault(widgets.QGraphicsItem__GraphicsItemChange(change), core.NewQVariantFromPointer(value)))
}

func (ptr *QGraphicsVideoItem) ConnectItemChange(f func(change widgets.QGraphicsItem__GraphicsItemChange, value *core.QVariant) *core.QVariant) {
	defer qt.Recovering("connect QGraphicsVideoItem::itemChange")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::itemChange", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectItemChange() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::itemChange")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::itemChange")
	}
}

func (ptr *QGraphicsVideoItem) ItemChange(change widgets.QGraphicsItem__GraphicsItemChange, value core.QVariant_ITF) *core.QVariant {
	defer qt.Recovering("QGraphicsVideoItem::itemChange")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QGraphicsVideoItem_ItemChange(ptr.Pointer(), C.longlong(change), core.PointerFromQVariant(value)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsVideoItem) ItemChangeDefault(change widgets.QGraphicsItem__GraphicsItemChange, value core.QVariant_ITF) *core.QVariant {
	defer qt.Recovering("QGraphicsVideoItem::itemChange")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QGraphicsVideoItem_ItemChangeDefault(ptr.Pointer(), C.longlong(change), core.PointerFromQVariant(value)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsVideoItem_KeyPressEvent
func callbackQGraphicsVideoItem_KeyPressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::keyPressEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::keyPressEvent"); signal != nil {
		signal.(func(*gui.QKeyEvent))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).KeyPressEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectKeyPressEvent(f func(event *gui.QKeyEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::keyPressEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectKeyPressEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::keyPressEvent")
	}
}

func (ptr *QGraphicsVideoItem) KeyPressEvent(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_KeyPressEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) KeyPressEventDefault(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_KeyPressEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQGraphicsVideoItem_KeyReleaseEvent
func callbackQGraphicsVideoItem_KeyReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::keyReleaseEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::keyReleaseEvent"); signal != nil {
		signal.(func(*gui.QKeyEvent))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).KeyReleaseEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectKeyReleaseEvent(f func(event *gui.QKeyEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::keyReleaseEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectKeyReleaseEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::keyReleaseEvent")
	}
}

func (ptr *QGraphicsVideoItem) KeyReleaseEvent(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_KeyReleaseEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) KeyReleaseEventDefault(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_KeyReleaseEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQGraphicsVideoItem_MouseDoubleClickEvent
func callbackQGraphicsVideoItem_MouseDoubleClickEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::mouseDoubleClickEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::mouseDoubleClickEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneMouseEvent))(widgets.NewQGraphicsSceneMouseEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).MouseDoubleClickEventDefault(widgets.NewQGraphicsSceneMouseEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectMouseDoubleClickEvent(f func(event *widgets.QGraphicsSceneMouseEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mouseDoubleClickEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectMouseDoubleClickEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mouseDoubleClickEvent")
	}
}

func (ptr *QGraphicsVideoItem) MouseDoubleClickEvent(event widgets.QGraphicsSceneMouseEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_MouseDoubleClickEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneMouseEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) MouseDoubleClickEventDefault(event widgets.QGraphicsSceneMouseEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_MouseDoubleClickEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneMouseEvent(event))
	}
}

//export callbackQGraphicsVideoItem_MouseMoveEvent
func callbackQGraphicsVideoItem_MouseMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::mouseMoveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::mouseMoveEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneMouseEvent))(widgets.NewQGraphicsSceneMouseEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).MouseMoveEventDefault(widgets.NewQGraphicsSceneMouseEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectMouseMoveEvent(f func(event *widgets.QGraphicsSceneMouseEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mouseMoveEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectMouseMoveEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mouseMoveEvent")
	}
}

func (ptr *QGraphicsVideoItem) MouseMoveEvent(event widgets.QGraphicsSceneMouseEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_MouseMoveEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneMouseEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) MouseMoveEventDefault(event widgets.QGraphicsSceneMouseEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_MouseMoveEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneMouseEvent(event))
	}
}

//export callbackQGraphicsVideoItem_MousePressEvent
func callbackQGraphicsVideoItem_MousePressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::mousePressEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::mousePressEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneMouseEvent))(widgets.NewQGraphicsSceneMouseEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).MousePressEventDefault(widgets.NewQGraphicsSceneMouseEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectMousePressEvent(f func(event *widgets.QGraphicsSceneMouseEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mousePressEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectMousePressEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mousePressEvent")
	}
}

func (ptr *QGraphicsVideoItem) MousePressEvent(event widgets.QGraphicsSceneMouseEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_MousePressEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneMouseEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) MousePressEventDefault(event widgets.QGraphicsSceneMouseEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_MousePressEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneMouseEvent(event))
	}
}

//export callbackQGraphicsVideoItem_MouseReleaseEvent
func callbackQGraphicsVideoItem_MouseReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::mouseReleaseEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::mouseReleaseEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneMouseEvent))(widgets.NewQGraphicsSceneMouseEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).MouseReleaseEventDefault(widgets.NewQGraphicsSceneMouseEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectMouseReleaseEvent(f func(event *widgets.QGraphicsSceneMouseEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mouseReleaseEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectMouseReleaseEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::mouseReleaseEvent")
	}
}

func (ptr *QGraphicsVideoItem) MouseReleaseEvent(event widgets.QGraphicsSceneMouseEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_MouseReleaseEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneMouseEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) MouseReleaseEventDefault(event widgets.QGraphicsSceneMouseEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_MouseReleaseEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneMouseEvent(event))
	}
}

//export callbackQGraphicsVideoItem_OpaqueArea
func callbackQGraphicsVideoItem_OpaqueArea(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QGraphicsVideoItem::opaqueArea")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::opaqueArea"); signal != nil {
		return gui.PointerFromQPainterPath(signal.(func() *gui.QPainterPath)())
	}

	return gui.PointerFromQPainterPath(NewQGraphicsVideoItemFromPointer(ptr).OpaqueAreaDefault())
}

func (ptr *QGraphicsVideoItem) ConnectOpaqueArea(f func() *gui.QPainterPath) {
	defer qt.Recovering("connect QGraphicsVideoItem::opaqueArea")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::opaqueArea", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectOpaqueArea() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::opaqueArea")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::opaqueArea")
	}
}

func (ptr *QGraphicsVideoItem) OpaqueArea() *gui.QPainterPath {
	defer qt.Recovering("QGraphicsVideoItem::opaqueArea")

	if ptr.Pointer() != nil {
		var tmpValue = gui.NewQPainterPathFromPointer(C.QGraphicsVideoItem_OpaqueArea(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsVideoItem) OpaqueAreaDefault() *gui.QPainterPath {
	defer qt.Recovering("QGraphicsVideoItem::opaqueArea")

	if ptr.Pointer() != nil {
		var tmpValue = gui.NewQPainterPathFromPointer(C.QGraphicsVideoItem_OpaqueAreaDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsVideoItem_SceneEvent
func callbackQGraphicsVideoItem_SceneEvent(ptr unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QGraphicsVideoItem::sceneEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::sceneEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsVideoItemFromPointer(ptr).SceneEventDefault(core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsVideoItem) ConnectSceneEvent(f func(event *core.QEvent) bool) {
	defer qt.Recovering("connect QGraphicsVideoItem::sceneEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::sceneEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectSceneEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::sceneEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::sceneEvent")
	}
}

func (ptr *QGraphicsVideoItem) SceneEvent(event core.QEvent_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::sceneEvent")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_SceneEvent(ptr.Pointer(), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QGraphicsVideoItem) SceneEventDefault(event core.QEvent_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::sceneEvent")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_SceneEventDefault(ptr.Pointer(), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQGraphicsVideoItem_SceneEventFilter
func callbackQGraphicsVideoItem_SceneEventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QGraphicsVideoItem::sceneEventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::sceneEventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*widgets.QGraphicsItem, *core.QEvent) bool)(widgets.NewQGraphicsItemFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsVideoItemFromPointer(ptr).SceneEventFilterDefault(widgets.NewQGraphicsItemFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsVideoItem) ConnectSceneEventFilter(f func(watched *widgets.QGraphicsItem, event *core.QEvent) bool) {
	defer qt.Recovering("connect QGraphicsVideoItem::sceneEventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::sceneEventFilter", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectSceneEventFilter() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::sceneEventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::sceneEventFilter")
	}
}

func (ptr *QGraphicsVideoItem) SceneEventFilter(watched widgets.QGraphicsItem_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::sceneEventFilter")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_SceneEventFilter(ptr.Pointer(), widgets.PointerFromQGraphicsItem(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QGraphicsVideoItem) SceneEventFilterDefault(watched widgets.QGraphicsItem_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::sceneEventFilter")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_SceneEventFilterDefault(ptr.Pointer(), widgets.PointerFromQGraphicsItem(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQGraphicsVideoItem_Shape
func callbackQGraphicsVideoItem_Shape(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QGraphicsVideoItem::shape")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::shape"); signal != nil {
		return gui.PointerFromQPainterPath(signal.(func() *gui.QPainterPath)())
	}

	return gui.PointerFromQPainterPath(NewQGraphicsVideoItemFromPointer(ptr).ShapeDefault())
}

func (ptr *QGraphicsVideoItem) ConnectShape(f func() *gui.QPainterPath) {
	defer qt.Recovering("connect QGraphicsVideoItem::shape")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::shape", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectShape() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::shape")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::shape")
	}
}

func (ptr *QGraphicsVideoItem) Shape() *gui.QPainterPath {
	defer qt.Recovering("QGraphicsVideoItem::shape")

	if ptr.Pointer() != nil {
		var tmpValue = gui.NewQPainterPathFromPointer(C.QGraphicsVideoItem_Shape(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsVideoItem) ShapeDefault() *gui.QPainterPath {
	defer qt.Recovering("QGraphicsVideoItem::shape")

	if ptr.Pointer() != nil {
		var tmpValue = gui.NewQPainterPathFromPointer(C.QGraphicsVideoItem_ShapeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsVideoItem_Type
func callbackQGraphicsVideoItem_Type(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QGraphicsVideoItem::type")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::type"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQGraphicsVideoItemFromPointer(ptr).TypeDefault()))
}

func (ptr *QGraphicsVideoItem) ConnectType(f func() int) {
	defer qt.Recovering("connect QGraphicsVideoItem::type")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::type", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectType() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::type")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::type")
	}
}

func (ptr *QGraphicsVideoItem) Type() int {
	defer qt.Recovering("QGraphicsVideoItem::type")

	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsVideoItem_Type(ptr.Pointer())))
	}
	return 0
}

func (ptr *QGraphicsVideoItem) TypeDefault() int {
	defer qt.Recovering("QGraphicsVideoItem::type")

	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsVideoItem_TypeDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQGraphicsVideoItem_WheelEvent
func callbackQGraphicsVideoItem_WheelEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QGraphicsVideoItem::wheelEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::wheelEvent"); signal != nil {
		signal.(func(*widgets.QGraphicsSceneWheelEvent))(widgets.NewQGraphicsSceneWheelEventFromPointer(event))
	} else {
		NewQGraphicsVideoItemFromPointer(ptr).WheelEventDefault(widgets.NewQGraphicsSceneWheelEventFromPointer(event))
	}
}

func (ptr *QGraphicsVideoItem) ConnectWheelEvent(f func(event *widgets.QGraphicsSceneWheelEvent)) {
	defer qt.Recovering("connect QGraphicsVideoItem::wheelEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::wheelEvent", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectWheelEvent() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::wheelEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::wheelEvent")
	}
}

func (ptr *QGraphicsVideoItem) WheelEvent(event widgets.QGraphicsSceneWheelEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::wheelEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_WheelEvent(ptr.Pointer(), widgets.PointerFromQGraphicsSceneWheelEvent(event))
	}
}

func (ptr *QGraphicsVideoItem) WheelEventDefault(event widgets.QGraphicsSceneWheelEvent_ITF) {
	defer qt.Recovering("QGraphicsVideoItem::wheelEvent")

	if ptr.Pointer() != nil {
		C.QGraphicsVideoItem_WheelEventDefault(ptr.Pointer(), widgets.PointerFromQGraphicsSceneWheelEvent(event))
	}
}

//export callbackQGraphicsVideoItem_SetMediaObject
func callbackQGraphicsVideoItem_SetMediaObject(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QGraphicsVideoItem::setMediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGraphicsVideoItem::setMediaObject"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMediaObject) bool)(NewQMediaObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsVideoItemFromPointer(ptr).SetMediaObjectDefault(NewQMediaObjectFromPointer(object)))))
}

func (ptr *QGraphicsVideoItem) ConnectSetMediaObject(f func(object *QMediaObject) bool) {
	defer qt.Recovering("connect QGraphicsVideoItem::setMediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::setMediaObject", f)
	}
}

func (ptr *QGraphicsVideoItem) DisconnectSetMediaObject() {
	defer qt.Recovering("disconnect QGraphicsVideoItem::setMediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGraphicsVideoItem::setMediaObject")
	}
}

func (ptr *QGraphicsVideoItem) SetMediaObject(object QMediaObject_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_SetMediaObject(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

func (ptr *QGraphicsVideoItem) SetMediaObjectDefault(object QMediaObject_ITF) bool {
	defer qt.Recovering("QGraphicsVideoItem::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QGraphicsVideoItem_SetMediaObjectDefault(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

type QImageEncoderControl struct {
	QMediaControl
}

type QImageEncoderControl_ITF interface {
	QMediaControl_ITF
	QImageEncoderControl_PTR() *QImageEncoderControl
}

func (p *QImageEncoderControl) QImageEncoderControl_PTR() *QImageEncoderControl {
	return p
}

func (p *QImageEncoderControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QImageEncoderControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQImageEncoderControl(ptr QImageEncoderControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageEncoderControl_PTR().Pointer()
	}
	return nil
}

func NewQImageEncoderControlFromPointer(ptr unsafe.Pointer) *QImageEncoderControl {
	var n = new(QImageEncoderControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQImageEncoderControl_ImageCodecDescription
func callbackQImageEncoderControl_ImageCodecDescription(ptr unsafe.Pointer, codec *C.char) *C.char {
	defer qt.Recovering("callback QImageEncoderControl::imageCodecDescription")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::imageCodecDescription"); signal != nil {
		return C.CString(signal.(func(string) string)(C.GoString(codec)))
	}

	return C.CString("")
}

func (ptr *QImageEncoderControl) ConnectImageCodecDescription(f func(codec string) string) {
	defer qt.Recovering("connect QImageEncoderControl::imageCodecDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::imageCodecDescription", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectImageCodecDescription(codec string) {
	defer qt.Recovering("disconnect QImageEncoderControl::imageCodecDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::imageCodecDescription")
	}
}

func (ptr *QImageEncoderControl) ImageCodecDescription(codec string) string {
	defer qt.Recovering("QImageEncoderControl::imageCodecDescription")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		return C.GoString(C.QImageEncoderControl_ImageCodecDescription(ptr.Pointer(), codecC))
	}
	return ""
}

//export callbackQImageEncoderControl_ImageSettings
func callbackQImageEncoderControl_ImageSettings(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QImageEncoderControl::imageSettings")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::imageSettings"); signal != nil {
		return PointerFromQImageEncoderSettings(signal.(func() *QImageEncoderSettings)())
	}

	return PointerFromQImageEncoderSettings(nil)
}

func (ptr *QImageEncoderControl) ConnectImageSettings(f func() *QImageEncoderSettings) {
	defer qt.Recovering("connect QImageEncoderControl::imageSettings")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::imageSettings", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectImageSettings() {
	defer qt.Recovering("disconnect QImageEncoderControl::imageSettings")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::imageSettings")
	}
}

func (ptr *QImageEncoderControl) ImageSettings() *QImageEncoderSettings {
	defer qt.Recovering("QImageEncoderControl::imageSettings")

	if ptr.Pointer() != nil {
		var tmpValue = NewQImageEncoderSettingsFromPointer(C.QImageEncoderControl_ImageSettings(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImageEncoderSettings).DestroyQImageEncoderSettings)
		return tmpValue
	}
	return nil
}

//export callbackQImageEncoderControl_SetImageSettings
func callbackQImageEncoderControl_SetImageSettings(ptr unsafe.Pointer, settings unsafe.Pointer) {
	defer qt.Recovering("callback QImageEncoderControl::setImageSettings")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::setImageSettings"); signal != nil {
		signal.(func(*QImageEncoderSettings))(NewQImageEncoderSettingsFromPointer(settings))
	}

}

func (ptr *QImageEncoderControl) ConnectSetImageSettings(f func(settings *QImageEncoderSettings)) {
	defer qt.Recovering("connect QImageEncoderControl::setImageSettings")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::setImageSettings", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectSetImageSettings(settings QImageEncoderSettings_ITF) {
	defer qt.Recovering("disconnect QImageEncoderControl::setImageSettings")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::setImageSettings")
	}
}

func (ptr *QImageEncoderControl) SetImageSettings(settings QImageEncoderSettings_ITF) {
	defer qt.Recovering("QImageEncoderControl::setImageSettings")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_SetImageSettings(ptr.Pointer(), PointerFromQImageEncoderSettings(settings))
	}
}

//export callbackQImageEncoderControl_SupportedImageCodecs
func callbackQImageEncoderControl_SupportedImageCodecs(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QImageEncoderControl::supportedImageCodecs")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::supportedImageCodecs"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QImageEncoderControl) ConnectSupportedImageCodecs(f func() []string) {
	defer qt.Recovering("connect QImageEncoderControl::supportedImageCodecs")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::supportedImageCodecs", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectSupportedImageCodecs() {
	defer qt.Recovering("disconnect QImageEncoderControl::supportedImageCodecs")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::supportedImageCodecs")
	}
}

func (ptr *QImageEncoderControl) SupportedImageCodecs() []string {
	defer qt.Recovering("QImageEncoderControl::supportedImageCodecs")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QImageEncoderControl_SupportedImageCodecs(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QImageEncoderControl) DestroyQImageEncoderControl() {
	defer qt.Recovering("QImageEncoderControl::~QImageEncoderControl")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_DestroyQImageEncoderControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQImageEncoderControl_TimerEvent
func callbackQImageEncoderControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QImageEncoderControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQImageEncoderControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QImageEncoderControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QImageEncoderControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::timerEvent", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QImageEncoderControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::timerEvent")
	}
}

func (ptr *QImageEncoderControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QImageEncoderControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QImageEncoderControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QImageEncoderControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQImageEncoderControl_ChildEvent
func callbackQImageEncoderControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QImageEncoderControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQImageEncoderControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QImageEncoderControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QImageEncoderControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::childEvent", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QImageEncoderControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::childEvent")
	}
}

func (ptr *QImageEncoderControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QImageEncoderControl::childEvent")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QImageEncoderControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QImageEncoderControl::childEvent")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQImageEncoderControl_ConnectNotify
func callbackQImageEncoderControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QImageEncoderControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQImageEncoderControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QImageEncoderControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QImageEncoderControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::connectNotify", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QImageEncoderControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::connectNotify")
	}
}

func (ptr *QImageEncoderControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QImageEncoderControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QImageEncoderControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QImageEncoderControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQImageEncoderControl_CustomEvent
func callbackQImageEncoderControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QImageEncoderControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQImageEncoderControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QImageEncoderControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QImageEncoderControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::customEvent", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QImageEncoderControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::customEvent")
	}
}

func (ptr *QImageEncoderControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QImageEncoderControl::customEvent")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QImageEncoderControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QImageEncoderControl::customEvent")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQImageEncoderControl_DeleteLater
func callbackQImageEncoderControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QImageEncoderControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQImageEncoderControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QImageEncoderControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QImageEncoderControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::deleteLater", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QImageEncoderControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::deleteLater")
	}
}

func (ptr *QImageEncoderControl) DeleteLater() {
	defer qt.Recovering("QImageEncoderControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageEncoderControl) DeleteLaterDefault() {
	defer qt.Recovering("QImageEncoderControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQImageEncoderControl_DisconnectNotify
func callbackQImageEncoderControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QImageEncoderControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQImageEncoderControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QImageEncoderControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QImageEncoderControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::disconnectNotify", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QImageEncoderControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::disconnectNotify")
	}
}

func (ptr *QImageEncoderControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QImageEncoderControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QImageEncoderControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QImageEncoderControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QImageEncoderControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQImageEncoderControl_Event
func callbackQImageEncoderControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QImageEncoderControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageEncoderControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QImageEncoderControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QImageEncoderControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::event", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QImageEncoderControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::event")
	}
}

func (ptr *QImageEncoderControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QImageEncoderControl::event")

	if ptr.Pointer() != nil {
		return C.QImageEncoderControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QImageEncoderControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QImageEncoderControl::event")

	if ptr.Pointer() != nil {
		return C.QImageEncoderControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQImageEncoderControl_EventFilter
func callbackQImageEncoderControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QImageEncoderControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageEncoderControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QImageEncoderControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QImageEncoderControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::eventFilter", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QImageEncoderControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::eventFilter")
	}
}

func (ptr *QImageEncoderControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QImageEncoderControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QImageEncoderControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QImageEncoderControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QImageEncoderControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QImageEncoderControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQImageEncoderControl_MetaObject
func callbackQImageEncoderControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QImageEncoderControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageEncoderControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQImageEncoderControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QImageEncoderControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QImageEncoderControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::metaObject", f)
	}
}

func (ptr *QImageEncoderControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QImageEncoderControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageEncoderControl::metaObject")
	}
}

func (ptr *QImageEncoderControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QImageEncoderControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QImageEncoderControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageEncoderControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QImageEncoderControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QImageEncoderControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QImageEncoderSettings struct {
	ptr unsafe.Pointer
}

type QImageEncoderSettings_ITF interface {
	QImageEncoderSettings_PTR() *QImageEncoderSettings
}

func (p *QImageEncoderSettings) QImageEncoderSettings_PTR() *QImageEncoderSettings {
	return p
}

func (p *QImageEncoderSettings) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QImageEncoderSettings) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQImageEncoderSettings(ptr QImageEncoderSettings_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageEncoderSettings_PTR().Pointer()
	}
	return nil
}

func NewQImageEncoderSettingsFromPointer(ptr unsafe.Pointer) *QImageEncoderSettings {
	var n = new(QImageEncoderSettings)
	n.SetPointer(ptr)
	return n
}
func NewQImageEncoderSettings() *QImageEncoderSettings {
	defer qt.Recovering("QImageEncoderSettings::QImageEncoderSettings")

	var tmpValue = NewQImageEncoderSettingsFromPointer(C.QImageEncoderSettings_NewQImageEncoderSettings())
	runtime.SetFinalizer(tmpValue, (*QImageEncoderSettings).DestroyQImageEncoderSettings)
	return tmpValue
}

func NewQImageEncoderSettings2(other QImageEncoderSettings_ITF) *QImageEncoderSettings {
	defer qt.Recovering("QImageEncoderSettings::QImageEncoderSettings")

	var tmpValue = NewQImageEncoderSettingsFromPointer(C.QImageEncoderSettings_NewQImageEncoderSettings2(PointerFromQImageEncoderSettings(other)))
	runtime.SetFinalizer(tmpValue, (*QImageEncoderSettings).DestroyQImageEncoderSettings)
	return tmpValue
}

func (ptr *QImageEncoderSettings) Codec() string {
	defer qt.Recovering("QImageEncoderSettings::codec")

	if ptr.Pointer() != nil {
		return C.GoString(C.QImageEncoderSettings_Codec(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageEncoderSettings) EncodingOption(option string) *core.QVariant {
	defer qt.Recovering("QImageEncoderSettings::encodingOption")

	if ptr.Pointer() != nil {
		var optionC = C.CString(option)
		defer C.free(unsafe.Pointer(optionC))
		var tmpValue = core.NewQVariantFromPointer(C.QImageEncoderSettings_EncodingOption(ptr.Pointer(), optionC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QImageEncoderSettings) IsNull() bool {
	defer qt.Recovering("QImageEncoderSettings::isNull")

	if ptr.Pointer() != nil {
		return C.QImageEncoderSettings_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageEncoderSettings) Quality() QMultimedia__EncodingQuality {
	defer qt.Recovering("QImageEncoderSettings::quality")

	if ptr.Pointer() != nil {
		return QMultimedia__EncodingQuality(C.QImageEncoderSettings_Quality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageEncoderSettings) Resolution() *core.QSize {
	defer qt.Recovering("QImageEncoderSettings::resolution")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QImageEncoderSettings_Resolution(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QImageEncoderSettings) SetCodec(codec string) {
	defer qt.Recovering("QImageEncoderSettings::setCodec")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		C.QImageEncoderSettings_SetCodec(ptr.Pointer(), codecC)
	}
}

func (ptr *QImageEncoderSettings) SetEncodingOption(option string, value core.QVariant_ITF) {
	defer qt.Recovering("QImageEncoderSettings::setEncodingOption")

	if ptr.Pointer() != nil {
		var optionC = C.CString(option)
		defer C.free(unsafe.Pointer(optionC))
		C.QImageEncoderSettings_SetEncodingOption(ptr.Pointer(), optionC, core.PointerFromQVariant(value))
	}
}

func (ptr *QImageEncoderSettings) SetQuality(quality QMultimedia__EncodingQuality) {
	defer qt.Recovering("QImageEncoderSettings::setQuality")

	if ptr.Pointer() != nil {
		C.QImageEncoderSettings_SetQuality(ptr.Pointer(), C.longlong(quality))
	}
}

func (ptr *QImageEncoderSettings) SetResolution(resolution core.QSize_ITF) {
	defer qt.Recovering("QImageEncoderSettings::setResolution")

	if ptr.Pointer() != nil {
		C.QImageEncoderSettings_SetResolution(ptr.Pointer(), core.PointerFromQSize(resolution))
	}
}

func (ptr *QImageEncoderSettings) SetResolution2(width int, height int) {
	defer qt.Recovering("QImageEncoderSettings::setResolution")

	if ptr.Pointer() != nil {
		C.QImageEncoderSettings_SetResolution2(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QImageEncoderSettings) DestroyQImageEncoderSettings() {
	defer qt.Recovering("QImageEncoderSettings::~QImageEncoderSettings")

	if ptr.Pointer() != nil {
		C.QImageEncoderSettings_DestroyQImageEncoderSettings(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QMediaAudioProbeControl struct {
	QMediaControl
}

type QMediaAudioProbeControl_ITF interface {
	QMediaControl_ITF
	QMediaAudioProbeControl_PTR() *QMediaAudioProbeControl
}

func (p *QMediaAudioProbeControl) QMediaAudioProbeControl_PTR() *QMediaAudioProbeControl {
	return p
}

func (p *QMediaAudioProbeControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMediaAudioProbeControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaAudioProbeControl(ptr QMediaAudioProbeControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaAudioProbeControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaAudioProbeControlFromPointer(ptr unsafe.Pointer) *QMediaAudioProbeControl {
	var n = new(QMediaAudioProbeControl)
	n.SetPointer(ptr)
	return n
}
func NewQMediaAudioProbeControl(parent core.QObject_ITF) *QMediaAudioProbeControl {
	defer qt.Recovering("QMediaAudioProbeControl::QMediaAudioProbeControl")

	var tmpValue = NewQMediaAudioProbeControlFromPointer(C.QMediaAudioProbeControl_NewQMediaAudioProbeControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaAudioProbeControl_AudioBufferProbed
func callbackQMediaAudioProbeControl_AudioBufferProbed(ptr unsafe.Pointer, buffer unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAudioProbeControl::audioBufferProbed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::audioBufferProbed"); signal != nil {
		signal.(func(*QAudioBuffer))(NewQAudioBufferFromPointer(buffer))
	}

}

func (ptr *QMediaAudioProbeControl) ConnectAudioBufferProbed(f func(buffer *QAudioBuffer)) {
	defer qt.Recovering("connect QMediaAudioProbeControl::audioBufferProbed")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_ConnectAudioBufferProbed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::audioBufferProbed", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectAudioBufferProbed() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::audioBufferProbed")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_DisconnectAudioBufferProbed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::audioBufferProbed")
	}
}

func (ptr *QMediaAudioProbeControl) AudioBufferProbed(buffer QAudioBuffer_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::audioBufferProbed")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_AudioBufferProbed(ptr.Pointer(), PointerFromQAudioBuffer(buffer))
	}
}

//export callbackQMediaAudioProbeControl_Flush
func callbackQMediaAudioProbeControl_Flush(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAudioProbeControl::flush")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::flush"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaAudioProbeControl) ConnectFlush(f func()) {
	defer qt.Recovering("connect QMediaAudioProbeControl::flush")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_ConnectFlush(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::flush", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectFlush() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::flush")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_DisconnectFlush(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::flush")
	}
}

func (ptr *QMediaAudioProbeControl) Flush() {
	defer qt.Recovering("QMediaAudioProbeControl::flush")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_Flush(ptr.Pointer())
	}
}

func (ptr *QMediaAudioProbeControl) DestroyQMediaAudioProbeControl() {
	defer qt.Recovering("QMediaAudioProbeControl::~QMediaAudioProbeControl")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_DestroyQMediaAudioProbeControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaAudioProbeControl_TimerEvent
func callbackQMediaAudioProbeControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAudioProbeControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaAudioProbeControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaAudioProbeControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaAudioProbeControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::timerEvent", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::timerEvent")
	}
}

func (ptr *QMediaAudioProbeControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaAudioProbeControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaAudioProbeControl_ChildEvent
func callbackQMediaAudioProbeControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAudioProbeControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaAudioProbeControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaAudioProbeControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaAudioProbeControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::childEvent", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::childEvent")
	}
}

func (ptr *QMediaAudioProbeControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaAudioProbeControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaAudioProbeControl_ConnectNotify
func callbackQMediaAudioProbeControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAudioProbeControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaAudioProbeControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaAudioProbeControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaAudioProbeControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::connectNotify", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::connectNotify")
	}
}

func (ptr *QMediaAudioProbeControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaAudioProbeControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaAudioProbeControl_CustomEvent
func callbackQMediaAudioProbeControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAudioProbeControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaAudioProbeControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaAudioProbeControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaAudioProbeControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::customEvent", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::customEvent")
	}
}

func (ptr *QMediaAudioProbeControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaAudioProbeControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaAudioProbeControl_DeleteLater
func callbackQMediaAudioProbeControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAudioProbeControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaAudioProbeControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaAudioProbeControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaAudioProbeControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::deleteLater", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::deleteLater")
	}
}

func (ptr *QMediaAudioProbeControl) DeleteLater() {
	defer qt.Recovering("QMediaAudioProbeControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaAudioProbeControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaAudioProbeControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaAudioProbeControl_DisconnectNotify
func callbackQMediaAudioProbeControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAudioProbeControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaAudioProbeControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaAudioProbeControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaAudioProbeControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::disconnectNotify", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::disconnectNotify")
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaAudioProbeControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaAudioProbeControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaAudioProbeControl_Event
func callbackQMediaAudioProbeControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaAudioProbeControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaAudioProbeControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaAudioProbeControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaAudioProbeControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::event", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::event")
	}
}

func (ptr *QMediaAudioProbeControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaAudioProbeControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaAudioProbeControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaAudioProbeControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaAudioProbeControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaAudioProbeControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaAudioProbeControl_EventFilter
func callbackQMediaAudioProbeControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaAudioProbeControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaAudioProbeControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaAudioProbeControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaAudioProbeControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::eventFilter", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::eventFilter")
	}
}

func (ptr *QMediaAudioProbeControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaAudioProbeControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaAudioProbeControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaAudioProbeControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaAudioProbeControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaAudioProbeControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaAudioProbeControl_MetaObject
func callbackQMediaAudioProbeControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaAudioProbeControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAudioProbeControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaAudioProbeControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaAudioProbeControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaAudioProbeControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::metaObject", f)
	}
}

func (ptr *QMediaAudioProbeControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaAudioProbeControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAudioProbeControl::metaObject")
	}
}

func (ptr *QMediaAudioProbeControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaAudioProbeControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaAudioProbeControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaAudioProbeControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaAudioProbeControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaAudioProbeControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaAvailabilityControl struct {
	QMediaControl
}

type QMediaAvailabilityControl_ITF interface {
	QMediaControl_ITF
	QMediaAvailabilityControl_PTR() *QMediaAvailabilityControl
}

func (p *QMediaAvailabilityControl) QMediaAvailabilityControl_PTR() *QMediaAvailabilityControl {
	return p
}

func (p *QMediaAvailabilityControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMediaAvailabilityControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaAvailabilityControl(ptr QMediaAvailabilityControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaAvailabilityControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaAvailabilityControlFromPointer(ptr unsafe.Pointer) *QMediaAvailabilityControl {
	var n = new(QMediaAvailabilityControl)
	n.SetPointer(ptr)
	return n
}
func NewQMediaAvailabilityControl(parent core.QObject_ITF) *QMediaAvailabilityControl {
	defer qt.Recovering("QMediaAvailabilityControl::QMediaAvailabilityControl")

	var tmpValue = NewQMediaAvailabilityControlFromPointer(C.QMediaAvailabilityControl_NewQMediaAvailabilityControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaAvailabilityControl_Availability
func callbackQMediaAvailabilityControl_Availability(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaAvailabilityControl::availability")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::availability"); signal != nil {
		return C.longlong(signal.(func() QMultimedia__AvailabilityStatus)())
	}

	return C.longlong(0)
}

func (ptr *QMediaAvailabilityControl) ConnectAvailability(f func() QMultimedia__AvailabilityStatus) {
	defer qt.Recovering("connect QMediaAvailabilityControl::availability")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::availability", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectAvailability() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::availability")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::availability")
	}
}

func (ptr *QMediaAvailabilityControl) Availability() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QMediaAvailabilityControl::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QMediaAvailabilityControl_Availability(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaAvailabilityControl_AvailabilityChanged
func callbackQMediaAvailabilityControl_AvailabilityChanged(ptr unsafe.Pointer, availability C.longlong) {
	defer qt.Recovering("callback QMediaAvailabilityControl::availabilityChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::availabilityChanged"); signal != nil {
		signal.(func(QMultimedia__AvailabilityStatus))(QMultimedia__AvailabilityStatus(availability))
	}

}

func (ptr *QMediaAvailabilityControl) ConnectAvailabilityChanged(f func(availability QMultimedia__AvailabilityStatus)) {
	defer qt.Recovering("connect QMediaAvailabilityControl::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_ConnectAvailabilityChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::availabilityChanged", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectAvailabilityChanged() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_DisconnectAvailabilityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::availabilityChanged")
	}
}

func (ptr *QMediaAvailabilityControl) AvailabilityChanged(availability QMultimedia__AvailabilityStatus) {
	defer qt.Recovering("QMediaAvailabilityControl::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_AvailabilityChanged(ptr.Pointer(), C.longlong(availability))
	}
}

func (ptr *QMediaAvailabilityControl) DestroyQMediaAvailabilityControl() {
	defer qt.Recovering("QMediaAvailabilityControl::~QMediaAvailabilityControl")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_DestroyQMediaAvailabilityControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaAvailabilityControl_TimerEvent
func callbackQMediaAvailabilityControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAvailabilityControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaAvailabilityControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaAvailabilityControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaAvailabilityControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::timerEvent", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::timerEvent")
	}
}

func (ptr *QMediaAvailabilityControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaAvailabilityControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaAvailabilityControl_ChildEvent
func callbackQMediaAvailabilityControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAvailabilityControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaAvailabilityControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaAvailabilityControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaAvailabilityControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::childEvent", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::childEvent")
	}
}

func (ptr *QMediaAvailabilityControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaAvailabilityControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaAvailabilityControl_ConnectNotify
func callbackQMediaAvailabilityControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAvailabilityControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaAvailabilityControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaAvailabilityControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaAvailabilityControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::connectNotify", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::connectNotify")
	}
}

func (ptr *QMediaAvailabilityControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaAvailabilityControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaAvailabilityControl_CustomEvent
func callbackQMediaAvailabilityControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAvailabilityControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaAvailabilityControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaAvailabilityControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaAvailabilityControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::customEvent", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::customEvent")
	}
}

func (ptr *QMediaAvailabilityControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaAvailabilityControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaAvailabilityControl_DeleteLater
func callbackQMediaAvailabilityControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAvailabilityControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaAvailabilityControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaAvailabilityControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaAvailabilityControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::deleteLater", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::deleteLater")
	}
}

func (ptr *QMediaAvailabilityControl) DeleteLater() {
	defer qt.Recovering("QMediaAvailabilityControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaAvailabilityControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaAvailabilityControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaAvailabilityControl_DisconnectNotify
func callbackQMediaAvailabilityControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaAvailabilityControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaAvailabilityControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaAvailabilityControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaAvailabilityControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::disconnectNotify", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::disconnectNotify")
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaAvailabilityControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaAvailabilityControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaAvailabilityControl_Event
func callbackQMediaAvailabilityControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaAvailabilityControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaAvailabilityControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaAvailabilityControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaAvailabilityControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::event", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::event")
	}
}

func (ptr *QMediaAvailabilityControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaAvailabilityControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaAvailabilityControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaAvailabilityControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaAvailabilityControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaAvailabilityControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaAvailabilityControl_EventFilter
func callbackQMediaAvailabilityControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaAvailabilityControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaAvailabilityControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaAvailabilityControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaAvailabilityControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::eventFilter", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::eventFilter")
	}
}

func (ptr *QMediaAvailabilityControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaAvailabilityControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaAvailabilityControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaAvailabilityControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaAvailabilityControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaAvailabilityControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaAvailabilityControl_MetaObject
func callbackQMediaAvailabilityControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaAvailabilityControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaAvailabilityControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaAvailabilityControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaAvailabilityControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaAvailabilityControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::metaObject", f)
	}
}

func (ptr *QMediaAvailabilityControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaAvailabilityControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaAvailabilityControl::metaObject")
	}
}

func (ptr *QMediaAvailabilityControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaAvailabilityControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaAvailabilityControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaAvailabilityControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaAvailabilityControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaAvailabilityControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaBindableInterface struct {
	ptr unsafe.Pointer
}

type QMediaBindableInterface_ITF interface {
	QMediaBindableInterface_PTR() *QMediaBindableInterface
}

func (p *QMediaBindableInterface) QMediaBindableInterface_PTR() *QMediaBindableInterface {
	return p
}

func (p *QMediaBindableInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaBindableInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaBindableInterface(ptr QMediaBindableInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaBindableInterface_PTR().Pointer()
	}
	return nil
}

func NewQMediaBindableInterfaceFromPointer(ptr unsafe.Pointer) *QMediaBindableInterface {
	var n = new(QMediaBindableInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQMediaBindableInterface_MediaObject
func callbackQMediaBindableInterface_MediaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaBindableInterface::mediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaBindableInterface::mediaObject"); signal != nil {
		return PointerFromQMediaObject(signal.(func() *QMediaObject)())
	}

	return PointerFromQMediaObject(nil)
}

func (ptr *QMediaBindableInterface) ConnectMediaObject(f func() *QMediaObject) {
	defer qt.Recovering("connect QMediaBindableInterface::mediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaBindableInterface::mediaObject", f)
	}
}

func (ptr *QMediaBindableInterface) DisconnectMediaObject() {
	defer qt.Recovering("disconnect QMediaBindableInterface::mediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaBindableInterface::mediaObject")
	}
}

func (ptr *QMediaBindableInterface) MediaObject() *QMediaObject {
	defer qt.Recovering("QMediaBindableInterface::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QMediaBindableInterface_MediaObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQMediaBindableInterface_SetMediaObject
func callbackQMediaBindableInterface_SetMediaObject(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaBindableInterface::setMediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaBindableInterface::setMediaObject"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMediaObject) bool)(NewQMediaObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMediaBindableInterface) ConnectSetMediaObject(f func(object *QMediaObject) bool) {
	defer qt.Recovering("connect QMediaBindableInterface::setMediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaBindableInterface::setMediaObject", f)
	}
}

func (ptr *QMediaBindableInterface) DisconnectSetMediaObject(object QMediaObject_ITF) {
	defer qt.Recovering("disconnect QMediaBindableInterface::setMediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaBindableInterface::setMediaObject")
	}
}

func (ptr *QMediaBindableInterface) SetMediaObject(object QMediaObject_ITF) bool {
	defer qt.Recovering("QMediaBindableInterface::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QMediaBindableInterface_SetMediaObject(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

func (ptr *QMediaBindableInterface) DestroyQMediaBindableInterface() {
	defer qt.Recovering("QMediaBindableInterface::~QMediaBindableInterface")

	if ptr.Pointer() != nil {
		C.QMediaBindableInterface_DestroyQMediaBindableInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QMediaContainerControl struct {
	QMediaControl
}

type QMediaContainerControl_ITF interface {
	QMediaControl_ITF
	QMediaContainerControl_PTR() *QMediaContainerControl
}

func (p *QMediaContainerControl) QMediaContainerControl_PTR() *QMediaContainerControl {
	return p
}

func (p *QMediaContainerControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMediaContainerControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaContainerControl(ptr QMediaContainerControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaContainerControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaContainerControlFromPointer(ptr unsafe.Pointer) *QMediaContainerControl {
	var n = new(QMediaContainerControl)
	n.SetPointer(ptr)
	return n
}
func NewQMediaContainerControl(parent core.QObject_ITF) *QMediaContainerControl {
	defer qt.Recovering("QMediaContainerControl::QMediaContainerControl")

	var tmpValue = NewQMediaContainerControlFromPointer(C.QMediaContainerControl_NewQMediaContainerControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaContainerControl_ContainerDescription
func callbackQMediaContainerControl_ContainerDescription(ptr unsafe.Pointer, format *C.char) *C.char {
	defer qt.Recovering("callback QMediaContainerControl::containerDescription")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::containerDescription"); signal != nil {
		return C.CString(signal.(func(string) string)(C.GoString(format)))
	}

	return C.CString("")
}

func (ptr *QMediaContainerControl) ConnectContainerDescription(f func(format string) string) {
	defer qt.Recovering("connect QMediaContainerControl::containerDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::containerDescription", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectContainerDescription(format string) {
	defer qt.Recovering("disconnect QMediaContainerControl::containerDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::containerDescription")
	}
}

func (ptr *QMediaContainerControl) ContainerDescription(format string) string {
	defer qt.Recovering("QMediaContainerControl::containerDescription")

	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.GoString(C.QMediaContainerControl_ContainerDescription(ptr.Pointer(), formatC))
	}
	return ""
}

//export callbackQMediaContainerControl_ContainerFormat
func callbackQMediaContainerControl_ContainerFormat(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QMediaContainerControl::containerFormat")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::containerFormat"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QMediaContainerControl) ConnectContainerFormat(f func() string) {
	defer qt.Recovering("connect QMediaContainerControl::containerFormat")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::containerFormat", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectContainerFormat() {
	defer qt.Recovering("disconnect QMediaContainerControl::containerFormat")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::containerFormat")
	}
}

func (ptr *QMediaContainerControl) ContainerFormat() string {
	defer qt.Recovering("QMediaContainerControl::containerFormat")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMediaContainerControl_ContainerFormat(ptr.Pointer()))
	}
	return ""
}

//export callbackQMediaContainerControl_SetContainerFormat
func callbackQMediaContainerControl_SetContainerFormat(ptr unsafe.Pointer, format *C.char) {
	defer qt.Recovering("callback QMediaContainerControl::setContainerFormat")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::setContainerFormat"); signal != nil {
		signal.(func(string))(C.GoString(format))
	}

}

func (ptr *QMediaContainerControl) ConnectSetContainerFormat(f func(format string)) {
	defer qt.Recovering("connect QMediaContainerControl::setContainerFormat")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::setContainerFormat", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectSetContainerFormat(format string) {
	defer qt.Recovering("disconnect QMediaContainerControl::setContainerFormat")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::setContainerFormat")
	}
}

func (ptr *QMediaContainerControl) SetContainerFormat(format string) {
	defer qt.Recovering("QMediaContainerControl::setContainerFormat")

	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		C.QMediaContainerControl_SetContainerFormat(ptr.Pointer(), formatC)
	}
}

//export callbackQMediaContainerControl_SupportedContainers
func callbackQMediaContainerControl_SupportedContainers(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QMediaContainerControl::supportedContainers")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::supportedContainers"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QMediaContainerControl) ConnectSupportedContainers(f func() []string) {
	defer qt.Recovering("connect QMediaContainerControl::supportedContainers")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::supportedContainers", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectSupportedContainers() {
	defer qt.Recovering("disconnect QMediaContainerControl::supportedContainers")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::supportedContainers")
	}
}

func (ptr *QMediaContainerControl) SupportedContainers() []string {
	defer qt.Recovering("QMediaContainerControl::supportedContainers")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QMediaContainerControl_SupportedContainers(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMediaContainerControl) DestroyQMediaContainerControl() {
	defer qt.Recovering("QMediaContainerControl::~QMediaContainerControl")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_DestroyQMediaContainerControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaContainerControl_TimerEvent
func callbackQMediaContainerControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaContainerControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaContainerControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaContainerControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaContainerControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::timerEvent", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaContainerControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::timerEvent")
	}
}

func (ptr *QMediaContainerControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaContainerControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaContainerControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaContainerControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaContainerControl_ChildEvent
func callbackQMediaContainerControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaContainerControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaContainerControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaContainerControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaContainerControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::childEvent", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaContainerControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::childEvent")
	}
}

func (ptr *QMediaContainerControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaContainerControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaContainerControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaContainerControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaContainerControl_ConnectNotify
func callbackQMediaContainerControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaContainerControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaContainerControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaContainerControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaContainerControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::connectNotify", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaContainerControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::connectNotify")
	}
}

func (ptr *QMediaContainerControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaContainerControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaContainerControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaContainerControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaContainerControl_CustomEvent
func callbackQMediaContainerControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaContainerControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaContainerControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaContainerControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaContainerControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::customEvent", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaContainerControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::customEvent")
	}
}

func (ptr *QMediaContainerControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaContainerControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaContainerControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaContainerControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaContainerControl_DeleteLater
func callbackQMediaContainerControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaContainerControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaContainerControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaContainerControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaContainerControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::deleteLater", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaContainerControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::deleteLater")
	}
}

func (ptr *QMediaContainerControl) DeleteLater() {
	defer qt.Recovering("QMediaContainerControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaContainerControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaContainerControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaContainerControl_DisconnectNotify
func callbackQMediaContainerControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaContainerControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaContainerControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaContainerControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaContainerControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::disconnectNotify", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaContainerControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::disconnectNotify")
	}
}

func (ptr *QMediaContainerControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaContainerControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaContainerControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaContainerControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaContainerControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaContainerControl_Event
func callbackQMediaContainerControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaContainerControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaContainerControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaContainerControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaContainerControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::event", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaContainerControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::event")
	}
}

func (ptr *QMediaContainerControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaContainerControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaContainerControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaContainerControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaContainerControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaContainerControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaContainerControl_EventFilter
func callbackQMediaContainerControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaContainerControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaContainerControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaContainerControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaContainerControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::eventFilter", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaContainerControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::eventFilter")
	}
}

func (ptr *QMediaContainerControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaContainerControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaContainerControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaContainerControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaContainerControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaContainerControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaContainerControl_MetaObject
func callbackQMediaContainerControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaContainerControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaContainerControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaContainerControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaContainerControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaContainerControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::metaObject", f)
	}
}

func (ptr *QMediaContainerControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaContainerControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaContainerControl::metaObject")
	}
}

func (ptr *QMediaContainerControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaContainerControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaContainerControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaContainerControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaContainerControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaContainerControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaContent struct {
	ptr unsafe.Pointer
}

type QMediaContent_ITF interface {
	QMediaContent_PTR() *QMediaContent
}

func (p *QMediaContent) QMediaContent_PTR() *QMediaContent {
	return p
}

func (p *QMediaContent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaContent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaContent(ptr QMediaContent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaContent_PTR().Pointer()
	}
	return nil
}

func NewQMediaContentFromPointer(ptr unsafe.Pointer) *QMediaContent {
	var n = new(QMediaContent)
	n.SetPointer(ptr)
	return n
}
func NewQMediaContent() *QMediaContent {
	defer qt.Recovering("QMediaContent::QMediaContent")

	var tmpValue = NewQMediaContentFromPointer(C.QMediaContent_NewQMediaContent())
	runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
	return tmpValue
}

func NewQMediaContent7(playlist QMediaPlaylist_ITF, contentUrl core.QUrl_ITF, takeOwnership bool) *QMediaContent {
	defer qt.Recovering("QMediaContent::QMediaContent")

	var tmpValue = NewQMediaContentFromPointer(C.QMediaContent_NewQMediaContent7(PointerFromQMediaPlaylist(playlist), core.PointerFromQUrl(contentUrl), C.char(int8(qt.GoBoolToInt(takeOwnership)))))
	runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
	return tmpValue
}

func NewQMediaContent6(other QMediaContent_ITF) *QMediaContent {
	defer qt.Recovering("QMediaContent::QMediaContent")

	var tmpValue = NewQMediaContentFromPointer(C.QMediaContent_NewQMediaContent6(PointerFromQMediaContent(other)))
	runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
	return tmpValue
}

func NewQMediaContent4(resource QMediaResource_ITF) *QMediaContent {
	defer qt.Recovering("QMediaContent::QMediaContent")

	var tmpValue = NewQMediaContentFromPointer(C.QMediaContent_NewQMediaContent4(PointerFromQMediaResource(resource)))
	runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
	return tmpValue
}

func NewQMediaContent3(request network.QNetworkRequest_ITF) *QMediaContent {
	defer qt.Recovering("QMediaContent::QMediaContent")

	var tmpValue = NewQMediaContentFromPointer(C.QMediaContent_NewQMediaContent3(network.PointerFromQNetworkRequest(request)))
	runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
	return tmpValue
}

func NewQMediaContent2(url core.QUrl_ITF) *QMediaContent {
	defer qt.Recovering("QMediaContent::QMediaContent")

	var tmpValue = NewQMediaContentFromPointer(C.QMediaContent_NewQMediaContent2(core.PointerFromQUrl(url)))
	runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
	return tmpValue
}

func (ptr *QMediaContent) CanonicalRequest() *network.QNetworkRequest {
	defer qt.Recovering("QMediaContent::canonicalRequest")

	if ptr.Pointer() != nil {
		var tmpValue = network.NewQNetworkRequestFromPointer(C.QMediaContent_CanonicalRequest(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*network.QNetworkRequest).DestroyQNetworkRequest)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaContent) CanonicalResource() *QMediaResource {
	defer qt.Recovering("QMediaContent::canonicalResource")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaResourceFromPointer(C.QMediaContent_CanonicalResource(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMediaResource).DestroyQMediaResource)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaContent) CanonicalUrl() *core.QUrl {
	defer qt.Recovering("QMediaContent::canonicalUrl")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QMediaContent_CanonicalUrl(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaContent) IsNull() bool {
	defer qt.Recovering("QMediaContent::isNull")

	if ptr.Pointer() != nil {
		return C.QMediaContent_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaContent) Playlist() *QMediaPlaylist {
	defer qt.Recovering("QMediaContent::playlist")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaPlaylistFromPointer(C.QMediaContent_Playlist(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMediaContent) DestroyQMediaContent() {
	defer qt.Recovering("QMediaContent::~QMediaContent")

	if ptr.Pointer() != nil {
		C.QMediaContent_DestroyQMediaContent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QMediaControl struct {
	core.QObject
}

type QMediaControl_ITF interface {
	core.QObject_ITF
	QMediaControl_PTR() *QMediaControl
}

func (p *QMediaControl) QMediaControl_PTR() *QMediaControl {
	return p
}

func (p *QMediaControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QMediaControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaControl(ptr QMediaControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaControlFromPointer(ptr unsafe.Pointer) *QMediaControl {
	var n = new(QMediaControl)
	n.SetPointer(ptr)
	return n
}
func NewQMediaControl(parent core.QObject_ITF) *QMediaControl {
	defer qt.Recovering("QMediaControl::QMediaControl")

	var tmpValue = NewQMediaControlFromPointer(C.QMediaControl_NewQMediaControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QMediaControl) DestroyQMediaControl() {
	defer qt.Recovering("QMediaControl::~QMediaControl")

	if ptr.Pointer() != nil {
		C.QMediaControl_DestroyQMediaControl(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaControl_TimerEvent
func callbackQMediaControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::timerEvent", f)
	}
}

func (ptr *QMediaControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::timerEvent")
	}
}

func (ptr *QMediaControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaControl_ChildEvent
func callbackQMediaControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::childEvent", f)
	}
}

func (ptr *QMediaControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::childEvent")
	}
}

func (ptr *QMediaControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaControl_ConnectNotify
func callbackQMediaControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::connectNotify", f)
	}
}

func (ptr *QMediaControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::connectNotify")
	}
}

func (ptr *QMediaControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaControl_CustomEvent
func callbackQMediaControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::customEvent", f)
	}
}

func (ptr *QMediaControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::customEvent")
	}
}

func (ptr *QMediaControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaControl_DeleteLater
func callbackQMediaControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::deleteLater", f)
	}
}

func (ptr *QMediaControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::deleteLater")
	}
}

func (ptr *QMediaControl) DeleteLater() {
	defer qt.Recovering("QMediaControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaControl_DeleteLater(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaControl_DeleteLaterDefault(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaControl_DisconnectNotify
func callbackQMediaControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::disconnectNotify", f)
	}
}

func (ptr *QMediaControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::disconnectNotify")
	}
}

func (ptr *QMediaControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaControl_Event
func callbackQMediaControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::event", f)
	}
}

func (ptr *QMediaControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::event")
	}
}

func (ptr *QMediaControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaControl_EventFilter
func callbackQMediaControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::eventFilter", f)
	}
}

func (ptr *QMediaControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::eventFilter")
	}
}

func (ptr *QMediaControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaControl_MetaObject
func callbackQMediaControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::metaObject", f)
	}
}

func (ptr *QMediaControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaControl::metaObject")
	}
}

func (ptr *QMediaControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaGaplessPlaybackControl struct {
	QMediaControl
}

type QMediaGaplessPlaybackControl_ITF interface {
	QMediaControl_ITF
	QMediaGaplessPlaybackControl_PTR() *QMediaGaplessPlaybackControl
}

func (p *QMediaGaplessPlaybackControl) QMediaGaplessPlaybackControl_PTR() *QMediaGaplessPlaybackControl {
	return p
}

func (p *QMediaGaplessPlaybackControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMediaGaplessPlaybackControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaGaplessPlaybackControl(ptr QMediaGaplessPlaybackControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaGaplessPlaybackControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaGaplessPlaybackControlFromPointer(ptr unsafe.Pointer) *QMediaGaplessPlaybackControl {
	var n = new(QMediaGaplessPlaybackControl)
	n.SetPointer(ptr)
	return n
}
func NewQMediaGaplessPlaybackControl(parent core.QObject_ITF) *QMediaGaplessPlaybackControl {
	defer qt.Recovering("QMediaGaplessPlaybackControl::QMediaGaplessPlaybackControl")

	var tmpValue = NewQMediaGaplessPlaybackControlFromPointer(C.QMediaGaplessPlaybackControl_NewQMediaGaplessPlaybackControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaGaplessPlaybackControl_AdvancedToNextMedia
func callbackQMediaGaplessPlaybackControl_AdvancedToNextMedia(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::advancedToNextMedia")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::advancedToNextMedia"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaGaplessPlaybackControl) ConnectAdvancedToNextMedia(f func()) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::advancedToNextMedia")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_ConnectAdvancedToNextMedia(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::advancedToNextMedia", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectAdvancedToNextMedia() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::advancedToNextMedia")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_DisconnectAdvancedToNextMedia(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::advancedToNextMedia")
	}
}

func (ptr *QMediaGaplessPlaybackControl) AdvancedToNextMedia() {
	defer qt.Recovering("QMediaGaplessPlaybackControl::advancedToNextMedia")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_AdvancedToNextMedia(ptr.Pointer())
	}
}

//export callbackQMediaGaplessPlaybackControl_CrossfadeTime
func callbackQMediaGaplessPlaybackControl_CrossfadeTime(ptr unsafe.Pointer) C.double {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::crossfadeTime")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::crossfadeTime"); signal != nil {
		return C.double(signal.(func() float64)())
	}

	return C.double(0)
}

func (ptr *QMediaGaplessPlaybackControl) ConnectCrossfadeTime(f func() float64) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::crossfadeTime")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::crossfadeTime", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectCrossfadeTime() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::crossfadeTime")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::crossfadeTime")
	}
}

func (ptr *QMediaGaplessPlaybackControl) CrossfadeTime() float64 {
	defer qt.Recovering("QMediaGaplessPlaybackControl::crossfadeTime")

	if ptr.Pointer() != nil {
		return float64(C.QMediaGaplessPlaybackControl_CrossfadeTime(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaGaplessPlaybackControl_CrossfadeTimeChanged
func callbackQMediaGaplessPlaybackControl_CrossfadeTimeChanged(ptr unsafe.Pointer, crossfadeTime C.double) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::crossfadeTimeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::crossfadeTimeChanged"); signal != nil {
		signal.(func(float64))(float64(crossfadeTime))
	}

}

func (ptr *QMediaGaplessPlaybackControl) ConnectCrossfadeTimeChanged(f func(crossfadeTime float64)) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::crossfadeTimeChanged")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_ConnectCrossfadeTimeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::crossfadeTimeChanged", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectCrossfadeTimeChanged() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::crossfadeTimeChanged")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_DisconnectCrossfadeTimeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::crossfadeTimeChanged")
	}
}

func (ptr *QMediaGaplessPlaybackControl) CrossfadeTimeChanged(crossfadeTime float64) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::crossfadeTimeChanged")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_CrossfadeTimeChanged(ptr.Pointer(), C.double(crossfadeTime))
	}
}

//export callbackQMediaGaplessPlaybackControl_IsCrossfadeSupported
func callbackQMediaGaplessPlaybackControl_IsCrossfadeSupported(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::isCrossfadeSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::isCrossfadeSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMediaGaplessPlaybackControl) ConnectIsCrossfadeSupported(f func() bool) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::isCrossfadeSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::isCrossfadeSupported", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectIsCrossfadeSupported() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::isCrossfadeSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::isCrossfadeSupported")
	}
}

func (ptr *QMediaGaplessPlaybackControl) IsCrossfadeSupported() bool {
	defer qt.Recovering("QMediaGaplessPlaybackControl::isCrossfadeSupported")

	if ptr.Pointer() != nil {
		return C.QMediaGaplessPlaybackControl_IsCrossfadeSupported(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMediaGaplessPlaybackControl_NextMedia
func callbackQMediaGaplessPlaybackControl_NextMedia(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::nextMedia")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::nextMedia"); signal != nil {
		return PointerFromQMediaContent(signal.(func() *QMediaContent)())
	}

	return PointerFromQMediaContent(nil)
}

func (ptr *QMediaGaplessPlaybackControl) ConnectNextMedia(f func() *QMediaContent) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::nextMedia")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::nextMedia", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectNextMedia() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::nextMedia")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::nextMedia")
	}
}

func (ptr *QMediaGaplessPlaybackControl) NextMedia() *QMediaContent {
	defer qt.Recovering("QMediaGaplessPlaybackControl::nextMedia")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaContentFromPointer(C.QMediaGaplessPlaybackControl_NextMedia(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
		return tmpValue
	}
	return nil
}

//export callbackQMediaGaplessPlaybackControl_NextMediaChanged
func callbackQMediaGaplessPlaybackControl_NextMediaChanged(ptr unsafe.Pointer, media unsafe.Pointer) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::nextMediaChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::nextMediaChanged"); signal != nil {
		signal.(func(*QMediaContent))(NewQMediaContentFromPointer(media))
	}

}

func (ptr *QMediaGaplessPlaybackControl) ConnectNextMediaChanged(f func(media *QMediaContent)) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::nextMediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_ConnectNextMediaChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::nextMediaChanged", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectNextMediaChanged() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::nextMediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_DisconnectNextMediaChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::nextMediaChanged")
	}
}

func (ptr *QMediaGaplessPlaybackControl) NextMediaChanged(media QMediaContent_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::nextMediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_NextMediaChanged(ptr.Pointer(), PointerFromQMediaContent(media))
	}
}

//export callbackQMediaGaplessPlaybackControl_SetCrossfadeTime
func callbackQMediaGaplessPlaybackControl_SetCrossfadeTime(ptr unsafe.Pointer, crossfadeTime C.double) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::setCrossfadeTime")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::setCrossfadeTime"); signal != nil {
		signal.(func(float64))(float64(crossfadeTime))
	}

}

func (ptr *QMediaGaplessPlaybackControl) ConnectSetCrossfadeTime(f func(crossfadeTime float64)) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::setCrossfadeTime")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::setCrossfadeTime", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectSetCrossfadeTime(crossfadeTime float64) {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::setCrossfadeTime")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::setCrossfadeTime")
	}
}

func (ptr *QMediaGaplessPlaybackControl) SetCrossfadeTime(crossfadeTime float64) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::setCrossfadeTime")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_SetCrossfadeTime(ptr.Pointer(), C.double(crossfadeTime))
	}
}

//export callbackQMediaGaplessPlaybackControl_SetNextMedia
func callbackQMediaGaplessPlaybackControl_SetNextMedia(ptr unsafe.Pointer, media unsafe.Pointer) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::setNextMedia")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::setNextMedia"); signal != nil {
		signal.(func(*QMediaContent))(NewQMediaContentFromPointer(media))
	}

}

func (ptr *QMediaGaplessPlaybackControl) ConnectSetNextMedia(f func(media *QMediaContent)) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::setNextMedia")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::setNextMedia", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectSetNextMedia(media QMediaContent_ITF) {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::setNextMedia")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::setNextMedia")
	}
}

func (ptr *QMediaGaplessPlaybackControl) SetNextMedia(media QMediaContent_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::setNextMedia")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_SetNextMedia(ptr.Pointer(), PointerFromQMediaContent(media))
	}
}

func (ptr *QMediaGaplessPlaybackControl) DestroyQMediaGaplessPlaybackControl() {
	defer qt.Recovering("QMediaGaplessPlaybackControl::~QMediaGaplessPlaybackControl")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_DestroyQMediaGaplessPlaybackControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaGaplessPlaybackControl_TimerEvent
func callbackQMediaGaplessPlaybackControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaGaplessPlaybackControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaGaplessPlaybackControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::timerEvent", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::timerEvent")
	}
}

func (ptr *QMediaGaplessPlaybackControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaGaplessPlaybackControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaGaplessPlaybackControl_ChildEvent
func callbackQMediaGaplessPlaybackControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaGaplessPlaybackControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaGaplessPlaybackControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::childEvent", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::childEvent")
	}
}

func (ptr *QMediaGaplessPlaybackControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaGaplessPlaybackControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaGaplessPlaybackControl_ConnectNotify
func callbackQMediaGaplessPlaybackControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaGaplessPlaybackControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaGaplessPlaybackControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::connectNotify", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::connectNotify")
	}
}

func (ptr *QMediaGaplessPlaybackControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaGaplessPlaybackControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaGaplessPlaybackControl_CustomEvent
func callbackQMediaGaplessPlaybackControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaGaplessPlaybackControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaGaplessPlaybackControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::customEvent", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::customEvent")
	}
}

func (ptr *QMediaGaplessPlaybackControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaGaplessPlaybackControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaGaplessPlaybackControl_DeleteLater
func callbackQMediaGaplessPlaybackControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaGaplessPlaybackControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaGaplessPlaybackControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::deleteLater", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::deleteLater")
	}
}

func (ptr *QMediaGaplessPlaybackControl) DeleteLater() {
	defer qt.Recovering("QMediaGaplessPlaybackControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaGaplessPlaybackControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaGaplessPlaybackControl_DisconnectNotify
func callbackQMediaGaplessPlaybackControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaGaplessPlaybackControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaGaplessPlaybackControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::disconnectNotify", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::disconnectNotify")
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaGaplessPlaybackControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaGaplessPlaybackControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaGaplessPlaybackControl_Event
func callbackQMediaGaplessPlaybackControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaGaplessPlaybackControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaGaplessPlaybackControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::event", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::event")
	}
}

func (ptr *QMediaGaplessPlaybackControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaGaplessPlaybackControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaGaplessPlaybackControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaGaplessPlaybackControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaGaplessPlaybackControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaGaplessPlaybackControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaGaplessPlaybackControl_EventFilter
func callbackQMediaGaplessPlaybackControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaGaplessPlaybackControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaGaplessPlaybackControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::eventFilter", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::eventFilter")
	}
}

func (ptr *QMediaGaplessPlaybackControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaGaplessPlaybackControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaGaplessPlaybackControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaGaplessPlaybackControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaGaplessPlaybackControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaGaplessPlaybackControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaGaplessPlaybackControl_MetaObject
func callbackQMediaGaplessPlaybackControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaGaplessPlaybackControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaGaplessPlaybackControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaGaplessPlaybackControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaGaplessPlaybackControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaGaplessPlaybackControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::metaObject", f)
	}
}

func (ptr *QMediaGaplessPlaybackControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaGaplessPlaybackControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaGaplessPlaybackControl::metaObject")
	}
}

func (ptr *QMediaGaplessPlaybackControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaGaplessPlaybackControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaGaplessPlaybackControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaGaplessPlaybackControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaGaplessPlaybackControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaGaplessPlaybackControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaNetworkAccessControl struct {
	QMediaControl
}

type QMediaNetworkAccessControl_ITF interface {
	QMediaControl_ITF
	QMediaNetworkAccessControl_PTR() *QMediaNetworkAccessControl
}

func (p *QMediaNetworkAccessControl) QMediaNetworkAccessControl_PTR() *QMediaNetworkAccessControl {
	return p
}

func (p *QMediaNetworkAccessControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMediaNetworkAccessControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaNetworkAccessControl(ptr QMediaNetworkAccessControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaNetworkAccessControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaNetworkAccessControlFromPointer(ptr unsafe.Pointer) *QMediaNetworkAccessControl {
	var n = new(QMediaNetworkAccessControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQMediaNetworkAccessControl_ConfigurationChanged
func callbackQMediaNetworkAccessControl_ConfigurationChanged(ptr unsafe.Pointer, configuration unsafe.Pointer) {
	defer qt.Recovering("callback QMediaNetworkAccessControl::configurationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::configurationChanged"); signal != nil {
		signal.(func(*network.QNetworkConfiguration))(network.NewQNetworkConfigurationFromPointer(configuration))
	}

}

func (ptr *QMediaNetworkAccessControl) ConnectConfigurationChanged(f func(configuration *network.QNetworkConfiguration)) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::configurationChanged")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_ConnectConfigurationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::configurationChanged", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectConfigurationChanged() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::configurationChanged")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_DisconnectConfigurationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::configurationChanged")
	}
}

func (ptr *QMediaNetworkAccessControl) ConfigurationChanged(configuration network.QNetworkConfiguration_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::configurationChanged")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_ConfigurationChanged(ptr.Pointer(), network.PointerFromQNetworkConfiguration(configuration))
	}
}

//export callbackQMediaNetworkAccessControl_CurrentConfiguration
func callbackQMediaNetworkAccessControl_CurrentConfiguration(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaNetworkAccessControl::currentConfiguration")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::currentConfiguration"); signal != nil {
		return network.PointerFromQNetworkConfiguration(signal.(func() *network.QNetworkConfiguration)())
	}

	return network.PointerFromQNetworkConfiguration(nil)
}

func (ptr *QMediaNetworkAccessControl) ConnectCurrentConfiguration(f func() *network.QNetworkConfiguration) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::currentConfiguration")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::currentConfiguration", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectCurrentConfiguration() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::currentConfiguration")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::currentConfiguration")
	}
}

func (ptr *QMediaNetworkAccessControl) CurrentConfiguration() *network.QNetworkConfiguration {
	defer qt.Recovering("QMediaNetworkAccessControl::currentConfiguration")

	if ptr.Pointer() != nil {
		var tmpValue = network.NewQNetworkConfigurationFromPointer(C.QMediaNetworkAccessControl_CurrentConfiguration(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*network.QNetworkConfiguration).DestroyQNetworkConfiguration)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaNetworkAccessControl) DestroyQMediaNetworkAccessControl() {
	defer qt.Recovering("QMediaNetworkAccessControl::~QMediaNetworkAccessControl")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_DestroyQMediaNetworkAccessControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaNetworkAccessControl_TimerEvent
func callbackQMediaNetworkAccessControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaNetworkAccessControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaNetworkAccessControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaNetworkAccessControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::timerEvent", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::timerEvent")
	}
}

func (ptr *QMediaNetworkAccessControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaNetworkAccessControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaNetworkAccessControl_ChildEvent
func callbackQMediaNetworkAccessControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaNetworkAccessControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaNetworkAccessControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaNetworkAccessControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::childEvent", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::childEvent")
	}
}

func (ptr *QMediaNetworkAccessControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaNetworkAccessControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaNetworkAccessControl_ConnectNotify
func callbackQMediaNetworkAccessControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaNetworkAccessControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaNetworkAccessControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaNetworkAccessControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::connectNotify", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::connectNotify")
	}
}

func (ptr *QMediaNetworkAccessControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaNetworkAccessControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaNetworkAccessControl_CustomEvent
func callbackQMediaNetworkAccessControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaNetworkAccessControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaNetworkAccessControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaNetworkAccessControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::customEvent", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::customEvent")
	}
}

func (ptr *QMediaNetworkAccessControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaNetworkAccessControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaNetworkAccessControl_DeleteLater
func callbackQMediaNetworkAccessControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaNetworkAccessControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaNetworkAccessControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaNetworkAccessControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::deleteLater", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::deleteLater")
	}
}

func (ptr *QMediaNetworkAccessControl) DeleteLater() {
	defer qt.Recovering("QMediaNetworkAccessControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaNetworkAccessControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaNetworkAccessControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaNetworkAccessControl_DisconnectNotify
func callbackQMediaNetworkAccessControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaNetworkAccessControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaNetworkAccessControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaNetworkAccessControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::disconnectNotify", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::disconnectNotify")
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaNetworkAccessControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaNetworkAccessControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaNetworkAccessControl_Event
func callbackQMediaNetworkAccessControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaNetworkAccessControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaNetworkAccessControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaNetworkAccessControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::event", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::event")
	}
}

func (ptr *QMediaNetworkAccessControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaNetworkAccessControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaNetworkAccessControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaNetworkAccessControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaNetworkAccessControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaNetworkAccessControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaNetworkAccessControl_EventFilter
func callbackQMediaNetworkAccessControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaNetworkAccessControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaNetworkAccessControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaNetworkAccessControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::eventFilter", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::eventFilter")
	}
}

func (ptr *QMediaNetworkAccessControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaNetworkAccessControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaNetworkAccessControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaNetworkAccessControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaNetworkAccessControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaNetworkAccessControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaNetworkAccessControl_MetaObject
func callbackQMediaNetworkAccessControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaNetworkAccessControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaNetworkAccessControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaNetworkAccessControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaNetworkAccessControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaNetworkAccessControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::metaObject", f)
	}
}

func (ptr *QMediaNetworkAccessControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaNetworkAccessControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaNetworkAccessControl::metaObject")
	}
}

func (ptr *QMediaNetworkAccessControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaNetworkAccessControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaNetworkAccessControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaNetworkAccessControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaNetworkAccessControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaNetworkAccessControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaObject struct {
	core.QObject
}

type QMediaObject_ITF interface {
	core.QObject_ITF
	QMediaObject_PTR() *QMediaObject
}

func (p *QMediaObject) QMediaObject_PTR() *QMediaObject {
	return p
}

func (p *QMediaObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QMediaObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaObject(ptr QMediaObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaObject_PTR().Pointer()
	}
	return nil
}

func NewQMediaObjectFromPointer(ptr unsafe.Pointer) *QMediaObject {
	var n = new(QMediaObject)
	n.SetPointer(ptr)
	return n
}
func (ptr *QMediaObject) NotifyInterval() int {
	defer qt.Recovering("QMediaObject::notifyInterval")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaObject_NotifyInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMediaObject) SetNotifyInterval(milliSeconds int) {
	defer qt.Recovering("QMediaObject::setNotifyInterval")

	if ptr.Pointer() != nil {
		C.QMediaObject_SetNotifyInterval(ptr.Pointer(), C.int(int32(milliSeconds)))
	}
}

func NewQMediaObject(parent core.QObject_ITF, service QMediaService_ITF) *QMediaObject {
	defer qt.Recovering("QMediaObject::QMediaObject")

	var tmpValue = NewQMediaObjectFromPointer(C.QMediaObject_NewQMediaObject(core.PointerFromQObject(parent), PointerFromQMediaService(service)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QMediaObject) AddPropertyWatch(name string) {
	defer qt.Recovering("QMediaObject::addPropertyWatch")

	if ptr.Pointer() != nil {
		var nameC = C.CString(hex.EncodeToString([]byte(name)))
		defer C.free(unsafe.Pointer(nameC))
		C.QMediaObject_AddPropertyWatch(ptr.Pointer(), nameC)
	}
}

//export callbackQMediaObject_Availability
func callbackQMediaObject_Availability(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaObject::availability")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::availability"); signal != nil {
		return C.longlong(signal.(func() QMultimedia__AvailabilityStatus)())
	}

	return C.longlong(NewQMediaObjectFromPointer(ptr).AvailabilityDefault())
}

func (ptr *QMediaObject) ConnectAvailability(f func() QMultimedia__AvailabilityStatus) {
	defer qt.Recovering("connect QMediaObject::availability")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::availability", f)
	}
}

func (ptr *QMediaObject) DisconnectAvailability() {
	defer qt.Recovering("disconnect QMediaObject::availability")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::availability")
	}
}

func (ptr *QMediaObject) Availability() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QMediaObject::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QMediaObject_Availability(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaObject) AvailabilityDefault() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QMediaObject::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QMediaObject_AvailabilityDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaObject_AvailabilityChanged2
func callbackQMediaObject_AvailabilityChanged2(ptr unsafe.Pointer, availability C.longlong) {
	defer qt.Recovering("callback QMediaObject::availabilityChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::availabilityChanged2"); signal != nil {
		signal.(func(QMultimedia__AvailabilityStatus))(QMultimedia__AvailabilityStatus(availability))
	}

}

func (ptr *QMediaObject) ConnectAvailabilityChanged2(f func(availability QMultimedia__AvailabilityStatus)) {
	defer qt.Recovering("connect QMediaObject::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_ConnectAvailabilityChanged2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::availabilityChanged2", f)
	}
}

func (ptr *QMediaObject) DisconnectAvailabilityChanged2() {
	defer qt.Recovering("disconnect QMediaObject::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_DisconnectAvailabilityChanged2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::availabilityChanged2")
	}
}

func (ptr *QMediaObject) AvailabilityChanged2(availability QMultimedia__AvailabilityStatus) {
	defer qt.Recovering("QMediaObject::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_AvailabilityChanged2(ptr.Pointer(), C.longlong(availability))
	}
}

//export callbackQMediaObject_AvailabilityChanged
func callbackQMediaObject_AvailabilityChanged(ptr unsafe.Pointer, available C.char) {
	defer qt.Recovering("callback QMediaObject::availabilityChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::availabilityChanged"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QMediaObject) ConnectAvailabilityChanged(f func(available bool)) {
	defer qt.Recovering("connect QMediaObject::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_ConnectAvailabilityChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::availabilityChanged", f)
	}
}

func (ptr *QMediaObject) DisconnectAvailabilityChanged() {
	defer qt.Recovering("disconnect QMediaObject::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_DisconnectAvailabilityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::availabilityChanged")
	}
}

func (ptr *QMediaObject) AvailabilityChanged(available bool) {
	defer qt.Recovering("QMediaObject::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_AvailabilityChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

func (ptr *QMediaObject) AvailableMetaData() []string {
	defer qt.Recovering("QMediaObject::availableMetaData")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QMediaObject_AvailableMetaData(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQMediaObject_Bind
func callbackQMediaObject_Bind(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaObject::bind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::bind"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject) bool)(core.NewQObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaObjectFromPointer(ptr).BindDefault(core.NewQObjectFromPointer(object)))))
}

func (ptr *QMediaObject) ConnectBind(f func(object *core.QObject) bool) {
	defer qt.Recovering("connect QMediaObject::bind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::bind", f)
	}
}

func (ptr *QMediaObject) DisconnectBind() {
	defer qt.Recovering("disconnect QMediaObject::bind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::bind")
	}
}

func (ptr *QMediaObject) Bind(object core.QObject_ITF) bool {
	defer qt.Recovering("QMediaObject::bind")

	if ptr.Pointer() != nil {
		return C.QMediaObject_Bind(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QMediaObject) BindDefault(object core.QObject_ITF) bool {
	defer qt.Recovering("QMediaObject::bind")

	if ptr.Pointer() != nil {
		return C.QMediaObject_BindDefault(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

//export callbackQMediaObject_IsAvailable
func callbackQMediaObject_IsAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaObject::isAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::isAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaObjectFromPointer(ptr).IsAvailableDefault())))
}

func (ptr *QMediaObject) ConnectIsAvailable(f func() bool) {
	defer qt.Recovering("connect QMediaObject::isAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::isAvailable", f)
	}
}

func (ptr *QMediaObject) DisconnectIsAvailable() {
	defer qt.Recovering("disconnect QMediaObject::isAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::isAvailable")
	}
}

func (ptr *QMediaObject) IsAvailable() bool {
	defer qt.Recovering("QMediaObject::isAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaObject_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaObject) IsAvailableDefault() bool {
	defer qt.Recovering("QMediaObject::isAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaObject_IsAvailableDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaObject) IsMetaDataAvailable() bool {
	defer qt.Recovering("QMediaObject::isMetaDataAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaObject_IsMetaDataAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaObject) MetaData(key string) *core.QVariant {
	defer qt.Recovering("QMediaObject::metaData")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = core.NewQVariantFromPointer(C.QMediaObject_MetaData(ptr.Pointer(), keyC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQMediaObject_MetaDataAvailableChanged
func callbackQMediaObject_MetaDataAvailableChanged(ptr unsafe.Pointer, available C.char) {
	defer qt.Recovering("callback QMediaObject::metaDataAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::metaDataAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QMediaObject) ConnectMetaDataAvailableChanged(f func(available bool)) {
	defer qt.Recovering("connect QMediaObject::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_ConnectMetaDataAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::metaDataAvailableChanged", f)
	}
}

func (ptr *QMediaObject) DisconnectMetaDataAvailableChanged() {
	defer qt.Recovering("disconnect QMediaObject::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_DisconnectMetaDataAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::metaDataAvailableChanged")
	}
}

func (ptr *QMediaObject) MetaDataAvailableChanged(available bool) {
	defer qt.Recovering("QMediaObject::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_MetaDataAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

//export callbackQMediaObject_MetaDataChanged
func callbackQMediaObject_MetaDataChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaObject::metaDataChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::metaDataChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaObject) ConnectMetaDataChanged(f func()) {
	defer qt.Recovering("connect QMediaObject::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_ConnectMetaDataChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::metaDataChanged", f)
	}
}

func (ptr *QMediaObject) DisconnectMetaDataChanged() {
	defer qt.Recovering("disconnect QMediaObject::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_DisconnectMetaDataChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::metaDataChanged")
	}
}

func (ptr *QMediaObject) MetaDataChanged() {
	defer qt.Recovering("QMediaObject::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_MetaDataChanged(ptr.Pointer())
	}
}

//export callbackQMediaObject_MetaDataChanged2
func callbackQMediaObject_MetaDataChanged2(ptr unsafe.Pointer, key *C.char, value unsafe.Pointer) {
	defer qt.Recovering("callback QMediaObject::metaDataChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::metaDataChanged2"); signal != nil {
		signal.(func(string, *core.QVariant))(C.GoString(key), core.NewQVariantFromPointer(value))
	}

}

func (ptr *QMediaObject) ConnectMetaDataChanged2(f func(key string, value *core.QVariant)) {
	defer qt.Recovering("connect QMediaObject::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_ConnectMetaDataChanged2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::metaDataChanged2", f)
	}
}

func (ptr *QMediaObject) DisconnectMetaDataChanged2() {
	defer qt.Recovering("disconnect QMediaObject::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_DisconnectMetaDataChanged2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::metaDataChanged2")
	}
}

func (ptr *QMediaObject) MetaDataChanged2(key string, value core.QVariant_ITF) {
	defer qt.Recovering("QMediaObject::metaDataChanged")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QMediaObject_MetaDataChanged2(ptr.Pointer(), keyC, core.PointerFromQVariant(value))
	}
}

//export callbackQMediaObject_NotifyIntervalChanged
func callbackQMediaObject_NotifyIntervalChanged(ptr unsafe.Pointer, milliseconds C.int) {
	defer qt.Recovering("callback QMediaObject::notifyIntervalChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::notifyIntervalChanged"); signal != nil {
		signal.(func(int))(int(int32(milliseconds)))
	}

}

func (ptr *QMediaObject) ConnectNotifyIntervalChanged(f func(milliseconds int)) {
	defer qt.Recovering("connect QMediaObject::notifyIntervalChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_ConnectNotifyIntervalChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::notifyIntervalChanged", f)
	}
}

func (ptr *QMediaObject) DisconnectNotifyIntervalChanged() {
	defer qt.Recovering("disconnect QMediaObject::notifyIntervalChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_DisconnectNotifyIntervalChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::notifyIntervalChanged")
	}
}

func (ptr *QMediaObject) NotifyIntervalChanged(milliseconds int) {
	defer qt.Recovering("QMediaObject::notifyIntervalChanged")

	if ptr.Pointer() != nil {
		C.QMediaObject_NotifyIntervalChanged(ptr.Pointer(), C.int(int32(milliseconds)))
	}
}

func (ptr *QMediaObject) RemovePropertyWatch(name string) {
	defer qt.Recovering("QMediaObject::removePropertyWatch")

	if ptr.Pointer() != nil {
		var nameC = C.CString(hex.EncodeToString([]byte(name)))
		defer C.free(unsafe.Pointer(nameC))
		C.QMediaObject_RemovePropertyWatch(ptr.Pointer(), nameC)
	}
}

//export callbackQMediaObject_Service
func callbackQMediaObject_Service(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaObject::service")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::service"); signal != nil {
		return PointerFromQMediaService(signal.(func() *QMediaService)())
	}

	return PointerFromQMediaService(NewQMediaObjectFromPointer(ptr).ServiceDefault())
}

func (ptr *QMediaObject) ConnectService(f func() *QMediaService) {
	defer qt.Recovering("connect QMediaObject::service")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::service", f)
	}
}

func (ptr *QMediaObject) DisconnectService() {
	defer qt.Recovering("disconnect QMediaObject::service")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::service")
	}
}

func (ptr *QMediaObject) Service() *QMediaService {
	defer qt.Recovering("QMediaObject::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QMediaObject_Service(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMediaObject) ServiceDefault() *QMediaService {
	defer qt.Recovering("QMediaObject::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QMediaObject_ServiceDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQMediaObject_Unbind
func callbackQMediaObject_Unbind(ptr unsafe.Pointer, object unsafe.Pointer) {
	defer qt.Recovering("callback QMediaObject::unbind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::unbind"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(object))
	} else {
		NewQMediaObjectFromPointer(ptr).UnbindDefault(core.NewQObjectFromPointer(object))
	}
}

func (ptr *QMediaObject) ConnectUnbind(f func(object *core.QObject)) {
	defer qt.Recovering("connect QMediaObject::unbind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::unbind", f)
	}
}

func (ptr *QMediaObject) DisconnectUnbind() {
	defer qt.Recovering("disconnect QMediaObject::unbind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::unbind")
	}
}

func (ptr *QMediaObject) Unbind(object core.QObject_ITF) {
	defer qt.Recovering("QMediaObject::unbind")

	if ptr.Pointer() != nil {
		C.QMediaObject_Unbind(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

func (ptr *QMediaObject) UnbindDefault(object core.QObject_ITF) {
	defer qt.Recovering("QMediaObject::unbind")

	if ptr.Pointer() != nil {
		C.QMediaObject_UnbindDefault(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

func (ptr *QMediaObject) DestroyQMediaObject() {
	defer qt.Recovering("QMediaObject::~QMediaObject")

	if ptr.Pointer() != nil {
		C.QMediaObject_DestroyQMediaObject(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaObject_TimerEvent
func callbackQMediaObject_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaObject::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaObjectFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaObject) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaObject::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::timerEvent", f)
	}
}

func (ptr *QMediaObject) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaObject::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::timerEvent")
	}
}

func (ptr *QMediaObject) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaObject::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaObject_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaObject) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaObject::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaObject_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaObject_ChildEvent
func callbackQMediaObject_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaObject::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaObjectFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaObject) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaObject::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::childEvent", f)
	}
}

func (ptr *QMediaObject) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaObject::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::childEvent")
	}
}

func (ptr *QMediaObject) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaObject::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaObject_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaObject) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaObject::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaObject_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaObject_ConnectNotify
func callbackQMediaObject_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaObject::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaObjectFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaObject) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaObject::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::connectNotify", f)
	}
}

func (ptr *QMediaObject) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaObject::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::connectNotify")
	}
}

func (ptr *QMediaObject) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaObject::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaObject_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaObject) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaObject::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaObject_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaObject_CustomEvent
func callbackQMediaObject_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaObject::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaObjectFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaObject) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaObject::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::customEvent", f)
	}
}

func (ptr *QMediaObject) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaObject::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::customEvent")
	}
}

func (ptr *QMediaObject) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaObject::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaObject_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaObject) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaObject::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaObject_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaObject_DeleteLater
func callbackQMediaObject_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaObject::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaObjectFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaObject) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaObject::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::deleteLater", f)
	}
}

func (ptr *QMediaObject) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaObject::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::deleteLater")
	}
}

func (ptr *QMediaObject) DeleteLater() {
	defer qt.Recovering("QMediaObject::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaObject_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaObject) DeleteLaterDefault() {
	defer qt.Recovering("QMediaObject::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaObject_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaObject_DisconnectNotify
func callbackQMediaObject_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaObject::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaObjectFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaObject) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaObject::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::disconnectNotify", f)
	}
}

func (ptr *QMediaObject) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaObject::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::disconnectNotify")
	}
}

func (ptr *QMediaObject) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaObject::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaObject_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaObject) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaObject::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaObject_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaObject_Event
func callbackQMediaObject_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaObject::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaObjectFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaObject) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaObject::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::event", f)
	}
}

func (ptr *QMediaObject) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaObject::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::event")
	}
}

func (ptr *QMediaObject) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaObject::event")

	if ptr.Pointer() != nil {
		return C.QMediaObject_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaObject) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaObject::event")

	if ptr.Pointer() != nil {
		return C.QMediaObject_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaObject_EventFilter
func callbackQMediaObject_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaObject::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaObjectFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaObject) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaObject::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::eventFilter", f)
	}
}

func (ptr *QMediaObject) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaObject::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::eventFilter")
	}
}

func (ptr *QMediaObject) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaObject::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaObject_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaObject) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaObject::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaObject_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaObject_MetaObject
func callbackQMediaObject_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaObject::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaObject::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaObjectFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaObject) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaObject::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::metaObject", f)
	}
}

func (ptr *QMediaObject) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaObject::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaObject::metaObject")
	}
}

func (ptr *QMediaObject) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaObject::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaObject_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaObject) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaObject::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaObject_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QMediaPlayer::Error
type QMediaPlayer__Error int64

const (
	QMediaPlayer__NoError             = QMediaPlayer__Error(0)
	QMediaPlayer__ResourceError       = QMediaPlayer__Error(1)
	QMediaPlayer__FormatError         = QMediaPlayer__Error(2)
	QMediaPlayer__NetworkError        = QMediaPlayer__Error(3)
	QMediaPlayer__AccessDeniedError   = QMediaPlayer__Error(4)
	QMediaPlayer__ServiceMissingError = QMediaPlayer__Error(5)
	QMediaPlayer__MediaIsPlaylist     = QMediaPlayer__Error(6)
)

//QMediaPlayer::Flag
type QMediaPlayer__Flag int64

const (
	QMediaPlayer__LowLatency     = QMediaPlayer__Flag(0x01)
	QMediaPlayer__StreamPlayback = QMediaPlayer__Flag(0x02)
	QMediaPlayer__VideoSurface   = QMediaPlayer__Flag(0x04)
)

//QMediaPlayer::MediaStatus
type QMediaPlayer__MediaStatus int64

const (
	QMediaPlayer__UnknownMediaStatus = QMediaPlayer__MediaStatus(0)
	QMediaPlayer__NoMedia            = QMediaPlayer__MediaStatus(1)
	QMediaPlayer__LoadingMedia       = QMediaPlayer__MediaStatus(2)
	QMediaPlayer__LoadedMedia        = QMediaPlayer__MediaStatus(3)
	QMediaPlayer__StalledMedia       = QMediaPlayer__MediaStatus(4)
	QMediaPlayer__BufferingMedia     = QMediaPlayer__MediaStatus(5)
	QMediaPlayer__BufferedMedia      = QMediaPlayer__MediaStatus(6)
	QMediaPlayer__EndOfMedia         = QMediaPlayer__MediaStatus(7)
	QMediaPlayer__InvalidMedia       = QMediaPlayer__MediaStatus(8)
)

//QMediaPlayer::State
type QMediaPlayer__State int64

const (
	QMediaPlayer__StoppedState = QMediaPlayer__State(0)
	QMediaPlayer__PlayingState = QMediaPlayer__State(1)
	QMediaPlayer__PausedState  = QMediaPlayer__State(2)
)

type QMediaPlayer struct {
	QMediaObject
}

type QMediaPlayer_ITF interface {
	QMediaObject_ITF
	QMediaPlayer_PTR() *QMediaPlayer
}

func (p *QMediaPlayer) QMediaPlayer_PTR() *QMediaPlayer {
	return p
}

func (p *QMediaPlayer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaObject_PTR().Pointer()
	}
	return nil
}

func (p *QMediaPlayer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaPlayer(ptr QMediaPlayer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaPlayer_PTR().Pointer()
	}
	return nil
}

func NewQMediaPlayerFromPointer(ptr unsafe.Pointer) *QMediaPlayer {
	var n = new(QMediaPlayer)
	n.SetPointer(ptr)
	return n
}
func (ptr *QMediaPlayer) AudioRole() QAudio__Role {
	defer qt.Recovering("QMediaPlayer::audioRole")

	if ptr.Pointer() != nil {
		return QAudio__Role(C.QMediaPlayer_AudioRole(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaPlayer) BufferStatus() int {
	defer qt.Recovering("QMediaPlayer::bufferStatus")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaPlayer_BufferStatus(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMediaPlayer) CurrentMedia() *QMediaContent {
	defer qt.Recovering("QMediaPlayer::currentMedia")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaContentFromPointer(C.QMediaPlayer_CurrentMedia(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaPlayer) Duration() int64 {
	defer qt.Recovering("QMediaPlayer::duration")

	if ptr.Pointer() != nil {
		return int64(C.QMediaPlayer_Duration(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaPlayer) ErrorString() string {
	defer qt.Recovering("QMediaPlayer::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMediaPlayer_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMediaPlayer) IsAudioAvailable() bool {
	defer qt.Recovering("QMediaPlayer::isAudioAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_IsAudioAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaPlayer) IsMuted() bool {
	defer qt.Recovering("QMediaPlayer::isMuted")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_IsMuted(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaPlayer) IsSeekable() bool {
	defer qt.Recovering("QMediaPlayer::isSeekable")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_IsSeekable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaPlayer) IsVideoAvailable() bool {
	defer qt.Recovering("QMediaPlayer::isVideoAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_IsVideoAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaPlayer) Media() *QMediaContent {
	defer qt.Recovering("QMediaPlayer::media")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaContentFromPointer(C.QMediaPlayer_Media(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaPlayer) MediaStatus() QMediaPlayer__MediaStatus {
	defer qt.Recovering("QMediaPlayer::mediaStatus")

	if ptr.Pointer() != nil {
		return QMediaPlayer__MediaStatus(C.QMediaPlayer_MediaStatus(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaPlayer) PlaybackRate() float64 {
	defer qt.Recovering("QMediaPlayer::playbackRate")

	if ptr.Pointer() != nil {
		return float64(C.QMediaPlayer_PlaybackRate(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaPlayer) Playlist() *QMediaPlaylist {
	defer qt.Recovering("QMediaPlayer::playlist")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaPlaylistFromPointer(C.QMediaPlayer_Playlist(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMediaPlayer) Position() int64 {
	defer qt.Recovering("QMediaPlayer::position")

	if ptr.Pointer() != nil {
		return int64(C.QMediaPlayer_Position(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaPlayer) SetAudioRole(audioRole QAudio__Role) {
	defer qt.Recovering("QMediaPlayer::setAudioRole")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetAudioRole(ptr.Pointer(), C.longlong(audioRole))
	}
}

//export callbackQMediaPlayer_SetMuted
func callbackQMediaPlayer_SetMuted(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QMediaPlayer::setMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::setMuted"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QMediaPlayer) ConnectSetMuted(f func(muted bool)) {
	defer qt.Recovering("connect QMediaPlayer::setMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setMuted", f)
	}
}

func (ptr *QMediaPlayer) DisconnectSetMuted(muted bool) {
	defer qt.Recovering("disconnect QMediaPlayer::setMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setMuted")
	}
}

func (ptr *QMediaPlayer) SetMuted(muted bool) {
	defer qt.Recovering("QMediaPlayer::setMuted")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetMuted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

//export callbackQMediaPlayer_SetPlaybackRate
func callbackQMediaPlayer_SetPlaybackRate(ptr unsafe.Pointer, rate C.double) {
	defer qt.Recovering("callback QMediaPlayer::setPlaybackRate")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::setPlaybackRate"); signal != nil {
		signal.(func(float64))(float64(rate))
	}

}

func (ptr *QMediaPlayer) ConnectSetPlaybackRate(f func(rate float64)) {
	defer qt.Recovering("connect QMediaPlayer::setPlaybackRate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setPlaybackRate", f)
	}
}

func (ptr *QMediaPlayer) DisconnectSetPlaybackRate(rate float64) {
	defer qt.Recovering("disconnect QMediaPlayer::setPlaybackRate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setPlaybackRate")
	}
}

func (ptr *QMediaPlayer) SetPlaybackRate(rate float64) {
	defer qt.Recovering("QMediaPlayer::setPlaybackRate")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetPlaybackRate(ptr.Pointer(), C.double(rate))
	}
}

//export callbackQMediaPlayer_SetPlaylist
func callbackQMediaPlayer_SetPlaylist(ptr unsafe.Pointer, playlist unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::setPlaylist")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::setPlaylist"); signal != nil {
		signal.(func(*QMediaPlaylist))(NewQMediaPlaylistFromPointer(playlist))
	}

}

func (ptr *QMediaPlayer) ConnectSetPlaylist(f func(playlist *QMediaPlaylist)) {
	defer qt.Recovering("connect QMediaPlayer::setPlaylist")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setPlaylist", f)
	}
}

func (ptr *QMediaPlayer) DisconnectSetPlaylist(playlist QMediaPlaylist_ITF) {
	defer qt.Recovering("disconnect QMediaPlayer::setPlaylist")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setPlaylist")
	}
}

func (ptr *QMediaPlayer) SetPlaylist(playlist QMediaPlaylist_ITF) {
	defer qt.Recovering("QMediaPlayer::setPlaylist")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetPlaylist(ptr.Pointer(), PointerFromQMediaPlaylist(playlist))
	}
}

//export callbackQMediaPlayer_SetPosition
func callbackQMediaPlayer_SetPosition(ptr unsafe.Pointer, position C.longlong) {
	defer qt.Recovering("callback QMediaPlayer::setPosition")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::setPosition"); signal != nil {
		signal.(func(int64))(int64(position))
	}

}

func (ptr *QMediaPlayer) ConnectSetPosition(f func(position int64)) {
	defer qt.Recovering("connect QMediaPlayer::setPosition")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setPosition", f)
	}
}

func (ptr *QMediaPlayer) DisconnectSetPosition(position int64) {
	defer qt.Recovering("disconnect QMediaPlayer::setPosition")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setPosition")
	}
}

func (ptr *QMediaPlayer) SetPosition(position int64) {
	defer qt.Recovering("QMediaPlayer::setPosition")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetPosition(ptr.Pointer(), C.longlong(position))
	}
}

func (ptr *QMediaPlayer) SetVideoOutput2(output QGraphicsVideoItem_ITF) {
	defer qt.Recovering("QMediaPlayer::setVideoOutput")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetVideoOutput2(ptr.Pointer(), PointerFromQGraphicsVideoItem(output))
	}
}

func (ptr *QMediaPlayer) SetVideoOutput(output QVideoWidget_ITF) {
	defer qt.Recovering("QMediaPlayer::setVideoOutput")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetVideoOutput(ptr.Pointer(), PointerFromQVideoWidget(output))
	}
}

//export callbackQMediaPlayer_SetVolume
func callbackQMediaPlayer_SetVolume(ptr unsafe.Pointer, volume C.int) {
	defer qt.Recovering("callback QMediaPlayer::setVolume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::setVolume"); signal != nil {
		signal.(func(int))(int(int32(volume)))
	}

}

func (ptr *QMediaPlayer) ConnectSetVolume(f func(volume int)) {
	defer qt.Recovering("connect QMediaPlayer::setVolume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setVolume", f)
	}
}

func (ptr *QMediaPlayer) DisconnectSetVolume(volume int) {
	defer qt.Recovering("disconnect QMediaPlayer::setVolume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setVolume")
	}
}

func (ptr *QMediaPlayer) SetVolume(volume int) {
	defer qt.Recovering("QMediaPlayer::setVolume")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetVolume(ptr.Pointer(), C.int(int32(volume)))
	}
}

func (ptr *QMediaPlayer) State() QMediaPlayer__State {
	defer qt.Recovering("QMediaPlayer::state")

	if ptr.Pointer() != nil {
		return QMediaPlayer__State(C.QMediaPlayer_State(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaPlayer) Volume() int {
	defer qt.Recovering("QMediaPlayer::volume")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaPlayer_Volume(ptr.Pointer())))
	}
	return 0
}

func NewQMediaPlayer(parent core.QObject_ITF, flags QMediaPlayer__Flag) *QMediaPlayer {
	defer qt.Recovering("QMediaPlayer::QMediaPlayer")

	var tmpValue = NewQMediaPlayerFromPointer(C.QMediaPlayer_NewQMediaPlayer(core.PointerFromQObject(parent), C.longlong(flags)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaPlayer_AudioAvailableChanged
func callbackQMediaPlayer_AudioAvailableChanged(ptr unsafe.Pointer, available C.char) {
	defer qt.Recovering("callback QMediaPlayer::audioAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::audioAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QMediaPlayer) ConnectAudioAvailableChanged(f func(available bool)) {
	defer qt.Recovering("connect QMediaPlayer::audioAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectAudioAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::audioAvailableChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectAudioAvailableChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::audioAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectAudioAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::audioAvailableChanged")
	}
}

func (ptr *QMediaPlayer) AudioAvailableChanged(available bool) {
	defer qt.Recovering("QMediaPlayer::audioAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_AudioAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

//export callbackQMediaPlayer_AudioRoleChanged
func callbackQMediaPlayer_AudioRoleChanged(ptr unsafe.Pointer, role C.longlong) {
	defer qt.Recovering("callback QMediaPlayer::audioRoleChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::audioRoleChanged"); signal != nil {
		signal.(func(QAudio__Role))(QAudio__Role(role))
	}

}

func (ptr *QMediaPlayer) ConnectAudioRoleChanged(f func(role QAudio__Role)) {
	defer qt.Recovering("connect QMediaPlayer::audioRoleChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectAudioRoleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::audioRoleChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectAudioRoleChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::audioRoleChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectAudioRoleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::audioRoleChanged")
	}
}

func (ptr *QMediaPlayer) AudioRoleChanged(role QAudio__Role) {
	defer qt.Recovering("QMediaPlayer::audioRoleChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_AudioRoleChanged(ptr.Pointer(), C.longlong(role))
	}
}

//export callbackQMediaPlayer_Availability
func callbackQMediaPlayer_Availability(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaPlayer::availability")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::availability"); signal != nil {
		return C.longlong(signal.(func() QMultimedia__AvailabilityStatus)())
	}

	return C.longlong(NewQMediaPlayerFromPointer(ptr).AvailabilityDefault())
}

func (ptr *QMediaPlayer) ConnectAvailability(f func() QMultimedia__AvailabilityStatus) {
	defer qt.Recovering("connect QMediaPlayer::availability")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::availability", f)
	}
}

func (ptr *QMediaPlayer) DisconnectAvailability() {
	defer qt.Recovering("disconnect QMediaPlayer::availability")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::availability")
	}
}

func (ptr *QMediaPlayer) Availability() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QMediaPlayer::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QMediaPlayer_Availability(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaPlayer) AvailabilityDefault() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QMediaPlayer::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QMediaPlayer_AvailabilityDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaPlayer_BufferStatusChanged
func callbackQMediaPlayer_BufferStatusChanged(ptr unsafe.Pointer, percentFilled C.int) {
	defer qt.Recovering("callback QMediaPlayer::bufferStatusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::bufferStatusChanged"); signal != nil {
		signal.(func(int))(int(int32(percentFilled)))
	}

}

func (ptr *QMediaPlayer) ConnectBufferStatusChanged(f func(percentFilled int)) {
	defer qt.Recovering("connect QMediaPlayer::bufferStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectBufferStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::bufferStatusChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectBufferStatusChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::bufferStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectBufferStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::bufferStatusChanged")
	}
}

func (ptr *QMediaPlayer) BufferStatusChanged(percentFilled int) {
	defer qt.Recovering("QMediaPlayer::bufferStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_BufferStatusChanged(ptr.Pointer(), C.int(int32(percentFilled)))
	}
}

//export callbackQMediaPlayer_CurrentMediaChanged
func callbackQMediaPlayer_CurrentMediaChanged(ptr unsafe.Pointer, media unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::currentMediaChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::currentMediaChanged"); signal != nil {
		signal.(func(*QMediaContent))(NewQMediaContentFromPointer(media))
	}

}

func (ptr *QMediaPlayer) ConnectCurrentMediaChanged(f func(media *QMediaContent)) {
	defer qt.Recovering("connect QMediaPlayer::currentMediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectCurrentMediaChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::currentMediaChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectCurrentMediaChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::currentMediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectCurrentMediaChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::currentMediaChanged")
	}
}

func (ptr *QMediaPlayer) CurrentMediaChanged(media QMediaContent_ITF) {
	defer qt.Recovering("QMediaPlayer::currentMediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_CurrentMediaChanged(ptr.Pointer(), PointerFromQMediaContent(media))
	}
}

func (ptr *QMediaPlayer) CurrentNetworkConfiguration() *network.QNetworkConfiguration {
	defer qt.Recovering("QMediaPlayer::currentNetworkConfiguration")

	if ptr.Pointer() != nil {
		var tmpValue = network.NewQNetworkConfigurationFromPointer(C.QMediaPlayer_CurrentNetworkConfiguration(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*network.QNetworkConfiguration).DestroyQNetworkConfiguration)
		return tmpValue
	}
	return nil
}

//export callbackQMediaPlayer_DurationChanged
func callbackQMediaPlayer_DurationChanged(ptr unsafe.Pointer, duration C.longlong) {
	defer qt.Recovering("callback QMediaPlayer::durationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::durationChanged"); signal != nil {
		signal.(func(int64))(int64(duration))
	}

}

func (ptr *QMediaPlayer) ConnectDurationChanged(f func(duration int64)) {
	defer qt.Recovering("connect QMediaPlayer::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectDurationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::durationChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectDurationChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectDurationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::durationChanged")
	}
}

func (ptr *QMediaPlayer) DurationChanged(duration int64) {
	defer qt.Recovering("QMediaPlayer::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DurationChanged(ptr.Pointer(), C.longlong(duration))
	}
}

//export callbackQMediaPlayer_Error2
func callbackQMediaPlayer_Error2(ptr unsafe.Pointer, error C.longlong) {
	defer qt.Recovering("callback QMediaPlayer::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::error2"); signal != nil {
		signal.(func(QMediaPlayer__Error))(QMediaPlayer__Error(error))
	}

}

func (ptr *QMediaPlayer) ConnectError2(f func(error QMediaPlayer__Error)) {
	defer qt.Recovering("connect QMediaPlayer::error")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectError2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::error2", f)
	}
}

func (ptr *QMediaPlayer) DisconnectError2() {
	defer qt.Recovering("disconnect QMediaPlayer::error")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectError2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::error2")
	}
}

func (ptr *QMediaPlayer) Error2(error QMediaPlayer__Error) {
	defer qt.Recovering("QMediaPlayer::error")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_Error2(ptr.Pointer(), C.longlong(error))
	}
}

func (ptr *QMediaPlayer) Error() QMediaPlayer__Error {
	defer qt.Recovering("QMediaPlayer::error")

	if ptr.Pointer() != nil {
		return QMediaPlayer__Error(C.QMediaPlayer_Error(ptr.Pointer()))
	}
	return 0
}

func QMediaPlayer_HasSupport(mimeType string, codecs []string, flags QMediaPlayer__Flag) QMultimedia__SupportEstimate {
	defer qt.Recovering("QMediaPlayer::hasSupport")

	var mimeTypeC = C.CString(mimeType)
	defer C.free(unsafe.Pointer(mimeTypeC))
	var codecsC = C.CString(strings.Join(codecs, "|"))
	defer C.free(unsafe.Pointer(codecsC))
	return QMultimedia__SupportEstimate(C.QMediaPlayer_QMediaPlayer_HasSupport(mimeTypeC, codecsC, C.longlong(flags)))
}

func (ptr *QMediaPlayer) HasSupport(mimeType string, codecs []string, flags QMediaPlayer__Flag) QMultimedia__SupportEstimate {
	defer qt.Recovering("QMediaPlayer::hasSupport")

	var mimeTypeC = C.CString(mimeType)
	defer C.free(unsafe.Pointer(mimeTypeC))
	var codecsC = C.CString(strings.Join(codecs, "|"))
	defer C.free(unsafe.Pointer(codecsC))
	return QMultimedia__SupportEstimate(C.QMediaPlayer_QMediaPlayer_HasSupport(mimeTypeC, codecsC, C.longlong(flags)))
}

//export callbackQMediaPlayer_MediaChanged
func callbackQMediaPlayer_MediaChanged(ptr unsafe.Pointer, media unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::mediaChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::mediaChanged"); signal != nil {
		signal.(func(*QMediaContent))(NewQMediaContentFromPointer(media))
	}

}

func (ptr *QMediaPlayer) ConnectMediaChanged(f func(media *QMediaContent)) {
	defer qt.Recovering("connect QMediaPlayer::mediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectMediaChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::mediaChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectMediaChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::mediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectMediaChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::mediaChanged")
	}
}

func (ptr *QMediaPlayer) MediaChanged(media QMediaContent_ITF) {
	defer qt.Recovering("QMediaPlayer::mediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_MediaChanged(ptr.Pointer(), PointerFromQMediaContent(media))
	}
}

//export callbackQMediaPlayer_MediaStatusChanged
func callbackQMediaPlayer_MediaStatusChanged(ptr unsafe.Pointer, status C.longlong) {
	defer qt.Recovering("callback QMediaPlayer::mediaStatusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::mediaStatusChanged"); signal != nil {
		signal.(func(QMediaPlayer__MediaStatus))(QMediaPlayer__MediaStatus(status))
	}

}

func (ptr *QMediaPlayer) ConnectMediaStatusChanged(f func(status QMediaPlayer__MediaStatus)) {
	defer qt.Recovering("connect QMediaPlayer::mediaStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectMediaStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::mediaStatusChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectMediaStatusChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::mediaStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectMediaStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::mediaStatusChanged")
	}
}

func (ptr *QMediaPlayer) MediaStatusChanged(status QMediaPlayer__MediaStatus) {
	defer qt.Recovering("QMediaPlayer::mediaStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_MediaStatusChanged(ptr.Pointer(), C.longlong(status))
	}
}

func (ptr *QMediaPlayer) MediaStream() *core.QIODevice {
	defer qt.Recovering("QMediaPlayer::mediaStream")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QMediaPlayer_MediaStream(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQMediaPlayer_MutedChanged
func callbackQMediaPlayer_MutedChanged(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QMediaPlayer::mutedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::mutedChanged"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QMediaPlayer) ConnectMutedChanged(f func(muted bool)) {
	defer qt.Recovering("connect QMediaPlayer::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectMutedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::mutedChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectMutedChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectMutedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::mutedChanged")
	}
}

func (ptr *QMediaPlayer) MutedChanged(muted bool) {
	defer qt.Recovering("QMediaPlayer::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_MutedChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

//export callbackQMediaPlayer_NetworkConfigurationChanged
func callbackQMediaPlayer_NetworkConfigurationChanged(ptr unsafe.Pointer, configuration unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::networkConfigurationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::networkConfigurationChanged"); signal != nil {
		signal.(func(*network.QNetworkConfiguration))(network.NewQNetworkConfigurationFromPointer(configuration))
	}

}

func (ptr *QMediaPlayer) ConnectNetworkConfigurationChanged(f func(configuration *network.QNetworkConfiguration)) {
	defer qt.Recovering("connect QMediaPlayer::networkConfigurationChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectNetworkConfigurationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::networkConfigurationChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectNetworkConfigurationChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::networkConfigurationChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectNetworkConfigurationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::networkConfigurationChanged")
	}
}

func (ptr *QMediaPlayer) NetworkConfigurationChanged(configuration network.QNetworkConfiguration_ITF) {
	defer qt.Recovering("QMediaPlayer::networkConfigurationChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_NetworkConfigurationChanged(ptr.Pointer(), network.PointerFromQNetworkConfiguration(configuration))
	}
}

//export callbackQMediaPlayer_Pause
func callbackQMediaPlayer_Pause(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::pause")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::pause"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlayer) ConnectPause(f func()) {
	defer qt.Recovering("connect QMediaPlayer::pause")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::pause", f)
	}
}

func (ptr *QMediaPlayer) DisconnectPause() {
	defer qt.Recovering("disconnect QMediaPlayer::pause")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::pause")
	}
}

func (ptr *QMediaPlayer) Pause() {
	defer qt.Recovering("QMediaPlayer::pause")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_Pause(ptr.Pointer())
	}
}

//export callbackQMediaPlayer_Play
func callbackQMediaPlayer_Play(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::play")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::play"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlayer) ConnectPlay(f func()) {
	defer qt.Recovering("connect QMediaPlayer::play")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::play", f)
	}
}

func (ptr *QMediaPlayer) DisconnectPlay() {
	defer qt.Recovering("disconnect QMediaPlayer::play")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::play")
	}
}

func (ptr *QMediaPlayer) Play() {
	defer qt.Recovering("QMediaPlayer::play")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_Play(ptr.Pointer())
	}
}

//export callbackQMediaPlayer_PlaybackRateChanged
func callbackQMediaPlayer_PlaybackRateChanged(ptr unsafe.Pointer, rate C.double) {
	defer qt.Recovering("callback QMediaPlayer::playbackRateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::playbackRateChanged"); signal != nil {
		signal.(func(float64))(float64(rate))
	}

}

func (ptr *QMediaPlayer) ConnectPlaybackRateChanged(f func(rate float64)) {
	defer qt.Recovering("connect QMediaPlayer::playbackRateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectPlaybackRateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::playbackRateChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectPlaybackRateChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::playbackRateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectPlaybackRateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::playbackRateChanged")
	}
}

func (ptr *QMediaPlayer) PlaybackRateChanged(rate float64) {
	defer qt.Recovering("QMediaPlayer::playbackRateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_PlaybackRateChanged(ptr.Pointer(), C.double(rate))
	}
}

//export callbackQMediaPlayer_PositionChanged
func callbackQMediaPlayer_PositionChanged(ptr unsafe.Pointer, position C.longlong) {
	defer qt.Recovering("callback QMediaPlayer::positionChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::positionChanged"); signal != nil {
		signal.(func(int64))(int64(position))
	}

}

func (ptr *QMediaPlayer) ConnectPositionChanged(f func(position int64)) {
	defer qt.Recovering("connect QMediaPlayer::positionChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectPositionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::positionChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectPositionChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::positionChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectPositionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::positionChanged")
	}
}

func (ptr *QMediaPlayer) PositionChanged(position int64) {
	defer qt.Recovering("QMediaPlayer::positionChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_PositionChanged(ptr.Pointer(), C.longlong(position))
	}
}

//export callbackQMediaPlayer_SeekableChanged
func callbackQMediaPlayer_SeekableChanged(ptr unsafe.Pointer, seekable C.char) {
	defer qt.Recovering("callback QMediaPlayer::seekableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::seekableChanged"); signal != nil {
		signal.(func(bool))(int8(seekable) != 0)
	}

}

func (ptr *QMediaPlayer) ConnectSeekableChanged(f func(seekable bool)) {
	defer qt.Recovering("connect QMediaPlayer::seekableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectSeekableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::seekableChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectSeekableChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::seekableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectSeekableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::seekableChanged")
	}
}

func (ptr *QMediaPlayer) SeekableChanged(seekable bool) {
	defer qt.Recovering("QMediaPlayer::seekableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SeekableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(seekable))))
	}
}

//export callbackQMediaPlayer_SetMedia
func callbackQMediaPlayer_SetMedia(ptr unsafe.Pointer, media unsafe.Pointer, stream unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::setMedia")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::setMedia"); signal != nil {
		signal.(func(*QMediaContent, *core.QIODevice))(NewQMediaContentFromPointer(media), core.NewQIODeviceFromPointer(stream))
	}

}

func (ptr *QMediaPlayer) ConnectSetMedia(f func(media *QMediaContent, stream *core.QIODevice)) {
	defer qt.Recovering("connect QMediaPlayer::setMedia")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setMedia", f)
	}
}

func (ptr *QMediaPlayer) DisconnectSetMedia(media QMediaContent_ITF, stream core.QIODevice_ITF) {
	defer qt.Recovering("disconnect QMediaPlayer::setMedia")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::setMedia")
	}
}

func (ptr *QMediaPlayer) SetMedia(media QMediaContent_ITF, stream core.QIODevice_ITF) {
	defer qt.Recovering("QMediaPlayer::setMedia")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetMedia(ptr.Pointer(), PointerFromQMediaContent(media), core.PointerFromQIODevice(stream))
	}
}

func (ptr *QMediaPlayer) SetVideoOutput3(surface QAbstractVideoSurface_ITF) {
	defer qt.Recovering("QMediaPlayer::setVideoOutput")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_SetVideoOutput3(ptr.Pointer(), PointerFromQAbstractVideoSurface(surface))
	}
}

//export callbackQMediaPlayer_StateChanged
func callbackQMediaPlayer_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QMediaPlayer::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::stateChanged"); signal != nil {
		signal.(func(QMediaPlayer__State))(QMediaPlayer__State(state))
	}

}

func (ptr *QMediaPlayer) ConnectStateChanged(f func(state QMediaPlayer__State)) {
	defer qt.Recovering("connect QMediaPlayer::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::stateChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::stateChanged")
	}
}

func (ptr *QMediaPlayer) StateChanged(state QMediaPlayer__State) {
	defer qt.Recovering("QMediaPlayer::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQMediaPlayer_Stop
func callbackQMediaPlayer_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlayer) ConnectStop(f func()) {
	defer qt.Recovering("connect QMediaPlayer::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::stop", f)
	}
}

func (ptr *QMediaPlayer) DisconnectStop() {
	defer qt.Recovering("disconnect QMediaPlayer::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::stop")
	}
}

func (ptr *QMediaPlayer) Stop() {
	defer qt.Recovering("QMediaPlayer::stop")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_Stop(ptr.Pointer())
	}
}

//export callbackQMediaPlayer_VideoAvailableChanged
func callbackQMediaPlayer_VideoAvailableChanged(ptr unsafe.Pointer, videoAvailable C.char) {
	defer qt.Recovering("callback QMediaPlayer::videoAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::videoAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(videoAvailable) != 0)
	}

}

func (ptr *QMediaPlayer) ConnectVideoAvailableChanged(f func(videoAvailable bool)) {
	defer qt.Recovering("connect QMediaPlayer::videoAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectVideoAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::videoAvailableChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectVideoAvailableChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::videoAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectVideoAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::videoAvailableChanged")
	}
}

func (ptr *QMediaPlayer) VideoAvailableChanged(videoAvailable bool) {
	defer qt.Recovering("QMediaPlayer::videoAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_VideoAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(videoAvailable))))
	}
}

//export callbackQMediaPlayer_VolumeChanged
func callbackQMediaPlayer_VolumeChanged(ptr unsafe.Pointer, volume C.int) {
	defer qt.Recovering("callback QMediaPlayer::volumeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::volumeChanged"); signal != nil {
		signal.(func(int))(int(int32(volume)))
	}

}

func (ptr *QMediaPlayer) ConnectVolumeChanged(f func(volume int)) {
	defer qt.Recovering("connect QMediaPlayer::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectVolumeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::volumeChanged", f)
	}
}

func (ptr *QMediaPlayer) DisconnectVolumeChanged() {
	defer qt.Recovering("disconnect QMediaPlayer::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectVolumeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::volumeChanged")
	}
}

func (ptr *QMediaPlayer) VolumeChanged(volume int) {
	defer qt.Recovering("QMediaPlayer::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_VolumeChanged(ptr.Pointer(), C.int(int32(volume)))
	}
}

func (ptr *QMediaPlayer) DestroyQMediaPlayer() {
	defer qt.Recovering("QMediaPlayer::~QMediaPlayer")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DestroyQMediaPlayer(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaPlayer_Bind
func callbackQMediaPlayer_Bind(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayer::bind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::bind"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject) bool)(core.NewQObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaPlayerFromPointer(ptr).BindDefault(core.NewQObjectFromPointer(object)))))
}

func (ptr *QMediaPlayer) ConnectBind(f func(object *core.QObject) bool) {
	defer qt.Recovering("connect QMediaPlayer::bind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::bind", f)
	}
}

func (ptr *QMediaPlayer) DisconnectBind() {
	defer qt.Recovering("disconnect QMediaPlayer::bind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::bind")
	}
}

func (ptr *QMediaPlayer) Bind(object core.QObject_ITF) bool {
	defer qt.Recovering("QMediaPlayer::bind")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_Bind(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QMediaPlayer) BindDefault(object core.QObject_ITF) bool {
	defer qt.Recovering("QMediaPlayer::bind")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_BindDefault(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

//export callbackQMediaPlayer_IsAvailable
func callbackQMediaPlayer_IsAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayer::isAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::isAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaPlayerFromPointer(ptr).IsAvailableDefault())))
}

func (ptr *QMediaPlayer) ConnectIsAvailable(f func() bool) {
	defer qt.Recovering("connect QMediaPlayer::isAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::isAvailable", f)
	}
}

func (ptr *QMediaPlayer) DisconnectIsAvailable() {
	defer qt.Recovering("disconnect QMediaPlayer::isAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::isAvailable")
	}
}

func (ptr *QMediaPlayer) IsAvailable() bool {
	defer qt.Recovering("QMediaPlayer::isAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaPlayer) IsAvailableDefault() bool {
	defer qt.Recovering("QMediaPlayer::isAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_IsAvailableDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMediaPlayer_Service
func callbackQMediaPlayer_Service(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaPlayer::service")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::service"); signal != nil {
		return PointerFromQMediaService(signal.(func() *QMediaService)())
	}

	return PointerFromQMediaService(NewQMediaPlayerFromPointer(ptr).ServiceDefault())
}

func (ptr *QMediaPlayer) ConnectService(f func() *QMediaService) {
	defer qt.Recovering("connect QMediaPlayer::service")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::service", f)
	}
}

func (ptr *QMediaPlayer) DisconnectService() {
	defer qt.Recovering("disconnect QMediaPlayer::service")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::service")
	}
}

func (ptr *QMediaPlayer) Service() *QMediaService {
	defer qt.Recovering("QMediaPlayer::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QMediaPlayer_Service(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMediaPlayer) ServiceDefault() *QMediaService {
	defer qt.Recovering("QMediaPlayer::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QMediaPlayer_ServiceDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQMediaPlayer_Unbind
func callbackQMediaPlayer_Unbind(ptr unsafe.Pointer, object unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::unbind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::unbind"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(object))
	} else {
		NewQMediaPlayerFromPointer(ptr).UnbindDefault(core.NewQObjectFromPointer(object))
	}
}

func (ptr *QMediaPlayer) ConnectUnbind(f func(object *core.QObject)) {
	defer qt.Recovering("connect QMediaPlayer::unbind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::unbind", f)
	}
}

func (ptr *QMediaPlayer) DisconnectUnbind() {
	defer qt.Recovering("disconnect QMediaPlayer::unbind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::unbind")
	}
}

func (ptr *QMediaPlayer) Unbind(object core.QObject_ITF) {
	defer qt.Recovering("QMediaPlayer::unbind")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_Unbind(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

func (ptr *QMediaPlayer) UnbindDefault(object core.QObject_ITF) {
	defer qt.Recovering("QMediaPlayer::unbind")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_UnbindDefault(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

//export callbackQMediaPlayer_TimerEvent
func callbackQMediaPlayer_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaPlayerFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaPlayer) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaPlayer::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::timerEvent", f)
	}
}

func (ptr *QMediaPlayer) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaPlayer::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::timerEvent")
	}
}

func (ptr *QMediaPlayer) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaPlayer::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaPlayer) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaPlayer::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaPlayer_ChildEvent
func callbackQMediaPlayer_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaPlayerFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaPlayer) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaPlayer::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::childEvent", f)
	}
}

func (ptr *QMediaPlayer) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaPlayer::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::childEvent")
	}
}

func (ptr *QMediaPlayer) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaPlayer::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaPlayer) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaPlayer::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaPlayer_ConnectNotify
func callbackQMediaPlayer_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaPlayerFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaPlayer) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaPlayer::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::connectNotify", f)
	}
}

func (ptr *QMediaPlayer) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaPlayer::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::connectNotify")
	}
}

func (ptr *QMediaPlayer) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlayer::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaPlayer) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlayer::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaPlayer_CustomEvent
func callbackQMediaPlayer_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaPlayerFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaPlayer) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaPlayer::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::customEvent", f)
	}
}

func (ptr *QMediaPlayer) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaPlayer::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::customEvent")
	}
}

func (ptr *QMediaPlayer) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaPlayer::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaPlayer) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaPlayer::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaPlayer_DeleteLater
func callbackQMediaPlayer_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaPlayerFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaPlayer) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaPlayer::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::deleteLater", f)
	}
}

func (ptr *QMediaPlayer) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaPlayer::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::deleteLater")
	}
}

func (ptr *QMediaPlayer) DeleteLater() {
	defer qt.Recovering("QMediaPlayer::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaPlayer) DeleteLaterDefault() {
	defer qt.Recovering("QMediaPlayer::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaPlayer_DisconnectNotify
func callbackQMediaPlayer_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayer::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaPlayerFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaPlayer) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaPlayer::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::disconnectNotify", f)
	}
}

func (ptr *QMediaPlayer) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaPlayer::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::disconnectNotify")
	}
}

func (ptr *QMediaPlayer) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlayer::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaPlayer) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlayer::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlayer_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaPlayer_Event
func callbackQMediaPlayer_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayer::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaPlayerFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaPlayer) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaPlayer::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::event", f)
	}
}

func (ptr *QMediaPlayer) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaPlayer::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::event")
	}
}

func (ptr *QMediaPlayer) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlayer::event")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaPlayer) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlayer::event")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaPlayer_EventFilter
func callbackQMediaPlayer_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayer::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaPlayerFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaPlayer) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaPlayer::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::eventFilter", f)
	}
}

func (ptr *QMediaPlayer) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaPlayer::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::eventFilter")
	}
}

func (ptr *QMediaPlayer) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlayer::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaPlayer) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlayer::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaPlayer_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaPlayer_MetaObject
func callbackQMediaPlayer_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaPlayer::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayer::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaPlayerFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaPlayer) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaPlayer::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::metaObject", f)
	}
}

func (ptr *QMediaPlayer) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaPlayer::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayer::metaObject")
	}
}

func (ptr *QMediaPlayer) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaPlayer::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaPlayer_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaPlayer) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaPlayer::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaPlayer_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaPlayerControl struct {
	QMediaControl
}

type QMediaPlayerControl_ITF interface {
	QMediaControl_ITF
	QMediaPlayerControl_PTR() *QMediaPlayerControl
}

func (p *QMediaPlayerControl) QMediaPlayerControl_PTR() *QMediaPlayerControl {
	return p
}

func (p *QMediaPlayerControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMediaPlayerControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaPlayerControl(ptr QMediaPlayerControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaPlayerControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaPlayerControlFromPointer(ptr unsafe.Pointer) *QMediaPlayerControl {
	var n = new(QMediaPlayerControl)
	n.SetPointer(ptr)
	return n
}
func NewQMediaPlayerControl(parent core.QObject_ITF) *QMediaPlayerControl {
	defer qt.Recovering("QMediaPlayerControl::QMediaPlayerControl")

	var tmpValue = NewQMediaPlayerControlFromPointer(C.QMediaPlayerControl_NewQMediaPlayerControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaPlayerControl_AudioAvailableChanged
func callbackQMediaPlayerControl_AudioAvailableChanged(ptr unsafe.Pointer, audio C.char) {
	defer qt.Recovering("callback QMediaPlayerControl::audioAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::audioAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(audio) != 0)
	}

}

func (ptr *QMediaPlayerControl) ConnectAudioAvailableChanged(f func(audio bool)) {
	defer qt.Recovering("connect QMediaPlayerControl::audioAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectAudioAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::audioAvailableChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectAudioAvailableChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::audioAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectAudioAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::audioAvailableChanged")
	}
}

func (ptr *QMediaPlayerControl) AudioAvailableChanged(audio bool) {
	defer qt.Recovering("QMediaPlayerControl::audioAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_AudioAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(audio))))
	}
}

//export callbackQMediaPlayerControl_AvailablePlaybackRanges
func callbackQMediaPlayerControl_AvailablePlaybackRanges(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaPlayerControl::availablePlaybackRanges")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::availablePlaybackRanges"); signal != nil {
		return PointerFromQMediaTimeRange(signal.(func() *QMediaTimeRange)())
	}

	return PointerFromQMediaTimeRange(nil)
}

func (ptr *QMediaPlayerControl) ConnectAvailablePlaybackRanges(f func() *QMediaTimeRange) {
	defer qt.Recovering("connect QMediaPlayerControl::availablePlaybackRanges")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::availablePlaybackRanges", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectAvailablePlaybackRanges() {
	defer qt.Recovering("disconnect QMediaPlayerControl::availablePlaybackRanges")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::availablePlaybackRanges")
	}
}

func (ptr *QMediaPlayerControl) AvailablePlaybackRanges() *QMediaTimeRange {
	defer qt.Recovering("QMediaPlayerControl::availablePlaybackRanges")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaTimeRangeFromPointer(C.QMediaPlayerControl_AvailablePlaybackRanges(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMediaTimeRange).DestroyQMediaTimeRange)
		return tmpValue
	}
	return nil
}

//export callbackQMediaPlayerControl_AvailablePlaybackRangesChanged
func callbackQMediaPlayerControl_AvailablePlaybackRangesChanged(ptr unsafe.Pointer, ranges unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::availablePlaybackRangesChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::availablePlaybackRangesChanged"); signal != nil {
		signal.(func(*QMediaTimeRange))(NewQMediaTimeRangeFromPointer(ranges))
	}

}

func (ptr *QMediaPlayerControl) ConnectAvailablePlaybackRangesChanged(f func(ranges *QMediaTimeRange)) {
	defer qt.Recovering("connect QMediaPlayerControl::availablePlaybackRangesChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectAvailablePlaybackRangesChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::availablePlaybackRangesChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectAvailablePlaybackRangesChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::availablePlaybackRangesChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectAvailablePlaybackRangesChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::availablePlaybackRangesChanged")
	}
}

func (ptr *QMediaPlayerControl) AvailablePlaybackRangesChanged(ranges QMediaTimeRange_ITF) {
	defer qt.Recovering("QMediaPlayerControl::availablePlaybackRangesChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_AvailablePlaybackRangesChanged(ptr.Pointer(), PointerFromQMediaTimeRange(ranges))
	}
}

//export callbackQMediaPlayerControl_BufferStatus
func callbackQMediaPlayerControl_BufferStatus(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QMediaPlayerControl::bufferStatus")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::bufferStatus"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QMediaPlayerControl) ConnectBufferStatus(f func() int) {
	defer qt.Recovering("connect QMediaPlayerControl::bufferStatus")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::bufferStatus", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectBufferStatus() {
	defer qt.Recovering("disconnect QMediaPlayerControl::bufferStatus")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::bufferStatus")
	}
}

func (ptr *QMediaPlayerControl) BufferStatus() int {
	defer qt.Recovering("QMediaPlayerControl::bufferStatus")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaPlayerControl_BufferStatus(ptr.Pointer())))
	}
	return 0
}

//export callbackQMediaPlayerControl_BufferStatusChanged
func callbackQMediaPlayerControl_BufferStatusChanged(ptr unsafe.Pointer, progress C.int) {
	defer qt.Recovering("callback QMediaPlayerControl::bufferStatusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::bufferStatusChanged"); signal != nil {
		signal.(func(int))(int(int32(progress)))
	}

}

func (ptr *QMediaPlayerControl) ConnectBufferStatusChanged(f func(progress int)) {
	defer qt.Recovering("connect QMediaPlayerControl::bufferStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectBufferStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::bufferStatusChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectBufferStatusChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::bufferStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectBufferStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::bufferStatusChanged")
	}
}

func (ptr *QMediaPlayerControl) BufferStatusChanged(progress int) {
	defer qt.Recovering("QMediaPlayerControl::bufferStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_BufferStatusChanged(ptr.Pointer(), C.int(int32(progress)))
	}
}

//export callbackQMediaPlayerControl_Duration
func callbackQMediaPlayerControl_Duration(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaPlayerControl::duration")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::duration"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(0)
}

func (ptr *QMediaPlayerControl) ConnectDuration(f func() int64) {
	defer qt.Recovering("connect QMediaPlayerControl::duration")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::duration", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectDuration() {
	defer qt.Recovering("disconnect QMediaPlayerControl::duration")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::duration")
	}
}

func (ptr *QMediaPlayerControl) Duration() int64 {
	defer qt.Recovering("QMediaPlayerControl::duration")

	if ptr.Pointer() != nil {
		return int64(C.QMediaPlayerControl_Duration(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaPlayerControl_DurationChanged
func callbackQMediaPlayerControl_DurationChanged(ptr unsafe.Pointer, duration C.longlong) {
	defer qt.Recovering("callback QMediaPlayerControl::durationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::durationChanged"); signal != nil {
		signal.(func(int64))(int64(duration))
	}

}

func (ptr *QMediaPlayerControl) ConnectDurationChanged(f func(duration int64)) {
	defer qt.Recovering("connect QMediaPlayerControl::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectDurationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::durationChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectDurationChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectDurationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::durationChanged")
	}
}

func (ptr *QMediaPlayerControl) DurationChanged(duration int64) {
	defer qt.Recovering("QMediaPlayerControl::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DurationChanged(ptr.Pointer(), C.longlong(duration))
	}
}

//export callbackQMediaPlayerControl_Error
func callbackQMediaPlayerControl_Error(ptr unsafe.Pointer, error C.int, errorString *C.char) {
	defer qt.Recovering("callback QMediaPlayerControl::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::error"); signal != nil {
		signal.(func(int, string))(int(int32(error)), C.GoString(errorString))
	}

}

func (ptr *QMediaPlayerControl) ConnectError(f func(error int, errorString string)) {
	defer qt.Recovering("connect QMediaPlayerControl::error")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectError(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::error", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectError() {
	defer qt.Recovering("disconnect QMediaPlayerControl::error")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectError(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::error")
	}
}

func (ptr *QMediaPlayerControl) Error(error int, errorString string) {
	defer qt.Recovering("QMediaPlayerControl::error")

	if ptr.Pointer() != nil {
		var errorStringC = C.CString(errorString)
		defer C.free(unsafe.Pointer(errorStringC))
		C.QMediaPlayerControl_Error(ptr.Pointer(), C.int(int32(error)), errorStringC)
	}
}

//export callbackQMediaPlayerControl_IsAudioAvailable
func callbackQMediaPlayerControl_IsAudioAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayerControl::isAudioAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::isAudioAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMediaPlayerControl) ConnectIsAudioAvailable(f func() bool) {
	defer qt.Recovering("connect QMediaPlayerControl::isAudioAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::isAudioAvailable", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectIsAudioAvailable() {
	defer qt.Recovering("disconnect QMediaPlayerControl::isAudioAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::isAudioAvailable")
	}
}

func (ptr *QMediaPlayerControl) IsAudioAvailable() bool {
	defer qt.Recovering("QMediaPlayerControl::isAudioAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaPlayerControl_IsAudioAvailable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMediaPlayerControl_IsMuted
func callbackQMediaPlayerControl_IsMuted(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayerControl::isMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::isMuted"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMediaPlayerControl) ConnectIsMuted(f func() bool) {
	defer qt.Recovering("connect QMediaPlayerControl::isMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::isMuted", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectIsMuted() {
	defer qt.Recovering("disconnect QMediaPlayerControl::isMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::isMuted")
	}
}

func (ptr *QMediaPlayerControl) IsMuted() bool {
	defer qt.Recovering("QMediaPlayerControl::isMuted")

	if ptr.Pointer() != nil {
		return C.QMediaPlayerControl_IsMuted(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMediaPlayerControl_IsSeekable
func callbackQMediaPlayerControl_IsSeekable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayerControl::isSeekable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::isSeekable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMediaPlayerControl) ConnectIsSeekable(f func() bool) {
	defer qt.Recovering("connect QMediaPlayerControl::isSeekable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::isSeekable", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectIsSeekable() {
	defer qt.Recovering("disconnect QMediaPlayerControl::isSeekable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::isSeekable")
	}
}

func (ptr *QMediaPlayerControl) IsSeekable() bool {
	defer qt.Recovering("QMediaPlayerControl::isSeekable")

	if ptr.Pointer() != nil {
		return C.QMediaPlayerControl_IsSeekable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMediaPlayerControl_IsVideoAvailable
func callbackQMediaPlayerControl_IsVideoAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayerControl::isVideoAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::isVideoAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMediaPlayerControl) ConnectIsVideoAvailable(f func() bool) {
	defer qt.Recovering("connect QMediaPlayerControl::isVideoAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::isVideoAvailable", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectIsVideoAvailable() {
	defer qt.Recovering("disconnect QMediaPlayerControl::isVideoAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::isVideoAvailable")
	}
}

func (ptr *QMediaPlayerControl) IsVideoAvailable() bool {
	defer qt.Recovering("QMediaPlayerControl::isVideoAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaPlayerControl_IsVideoAvailable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMediaPlayerControl_Media
func callbackQMediaPlayerControl_Media(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaPlayerControl::media")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::media"); signal != nil {
		return PointerFromQMediaContent(signal.(func() *QMediaContent)())
	}

	return PointerFromQMediaContent(nil)
}

func (ptr *QMediaPlayerControl) ConnectMedia(f func() *QMediaContent) {
	defer qt.Recovering("connect QMediaPlayerControl::media")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::media", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectMedia() {
	defer qt.Recovering("disconnect QMediaPlayerControl::media")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::media")
	}
}

func (ptr *QMediaPlayerControl) Media() *QMediaContent {
	defer qt.Recovering("QMediaPlayerControl::media")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaContentFromPointer(C.QMediaPlayerControl_Media(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
		return tmpValue
	}
	return nil
}

//export callbackQMediaPlayerControl_MediaChanged
func callbackQMediaPlayerControl_MediaChanged(ptr unsafe.Pointer, content unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::mediaChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::mediaChanged"); signal != nil {
		signal.(func(*QMediaContent))(NewQMediaContentFromPointer(content))
	}

}

func (ptr *QMediaPlayerControl) ConnectMediaChanged(f func(content *QMediaContent)) {
	defer qt.Recovering("connect QMediaPlayerControl::mediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectMediaChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mediaChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectMediaChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::mediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectMediaChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mediaChanged")
	}
}

func (ptr *QMediaPlayerControl) MediaChanged(content QMediaContent_ITF) {
	defer qt.Recovering("QMediaPlayerControl::mediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_MediaChanged(ptr.Pointer(), PointerFromQMediaContent(content))
	}
}

//export callbackQMediaPlayerControl_MediaStatus
func callbackQMediaPlayerControl_MediaStatus(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaPlayerControl::mediaStatus")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::mediaStatus"); signal != nil {
		return C.longlong(signal.(func() QMediaPlayer__MediaStatus)())
	}

	return C.longlong(0)
}

func (ptr *QMediaPlayerControl) ConnectMediaStatus(f func() QMediaPlayer__MediaStatus) {
	defer qt.Recovering("connect QMediaPlayerControl::mediaStatus")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mediaStatus", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectMediaStatus() {
	defer qt.Recovering("disconnect QMediaPlayerControl::mediaStatus")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mediaStatus")
	}
}

func (ptr *QMediaPlayerControl) MediaStatus() QMediaPlayer__MediaStatus {
	defer qt.Recovering("QMediaPlayerControl::mediaStatus")

	if ptr.Pointer() != nil {
		return QMediaPlayer__MediaStatus(C.QMediaPlayerControl_MediaStatus(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaPlayerControl_MediaStatusChanged
func callbackQMediaPlayerControl_MediaStatusChanged(ptr unsafe.Pointer, status C.longlong) {
	defer qt.Recovering("callback QMediaPlayerControl::mediaStatusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::mediaStatusChanged"); signal != nil {
		signal.(func(QMediaPlayer__MediaStatus))(QMediaPlayer__MediaStatus(status))
	}

}

func (ptr *QMediaPlayerControl) ConnectMediaStatusChanged(f func(status QMediaPlayer__MediaStatus)) {
	defer qt.Recovering("connect QMediaPlayerControl::mediaStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectMediaStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mediaStatusChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectMediaStatusChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::mediaStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectMediaStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mediaStatusChanged")
	}
}

func (ptr *QMediaPlayerControl) MediaStatusChanged(status QMediaPlayer__MediaStatus) {
	defer qt.Recovering("QMediaPlayerControl::mediaStatusChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_MediaStatusChanged(ptr.Pointer(), C.longlong(status))
	}
}

//export callbackQMediaPlayerControl_MediaStream
func callbackQMediaPlayerControl_MediaStream(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaPlayerControl::mediaStream")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::mediaStream"); signal != nil {
		return core.PointerFromQIODevice(signal.(func() *core.QIODevice)())
	}

	return core.PointerFromQIODevice(nil)
}

func (ptr *QMediaPlayerControl) ConnectMediaStream(f func() *core.QIODevice) {
	defer qt.Recovering("connect QMediaPlayerControl::mediaStream")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mediaStream", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectMediaStream() {
	defer qt.Recovering("disconnect QMediaPlayerControl::mediaStream")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mediaStream")
	}
}

func (ptr *QMediaPlayerControl) MediaStream() *core.QIODevice {
	defer qt.Recovering("QMediaPlayerControl::mediaStream")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QMediaPlayerControl_MediaStream(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQMediaPlayerControl_MutedChanged
func callbackQMediaPlayerControl_MutedChanged(ptr unsafe.Pointer, mute C.char) {
	defer qt.Recovering("callback QMediaPlayerControl::mutedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::mutedChanged"); signal != nil {
		signal.(func(bool))(int8(mute) != 0)
	}

}

func (ptr *QMediaPlayerControl) ConnectMutedChanged(f func(mute bool)) {
	defer qt.Recovering("connect QMediaPlayerControl::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectMutedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mutedChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectMutedChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectMutedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::mutedChanged")
	}
}

func (ptr *QMediaPlayerControl) MutedChanged(mute bool) {
	defer qt.Recovering("QMediaPlayerControl::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_MutedChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(mute))))
	}
}

//export callbackQMediaPlayerControl_Pause
func callbackQMediaPlayerControl_Pause(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::pause")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::pause"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlayerControl) ConnectPause(f func()) {
	defer qt.Recovering("connect QMediaPlayerControl::pause")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::pause", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectPause() {
	defer qt.Recovering("disconnect QMediaPlayerControl::pause")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::pause")
	}
}

func (ptr *QMediaPlayerControl) Pause() {
	defer qt.Recovering("QMediaPlayerControl::pause")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_Pause(ptr.Pointer())
	}
}

//export callbackQMediaPlayerControl_Play
func callbackQMediaPlayerControl_Play(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::play")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::play"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlayerControl) ConnectPlay(f func()) {
	defer qt.Recovering("connect QMediaPlayerControl::play")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::play", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectPlay() {
	defer qt.Recovering("disconnect QMediaPlayerControl::play")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::play")
	}
}

func (ptr *QMediaPlayerControl) Play() {
	defer qt.Recovering("QMediaPlayerControl::play")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_Play(ptr.Pointer())
	}
}

//export callbackQMediaPlayerControl_PlaybackRate
func callbackQMediaPlayerControl_PlaybackRate(ptr unsafe.Pointer) C.double {
	defer qt.Recovering("callback QMediaPlayerControl::playbackRate")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::playbackRate"); signal != nil {
		return C.double(signal.(func() float64)())
	}

	return C.double(0)
}

func (ptr *QMediaPlayerControl) ConnectPlaybackRate(f func() float64) {
	defer qt.Recovering("connect QMediaPlayerControl::playbackRate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::playbackRate", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectPlaybackRate() {
	defer qt.Recovering("disconnect QMediaPlayerControl::playbackRate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::playbackRate")
	}
}

func (ptr *QMediaPlayerControl) PlaybackRate() float64 {
	defer qt.Recovering("QMediaPlayerControl::playbackRate")

	if ptr.Pointer() != nil {
		return float64(C.QMediaPlayerControl_PlaybackRate(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaPlayerControl_PlaybackRateChanged
func callbackQMediaPlayerControl_PlaybackRateChanged(ptr unsafe.Pointer, rate C.double) {
	defer qt.Recovering("callback QMediaPlayerControl::playbackRateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::playbackRateChanged"); signal != nil {
		signal.(func(float64))(float64(rate))
	}

}

func (ptr *QMediaPlayerControl) ConnectPlaybackRateChanged(f func(rate float64)) {
	defer qt.Recovering("connect QMediaPlayerControl::playbackRateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectPlaybackRateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::playbackRateChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectPlaybackRateChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::playbackRateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectPlaybackRateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::playbackRateChanged")
	}
}

func (ptr *QMediaPlayerControl) PlaybackRateChanged(rate float64) {
	defer qt.Recovering("QMediaPlayerControl::playbackRateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_PlaybackRateChanged(ptr.Pointer(), C.double(rate))
	}
}

//export callbackQMediaPlayerControl_Position
func callbackQMediaPlayerControl_Position(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaPlayerControl::position")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::position"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(0)
}

func (ptr *QMediaPlayerControl) ConnectPosition(f func() int64) {
	defer qt.Recovering("connect QMediaPlayerControl::position")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::position", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectPosition() {
	defer qt.Recovering("disconnect QMediaPlayerControl::position")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::position")
	}
}

func (ptr *QMediaPlayerControl) Position() int64 {
	defer qt.Recovering("QMediaPlayerControl::position")

	if ptr.Pointer() != nil {
		return int64(C.QMediaPlayerControl_Position(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaPlayerControl_PositionChanged
func callbackQMediaPlayerControl_PositionChanged(ptr unsafe.Pointer, position C.longlong) {
	defer qt.Recovering("callback QMediaPlayerControl::positionChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::positionChanged"); signal != nil {
		signal.(func(int64))(int64(position))
	}

}

func (ptr *QMediaPlayerControl) ConnectPositionChanged(f func(position int64)) {
	defer qt.Recovering("connect QMediaPlayerControl::positionChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectPositionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::positionChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectPositionChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::positionChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectPositionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::positionChanged")
	}
}

func (ptr *QMediaPlayerControl) PositionChanged(position int64) {
	defer qt.Recovering("QMediaPlayerControl::positionChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_PositionChanged(ptr.Pointer(), C.longlong(position))
	}
}

//export callbackQMediaPlayerControl_SeekableChanged
func callbackQMediaPlayerControl_SeekableChanged(ptr unsafe.Pointer, seekable C.char) {
	defer qt.Recovering("callback QMediaPlayerControl::seekableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::seekableChanged"); signal != nil {
		signal.(func(bool))(int8(seekable) != 0)
	}

}

func (ptr *QMediaPlayerControl) ConnectSeekableChanged(f func(seekable bool)) {
	defer qt.Recovering("connect QMediaPlayerControl::seekableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectSeekableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::seekableChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectSeekableChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::seekableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectSeekableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::seekableChanged")
	}
}

func (ptr *QMediaPlayerControl) SeekableChanged(seekable bool) {
	defer qt.Recovering("QMediaPlayerControl::seekableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_SeekableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(seekable))))
	}
}

//export callbackQMediaPlayerControl_SetMedia
func callbackQMediaPlayerControl_SetMedia(ptr unsafe.Pointer, media unsafe.Pointer, stream unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::setMedia")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::setMedia"); signal != nil {
		signal.(func(*QMediaContent, *core.QIODevice))(NewQMediaContentFromPointer(media), core.NewQIODeviceFromPointer(stream))
	}

}

func (ptr *QMediaPlayerControl) ConnectSetMedia(f func(media *QMediaContent, stream *core.QIODevice)) {
	defer qt.Recovering("connect QMediaPlayerControl::setMedia")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setMedia", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectSetMedia(media QMediaContent_ITF, stream core.QIODevice_ITF) {
	defer qt.Recovering("disconnect QMediaPlayerControl::setMedia")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setMedia")
	}
}

func (ptr *QMediaPlayerControl) SetMedia(media QMediaContent_ITF, stream core.QIODevice_ITF) {
	defer qt.Recovering("QMediaPlayerControl::setMedia")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_SetMedia(ptr.Pointer(), PointerFromQMediaContent(media), core.PointerFromQIODevice(stream))
	}
}

//export callbackQMediaPlayerControl_SetMuted
func callbackQMediaPlayerControl_SetMuted(ptr unsafe.Pointer, mute C.char) {
	defer qt.Recovering("callback QMediaPlayerControl::setMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::setMuted"); signal != nil {
		signal.(func(bool))(int8(mute) != 0)
	}

}

func (ptr *QMediaPlayerControl) ConnectSetMuted(f func(mute bool)) {
	defer qt.Recovering("connect QMediaPlayerControl::setMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setMuted", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectSetMuted(mute bool) {
	defer qt.Recovering("disconnect QMediaPlayerControl::setMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setMuted")
	}
}

func (ptr *QMediaPlayerControl) SetMuted(mute bool) {
	defer qt.Recovering("QMediaPlayerControl::setMuted")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_SetMuted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(mute))))
	}
}

//export callbackQMediaPlayerControl_SetPlaybackRate
func callbackQMediaPlayerControl_SetPlaybackRate(ptr unsafe.Pointer, rate C.double) {
	defer qt.Recovering("callback QMediaPlayerControl::setPlaybackRate")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::setPlaybackRate"); signal != nil {
		signal.(func(float64))(float64(rate))
	}

}

func (ptr *QMediaPlayerControl) ConnectSetPlaybackRate(f func(rate float64)) {
	defer qt.Recovering("connect QMediaPlayerControl::setPlaybackRate")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setPlaybackRate", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectSetPlaybackRate(rate float64) {
	defer qt.Recovering("disconnect QMediaPlayerControl::setPlaybackRate")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setPlaybackRate")
	}
}

func (ptr *QMediaPlayerControl) SetPlaybackRate(rate float64) {
	defer qt.Recovering("QMediaPlayerControl::setPlaybackRate")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_SetPlaybackRate(ptr.Pointer(), C.double(rate))
	}
}

//export callbackQMediaPlayerControl_SetPosition
func callbackQMediaPlayerControl_SetPosition(ptr unsafe.Pointer, position C.longlong) {
	defer qt.Recovering("callback QMediaPlayerControl::setPosition")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::setPosition"); signal != nil {
		signal.(func(int64))(int64(position))
	}

}

func (ptr *QMediaPlayerControl) ConnectSetPosition(f func(position int64)) {
	defer qt.Recovering("connect QMediaPlayerControl::setPosition")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setPosition", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectSetPosition(position int64) {
	defer qt.Recovering("disconnect QMediaPlayerControl::setPosition")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setPosition")
	}
}

func (ptr *QMediaPlayerControl) SetPosition(position int64) {
	defer qt.Recovering("QMediaPlayerControl::setPosition")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_SetPosition(ptr.Pointer(), C.longlong(position))
	}
}

//export callbackQMediaPlayerControl_SetVolume
func callbackQMediaPlayerControl_SetVolume(ptr unsafe.Pointer, volume C.int) {
	defer qt.Recovering("callback QMediaPlayerControl::setVolume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::setVolume"); signal != nil {
		signal.(func(int))(int(int32(volume)))
	}

}

func (ptr *QMediaPlayerControl) ConnectSetVolume(f func(volume int)) {
	defer qt.Recovering("connect QMediaPlayerControl::setVolume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setVolume", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectSetVolume(volume int) {
	defer qt.Recovering("disconnect QMediaPlayerControl::setVolume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::setVolume")
	}
}

func (ptr *QMediaPlayerControl) SetVolume(volume int) {
	defer qt.Recovering("QMediaPlayerControl::setVolume")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_SetVolume(ptr.Pointer(), C.int(int32(volume)))
	}
}

//export callbackQMediaPlayerControl_State
func callbackQMediaPlayerControl_State(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaPlayerControl::state")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::state"); signal != nil {
		return C.longlong(signal.(func() QMediaPlayer__State)())
	}

	return C.longlong(0)
}

func (ptr *QMediaPlayerControl) ConnectState(f func() QMediaPlayer__State) {
	defer qt.Recovering("connect QMediaPlayerControl::state")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::state", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectState() {
	defer qt.Recovering("disconnect QMediaPlayerControl::state")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::state")
	}
}

func (ptr *QMediaPlayerControl) State() QMediaPlayer__State {
	defer qt.Recovering("QMediaPlayerControl::state")

	if ptr.Pointer() != nil {
		return QMediaPlayer__State(C.QMediaPlayerControl_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaPlayerControl_StateChanged
func callbackQMediaPlayerControl_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QMediaPlayerControl::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::stateChanged"); signal != nil {
		signal.(func(QMediaPlayer__State))(QMediaPlayer__State(state))
	}

}

func (ptr *QMediaPlayerControl) ConnectStateChanged(f func(state QMediaPlayer__State)) {
	defer qt.Recovering("connect QMediaPlayerControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::stateChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::stateChanged")
	}
}

func (ptr *QMediaPlayerControl) StateChanged(state QMediaPlayer__State) {
	defer qt.Recovering("QMediaPlayerControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQMediaPlayerControl_Stop
func callbackQMediaPlayerControl_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlayerControl) ConnectStop(f func()) {
	defer qt.Recovering("connect QMediaPlayerControl::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::stop", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectStop() {
	defer qt.Recovering("disconnect QMediaPlayerControl::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::stop")
	}
}

func (ptr *QMediaPlayerControl) Stop() {
	defer qt.Recovering("QMediaPlayerControl::stop")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_Stop(ptr.Pointer())
	}
}

//export callbackQMediaPlayerControl_VideoAvailableChanged
func callbackQMediaPlayerControl_VideoAvailableChanged(ptr unsafe.Pointer, video C.char) {
	defer qt.Recovering("callback QMediaPlayerControl::videoAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::videoAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(video) != 0)
	}

}

func (ptr *QMediaPlayerControl) ConnectVideoAvailableChanged(f func(video bool)) {
	defer qt.Recovering("connect QMediaPlayerControl::videoAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectVideoAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::videoAvailableChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectVideoAvailableChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::videoAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectVideoAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::videoAvailableChanged")
	}
}

func (ptr *QMediaPlayerControl) VideoAvailableChanged(video bool) {
	defer qt.Recovering("QMediaPlayerControl::videoAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_VideoAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(video))))
	}
}

//export callbackQMediaPlayerControl_Volume
func callbackQMediaPlayerControl_Volume(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QMediaPlayerControl::volume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::volume"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QMediaPlayerControl) ConnectVolume(f func() int) {
	defer qt.Recovering("connect QMediaPlayerControl::volume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::volume", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectVolume() {
	defer qt.Recovering("disconnect QMediaPlayerControl::volume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::volume")
	}
}

func (ptr *QMediaPlayerControl) Volume() int {
	defer qt.Recovering("QMediaPlayerControl::volume")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaPlayerControl_Volume(ptr.Pointer())))
	}
	return 0
}

//export callbackQMediaPlayerControl_VolumeChanged
func callbackQMediaPlayerControl_VolumeChanged(ptr unsafe.Pointer, volume C.int) {
	defer qt.Recovering("callback QMediaPlayerControl::volumeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::volumeChanged"); signal != nil {
		signal.(func(int))(int(int32(volume)))
	}

}

func (ptr *QMediaPlayerControl) ConnectVolumeChanged(f func(volume int)) {
	defer qt.Recovering("connect QMediaPlayerControl::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectVolumeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::volumeChanged", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectVolumeChanged() {
	defer qt.Recovering("disconnect QMediaPlayerControl::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectVolumeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::volumeChanged")
	}
}

func (ptr *QMediaPlayerControl) VolumeChanged(volume int) {
	defer qt.Recovering("QMediaPlayerControl::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_VolumeChanged(ptr.Pointer(), C.int(int32(volume)))
	}
}

func (ptr *QMediaPlayerControl) DestroyQMediaPlayerControl() {
	defer qt.Recovering("QMediaPlayerControl::~QMediaPlayerControl")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DestroyQMediaPlayerControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaPlayerControl_TimerEvent
func callbackQMediaPlayerControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaPlayerControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaPlayerControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaPlayerControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::timerEvent", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaPlayerControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::timerEvent")
	}
}

func (ptr *QMediaPlayerControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaPlayerControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaPlayerControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaPlayerControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaPlayerControl_ChildEvent
func callbackQMediaPlayerControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaPlayerControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaPlayerControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaPlayerControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::childEvent", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaPlayerControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::childEvent")
	}
}

func (ptr *QMediaPlayerControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaPlayerControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaPlayerControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaPlayerControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaPlayerControl_ConnectNotify
func callbackQMediaPlayerControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaPlayerControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaPlayerControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaPlayerControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::connectNotify", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaPlayerControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::connectNotify")
	}
}

func (ptr *QMediaPlayerControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlayerControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaPlayerControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlayerControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaPlayerControl_CustomEvent
func callbackQMediaPlayerControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaPlayerControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaPlayerControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaPlayerControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::customEvent", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaPlayerControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::customEvent")
	}
}

func (ptr *QMediaPlayerControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaPlayerControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaPlayerControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaPlayerControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaPlayerControl_DeleteLater
func callbackQMediaPlayerControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaPlayerControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaPlayerControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaPlayerControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::deleteLater", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaPlayerControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::deleteLater")
	}
}

func (ptr *QMediaPlayerControl) DeleteLater() {
	defer qt.Recovering("QMediaPlayerControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaPlayerControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaPlayerControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaPlayerControl_DisconnectNotify
func callbackQMediaPlayerControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlayerControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaPlayerControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaPlayerControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaPlayerControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::disconnectNotify", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaPlayerControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::disconnectNotify")
	}
}

func (ptr *QMediaPlayerControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlayerControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaPlayerControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlayerControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlayerControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaPlayerControl_Event
func callbackQMediaPlayerControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayerControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaPlayerControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaPlayerControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaPlayerControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::event", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaPlayerControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::event")
	}
}

func (ptr *QMediaPlayerControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlayerControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaPlayerControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaPlayerControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlayerControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaPlayerControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaPlayerControl_EventFilter
func callbackQMediaPlayerControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlayerControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaPlayerControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaPlayerControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaPlayerControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::eventFilter", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaPlayerControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::eventFilter")
	}
}

func (ptr *QMediaPlayerControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlayerControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaPlayerControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaPlayerControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlayerControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaPlayerControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaPlayerControl_MetaObject
func callbackQMediaPlayerControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaPlayerControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlayerControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaPlayerControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaPlayerControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaPlayerControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::metaObject", f)
	}
}

func (ptr *QMediaPlayerControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaPlayerControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlayerControl::metaObject")
	}
}

func (ptr *QMediaPlayerControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaPlayerControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaPlayerControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaPlayerControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaPlayerControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaPlayerControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QMediaPlaylist::Error
type QMediaPlaylist__Error int64

const (
	QMediaPlaylist__NoError                 = QMediaPlaylist__Error(0)
	QMediaPlaylist__FormatError             = QMediaPlaylist__Error(1)
	QMediaPlaylist__FormatNotSupportedError = QMediaPlaylist__Error(2)
	QMediaPlaylist__NetworkError            = QMediaPlaylist__Error(3)
	QMediaPlaylist__AccessDeniedError       = QMediaPlaylist__Error(4)
)

//QMediaPlaylist::PlaybackMode
type QMediaPlaylist__PlaybackMode int64

const (
	QMediaPlaylist__CurrentItemOnce   = QMediaPlaylist__PlaybackMode(0)
	QMediaPlaylist__CurrentItemInLoop = QMediaPlaylist__PlaybackMode(1)
	QMediaPlaylist__Sequential        = QMediaPlaylist__PlaybackMode(2)
	QMediaPlaylist__Loop              = QMediaPlaylist__PlaybackMode(3)
	QMediaPlaylist__Random            = QMediaPlaylist__PlaybackMode(4)
)

type QMediaPlaylist struct {
	core.QObject
	QMediaBindableInterface
}

type QMediaPlaylist_ITF interface {
	core.QObject_ITF
	QMediaBindableInterface_ITF
	QMediaPlaylist_PTR() *QMediaPlaylist
}

func (p *QMediaPlaylist) QMediaPlaylist_PTR() *QMediaPlaylist {
	return p
}

func (p *QMediaPlaylist) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QMediaPlaylist) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QMediaBindableInterface_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaPlaylist(ptr QMediaPlaylist_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaPlaylist_PTR().Pointer()
	}
	return nil
}

func NewQMediaPlaylistFromPointer(ptr unsafe.Pointer) *QMediaPlaylist {
	var n = new(QMediaPlaylist)
	n.SetPointer(ptr)
	return n
}
func (ptr *QMediaPlaylist) PlaybackMode() QMediaPlaylist__PlaybackMode {
	defer qt.Recovering("QMediaPlaylist::playbackMode")

	if ptr.Pointer() != nil {
		return QMediaPlaylist__PlaybackMode(C.QMediaPlaylist_PlaybackMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaPlaylist) SetPlaybackMode(mode QMediaPlaylist__PlaybackMode) {
	defer qt.Recovering("QMediaPlaylist::setPlaybackMode")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_SetPlaybackMode(ptr.Pointer(), C.longlong(mode))
	}
}

func NewQMediaPlaylist(parent core.QObject_ITF) *QMediaPlaylist {
	defer qt.Recovering("QMediaPlaylist::QMediaPlaylist")

	var tmpValue = NewQMediaPlaylistFromPointer(C.QMediaPlaylist_NewQMediaPlaylist(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QMediaPlaylist) AddMedia(content QMediaContent_ITF) bool {
	defer qt.Recovering("QMediaPlaylist::addMedia")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_AddMedia(ptr.Pointer(), PointerFromQMediaContent(content)) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) Clear() bool {
	defer qt.Recovering("QMediaPlaylist::clear")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_Clear(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) CurrentIndex() int {
	defer qt.Recovering("QMediaPlaylist::currentIndex")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaPlaylist_CurrentIndex(ptr.Pointer())))
	}
	return 0
}

//export callbackQMediaPlaylist_CurrentIndexChanged
func callbackQMediaPlaylist_CurrentIndexChanged(ptr unsafe.Pointer, position C.int) {
	defer qt.Recovering("callback QMediaPlaylist::currentIndexChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::currentIndexChanged"); signal != nil {
		signal.(func(int))(int(int32(position)))
	}

}

func (ptr *QMediaPlaylist) ConnectCurrentIndexChanged(f func(position int)) {
	defer qt.Recovering("connect QMediaPlaylist::currentIndexChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectCurrentIndexChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::currentIndexChanged", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectCurrentIndexChanged() {
	defer qt.Recovering("disconnect QMediaPlaylist::currentIndexChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectCurrentIndexChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::currentIndexChanged")
	}
}

func (ptr *QMediaPlaylist) CurrentIndexChanged(position int) {
	defer qt.Recovering("QMediaPlaylist::currentIndexChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_CurrentIndexChanged(ptr.Pointer(), C.int(int32(position)))
	}
}

func (ptr *QMediaPlaylist) CurrentMedia() *QMediaContent {
	defer qt.Recovering("QMediaPlaylist::currentMedia")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaContentFromPointer(C.QMediaPlaylist_CurrentMedia(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
		return tmpValue
	}
	return nil
}

//export callbackQMediaPlaylist_CurrentMediaChanged
func callbackQMediaPlaylist_CurrentMediaChanged(ptr unsafe.Pointer, content unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::currentMediaChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::currentMediaChanged"); signal != nil {
		signal.(func(*QMediaContent))(NewQMediaContentFromPointer(content))
	}

}

func (ptr *QMediaPlaylist) ConnectCurrentMediaChanged(f func(content *QMediaContent)) {
	defer qt.Recovering("connect QMediaPlaylist::currentMediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectCurrentMediaChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::currentMediaChanged", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectCurrentMediaChanged() {
	defer qt.Recovering("disconnect QMediaPlaylist::currentMediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectCurrentMediaChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::currentMediaChanged")
	}
}

func (ptr *QMediaPlaylist) CurrentMediaChanged(content QMediaContent_ITF) {
	defer qt.Recovering("QMediaPlaylist::currentMediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_CurrentMediaChanged(ptr.Pointer(), PointerFromQMediaContent(content))
	}
}

func (ptr *QMediaPlaylist) Error() QMediaPlaylist__Error {
	defer qt.Recovering("QMediaPlaylist::error")

	if ptr.Pointer() != nil {
		return QMediaPlaylist__Error(C.QMediaPlaylist_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaPlaylist) ErrorString() string {
	defer qt.Recovering("QMediaPlaylist::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMediaPlaylist_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMediaPlaylist) InsertMedia(pos int, content QMediaContent_ITF) bool {
	defer qt.Recovering("QMediaPlaylist::insertMedia")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_InsertMedia(ptr.Pointer(), C.int(int32(pos)), PointerFromQMediaContent(content)) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) IsEmpty() bool {
	defer qt.Recovering("QMediaPlaylist::isEmpty")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) IsReadOnly() bool {
	defer qt.Recovering("QMediaPlaylist::isReadOnly")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_IsReadOnly(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) Load3(device core.QIODevice_ITF, format string) {
	defer qt.Recovering("QMediaPlaylist::load")

	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		C.QMediaPlaylist_Load3(ptr.Pointer(), core.PointerFromQIODevice(device), formatC)
	}
}

func (ptr *QMediaPlaylist) Load(request network.QNetworkRequest_ITF, format string) {
	defer qt.Recovering("QMediaPlaylist::load")

	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		C.QMediaPlaylist_Load(ptr.Pointer(), network.PointerFromQNetworkRequest(request), formatC)
	}
}

func (ptr *QMediaPlaylist) Load2(location core.QUrl_ITF, format string) {
	defer qt.Recovering("QMediaPlaylist::load")

	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		C.QMediaPlaylist_Load2(ptr.Pointer(), core.PointerFromQUrl(location), formatC)
	}
}

//export callbackQMediaPlaylist_LoadFailed
func callbackQMediaPlaylist_LoadFailed(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::loadFailed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::loadFailed"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlaylist) ConnectLoadFailed(f func()) {
	defer qt.Recovering("connect QMediaPlaylist::loadFailed")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectLoadFailed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::loadFailed", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectLoadFailed() {
	defer qt.Recovering("disconnect QMediaPlaylist::loadFailed")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectLoadFailed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::loadFailed")
	}
}

func (ptr *QMediaPlaylist) LoadFailed() {
	defer qt.Recovering("QMediaPlaylist::loadFailed")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_LoadFailed(ptr.Pointer())
	}
}

//export callbackQMediaPlaylist_Loaded
func callbackQMediaPlaylist_Loaded(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::loaded")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::loaded"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlaylist) ConnectLoaded(f func()) {
	defer qt.Recovering("connect QMediaPlaylist::loaded")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectLoaded(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::loaded", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectLoaded() {
	defer qt.Recovering("disconnect QMediaPlaylist::loaded")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectLoaded(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::loaded")
	}
}

func (ptr *QMediaPlaylist) Loaded() {
	defer qt.Recovering("QMediaPlaylist::loaded")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_Loaded(ptr.Pointer())
	}
}

func (ptr *QMediaPlaylist) Media(index int) *QMediaContent {
	defer qt.Recovering("QMediaPlaylist::media")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaContentFromPointer(C.QMediaPlaylist_Media(ptr.Pointer(), C.int(int32(index))))
		runtime.SetFinalizer(tmpValue, (*QMediaContent).DestroyQMediaContent)
		return tmpValue
	}
	return nil
}

//export callbackQMediaPlaylist_MediaAboutToBeInserted
func callbackQMediaPlaylist_MediaAboutToBeInserted(ptr unsafe.Pointer, start C.int, end C.int) {
	defer qt.Recovering("callback QMediaPlaylist::mediaAboutToBeInserted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::mediaAboutToBeInserted"); signal != nil {
		signal.(func(int, int))(int(int32(start)), int(int32(end)))
	}

}

func (ptr *QMediaPlaylist) ConnectMediaAboutToBeInserted(f func(start int, end int)) {
	defer qt.Recovering("connect QMediaPlaylist::mediaAboutToBeInserted")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectMediaAboutToBeInserted(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaAboutToBeInserted", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectMediaAboutToBeInserted() {
	defer qt.Recovering("disconnect QMediaPlaylist::mediaAboutToBeInserted")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectMediaAboutToBeInserted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaAboutToBeInserted")
	}
}

func (ptr *QMediaPlaylist) MediaAboutToBeInserted(start int, end int) {
	defer qt.Recovering("QMediaPlaylist::mediaAboutToBeInserted")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_MediaAboutToBeInserted(ptr.Pointer(), C.int(int32(start)), C.int(int32(end)))
	}
}

//export callbackQMediaPlaylist_MediaAboutToBeRemoved
func callbackQMediaPlaylist_MediaAboutToBeRemoved(ptr unsafe.Pointer, start C.int, end C.int) {
	defer qt.Recovering("callback QMediaPlaylist::mediaAboutToBeRemoved")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::mediaAboutToBeRemoved"); signal != nil {
		signal.(func(int, int))(int(int32(start)), int(int32(end)))
	}

}

func (ptr *QMediaPlaylist) ConnectMediaAboutToBeRemoved(f func(start int, end int)) {
	defer qt.Recovering("connect QMediaPlaylist::mediaAboutToBeRemoved")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectMediaAboutToBeRemoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaAboutToBeRemoved", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectMediaAboutToBeRemoved() {
	defer qt.Recovering("disconnect QMediaPlaylist::mediaAboutToBeRemoved")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectMediaAboutToBeRemoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaAboutToBeRemoved")
	}
}

func (ptr *QMediaPlaylist) MediaAboutToBeRemoved(start int, end int) {
	defer qt.Recovering("QMediaPlaylist::mediaAboutToBeRemoved")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_MediaAboutToBeRemoved(ptr.Pointer(), C.int(int32(start)), C.int(int32(end)))
	}
}

//export callbackQMediaPlaylist_MediaChanged
func callbackQMediaPlaylist_MediaChanged(ptr unsafe.Pointer, start C.int, end C.int) {
	defer qt.Recovering("callback QMediaPlaylist::mediaChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::mediaChanged"); signal != nil {
		signal.(func(int, int))(int(int32(start)), int(int32(end)))
	}

}

func (ptr *QMediaPlaylist) ConnectMediaChanged(f func(start int, end int)) {
	defer qt.Recovering("connect QMediaPlaylist::mediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectMediaChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaChanged", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectMediaChanged() {
	defer qt.Recovering("disconnect QMediaPlaylist::mediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectMediaChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaChanged")
	}
}

func (ptr *QMediaPlaylist) MediaChanged(start int, end int) {
	defer qt.Recovering("QMediaPlaylist::mediaChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_MediaChanged(ptr.Pointer(), C.int(int32(start)), C.int(int32(end)))
	}
}

func (ptr *QMediaPlaylist) MediaCount() int {
	defer qt.Recovering("QMediaPlaylist::mediaCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaPlaylist_MediaCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQMediaPlaylist_MediaInserted
func callbackQMediaPlaylist_MediaInserted(ptr unsafe.Pointer, start C.int, end C.int) {
	defer qt.Recovering("callback QMediaPlaylist::mediaInserted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::mediaInserted"); signal != nil {
		signal.(func(int, int))(int(int32(start)), int(int32(end)))
	}

}

func (ptr *QMediaPlaylist) ConnectMediaInserted(f func(start int, end int)) {
	defer qt.Recovering("connect QMediaPlaylist::mediaInserted")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectMediaInserted(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaInserted", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectMediaInserted() {
	defer qt.Recovering("disconnect QMediaPlaylist::mediaInserted")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectMediaInserted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaInserted")
	}
}

func (ptr *QMediaPlaylist) MediaInserted(start int, end int) {
	defer qt.Recovering("QMediaPlaylist::mediaInserted")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_MediaInserted(ptr.Pointer(), C.int(int32(start)), C.int(int32(end)))
	}
}

//export callbackQMediaPlaylist_MediaObject
func callbackQMediaPlaylist_MediaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaPlaylist::mediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::mediaObject"); signal != nil {
		return PointerFromQMediaObject(signal.(func() *QMediaObject)())
	}

	return PointerFromQMediaObject(NewQMediaPlaylistFromPointer(ptr).MediaObjectDefault())
}

func (ptr *QMediaPlaylist) ConnectMediaObject(f func() *QMediaObject) {
	defer qt.Recovering("connect QMediaPlaylist::mediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaObject", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectMediaObject() {
	defer qt.Recovering("disconnect QMediaPlaylist::mediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaObject")
	}
}

func (ptr *QMediaPlaylist) MediaObject() *QMediaObject {
	defer qt.Recovering("QMediaPlaylist::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QMediaPlaylist_MediaObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMediaPlaylist) MediaObjectDefault() *QMediaObject {
	defer qt.Recovering("QMediaPlaylist::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QMediaPlaylist_MediaObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQMediaPlaylist_MediaRemoved
func callbackQMediaPlaylist_MediaRemoved(ptr unsafe.Pointer, start C.int, end C.int) {
	defer qt.Recovering("callback QMediaPlaylist::mediaRemoved")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::mediaRemoved"); signal != nil {
		signal.(func(int, int))(int(int32(start)), int(int32(end)))
	}

}

func (ptr *QMediaPlaylist) ConnectMediaRemoved(f func(start int, end int)) {
	defer qt.Recovering("connect QMediaPlaylist::mediaRemoved")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectMediaRemoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaRemoved", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectMediaRemoved() {
	defer qt.Recovering("disconnect QMediaPlaylist::mediaRemoved")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectMediaRemoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::mediaRemoved")
	}
}

func (ptr *QMediaPlaylist) MediaRemoved(start int, end int) {
	defer qt.Recovering("QMediaPlaylist::mediaRemoved")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_MediaRemoved(ptr.Pointer(), C.int(int32(start)), C.int(int32(end)))
	}
}

func (ptr *QMediaPlaylist) MoveMedia(from int, to int) bool {
	defer qt.Recovering("QMediaPlaylist::moveMedia")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_MoveMedia(ptr.Pointer(), C.int(int32(from)), C.int(int32(to))) != 0
	}
	return false
}

//export callbackQMediaPlaylist_Next
func callbackQMediaPlaylist_Next(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::next")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::next"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlaylist) ConnectNext(f func()) {
	defer qt.Recovering("connect QMediaPlaylist::next")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::next", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectNext() {
	defer qt.Recovering("disconnect QMediaPlaylist::next")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::next")
	}
}

func (ptr *QMediaPlaylist) Next() {
	defer qt.Recovering("QMediaPlaylist::next")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_Next(ptr.Pointer())
	}
}

func (ptr *QMediaPlaylist) NextIndex(steps int) int {
	defer qt.Recovering("QMediaPlaylist::nextIndex")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaPlaylist_NextIndex(ptr.Pointer(), C.int(int32(steps)))))
	}
	return 0
}

//export callbackQMediaPlaylist_PlaybackModeChanged
func callbackQMediaPlaylist_PlaybackModeChanged(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QMediaPlaylist::playbackModeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::playbackModeChanged"); signal != nil {
		signal.(func(QMediaPlaylist__PlaybackMode))(QMediaPlaylist__PlaybackMode(mode))
	}

}

func (ptr *QMediaPlaylist) ConnectPlaybackModeChanged(f func(mode QMediaPlaylist__PlaybackMode)) {
	defer qt.Recovering("connect QMediaPlaylist::playbackModeChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectPlaybackModeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::playbackModeChanged", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectPlaybackModeChanged() {
	defer qt.Recovering("disconnect QMediaPlaylist::playbackModeChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectPlaybackModeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::playbackModeChanged")
	}
}

func (ptr *QMediaPlaylist) PlaybackModeChanged(mode QMediaPlaylist__PlaybackMode) {
	defer qt.Recovering("QMediaPlaylist::playbackModeChanged")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_PlaybackModeChanged(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQMediaPlaylist_Previous
func callbackQMediaPlaylist_Previous(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::previous")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::previous"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlaylist) ConnectPrevious(f func()) {
	defer qt.Recovering("connect QMediaPlaylist::previous")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::previous", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectPrevious() {
	defer qt.Recovering("disconnect QMediaPlaylist::previous")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::previous")
	}
}

func (ptr *QMediaPlaylist) Previous() {
	defer qt.Recovering("QMediaPlaylist::previous")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_Previous(ptr.Pointer())
	}
}

func (ptr *QMediaPlaylist) PreviousIndex(steps int) int {
	defer qt.Recovering("QMediaPlaylist::previousIndex")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaPlaylist_PreviousIndex(ptr.Pointer(), C.int(int32(steps)))))
	}
	return 0
}

func (ptr *QMediaPlaylist) RemoveMedia(pos int) bool {
	defer qt.Recovering("QMediaPlaylist::removeMedia")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_RemoveMedia(ptr.Pointer(), C.int(int32(pos))) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) RemoveMedia2(start int, end int) bool {
	defer qt.Recovering("QMediaPlaylist::removeMedia")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_RemoveMedia2(ptr.Pointer(), C.int(int32(start)), C.int(int32(end))) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) Save2(device core.QIODevice_ITF, format string) bool {
	defer qt.Recovering("QMediaPlaylist::save")

	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QMediaPlaylist_Save2(ptr.Pointer(), core.PointerFromQIODevice(device), formatC) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) Save(location core.QUrl_ITF, format string) bool {
	defer qt.Recovering("QMediaPlaylist::save")

	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QMediaPlaylist_Save(ptr.Pointer(), core.PointerFromQUrl(location), formatC) != 0
	}
	return false
}

//export callbackQMediaPlaylist_SetCurrentIndex
func callbackQMediaPlaylist_SetCurrentIndex(ptr unsafe.Pointer, playlistPosition C.int) {
	defer qt.Recovering("callback QMediaPlaylist::setCurrentIndex")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::setCurrentIndex"); signal != nil {
		signal.(func(int))(int(int32(playlistPosition)))
	}

}

func (ptr *QMediaPlaylist) ConnectSetCurrentIndex(f func(playlistPosition int)) {
	defer qt.Recovering("connect QMediaPlaylist::setCurrentIndex")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::setCurrentIndex", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectSetCurrentIndex(playlistPosition int) {
	defer qt.Recovering("disconnect QMediaPlaylist::setCurrentIndex")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::setCurrentIndex")
	}
}

func (ptr *QMediaPlaylist) SetCurrentIndex(playlistPosition int) {
	defer qt.Recovering("QMediaPlaylist::setCurrentIndex")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_SetCurrentIndex(ptr.Pointer(), C.int(int32(playlistPosition)))
	}
}

//export callbackQMediaPlaylist_Shuffle
func callbackQMediaPlaylist_Shuffle(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::shuffle")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::shuffle"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaPlaylist) ConnectShuffle(f func()) {
	defer qt.Recovering("connect QMediaPlaylist::shuffle")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::shuffle", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectShuffle() {
	defer qt.Recovering("disconnect QMediaPlaylist::shuffle")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::shuffle")
	}
}

func (ptr *QMediaPlaylist) Shuffle() {
	defer qt.Recovering("QMediaPlaylist::shuffle")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_Shuffle(ptr.Pointer())
	}
}

func (ptr *QMediaPlaylist) DestroyQMediaPlaylist() {
	defer qt.Recovering("QMediaPlaylist::~QMediaPlaylist")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DestroyQMediaPlaylist(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaPlaylist_TimerEvent
func callbackQMediaPlaylist_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaPlaylistFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaPlaylist) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaPlaylist::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::timerEvent", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaPlaylist::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::timerEvent")
	}
}

func (ptr *QMediaPlaylist) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaPlaylist::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaPlaylist) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaPlaylist::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaPlaylist_ChildEvent
func callbackQMediaPlaylist_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaPlaylistFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaPlaylist) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaPlaylist::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::childEvent", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaPlaylist::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::childEvent")
	}
}

func (ptr *QMediaPlaylist) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaPlaylist::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaPlaylist) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaPlaylist::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaPlaylist_ConnectNotify
func callbackQMediaPlaylist_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaPlaylistFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaPlaylist) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaPlaylist::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::connectNotify", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaPlaylist::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::connectNotify")
	}
}

func (ptr *QMediaPlaylist) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlaylist::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaPlaylist) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlaylist::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaPlaylist_CustomEvent
func callbackQMediaPlaylist_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaPlaylistFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaPlaylist) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaPlaylist::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::customEvent", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaPlaylist::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::customEvent")
	}
}

func (ptr *QMediaPlaylist) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaPlaylist::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaPlaylist) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaPlaylist::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaPlaylist_DeleteLater
func callbackQMediaPlaylist_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaPlaylistFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaPlaylist) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaPlaylist::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::deleteLater", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaPlaylist::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::deleteLater")
	}
}

func (ptr *QMediaPlaylist) DeleteLater() {
	defer qt.Recovering("QMediaPlaylist::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaPlaylist) DeleteLaterDefault() {
	defer qt.Recovering("QMediaPlaylist::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaPlaylist_DisconnectNotify
func callbackQMediaPlaylist_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaPlaylist::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaPlaylistFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaPlaylist) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaPlaylist::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::disconnectNotify", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaPlaylist::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::disconnectNotify")
	}
}

func (ptr *QMediaPlaylist) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlaylist::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaPlaylist) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaPlaylist::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaPlaylist_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaPlaylist_Event
func callbackQMediaPlaylist_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlaylist::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaPlaylistFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaPlaylist) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaPlaylist::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::event", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaPlaylist::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::event")
	}
}

func (ptr *QMediaPlaylist) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlaylist::event")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlaylist::event")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaPlaylist_EventFilter
func callbackQMediaPlaylist_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlaylist::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaPlaylistFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaPlaylist) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaPlaylist::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::eventFilter", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaPlaylist::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::eventFilter")
	}
}

func (ptr *QMediaPlaylist) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlaylist::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaPlaylist::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaPlaylist_MetaObject
func callbackQMediaPlaylist_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaPlaylist::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaPlaylistFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaPlaylist) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaPlaylist::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::metaObject", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaPlaylist::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::metaObject")
	}
}

func (ptr *QMediaPlaylist) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaPlaylist::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaPlaylist_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaPlaylist) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaPlaylist::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaPlaylist_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQMediaPlaylist_SetMediaObject
func callbackQMediaPlaylist_SetMediaObject(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaPlaylist::setMediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaPlaylist::setMediaObject"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMediaObject) bool)(NewQMediaObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaPlaylistFromPointer(ptr).SetMediaObjectDefault(NewQMediaObjectFromPointer(object)))))
}

func (ptr *QMediaPlaylist) ConnectSetMediaObject(f func(object *QMediaObject) bool) {
	defer qt.Recovering("connect QMediaPlaylist::setMediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::setMediaObject", f)
	}
}

func (ptr *QMediaPlaylist) DisconnectSetMediaObject() {
	defer qt.Recovering("disconnect QMediaPlaylist::setMediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaPlaylist::setMediaObject")
	}
}

func (ptr *QMediaPlaylist) SetMediaObject(object QMediaObject_ITF) bool {
	defer qt.Recovering("QMediaPlaylist::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_SetMediaObject(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

func (ptr *QMediaPlaylist) SetMediaObjectDefault(object QMediaObject_ITF) bool {
	defer qt.Recovering("QMediaPlaylist::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QMediaPlaylist_SetMediaObjectDefault(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

//QMediaRecorder::Error
type QMediaRecorder__Error int64

const (
	QMediaRecorder__NoError         = QMediaRecorder__Error(0)
	QMediaRecorder__ResourceError   = QMediaRecorder__Error(1)
	QMediaRecorder__FormatError     = QMediaRecorder__Error(2)
	QMediaRecorder__OutOfSpaceError = QMediaRecorder__Error(3)
)

//QMediaRecorder::State
type QMediaRecorder__State int64

const (
	QMediaRecorder__StoppedState   = QMediaRecorder__State(0)
	QMediaRecorder__RecordingState = QMediaRecorder__State(1)
	QMediaRecorder__PausedState    = QMediaRecorder__State(2)
)

//QMediaRecorder::Status
type QMediaRecorder__Status int64

const (
	QMediaRecorder__UnavailableStatus = QMediaRecorder__Status(0)
	QMediaRecorder__UnloadedStatus    = QMediaRecorder__Status(1)
	QMediaRecorder__LoadingStatus     = QMediaRecorder__Status(2)
	QMediaRecorder__LoadedStatus      = QMediaRecorder__Status(3)
	QMediaRecorder__StartingStatus    = QMediaRecorder__Status(4)
	QMediaRecorder__RecordingStatus   = QMediaRecorder__Status(5)
	QMediaRecorder__PausedStatus      = QMediaRecorder__Status(6)
	QMediaRecorder__FinalizingStatus  = QMediaRecorder__Status(7)
)

type QMediaRecorder struct {
	core.QObject
	QMediaBindableInterface
}

type QMediaRecorder_ITF interface {
	core.QObject_ITF
	QMediaBindableInterface_ITF
	QMediaRecorder_PTR() *QMediaRecorder
}

func (p *QMediaRecorder) QMediaRecorder_PTR() *QMediaRecorder {
	return p
}

func (p *QMediaRecorder) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QMediaRecorder) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QMediaBindableInterface_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaRecorder(ptr QMediaRecorder_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaRecorder_PTR().Pointer()
	}
	return nil
}

func NewQMediaRecorderFromPointer(ptr unsafe.Pointer) *QMediaRecorder {
	var n = new(QMediaRecorder)
	n.SetPointer(ptr)
	return n
}
func (ptr *QMediaRecorder) ActualLocation() *core.QUrl {
	defer qt.Recovering("QMediaRecorder::actualLocation")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QMediaRecorder_ActualLocation(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaRecorder) Duration() int64 {
	defer qt.Recovering("QMediaRecorder::duration")

	if ptr.Pointer() != nil {
		return int64(C.QMediaRecorder_Duration(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaRecorder) IsMetaDataAvailable() bool {
	defer qt.Recovering("QMediaRecorder::isMetaDataAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_IsMetaDataAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaRecorder) IsMetaDataWritable() bool {
	defer qt.Recovering("QMediaRecorder::isMetaDataWritable")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_IsMetaDataWritable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaRecorder) IsMuted() bool {
	defer qt.Recovering("QMediaRecorder::isMuted")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_IsMuted(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaRecorder) OutputLocation() *core.QUrl {
	defer qt.Recovering("QMediaRecorder::outputLocation")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QMediaRecorder_OutputLocation(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

//export callbackQMediaRecorder_SetMuted
func callbackQMediaRecorder_SetMuted(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QMediaRecorder::setMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::setMuted"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QMediaRecorder) ConnectSetMuted(f func(muted bool)) {
	defer qt.Recovering("connect QMediaRecorder::setMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::setMuted", f)
	}
}

func (ptr *QMediaRecorder) DisconnectSetMuted(muted bool) {
	defer qt.Recovering("disconnect QMediaRecorder::setMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::setMuted")
	}
}

func (ptr *QMediaRecorder) SetMuted(muted bool) {
	defer qt.Recovering("QMediaRecorder::setMuted")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_SetMuted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

func (ptr *QMediaRecorder) SetOutputLocation(location core.QUrl_ITF) bool {
	defer qt.Recovering("QMediaRecorder::setOutputLocation")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_SetOutputLocation(ptr.Pointer(), core.PointerFromQUrl(location)) != 0
	}
	return false
}

//export callbackQMediaRecorder_SetVolume
func callbackQMediaRecorder_SetVolume(ptr unsafe.Pointer, volume C.double) {
	defer qt.Recovering("callback QMediaRecorder::setVolume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::setVolume"); signal != nil {
		signal.(func(float64))(float64(volume))
	}

}

func (ptr *QMediaRecorder) ConnectSetVolume(f func(volume float64)) {
	defer qt.Recovering("connect QMediaRecorder::setVolume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::setVolume", f)
	}
}

func (ptr *QMediaRecorder) DisconnectSetVolume(volume float64) {
	defer qt.Recovering("disconnect QMediaRecorder::setVolume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::setVolume")
	}
}

func (ptr *QMediaRecorder) SetVolume(volume float64) {
	defer qt.Recovering("QMediaRecorder::setVolume")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_SetVolume(ptr.Pointer(), C.double(volume))
	}
}

func (ptr *QMediaRecorder) Volume() float64 {
	defer qt.Recovering("QMediaRecorder::volume")

	if ptr.Pointer() != nil {
		return float64(C.QMediaRecorder_Volume(ptr.Pointer()))
	}
	return 0
}

func NewQMediaRecorder(mediaObject QMediaObject_ITF, parent core.QObject_ITF) *QMediaRecorder {
	defer qt.Recovering("QMediaRecorder::QMediaRecorder")

	var tmpValue = NewQMediaRecorderFromPointer(C.QMediaRecorder_NewQMediaRecorder(PointerFromQMediaObject(mediaObject), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaRecorder_ActualLocationChanged
func callbackQMediaRecorder_ActualLocationChanged(ptr unsafe.Pointer, location unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::actualLocationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::actualLocationChanged"); signal != nil {
		signal.(func(*core.QUrl))(core.NewQUrlFromPointer(location))
	}

}

func (ptr *QMediaRecorder) ConnectActualLocationChanged(f func(location *core.QUrl)) {
	defer qt.Recovering("connect QMediaRecorder::actualLocationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectActualLocationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::actualLocationChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectActualLocationChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::actualLocationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectActualLocationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::actualLocationChanged")
	}
}

func (ptr *QMediaRecorder) ActualLocationChanged(location core.QUrl_ITF) {
	defer qt.Recovering("QMediaRecorder::actualLocationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ActualLocationChanged(ptr.Pointer(), core.PointerFromQUrl(location))
	}
}

func (ptr *QMediaRecorder) AudioCodecDescription(codec string) string {
	defer qt.Recovering("QMediaRecorder::audioCodecDescription")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		return C.GoString(C.QMediaRecorder_AudioCodecDescription(ptr.Pointer(), codecC))
	}
	return ""
}

func (ptr *QMediaRecorder) AudioSettings() *QAudioEncoderSettings {
	defer qt.Recovering("QMediaRecorder::audioSettings")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAudioEncoderSettingsFromPointer(C.QMediaRecorder_AudioSettings(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QAudioEncoderSettings).DestroyQAudioEncoderSettings)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaRecorder) Availability() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QMediaRecorder::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QMediaRecorder_Availability(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaRecorder_AvailabilityChanged2
func callbackQMediaRecorder_AvailabilityChanged2(ptr unsafe.Pointer, availability C.longlong) {
	defer qt.Recovering("callback QMediaRecorder::availabilityChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::availabilityChanged2"); signal != nil {
		signal.(func(QMultimedia__AvailabilityStatus))(QMultimedia__AvailabilityStatus(availability))
	}

}

func (ptr *QMediaRecorder) ConnectAvailabilityChanged2(f func(availability QMultimedia__AvailabilityStatus)) {
	defer qt.Recovering("connect QMediaRecorder::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectAvailabilityChanged2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::availabilityChanged2", f)
	}
}

func (ptr *QMediaRecorder) DisconnectAvailabilityChanged2() {
	defer qt.Recovering("disconnect QMediaRecorder::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectAvailabilityChanged2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::availabilityChanged2")
	}
}

func (ptr *QMediaRecorder) AvailabilityChanged2(availability QMultimedia__AvailabilityStatus) {
	defer qt.Recovering("QMediaRecorder::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_AvailabilityChanged2(ptr.Pointer(), C.longlong(availability))
	}
}

//export callbackQMediaRecorder_AvailabilityChanged
func callbackQMediaRecorder_AvailabilityChanged(ptr unsafe.Pointer, available C.char) {
	defer qt.Recovering("callback QMediaRecorder::availabilityChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::availabilityChanged"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QMediaRecorder) ConnectAvailabilityChanged(f func(available bool)) {
	defer qt.Recovering("connect QMediaRecorder::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectAvailabilityChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::availabilityChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectAvailabilityChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectAvailabilityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::availabilityChanged")
	}
}

func (ptr *QMediaRecorder) AvailabilityChanged(available bool) {
	defer qt.Recovering("QMediaRecorder::availabilityChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_AvailabilityChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

func (ptr *QMediaRecorder) AvailableMetaData() []string {
	defer qt.Recovering("QMediaRecorder::availableMetaData")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QMediaRecorder_AvailableMetaData(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMediaRecorder) ContainerDescription(format string) string {
	defer qt.Recovering("QMediaRecorder::containerDescription")

	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.GoString(C.QMediaRecorder_ContainerDescription(ptr.Pointer(), formatC))
	}
	return ""
}

func (ptr *QMediaRecorder) ContainerFormat() string {
	defer qt.Recovering("QMediaRecorder::containerFormat")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMediaRecorder_ContainerFormat(ptr.Pointer()))
	}
	return ""
}

//export callbackQMediaRecorder_DurationChanged
func callbackQMediaRecorder_DurationChanged(ptr unsafe.Pointer, duration C.longlong) {
	defer qt.Recovering("callback QMediaRecorder::durationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::durationChanged"); signal != nil {
		signal.(func(int64))(int64(duration))
	}

}

func (ptr *QMediaRecorder) ConnectDurationChanged(f func(duration int64)) {
	defer qt.Recovering("connect QMediaRecorder::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectDurationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::durationChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectDurationChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectDurationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::durationChanged")
	}
}

func (ptr *QMediaRecorder) DurationChanged(duration int64) {
	defer qt.Recovering("QMediaRecorder::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DurationChanged(ptr.Pointer(), C.longlong(duration))
	}
}

//export callbackQMediaRecorder_Error2
func callbackQMediaRecorder_Error2(ptr unsafe.Pointer, error C.longlong) {
	defer qt.Recovering("callback QMediaRecorder::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::error2"); signal != nil {
		signal.(func(QMediaRecorder__Error))(QMediaRecorder__Error(error))
	}

}

func (ptr *QMediaRecorder) ConnectError2(f func(error QMediaRecorder__Error)) {
	defer qt.Recovering("connect QMediaRecorder::error")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectError2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::error2", f)
	}
}

func (ptr *QMediaRecorder) DisconnectError2() {
	defer qt.Recovering("disconnect QMediaRecorder::error")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectError2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::error2")
	}
}

func (ptr *QMediaRecorder) Error2(error QMediaRecorder__Error) {
	defer qt.Recovering("QMediaRecorder::error")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_Error2(ptr.Pointer(), C.longlong(error))
	}
}

func (ptr *QMediaRecorder) Error() QMediaRecorder__Error {
	defer qt.Recovering("QMediaRecorder::error")

	if ptr.Pointer() != nil {
		return QMediaRecorder__Error(C.QMediaRecorder_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaRecorder) ErrorString() string {
	defer qt.Recovering("QMediaRecorder::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMediaRecorder_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMediaRecorder) IsAvailable() bool {
	defer qt.Recovering("QMediaRecorder::isAvailable")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMediaRecorder_MediaObject
func callbackQMediaRecorder_MediaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaRecorder::mediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::mediaObject"); signal != nil {
		return PointerFromQMediaObject(signal.(func() *QMediaObject)())
	}

	return PointerFromQMediaObject(NewQMediaRecorderFromPointer(ptr).MediaObjectDefault())
}

func (ptr *QMediaRecorder) ConnectMediaObject(f func() *QMediaObject) {
	defer qt.Recovering("connect QMediaRecorder::mediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::mediaObject", f)
	}
}

func (ptr *QMediaRecorder) DisconnectMediaObject() {
	defer qt.Recovering("disconnect QMediaRecorder::mediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::mediaObject")
	}
}

func (ptr *QMediaRecorder) MediaObject() *QMediaObject {
	defer qt.Recovering("QMediaRecorder::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QMediaRecorder_MediaObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMediaRecorder) MediaObjectDefault() *QMediaObject {
	defer qt.Recovering("QMediaRecorder::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QMediaRecorder_MediaObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMediaRecorder) MetaData(key string) *core.QVariant {
	defer qt.Recovering("QMediaRecorder::metaData")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = core.NewQVariantFromPointer(C.QMediaRecorder_MetaData(ptr.Pointer(), keyC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQMediaRecorder_MetaDataAvailableChanged
func callbackQMediaRecorder_MetaDataAvailableChanged(ptr unsafe.Pointer, available C.char) {
	defer qt.Recovering("callback QMediaRecorder::metaDataAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::metaDataAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QMediaRecorder) ConnectMetaDataAvailableChanged(f func(available bool)) {
	defer qt.Recovering("connect QMediaRecorder::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectMetaDataAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaDataAvailableChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectMetaDataAvailableChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectMetaDataAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaDataAvailableChanged")
	}
}

func (ptr *QMediaRecorder) MetaDataAvailableChanged(available bool) {
	defer qt.Recovering("QMediaRecorder::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_MetaDataAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

//export callbackQMediaRecorder_MetaDataChanged
func callbackQMediaRecorder_MetaDataChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::metaDataChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::metaDataChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaRecorder) ConnectMetaDataChanged(f func()) {
	defer qt.Recovering("connect QMediaRecorder::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectMetaDataChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaDataChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectMetaDataChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectMetaDataChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaDataChanged")
	}
}

func (ptr *QMediaRecorder) MetaDataChanged() {
	defer qt.Recovering("QMediaRecorder::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_MetaDataChanged(ptr.Pointer())
	}
}

//export callbackQMediaRecorder_MetaDataChanged2
func callbackQMediaRecorder_MetaDataChanged2(ptr unsafe.Pointer, key *C.char, value unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::metaDataChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::metaDataChanged2"); signal != nil {
		signal.(func(string, *core.QVariant))(C.GoString(key), core.NewQVariantFromPointer(value))
	}

}

func (ptr *QMediaRecorder) ConnectMetaDataChanged2(f func(key string, value *core.QVariant)) {
	defer qt.Recovering("connect QMediaRecorder::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectMetaDataChanged2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaDataChanged2", f)
	}
}

func (ptr *QMediaRecorder) DisconnectMetaDataChanged2() {
	defer qt.Recovering("disconnect QMediaRecorder::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectMetaDataChanged2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaDataChanged2")
	}
}

func (ptr *QMediaRecorder) MetaDataChanged2(key string, value core.QVariant_ITF) {
	defer qt.Recovering("QMediaRecorder::metaDataChanged")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QMediaRecorder_MetaDataChanged2(ptr.Pointer(), keyC, core.PointerFromQVariant(value))
	}
}

//export callbackQMediaRecorder_MetaDataWritableChanged
func callbackQMediaRecorder_MetaDataWritableChanged(ptr unsafe.Pointer, writable C.char) {
	defer qt.Recovering("callback QMediaRecorder::metaDataWritableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::metaDataWritableChanged"); signal != nil {
		signal.(func(bool))(int8(writable) != 0)
	}

}

func (ptr *QMediaRecorder) ConnectMetaDataWritableChanged(f func(writable bool)) {
	defer qt.Recovering("connect QMediaRecorder::metaDataWritableChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectMetaDataWritableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaDataWritableChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectMetaDataWritableChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::metaDataWritableChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectMetaDataWritableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaDataWritableChanged")
	}
}

func (ptr *QMediaRecorder) MetaDataWritableChanged(writable bool) {
	defer qt.Recovering("QMediaRecorder::metaDataWritableChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_MetaDataWritableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(writable))))
	}
}

//export callbackQMediaRecorder_MutedChanged
func callbackQMediaRecorder_MutedChanged(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QMediaRecorder::mutedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::mutedChanged"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QMediaRecorder) ConnectMutedChanged(f func(muted bool)) {
	defer qt.Recovering("connect QMediaRecorder::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectMutedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::mutedChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectMutedChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectMutedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::mutedChanged")
	}
}

func (ptr *QMediaRecorder) MutedChanged(muted bool) {
	defer qt.Recovering("QMediaRecorder::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_MutedChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

//export callbackQMediaRecorder_Pause
func callbackQMediaRecorder_Pause(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::pause")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::pause"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaRecorder) ConnectPause(f func()) {
	defer qt.Recovering("connect QMediaRecorder::pause")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::pause", f)
	}
}

func (ptr *QMediaRecorder) DisconnectPause() {
	defer qt.Recovering("disconnect QMediaRecorder::pause")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::pause")
	}
}

func (ptr *QMediaRecorder) Pause() {
	defer qt.Recovering("QMediaRecorder::pause")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_Pause(ptr.Pointer())
	}
}

//export callbackQMediaRecorder_Record
func callbackQMediaRecorder_Record(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::record")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::record"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaRecorder) ConnectRecord(f func()) {
	defer qt.Recovering("connect QMediaRecorder::record")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::record", f)
	}
}

func (ptr *QMediaRecorder) DisconnectRecord() {
	defer qt.Recovering("disconnect QMediaRecorder::record")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::record")
	}
}

func (ptr *QMediaRecorder) Record() {
	defer qt.Recovering("QMediaRecorder::record")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_Record(ptr.Pointer())
	}
}

func (ptr *QMediaRecorder) SetAudioSettings(settings QAudioEncoderSettings_ITF) {
	defer qt.Recovering("QMediaRecorder::setAudioSettings")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_SetAudioSettings(ptr.Pointer(), PointerFromQAudioEncoderSettings(settings))
	}
}

func (ptr *QMediaRecorder) SetContainerFormat(container string) {
	defer qt.Recovering("QMediaRecorder::setContainerFormat")

	if ptr.Pointer() != nil {
		var containerC = C.CString(container)
		defer C.free(unsafe.Pointer(containerC))
		C.QMediaRecorder_SetContainerFormat(ptr.Pointer(), containerC)
	}
}

func (ptr *QMediaRecorder) SetEncodingSettings(audio QAudioEncoderSettings_ITF, video QVideoEncoderSettings_ITF, container string) {
	defer qt.Recovering("QMediaRecorder::setEncodingSettings")

	if ptr.Pointer() != nil {
		var containerC = C.CString(container)
		defer C.free(unsafe.Pointer(containerC))
		C.QMediaRecorder_SetEncodingSettings(ptr.Pointer(), PointerFromQAudioEncoderSettings(audio), PointerFromQVideoEncoderSettings(video), containerC)
	}
}

func (ptr *QMediaRecorder) SetMetaData(key string, value core.QVariant_ITF) {
	defer qt.Recovering("QMediaRecorder::setMetaData")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QMediaRecorder_SetMetaData(ptr.Pointer(), keyC, core.PointerFromQVariant(value))
	}
}

func (ptr *QMediaRecorder) SetVideoSettings(settings QVideoEncoderSettings_ITF) {
	defer qt.Recovering("QMediaRecorder::setVideoSettings")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_SetVideoSettings(ptr.Pointer(), PointerFromQVideoEncoderSettings(settings))
	}
}

func (ptr *QMediaRecorder) State() QMediaRecorder__State {
	defer qt.Recovering("QMediaRecorder::state")

	if ptr.Pointer() != nil {
		return QMediaRecorder__State(C.QMediaRecorder_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaRecorder_StateChanged
func callbackQMediaRecorder_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QMediaRecorder::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::stateChanged"); signal != nil {
		signal.(func(QMediaRecorder__State))(QMediaRecorder__State(state))
	}

}

func (ptr *QMediaRecorder) ConnectStateChanged(f func(state QMediaRecorder__State)) {
	defer qt.Recovering("connect QMediaRecorder::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::stateChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::stateChanged")
	}
}

func (ptr *QMediaRecorder) StateChanged(state QMediaRecorder__State) {
	defer qt.Recovering("QMediaRecorder::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

func (ptr *QMediaRecorder) Status() QMediaRecorder__Status {
	defer qt.Recovering("QMediaRecorder::status")

	if ptr.Pointer() != nil {
		return QMediaRecorder__Status(C.QMediaRecorder_Status(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaRecorder_StatusChanged
func callbackQMediaRecorder_StatusChanged(ptr unsafe.Pointer, status C.longlong) {
	defer qt.Recovering("callback QMediaRecorder::statusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::statusChanged"); signal != nil {
		signal.(func(QMediaRecorder__Status))(QMediaRecorder__Status(status))
	}

}

func (ptr *QMediaRecorder) ConnectStatusChanged(f func(status QMediaRecorder__Status)) {
	defer qt.Recovering("connect QMediaRecorder::statusChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::statusChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectStatusChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::statusChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::statusChanged")
	}
}

func (ptr *QMediaRecorder) StatusChanged(status QMediaRecorder__Status) {
	defer qt.Recovering("QMediaRecorder::statusChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_StatusChanged(ptr.Pointer(), C.longlong(status))
	}
}

//export callbackQMediaRecorder_Stop
func callbackQMediaRecorder_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaRecorder) ConnectStop(f func()) {
	defer qt.Recovering("connect QMediaRecorder::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::stop", f)
	}
}

func (ptr *QMediaRecorder) DisconnectStop() {
	defer qt.Recovering("disconnect QMediaRecorder::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::stop")
	}
}

func (ptr *QMediaRecorder) Stop() {
	defer qt.Recovering("QMediaRecorder::stop")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_Stop(ptr.Pointer())
	}
}

func (ptr *QMediaRecorder) SupportedAudioCodecs() []string {
	defer qt.Recovering("QMediaRecorder::supportedAudioCodecs")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QMediaRecorder_SupportedAudioCodecs(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMediaRecorder) SupportedContainers() []string {
	defer qt.Recovering("QMediaRecorder::supportedContainers")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QMediaRecorder_SupportedContainers(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMediaRecorder) SupportedVideoCodecs() []string {
	defer qt.Recovering("QMediaRecorder::supportedVideoCodecs")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QMediaRecorder_SupportedVideoCodecs(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMediaRecorder) VideoCodecDescription(codec string) string {
	defer qt.Recovering("QMediaRecorder::videoCodecDescription")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		return C.GoString(C.QMediaRecorder_VideoCodecDescription(ptr.Pointer(), codecC))
	}
	return ""
}

func (ptr *QMediaRecorder) VideoSettings() *QVideoEncoderSettings {
	defer qt.Recovering("QMediaRecorder::videoSettings")

	if ptr.Pointer() != nil {
		var tmpValue = NewQVideoEncoderSettingsFromPointer(C.QMediaRecorder_VideoSettings(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVideoEncoderSettings).DestroyQVideoEncoderSettings)
		return tmpValue
	}
	return nil
}

//export callbackQMediaRecorder_VolumeChanged
func callbackQMediaRecorder_VolumeChanged(ptr unsafe.Pointer, volume C.double) {
	defer qt.Recovering("callback QMediaRecorder::volumeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::volumeChanged"); signal != nil {
		signal.(func(float64))(float64(volume))
	}

}

func (ptr *QMediaRecorder) ConnectVolumeChanged(f func(volume float64)) {
	defer qt.Recovering("connect QMediaRecorder::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectVolumeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::volumeChanged", f)
	}
}

func (ptr *QMediaRecorder) DisconnectVolumeChanged() {
	defer qt.Recovering("disconnect QMediaRecorder::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectVolumeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::volumeChanged")
	}
}

func (ptr *QMediaRecorder) VolumeChanged(volume float64) {
	defer qt.Recovering("QMediaRecorder::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_VolumeChanged(ptr.Pointer(), C.double(volume))
	}
}

func (ptr *QMediaRecorder) DestroyQMediaRecorder() {
	defer qt.Recovering("QMediaRecorder::~QMediaRecorder")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DestroyQMediaRecorder(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaRecorder_TimerEvent
func callbackQMediaRecorder_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaRecorderFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaRecorder) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaRecorder::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::timerEvent", f)
	}
}

func (ptr *QMediaRecorder) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaRecorder::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::timerEvent")
	}
}

func (ptr *QMediaRecorder) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaRecorder::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaRecorder) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaRecorder::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaRecorder_ChildEvent
func callbackQMediaRecorder_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaRecorderFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaRecorder) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaRecorder::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::childEvent", f)
	}
}

func (ptr *QMediaRecorder) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaRecorder::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::childEvent")
	}
}

func (ptr *QMediaRecorder) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaRecorder::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaRecorder) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaRecorder::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaRecorder_ConnectNotify
func callbackQMediaRecorder_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaRecorderFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaRecorder) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaRecorder::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::connectNotify", f)
	}
}

func (ptr *QMediaRecorder) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaRecorder::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::connectNotify")
	}
}

func (ptr *QMediaRecorder) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaRecorder::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaRecorder) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaRecorder::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaRecorder_CustomEvent
func callbackQMediaRecorder_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaRecorderFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaRecorder) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaRecorder::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::customEvent", f)
	}
}

func (ptr *QMediaRecorder) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaRecorder::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::customEvent")
	}
}

func (ptr *QMediaRecorder) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaRecorder::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaRecorder) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaRecorder::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaRecorder_DeleteLater
func callbackQMediaRecorder_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaRecorderFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaRecorder) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaRecorder::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::deleteLater", f)
	}
}

func (ptr *QMediaRecorder) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaRecorder::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::deleteLater")
	}
}

func (ptr *QMediaRecorder) DeleteLater() {
	defer qt.Recovering("QMediaRecorder::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaRecorder) DeleteLaterDefault() {
	defer qt.Recovering("QMediaRecorder::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaRecorder_DisconnectNotify
func callbackQMediaRecorder_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorder::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaRecorderFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaRecorder) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaRecorder::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::disconnectNotify", f)
	}
}

func (ptr *QMediaRecorder) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaRecorder::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::disconnectNotify")
	}
}

func (ptr *QMediaRecorder) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaRecorder::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaRecorder) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaRecorder::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaRecorder_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaRecorder_Event
func callbackQMediaRecorder_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaRecorder::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaRecorderFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaRecorder) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaRecorder::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::event", f)
	}
}

func (ptr *QMediaRecorder) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaRecorder::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::event")
	}
}

func (ptr *QMediaRecorder) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaRecorder::event")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaRecorder) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaRecorder::event")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaRecorder_EventFilter
func callbackQMediaRecorder_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaRecorder::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaRecorderFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaRecorder) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaRecorder::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::eventFilter", f)
	}
}

func (ptr *QMediaRecorder) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaRecorder::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::eventFilter")
	}
}

func (ptr *QMediaRecorder) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaRecorder::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaRecorder) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaRecorder::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaRecorder_MetaObject
func callbackQMediaRecorder_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaRecorder::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaRecorderFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaRecorder) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaRecorder::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaObject", f)
	}
}

func (ptr *QMediaRecorder) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaRecorder::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::metaObject")
	}
}

func (ptr *QMediaRecorder) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaRecorder::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaRecorder_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaRecorder) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaRecorder::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaRecorder_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQMediaRecorder_SetMediaObject
func callbackQMediaRecorder_SetMediaObject(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaRecorder::setMediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorder::setMediaObject"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMediaObject) bool)(NewQMediaObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaRecorderFromPointer(ptr).SetMediaObjectDefault(NewQMediaObjectFromPointer(object)))))
}

func (ptr *QMediaRecorder) ConnectSetMediaObject(f func(object *QMediaObject) bool) {
	defer qt.Recovering("connect QMediaRecorder::setMediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::setMediaObject", f)
	}
}

func (ptr *QMediaRecorder) DisconnectSetMediaObject() {
	defer qt.Recovering("disconnect QMediaRecorder::setMediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorder::setMediaObject")
	}
}

func (ptr *QMediaRecorder) SetMediaObject(object QMediaObject_ITF) bool {
	defer qt.Recovering("QMediaRecorder::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_SetMediaObject(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

func (ptr *QMediaRecorder) SetMediaObjectDefault(object QMediaObject_ITF) bool {
	defer qt.Recovering("QMediaRecorder::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QMediaRecorder_SetMediaObjectDefault(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

type QMediaRecorderControl struct {
	QMediaControl
}

type QMediaRecorderControl_ITF interface {
	QMediaControl_ITF
	QMediaRecorderControl_PTR() *QMediaRecorderControl
}

func (p *QMediaRecorderControl) QMediaRecorderControl_PTR() *QMediaRecorderControl {
	return p
}

func (p *QMediaRecorderControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMediaRecorderControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaRecorderControl(ptr QMediaRecorderControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaRecorderControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaRecorderControlFromPointer(ptr unsafe.Pointer) *QMediaRecorderControl {
	var n = new(QMediaRecorderControl)
	n.SetPointer(ptr)
	return n
}
func NewQMediaRecorderControl(parent core.QObject_ITF) *QMediaRecorderControl {
	defer qt.Recovering("QMediaRecorderControl::QMediaRecorderControl")

	var tmpValue = NewQMediaRecorderControlFromPointer(C.QMediaRecorderControl_NewQMediaRecorderControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaRecorderControl_ActualLocationChanged
func callbackQMediaRecorderControl_ActualLocationChanged(ptr unsafe.Pointer, location unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorderControl::actualLocationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::actualLocationChanged"); signal != nil {
		signal.(func(*core.QUrl))(core.NewQUrlFromPointer(location))
	}

}

func (ptr *QMediaRecorderControl) ConnectActualLocationChanged(f func(location *core.QUrl)) {
	defer qt.Recovering("connect QMediaRecorderControl::actualLocationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ConnectActualLocationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::actualLocationChanged", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectActualLocationChanged() {
	defer qt.Recovering("disconnect QMediaRecorderControl::actualLocationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DisconnectActualLocationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::actualLocationChanged")
	}
}

func (ptr *QMediaRecorderControl) ActualLocationChanged(location core.QUrl_ITF) {
	defer qt.Recovering("QMediaRecorderControl::actualLocationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ActualLocationChanged(ptr.Pointer(), core.PointerFromQUrl(location))
	}
}

//export callbackQMediaRecorderControl_ApplySettings
func callbackQMediaRecorderControl_ApplySettings(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorderControl::applySettings")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::applySettings"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaRecorderControl) ConnectApplySettings(f func()) {
	defer qt.Recovering("connect QMediaRecorderControl::applySettings")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::applySettings", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectApplySettings() {
	defer qt.Recovering("disconnect QMediaRecorderControl::applySettings")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::applySettings")
	}
}

func (ptr *QMediaRecorderControl) ApplySettings() {
	defer qt.Recovering("QMediaRecorderControl::applySettings")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ApplySettings(ptr.Pointer())
	}
}

//export callbackQMediaRecorderControl_Duration
func callbackQMediaRecorderControl_Duration(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaRecorderControl::duration")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::duration"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(0)
}

func (ptr *QMediaRecorderControl) ConnectDuration(f func() int64) {
	defer qt.Recovering("connect QMediaRecorderControl::duration")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::duration", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectDuration() {
	defer qt.Recovering("disconnect QMediaRecorderControl::duration")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::duration")
	}
}

func (ptr *QMediaRecorderControl) Duration() int64 {
	defer qt.Recovering("QMediaRecorderControl::duration")

	if ptr.Pointer() != nil {
		return int64(C.QMediaRecorderControl_Duration(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaRecorderControl_DurationChanged
func callbackQMediaRecorderControl_DurationChanged(ptr unsafe.Pointer, duration C.longlong) {
	defer qt.Recovering("callback QMediaRecorderControl::durationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::durationChanged"); signal != nil {
		signal.(func(int64))(int64(duration))
	}

}

func (ptr *QMediaRecorderControl) ConnectDurationChanged(f func(duration int64)) {
	defer qt.Recovering("connect QMediaRecorderControl::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ConnectDurationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::durationChanged", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectDurationChanged() {
	defer qt.Recovering("disconnect QMediaRecorderControl::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DisconnectDurationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::durationChanged")
	}
}

func (ptr *QMediaRecorderControl) DurationChanged(duration int64) {
	defer qt.Recovering("QMediaRecorderControl::durationChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DurationChanged(ptr.Pointer(), C.longlong(duration))
	}
}

//export callbackQMediaRecorderControl_Error
func callbackQMediaRecorderControl_Error(ptr unsafe.Pointer, error C.int, errorString *C.char) {
	defer qt.Recovering("callback QMediaRecorderControl::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::error"); signal != nil {
		signal.(func(int, string))(int(int32(error)), C.GoString(errorString))
	}

}

func (ptr *QMediaRecorderControl) ConnectError(f func(error int, errorString string)) {
	defer qt.Recovering("connect QMediaRecorderControl::error")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ConnectError(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::error", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectError() {
	defer qt.Recovering("disconnect QMediaRecorderControl::error")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DisconnectError(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::error")
	}
}

func (ptr *QMediaRecorderControl) Error(error int, errorString string) {
	defer qt.Recovering("QMediaRecorderControl::error")

	if ptr.Pointer() != nil {
		var errorStringC = C.CString(errorString)
		defer C.free(unsafe.Pointer(errorStringC))
		C.QMediaRecorderControl_Error(ptr.Pointer(), C.int(int32(error)), errorStringC)
	}
}

//export callbackQMediaRecorderControl_IsMuted
func callbackQMediaRecorderControl_IsMuted(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaRecorderControl::isMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::isMuted"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMediaRecorderControl) ConnectIsMuted(f func() bool) {
	defer qt.Recovering("connect QMediaRecorderControl::isMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::isMuted", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectIsMuted() {
	defer qt.Recovering("disconnect QMediaRecorderControl::isMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::isMuted")
	}
}

func (ptr *QMediaRecorderControl) IsMuted() bool {
	defer qt.Recovering("QMediaRecorderControl::isMuted")

	if ptr.Pointer() != nil {
		return C.QMediaRecorderControl_IsMuted(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMediaRecorderControl_MutedChanged
func callbackQMediaRecorderControl_MutedChanged(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QMediaRecorderControl::mutedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::mutedChanged"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QMediaRecorderControl) ConnectMutedChanged(f func(muted bool)) {
	defer qt.Recovering("connect QMediaRecorderControl::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ConnectMutedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::mutedChanged", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectMutedChanged() {
	defer qt.Recovering("disconnect QMediaRecorderControl::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DisconnectMutedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::mutedChanged")
	}
}

func (ptr *QMediaRecorderControl) MutedChanged(muted bool) {
	defer qt.Recovering("QMediaRecorderControl::mutedChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_MutedChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

//export callbackQMediaRecorderControl_OutputLocation
func callbackQMediaRecorderControl_OutputLocation(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaRecorderControl::outputLocation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::outputLocation"); signal != nil {
		return core.PointerFromQUrl(signal.(func() *core.QUrl)())
	}

	return core.PointerFromQUrl(nil)
}

func (ptr *QMediaRecorderControl) ConnectOutputLocation(f func() *core.QUrl) {
	defer qt.Recovering("connect QMediaRecorderControl::outputLocation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::outputLocation", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectOutputLocation() {
	defer qt.Recovering("disconnect QMediaRecorderControl::outputLocation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::outputLocation")
	}
}

func (ptr *QMediaRecorderControl) OutputLocation() *core.QUrl {
	defer qt.Recovering("QMediaRecorderControl::outputLocation")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QMediaRecorderControl_OutputLocation(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

//export callbackQMediaRecorderControl_SetMuted
func callbackQMediaRecorderControl_SetMuted(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QMediaRecorderControl::setMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::setMuted"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QMediaRecorderControl) ConnectSetMuted(f func(muted bool)) {
	defer qt.Recovering("connect QMediaRecorderControl::setMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::setMuted", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectSetMuted(muted bool) {
	defer qt.Recovering("disconnect QMediaRecorderControl::setMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::setMuted")
	}
}

func (ptr *QMediaRecorderControl) SetMuted(muted bool) {
	defer qt.Recovering("QMediaRecorderControl::setMuted")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_SetMuted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

//export callbackQMediaRecorderControl_SetOutputLocation
func callbackQMediaRecorderControl_SetOutputLocation(ptr unsafe.Pointer, location unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaRecorderControl::setOutputLocation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::setOutputLocation"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QUrl) bool)(core.NewQUrlFromPointer(location)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMediaRecorderControl) ConnectSetOutputLocation(f func(location *core.QUrl) bool) {
	defer qt.Recovering("connect QMediaRecorderControl::setOutputLocation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::setOutputLocation", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectSetOutputLocation(location core.QUrl_ITF) {
	defer qt.Recovering("disconnect QMediaRecorderControl::setOutputLocation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::setOutputLocation")
	}
}

func (ptr *QMediaRecorderControl) SetOutputLocation(location core.QUrl_ITF) bool {
	defer qt.Recovering("QMediaRecorderControl::setOutputLocation")

	if ptr.Pointer() != nil {
		return C.QMediaRecorderControl_SetOutputLocation(ptr.Pointer(), core.PointerFromQUrl(location)) != 0
	}
	return false
}

//export callbackQMediaRecorderControl_SetState
func callbackQMediaRecorderControl_SetState(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QMediaRecorderControl::setState")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::setState"); signal != nil {
		signal.(func(QMediaRecorder__State))(QMediaRecorder__State(state))
	}

}

func (ptr *QMediaRecorderControl) ConnectSetState(f func(state QMediaRecorder__State)) {
	defer qt.Recovering("connect QMediaRecorderControl::setState")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::setState", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectSetState(state QMediaRecorder__State) {
	defer qt.Recovering("disconnect QMediaRecorderControl::setState")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::setState")
	}
}

func (ptr *QMediaRecorderControl) SetState(state QMediaRecorder__State) {
	defer qt.Recovering("QMediaRecorderControl::setState")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_SetState(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQMediaRecorderControl_SetVolume
func callbackQMediaRecorderControl_SetVolume(ptr unsafe.Pointer, gain C.double) {
	defer qt.Recovering("callback QMediaRecorderControl::setVolume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::setVolume"); signal != nil {
		signal.(func(float64))(float64(gain))
	}

}

func (ptr *QMediaRecorderControl) ConnectSetVolume(f func(gain float64)) {
	defer qt.Recovering("connect QMediaRecorderControl::setVolume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::setVolume", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectSetVolume(gain float64) {
	defer qt.Recovering("disconnect QMediaRecorderControl::setVolume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::setVolume")
	}
}

func (ptr *QMediaRecorderControl) SetVolume(gain float64) {
	defer qt.Recovering("QMediaRecorderControl::setVolume")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_SetVolume(ptr.Pointer(), C.double(gain))
	}
}

//export callbackQMediaRecorderControl_State
func callbackQMediaRecorderControl_State(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaRecorderControl::state")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::state"); signal != nil {
		return C.longlong(signal.(func() QMediaRecorder__State)())
	}

	return C.longlong(0)
}

func (ptr *QMediaRecorderControl) ConnectState(f func() QMediaRecorder__State) {
	defer qt.Recovering("connect QMediaRecorderControl::state")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::state", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectState() {
	defer qt.Recovering("disconnect QMediaRecorderControl::state")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::state")
	}
}

func (ptr *QMediaRecorderControl) State() QMediaRecorder__State {
	defer qt.Recovering("QMediaRecorderControl::state")

	if ptr.Pointer() != nil {
		return QMediaRecorder__State(C.QMediaRecorderControl_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaRecorderControl_StateChanged
func callbackQMediaRecorderControl_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QMediaRecorderControl::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::stateChanged"); signal != nil {
		signal.(func(QMediaRecorder__State))(QMediaRecorder__State(state))
	}

}

func (ptr *QMediaRecorderControl) ConnectStateChanged(f func(state QMediaRecorder__State)) {
	defer qt.Recovering("connect QMediaRecorderControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::stateChanged", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QMediaRecorderControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::stateChanged")
	}
}

func (ptr *QMediaRecorderControl) StateChanged(state QMediaRecorder__State) {
	defer qt.Recovering("QMediaRecorderControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQMediaRecorderControl_Status
func callbackQMediaRecorderControl_Status(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QMediaRecorderControl::status")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::status"); signal != nil {
		return C.longlong(signal.(func() QMediaRecorder__Status)())
	}

	return C.longlong(0)
}

func (ptr *QMediaRecorderControl) ConnectStatus(f func() QMediaRecorder__Status) {
	defer qt.Recovering("connect QMediaRecorderControl::status")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::status", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectStatus() {
	defer qt.Recovering("disconnect QMediaRecorderControl::status")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::status")
	}
}

func (ptr *QMediaRecorderControl) Status() QMediaRecorder__Status {
	defer qt.Recovering("QMediaRecorderControl::status")

	if ptr.Pointer() != nil {
		return QMediaRecorder__Status(C.QMediaRecorderControl_Status(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaRecorderControl_StatusChanged
func callbackQMediaRecorderControl_StatusChanged(ptr unsafe.Pointer, status C.longlong) {
	defer qt.Recovering("callback QMediaRecorderControl::statusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::statusChanged"); signal != nil {
		signal.(func(QMediaRecorder__Status))(QMediaRecorder__Status(status))
	}

}

func (ptr *QMediaRecorderControl) ConnectStatusChanged(f func(status QMediaRecorder__Status)) {
	defer qt.Recovering("connect QMediaRecorderControl::statusChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ConnectStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::statusChanged", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectStatusChanged() {
	defer qt.Recovering("disconnect QMediaRecorderControl::statusChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DisconnectStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::statusChanged")
	}
}

func (ptr *QMediaRecorderControl) StatusChanged(status QMediaRecorder__Status) {
	defer qt.Recovering("QMediaRecorderControl::statusChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_StatusChanged(ptr.Pointer(), C.longlong(status))
	}
}

//export callbackQMediaRecorderControl_Volume
func callbackQMediaRecorderControl_Volume(ptr unsafe.Pointer) C.double {
	defer qt.Recovering("callback QMediaRecorderControl::volume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::volume"); signal != nil {
		return C.double(signal.(func() float64)())
	}

	return C.double(0)
}

func (ptr *QMediaRecorderControl) ConnectVolume(f func() float64) {
	defer qt.Recovering("connect QMediaRecorderControl::volume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::volume", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectVolume() {
	defer qt.Recovering("disconnect QMediaRecorderControl::volume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::volume")
	}
}

func (ptr *QMediaRecorderControl) Volume() float64 {
	defer qt.Recovering("QMediaRecorderControl::volume")

	if ptr.Pointer() != nil {
		return float64(C.QMediaRecorderControl_Volume(ptr.Pointer()))
	}
	return 0
}

//export callbackQMediaRecorderControl_VolumeChanged
func callbackQMediaRecorderControl_VolumeChanged(ptr unsafe.Pointer, gain C.double) {
	defer qt.Recovering("callback QMediaRecorderControl::volumeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::volumeChanged"); signal != nil {
		signal.(func(float64))(float64(gain))
	}

}

func (ptr *QMediaRecorderControl) ConnectVolumeChanged(f func(gain float64)) {
	defer qt.Recovering("connect QMediaRecorderControl::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ConnectVolumeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::volumeChanged", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectVolumeChanged() {
	defer qt.Recovering("disconnect QMediaRecorderControl::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DisconnectVolumeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::volumeChanged")
	}
}

func (ptr *QMediaRecorderControl) VolumeChanged(gain float64) {
	defer qt.Recovering("QMediaRecorderControl::volumeChanged")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_VolumeChanged(ptr.Pointer(), C.double(gain))
	}
}

func (ptr *QMediaRecorderControl) DestroyQMediaRecorderControl() {
	defer qt.Recovering("QMediaRecorderControl::~QMediaRecorderControl")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DestroyQMediaRecorderControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaRecorderControl_TimerEvent
func callbackQMediaRecorderControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorderControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaRecorderControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaRecorderControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaRecorderControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::timerEvent", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaRecorderControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::timerEvent")
	}
}

func (ptr *QMediaRecorderControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaRecorderControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaRecorderControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaRecorderControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaRecorderControl_ChildEvent
func callbackQMediaRecorderControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorderControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaRecorderControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaRecorderControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaRecorderControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::childEvent", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaRecorderControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::childEvent")
	}
}

func (ptr *QMediaRecorderControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaRecorderControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaRecorderControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaRecorderControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaRecorderControl_ConnectNotify
func callbackQMediaRecorderControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorderControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaRecorderControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaRecorderControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaRecorderControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::connectNotify", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaRecorderControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::connectNotify")
	}
}

func (ptr *QMediaRecorderControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaRecorderControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaRecorderControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaRecorderControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaRecorderControl_CustomEvent
func callbackQMediaRecorderControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorderControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaRecorderControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaRecorderControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaRecorderControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::customEvent", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaRecorderControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::customEvent")
	}
}

func (ptr *QMediaRecorderControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaRecorderControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaRecorderControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaRecorderControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaRecorderControl_DeleteLater
func callbackQMediaRecorderControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorderControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaRecorderControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaRecorderControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaRecorderControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::deleteLater", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaRecorderControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::deleteLater")
	}
}

func (ptr *QMediaRecorderControl) DeleteLater() {
	defer qt.Recovering("QMediaRecorderControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaRecorderControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaRecorderControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaRecorderControl_DisconnectNotify
func callbackQMediaRecorderControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaRecorderControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaRecorderControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaRecorderControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaRecorderControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::disconnectNotify", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaRecorderControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::disconnectNotify")
	}
}

func (ptr *QMediaRecorderControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaRecorderControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaRecorderControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaRecorderControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaRecorderControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaRecorderControl_Event
func callbackQMediaRecorderControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaRecorderControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaRecorderControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaRecorderControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaRecorderControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::event", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaRecorderControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::event")
	}
}

func (ptr *QMediaRecorderControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaRecorderControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaRecorderControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaRecorderControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaRecorderControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaRecorderControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaRecorderControl_EventFilter
func callbackQMediaRecorderControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaRecorderControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaRecorderControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaRecorderControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaRecorderControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::eventFilter", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaRecorderControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::eventFilter")
	}
}

func (ptr *QMediaRecorderControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaRecorderControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaRecorderControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaRecorderControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaRecorderControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaRecorderControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaRecorderControl_MetaObject
func callbackQMediaRecorderControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaRecorderControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaRecorderControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaRecorderControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaRecorderControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaRecorderControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::metaObject", f)
	}
}

func (ptr *QMediaRecorderControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaRecorderControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaRecorderControl::metaObject")
	}
}

func (ptr *QMediaRecorderControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaRecorderControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaRecorderControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaRecorderControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaRecorderControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaRecorderControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaResource struct {
	ptr unsafe.Pointer
}

type QMediaResource_ITF interface {
	QMediaResource_PTR() *QMediaResource
}

func (p *QMediaResource) QMediaResource_PTR() *QMediaResource {
	return p
}

func (p *QMediaResource) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaResource) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaResource(ptr QMediaResource_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaResource_PTR().Pointer()
	}
	return nil
}

func NewQMediaResourceFromPointer(ptr unsafe.Pointer) *QMediaResource {
	var n = new(QMediaResource)
	n.SetPointer(ptr)
	return n
}
func NewQMediaResource() *QMediaResource {
	defer qt.Recovering("QMediaResource::QMediaResource")

	var tmpValue = NewQMediaResourceFromPointer(C.QMediaResource_NewQMediaResource())
	runtime.SetFinalizer(tmpValue, (*QMediaResource).DestroyQMediaResource)
	return tmpValue
}

func NewQMediaResource4(other QMediaResource_ITF) *QMediaResource {
	defer qt.Recovering("QMediaResource::QMediaResource")

	var tmpValue = NewQMediaResourceFromPointer(C.QMediaResource_NewQMediaResource4(PointerFromQMediaResource(other)))
	runtime.SetFinalizer(tmpValue, (*QMediaResource).DestroyQMediaResource)
	return tmpValue
}

func NewQMediaResource3(request network.QNetworkRequest_ITF, mimeType string) *QMediaResource {
	defer qt.Recovering("QMediaResource::QMediaResource")

	var mimeTypeC = C.CString(mimeType)
	defer C.free(unsafe.Pointer(mimeTypeC))
	var tmpValue = NewQMediaResourceFromPointer(C.QMediaResource_NewQMediaResource3(network.PointerFromQNetworkRequest(request), mimeTypeC))
	runtime.SetFinalizer(tmpValue, (*QMediaResource).DestroyQMediaResource)
	return tmpValue
}

func NewQMediaResource2(url core.QUrl_ITF, mimeType string) *QMediaResource {
	defer qt.Recovering("QMediaResource::QMediaResource")

	var mimeTypeC = C.CString(mimeType)
	defer C.free(unsafe.Pointer(mimeTypeC))
	var tmpValue = NewQMediaResourceFromPointer(C.QMediaResource_NewQMediaResource2(core.PointerFromQUrl(url), mimeTypeC))
	runtime.SetFinalizer(tmpValue, (*QMediaResource).DestroyQMediaResource)
	return tmpValue
}

func (ptr *QMediaResource) AudioBitRate() int {
	defer qt.Recovering("QMediaResource::audioBitRate")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaResource_AudioBitRate(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMediaResource) AudioCodec() string {
	defer qt.Recovering("QMediaResource::audioCodec")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMediaResource_AudioCodec(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMediaResource) ChannelCount() int {
	defer qt.Recovering("QMediaResource::channelCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaResource_ChannelCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMediaResource) DataSize() int64 {
	defer qt.Recovering("QMediaResource::dataSize")

	if ptr.Pointer() != nil {
		return int64(C.QMediaResource_DataSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaResource) IsNull() bool {
	defer qt.Recovering("QMediaResource::isNull")

	if ptr.Pointer() != nil {
		return C.QMediaResource_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaResource) Language() string {
	defer qt.Recovering("QMediaResource::language")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMediaResource_Language(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMediaResource) MimeType() string {
	defer qt.Recovering("QMediaResource::mimeType")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMediaResource_MimeType(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMediaResource) Request() *network.QNetworkRequest {
	defer qt.Recovering("QMediaResource::request")

	if ptr.Pointer() != nil {
		var tmpValue = network.NewQNetworkRequestFromPointer(C.QMediaResource_Request(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*network.QNetworkRequest).DestroyQNetworkRequest)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaResource) Resolution() *core.QSize {
	defer qt.Recovering("QMediaResource::resolution")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QMediaResource_Resolution(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaResource) SampleRate() int {
	defer qt.Recovering("QMediaResource::sampleRate")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaResource_SampleRate(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMediaResource) SetAudioBitRate(rate int) {
	defer qt.Recovering("QMediaResource::setAudioBitRate")

	if ptr.Pointer() != nil {
		C.QMediaResource_SetAudioBitRate(ptr.Pointer(), C.int(int32(rate)))
	}
}

func (ptr *QMediaResource) SetAudioCodec(codec string) {
	defer qt.Recovering("QMediaResource::setAudioCodec")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		C.QMediaResource_SetAudioCodec(ptr.Pointer(), codecC)
	}
}

func (ptr *QMediaResource) SetChannelCount(channels int) {
	defer qt.Recovering("QMediaResource::setChannelCount")

	if ptr.Pointer() != nil {
		C.QMediaResource_SetChannelCount(ptr.Pointer(), C.int(int32(channels)))
	}
}

func (ptr *QMediaResource) SetDataSize(size int64) {
	defer qt.Recovering("QMediaResource::setDataSize")

	if ptr.Pointer() != nil {
		C.QMediaResource_SetDataSize(ptr.Pointer(), C.longlong(size))
	}
}

func (ptr *QMediaResource) SetLanguage(language string) {
	defer qt.Recovering("QMediaResource::setLanguage")

	if ptr.Pointer() != nil {
		var languageC = C.CString(language)
		defer C.free(unsafe.Pointer(languageC))
		C.QMediaResource_SetLanguage(ptr.Pointer(), languageC)
	}
}

func (ptr *QMediaResource) SetResolution(resolution core.QSize_ITF) {
	defer qt.Recovering("QMediaResource::setResolution")

	if ptr.Pointer() != nil {
		C.QMediaResource_SetResolution(ptr.Pointer(), core.PointerFromQSize(resolution))
	}
}

func (ptr *QMediaResource) SetResolution2(width int, height int) {
	defer qt.Recovering("QMediaResource::setResolution")

	if ptr.Pointer() != nil {
		C.QMediaResource_SetResolution2(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QMediaResource) SetSampleRate(sampleRate int) {
	defer qt.Recovering("QMediaResource::setSampleRate")

	if ptr.Pointer() != nil {
		C.QMediaResource_SetSampleRate(ptr.Pointer(), C.int(int32(sampleRate)))
	}
}

func (ptr *QMediaResource) SetVideoBitRate(rate int) {
	defer qt.Recovering("QMediaResource::setVideoBitRate")

	if ptr.Pointer() != nil {
		C.QMediaResource_SetVideoBitRate(ptr.Pointer(), C.int(int32(rate)))
	}
}

func (ptr *QMediaResource) SetVideoCodec(codec string) {
	defer qt.Recovering("QMediaResource::setVideoCodec")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		C.QMediaResource_SetVideoCodec(ptr.Pointer(), codecC)
	}
}

func (ptr *QMediaResource) Url() *core.QUrl {
	defer qt.Recovering("QMediaResource::url")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QMediaResource_Url(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaResource) VideoBitRate() int {
	defer qt.Recovering("QMediaResource::videoBitRate")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaResource_VideoBitRate(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMediaResource) VideoCodec() string {
	defer qt.Recovering("QMediaResource::videoCodec")

	if ptr.Pointer() != nil {
		return C.GoString(C.QMediaResource_VideoCodec(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMediaResource) DestroyQMediaResource() {
	defer qt.Recovering("QMediaResource::~QMediaResource")

	if ptr.Pointer() != nil {
		C.QMediaResource_DestroyQMediaResource(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QMediaService struct {
	core.QObject
}

type QMediaService_ITF interface {
	core.QObject_ITF
	QMediaService_PTR() *QMediaService
}

func (p *QMediaService) QMediaService_PTR() *QMediaService {
	return p
}

func (p *QMediaService) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QMediaService) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaService(ptr QMediaService_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaService_PTR().Pointer()
	}
	return nil
}

func NewQMediaServiceFromPointer(ptr unsafe.Pointer) *QMediaService {
	var n = new(QMediaService)
	n.SetPointer(ptr)
	return n
}
func NewQMediaService(parent core.QObject_ITF) *QMediaService {
	defer qt.Recovering("QMediaService::QMediaService")

	var tmpValue = NewQMediaServiceFromPointer(C.QMediaService_NewQMediaService(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaService_ReleaseControl
func callbackQMediaService_ReleaseControl(ptr unsafe.Pointer, control unsafe.Pointer) {
	defer qt.Recovering("callback QMediaService::releaseControl")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::releaseControl"); signal != nil {
		signal.(func(*QMediaControl))(NewQMediaControlFromPointer(control))
	}

}

func (ptr *QMediaService) ConnectReleaseControl(f func(control *QMediaControl)) {
	defer qt.Recovering("connect QMediaService::releaseControl")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::releaseControl", f)
	}
}

func (ptr *QMediaService) DisconnectReleaseControl(control QMediaControl_ITF) {
	defer qt.Recovering("disconnect QMediaService::releaseControl")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::releaseControl")
	}
}

func (ptr *QMediaService) ReleaseControl(control QMediaControl_ITF) {
	defer qt.Recovering("QMediaService::releaseControl")

	if ptr.Pointer() != nil {
		C.QMediaService_ReleaseControl(ptr.Pointer(), PointerFromQMediaControl(control))
	}
}

//export callbackQMediaService_RequestControl
func callbackQMediaService_RequestControl(ptr unsafe.Pointer, interfa *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QMediaService::requestControl")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::requestControl"); signal != nil {
		return PointerFromQMediaControl(signal.(func(string) *QMediaControl)(C.GoString(interfa)))
	}

	return PointerFromQMediaControl(nil)
}

func (ptr *QMediaService) ConnectRequestControl(f func(interfa string) *QMediaControl) {
	defer qt.Recovering("connect QMediaService::requestControl")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::requestControl", f)
	}
}

func (ptr *QMediaService) DisconnectRequestControl(interfa string) {
	defer qt.Recovering("disconnect QMediaService::requestControl")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::requestControl")
	}
}

func (ptr *QMediaService) RequestControl(interfa string) *QMediaControl {
	defer qt.Recovering("QMediaService::requestControl")

	if ptr.Pointer() != nil {
		var interfaC = C.CString(interfa)
		defer C.free(unsafe.Pointer(interfaC))
		var tmpValue = NewQMediaControlFromPointer(C.QMediaService_RequestControl(ptr.Pointer(), interfaC))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMediaService) RequestControl2() unsafe.Pointer {
	defer qt.Recovering("QMediaService::requestControl")

	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QMediaService_RequestControl2(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaService) DestroyQMediaService() {
	defer qt.Recovering("QMediaService::~QMediaService")

	if ptr.Pointer() != nil {
		C.QMediaService_DestroyQMediaService(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaService_TimerEvent
func callbackQMediaService_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaService::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaServiceFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaService) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaService::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::timerEvent", f)
	}
}

func (ptr *QMediaService) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaService::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::timerEvent")
	}
}

func (ptr *QMediaService) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaService::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaService_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaService) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaService::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaService_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaService_ChildEvent
func callbackQMediaService_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaService::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaServiceFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaService) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaService::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::childEvent", f)
	}
}

func (ptr *QMediaService) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaService::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::childEvent")
	}
}

func (ptr *QMediaService) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaService::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaService_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaService) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaService::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaService_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaService_ConnectNotify
func callbackQMediaService_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaService::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaServiceFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaService) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaService::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::connectNotify", f)
	}
}

func (ptr *QMediaService) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaService::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::connectNotify")
	}
}

func (ptr *QMediaService) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaService::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaService_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaService) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaService::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaService_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaService_CustomEvent
func callbackQMediaService_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaService::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaServiceFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaService) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaService::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::customEvent", f)
	}
}

func (ptr *QMediaService) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaService::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::customEvent")
	}
}

func (ptr *QMediaService) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaService::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaService_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaService) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaService::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaService_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaService_DeleteLater
func callbackQMediaService_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaService::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaServiceFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaService) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaService::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::deleteLater", f)
	}
}

func (ptr *QMediaService) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaService::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::deleteLater")
	}
}

func (ptr *QMediaService) DeleteLater() {
	defer qt.Recovering("QMediaService::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaService_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaService) DeleteLaterDefault() {
	defer qt.Recovering("QMediaService::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaService_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaService_DisconnectNotify
func callbackQMediaService_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaService::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaServiceFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaService) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaService::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::disconnectNotify", f)
	}
}

func (ptr *QMediaService) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaService::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::disconnectNotify")
	}
}

func (ptr *QMediaService) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaService::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaService_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaService) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaService::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaService_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaService_Event
func callbackQMediaService_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaService::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaServiceFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaService) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaService::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::event", f)
	}
}

func (ptr *QMediaService) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaService::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::event")
	}
}

func (ptr *QMediaService) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaService::event")

	if ptr.Pointer() != nil {
		return C.QMediaService_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaService) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaService::event")

	if ptr.Pointer() != nil {
		return C.QMediaService_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaService_EventFilter
func callbackQMediaService_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaService::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaServiceFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaService) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaService::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::eventFilter", f)
	}
}

func (ptr *QMediaService) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaService::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::eventFilter")
	}
}

func (ptr *QMediaService) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaService::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaService_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaService) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaService::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaService_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaService_MetaObject
func callbackQMediaService_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaService::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaService::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaServiceFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaService) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaService::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::metaObject", f)
	}
}

func (ptr *QMediaService) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaService::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaService::metaObject")
	}
}

func (ptr *QMediaService) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaService::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaService_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaService) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaService::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaService_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaServiceCameraInfoInterface struct {
	ptr unsafe.Pointer
}

type QMediaServiceCameraInfoInterface_ITF interface {
	QMediaServiceCameraInfoInterface_PTR() *QMediaServiceCameraInfoInterface
}

func (p *QMediaServiceCameraInfoInterface) QMediaServiceCameraInfoInterface_PTR() *QMediaServiceCameraInfoInterface {
	return p
}

func (p *QMediaServiceCameraInfoInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaServiceCameraInfoInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaServiceCameraInfoInterface(ptr QMediaServiceCameraInfoInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaServiceCameraInfoInterface_PTR().Pointer()
	}
	return nil
}

func NewQMediaServiceCameraInfoInterfaceFromPointer(ptr unsafe.Pointer) *QMediaServiceCameraInfoInterface {
	var n = new(QMediaServiceCameraInfoInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQMediaServiceCameraInfoInterface_CameraOrientation
func callbackQMediaServiceCameraInfoInterface_CameraOrientation(ptr unsafe.Pointer, device *C.char) C.int {
	defer qt.Recovering("callback QMediaServiceCameraInfoInterface::cameraOrientation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceCameraInfoInterface::cameraOrientation"); signal != nil {
		return C.int(int32(signal.(func(string) int)(qt.HexDecodeToString(C.GoString(device)))))
	}

	return C.int(int32(0))
}

func (ptr *QMediaServiceCameraInfoInterface) ConnectCameraOrientation(f func(device string) int) {
	defer qt.Recovering("connect QMediaServiceCameraInfoInterface::cameraOrientation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceCameraInfoInterface::cameraOrientation", f)
	}
}

func (ptr *QMediaServiceCameraInfoInterface) DisconnectCameraOrientation(device string) {
	defer qt.Recovering("disconnect QMediaServiceCameraInfoInterface::cameraOrientation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceCameraInfoInterface::cameraOrientation")
	}
}

func (ptr *QMediaServiceCameraInfoInterface) CameraOrientation(device string) int {
	defer qt.Recovering("QMediaServiceCameraInfoInterface::cameraOrientation")

	if ptr.Pointer() != nil {
		var deviceC = C.CString(hex.EncodeToString([]byte(device)))
		defer C.free(unsafe.Pointer(deviceC))
		return int(int32(C.QMediaServiceCameraInfoInterface_CameraOrientation(ptr.Pointer(), deviceC)))
	}
	return 0
}

//export callbackQMediaServiceCameraInfoInterface_CameraPosition
func callbackQMediaServiceCameraInfoInterface_CameraPosition(ptr unsafe.Pointer, device *C.char) C.longlong {
	defer qt.Recovering("callback QMediaServiceCameraInfoInterface::cameraPosition")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceCameraInfoInterface::cameraPosition"); signal != nil {
		return C.longlong(signal.(func(string) QCamera__Position)(qt.HexDecodeToString(C.GoString(device))))
	}

	return C.longlong(0)
}

func (ptr *QMediaServiceCameraInfoInterface) ConnectCameraPosition(f func(device string) QCamera__Position) {
	defer qt.Recovering("connect QMediaServiceCameraInfoInterface::cameraPosition")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceCameraInfoInterface::cameraPosition", f)
	}
}

func (ptr *QMediaServiceCameraInfoInterface) DisconnectCameraPosition(device string) {
	defer qt.Recovering("disconnect QMediaServiceCameraInfoInterface::cameraPosition")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceCameraInfoInterface::cameraPosition")
	}
}

func (ptr *QMediaServiceCameraInfoInterface) CameraPosition(device string) QCamera__Position {
	defer qt.Recovering("QMediaServiceCameraInfoInterface::cameraPosition")

	if ptr.Pointer() != nil {
		var deviceC = C.CString(hex.EncodeToString([]byte(device)))
		defer C.free(unsafe.Pointer(deviceC))
		return QCamera__Position(C.QMediaServiceCameraInfoInterface_CameraPosition(ptr.Pointer(), deviceC))
	}
	return 0
}

func (ptr *QMediaServiceCameraInfoInterface) DestroyQMediaServiceCameraInfoInterface() {
	defer qt.Recovering("QMediaServiceCameraInfoInterface::~QMediaServiceCameraInfoInterface")

	if ptr.Pointer() != nil {
		C.QMediaServiceCameraInfoInterface_DestroyQMediaServiceCameraInfoInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QMediaServiceDefaultDeviceInterface struct {
	ptr unsafe.Pointer
}

type QMediaServiceDefaultDeviceInterface_ITF interface {
	QMediaServiceDefaultDeviceInterface_PTR() *QMediaServiceDefaultDeviceInterface
}

func (p *QMediaServiceDefaultDeviceInterface) QMediaServiceDefaultDeviceInterface_PTR() *QMediaServiceDefaultDeviceInterface {
	return p
}

func (p *QMediaServiceDefaultDeviceInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaServiceDefaultDeviceInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaServiceDefaultDeviceInterface(ptr QMediaServiceDefaultDeviceInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaServiceDefaultDeviceInterface_PTR().Pointer()
	}
	return nil
}

func NewQMediaServiceDefaultDeviceInterfaceFromPointer(ptr unsafe.Pointer) *QMediaServiceDefaultDeviceInterface {
	var n = new(QMediaServiceDefaultDeviceInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQMediaServiceDefaultDeviceInterface_DefaultDevice
func callbackQMediaServiceDefaultDeviceInterface_DefaultDevice(ptr unsafe.Pointer, service *C.char) *C.char {
	defer qt.Recovering("callback QMediaServiceDefaultDeviceInterface::defaultDevice")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceDefaultDeviceInterface::defaultDevice"); signal != nil {
		return C.CString(hex.EncodeToString([]byte(signal.(func(string) string)(qt.HexDecodeToString(C.GoString(service))))))
	}

	return C.CString(hex.EncodeToString([]byte("")))
}

func (ptr *QMediaServiceDefaultDeviceInterface) ConnectDefaultDevice(f func(service string) string) {
	defer qt.Recovering("connect QMediaServiceDefaultDeviceInterface::defaultDevice")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceDefaultDeviceInterface::defaultDevice", f)
	}
}

func (ptr *QMediaServiceDefaultDeviceInterface) DisconnectDefaultDevice(service string) {
	defer qt.Recovering("disconnect QMediaServiceDefaultDeviceInterface::defaultDevice")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceDefaultDeviceInterface::defaultDevice")
	}
}

func (ptr *QMediaServiceDefaultDeviceInterface) DefaultDevice(service string) string {
	defer qt.Recovering("QMediaServiceDefaultDeviceInterface::defaultDevice")

	if ptr.Pointer() != nil {
		var serviceC = C.CString(hex.EncodeToString([]byte(service)))
		defer C.free(unsafe.Pointer(serviceC))
		return qt.HexDecodeToString(C.GoString(C.QMediaServiceDefaultDeviceInterface_DefaultDevice(ptr.Pointer(), serviceC)))
	}
	return ""
}

func (ptr *QMediaServiceDefaultDeviceInterface) DestroyQMediaServiceDefaultDeviceInterface() {
	defer qt.Recovering("QMediaServiceDefaultDeviceInterface::~QMediaServiceDefaultDeviceInterface")

	if ptr.Pointer() != nil {
		C.QMediaServiceDefaultDeviceInterface_DestroyQMediaServiceDefaultDeviceInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QMediaServiceFeaturesInterface struct {
	ptr unsafe.Pointer
}

type QMediaServiceFeaturesInterface_ITF interface {
	QMediaServiceFeaturesInterface_PTR() *QMediaServiceFeaturesInterface
}

func (p *QMediaServiceFeaturesInterface) QMediaServiceFeaturesInterface_PTR() *QMediaServiceFeaturesInterface {
	return p
}

func (p *QMediaServiceFeaturesInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaServiceFeaturesInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaServiceFeaturesInterface(ptr QMediaServiceFeaturesInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaServiceFeaturesInterface_PTR().Pointer()
	}
	return nil
}

func NewQMediaServiceFeaturesInterfaceFromPointer(ptr unsafe.Pointer) *QMediaServiceFeaturesInterface {
	var n = new(QMediaServiceFeaturesInterface)
	n.SetPointer(ptr)
	return n
}
func (ptr *QMediaServiceFeaturesInterface) DestroyQMediaServiceFeaturesInterface() {
	defer qt.Recovering("QMediaServiceFeaturesInterface::~QMediaServiceFeaturesInterface")

	if ptr.Pointer() != nil {
		C.QMediaServiceFeaturesInterface_DestroyQMediaServiceFeaturesInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QMediaServiceProviderPlugin struct {
	core.QObject
}

type QMediaServiceProviderPlugin_ITF interface {
	core.QObject_ITF
	QMediaServiceProviderPlugin_PTR() *QMediaServiceProviderPlugin
}

func (p *QMediaServiceProviderPlugin) QMediaServiceProviderPlugin_PTR() *QMediaServiceProviderPlugin {
	return p
}

func (p *QMediaServiceProviderPlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QMediaServiceProviderPlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaServiceProviderPlugin(ptr QMediaServiceProviderPlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaServiceProviderPlugin_PTR().Pointer()
	}
	return nil
}

func NewQMediaServiceProviderPluginFromPointer(ptr unsafe.Pointer) *QMediaServiceProviderPlugin {
	var n = new(QMediaServiceProviderPlugin)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMediaServiceProviderPlugin) DestroyQMediaServiceProviderPlugin() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

//export callbackQMediaServiceProviderPlugin_Create
func callbackQMediaServiceProviderPlugin_Create(ptr unsafe.Pointer, key *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::create")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::create"); signal != nil {
		return PointerFromQMediaService(signal.(func(string) *QMediaService)(C.GoString(key)))
	}

	return PointerFromQMediaService(nil)
}

func (ptr *QMediaServiceProviderPlugin) ConnectCreate(f func(key string) *QMediaService) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::create")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::create", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectCreate(key string) {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::create")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::create")
	}
}

func (ptr *QMediaServiceProviderPlugin) Create(key string) *QMediaService {
	defer qt.Recovering("QMediaServiceProviderPlugin::create")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = NewQMediaServiceFromPointer(C.QMediaServiceProviderPlugin_Create(ptr.Pointer(), keyC))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQMediaServiceProviderPlugin_Release
func callbackQMediaServiceProviderPlugin_Release(ptr unsafe.Pointer, service unsafe.Pointer) {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::release")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::release"); signal != nil {
		signal.(func(*QMediaService))(NewQMediaServiceFromPointer(service))
	}

}

func (ptr *QMediaServiceProviderPlugin) ConnectRelease(f func(service *QMediaService)) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::release")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::release", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectRelease(service QMediaService_ITF) {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::release")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::release")
	}
}

func (ptr *QMediaServiceProviderPlugin) Release(service QMediaService_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::release")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_Release(ptr.Pointer(), PointerFromQMediaService(service))
	}
}

//export callbackQMediaServiceProviderPlugin_TimerEvent
func callbackQMediaServiceProviderPlugin_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaServiceProviderPluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaServiceProviderPlugin) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::timerEvent", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::timerEvent")
	}
}

func (ptr *QMediaServiceProviderPlugin) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaServiceProviderPlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaServiceProviderPlugin_ChildEvent
func callbackQMediaServiceProviderPlugin_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaServiceProviderPluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaServiceProviderPlugin) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::childEvent", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::childEvent")
	}
}

func (ptr *QMediaServiceProviderPlugin) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaServiceProviderPlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaServiceProviderPlugin_ConnectNotify
func callbackQMediaServiceProviderPlugin_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaServiceProviderPluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaServiceProviderPlugin) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::connectNotify", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::connectNotify")
	}
}

func (ptr *QMediaServiceProviderPlugin) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaServiceProviderPlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaServiceProviderPlugin_CustomEvent
func callbackQMediaServiceProviderPlugin_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaServiceProviderPluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaServiceProviderPlugin) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::customEvent", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::customEvent")
	}
}

func (ptr *QMediaServiceProviderPlugin) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaServiceProviderPlugin) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaServiceProviderPlugin_DeleteLater
func callbackQMediaServiceProviderPlugin_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaServiceProviderPluginFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaServiceProviderPlugin) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::deleteLater", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::deleteLater")
	}
}

func (ptr *QMediaServiceProviderPlugin) DeleteLater() {
	defer qt.Recovering("QMediaServiceProviderPlugin::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaServiceProviderPlugin) DeleteLaterDefault() {
	defer qt.Recovering("QMediaServiceProviderPlugin::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaServiceProviderPlugin_DisconnectNotify
func callbackQMediaServiceProviderPlugin_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaServiceProviderPluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaServiceProviderPlugin) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::disconnectNotify", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::disconnectNotify")
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaServiceProviderPlugin::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaServiceProviderPlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaServiceProviderPlugin_Event
func callbackQMediaServiceProviderPlugin_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaServiceProviderPluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaServiceProviderPlugin) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::event", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::event")
	}
}

func (ptr *QMediaServiceProviderPlugin) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaServiceProviderPlugin::event")

	if ptr.Pointer() != nil {
		return C.QMediaServiceProviderPlugin_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaServiceProviderPlugin) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaServiceProviderPlugin::event")

	if ptr.Pointer() != nil {
		return C.QMediaServiceProviderPlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaServiceProviderPlugin_EventFilter
func callbackQMediaServiceProviderPlugin_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaServiceProviderPluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaServiceProviderPlugin) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::eventFilter", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::eventFilter")
	}
}

func (ptr *QMediaServiceProviderPlugin) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaServiceProviderPlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaServiceProviderPlugin_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaServiceProviderPlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaServiceProviderPlugin::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaServiceProviderPlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaServiceProviderPlugin_MetaObject
func callbackQMediaServiceProviderPlugin_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaServiceProviderPlugin::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceProviderPlugin::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaServiceProviderPluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaServiceProviderPlugin) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaServiceProviderPlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::metaObject", f)
	}
}

func (ptr *QMediaServiceProviderPlugin) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaServiceProviderPlugin::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceProviderPlugin::metaObject")
	}
}

func (ptr *QMediaServiceProviderPlugin) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaServiceProviderPlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaServiceProviderPlugin_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaServiceProviderPlugin) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaServiceProviderPlugin::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaServiceProviderPlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaServiceSupportedDevicesInterface struct {
	ptr unsafe.Pointer
}

type QMediaServiceSupportedDevicesInterface_ITF interface {
	QMediaServiceSupportedDevicesInterface_PTR() *QMediaServiceSupportedDevicesInterface
}

func (p *QMediaServiceSupportedDevicesInterface) QMediaServiceSupportedDevicesInterface_PTR() *QMediaServiceSupportedDevicesInterface {
	return p
}

func (p *QMediaServiceSupportedDevicesInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaServiceSupportedDevicesInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaServiceSupportedDevicesInterface(ptr QMediaServiceSupportedDevicesInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaServiceSupportedDevicesInterface_PTR().Pointer()
	}
	return nil
}

func NewQMediaServiceSupportedDevicesInterfaceFromPointer(ptr unsafe.Pointer) *QMediaServiceSupportedDevicesInterface {
	var n = new(QMediaServiceSupportedDevicesInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQMediaServiceSupportedDevicesInterface_DeviceDescription
func callbackQMediaServiceSupportedDevicesInterface_DeviceDescription(ptr unsafe.Pointer, service *C.char, device *C.char) *C.char {
	defer qt.Recovering("callback QMediaServiceSupportedDevicesInterface::deviceDescription")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceSupportedDevicesInterface::deviceDescription"); signal != nil {
		return C.CString(signal.(func(string, string) string)(qt.HexDecodeToString(C.GoString(service)), qt.HexDecodeToString(C.GoString(device))))
	}

	return C.CString("")
}

func (ptr *QMediaServiceSupportedDevicesInterface) ConnectDeviceDescription(f func(service string, device string) string) {
	defer qt.Recovering("connect QMediaServiceSupportedDevicesInterface::deviceDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceSupportedDevicesInterface::deviceDescription", f)
	}
}

func (ptr *QMediaServiceSupportedDevicesInterface) DisconnectDeviceDescription(service string, device string) {
	defer qt.Recovering("disconnect QMediaServiceSupportedDevicesInterface::deviceDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceSupportedDevicesInterface::deviceDescription")
	}
}

func (ptr *QMediaServiceSupportedDevicesInterface) DeviceDescription(service string, device string) string {
	defer qt.Recovering("QMediaServiceSupportedDevicesInterface::deviceDescription")

	if ptr.Pointer() != nil {
		var serviceC = C.CString(hex.EncodeToString([]byte(service)))
		defer C.free(unsafe.Pointer(serviceC))
		var deviceC = C.CString(hex.EncodeToString([]byte(device)))
		defer C.free(unsafe.Pointer(deviceC))
		return C.GoString(C.QMediaServiceSupportedDevicesInterface_DeviceDescription(ptr.Pointer(), serviceC, deviceC))
	}
	return ""
}

func (ptr *QMediaServiceSupportedDevicesInterface) DestroyQMediaServiceSupportedDevicesInterface() {
	defer qt.Recovering("QMediaServiceSupportedDevicesInterface::~QMediaServiceSupportedDevicesInterface")

	if ptr.Pointer() != nil {
		C.QMediaServiceSupportedDevicesInterface_DestroyQMediaServiceSupportedDevicesInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QMediaServiceSupportedFormatsInterface struct {
	ptr unsafe.Pointer
}

type QMediaServiceSupportedFormatsInterface_ITF interface {
	QMediaServiceSupportedFormatsInterface_PTR() *QMediaServiceSupportedFormatsInterface
}

func (p *QMediaServiceSupportedFormatsInterface) QMediaServiceSupportedFormatsInterface_PTR() *QMediaServiceSupportedFormatsInterface {
	return p
}

func (p *QMediaServiceSupportedFormatsInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaServiceSupportedFormatsInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaServiceSupportedFormatsInterface(ptr QMediaServiceSupportedFormatsInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaServiceSupportedFormatsInterface_PTR().Pointer()
	}
	return nil
}

func NewQMediaServiceSupportedFormatsInterfaceFromPointer(ptr unsafe.Pointer) *QMediaServiceSupportedFormatsInterface {
	var n = new(QMediaServiceSupportedFormatsInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQMediaServiceSupportedFormatsInterface_HasSupport
func callbackQMediaServiceSupportedFormatsInterface_HasSupport(ptr unsafe.Pointer, mimeType *C.char, codecs *C.char) C.longlong {
	defer qt.Recovering("callback QMediaServiceSupportedFormatsInterface::hasSupport")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceSupportedFormatsInterface::hasSupport"); signal != nil {
		return C.longlong(signal.(func(string, []string) QMultimedia__SupportEstimate)(C.GoString(mimeType), strings.Split(C.GoString(codecs), "|")))
	}

	return C.longlong(0)
}

func (ptr *QMediaServiceSupportedFormatsInterface) ConnectHasSupport(f func(mimeType string, codecs []string) QMultimedia__SupportEstimate) {
	defer qt.Recovering("connect QMediaServiceSupportedFormatsInterface::hasSupport")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceSupportedFormatsInterface::hasSupport", f)
	}
}

func (ptr *QMediaServiceSupportedFormatsInterface) DisconnectHasSupport(mimeType string, codecs []string) {
	defer qt.Recovering("disconnect QMediaServiceSupportedFormatsInterface::hasSupport")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceSupportedFormatsInterface::hasSupport")
	}
}

func (ptr *QMediaServiceSupportedFormatsInterface) HasSupport(mimeType string, codecs []string) QMultimedia__SupportEstimate {
	defer qt.Recovering("QMediaServiceSupportedFormatsInterface::hasSupport")

	if ptr.Pointer() != nil {
		var mimeTypeC = C.CString(mimeType)
		defer C.free(unsafe.Pointer(mimeTypeC))
		var codecsC = C.CString(strings.Join(codecs, "|"))
		defer C.free(unsafe.Pointer(codecsC))
		return QMultimedia__SupportEstimate(C.QMediaServiceSupportedFormatsInterface_HasSupport(ptr.Pointer(), mimeTypeC, codecsC))
	}
	return 0
}

//export callbackQMediaServiceSupportedFormatsInterface_SupportedMimeTypes
func callbackQMediaServiceSupportedFormatsInterface_SupportedMimeTypes(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QMediaServiceSupportedFormatsInterface::supportedMimeTypes")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaServiceSupportedFormatsInterface::supportedMimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QMediaServiceSupportedFormatsInterface) ConnectSupportedMimeTypes(f func() []string) {
	defer qt.Recovering("connect QMediaServiceSupportedFormatsInterface::supportedMimeTypes")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceSupportedFormatsInterface::supportedMimeTypes", f)
	}
}

func (ptr *QMediaServiceSupportedFormatsInterface) DisconnectSupportedMimeTypes() {
	defer qt.Recovering("disconnect QMediaServiceSupportedFormatsInterface::supportedMimeTypes")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaServiceSupportedFormatsInterface::supportedMimeTypes")
	}
}

func (ptr *QMediaServiceSupportedFormatsInterface) SupportedMimeTypes() []string {
	defer qt.Recovering("QMediaServiceSupportedFormatsInterface::supportedMimeTypes")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QMediaServiceSupportedFormatsInterface_SupportedMimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMediaServiceSupportedFormatsInterface) DestroyQMediaServiceSupportedFormatsInterface() {
	defer qt.Recovering("QMediaServiceSupportedFormatsInterface::~QMediaServiceSupportedFormatsInterface")

	if ptr.Pointer() != nil {
		C.QMediaServiceSupportedFormatsInterface_DestroyQMediaServiceSupportedFormatsInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//QMediaStreamsControl::StreamType
type QMediaStreamsControl__StreamType int64

const (
	QMediaStreamsControl__UnknownStream    = QMediaStreamsControl__StreamType(0)
	QMediaStreamsControl__VideoStream      = QMediaStreamsControl__StreamType(1)
	QMediaStreamsControl__AudioStream      = QMediaStreamsControl__StreamType(2)
	QMediaStreamsControl__SubPictureStream = QMediaStreamsControl__StreamType(3)
	QMediaStreamsControl__DataStream       = QMediaStreamsControl__StreamType(4)
)

type QMediaStreamsControl struct {
	QMediaControl
}

type QMediaStreamsControl_ITF interface {
	QMediaControl_ITF
	QMediaStreamsControl_PTR() *QMediaStreamsControl
}

func (p *QMediaStreamsControl) QMediaStreamsControl_PTR() *QMediaStreamsControl {
	return p
}

func (p *QMediaStreamsControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMediaStreamsControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaStreamsControl(ptr QMediaStreamsControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaStreamsControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaStreamsControlFromPointer(ptr unsafe.Pointer) *QMediaStreamsControl {
	var n = new(QMediaStreamsControl)
	n.SetPointer(ptr)
	return n
}
func NewQMediaStreamsControl(parent core.QObject_ITF) *QMediaStreamsControl {
	defer qt.Recovering("QMediaStreamsControl::QMediaStreamsControl")

	var tmpValue = NewQMediaStreamsControlFromPointer(C.QMediaStreamsControl_NewQMediaStreamsControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaStreamsControl_ActiveStreamsChanged
func callbackQMediaStreamsControl_ActiveStreamsChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaStreamsControl::activeStreamsChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::activeStreamsChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaStreamsControl) ConnectActiveStreamsChanged(f func()) {
	defer qt.Recovering("connect QMediaStreamsControl::activeStreamsChanged")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_ConnectActiveStreamsChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::activeStreamsChanged", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectActiveStreamsChanged() {
	defer qt.Recovering("disconnect QMediaStreamsControl::activeStreamsChanged")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_DisconnectActiveStreamsChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::activeStreamsChanged")
	}
}

func (ptr *QMediaStreamsControl) ActiveStreamsChanged() {
	defer qt.Recovering("QMediaStreamsControl::activeStreamsChanged")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_ActiveStreamsChanged(ptr.Pointer())
	}
}

//export callbackQMediaStreamsControl_IsActive
func callbackQMediaStreamsControl_IsActive(ptr unsafe.Pointer, stream C.int) C.char {
	defer qt.Recovering("callback QMediaStreamsControl::isActive")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::isActive"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(stream))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMediaStreamsControl) ConnectIsActive(f func(stream int) bool) {
	defer qt.Recovering("connect QMediaStreamsControl::isActive")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::isActive", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectIsActive(stream int) {
	defer qt.Recovering("disconnect QMediaStreamsControl::isActive")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::isActive")
	}
}

func (ptr *QMediaStreamsControl) IsActive(stream int) bool {
	defer qt.Recovering("QMediaStreamsControl::isActive")

	if ptr.Pointer() != nil {
		return C.QMediaStreamsControl_IsActive(ptr.Pointer(), C.int(int32(stream))) != 0
	}
	return false
}

//export callbackQMediaStreamsControl_MetaData
func callbackQMediaStreamsControl_MetaData(ptr unsafe.Pointer, stream C.int, key *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QMediaStreamsControl::metaData")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::metaData"); signal != nil {
		return core.PointerFromQVariant(signal.(func(int, string) *core.QVariant)(int(int32(stream)), C.GoString(key)))
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QMediaStreamsControl) ConnectMetaData(f func(stream int, key string) *core.QVariant) {
	defer qt.Recovering("connect QMediaStreamsControl::metaData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::metaData", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectMetaData(stream int, key string) {
	defer qt.Recovering("disconnect QMediaStreamsControl::metaData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::metaData")
	}
}

func (ptr *QMediaStreamsControl) MetaData(stream int, key string) *core.QVariant {
	defer qt.Recovering("QMediaStreamsControl::metaData")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = core.NewQVariantFromPointer(C.QMediaStreamsControl_MetaData(ptr.Pointer(), C.int(int32(stream)), keyC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQMediaStreamsControl_SetActive
func callbackQMediaStreamsControl_SetActive(ptr unsafe.Pointer, stream C.int, state C.char) {
	defer qt.Recovering("callback QMediaStreamsControl::setActive")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::setActive"); signal != nil {
		signal.(func(int, bool))(int(int32(stream)), int8(state) != 0)
	}

}

func (ptr *QMediaStreamsControl) ConnectSetActive(f func(stream int, state bool)) {
	defer qt.Recovering("connect QMediaStreamsControl::setActive")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::setActive", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectSetActive(stream int, state bool) {
	defer qt.Recovering("disconnect QMediaStreamsControl::setActive")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::setActive")
	}
}

func (ptr *QMediaStreamsControl) SetActive(stream int, state bool) {
	defer qt.Recovering("QMediaStreamsControl::setActive")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_SetActive(ptr.Pointer(), C.int(int32(stream)), C.char(int8(qt.GoBoolToInt(state))))
	}
}

//export callbackQMediaStreamsControl_StreamCount
func callbackQMediaStreamsControl_StreamCount(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QMediaStreamsControl::streamCount")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::streamCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QMediaStreamsControl) ConnectStreamCount(f func() int) {
	defer qt.Recovering("connect QMediaStreamsControl::streamCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::streamCount", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectStreamCount() {
	defer qt.Recovering("disconnect QMediaStreamsControl::streamCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::streamCount")
	}
}

func (ptr *QMediaStreamsControl) StreamCount() int {
	defer qt.Recovering("QMediaStreamsControl::streamCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QMediaStreamsControl_StreamCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQMediaStreamsControl_StreamType
func callbackQMediaStreamsControl_StreamType(ptr unsafe.Pointer, stream C.int) C.longlong {
	defer qt.Recovering("callback QMediaStreamsControl::streamType")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::streamType"); signal != nil {
		return C.longlong(signal.(func(int) QMediaStreamsControl__StreamType)(int(int32(stream))))
	}

	return C.longlong(0)
}

func (ptr *QMediaStreamsControl) ConnectStreamType(f func(stream int) QMediaStreamsControl__StreamType) {
	defer qt.Recovering("connect QMediaStreamsControl::streamType")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::streamType", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectStreamType(stream int) {
	defer qt.Recovering("disconnect QMediaStreamsControl::streamType")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::streamType")
	}
}

func (ptr *QMediaStreamsControl) StreamType(stream int) QMediaStreamsControl__StreamType {
	defer qt.Recovering("QMediaStreamsControl::streamType")

	if ptr.Pointer() != nil {
		return QMediaStreamsControl__StreamType(C.QMediaStreamsControl_StreamType(ptr.Pointer(), C.int(int32(stream))))
	}
	return 0
}

//export callbackQMediaStreamsControl_StreamsChanged
func callbackQMediaStreamsControl_StreamsChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaStreamsControl::streamsChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::streamsChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaStreamsControl) ConnectStreamsChanged(f func()) {
	defer qt.Recovering("connect QMediaStreamsControl::streamsChanged")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_ConnectStreamsChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::streamsChanged", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectStreamsChanged() {
	defer qt.Recovering("disconnect QMediaStreamsControl::streamsChanged")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_DisconnectStreamsChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::streamsChanged")
	}
}

func (ptr *QMediaStreamsControl) StreamsChanged() {
	defer qt.Recovering("QMediaStreamsControl::streamsChanged")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_StreamsChanged(ptr.Pointer())
	}
}

func (ptr *QMediaStreamsControl) DestroyQMediaStreamsControl() {
	defer qt.Recovering("QMediaStreamsControl::~QMediaStreamsControl")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_DestroyQMediaStreamsControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaStreamsControl_TimerEvent
func callbackQMediaStreamsControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaStreamsControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaStreamsControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaStreamsControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaStreamsControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::timerEvent", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaStreamsControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::timerEvent")
	}
}

func (ptr *QMediaStreamsControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaStreamsControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaStreamsControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaStreamsControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaStreamsControl_ChildEvent
func callbackQMediaStreamsControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaStreamsControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaStreamsControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaStreamsControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaStreamsControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::childEvent", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaStreamsControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::childEvent")
	}
}

func (ptr *QMediaStreamsControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaStreamsControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaStreamsControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaStreamsControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaStreamsControl_ConnectNotify
func callbackQMediaStreamsControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaStreamsControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaStreamsControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaStreamsControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaStreamsControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::connectNotify", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaStreamsControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::connectNotify")
	}
}

func (ptr *QMediaStreamsControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaStreamsControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaStreamsControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaStreamsControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaStreamsControl_CustomEvent
func callbackQMediaStreamsControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaStreamsControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaStreamsControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaStreamsControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaStreamsControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::customEvent", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaStreamsControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::customEvent")
	}
}

func (ptr *QMediaStreamsControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaStreamsControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaStreamsControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaStreamsControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaStreamsControl_DeleteLater
func callbackQMediaStreamsControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaStreamsControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaStreamsControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaStreamsControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaStreamsControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::deleteLater", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaStreamsControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::deleteLater")
	}
}

func (ptr *QMediaStreamsControl) DeleteLater() {
	defer qt.Recovering("QMediaStreamsControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaStreamsControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaStreamsControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaStreamsControl_DisconnectNotify
func callbackQMediaStreamsControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaStreamsControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaStreamsControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaStreamsControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaStreamsControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::disconnectNotify", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaStreamsControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::disconnectNotify")
	}
}

func (ptr *QMediaStreamsControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaStreamsControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaStreamsControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaStreamsControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaStreamsControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaStreamsControl_Event
func callbackQMediaStreamsControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaStreamsControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaStreamsControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaStreamsControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaStreamsControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::event", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaStreamsControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::event")
	}
}

func (ptr *QMediaStreamsControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaStreamsControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaStreamsControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaStreamsControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaStreamsControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaStreamsControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaStreamsControl_EventFilter
func callbackQMediaStreamsControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaStreamsControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaStreamsControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaStreamsControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaStreamsControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::eventFilter", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaStreamsControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::eventFilter")
	}
}

func (ptr *QMediaStreamsControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaStreamsControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaStreamsControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaStreamsControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaStreamsControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaStreamsControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaStreamsControl_MetaObject
func callbackQMediaStreamsControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaStreamsControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaStreamsControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaStreamsControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaStreamsControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaStreamsControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::metaObject", f)
	}
}

func (ptr *QMediaStreamsControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaStreamsControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaStreamsControl::metaObject")
	}
}

func (ptr *QMediaStreamsControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaStreamsControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaStreamsControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaStreamsControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaStreamsControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaStreamsControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMediaTimeInterval struct {
	ptr unsafe.Pointer
}

type QMediaTimeInterval_ITF interface {
	QMediaTimeInterval_PTR() *QMediaTimeInterval
}

func (p *QMediaTimeInterval) QMediaTimeInterval_PTR() *QMediaTimeInterval {
	return p
}

func (p *QMediaTimeInterval) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaTimeInterval) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaTimeInterval(ptr QMediaTimeInterval_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaTimeInterval_PTR().Pointer()
	}
	return nil
}

func NewQMediaTimeIntervalFromPointer(ptr unsafe.Pointer) *QMediaTimeInterval {
	var n = new(QMediaTimeInterval)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMediaTimeInterval) DestroyQMediaTimeInterval() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQMediaTimeInterval() *QMediaTimeInterval {
	defer qt.Recovering("QMediaTimeInterval::QMediaTimeInterval")

	var tmpValue = NewQMediaTimeIntervalFromPointer(C.QMediaTimeInterval_NewQMediaTimeInterval())
	runtime.SetFinalizer(tmpValue, (*QMediaTimeInterval).DestroyQMediaTimeInterval)
	return tmpValue
}

func NewQMediaTimeInterval3(other QMediaTimeInterval_ITF) *QMediaTimeInterval {
	defer qt.Recovering("QMediaTimeInterval::QMediaTimeInterval")

	var tmpValue = NewQMediaTimeIntervalFromPointer(C.QMediaTimeInterval_NewQMediaTimeInterval3(PointerFromQMediaTimeInterval(other)))
	runtime.SetFinalizer(tmpValue, (*QMediaTimeInterval).DestroyQMediaTimeInterval)
	return tmpValue
}

func NewQMediaTimeInterval2(start int64, end int64) *QMediaTimeInterval {
	defer qt.Recovering("QMediaTimeInterval::QMediaTimeInterval")

	var tmpValue = NewQMediaTimeIntervalFromPointer(C.QMediaTimeInterval_NewQMediaTimeInterval2(C.longlong(start), C.longlong(end)))
	runtime.SetFinalizer(tmpValue, (*QMediaTimeInterval).DestroyQMediaTimeInterval)
	return tmpValue
}

func (ptr *QMediaTimeInterval) Contains(time int64) bool {
	defer qt.Recovering("QMediaTimeInterval::contains")

	if ptr.Pointer() != nil {
		return C.QMediaTimeInterval_Contains(ptr.Pointer(), C.longlong(time)) != 0
	}
	return false
}

func (ptr *QMediaTimeInterval) End() int64 {
	defer qt.Recovering("QMediaTimeInterval::end")

	if ptr.Pointer() != nil {
		return int64(C.QMediaTimeInterval_End(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaTimeInterval) IsNormal() bool {
	defer qt.Recovering("QMediaTimeInterval::isNormal")

	if ptr.Pointer() != nil {
		return C.QMediaTimeInterval_IsNormal(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaTimeInterval) Normalized() *QMediaTimeInterval {
	defer qt.Recovering("QMediaTimeInterval::normalized")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaTimeIntervalFromPointer(C.QMediaTimeInterval_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMediaTimeInterval).DestroyQMediaTimeInterval)
		return tmpValue
	}
	return nil
}

func (ptr *QMediaTimeInterval) Start() int64 {
	defer qt.Recovering("QMediaTimeInterval::start")

	if ptr.Pointer() != nil {
		return int64(C.QMediaTimeInterval_Start(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaTimeInterval) Translated(offset int64) *QMediaTimeInterval {
	defer qt.Recovering("QMediaTimeInterval::translated")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaTimeIntervalFromPointer(C.QMediaTimeInterval_Translated(ptr.Pointer(), C.longlong(offset)))
		runtime.SetFinalizer(tmpValue, (*QMediaTimeInterval).DestroyQMediaTimeInterval)
		return tmpValue
	}
	return nil
}

type QMediaTimeRange struct {
	ptr unsafe.Pointer
}

type QMediaTimeRange_ITF interface {
	QMediaTimeRange_PTR() *QMediaTimeRange
}

func (p *QMediaTimeRange) QMediaTimeRange_PTR() *QMediaTimeRange {
	return p
}

func (p *QMediaTimeRange) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMediaTimeRange) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMediaTimeRange(ptr QMediaTimeRange_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaTimeRange_PTR().Pointer()
	}
	return nil
}

func NewQMediaTimeRangeFromPointer(ptr unsafe.Pointer) *QMediaTimeRange {
	var n = new(QMediaTimeRange)
	n.SetPointer(ptr)
	return n
}
func NewQMediaTimeRange() *QMediaTimeRange {
	defer qt.Recovering("QMediaTimeRange::QMediaTimeRange")

	var tmpValue = NewQMediaTimeRangeFromPointer(C.QMediaTimeRange_NewQMediaTimeRange())
	runtime.SetFinalizer(tmpValue, (*QMediaTimeRange).DestroyQMediaTimeRange)
	return tmpValue
}

func NewQMediaTimeRange3(interval QMediaTimeInterval_ITF) *QMediaTimeRange {
	defer qt.Recovering("QMediaTimeRange::QMediaTimeRange")

	var tmpValue = NewQMediaTimeRangeFromPointer(C.QMediaTimeRange_NewQMediaTimeRange3(PointerFromQMediaTimeInterval(interval)))
	runtime.SetFinalizer(tmpValue, (*QMediaTimeRange).DestroyQMediaTimeRange)
	return tmpValue
}

func NewQMediaTimeRange4(ran QMediaTimeRange_ITF) *QMediaTimeRange {
	defer qt.Recovering("QMediaTimeRange::QMediaTimeRange")

	var tmpValue = NewQMediaTimeRangeFromPointer(C.QMediaTimeRange_NewQMediaTimeRange4(PointerFromQMediaTimeRange(ran)))
	runtime.SetFinalizer(tmpValue, (*QMediaTimeRange).DestroyQMediaTimeRange)
	return tmpValue
}

func NewQMediaTimeRange2(start int64, end int64) *QMediaTimeRange {
	defer qt.Recovering("QMediaTimeRange::QMediaTimeRange")

	var tmpValue = NewQMediaTimeRangeFromPointer(C.QMediaTimeRange_NewQMediaTimeRange2(C.longlong(start), C.longlong(end)))
	runtime.SetFinalizer(tmpValue, (*QMediaTimeRange).DestroyQMediaTimeRange)
	return tmpValue
}

func (ptr *QMediaTimeRange) AddInterval(interval QMediaTimeInterval_ITF) {
	defer qt.Recovering("QMediaTimeRange::addInterval")

	if ptr.Pointer() != nil {
		C.QMediaTimeRange_AddInterval(ptr.Pointer(), PointerFromQMediaTimeInterval(interval))
	}
}

func (ptr *QMediaTimeRange) AddInterval2(start int64, end int64) {
	defer qt.Recovering("QMediaTimeRange::addInterval")

	if ptr.Pointer() != nil {
		C.QMediaTimeRange_AddInterval2(ptr.Pointer(), C.longlong(start), C.longlong(end))
	}
}

func (ptr *QMediaTimeRange) AddTimeRange(ran QMediaTimeRange_ITF) {
	defer qt.Recovering("QMediaTimeRange::addTimeRange")

	if ptr.Pointer() != nil {
		C.QMediaTimeRange_AddTimeRange(ptr.Pointer(), PointerFromQMediaTimeRange(ran))
	}
}

func (ptr *QMediaTimeRange) Clear() {
	defer qt.Recovering("QMediaTimeRange::clear")

	if ptr.Pointer() != nil {
		C.QMediaTimeRange_Clear(ptr.Pointer())
	}
}

func (ptr *QMediaTimeRange) Contains(time int64) bool {
	defer qt.Recovering("QMediaTimeRange::contains")

	if ptr.Pointer() != nil {
		return C.QMediaTimeRange_Contains(ptr.Pointer(), C.longlong(time)) != 0
	}
	return false
}

func (ptr *QMediaTimeRange) EarliestTime() int64 {
	defer qt.Recovering("QMediaTimeRange::earliestTime")

	if ptr.Pointer() != nil {
		return int64(C.QMediaTimeRange_EarliestTime(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaTimeRange) IsContinuous() bool {
	defer qt.Recovering("QMediaTimeRange::isContinuous")

	if ptr.Pointer() != nil {
		return C.QMediaTimeRange_IsContinuous(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaTimeRange) IsEmpty() bool {
	defer qt.Recovering("QMediaTimeRange::isEmpty")

	if ptr.Pointer() != nil {
		return C.QMediaTimeRange_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMediaTimeRange) LatestTime() int64 {
	defer qt.Recovering("QMediaTimeRange::latestTime")

	if ptr.Pointer() != nil {
		return int64(C.QMediaTimeRange_LatestTime(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMediaTimeRange) RemoveInterval(interval QMediaTimeInterval_ITF) {
	defer qt.Recovering("QMediaTimeRange::removeInterval")

	if ptr.Pointer() != nil {
		C.QMediaTimeRange_RemoveInterval(ptr.Pointer(), PointerFromQMediaTimeInterval(interval))
	}
}

func (ptr *QMediaTimeRange) RemoveInterval2(start int64, end int64) {
	defer qt.Recovering("QMediaTimeRange::removeInterval")

	if ptr.Pointer() != nil {
		C.QMediaTimeRange_RemoveInterval2(ptr.Pointer(), C.longlong(start), C.longlong(end))
	}
}

func (ptr *QMediaTimeRange) RemoveTimeRange(ran QMediaTimeRange_ITF) {
	defer qt.Recovering("QMediaTimeRange::removeTimeRange")

	if ptr.Pointer() != nil {
		C.QMediaTimeRange_RemoveTimeRange(ptr.Pointer(), PointerFromQMediaTimeRange(ran))
	}
}

func (ptr *QMediaTimeRange) DestroyQMediaTimeRange() {
	defer qt.Recovering("QMediaTimeRange::~QMediaTimeRange")

	if ptr.Pointer() != nil {
		C.QMediaTimeRange_DestroyQMediaTimeRange(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QMediaVideoProbeControl struct {
	QMediaControl
}

type QMediaVideoProbeControl_ITF interface {
	QMediaControl_ITF
	QMediaVideoProbeControl_PTR() *QMediaVideoProbeControl
}

func (p *QMediaVideoProbeControl) QMediaVideoProbeControl_PTR() *QMediaVideoProbeControl {
	return p
}

func (p *QMediaVideoProbeControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMediaVideoProbeControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMediaVideoProbeControl(ptr QMediaVideoProbeControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMediaVideoProbeControl_PTR().Pointer()
	}
	return nil
}

func NewQMediaVideoProbeControlFromPointer(ptr unsafe.Pointer) *QMediaVideoProbeControl {
	var n = new(QMediaVideoProbeControl)
	n.SetPointer(ptr)
	return n
}
func NewQMediaVideoProbeControl(parent core.QObject_ITF) *QMediaVideoProbeControl {
	defer qt.Recovering("QMediaVideoProbeControl::QMediaVideoProbeControl")

	var tmpValue = NewQMediaVideoProbeControlFromPointer(C.QMediaVideoProbeControl_NewQMediaVideoProbeControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMediaVideoProbeControl_Flush
func callbackQMediaVideoProbeControl_Flush(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaVideoProbeControl::flush")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::flush"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMediaVideoProbeControl) ConnectFlush(f func()) {
	defer qt.Recovering("connect QMediaVideoProbeControl::flush")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_ConnectFlush(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::flush", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectFlush() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::flush")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_DisconnectFlush(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::flush")
	}
}

func (ptr *QMediaVideoProbeControl) Flush() {
	defer qt.Recovering("QMediaVideoProbeControl::flush")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_Flush(ptr.Pointer())
	}
}

//export callbackQMediaVideoProbeControl_VideoFrameProbed
func callbackQMediaVideoProbeControl_VideoFrameProbed(ptr unsafe.Pointer, frame unsafe.Pointer) {
	defer qt.Recovering("callback QMediaVideoProbeControl::videoFrameProbed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::videoFrameProbed"); signal != nil {
		signal.(func(*QVideoFrame))(NewQVideoFrameFromPointer(frame))
	}

}

func (ptr *QMediaVideoProbeControl) ConnectVideoFrameProbed(f func(frame *QVideoFrame)) {
	defer qt.Recovering("connect QMediaVideoProbeControl::videoFrameProbed")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_ConnectVideoFrameProbed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::videoFrameProbed", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectVideoFrameProbed() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::videoFrameProbed")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_DisconnectVideoFrameProbed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::videoFrameProbed")
	}
}

func (ptr *QMediaVideoProbeControl) VideoFrameProbed(frame QVideoFrame_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::videoFrameProbed")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_VideoFrameProbed(ptr.Pointer(), PointerFromQVideoFrame(frame))
	}
}

func (ptr *QMediaVideoProbeControl) DestroyQMediaVideoProbeControl() {
	defer qt.Recovering("QMediaVideoProbeControl::~QMediaVideoProbeControl")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_DestroyQMediaVideoProbeControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaVideoProbeControl_TimerEvent
func callbackQMediaVideoProbeControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaVideoProbeControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMediaVideoProbeControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMediaVideoProbeControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMediaVideoProbeControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::timerEvent", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::timerEvent")
	}
}

func (ptr *QMediaVideoProbeControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMediaVideoProbeControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMediaVideoProbeControl_ChildEvent
func callbackQMediaVideoProbeControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaVideoProbeControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMediaVideoProbeControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMediaVideoProbeControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMediaVideoProbeControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::childEvent", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::childEvent")
	}
}

func (ptr *QMediaVideoProbeControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMediaVideoProbeControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMediaVideoProbeControl_ConnectNotify
func callbackQMediaVideoProbeControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaVideoProbeControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaVideoProbeControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaVideoProbeControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaVideoProbeControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::connectNotify", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::connectNotify")
	}
}

func (ptr *QMediaVideoProbeControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaVideoProbeControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaVideoProbeControl_CustomEvent
func callbackQMediaVideoProbeControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMediaVideoProbeControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMediaVideoProbeControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMediaVideoProbeControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMediaVideoProbeControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::customEvent", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::customEvent")
	}
}

func (ptr *QMediaVideoProbeControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMediaVideoProbeControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMediaVideoProbeControl_DeleteLater
func callbackQMediaVideoProbeControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMediaVideoProbeControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMediaVideoProbeControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMediaVideoProbeControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMediaVideoProbeControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::deleteLater", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::deleteLater")
	}
}

func (ptr *QMediaVideoProbeControl) DeleteLater() {
	defer qt.Recovering("QMediaVideoProbeControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMediaVideoProbeControl) DeleteLaterDefault() {
	defer qt.Recovering("QMediaVideoProbeControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMediaVideoProbeControl_DisconnectNotify
func callbackQMediaVideoProbeControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMediaVideoProbeControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMediaVideoProbeControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMediaVideoProbeControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMediaVideoProbeControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::disconnectNotify", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::disconnectNotify")
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMediaVideoProbeControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMediaVideoProbeControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMediaVideoProbeControl_Event
func callbackQMediaVideoProbeControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaVideoProbeControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaVideoProbeControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMediaVideoProbeControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaVideoProbeControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::event", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::event")
	}
}

func (ptr *QMediaVideoProbeControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaVideoProbeControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaVideoProbeControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMediaVideoProbeControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaVideoProbeControl::event")

	if ptr.Pointer() != nil {
		return C.QMediaVideoProbeControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMediaVideoProbeControl_EventFilter
func callbackQMediaVideoProbeControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMediaVideoProbeControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMediaVideoProbeControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMediaVideoProbeControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMediaVideoProbeControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::eventFilter", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::eventFilter")
	}
}

func (ptr *QMediaVideoProbeControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaVideoProbeControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaVideoProbeControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMediaVideoProbeControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMediaVideoProbeControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMediaVideoProbeControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMediaVideoProbeControl_MetaObject
func callbackQMediaVideoProbeControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMediaVideoProbeControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMediaVideoProbeControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMediaVideoProbeControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMediaVideoProbeControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMediaVideoProbeControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::metaObject", f)
	}
}

func (ptr *QMediaVideoProbeControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMediaVideoProbeControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMediaVideoProbeControl::metaObject")
	}
}

func (ptr *QMediaVideoProbeControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMediaVideoProbeControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaVideoProbeControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMediaVideoProbeControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMediaVideoProbeControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMediaVideoProbeControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMetaDataReaderControl struct {
	QMediaControl
}

type QMetaDataReaderControl_ITF interface {
	QMediaControl_ITF
	QMetaDataReaderControl_PTR() *QMetaDataReaderControl
}

func (p *QMetaDataReaderControl) QMetaDataReaderControl_PTR() *QMetaDataReaderControl {
	return p
}

func (p *QMetaDataReaderControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMetaDataReaderControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMetaDataReaderControl(ptr QMetaDataReaderControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMetaDataReaderControl_PTR().Pointer()
	}
	return nil
}

func NewQMetaDataReaderControlFromPointer(ptr unsafe.Pointer) *QMetaDataReaderControl {
	var n = new(QMetaDataReaderControl)
	n.SetPointer(ptr)
	return n
}
func NewQMetaDataReaderControl(parent core.QObject_ITF) *QMetaDataReaderControl {
	defer qt.Recovering("QMetaDataReaderControl::QMetaDataReaderControl")

	var tmpValue = NewQMetaDataReaderControlFromPointer(C.QMetaDataReaderControl_NewQMetaDataReaderControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMetaDataReaderControl_AvailableMetaData
func callbackQMetaDataReaderControl_AvailableMetaData(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QMetaDataReaderControl::availableMetaData")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::availableMetaData"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QMetaDataReaderControl) ConnectAvailableMetaData(f func() []string) {
	defer qt.Recovering("connect QMetaDataReaderControl::availableMetaData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::availableMetaData", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectAvailableMetaData() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::availableMetaData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::availableMetaData")
	}
}

func (ptr *QMetaDataReaderControl) AvailableMetaData() []string {
	defer qt.Recovering("QMetaDataReaderControl::availableMetaData")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QMetaDataReaderControl_AvailableMetaData(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQMetaDataReaderControl_IsMetaDataAvailable
func callbackQMetaDataReaderControl_IsMetaDataAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMetaDataReaderControl::isMetaDataAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::isMetaDataAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMetaDataReaderControl) ConnectIsMetaDataAvailable(f func() bool) {
	defer qt.Recovering("connect QMetaDataReaderControl::isMetaDataAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::isMetaDataAvailable", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectIsMetaDataAvailable() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::isMetaDataAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::isMetaDataAvailable")
	}
}

func (ptr *QMetaDataReaderControl) IsMetaDataAvailable() bool {
	defer qt.Recovering("QMetaDataReaderControl::isMetaDataAvailable")

	if ptr.Pointer() != nil {
		return C.QMetaDataReaderControl_IsMetaDataAvailable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMetaDataReaderControl_MetaData
func callbackQMetaDataReaderControl_MetaData(ptr unsafe.Pointer, key *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QMetaDataReaderControl::metaData")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::metaData"); signal != nil {
		return core.PointerFromQVariant(signal.(func(string) *core.QVariant)(C.GoString(key)))
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QMetaDataReaderControl) ConnectMetaData(f func(key string) *core.QVariant) {
	defer qt.Recovering("connect QMetaDataReaderControl::metaData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaData", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectMetaData(key string) {
	defer qt.Recovering("disconnect QMetaDataReaderControl::metaData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaData")
	}
}

func (ptr *QMetaDataReaderControl) MetaData(key string) *core.QVariant {
	defer qt.Recovering("QMetaDataReaderControl::metaData")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = core.NewQVariantFromPointer(C.QMetaDataReaderControl_MetaData(ptr.Pointer(), keyC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQMetaDataReaderControl_MetaDataAvailableChanged
func callbackQMetaDataReaderControl_MetaDataAvailableChanged(ptr unsafe.Pointer, available C.char) {
	defer qt.Recovering("callback QMetaDataReaderControl::metaDataAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::metaDataAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QMetaDataReaderControl) ConnectMetaDataAvailableChanged(f func(available bool)) {
	defer qt.Recovering("connect QMetaDataReaderControl::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_ConnectMetaDataAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaDataAvailableChanged", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectMetaDataAvailableChanged() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_DisconnectMetaDataAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaDataAvailableChanged")
	}
}

func (ptr *QMetaDataReaderControl) MetaDataAvailableChanged(available bool) {
	defer qt.Recovering("QMetaDataReaderControl::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_MetaDataAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

//export callbackQMetaDataReaderControl_MetaDataChanged
func callbackQMetaDataReaderControl_MetaDataChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataReaderControl::metaDataChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::metaDataChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMetaDataReaderControl) ConnectMetaDataChanged(f func()) {
	defer qt.Recovering("connect QMetaDataReaderControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_ConnectMetaDataChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaDataChanged", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectMetaDataChanged() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_DisconnectMetaDataChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaDataChanged")
	}
}

func (ptr *QMetaDataReaderControl) MetaDataChanged() {
	defer qt.Recovering("QMetaDataReaderControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_MetaDataChanged(ptr.Pointer())
	}
}

//export callbackQMetaDataReaderControl_MetaDataChanged2
func callbackQMetaDataReaderControl_MetaDataChanged2(ptr unsafe.Pointer, key *C.char, value unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataReaderControl::metaDataChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::metaDataChanged2"); signal != nil {
		signal.(func(string, *core.QVariant))(C.GoString(key), core.NewQVariantFromPointer(value))
	}

}

func (ptr *QMetaDataReaderControl) ConnectMetaDataChanged2(f func(key string, value *core.QVariant)) {
	defer qt.Recovering("connect QMetaDataReaderControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_ConnectMetaDataChanged2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaDataChanged2", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectMetaDataChanged2() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_DisconnectMetaDataChanged2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaDataChanged2")
	}
}

func (ptr *QMetaDataReaderControl) MetaDataChanged2(key string, value core.QVariant_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::metaDataChanged")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QMetaDataReaderControl_MetaDataChanged2(ptr.Pointer(), keyC, core.PointerFromQVariant(value))
	}
}

func (ptr *QMetaDataReaderControl) DestroyQMetaDataReaderControl() {
	defer qt.Recovering("QMetaDataReaderControl::~QMetaDataReaderControl")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_DestroyQMetaDataReaderControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMetaDataReaderControl_TimerEvent
func callbackQMetaDataReaderControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataReaderControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMetaDataReaderControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMetaDataReaderControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMetaDataReaderControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::timerEvent", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::timerEvent")
	}
}

func (ptr *QMetaDataReaderControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMetaDataReaderControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMetaDataReaderControl_ChildEvent
func callbackQMetaDataReaderControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataReaderControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMetaDataReaderControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMetaDataReaderControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMetaDataReaderControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::childEvent", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::childEvent")
	}
}

func (ptr *QMetaDataReaderControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMetaDataReaderControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMetaDataReaderControl_ConnectNotify
func callbackQMetaDataReaderControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataReaderControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMetaDataReaderControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMetaDataReaderControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMetaDataReaderControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::connectNotify", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::connectNotify")
	}
}

func (ptr *QMetaDataReaderControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMetaDataReaderControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMetaDataReaderControl_CustomEvent
func callbackQMetaDataReaderControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataReaderControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMetaDataReaderControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMetaDataReaderControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMetaDataReaderControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::customEvent", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::customEvent")
	}
}

func (ptr *QMetaDataReaderControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMetaDataReaderControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMetaDataReaderControl_DeleteLater
func callbackQMetaDataReaderControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataReaderControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMetaDataReaderControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMetaDataReaderControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMetaDataReaderControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::deleteLater", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::deleteLater")
	}
}

func (ptr *QMetaDataReaderControl) DeleteLater() {
	defer qt.Recovering("QMetaDataReaderControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMetaDataReaderControl) DeleteLaterDefault() {
	defer qt.Recovering("QMetaDataReaderControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMetaDataReaderControl_DisconnectNotify
func callbackQMetaDataReaderControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataReaderControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMetaDataReaderControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMetaDataReaderControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMetaDataReaderControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::disconnectNotify", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::disconnectNotify")
	}
}

func (ptr *QMetaDataReaderControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMetaDataReaderControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMetaDataReaderControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMetaDataReaderControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMetaDataReaderControl_Event
func callbackQMetaDataReaderControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMetaDataReaderControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMetaDataReaderControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMetaDataReaderControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMetaDataReaderControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::event", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::event")
	}
}

func (ptr *QMetaDataReaderControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMetaDataReaderControl::event")

	if ptr.Pointer() != nil {
		return C.QMetaDataReaderControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMetaDataReaderControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMetaDataReaderControl::event")

	if ptr.Pointer() != nil {
		return C.QMetaDataReaderControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMetaDataReaderControl_EventFilter
func callbackQMetaDataReaderControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMetaDataReaderControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMetaDataReaderControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMetaDataReaderControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMetaDataReaderControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::eventFilter", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::eventFilter")
	}
}

func (ptr *QMetaDataReaderControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMetaDataReaderControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMetaDataReaderControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMetaDataReaderControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMetaDataReaderControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMetaDataReaderControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMetaDataReaderControl_MetaObject
func callbackQMetaDataReaderControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMetaDataReaderControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataReaderControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMetaDataReaderControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMetaDataReaderControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMetaDataReaderControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaObject", f)
	}
}

func (ptr *QMetaDataReaderControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMetaDataReaderControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataReaderControl::metaObject")
	}
}

func (ptr *QMetaDataReaderControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMetaDataReaderControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMetaDataReaderControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMetaDataReaderControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMetaDataReaderControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMetaDataReaderControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QMetaDataWriterControl struct {
	QMediaControl
}

type QMetaDataWriterControl_ITF interface {
	QMediaControl_ITF
	QMetaDataWriterControl_PTR() *QMetaDataWriterControl
}

func (p *QMetaDataWriterControl) QMetaDataWriterControl_PTR() *QMetaDataWriterControl {
	return p
}

func (p *QMetaDataWriterControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QMetaDataWriterControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQMetaDataWriterControl(ptr QMetaDataWriterControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMetaDataWriterControl_PTR().Pointer()
	}
	return nil
}

func NewQMetaDataWriterControlFromPointer(ptr unsafe.Pointer) *QMetaDataWriterControl {
	var n = new(QMetaDataWriterControl)
	n.SetPointer(ptr)
	return n
}
func NewQMetaDataWriterControl(parent core.QObject_ITF) *QMetaDataWriterControl {
	defer qt.Recovering("QMetaDataWriterControl::QMetaDataWriterControl")

	var tmpValue = NewQMetaDataWriterControlFromPointer(C.QMetaDataWriterControl_NewQMetaDataWriterControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMetaDataWriterControl_AvailableMetaData
func callbackQMetaDataWriterControl_AvailableMetaData(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QMetaDataWriterControl::availableMetaData")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::availableMetaData"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QMetaDataWriterControl) ConnectAvailableMetaData(f func() []string) {
	defer qt.Recovering("connect QMetaDataWriterControl::availableMetaData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::availableMetaData", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectAvailableMetaData() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::availableMetaData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::availableMetaData")
	}
}

func (ptr *QMetaDataWriterControl) AvailableMetaData() []string {
	defer qt.Recovering("QMetaDataWriterControl::availableMetaData")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QMetaDataWriterControl_AvailableMetaData(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQMetaDataWriterControl_IsMetaDataAvailable
func callbackQMetaDataWriterControl_IsMetaDataAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMetaDataWriterControl::isMetaDataAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::isMetaDataAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMetaDataWriterControl) ConnectIsMetaDataAvailable(f func() bool) {
	defer qt.Recovering("connect QMetaDataWriterControl::isMetaDataAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::isMetaDataAvailable", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectIsMetaDataAvailable() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::isMetaDataAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::isMetaDataAvailable")
	}
}

func (ptr *QMetaDataWriterControl) IsMetaDataAvailable() bool {
	defer qt.Recovering("QMetaDataWriterControl::isMetaDataAvailable")

	if ptr.Pointer() != nil {
		return C.QMetaDataWriterControl_IsMetaDataAvailable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMetaDataWriterControl_IsWritable
func callbackQMetaDataWriterControl_IsWritable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMetaDataWriterControl::isWritable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::isWritable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMetaDataWriterControl) ConnectIsWritable(f func() bool) {
	defer qt.Recovering("connect QMetaDataWriterControl::isWritable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::isWritable", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectIsWritable() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::isWritable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::isWritable")
	}
}

func (ptr *QMetaDataWriterControl) IsWritable() bool {
	defer qt.Recovering("QMetaDataWriterControl::isWritable")

	if ptr.Pointer() != nil {
		return C.QMetaDataWriterControl_IsWritable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMetaDataWriterControl_MetaData
func callbackQMetaDataWriterControl_MetaData(ptr unsafe.Pointer, key *C.char) unsafe.Pointer {
	defer qt.Recovering("callback QMetaDataWriterControl::metaData")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::metaData"); signal != nil {
		return core.PointerFromQVariant(signal.(func(string) *core.QVariant)(C.GoString(key)))
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QMetaDataWriterControl) ConnectMetaData(f func(key string) *core.QVariant) {
	defer qt.Recovering("connect QMetaDataWriterControl::metaData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaData", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectMetaData(key string) {
	defer qt.Recovering("disconnect QMetaDataWriterControl::metaData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaData")
	}
}

func (ptr *QMetaDataWriterControl) MetaData(key string) *core.QVariant {
	defer qt.Recovering("QMetaDataWriterControl::metaData")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = core.NewQVariantFromPointer(C.QMetaDataWriterControl_MetaData(ptr.Pointer(), keyC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQMetaDataWriterControl_MetaDataAvailableChanged
func callbackQMetaDataWriterControl_MetaDataAvailableChanged(ptr unsafe.Pointer, available C.char) {
	defer qt.Recovering("callback QMetaDataWriterControl::metaDataAvailableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::metaDataAvailableChanged"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QMetaDataWriterControl) ConnectMetaDataAvailableChanged(f func(available bool)) {
	defer qt.Recovering("connect QMetaDataWriterControl::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_ConnectMetaDataAvailableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaDataAvailableChanged", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectMetaDataAvailableChanged() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_DisconnectMetaDataAvailableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaDataAvailableChanged")
	}
}

func (ptr *QMetaDataWriterControl) MetaDataAvailableChanged(available bool) {
	defer qt.Recovering("QMetaDataWriterControl::metaDataAvailableChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_MetaDataAvailableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

//export callbackQMetaDataWriterControl_MetaDataChanged
func callbackQMetaDataWriterControl_MetaDataChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataWriterControl::metaDataChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::metaDataChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMetaDataWriterControl) ConnectMetaDataChanged(f func()) {
	defer qt.Recovering("connect QMetaDataWriterControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_ConnectMetaDataChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaDataChanged", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectMetaDataChanged() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_DisconnectMetaDataChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaDataChanged")
	}
}

func (ptr *QMetaDataWriterControl) MetaDataChanged() {
	defer qt.Recovering("QMetaDataWriterControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_MetaDataChanged(ptr.Pointer())
	}
}

//export callbackQMetaDataWriterControl_MetaDataChanged2
func callbackQMetaDataWriterControl_MetaDataChanged2(ptr unsafe.Pointer, key *C.char, value unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataWriterControl::metaDataChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::metaDataChanged2"); signal != nil {
		signal.(func(string, *core.QVariant))(C.GoString(key), core.NewQVariantFromPointer(value))
	}

}

func (ptr *QMetaDataWriterControl) ConnectMetaDataChanged2(f func(key string, value *core.QVariant)) {
	defer qt.Recovering("connect QMetaDataWriterControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_ConnectMetaDataChanged2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaDataChanged2", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectMetaDataChanged2() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::metaDataChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_DisconnectMetaDataChanged2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaDataChanged2")
	}
}

func (ptr *QMetaDataWriterControl) MetaDataChanged2(key string, value core.QVariant_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::metaDataChanged")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QMetaDataWriterControl_MetaDataChanged2(ptr.Pointer(), keyC, core.PointerFromQVariant(value))
	}
}

//export callbackQMetaDataWriterControl_SetMetaData
func callbackQMetaDataWriterControl_SetMetaData(ptr unsafe.Pointer, key *C.char, value unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataWriterControl::setMetaData")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::setMetaData"); signal != nil {
		signal.(func(string, *core.QVariant))(C.GoString(key), core.NewQVariantFromPointer(value))
	}

}

func (ptr *QMetaDataWriterControl) ConnectSetMetaData(f func(key string, value *core.QVariant)) {
	defer qt.Recovering("connect QMetaDataWriterControl::setMetaData")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::setMetaData", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectSetMetaData(key string, value core.QVariant_ITF) {
	defer qt.Recovering("disconnect QMetaDataWriterControl::setMetaData")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::setMetaData")
	}
}

func (ptr *QMetaDataWriterControl) SetMetaData(key string, value core.QVariant_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::setMetaData")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QMetaDataWriterControl_SetMetaData(ptr.Pointer(), keyC, core.PointerFromQVariant(value))
	}
}

//export callbackQMetaDataWriterControl_WritableChanged
func callbackQMetaDataWriterControl_WritableChanged(ptr unsafe.Pointer, writable C.char) {
	defer qt.Recovering("callback QMetaDataWriterControl::writableChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::writableChanged"); signal != nil {
		signal.(func(bool))(int8(writable) != 0)
	}

}

func (ptr *QMetaDataWriterControl) ConnectWritableChanged(f func(writable bool)) {
	defer qt.Recovering("connect QMetaDataWriterControl::writableChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_ConnectWritableChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::writableChanged", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectWritableChanged() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::writableChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_DisconnectWritableChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::writableChanged")
	}
}

func (ptr *QMetaDataWriterControl) WritableChanged(writable bool) {
	defer qt.Recovering("QMetaDataWriterControl::writableChanged")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_WritableChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(writable))))
	}
}

func (ptr *QMetaDataWriterControl) DestroyQMetaDataWriterControl() {
	defer qt.Recovering("QMetaDataWriterControl::~QMetaDataWriterControl")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_DestroyQMetaDataWriterControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMetaDataWriterControl_TimerEvent
func callbackQMetaDataWriterControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataWriterControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMetaDataWriterControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMetaDataWriterControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QMetaDataWriterControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::timerEvent", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::timerEvent")
	}
}

func (ptr *QMetaDataWriterControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMetaDataWriterControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMetaDataWriterControl_ChildEvent
func callbackQMetaDataWriterControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataWriterControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMetaDataWriterControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMetaDataWriterControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QMetaDataWriterControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::childEvent", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::childEvent")
	}
}

func (ptr *QMetaDataWriterControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMetaDataWriterControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::childEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMetaDataWriterControl_ConnectNotify
func callbackQMetaDataWriterControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataWriterControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMetaDataWriterControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMetaDataWriterControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMetaDataWriterControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::connectNotify", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::connectNotify")
	}
}

func (ptr *QMetaDataWriterControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMetaDataWriterControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMetaDataWriterControl_CustomEvent
func callbackQMetaDataWriterControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataWriterControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMetaDataWriterControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMetaDataWriterControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QMetaDataWriterControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::customEvent", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::customEvent")
	}
}

func (ptr *QMetaDataWriterControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMetaDataWriterControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::customEvent")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMetaDataWriterControl_DeleteLater
func callbackQMetaDataWriterControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataWriterControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMetaDataWriterControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMetaDataWriterControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QMetaDataWriterControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::deleteLater", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::deleteLater")
	}
}

func (ptr *QMetaDataWriterControl) DeleteLater() {
	defer qt.Recovering("QMetaDataWriterControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMetaDataWriterControl) DeleteLaterDefault() {
	defer qt.Recovering("QMetaDataWriterControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMetaDataWriterControl_DisconnectNotify
func callbackQMetaDataWriterControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QMetaDataWriterControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMetaDataWriterControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMetaDataWriterControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QMetaDataWriterControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::disconnectNotify", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::disconnectNotify")
	}
}

func (ptr *QMetaDataWriterControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMetaDataWriterControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QMetaDataWriterControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QMetaDataWriterControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMetaDataWriterControl_Event
func callbackQMetaDataWriterControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMetaDataWriterControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMetaDataWriterControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMetaDataWriterControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QMetaDataWriterControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::event", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::event")
	}
}

func (ptr *QMetaDataWriterControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMetaDataWriterControl::event")

	if ptr.Pointer() != nil {
		return C.QMetaDataWriterControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMetaDataWriterControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QMetaDataWriterControl::event")

	if ptr.Pointer() != nil {
		return C.QMetaDataWriterControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMetaDataWriterControl_EventFilter
func callbackQMetaDataWriterControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QMetaDataWriterControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMetaDataWriterControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMetaDataWriterControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QMetaDataWriterControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::eventFilter", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::eventFilter")
	}
}

func (ptr *QMetaDataWriterControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMetaDataWriterControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMetaDataWriterControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMetaDataWriterControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QMetaDataWriterControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QMetaDataWriterControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMetaDataWriterControl_MetaObject
func callbackQMetaDataWriterControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QMetaDataWriterControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMetaDataWriterControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMetaDataWriterControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMetaDataWriterControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QMetaDataWriterControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaObject", f)
	}
}

func (ptr *QMetaDataWriterControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QMetaDataWriterControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMetaDataWriterControl::metaObject")
	}
}

func (ptr *QMetaDataWriterControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QMetaDataWriterControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMetaDataWriterControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMetaDataWriterControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QMetaDataWriterControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMetaDataWriterControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QMultimedia::AvailabilityStatus
type QMultimedia__AvailabilityStatus int64

const (
	QMultimedia__Available      = QMultimedia__AvailabilityStatus(0)
	QMultimedia__ServiceMissing = QMultimedia__AvailabilityStatus(1)
	QMultimedia__Busy           = QMultimedia__AvailabilityStatus(2)
	QMultimedia__ResourceError  = QMultimedia__AvailabilityStatus(3)
)

//QMultimedia::EncodingMode
type QMultimedia__EncodingMode int64

const (
	QMultimedia__ConstantQualityEncoding = QMultimedia__EncodingMode(0)
	QMultimedia__ConstantBitRateEncoding = QMultimedia__EncodingMode(1)
	QMultimedia__AverageBitRateEncoding  = QMultimedia__EncodingMode(2)
	QMultimedia__TwoPassEncoding         = QMultimedia__EncodingMode(3)
)

//QMultimedia::EncodingQuality
type QMultimedia__EncodingQuality int64

const (
	QMultimedia__VeryLowQuality  = QMultimedia__EncodingQuality(0)
	QMultimedia__LowQuality      = QMultimedia__EncodingQuality(1)
	QMultimedia__NormalQuality   = QMultimedia__EncodingQuality(2)
	QMultimedia__HighQuality     = QMultimedia__EncodingQuality(3)
	QMultimedia__VeryHighQuality = QMultimedia__EncodingQuality(4)
)

//QMultimedia::SupportEstimate
type QMultimedia__SupportEstimate int64

const (
	QMultimedia__NotSupported      = QMultimedia__SupportEstimate(0)
	QMultimedia__MaybeSupported    = QMultimedia__SupportEstimate(1)
	QMultimedia__ProbablySupported = QMultimedia__SupportEstimate(2)
	QMultimedia__PreferredService  = QMultimedia__SupportEstimate(3)
)

type QMultimedia struct {
	ptr unsafe.Pointer
}

type QMultimedia_ITF interface {
	QMultimedia_PTR() *QMultimedia
}

func (p *QMultimedia) QMultimedia_PTR() *QMultimedia {
	return p
}

func (p *QMultimedia) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMultimedia) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMultimedia(ptr QMultimedia_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMultimedia_PTR().Pointer()
	}
	return nil
}

func NewQMultimediaFromPointer(ptr unsafe.Pointer) *QMultimedia {
	var n = new(QMultimedia)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMultimedia) DestroyQMultimedia() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QRadioData::Error
type QRadioData__Error int64

const (
	QRadioData__NoError         = QRadioData__Error(0)
	QRadioData__ResourceError   = QRadioData__Error(1)
	QRadioData__OpenError       = QRadioData__Error(2)
	QRadioData__OutOfRangeError = QRadioData__Error(3)
)

//QRadioData::ProgramType
type QRadioData__ProgramType int64

const (
	QRadioData__Undefined           = QRadioData__ProgramType(0)
	QRadioData__News                = QRadioData__ProgramType(1)
	QRadioData__CurrentAffairs      = QRadioData__ProgramType(2)
	QRadioData__Information         = QRadioData__ProgramType(3)
	QRadioData__Sport               = QRadioData__ProgramType(4)
	QRadioData__Education           = QRadioData__ProgramType(5)
	QRadioData__Drama               = QRadioData__ProgramType(6)
	QRadioData__Culture             = QRadioData__ProgramType(7)
	QRadioData__Science             = QRadioData__ProgramType(8)
	QRadioData__Varied              = QRadioData__ProgramType(9)
	QRadioData__PopMusic            = QRadioData__ProgramType(10)
	QRadioData__RockMusic           = QRadioData__ProgramType(11)
	QRadioData__EasyListening       = QRadioData__ProgramType(12)
	QRadioData__LightClassical      = QRadioData__ProgramType(13)
	QRadioData__SeriousClassical    = QRadioData__ProgramType(14)
	QRadioData__OtherMusic          = QRadioData__ProgramType(15)
	QRadioData__Weather             = QRadioData__ProgramType(16)
	QRadioData__Finance             = QRadioData__ProgramType(17)
	QRadioData__ChildrensProgrammes = QRadioData__ProgramType(18)
	QRadioData__SocialAffairs       = QRadioData__ProgramType(19)
	QRadioData__Religion            = QRadioData__ProgramType(20)
	QRadioData__PhoneIn             = QRadioData__ProgramType(21)
	QRadioData__Travel              = QRadioData__ProgramType(22)
	QRadioData__Leisure             = QRadioData__ProgramType(23)
	QRadioData__JazzMusic           = QRadioData__ProgramType(24)
	QRadioData__CountryMusic        = QRadioData__ProgramType(25)
	QRadioData__NationalMusic       = QRadioData__ProgramType(26)
	QRadioData__OldiesMusic         = QRadioData__ProgramType(27)
	QRadioData__FolkMusic           = QRadioData__ProgramType(28)
	QRadioData__Documentary         = QRadioData__ProgramType(29)
	QRadioData__AlarmTest           = QRadioData__ProgramType(30)
	QRadioData__Alarm               = QRadioData__ProgramType(31)
	QRadioData__Talk                = QRadioData__ProgramType(32)
	QRadioData__ClassicRock         = QRadioData__ProgramType(33)
	QRadioData__AdultHits           = QRadioData__ProgramType(34)
	QRadioData__SoftRock            = QRadioData__ProgramType(35)
	QRadioData__Top40               = QRadioData__ProgramType(36)
	QRadioData__Soft                = QRadioData__ProgramType(37)
	QRadioData__Nostalgia           = QRadioData__ProgramType(38)
	QRadioData__Classical           = QRadioData__ProgramType(39)
	QRadioData__RhythmAndBlues      = QRadioData__ProgramType(40)
	QRadioData__SoftRhythmAndBlues  = QRadioData__ProgramType(41)
	QRadioData__Language            = QRadioData__ProgramType(42)
	QRadioData__ReligiousMusic      = QRadioData__ProgramType(43)
	QRadioData__ReligiousTalk       = QRadioData__ProgramType(44)
	QRadioData__Personality         = QRadioData__ProgramType(45)
	QRadioData__Public              = QRadioData__ProgramType(46)
	QRadioData__College             = QRadioData__ProgramType(47)
)

type QRadioData struct {
	core.QObject
	QMediaBindableInterface
}

type QRadioData_ITF interface {
	core.QObject_ITF
	QMediaBindableInterface_ITF
	QRadioData_PTR() *QRadioData
}

func (p *QRadioData) QRadioData_PTR() *QRadioData {
	return p
}

func (p *QRadioData) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QRadioData) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QMediaBindableInterface_PTR().SetPointer(ptr)
	}
}

func PointerFromQRadioData(ptr QRadioData_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRadioData_PTR().Pointer()
	}
	return nil
}

func NewQRadioDataFromPointer(ptr unsafe.Pointer) *QRadioData {
	var n = new(QRadioData)
	n.SetPointer(ptr)
	return n
}
func (ptr *QRadioData) IsAlternativeFrequenciesEnabled() bool {
	defer qt.Recovering("QRadioData::isAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {
		return C.QRadioData_IsAlternativeFrequenciesEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRadioData) ProgramType() QRadioData__ProgramType {
	defer qt.Recovering("QRadioData::programType")

	if ptr.Pointer() != nil {
		return QRadioData__ProgramType(C.QRadioData_ProgramType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadioData) ProgramTypeName() string {
	defer qt.Recovering("QRadioData::programTypeName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioData_ProgramTypeName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRadioData) RadioText() string {
	defer qt.Recovering("QRadioData::radioText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioData_RadioText(ptr.Pointer()))
	}
	return ""
}

//export callbackQRadioData_SetAlternativeFrequenciesEnabled
func callbackQRadioData_SetAlternativeFrequenciesEnabled(ptr unsafe.Pointer, enabled C.char) {
	defer qt.Recovering("callback QRadioData::setAlternativeFrequenciesEnabled")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::setAlternativeFrequenciesEnabled"); signal != nil {
		signal.(func(bool))(int8(enabled) != 0)
	}

}

func (ptr *QRadioData) ConnectSetAlternativeFrequenciesEnabled(f func(enabled bool)) {
	defer qt.Recovering("connect QRadioData::setAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::setAlternativeFrequenciesEnabled", f)
	}
}

func (ptr *QRadioData) DisconnectSetAlternativeFrequenciesEnabled(enabled bool) {
	defer qt.Recovering("disconnect QRadioData::setAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::setAlternativeFrequenciesEnabled")
	}
}

func (ptr *QRadioData) SetAlternativeFrequenciesEnabled(enabled bool) {
	defer qt.Recovering("QRadioData::setAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {
		C.QRadioData_SetAlternativeFrequenciesEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QRadioData) StationId() string {
	defer qt.Recovering("QRadioData::stationId")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioData_StationId(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRadioData) StationName() string {
	defer qt.Recovering("QRadioData::stationName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioData_StationName(ptr.Pointer()))
	}
	return ""
}

func NewQRadioData(mediaObject QMediaObject_ITF, parent core.QObject_ITF) *QRadioData {
	defer qt.Recovering("QRadioData::QRadioData")

	var tmpValue = NewQRadioDataFromPointer(C.QRadioData_NewQRadioData(PointerFromQMediaObject(mediaObject), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQRadioData_AlternativeFrequenciesEnabledChanged
func callbackQRadioData_AlternativeFrequenciesEnabledChanged(ptr unsafe.Pointer, enabled C.char) {
	defer qt.Recovering("callback QRadioData::alternativeFrequenciesEnabledChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::alternativeFrequenciesEnabledChanged"); signal != nil {
		signal.(func(bool))(int8(enabled) != 0)
	}

}

func (ptr *QRadioData) ConnectAlternativeFrequenciesEnabledChanged(f func(enabled bool)) {
	defer qt.Recovering("connect QRadioData::alternativeFrequenciesEnabledChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_ConnectAlternativeFrequenciesEnabledChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::alternativeFrequenciesEnabledChanged", f)
	}
}

func (ptr *QRadioData) DisconnectAlternativeFrequenciesEnabledChanged() {
	defer qt.Recovering("disconnect QRadioData::alternativeFrequenciesEnabledChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_DisconnectAlternativeFrequenciesEnabledChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::alternativeFrequenciesEnabledChanged")
	}
}

func (ptr *QRadioData) AlternativeFrequenciesEnabledChanged(enabled bool) {
	defer qt.Recovering("QRadioData::alternativeFrequenciesEnabledChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_AlternativeFrequenciesEnabledChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QRadioData) Availability() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QRadioData::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QRadioData_Availability(ptr.Pointer()))
	}
	return 0
}

//export callbackQRadioData_Error2
func callbackQRadioData_Error2(ptr unsafe.Pointer, error C.longlong) {
	defer qt.Recovering("callback QRadioData::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::error2"); signal != nil {
		signal.(func(QRadioData__Error))(QRadioData__Error(error))
	}

}

func (ptr *QRadioData) ConnectError2(f func(error QRadioData__Error)) {
	defer qt.Recovering("connect QRadioData::error")

	if ptr.Pointer() != nil {
		C.QRadioData_ConnectError2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::error2", f)
	}
}

func (ptr *QRadioData) DisconnectError2() {
	defer qt.Recovering("disconnect QRadioData::error")

	if ptr.Pointer() != nil {
		C.QRadioData_DisconnectError2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::error2")
	}
}

func (ptr *QRadioData) Error2(error QRadioData__Error) {
	defer qt.Recovering("QRadioData::error")

	if ptr.Pointer() != nil {
		C.QRadioData_Error2(ptr.Pointer(), C.longlong(error))
	}
}

func (ptr *QRadioData) Error() QRadioData__Error {
	defer qt.Recovering("QRadioData::error")

	if ptr.Pointer() != nil {
		return QRadioData__Error(C.QRadioData_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadioData) ErrorString() string {
	defer qt.Recovering("QRadioData::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioData_ErrorString(ptr.Pointer()))
	}
	return ""
}

//export callbackQRadioData_MediaObject
func callbackQRadioData_MediaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QRadioData::mediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::mediaObject"); signal != nil {
		return PointerFromQMediaObject(signal.(func() *QMediaObject)())
	}

	return PointerFromQMediaObject(NewQRadioDataFromPointer(ptr).MediaObjectDefault())
}

func (ptr *QRadioData) ConnectMediaObject(f func() *QMediaObject) {
	defer qt.Recovering("connect QRadioData::mediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::mediaObject", f)
	}
}

func (ptr *QRadioData) DisconnectMediaObject() {
	defer qt.Recovering("disconnect QRadioData::mediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::mediaObject")
	}
}

func (ptr *QRadioData) MediaObject() *QMediaObject {
	defer qt.Recovering("QRadioData::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QRadioData_MediaObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QRadioData) MediaObjectDefault() *QMediaObject {
	defer qt.Recovering("QRadioData::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QRadioData_MediaObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQRadioData_ProgramTypeChanged
func callbackQRadioData_ProgramTypeChanged(ptr unsafe.Pointer, programType C.longlong) {
	defer qt.Recovering("callback QRadioData::programTypeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::programTypeChanged"); signal != nil {
		signal.(func(QRadioData__ProgramType))(QRadioData__ProgramType(programType))
	}

}

func (ptr *QRadioData) ConnectProgramTypeChanged(f func(programType QRadioData__ProgramType)) {
	defer qt.Recovering("connect QRadioData::programTypeChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_ConnectProgramTypeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::programTypeChanged", f)
	}
}

func (ptr *QRadioData) DisconnectProgramTypeChanged() {
	defer qt.Recovering("disconnect QRadioData::programTypeChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_DisconnectProgramTypeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::programTypeChanged")
	}
}

func (ptr *QRadioData) ProgramTypeChanged(programType QRadioData__ProgramType) {
	defer qt.Recovering("QRadioData::programTypeChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_ProgramTypeChanged(ptr.Pointer(), C.longlong(programType))
	}
}

//export callbackQRadioData_ProgramTypeNameChanged
func callbackQRadioData_ProgramTypeNameChanged(ptr unsafe.Pointer, programTypeName *C.char) {
	defer qt.Recovering("callback QRadioData::programTypeNameChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::programTypeNameChanged"); signal != nil {
		signal.(func(string))(C.GoString(programTypeName))
	}

}

func (ptr *QRadioData) ConnectProgramTypeNameChanged(f func(programTypeName string)) {
	defer qt.Recovering("connect QRadioData::programTypeNameChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_ConnectProgramTypeNameChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::programTypeNameChanged", f)
	}
}

func (ptr *QRadioData) DisconnectProgramTypeNameChanged() {
	defer qt.Recovering("disconnect QRadioData::programTypeNameChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_DisconnectProgramTypeNameChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::programTypeNameChanged")
	}
}

func (ptr *QRadioData) ProgramTypeNameChanged(programTypeName string) {
	defer qt.Recovering("QRadioData::programTypeNameChanged")

	if ptr.Pointer() != nil {
		var programTypeNameC = C.CString(programTypeName)
		defer C.free(unsafe.Pointer(programTypeNameC))
		C.QRadioData_ProgramTypeNameChanged(ptr.Pointer(), programTypeNameC)
	}
}

//export callbackQRadioData_RadioTextChanged
func callbackQRadioData_RadioTextChanged(ptr unsafe.Pointer, radioText *C.char) {
	defer qt.Recovering("callback QRadioData::radioTextChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::radioTextChanged"); signal != nil {
		signal.(func(string))(C.GoString(radioText))
	}

}

func (ptr *QRadioData) ConnectRadioTextChanged(f func(radioText string)) {
	defer qt.Recovering("connect QRadioData::radioTextChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_ConnectRadioTextChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::radioTextChanged", f)
	}
}

func (ptr *QRadioData) DisconnectRadioTextChanged() {
	defer qt.Recovering("disconnect QRadioData::radioTextChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_DisconnectRadioTextChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::radioTextChanged")
	}
}

func (ptr *QRadioData) RadioTextChanged(radioText string) {
	defer qt.Recovering("QRadioData::radioTextChanged")

	if ptr.Pointer() != nil {
		var radioTextC = C.CString(radioText)
		defer C.free(unsafe.Pointer(radioTextC))
		C.QRadioData_RadioTextChanged(ptr.Pointer(), radioTextC)
	}
}

//export callbackQRadioData_SetMediaObject
func callbackQRadioData_SetMediaObject(ptr unsafe.Pointer, mediaObject unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioData::setMediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::setMediaObject"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMediaObject) bool)(NewQMediaObjectFromPointer(mediaObject)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioDataFromPointer(ptr).SetMediaObjectDefault(NewQMediaObjectFromPointer(mediaObject)))))
}

func (ptr *QRadioData) ConnectSetMediaObject(f func(mediaObject *QMediaObject) bool) {
	defer qt.Recovering("connect QRadioData::setMediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::setMediaObject", f)
	}
}

func (ptr *QRadioData) DisconnectSetMediaObject() {
	defer qt.Recovering("disconnect QRadioData::setMediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::setMediaObject")
	}
}

func (ptr *QRadioData) SetMediaObject(mediaObject QMediaObject_ITF) bool {
	defer qt.Recovering("QRadioData::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QRadioData_SetMediaObject(ptr.Pointer(), PointerFromQMediaObject(mediaObject)) != 0
	}
	return false
}

func (ptr *QRadioData) SetMediaObjectDefault(mediaObject QMediaObject_ITF) bool {
	defer qt.Recovering("QRadioData::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QRadioData_SetMediaObjectDefault(ptr.Pointer(), PointerFromQMediaObject(mediaObject)) != 0
	}
	return false
}

//export callbackQRadioData_StationIdChanged
func callbackQRadioData_StationIdChanged(ptr unsafe.Pointer, stationId *C.char) {
	defer qt.Recovering("callback QRadioData::stationIdChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::stationIdChanged"); signal != nil {
		signal.(func(string))(C.GoString(stationId))
	}

}

func (ptr *QRadioData) ConnectStationIdChanged(f func(stationId string)) {
	defer qt.Recovering("connect QRadioData::stationIdChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_ConnectStationIdChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::stationIdChanged", f)
	}
}

func (ptr *QRadioData) DisconnectStationIdChanged() {
	defer qt.Recovering("disconnect QRadioData::stationIdChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_DisconnectStationIdChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::stationIdChanged")
	}
}

func (ptr *QRadioData) StationIdChanged(stationId string) {
	defer qt.Recovering("QRadioData::stationIdChanged")

	if ptr.Pointer() != nil {
		var stationIdC = C.CString(stationId)
		defer C.free(unsafe.Pointer(stationIdC))
		C.QRadioData_StationIdChanged(ptr.Pointer(), stationIdC)
	}
}

//export callbackQRadioData_StationNameChanged
func callbackQRadioData_StationNameChanged(ptr unsafe.Pointer, stationName *C.char) {
	defer qt.Recovering("callback QRadioData::stationNameChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::stationNameChanged"); signal != nil {
		signal.(func(string))(C.GoString(stationName))
	}

}

func (ptr *QRadioData) ConnectStationNameChanged(f func(stationName string)) {
	defer qt.Recovering("connect QRadioData::stationNameChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_ConnectStationNameChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::stationNameChanged", f)
	}
}

func (ptr *QRadioData) DisconnectStationNameChanged() {
	defer qt.Recovering("disconnect QRadioData::stationNameChanged")

	if ptr.Pointer() != nil {
		C.QRadioData_DisconnectStationNameChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::stationNameChanged")
	}
}

func (ptr *QRadioData) StationNameChanged(stationName string) {
	defer qt.Recovering("QRadioData::stationNameChanged")

	if ptr.Pointer() != nil {
		var stationNameC = C.CString(stationName)
		defer C.free(unsafe.Pointer(stationNameC))
		C.QRadioData_StationNameChanged(ptr.Pointer(), stationNameC)
	}
}

func (ptr *QRadioData) DestroyQRadioData() {
	defer qt.Recovering("QRadioData::~QRadioData")

	if ptr.Pointer() != nil {
		C.QRadioData_DestroyQRadioData(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRadioData_TimerEvent
func callbackQRadioData_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioData::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRadioDataFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRadioData) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QRadioData::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::timerEvent", f)
	}
}

func (ptr *QRadioData) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QRadioData::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::timerEvent")
	}
}

func (ptr *QRadioData) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRadioData::timerEvent")

	if ptr.Pointer() != nil {
		C.QRadioData_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRadioData) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRadioData::timerEvent")

	if ptr.Pointer() != nil {
		C.QRadioData_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRadioData_ChildEvent
func callbackQRadioData_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioData::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRadioDataFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRadioData) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QRadioData::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::childEvent", f)
	}
}

func (ptr *QRadioData) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QRadioData::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::childEvent")
	}
}

func (ptr *QRadioData) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRadioData::childEvent")

	if ptr.Pointer() != nil {
		C.QRadioData_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRadioData) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRadioData::childEvent")

	if ptr.Pointer() != nil {
		C.QRadioData_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRadioData_ConnectNotify
func callbackQRadioData_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRadioData::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRadioDataFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRadioData) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRadioData::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::connectNotify", f)
	}
}

func (ptr *QRadioData) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QRadioData::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::connectNotify")
	}
}

func (ptr *QRadioData) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioData::connectNotify")

	if ptr.Pointer() != nil {
		C.QRadioData_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRadioData) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioData::connectNotify")

	if ptr.Pointer() != nil {
		C.QRadioData_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRadioData_CustomEvent
func callbackQRadioData_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioData::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRadioDataFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRadioData) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QRadioData::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::customEvent", f)
	}
}

func (ptr *QRadioData) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QRadioData::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::customEvent")
	}
}

func (ptr *QRadioData) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QRadioData::customEvent")

	if ptr.Pointer() != nil {
		C.QRadioData_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRadioData) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QRadioData::customEvent")

	if ptr.Pointer() != nil {
		C.QRadioData_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRadioData_DeleteLater
func callbackQRadioData_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioData::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQRadioDataFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QRadioData) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QRadioData::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::deleteLater", f)
	}
}

func (ptr *QRadioData) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QRadioData::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::deleteLater")
	}
}

func (ptr *QRadioData) DeleteLater() {
	defer qt.Recovering("QRadioData::deleteLater")

	if ptr.Pointer() != nil {
		C.QRadioData_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QRadioData) DeleteLaterDefault() {
	defer qt.Recovering("QRadioData::deleteLater")

	if ptr.Pointer() != nil {
		C.QRadioData_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRadioData_DisconnectNotify
func callbackQRadioData_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRadioData::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRadioDataFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRadioData) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRadioData::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::disconnectNotify", f)
	}
}

func (ptr *QRadioData) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QRadioData::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::disconnectNotify")
	}
}

func (ptr *QRadioData) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioData::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRadioData_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRadioData) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioData::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRadioData_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRadioData_Event
func callbackQRadioData_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioData::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioDataFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QRadioData) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QRadioData::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::event", f)
	}
}

func (ptr *QRadioData) DisconnectEvent() {
	defer qt.Recovering("disconnect QRadioData::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::event")
	}
}

func (ptr *QRadioData) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioData::event")

	if ptr.Pointer() != nil {
		return C.QRadioData_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QRadioData) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioData::event")

	if ptr.Pointer() != nil {
		return C.QRadioData_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQRadioData_EventFilter
func callbackQRadioData_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioData::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioDataFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QRadioData) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QRadioData::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::eventFilter", f)
	}
}

func (ptr *QRadioData) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QRadioData::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::eventFilter")
	}
}

func (ptr *QRadioData) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioData::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRadioData_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRadioData) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioData::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRadioData_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRadioData_MetaObject
func callbackQRadioData_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QRadioData::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioData::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRadioDataFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRadioData) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QRadioData::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::metaObject", f)
	}
}

func (ptr *QRadioData) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QRadioData::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioData::metaObject")
	}
}

func (ptr *QRadioData) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QRadioData::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRadioData_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRadioData) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QRadioData::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRadioData_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QRadioDataControl struct {
	QMediaControl
}

type QRadioDataControl_ITF interface {
	QMediaControl_ITF
	QRadioDataControl_PTR() *QRadioDataControl
}

func (p *QRadioDataControl) QRadioDataControl_PTR() *QRadioDataControl {
	return p
}

func (p *QRadioDataControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QRadioDataControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQRadioDataControl(ptr QRadioDataControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRadioDataControl_PTR().Pointer()
	}
	return nil
}

func NewQRadioDataControlFromPointer(ptr unsafe.Pointer) *QRadioDataControl {
	var n = new(QRadioDataControl)
	n.SetPointer(ptr)
	return n
}
func NewQRadioDataControl(parent core.QObject_ITF) *QRadioDataControl {
	defer qt.Recovering("QRadioDataControl::QRadioDataControl")

	var tmpValue = NewQRadioDataControlFromPointer(C.QRadioDataControl_NewQRadioDataControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQRadioDataControl_AlternativeFrequenciesEnabledChanged
func callbackQRadioDataControl_AlternativeFrequenciesEnabledChanged(ptr unsafe.Pointer, enabled C.char) {
	defer qt.Recovering("callback QRadioDataControl::alternativeFrequenciesEnabledChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::alternativeFrequenciesEnabledChanged"); signal != nil {
		signal.(func(bool))(int8(enabled) != 0)
	}

}

func (ptr *QRadioDataControl) ConnectAlternativeFrequenciesEnabledChanged(f func(enabled bool)) {
	defer qt.Recovering("connect QRadioDataControl::alternativeFrequenciesEnabledChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ConnectAlternativeFrequenciesEnabledChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::alternativeFrequenciesEnabledChanged", f)
	}
}

func (ptr *QRadioDataControl) DisconnectAlternativeFrequenciesEnabledChanged() {
	defer qt.Recovering("disconnect QRadioDataControl::alternativeFrequenciesEnabledChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DisconnectAlternativeFrequenciesEnabledChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::alternativeFrequenciesEnabledChanged")
	}
}

func (ptr *QRadioDataControl) AlternativeFrequenciesEnabledChanged(enabled bool) {
	defer qt.Recovering("QRadioDataControl::alternativeFrequenciesEnabledChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_AlternativeFrequenciesEnabledChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

//export callbackQRadioDataControl_Error2
func callbackQRadioDataControl_Error2(ptr unsafe.Pointer, error C.longlong) {
	defer qt.Recovering("callback QRadioDataControl::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::error2"); signal != nil {
		signal.(func(QRadioData__Error))(QRadioData__Error(error))
	}

}

func (ptr *QRadioDataControl) ConnectError2(f func(error QRadioData__Error)) {
	defer qt.Recovering("connect QRadioDataControl::error")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ConnectError2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::error2", f)
	}
}

func (ptr *QRadioDataControl) DisconnectError2() {
	defer qt.Recovering("disconnect QRadioDataControl::error")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DisconnectError2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::error2")
	}
}

func (ptr *QRadioDataControl) Error2(error QRadioData__Error) {
	defer qt.Recovering("QRadioDataControl::error")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_Error2(ptr.Pointer(), C.longlong(error))
	}
}

//export callbackQRadioDataControl_Error
func callbackQRadioDataControl_Error(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QRadioDataControl::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::error"); signal != nil {
		return C.longlong(signal.(func() QRadioData__Error)())
	}

	return C.longlong(0)
}

func (ptr *QRadioDataControl) ConnectError(f func() QRadioData__Error) {
	defer qt.Recovering("connect QRadioDataControl::error")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::error", f)
	}
}

func (ptr *QRadioDataControl) DisconnectError() {
	defer qt.Recovering("disconnect QRadioDataControl::error")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::error")
	}
}

func (ptr *QRadioDataControl) Error() QRadioData__Error {
	defer qt.Recovering("QRadioDataControl::error")

	if ptr.Pointer() != nil {
		return QRadioData__Error(C.QRadioDataControl_Error(ptr.Pointer()))
	}
	return 0
}

//export callbackQRadioDataControl_ErrorString
func callbackQRadioDataControl_ErrorString(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QRadioDataControl::errorString")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::errorString"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QRadioDataControl) ConnectErrorString(f func() string) {
	defer qt.Recovering("connect QRadioDataControl::errorString")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::errorString", f)
	}
}

func (ptr *QRadioDataControl) DisconnectErrorString() {
	defer qt.Recovering("disconnect QRadioDataControl::errorString")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::errorString")
	}
}

func (ptr *QRadioDataControl) ErrorString() string {
	defer qt.Recovering("QRadioDataControl::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioDataControl_ErrorString(ptr.Pointer()))
	}
	return ""
}

//export callbackQRadioDataControl_IsAlternativeFrequenciesEnabled
func callbackQRadioDataControl_IsAlternativeFrequenciesEnabled(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioDataControl::isAlternativeFrequenciesEnabled")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::isAlternativeFrequenciesEnabled"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QRadioDataControl) ConnectIsAlternativeFrequenciesEnabled(f func() bool) {
	defer qt.Recovering("connect QRadioDataControl::isAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::isAlternativeFrequenciesEnabled", f)
	}
}

func (ptr *QRadioDataControl) DisconnectIsAlternativeFrequenciesEnabled() {
	defer qt.Recovering("disconnect QRadioDataControl::isAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::isAlternativeFrequenciesEnabled")
	}
}

func (ptr *QRadioDataControl) IsAlternativeFrequenciesEnabled() bool {
	defer qt.Recovering("QRadioDataControl::isAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {
		return C.QRadioDataControl_IsAlternativeFrequenciesEnabled(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQRadioDataControl_ProgramType
func callbackQRadioDataControl_ProgramType(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QRadioDataControl::programType")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::programType"); signal != nil {
		return C.longlong(signal.(func() QRadioData__ProgramType)())
	}

	return C.longlong(0)
}

func (ptr *QRadioDataControl) ConnectProgramType(f func() QRadioData__ProgramType) {
	defer qt.Recovering("connect QRadioDataControl::programType")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::programType", f)
	}
}

func (ptr *QRadioDataControl) DisconnectProgramType() {
	defer qt.Recovering("disconnect QRadioDataControl::programType")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::programType")
	}
}

func (ptr *QRadioDataControl) ProgramType() QRadioData__ProgramType {
	defer qt.Recovering("QRadioDataControl::programType")

	if ptr.Pointer() != nil {
		return QRadioData__ProgramType(C.QRadioDataControl_ProgramType(ptr.Pointer()))
	}
	return 0
}

//export callbackQRadioDataControl_ProgramTypeChanged
func callbackQRadioDataControl_ProgramTypeChanged(ptr unsafe.Pointer, programType C.longlong) {
	defer qt.Recovering("callback QRadioDataControl::programTypeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::programTypeChanged"); signal != nil {
		signal.(func(QRadioData__ProgramType))(QRadioData__ProgramType(programType))
	}

}

func (ptr *QRadioDataControl) ConnectProgramTypeChanged(f func(programType QRadioData__ProgramType)) {
	defer qt.Recovering("connect QRadioDataControl::programTypeChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ConnectProgramTypeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::programTypeChanged", f)
	}
}

func (ptr *QRadioDataControl) DisconnectProgramTypeChanged() {
	defer qt.Recovering("disconnect QRadioDataControl::programTypeChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DisconnectProgramTypeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::programTypeChanged")
	}
}

func (ptr *QRadioDataControl) ProgramTypeChanged(programType QRadioData__ProgramType) {
	defer qt.Recovering("QRadioDataControl::programTypeChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ProgramTypeChanged(ptr.Pointer(), C.longlong(programType))
	}
}

//export callbackQRadioDataControl_ProgramTypeName
func callbackQRadioDataControl_ProgramTypeName(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QRadioDataControl::programTypeName")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::programTypeName"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QRadioDataControl) ConnectProgramTypeName(f func() string) {
	defer qt.Recovering("connect QRadioDataControl::programTypeName")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::programTypeName", f)
	}
}

func (ptr *QRadioDataControl) DisconnectProgramTypeName() {
	defer qt.Recovering("disconnect QRadioDataControl::programTypeName")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::programTypeName")
	}
}

func (ptr *QRadioDataControl) ProgramTypeName() string {
	defer qt.Recovering("QRadioDataControl::programTypeName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioDataControl_ProgramTypeName(ptr.Pointer()))
	}
	return ""
}

//export callbackQRadioDataControl_ProgramTypeNameChanged
func callbackQRadioDataControl_ProgramTypeNameChanged(ptr unsafe.Pointer, programTypeName *C.char) {
	defer qt.Recovering("callback QRadioDataControl::programTypeNameChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::programTypeNameChanged"); signal != nil {
		signal.(func(string))(C.GoString(programTypeName))
	}

}

func (ptr *QRadioDataControl) ConnectProgramTypeNameChanged(f func(programTypeName string)) {
	defer qt.Recovering("connect QRadioDataControl::programTypeNameChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ConnectProgramTypeNameChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::programTypeNameChanged", f)
	}
}

func (ptr *QRadioDataControl) DisconnectProgramTypeNameChanged() {
	defer qt.Recovering("disconnect QRadioDataControl::programTypeNameChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DisconnectProgramTypeNameChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::programTypeNameChanged")
	}
}

func (ptr *QRadioDataControl) ProgramTypeNameChanged(programTypeName string) {
	defer qt.Recovering("QRadioDataControl::programTypeNameChanged")

	if ptr.Pointer() != nil {
		var programTypeNameC = C.CString(programTypeName)
		defer C.free(unsafe.Pointer(programTypeNameC))
		C.QRadioDataControl_ProgramTypeNameChanged(ptr.Pointer(), programTypeNameC)
	}
}

//export callbackQRadioDataControl_RadioText
func callbackQRadioDataControl_RadioText(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QRadioDataControl::radioText")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::radioText"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QRadioDataControl) ConnectRadioText(f func() string) {
	defer qt.Recovering("connect QRadioDataControl::radioText")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::radioText", f)
	}
}

func (ptr *QRadioDataControl) DisconnectRadioText() {
	defer qt.Recovering("disconnect QRadioDataControl::radioText")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::radioText")
	}
}

func (ptr *QRadioDataControl) RadioText() string {
	defer qt.Recovering("QRadioDataControl::radioText")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioDataControl_RadioText(ptr.Pointer()))
	}
	return ""
}

//export callbackQRadioDataControl_RadioTextChanged
func callbackQRadioDataControl_RadioTextChanged(ptr unsafe.Pointer, radioText *C.char) {
	defer qt.Recovering("callback QRadioDataControl::radioTextChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::radioTextChanged"); signal != nil {
		signal.(func(string))(C.GoString(radioText))
	}

}

func (ptr *QRadioDataControl) ConnectRadioTextChanged(f func(radioText string)) {
	defer qt.Recovering("connect QRadioDataControl::radioTextChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ConnectRadioTextChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::radioTextChanged", f)
	}
}

func (ptr *QRadioDataControl) DisconnectRadioTextChanged() {
	defer qt.Recovering("disconnect QRadioDataControl::radioTextChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DisconnectRadioTextChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::radioTextChanged")
	}
}

func (ptr *QRadioDataControl) RadioTextChanged(radioText string) {
	defer qt.Recovering("QRadioDataControl::radioTextChanged")

	if ptr.Pointer() != nil {
		var radioTextC = C.CString(radioText)
		defer C.free(unsafe.Pointer(radioTextC))
		C.QRadioDataControl_RadioTextChanged(ptr.Pointer(), radioTextC)
	}
}

//export callbackQRadioDataControl_SetAlternativeFrequenciesEnabled
func callbackQRadioDataControl_SetAlternativeFrequenciesEnabled(ptr unsafe.Pointer, enabled C.char) {
	defer qt.Recovering("callback QRadioDataControl::setAlternativeFrequenciesEnabled")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::setAlternativeFrequenciesEnabled"); signal != nil {
		signal.(func(bool))(int8(enabled) != 0)
	}

}

func (ptr *QRadioDataControl) ConnectSetAlternativeFrequenciesEnabled(f func(enabled bool)) {
	defer qt.Recovering("connect QRadioDataControl::setAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::setAlternativeFrequenciesEnabled", f)
	}
}

func (ptr *QRadioDataControl) DisconnectSetAlternativeFrequenciesEnabled(enabled bool) {
	defer qt.Recovering("disconnect QRadioDataControl::setAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::setAlternativeFrequenciesEnabled")
	}
}

func (ptr *QRadioDataControl) SetAlternativeFrequenciesEnabled(enabled bool) {
	defer qt.Recovering("QRadioDataControl::setAlternativeFrequenciesEnabled")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_SetAlternativeFrequenciesEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

//export callbackQRadioDataControl_StationId
func callbackQRadioDataControl_StationId(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QRadioDataControl::stationId")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::stationId"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QRadioDataControl) ConnectStationId(f func() string) {
	defer qt.Recovering("connect QRadioDataControl::stationId")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::stationId", f)
	}
}

func (ptr *QRadioDataControl) DisconnectStationId() {
	defer qt.Recovering("disconnect QRadioDataControl::stationId")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::stationId")
	}
}

func (ptr *QRadioDataControl) StationId() string {
	defer qt.Recovering("QRadioDataControl::stationId")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioDataControl_StationId(ptr.Pointer()))
	}
	return ""
}

//export callbackQRadioDataControl_StationIdChanged
func callbackQRadioDataControl_StationIdChanged(ptr unsafe.Pointer, stationId *C.char) {
	defer qt.Recovering("callback QRadioDataControl::stationIdChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::stationIdChanged"); signal != nil {
		signal.(func(string))(C.GoString(stationId))
	}

}

func (ptr *QRadioDataControl) ConnectStationIdChanged(f func(stationId string)) {
	defer qt.Recovering("connect QRadioDataControl::stationIdChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ConnectStationIdChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::stationIdChanged", f)
	}
}

func (ptr *QRadioDataControl) DisconnectStationIdChanged() {
	defer qt.Recovering("disconnect QRadioDataControl::stationIdChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DisconnectStationIdChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::stationIdChanged")
	}
}

func (ptr *QRadioDataControl) StationIdChanged(stationId string) {
	defer qt.Recovering("QRadioDataControl::stationIdChanged")

	if ptr.Pointer() != nil {
		var stationIdC = C.CString(stationId)
		defer C.free(unsafe.Pointer(stationIdC))
		C.QRadioDataControl_StationIdChanged(ptr.Pointer(), stationIdC)
	}
}

//export callbackQRadioDataControl_StationName
func callbackQRadioDataControl_StationName(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QRadioDataControl::stationName")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::stationName"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QRadioDataControl) ConnectStationName(f func() string) {
	defer qt.Recovering("connect QRadioDataControl::stationName")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::stationName", f)
	}
}

func (ptr *QRadioDataControl) DisconnectStationName() {
	defer qt.Recovering("disconnect QRadioDataControl::stationName")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::stationName")
	}
}

func (ptr *QRadioDataControl) StationName() string {
	defer qt.Recovering("QRadioDataControl::stationName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioDataControl_StationName(ptr.Pointer()))
	}
	return ""
}

//export callbackQRadioDataControl_StationNameChanged
func callbackQRadioDataControl_StationNameChanged(ptr unsafe.Pointer, stationName *C.char) {
	defer qt.Recovering("callback QRadioDataControl::stationNameChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::stationNameChanged"); signal != nil {
		signal.(func(string))(C.GoString(stationName))
	}

}

func (ptr *QRadioDataControl) ConnectStationNameChanged(f func(stationName string)) {
	defer qt.Recovering("connect QRadioDataControl::stationNameChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ConnectStationNameChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::stationNameChanged", f)
	}
}

func (ptr *QRadioDataControl) DisconnectStationNameChanged() {
	defer qt.Recovering("disconnect QRadioDataControl::stationNameChanged")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DisconnectStationNameChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::stationNameChanged")
	}
}

func (ptr *QRadioDataControl) StationNameChanged(stationName string) {
	defer qt.Recovering("QRadioDataControl::stationNameChanged")

	if ptr.Pointer() != nil {
		var stationNameC = C.CString(stationName)
		defer C.free(unsafe.Pointer(stationNameC))
		C.QRadioDataControl_StationNameChanged(ptr.Pointer(), stationNameC)
	}
}

func (ptr *QRadioDataControl) DestroyQRadioDataControl() {
	defer qt.Recovering("QRadioDataControl::~QRadioDataControl")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DestroyQRadioDataControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRadioDataControl_TimerEvent
func callbackQRadioDataControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioDataControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRadioDataControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRadioDataControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QRadioDataControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::timerEvent", f)
	}
}

func (ptr *QRadioDataControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QRadioDataControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::timerEvent")
	}
}

func (ptr *QRadioDataControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRadioDataControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRadioDataControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRadioDataControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRadioDataControl_ChildEvent
func callbackQRadioDataControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioDataControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRadioDataControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRadioDataControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QRadioDataControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::childEvent", f)
	}
}

func (ptr *QRadioDataControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QRadioDataControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::childEvent")
	}
}

func (ptr *QRadioDataControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRadioDataControl::childEvent")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRadioDataControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRadioDataControl::childEvent")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRadioDataControl_ConnectNotify
func callbackQRadioDataControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRadioDataControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRadioDataControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRadioDataControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRadioDataControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::connectNotify", f)
	}
}

func (ptr *QRadioDataControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QRadioDataControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::connectNotify")
	}
}

func (ptr *QRadioDataControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioDataControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRadioDataControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioDataControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRadioDataControl_CustomEvent
func callbackQRadioDataControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioDataControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRadioDataControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRadioDataControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QRadioDataControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::customEvent", f)
	}
}

func (ptr *QRadioDataControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QRadioDataControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::customEvent")
	}
}

func (ptr *QRadioDataControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QRadioDataControl::customEvent")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRadioDataControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QRadioDataControl::customEvent")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRadioDataControl_DeleteLater
func callbackQRadioDataControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioDataControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQRadioDataControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QRadioDataControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QRadioDataControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::deleteLater", f)
	}
}

func (ptr *QRadioDataControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QRadioDataControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::deleteLater")
	}
}

func (ptr *QRadioDataControl) DeleteLater() {
	defer qt.Recovering("QRadioDataControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QRadioDataControl) DeleteLaterDefault() {
	defer qt.Recovering("QRadioDataControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRadioDataControl_DisconnectNotify
func callbackQRadioDataControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRadioDataControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRadioDataControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRadioDataControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRadioDataControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::disconnectNotify", f)
	}
}

func (ptr *QRadioDataControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QRadioDataControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::disconnectNotify")
	}
}

func (ptr *QRadioDataControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioDataControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRadioDataControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioDataControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRadioDataControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRadioDataControl_Event
func callbackQRadioDataControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioDataControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioDataControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QRadioDataControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QRadioDataControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::event", f)
	}
}

func (ptr *QRadioDataControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QRadioDataControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::event")
	}
}

func (ptr *QRadioDataControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioDataControl::event")

	if ptr.Pointer() != nil {
		return C.QRadioDataControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QRadioDataControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioDataControl::event")

	if ptr.Pointer() != nil {
		return C.QRadioDataControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQRadioDataControl_EventFilter
func callbackQRadioDataControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioDataControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioDataControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QRadioDataControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QRadioDataControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::eventFilter", f)
	}
}

func (ptr *QRadioDataControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QRadioDataControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::eventFilter")
	}
}

func (ptr *QRadioDataControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioDataControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRadioDataControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRadioDataControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioDataControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRadioDataControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRadioDataControl_MetaObject
func callbackQRadioDataControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QRadioDataControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioDataControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRadioDataControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRadioDataControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QRadioDataControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::metaObject", f)
	}
}

func (ptr *QRadioDataControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QRadioDataControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioDataControl::metaObject")
	}
}

func (ptr *QRadioDataControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QRadioDataControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRadioDataControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRadioDataControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QRadioDataControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRadioDataControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QRadioTuner::Band
type QRadioTuner__Band int64

const (
	QRadioTuner__AM  = QRadioTuner__Band(0)
	QRadioTuner__FM  = QRadioTuner__Band(1)
	QRadioTuner__SW  = QRadioTuner__Band(2)
	QRadioTuner__LW  = QRadioTuner__Band(3)
	QRadioTuner__FM2 = QRadioTuner__Band(4)
)

//QRadioTuner::Error
type QRadioTuner__Error int64

const (
	QRadioTuner__NoError         = QRadioTuner__Error(0)
	QRadioTuner__ResourceError   = QRadioTuner__Error(1)
	QRadioTuner__OpenError       = QRadioTuner__Error(2)
	QRadioTuner__OutOfRangeError = QRadioTuner__Error(3)
)

//QRadioTuner::SearchMode
type QRadioTuner__SearchMode int64

const (
	QRadioTuner__SearchFast         = QRadioTuner__SearchMode(0)
	QRadioTuner__SearchGetStationId = QRadioTuner__SearchMode(1)
)

//QRadioTuner::State
type QRadioTuner__State int64

const (
	QRadioTuner__ActiveState  = QRadioTuner__State(0)
	QRadioTuner__StoppedState = QRadioTuner__State(1)
)

//QRadioTuner::StereoMode
type QRadioTuner__StereoMode int64

const (
	QRadioTuner__ForceStereo = QRadioTuner__StereoMode(0)
	QRadioTuner__ForceMono   = QRadioTuner__StereoMode(1)
	QRadioTuner__Auto        = QRadioTuner__StereoMode(2)
)

type QRadioTuner struct {
	QMediaObject
}

type QRadioTuner_ITF interface {
	QMediaObject_ITF
	QRadioTuner_PTR() *QRadioTuner
}

func (p *QRadioTuner) QRadioTuner_PTR() *QRadioTuner {
	return p
}

func (p *QRadioTuner) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaObject_PTR().Pointer()
	}
	return nil
}

func (p *QRadioTuner) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQRadioTuner(ptr QRadioTuner_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRadioTuner_PTR().Pointer()
	}
	return nil
}

func NewQRadioTunerFromPointer(ptr unsafe.Pointer) *QRadioTuner {
	var n = new(QRadioTuner)
	n.SetPointer(ptr)
	return n
}
func (ptr *QRadioTuner) Band() QRadioTuner__Band {
	defer qt.Recovering("QRadioTuner::band")

	if ptr.Pointer() != nil {
		return QRadioTuner__Band(C.QRadioTuner_Band(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadioTuner) Frequency() int {
	defer qt.Recovering("QRadioTuner::frequency")

	if ptr.Pointer() != nil {
		return int(int32(C.QRadioTuner_Frequency(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRadioTuner) IsAntennaConnected() bool {
	defer qt.Recovering("QRadioTuner::isAntennaConnected")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_IsAntennaConnected(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRadioTuner) IsMuted() bool {
	defer qt.Recovering("QRadioTuner::isMuted")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_IsMuted(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRadioTuner) IsSearching() bool {
	defer qt.Recovering("QRadioTuner::isSearching")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_IsSearching(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRadioTuner) IsStereo() bool {
	defer qt.Recovering("QRadioTuner::isStereo")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_IsStereo(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRadioTuner) RadioData() *QRadioData {
	defer qt.Recovering("QRadioTuner::radioData")

	if ptr.Pointer() != nil {
		var tmpValue = NewQRadioDataFromPointer(C.QRadioTuner_RadioData(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQRadioTuner_SetMuted
func callbackQRadioTuner_SetMuted(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QRadioTuner::setMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::setMuted"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QRadioTuner) ConnectSetMuted(f func(muted bool)) {
	defer qt.Recovering("connect QRadioTuner::setMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::setMuted", f)
	}
}

func (ptr *QRadioTuner) DisconnectSetMuted(muted bool) {
	defer qt.Recovering("disconnect QRadioTuner::setMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::setMuted")
	}
}

func (ptr *QRadioTuner) SetMuted(muted bool) {
	defer qt.Recovering("QRadioTuner::setMuted")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SetMuted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

func (ptr *QRadioTuner) SetStereoMode(mode QRadioTuner__StereoMode) {
	defer qt.Recovering("QRadioTuner::setStereoMode")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SetStereoMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQRadioTuner_SetVolume
func callbackQRadioTuner_SetVolume(ptr unsafe.Pointer, volume C.int) {
	defer qt.Recovering("callback QRadioTuner::setVolume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::setVolume"); signal != nil {
		signal.(func(int))(int(int32(volume)))
	}

}

func (ptr *QRadioTuner) ConnectSetVolume(f func(volume int)) {
	defer qt.Recovering("connect QRadioTuner::setVolume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::setVolume", f)
	}
}

func (ptr *QRadioTuner) DisconnectSetVolume(volume int) {
	defer qt.Recovering("disconnect QRadioTuner::setVolume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::setVolume")
	}
}

func (ptr *QRadioTuner) SetVolume(volume int) {
	defer qt.Recovering("QRadioTuner::setVolume")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SetVolume(ptr.Pointer(), C.int(int32(volume)))
	}
}

func (ptr *QRadioTuner) SignalStrength() int {
	defer qt.Recovering("QRadioTuner::signalStrength")

	if ptr.Pointer() != nil {
		return int(int32(C.QRadioTuner_SignalStrength(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRadioTuner) State() QRadioTuner__State {
	defer qt.Recovering("QRadioTuner::state")

	if ptr.Pointer() != nil {
		return QRadioTuner__State(C.QRadioTuner_State(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadioTuner) StereoMode() QRadioTuner__StereoMode {
	defer qt.Recovering("QRadioTuner::stereoMode")

	if ptr.Pointer() != nil {
		return QRadioTuner__StereoMode(C.QRadioTuner_StereoMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadioTuner) Volume() int {
	defer qt.Recovering("QRadioTuner::volume")

	if ptr.Pointer() != nil {
		return int(int32(C.QRadioTuner_Volume(ptr.Pointer())))
	}
	return 0
}

func NewQRadioTuner(parent core.QObject_ITF) *QRadioTuner {
	defer qt.Recovering("QRadioTuner::QRadioTuner")

	var tmpValue = NewQRadioTunerFromPointer(C.QRadioTuner_NewQRadioTuner(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQRadioTuner_AntennaConnectedChanged
func callbackQRadioTuner_AntennaConnectedChanged(ptr unsafe.Pointer, connectionStatus C.char) {
	defer qt.Recovering("callback QRadioTuner::antennaConnectedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::antennaConnectedChanged"); signal != nil {
		signal.(func(bool))(int8(connectionStatus) != 0)
	}

}

func (ptr *QRadioTuner) ConnectAntennaConnectedChanged(f func(connectionStatus bool)) {
	defer qt.Recovering("connect QRadioTuner::antennaConnectedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectAntennaConnectedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::antennaConnectedChanged", f)
	}
}

func (ptr *QRadioTuner) DisconnectAntennaConnectedChanged() {
	defer qt.Recovering("disconnect QRadioTuner::antennaConnectedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectAntennaConnectedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::antennaConnectedChanged")
	}
}

func (ptr *QRadioTuner) AntennaConnectedChanged(connectionStatus bool) {
	defer qt.Recovering("QRadioTuner::antennaConnectedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_AntennaConnectedChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(connectionStatus))))
	}
}

//export callbackQRadioTuner_Availability
func callbackQRadioTuner_Availability(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QRadioTuner::availability")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::availability"); signal != nil {
		return C.longlong(signal.(func() QMultimedia__AvailabilityStatus)())
	}

	return C.longlong(NewQRadioTunerFromPointer(ptr).AvailabilityDefault())
}

func (ptr *QRadioTuner) ConnectAvailability(f func() QMultimedia__AvailabilityStatus) {
	defer qt.Recovering("connect QRadioTuner::availability")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::availability", f)
	}
}

func (ptr *QRadioTuner) DisconnectAvailability() {
	defer qt.Recovering("disconnect QRadioTuner::availability")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::availability")
	}
}

func (ptr *QRadioTuner) Availability() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QRadioTuner::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QRadioTuner_Availability(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadioTuner) AvailabilityDefault() QMultimedia__AvailabilityStatus {
	defer qt.Recovering("QRadioTuner::availability")

	if ptr.Pointer() != nil {
		return QMultimedia__AvailabilityStatus(C.QRadioTuner_AvailabilityDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQRadioTuner_BandChanged
func callbackQRadioTuner_BandChanged(ptr unsafe.Pointer, band C.longlong) {
	defer qt.Recovering("callback QRadioTuner::bandChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::bandChanged"); signal != nil {
		signal.(func(QRadioTuner__Band))(QRadioTuner__Band(band))
	}

}

func (ptr *QRadioTuner) ConnectBandChanged(f func(band QRadioTuner__Band)) {
	defer qt.Recovering("connect QRadioTuner::bandChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectBandChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::bandChanged", f)
	}
}

func (ptr *QRadioTuner) DisconnectBandChanged() {
	defer qt.Recovering("disconnect QRadioTuner::bandChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectBandChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::bandChanged")
	}
}

func (ptr *QRadioTuner) BandChanged(band QRadioTuner__Band) {
	defer qt.Recovering("QRadioTuner::bandChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_BandChanged(ptr.Pointer(), C.longlong(band))
	}
}

//export callbackQRadioTuner_CancelSearch
func callbackQRadioTuner_CancelSearch(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::cancelSearch")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::cancelSearch"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTuner) ConnectCancelSearch(f func()) {
	defer qt.Recovering("connect QRadioTuner::cancelSearch")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::cancelSearch", f)
	}
}

func (ptr *QRadioTuner) DisconnectCancelSearch() {
	defer qt.Recovering("disconnect QRadioTuner::cancelSearch")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::cancelSearch")
	}
}

func (ptr *QRadioTuner) CancelSearch() {
	defer qt.Recovering("QRadioTuner::cancelSearch")

	if ptr.Pointer() != nil {
		C.QRadioTuner_CancelSearch(ptr.Pointer())
	}
}

//export callbackQRadioTuner_Error2
func callbackQRadioTuner_Error2(ptr unsafe.Pointer, error C.longlong) {
	defer qt.Recovering("callback QRadioTuner::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::error2"); signal != nil {
		signal.(func(QRadioTuner__Error))(QRadioTuner__Error(error))
	}

}

func (ptr *QRadioTuner) ConnectError2(f func(error QRadioTuner__Error)) {
	defer qt.Recovering("connect QRadioTuner::error")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectError2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::error2", f)
	}
}

func (ptr *QRadioTuner) DisconnectError2() {
	defer qt.Recovering("disconnect QRadioTuner::error")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectError2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::error2")
	}
}

func (ptr *QRadioTuner) Error2(error QRadioTuner__Error) {
	defer qt.Recovering("QRadioTuner::error")

	if ptr.Pointer() != nil {
		C.QRadioTuner_Error2(ptr.Pointer(), C.longlong(error))
	}
}

func (ptr *QRadioTuner) Error() QRadioTuner__Error {
	defer qt.Recovering("QRadioTuner::error")

	if ptr.Pointer() != nil {
		return QRadioTuner__Error(C.QRadioTuner_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadioTuner) ErrorString() string {
	defer qt.Recovering("QRadioTuner::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioTuner_ErrorString(ptr.Pointer()))
	}
	return ""
}

//export callbackQRadioTuner_FrequencyChanged
func callbackQRadioTuner_FrequencyChanged(ptr unsafe.Pointer, frequency C.int) {
	defer qt.Recovering("callback QRadioTuner::frequencyChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::frequencyChanged"); signal != nil {
		signal.(func(int))(int(int32(frequency)))
	}

}

func (ptr *QRadioTuner) ConnectFrequencyChanged(f func(frequency int)) {
	defer qt.Recovering("connect QRadioTuner::frequencyChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectFrequencyChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::frequencyChanged", f)
	}
}

func (ptr *QRadioTuner) DisconnectFrequencyChanged() {
	defer qt.Recovering("disconnect QRadioTuner::frequencyChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectFrequencyChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::frequencyChanged")
	}
}

func (ptr *QRadioTuner) FrequencyChanged(frequency int) {
	defer qt.Recovering("QRadioTuner::frequencyChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_FrequencyChanged(ptr.Pointer(), C.int(int32(frequency)))
	}
}

func (ptr *QRadioTuner) FrequencyStep(band QRadioTuner__Band) int {
	defer qt.Recovering("QRadioTuner::frequencyStep")

	if ptr.Pointer() != nil {
		return int(int32(C.QRadioTuner_FrequencyStep(ptr.Pointer(), C.longlong(band))))
	}
	return 0
}

func (ptr *QRadioTuner) IsBandSupported(band QRadioTuner__Band) bool {
	defer qt.Recovering("QRadioTuner::isBandSupported")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_IsBandSupported(ptr.Pointer(), C.longlong(band)) != 0
	}
	return false
}

//export callbackQRadioTuner_MutedChanged
func callbackQRadioTuner_MutedChanged(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QRadioTuner::mutedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::mutedChanged"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QRadioTuner) ConnectMutedChanged(f func(muted bool)) {
	defer qt.Recovering("connect QRadioTuner::mutedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectMutedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::mutedChanged", f)
	}
}

func (ptr *QRadioTuner) DisconnectMutedChanged() {
	defer qt.Recovering("disconnect QRadioTuner::mutedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectMutedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::mutedChanged")
	}
}

func (ptr *QRadioTuner) MutedChanged(muted bool) {
	defer qt.Recovering("QRadioTuner::mutedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_MutedChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

//export callbackQRadioTuner_SearchAllStations
func callbackQRadioTuner_SearchAllStations(ptr unsafe.Pointer, searchMode C.longlong) {
	defer qt.Recovering("callback QRadioTuner::searchAllStations")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::searchAllStations"); signal != nil {
		signal.(func(QRadioTuner__SearchMode))(QRadioTuner__SearchMode(searchMode))
	}

}

func (ptr *QRadioTuner) ConnectSearchAllStations(f func(searchMode QRadioTuner__SearchMode)) {
	defer qt.Recovering("connect QRadioTuner::searchAllStations")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::searchAllStations", f)
	}
}

func (ptr *QRadioTuner) DisconnectSearchAllStations(searchMode QRadioTuner__SearchMode) {
	defer qt.Recovering("disconnect QRadioTuner::searchAllStations")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::searchAllStations")
	}
}

func (ptr *QRadioTuner) SearchAllStations(searchMode QRadioTuner__SearchMode) {
	defer qt.Recovering("QRadioTuner::searchAllStations")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SearchAllStations(ptr.Pointer(), C.longlong(searchMode))
	}
}

//export callbackQRadioTuner_SearchBackward
func callbackQRadioTuner_SearchBackward(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::searchBackward")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::searchBackward"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTuner) ConnectSearchBackward(f func()) {
	defer qt.Recovering("connect QRadioTuner::searchBackward")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::searchBackward", f)
	}
}

func (ptr *QRadioTuner) DisconnectSearchBackward() {
	defer qt.Recovering("disconnect QRadioTuner::searchBackward")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::searchBackward")
	}
}

func (ptr *QRadioTuner) SearchBackward() {
	defer qt.Recovering("QRadioTuner::searchBackward")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SearchBackward(ptr.Pointer())
	}
}

//export callbackQRadioTuner_SearchForward
func callbackQRadioTuner_SearchForward(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::searchForward")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::searchForward"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTuner) ConnectSearchForward(f func()) {
	defer qt.Recovering("connect QRadioTuner::searchForward")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::searchForward", f)
	}
}

func (ptr *QRadioTuner) DisconnectSearchForward() {
	defer qt.Recovering("disconnect QRadioTuner::searchForward")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::searchForward")
	}
}

func (ptr *QRadioTuner) SearchForward() {
	defer qt.Recovering("QRadioTuner::searchForward")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SearchForward(ptr.Pointer())
	}
}

//export callbackQRadioTuner_SearchingChanged
func callbackQRadioTuner_SearchingChanged(ptr unsafe.Pointer, searching C.char) {
	defer qt.Recovering("callback QRadioTuner::searchingChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::searchingChanged"); signal != nil {
		signal.(func(bool))(int8(searching) != 0)
	}

}

func (ptr *QRadioTuner) ConnectSearchingChanged(f func(searching bool)) {
	defer qt.Recovering("connect QRadioTuner::searchingChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectSearchingChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::searchingChanged", f)
	}
}

func (ptr *QRadioTuner) DisconnectSearchingChanged() {
	defer qt.Recovering("disconnect QRadioTuner::searchingChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectSearchingChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::searchingChanged")
	}
}

func (ptr *QRadioTuner) SearchingChanged(searching bool) {
	defer qt.Recovering("QRadioTuner::searchingChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SearchingChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(searching))))
	}
}

//export callbackQRadioTuner_SetBand
func callbackQRadioTuner_SetBand(ptr unsafe.Pointer, band C.longlong) {
	defer qt.Recovering("callback QRadioTuner::setBand")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::setBand"); signal != nil {
		signal.(func(QRadioTuner__Band))(QRadioTuner__Band(band))
	}

}

func (ptr *QRadioTuner) ConnectSetBand(f func(band QRadioTuner__Band)) {
	defer qt.Recovering("connect QRadioTuner::setBand")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::setBand", f)
	}
}

func (ptr *QRadioTuner) DisconnectSetBand(band QRadioTuner__Band) {
	defer qt.Recovering("disconnect QRadioTuner::setBand")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::setBand")
	}
}

func (ptr *QRadioTuner) SetBand(band QRadioTuner__Band) {
	defer qt.Recovering("QRadioTuner::setBand")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SetBand(ptr.Pointer(), C.longlong(band))
	}
}

//export callbackQRadioTuner_SetFrequency
func callbackQRadioTuner_SetFrequency(ptr unsafe.Pointer, frequency C.int) {
	defer qt.Recovering("callback QRadioTuner::setFrequency")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::setFrequency"); signal != nil {
		signal.(func(int))(int(int32(frequency)))
	}

}

func (ptr *QRadioTuner) ConnectSetFrequency(f func(frequency int)) {
	defer qt.Recovering("connect QRadioTuner::setFrequency")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::setFrequency", f)
	}
}

func (ptr *QRadioTuner) DisconnectSetFrequency(frequency int) {
	defer qt.Recovering("disconnect QRadioTuner::setFrequency")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::setFrequency")
	}
}

func (ptr *QRadioTuner) SetFrequency(frequency int) {
	defer qt.Recovering("QRadioTuner::setFrequency")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SetFrequency(ptr.Pointer(), C.int(int32(frequency)))
	}
}

//export callbackQRadioTuner_SignalStrengthChanged
func callbackQRadioTuner_SignalStrengthChanged(ptr unsafe.Pointer, strength C.int) {
	defer qt.Recovering("callback QRadioTuner::signalStrengthChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::signalStrengthChanged"); signal != nil {
		signal.(func(int))(int(int32(strength)))
	}

}

func (ptr *QRadioTuner) ConnectSignalStrengthChanged(f func(strength int)) {
	defer qt.Recovering("connect QRadioTuner::signalStrengthChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectSignalStrengthChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::signalStrengthChanged", f)
	}
}

func (ptr *QRadioTuner) DisconnectSignalStrengthChanged() {
	defer qt.Recovering("disconnect QRadioTuner::signalStrengthChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectSignalStrengthChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::signalStrengthChanged")
	}
}

func (ptr *QRadioTuner) SignalStrengthChanged(strength int) {
	defer qt.Recovering("QRadioTuner::signalStrengthChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_SignalStrengthChanged(ptr.Pointer(), C.int(int32(strength)))
	}
}

//export callbackQRadioTuner_Start
func callbackQRadioTuner_Start(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::start")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTuner) ConnectStart(f func()) {
	defer qt.Recovering("connect QRadioTuner::start")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::start", f)
	}
}

func (ptr *QRadioTuner) DisconnectStart() {
	defer qt.Recovering("disconnect QRadioTuner::start")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::start")
	}
}

func (ptr *QRadioTuner) Start() {
	defer qt.Recovering("QRadioTuner::start")

	if ptr.Pointer() != nil {
		C.QRadioTuner_Start(ptr.Pointer())
	}
}

//export callbackQRadioTuner_StateChanged
func callbackQRadioTuner_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QRadioTuner::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::stateChanged"); signal != nil {
		signal.(func(QRadioTuner__State))(QRadioTuner__State(state))
	}

}

func (ptr *QRadioTuner) ConnectStateChanged(f func(state QRadioTuner__State)) {
	defer qt.Recovering("connect QRadioTuner::stateChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::stateChanged", f)
	}
}

func (ptr *QRadioTuner) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QRadioTuner::stateChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::stateChanged")
	}
}

func (ptr *QRadioTuner) StateChanged(state QRadioTuner__State) {
	defer qt.Recovering("QRadioTuner::stateChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQRadioTuner_StationFound
func callbackQRadioTuner_StationFound(ptr unsafe.Pointer, frequency C.int, stationId *C.char) {
	defer qt.Recovering("callback QRadioTuner::stationFound")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::stationFound"); signal != nil {
		signal.(func(int, string))(int(int32(frequency)), C.GoString(stationId))
	}

}

func (ptr *QRadioTuner) ConnectStationFound(f func(frequency int, stationId string)) {
	defer qt.Recovering("connect QRadioTuner::stationFound")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectStationFound(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::stationFound", f)
	}
}

func (ptr *QRadioTuner) DisconnectStationFound() {
	defer qt.Recovering("disconnect QRadioTuner::stationFound")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectStationFound(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::stationFound")
	}
}

func (ptr *QRadioTuner) StationFound(frequency int, stationId string) {
	defer qt.Recovering("QRadioTuner::stationFound")

	if ptr.Pointer() != nil {
		var stationIdC = C.CString(stationId)
		defer C.free(unsafe.Pointer(stationIdC))
		C.QRadioTuner_StationFound(ptr.Pointer(), C.int(int32(frequency)), stationIdC)
	}
}

//export callbackQRadioTuner_StereoStatusChanged
func callbackQRadioTuner_StereoStatusChanged(ptr unsafe.Pointer, stereo C.char) {
	defer qt.Recovering("callback QRadioTuner::stereoStatusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::stereoStatusChanged"); signal != nil {
		signal.(func(bool))(int8(stereo) != 0)
	}

}

func (ptr *QRadioTuner) ConnectStereoStatusChanged(f func(stereo bool)) {
	defer qt.Recovering("connect QRadioTuner::stereoStatusChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectStereoStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::stereoStatusChanged", f)
	}
}

func (ptr *QRadioTuner) DisconnectStereoStatusChanged() {
	defer qt.Recovering("disconnect QRadioTuner::stereoStatusChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectStereoStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::stereoStatusChanged")
	}
}

func (ptr *QRadioTuner) StereoStatusChanged(stereo bool) {
	defer qt.Recovering("QRadioTuner::stereoStatusChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_StereoStatusChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(stereo))))
	}
}

//export callbackQRadioTuner_Stop
func callbackQRadioTuner_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTuner) ConnectStop(f func()) {
	defer qt.Recovering("connect QRadioTuner::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::stop", f)
	}
}

func (ptr *QRadioTuner) DisconnectStop() {
	defer qt.Recovering("disconnect QRadioTuner::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::stop")
	}
}

func (ptr *QRadioTuner) Stop() {
	defer qt.Recovering("QRadioTuner::stop")

	if ptr.Pointer() != nil {
		C.QRadioTuner_Stop(ptr.Pointer())
	}
}

//export callbackQRadioTuner_VolumeChanged
func callbackQRadioTuner_VolumeChanged(ptr unsafe.Pointer, volume C.int) {
	defer qt.Recovering("callback QRadioTuner::volumeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::volumeChanged"); signal != nil {
		signal.(func(int))(int(int32(volume)))
	}

}

func (ptr *QRadioTuner) ConnectVolumeChanged(f func(volume int)) {
	defer qt.Recovering("connect QRadioTuner::volumeChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectVolumeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::volumeChanged", f)
	}
}

func (ptr *QRadioTuner) DisconnectVolumeChanged() {
	defer qt.Recovering("disconnect QRadioTuner::volumeChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectVolumeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::volumeChanged")
	}
}

func (ptr *QRadioTuner) VolumeChanged(volume int) {
	defer qt.Recovering("QRadioTuner::volumeChanged")

	if ptr.Pointer() != nil {
		C.QRadioTuner_VolumeChanged(ptr.Pointer(), C.int(int32(volume)))
	}
}

func (ptr *QRadioTuner) DestroyQRadioTuner() {
	defer qt.Recovering("QRadioTuner::~QRadioTuner")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DestroyQRadioTuner(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRadioTuner_Bind
func callbackQRadioTuner_Bind(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTuner::bind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::bind"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject) bool)(core.NewQObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioTunerFromPointer(ptr).BindDefault(core.NewQObjectFromPointer(object)))))
}

func (ptr *QRadioTuner) ConnectBind(f func(object *core.QObject) bool) {
	defer qt.Recovering("connect QRadioTuner::bind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::bind", f)
	}
}

func (ptr *QRadioTuner) DisconnectBind() {
	defer qt.Recovering("disconnect QRadioTuner::bind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::bind")
	}
}

func (ptr *QRadioTuner) Bind(object core.QObject_ITF) bool {
	defer qt.Recovering("QRadioTuner::bind")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_Bind(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QRadioTuner) BindDefault(object core.QObject_ITF) bool {
	defer qt.Recovering("QRadioTuner::bind")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_BindDefault(ptr.Pointer(), core.PointerFromQObject(object)) != 0
	}
	return false
}

//export callbackQRadioTuner_IsAvailable
func callbackQRadioTuner_IsAvailable(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTuner::isAvailable")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::isAvailable"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioTunerFromPointer(ptr).IsAvailableDefault())))
}

func (ptr *QRadioTuner) ConnectIsAvailable(f func() bool) {
	defer qt.Recovering("connect QRadioTuner::isAvailable")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::isAvailable", f)
	}
}

func (ptr *QRadioTuner) DisconnectIsAvailable() {
	defer qt.Recovering("disconnect QRadioTuner::isAvailable")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::isAvailable")
	}
}

func (ptr *QRadioTuner) IsAvailable() bool {
	defer qt.Recovering("QRadioTuner::isAvailable")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_IsAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRadioTuner) IsAvailableDefault() bool {
	defer qt.Recovering("QRadioTuner::isAvailable")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_IsAvailableDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQRadioTuner_Service
func callbackQRadioTuner_Service(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QRadioTuner::service")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::service"); signal != nil {
		return PointerFromQMediaService(signal.(func() *QMediaService)())
	}

	return PointerFromQMediaService(NewQRadioTunerFromPointer(ptr).ServiceDefault())
}

func (ptr *QRadioTuner) ConnectService(f func() *QMediaService) {
	defer qt.Recovering("connect QRadioTuner::service")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::service", f)
	}
}

func (ptr *QRadioTuner) DisconnectService() {
	defer qt.Recovering("disconnect QRadioTuner::service")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::service")
	}
}

func (ptr *QRadioTuner) Service() *QMediaService {
	defer qt.Recovering("QRadioTuner::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QRadioTuner_Service(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QRadioTuner) ServiceDefault() *QMediaService {
	defer qt.Recovering("QRadioTuner::service")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaServiceFromPointer(C.QRadioTuner_ServiceDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQRadioTuner_Unbind
func callbackQRadioTuner_Unbind(ptr unsafe.Pointer, object unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::unbind")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::unbind"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(object))
	} else {
		NewQRadioTunerFromPointer(ptr).UnbindDefault(core.NewQObjectFromPointer(object))
	}
}

func (ptr *QRadioTuner) ConnectUnbind(f func(object *core.QObject)) {
	defer qt.Recovering("connect QRadioTuner::unbind")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::unbind", f)
	}
}

func (ptr *QRadioTuner) DisconnectUnbind() {
	defer qt.Recovering("disconnect QRadioTuner::unbind")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::unbind")
	}
}

func (ptr *QRadioTuner) Unbind(object core.QObject_ITF) {
	defer qt.Recovering("QRadioTuner::unbind")

	if ptr.Pointer() != nil {
		C.QRadioTuner_Unbind(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

func (ptr *QRadioTuner) UnbindDefault(object core.QObject_ITF) {
	defer qt.Recovering("QRadioTuner::unbind")

	if ptr.Pointer() != nil {
		C.QRadioTuner_UnbindDefault(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

//export callbackQRadioTuner_TimerEvent
func callbackQRadioTuner_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRadioTunerFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRadioTuner) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QRadioTuner::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::timerEvent", f)
	}
}

func (ptr *QRadioTuner) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QRadioTuner::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::timerEvent")
	}
}

func (ptr *QRadioTuner) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRadioTuner::timerEvent")

	if ptr.Pointer() != nil {
		C.QRadioTuner_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRadioTuner) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRadioTuner::timerEvent")

	if ptr.Pointer() != nil {
		C.QRadioTuner_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRadioTuner_ChildEvent
func callbackQRadioTuner_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRadioTunerFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRadioTuner) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QRadioTuner::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::childEvent", f)
	}
}

func (ptr *QRadioTuner) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QRadioTuner::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::childEvent")
	}
}

func (ptr *QRadioTuner) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRadioTuner::childEvent")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRadioTuner) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRadioTuner::childEvent")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRadioTuner_ConnectNotify
func callbackQRadioTuner_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRadioTunerFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRadioTuner) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRadioTuner::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::connectNotify", f)
	}
}

func (ptr *QRadioTuner) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QRadioTuner::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::connectNotify")
	}
}

func (ptr *QRadioTuner) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioTuner::connectNotify")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRadioTuner) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioTuner::connectNotify")

	if ptr.Pointer() != nil {
		C.QRadioTuner_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRadioTuner_CustomEvent
func callbackQRadioTuner_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRadioTunerFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRadioTuner) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QRadioTuner::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::customEvent", f)
	}
}

func (ptr *QRadioTuner) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QRadioTuner::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::customEvent")
	}
}

func (ptr *QRadioTuner) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QRadioTuner::customEvent")

	if ptr.Pointer() != nil {
		C.QRadioTuner_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRadioTuner) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QRadioTuner::customEvent")

	if ptr.Pointer() != nil {
		C.QRadioTuner_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRadioTuner_DeleteLater
func callbackQRadioTuner_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQRadioTunerFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QRadioTuner) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QRadioTuner::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::deleteLater", f)
	}
}

func (ptr *QRadioTuner) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QRadioTuner::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::deleteLater")
	}
}

func (ptr *QRadioTuner) DeleteLater() {
	defer qt.Recovering("QRadioTuner::deleteLater")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QRadioTuner) DeleteLaterDefault() {
	defer qt.Recovering("QRadioTuner::deleteLater")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRadioTuner_DisconnectNotify
func callbackQRadioTuner_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTuner::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRadioTunerFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRadioTuner) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRadioTuner::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::disconnectNotify", f)
	}
}

func (ptr *QRadioTuner) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QRadioTuner::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::disconnectNotify")
	}
}

func (ptr *QRadioTuner) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioTuner::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRadioTuner) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioTuner::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRadioTuner_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRadioTuner_Event
func callbackQRadioTuner_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTuner::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioTunerFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QRadioTuner) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QRadioTuner::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::event", f)
	}
}

func (ptr *QRadioTuner) DisconnectEvent() {
	defer qt.Recovering("disconnect QRadioTuner::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::event")
	}
}

func (ptr *QRadioTuner) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioTuner::event")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QRadioTuner) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioTuner::event")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQRadioTuner_EventFilter
func callbackQRadioTuner_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTuner::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioTunerFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QRadioTuner) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QRadioTuner::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::eventFilter", f)
	}
}

func (ptr *QRadioTuner) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QRadioTuner::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::eventFilter")
	}
}

func (ptr *QRadioTuner) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioTuner::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRadioTuner) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioTuner::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRadioTuner_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRadioTuner_MetaObject
func callbackQRadioTuner_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QRadioTuner::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTuner::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRadioTunerFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRadioTuner) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QRadioTuner::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::metaObject", f)
	}
}

func (ptr *QRadioTuner) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QRadioTuner::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTuner::metaObject")
	}
}

func (ptr *QRadioTuner) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QRadioTuner::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRadioTuner_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRadioTuner) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QRadioTuner::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRadioTuner_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QRadioTunerControl struct {
	QMediaControl
}

type QRadioTunerControl_ITF interface {
	QMediaControl_ITF
	QRadioTunerControl_PTR() *QRadioTunerControl
}

func (p *QRadioTunerControl) QRadioTunerControl_PTR() *QRadioTunerControl {
	return p
}

func (p *QRadioTunerControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QRadioTunerControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQRadioTunerControl(ptr QRadioTunerControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRadioTunerControl_PTR().Pointer()
	}
	return nil
}

func NewQRadioTunerControlFromPointer(ptr unsafe.Pointer) *QRadioTunerControl {
	var n = new(QRadioTunerControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQRadioTunerControl_AntennaConnectedChanged
func callbackQRadioTunerControl_AntennaConnectedChanged(ptr unsafe.Pointer, connectionStatus C.char) {
	defer qt.Recovering("callback QRadioTunerControl::antennaConnectedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::antennaConnectedChanged"); signal != nil {
		signal.(func(bool))(int8(connectionStatus) != 0)
	}

}

func (ptr *QRadioTunerControl) ConnectAntennaConnectedChanged(f func(connectionStatus bool)) {
	defer qt.Recovering("connect QRadioTunerControl::antennaConnectedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectAntennaConnectedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::antennaConnectedChanged", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectAntennaConnectedChanged() {
	defer qt.Recovering("disconnect QRadioTunerControl::antennaConnectedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectAntennaConnectedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::antennaConnectedChanged")
	}
}

func (ptr *QRadioTunerControl) AntennaConnectedChanged(connectionStatus bool) {
	defer qt.Recovering("QRadioTunerControl::antennaConnectedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_AntennaConnectedChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(connectionStatus))))
	}
}

//export callbackQRadioTunerControl_Band
func callbackQRadioTunerControl_Band(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QRadioTunerControl::band")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::band"); signal != nil {
		return C.longlong(signal.(func() QRadioTuner__Band)())
	}

	return C.longlong(0)
}

func (ptr *QRadioTunerControl) ConnectBand(f func() QRadioTuner__Band) {
	defer qt.Recovering("connect QRadioTunerControl::band")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::band", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectBand() {
	defer qt.Recovering("disconnect QRadioTunerControl::band")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::band")
	}
}

func (ptr *QRadioTunerControl) Band() QRadioTuner__Band {
	defer qt.Recovering("QRadioTunerControl::band")

	if ptr.Pointer() != nil {
		return QRadioTuner__Band(C.QRadioTunerControl_Band(ptr.Pointer()))
	}
	return 0
}

//export callbackQRadioTunerControl_BandChanged
func callbackQRadioTunerControl_BandChanged(ptr unsafe.Pointer, band C.longlong) {
	defer qt.Recovering("callback QRadioTunerControl::bandChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::bandChanged"); signal != nil {
		signal.(func(QRadioTuner__Band))(QRadioTuner__Band(band))
	}

}

func (ptr *QRadioTunerControl) ConnectBandChanged(f func(band QRadioTuner__Band)) {
	defer qt.Recovering("connect QRadioTunerControl::bandChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectBandChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::bandChanged", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectBandChanged() {
	defer qt.Recovering("disconnect QRadioTunerControl::bandChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectBandChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::bandChanged")
	}
}

func (ptr *QRadioTunerControl) BandChanged(band QRadioTuner__Band) {
	defer qt.Recovering("QRadioTunerControl::bandChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_BandChanged(ptr.Pointer(), C.longlong(band))
	}
}

//export callbackQRadioTunerControl_CancelSearch
func callbackQRadioTunerControl_CancelSearch(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::cancelSearch")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::cancelSearch"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTunerControl) ConnectCancelSearch(f func()) {
	defer qt.Recovering("connect QRadioTunerControl::cancelSearch")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::cancelSearch", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectCancelSearch() {
	defer qt.Recovering("disconnect QRadioTunerControl::cancelSearch")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::cancelSearch")
	}
}

func (ptr *QRadioTunerControl) CancelSearch() {
	defer qt.Recovering("QRadioTunerControl::cancelSearch")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_CancelSearch(ptr.Pointer())
	}
}

//export callbackQRadioTunerControl_Error2
func callbackQRadioTunerControl_Error2(ptr unsafe.Pointer, error C.longlong) {
	defer qt.Recovering("callback QRadioTunerControl::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::error2"); signal != nil {
		signal.(func(QRadioTuner__Error))(QRadioTuner__Error(error))
	}

}

func (ptr *QRadioTunerControl) ConnectError2(f func(error QRadioTuner__Error)) {
	defer qt.Recovering("connect QRadioTunerControl::error")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectError2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::error2", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectError2() {
	defer qt.Recovering("disconnect QRadioTunerControl::error")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectError2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::error2")
	}
}

func (ptr *QRadioTunerControl) Error2(error QRadioTuner__Error) {
	defer qt.Recovering("QRadioTunerControl::error")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_Error2(ptr.Pointer(), C.longlong(error))
	}
}

//export callbackQRadioTunerControl_Error
func callbackQRadioTunerControl_Error(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QRadioTunerControl::error")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::error"); signal != nil {
		return C.longlong(signal.(func() QRadioTuner__Error)())
	}

	return C.longlong(0)
}

func (ptr *QRadioTunerControl) ConnectError(f func() QRadioTuner__Error) {
	defer qt.Recovering("connect QRadioTunerControl::error")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::error", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectError() {
	defer qt.Recovering("disconnect QRadioTunerControl::error")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::error")
	}
}

func (ptr *QRadioTunerControl) Error() QRadioTuner__Error {
	defer qt.Recovering("QRadioTunerControl::error")

	if ptr.Pointer() != nil {
		return QRadioTuner__Error(C.QRadioTunerControl_Error(ptr.Pointer()))
	}
	return 0
}

//export callbackQRadioTunerControl_ErrorString
func callbackQRadioTunerControl_ErrorString(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QRadioTunerControl::errorString")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::errorString"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString("")
}

func (ptr *QRadioTunerControl) ConnectErrorString(f func() string) {
	defer qt.Recovering("connect QRadioTunerControl::errorString")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::errorString", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectErrorString() {
	defer qt.Recovering("disconnect QRadioTunerControl::errorString")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::errorString")
	}
}

func (ptr *QRadioTunerControl) ErrorString() string {
	defer qt.Recovering("QRadioTunerControl::errorString")

	if ptr.Pointer() != nil {
		return C.GoString(C.QRadioTunerControl_ErrorString(ptr.Pointer()))
	}
	return ""
}

//export callbackQRadioTunerControl_Frequency
func callbackQRadioTunerControl_Frequency(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QRadioTunerControl::frequency")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::frequency"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QRadioTunerControl) ConnectFrequency(f func() int) {
	defer qt.Recovering("connect QRadioTunerControl::frequency")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::frequency", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectFrequency() {
	defer qt.Recovering("disconnect QRadioTunerControl::frequency")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::frequency")
	}
}

func (ptr *QRadioTunerControl) Frequency() int {
	defer qt.Recovering("QRadioTunerControl::frequency")

	if ptr.Pointer() != nil {
		return int(int32(C.QRadioTunerControl_Frequency(ptr.Pointer())))
	}
	return 0
}

//export callbackQRadioTunerControl_FrequencyChanged
func callbackQRadioTunerControl_FrequencyChanged(ptr unsafe.Pointer, frequency C.int) {
	defer qt.Recovering("callback QRadioTunerControl::frequencyChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::frequencyChanged"); signal != nil {
		signal.(func(int))(int(int32(frequency)))
	}

}

func (ptr *QRadioTunerControl) ConnectFrequencyChanged(f func(frequency int)) {
	defer qt.Recovering("connect QRadioTunerControl::frequencyChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectFrequencyChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::frequencyChanged", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectFrequencyChanged() {
	defer qt.Recovering("disconnect QRadioTunerControl::frequencyChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectFrequencyChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::frequencyChanged")
	}
}

func (ptr *QRadioTunerControl) FrequencyChanged(frequency int) {
	defer qt.Recovering("QRadioTunerControl::frequencyChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_FrequencyChanged(ptr.Pointer(), C.int(int32(frequency)))
	}
}

//export callbackQRadioTunerControl_FrequencyStep
func callbackQRadioTunerControl_FrequencyStep(ptr unsafe.Pointer, band C.longlong) C.int {
	defer qt.Recovering("callback QRadioTunerControl::frequencyStep")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::frequencyStep"); signal != nil {
		return C.int(int32(signal.(func(QRadioTuner__Band) int)(QRadioTuner__Band(band))))
	}

	return C.int(int32(0))
}

func (ptr *QRadioTunerControl) ConnectFrequencyStep(f func(band QRadioTuner__Band) int) {
	defer qt.Recovering("connect QRadioTunerControl::frequencyStep")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::frequencyStep", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectFrequencyStep(band QRadioTuner__Band) {
	defer qt.Recovering("disconnect QRadioTunerControl::frequencyStep")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::frequencyStep")
	}
}

func (ptr *QRadioTunerControl) FrequencyStep(band QRadioTuner__Band) int {
	defer qt.Recovering("QRadioTunerControl::frequencyStep")

	if ptr.Pointer() != nil {
		return int(int32(C.QRadioTunerControl_FrequencyStep(ptr.Pointer(), C.longlong(band))))
	}
	return 0
}

//export callbackQRadioTunerControl_IsAntennaConnected
func callbackQRadioTunerControl_IsAntennaConnected(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTunerControl::isAntennaConnected")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::isAntennaConnected"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioTunerControlFromPointer(ptr).IsAntennaConnectedDefault())))
}

func (ptr *QRadioTunerControl) ConnectIsAntennaConnected(f func() bool) {
	defer qt.Recovering("connect QRadioTunerControl::isAntennaConnected")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isAntennaConnected", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectIsAntennaConnected() {
	defer qt.Recovering("disconnect QRadioTunerControl::isAntennaConnected")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isAntennaConnected")
	}
}

func (ptr *QRadioTunerControl) IsAntennaConnected() bool {
	defer qt.Recovering("QRadioTunerControl::isAntennaConnected")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_IsAntennaConnected(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRadioTunerControl) IsAntennaConnectedDefault() bool {
	defer qt.Recovering("QRadioTunerControl::isAntennaConnected")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_IsAntennaConnectedDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQRadioTunerControl_IsBandSupported
func callbackQRadioTunerControl_IsBandSupported(ptr unsafe.Pointer, band C.longlong) C.char {
	defer qt.Recovering("callback QRadioTunerControl::isBandSupported")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::isBandSupported"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QRadioTuner__Band) bool)(QRadioTuner__Band(band)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QRadioTunerControl) ConnectIsBandSupported(f func(band QRadioTuner__Band) bool) {
	defer qt.Recovering("connect QRadioTunerControl::isBandSupported")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isBandSupported", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectIsBandSupported(band QRadioTuner__Band) {
	defer qt.Recovering("disconnect QRadioTunerControl::isBandSupported")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isBandSupported")
	}
}

func (ptr *QRadioTunerControl) IsBandSupported(band QRadioTuner__Band) bool {
	defer qt.Recovering("QRadioTunerControl::isBandSupported")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_IsBandSupported(ptr.Pointer(), C.longlong(band)) != 0
	}
	return false
}

//export callbackQRadioTunerControl_IsMuted
func callbackQRadioTunerControl_IsMuted(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTunerControl::isMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::isMuted"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QRadioTunerControl) ConnectIsMuted(f func() bool) {
	defer qt.Recovering("connect QRadioTunerControl::isMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isMuted", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectIsMuted() {
	defer qt.Recovering("disconnect QRadioTunerControl::isMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isMuted")
	}
}

func (ptr *QRadioTunerControl) IsMuted() bool {
	defer qt.Recovering("QRadioTunerControl::isMuted")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_IsMuted(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQRadioTunerControl_IsSearching
func callbackQRadioTunerControl_IsSearching(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTunerControl::isSearching")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::isSearching"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QRadioTunerControl) ConnectIsSearching(f func() bool) {
	defer qt.Recovering("connect QRadioTunerControl::isSearching")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isSearching", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectIsSearching() {
	defer qt.Recovering("disconnect QRadioTunerControl::isSearching")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isSearching")
	}
}

func (ptr *QRadioTunerControl) IsSearching() bool {
	defer qt.Recovering("QRadioTunerControl::isSearching")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_IsSearching(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQRadioTunerControl_IsStereo
func callbackQRadioTunerControl_IsStereo(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTunerControl::isStereo")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::isStereo"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QRadioTunerControl) ConnectIsStereo(f func() bool) {
	defer qt.Recovering("connect QRadioTunerControl::isStereo")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isStereo", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectIsStereo() {
	defer qt.Recovering("disconnect QRadioTunerControl::isStereo")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::isStereo")
	}
}

func (ptr *QRadioTunerControl) IsStereo() bool {
	defer qt.Recovering("QRadioTunerControl::isStereo")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_IsStereo(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQRadioTunerControl_MutedChanged
func callbackQRadioTunerControl_MutedChanged(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QRadioTunerControl::mutedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::mutedChanged"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QRadioTunerControl) ConnectMutedChanged(f func(muted bool)) {
	defer qt.Recovering("connect QRadioTunerControl::mutedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectMutedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::mutedChanged", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectMutedChanged() {
	defer qt.Recovering("disconnect QRadioTunerControl::mutedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectMutedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::mutedChanged")
	}
}

func (ptr *QRadioTunerControl) MutedChanged(muted bool) {
	defer qt.Recovering("QRadioTunerControl::mutedChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_MutedChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

//export callbackQRadioTunerControl_SearchAllStations
func callbackQRadioTunerControl_SearchAllStations(ptr unsafe.Pointer, searchMode C.longlong) {
	defer qt.Recovering("callback QRadioTunerControl::searchAllStations")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::searchAllStations"); signal != nil {
		signal.(func(QRadioTuner__SearchMode))(QRadioTuner__SearchMode(searchMode))
	}

}

func (ptr *QRadioTunerControl) ConnectSearchAllStations(f func(searchMode QRadioTuner__SearchMode)) {
	defer qt.Recovering("connect QRadioTunerControl::searchAllStations")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::searchAllStations", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSearchAllStations(searchMode QRadioTuner__SearchMode) {
	defer qt.Recovering("disconnect QRadioTunerControl::searchAllStations")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::searchAllStations")
	}
}

func (ptr *QRadioTunerControl) SearchAllStations(searchMode QRadioTuner__SearchMode) {
	defer qt.Recovering("QRadioTunerControl::searchAllStations")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SearchAllStations(ptr.Pointer(), C.longlong(searchMode))
	}
}

//export callbackQRadioTunerControl_SearchBackward
func callbackQRadioTunerControl_SearchBackward(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::searchBackward")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::searchBackward"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTunerControl) ConnectSearchBackward(f func()) {
	defer qt.Recovering("connect QRadioTunerControl::searchBackward")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::searchBackward", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSearchBackward() {
	defer qt.Recovering("disconnect QRadioTunerControl::searchBackward")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::searchBackward")
	}
}

func (ptr *QRadioTunerControl) SearchBackward() {
	defer qt.Recovering("QRadioTunerControl::searchBackward")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SearchBackward(ptr.Pointer())
	}
}

//export callbackQRadioTunerControl_SearchForward
func callbackQRadioTunerControl_SearchForward(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::searchForward")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::searchForward"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTunerControl) ConnectSearchForward(f func()) {
	defer qt.Recovering("connect QRadioTunerControl::searchForward")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::searchForward", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSearchForward() {
	defer qt.Recovering("disconnect QRadioTunerControl::searchForward")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::searchForward")
	}
}

func (ptr *QRadioTunerControl) SearchForward() {
	defer qt.Recovering("QRadioTunerControl::searchForward")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SearchForward(ptr.Pointer())
	}
}

//export callbackQRadioTunerControl_SearchingChanged
func callbackQRadioTunerControl_SearchingChanged(ptr unsafe.Pointer, searching C.char) {
	defer qt.Recovering("callback QRadioTunerControl::searchingChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::searchingChanged"); signal != nil {
		signal.(func(bool))(int8(searching) != 0)
	}

}

func (ptr *QRadioTunerControl) ConnectSearchingChanged(f func(searching bool)) {
	defer qt.Recovering("connect QRadioTunerControl::searchingChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectSearchingChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::searchingChanged", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSearchingChanged() {
	defer qt.Recovering("disconnect QRadioTunerControl::searchingChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectSearchingChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::searchingChanged")
	}
}

func (ptr *QRadioTunerControl) SearchingChanged(searching bool) {
	defer qt.Recovering("QRadioTunerControl::searchingChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SearchingChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(searching))))
	}
}

//export callbackQRadioTunerControl_SetBand
func callbackQRadioTunerControl_SetBand(ptr unsafe.Pointer, band C.longlong) {
	defer qt.Recovering("callback QRadioTunerControl::setBand")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::setBand"); signal != nil {
		signal.(func(QRadioTuner__Band))(QRadioTuner__Band(band))
	}

}

func (ptr *QRadioTunerControl) ConnectSetBand(f func(band QRadioTuner__Band)) {
	defer qt.Recovering("connect QRadioTunerControl::setBand")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setBand", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSetBand(band QRadioTuner__Band) {
	defer qt.Recovering("disconnect QRadioTunerControl::setBand")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setBand")
	}
}

func (ptr *QRadioTunerControl) SetBand(band QRadioTuner__Band) {
	defer qt.Recovering("QRadioTunerControl::setBand")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SetBand(ptr.Pointer(), C.longlong(band))
	}
}

//export callbackQRadioTunerControl_SetFrequency
func callbackQRadioTunerControl_SetFrequency(ptr unsafe.Pointer, frequency C.int) {
	defer qt.Recovering("callback QRadioTunerControl::setFrequency")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::setFrequency"); signal != nil {
		signal.(func(int))(int(int32(frequency)))
	}

}

func (ptr *QRadioTunerControl) ConnectSetFrequency(f func(frequency int)) {
	defer qt.Recovering("connect QRadioTunerControl::setFrequency")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setFrequency", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSetFrequency(frequency int) {
	defer qt.Recovering("disconnect QRadioTunerControl::setFrequency")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setFrequency")
	}
}

func (ptr *QRadioTunerControl) SetFrequency(frequency int) {
	defer qt.Recovering("QRadioTunerControl::setFrequency")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SetFrequency(ptr.Pointer(), C.int(int32(frequency)))
	}
}

//export callbackQRadioTunerControl_SetMuted
func callbackQRadioTunerControl_SetMuted(ptr unsafe.Pointer, muted C.char) {
	defer qt.Recovering("callback QRadioTunerControl::setMuted")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::setMuted"); signal != nil {
		signal.(func(bool))(int8(muted) != 0)
	}

}

func (ptr *QRadioTunerControl) ConnectSetMuted(f func(muted bool)) {
	defer qt.Recovering("connect QRadioTunerControl::setMuted")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setMuted", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSetMuted(muted bool) {
	defer qt.Recovering("disconnect QRadioTunerControl::setMuted")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setMuted")
	}
}

func (ptr *QRadioTunerControl) SetMuted(muted bool) {
	defer qt.Recovering("QRadioTunerControl::setMuted")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SetMuted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

//export callbackQRadioTunerControl_SetStereoMode
func callbackQRadioTunerControl_SetStereoMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QRadioTunerControl::setStereoMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::setStereoMode"); signal != nil {
		signal.(func(QRadioTuner__StereoMode))(QRadioTuner__StereoMode(mode))
	}

}

func (ptr *QRadioTunerControl) ConnectSetStereoMode(f func(mode QRadioTuner__StereoMode)) {
	defer qt.Recovering("connect QRadioTunerControl::setStereoMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setStereoMode", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSetStereoMode(mode QRadioTuner__StereoMode) {
	defer qt.Recovering("disconnect QRadioTunerControl::setStereoMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setStereoMode")
	}
}

func (ptr *QRadioTunerControl) SetStereoMode(mode QRadioTuner__StereoMode) {
	defer qt.Recovering("QRadioTunerControl::setStereoMode")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SetStereoMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQRadioTunerControl_SetVolume
func callbackQRadioTunerControl_SetVolume(ptr unsafe.Pointer, volume C.int) {
	defer qt.Recovering("callback QRadioTunerControl::setVolume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::setVolume"); signal != nil {
		signal.(func(int))(int(int32(volume)))
	}

}

func (ptr *QRadioTunerControl) ConnectSetVolume(f func(volume int)) {
	defer qt.Recovering("connect QRadioTunerControl::setVolume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setVolume", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSetVolume(volume int) {
	defer qt.Recovering("disconnect QRadioTunerControl::setVolume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::setVolume")
	}
}

func (ptr *QRadioTunerControl) SetVolume(volume int) {
	defer qt.Recovering("QRadioTunerControl::setVolume")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SetVolume(ptr.Pointer(), C.int(int32(volume)))
	}
}

//export callbackQRadioTunerControl_SignalStrength
func callbackQRadioTunerControl_SignalStrength(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QRadioTunerControl::signalStrength")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::signalStrength"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QRadioTunerControl) ConnectSignalStrength(f func() int) {
	defer qt.Recovering("connect QRadioTunerControl::signalStrength")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::signalStrength", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSignalStrength() {
	defer qt.Recovering("disconnect QRadioTunerControl::signalStrength")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::signalStrength")
	}
}

func (ptr *QRadioTunerControl) SignalStrength() int {
	defer qt.Recovering("QRadioTunerControl::signalStrength")

	if ptr.Pointer() != nil {
		return int(int32(C.QRadioTunerControl_SignalStrength(ptr.Pointer())))
	}
	return 0
}

//export callbackQRadioTunerControl_SignalStrengthChanged
func callbackQRadioTunerControl_SignalStrengthChanged(ptr unsafe.Pointer, strength C.int) {
	defer qt.Recovering("callback QRadioTunerControl::signalStrengthChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::signalStrengthChanged"); signal != nil {
		signal.(func(int))(int(int32(strength)))
	}

}

func (ptr *QRadioTunerControl) ConnectSignalStrengthChanged(f func(strength int)) {
	defer qt.Recovering("connect QRadioTunerControl::signalStrengthChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectSignalStrengthChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::signalStrengthChanged", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectSignalStrengthChanged() {
	defer qt.Recovering("disconnect QRadioTunerControl::signalStrengthChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectSignalStrengthChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::signalStrengthChanged")
	}
}

func (ptr *QRadioTunerControl) SignalStrengthChanged(strength int) {
	defer qt.Recovering("QRadioTunerControl::signalStrengthChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_SignalStrengthChanged(ptr.Pointer(), C.int(int32(strength)))
	}
}

//export callbackQRadioTunerControl_Start
func callbackQRadioTunerControl_Start(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::start")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTunerControl) ConnectStart(f func()) {
	defer qt.Recovering("connect QRadioTunerControl::start")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::start", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectStart() {
	defer qt.Recovering("disconnect QRadioTunerControl::start")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::start")
	}
}

func (ptr *QRadioTunerControl) Start() {
	defer qt.Recovering("QRadioTunerControl::start")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_Start(ptr.Pointer())
	}
}

//export callbackQRadioTunerControl_State
func callbackQRadioTunerControl_State(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QRadioTunerControl::state")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::state"); signal != nil {
		return C.longlong(signal.(func() QRadioTuner__State)())
	}

	return C.longlong(0)
}

func (ptr *QRadioTunerControl) ConnectState(f func() QRadioTuner__State) {
	defer qt.Recovering("connect QRadioTunerControl::state")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::state", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectState() {
	defer qt.Recovering("disconnect QRadioTunerControl::state")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::state")
	}
}

func (ptr *QRadioTunerControl) State() QRadioTuner__State {
	defer qt.Recovering("QRadioTunerControl::state")

	if ptr.Pointer() != nil {
		return QRadioTuner__State(C.QRadioTunerControl_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQRadioTunerControl_StateChanged
func callbackQRadioTunerControl_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	defer qt.Recovering("callback QRadioTunerControl::stateChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::stateChanged"); signal != nil {
		signal.(func(QRadioTuner__State))(QRadioTuner__State(state))
	}

}

func (ptr *QRadioTunerControl) ConnectStateChanged(f func(state QRadioTuner__State)) {
	defer qt.Recovering("connect QRadioTunerControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stateChanged", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectStateChanged() {
	defer qt.Recovering("disconnect QRadioTunerControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stateChanged")
	}
}

func (ptr *QRadioTunerControl) StateChanged(state QRadioTuner__State) {
	defer qt.Recovering("QRadioTunerControl::stateChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQRadioTunerControl_StationFound
func callbackQRadioTunerControl_StationFound(ptr unsafe.Pointer, frequency C.int, stationId *C.char) {
	defer qt.Recovering("callback QRadioTunerControl::stationFound")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::stationFound"); signal != nil {
		signal.(func(int, string))(int(int32(frequency)), C.GoString(stationId))
	}

}

func (ptr *QRadioTunerControl) ConnectStationFound(f func(frequency int, stationId string)) {
	defer qt.Recovering("connect QRadioTunerControl::stationFound")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectStationFound(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stationFound", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectStationFound() {
	defer qt.Recovering("disconnect QRadioTunerControl::stationFound")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectStationFound(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stationFound")
	}
}

func (ptr *QRadioTunerControl) StationFound(frequency int, stationId string) {
	defer qt.Recovering("QRadioTunerControl::stationFound")

	if ptr.Pointer() != nil {
		var stationIdC = C.CString(stationId)
		defer C.free(unsafe.Pointer(stationIdC))
		C.QRadioTunerControl_StationFound(ptr.Pointer(), C.int(int32(frequency)), stationIdC)
	}
}

//export callbackQRadioTunerControl_StereoMode
func callbackQRadioTunerControl_StereoMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QRadioTunerControl::stereoMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::stereoMode"); signal != nil {
		return C.longlong(signal.(func() QRadioTuner__StereoMode)())
	}

	return C.longlong(0)
}

func (ptr *QRadioTunerControl) ConnectStereoMode(f func() QRadioTuner__StereoMode) {
	defer qt.Recovering("connect QRadioTunerControl::stereoMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stereoMode", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectStereoMode() {
	defer qt.Recovering("disconnect QRadioTunerControl::stereoMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stereoMode")
	}
}

func (ptr *QRadioTunerControl) StereoMode() QRadioTuner__StereoMode {
	defer qt.Recovering("QRadioTunerControl::stereoMode")

	if ptr.Pointer() != nil {
		return QRadioTuner__StereoMode(C.QRadioTunerControl_StereoMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQRadioTunerControl_StereoStatusChanged
func callbackQRadioTunerControl_StereoStatusChanged(ptr unsafe.Pointer, stereo C.char) {
	defer qt.Recovering("callback QRadioTunerControl::stereoStatusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::stereoStatusChanged"); signal != nil {
		signal.(func(bool))(int8(stereo) != 0)
	}

}

func (ptr *QRadioTunerControl) ConnectStereoStatusChanged(f func(stereo bool)) {
	defer qt.Recovering("connect QRadioTunerControl::stereoStatusChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectStereoStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stereoStatusChanged", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectStereoStatusChanged() {
	defer qt.Recovering("disconnect QRadioTunerControl::stereoStatusChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectStereoStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stereoStatusChanged")
	}
}

func (ptr *QRadioTunerControl) StereoStatusChanged(stereo bool) {
	defer qt.Recovering("QRadioTunerControl::stereoStatusChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_StereoStatusChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(stereo))))
	}
}

//export callbackQRadioTunerControl_Stop
func callbackQRadioTunerControl_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRadioTunerControl) ConnectStop(f func()) {
	defer qt.Recovering("connect QRadioTunerControl::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stop", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectStop() {
	defer qt.Recovering("disconnect QRadioTunerControl::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::stop")
	}
}

func (ptr *QRadioTunerControl) Stop() {
	defer qt.Recovering("QRadioTunerControl::stop")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_Stop(ptr.Pointer())
	}
}

//export callbackQRadioTunerControl_Volume
func callbackQRadioTunerControl_Volume(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QRadioTunerControl::volume")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::volume"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QRadioTunerControl) ConnectVolume(f func() int) {
	defer qt.Recovering("connect QRadioTunerControl::volume")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::volume", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectVolume() {
	defer qt.Recovering("disconnect QRadioTunerControl::volume")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::volume")
	}
}

func (ptr *QRadioTunerControl) Volume() int {
	defer qt.Recovering("QRadioTunerControl::volume")

	if ptr.Pointer() != nil {
		return int(int32(C.QRadioTunerControl_Volume(ptr.Pointer())))
	}
	return 0
}

//export callbackQRadioTunerControl_VolumeChanged
func callbackQRadioTunerControl_VolumeChanged(ptr unsafe.Pointer, volume C.int) {
	defer qt.Recovering("callback QRadioTunerControl::volumeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::volumeChanged"); signal != nil {
		signal.(func(int))(int(int32(volume)))
	}

}

func (ptr *QRadioTunerControl) ConnectVolumeChanged(f func(volume int)) {
	defer qt.Recovering("connect QRadioTunerControl::volumeChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectVolumeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::volumeChanged", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectVolumeChanged() {
	defer qt.Recovering("disconnect QRadioTunerControl::volumeChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectVolumeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::volumeChanged")
	}
}

func (ptr *QRadioTunerControl) VolumeChanged(volume int) {
	defer qt.Recovering("QRadioTunerControl::volumeChanged")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_VolumeChanged(ptr.Pointer(), C.int(int32(volume)))
	}
}

func (ptr *QRadioTunerControl) DestroyQRadioTunerControl() {
	defer qt.Recovering("QRadioTunerControl::~QRadioTunerControl")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DestroyQRadioTunerControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRadioTunerControl_TimerEvent
func callbackQRadioTunerControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRadioTunerControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRadioTunerControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QRadioTunerControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::timerEvent", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QRadioTunerControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::timerEvent")
	}
}

func (ptr *QRadioTunerControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRadioTunerControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRadioTunerControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QRadioTunerControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRadioTunerControl_ChildEvent
func callbackQRadioTunerControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRadioTunerControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRadioTunerControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QRadioTunerControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::childEvent", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QRadioTunerControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::childEvent")
	}
}

func (ptr *QRadioTunerControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRadioTunerControl::childEvent")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRadioTunerControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QRadioTunerControl::childEvent")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRadioTunerControl_ConnectNotify
func callbackQRadioTunerControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRadioTunerControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRadioTunerControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRadioTunerControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::connectNotify", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QRadioTunerControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::connectNotify")
	}
}

func (ptr *QRadioTunerControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioTunerControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRadioTunerControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioTunerControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRadioTunerControl_CustomEvent
func callbackQRadioTunerControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRadioTunerControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRadioTunerControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QRadioTunerControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::customEvent", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QRadioTunerControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::customEvent")
	}
}

func (ptr *QRadioTunerControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QRadioTunerControl::customEvent")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRadioTunerControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QRadioTunerControl::customEvent")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRadioTunerControl_DeleteLater
func callbackQRadioTunerControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQRadioTunerControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QRadioTunerControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QRadioTunerControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::deleteLater", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QRadioTunerControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::deleteLater")
	}
}

func (ptr *QRadioTunerControl) DeleteLater() {
	defer qt.Recovering("QRadioTunerControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QRadioTunerControl) DeleteLaterDefault() {
	defer qt.Recovering("QRadioTunerControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRadioTunerControl_DisconnectNotify
func callbackQRadioTunerControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QRadioTunerControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRadioTunerControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRadioTunerControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QRadioTunerControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::disconnectNotify", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QRadioTunerControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::disconnectNotify")
	}
}

func (ptr *QRadioTunerControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioTunerControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRadioTunerControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QRadioTunerControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QRadioTunerControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRadioTunerControl_Event
func callbackQRadioTunerControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTunerControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioTunerControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QRadioTunerControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QRadioTunerControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::event", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QRadioTunerControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::event")
	}
}

func (ptr *QRadioTunerControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioTunerControl::event")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QRadioTunerControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioTunerControl::event")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQRadioTunerControl_EventFilter
func callbackQRadioTunerControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QRadioTunerControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRadioTunerControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QRadioTunerControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QRadioTunerControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::eventFilter", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QRadioTunerControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::eventFilter")
	}
}

func (ptr *QRadioTunerControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioTunerControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRadioTunerControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QRadioTunerControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QRadioTunerControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRadioTunerControl_MetaObject
func callbackQRadioTunerControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QRadioTunerControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRadioTunerControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRadioTunerControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRadioTunerControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QRadioTunerControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::metaObject", f)
	}
}

func (ptr *QRadioTunerControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QRadioTunerControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRadioTunerControl::metaObject")
	}
}

func (ptr *QRadioTunerControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QRadioTunerControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRadioTunerControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRadioTunerControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QRadioTunerControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRadioTunerControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QSound::Loop
type QSound__Loop int64

const (
	QSound__Infinite = QSound__Loop(-1)
)

type QSound struct {
	core.QObject
}

type QSound_ITF interface {
	core.QObject_ITF
	QSound_PTR() *QSound
}

func (p *QSound) QSound_PTR() *QSound {
	return p
}

func (p *QSound) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSound) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSound(ptr QSound_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSound_PTR().Pointer()
	}
	return nil
}

func NewQSoundFromPointer(ptr unsafe.Pointer) *QSound {
	var n = new(QSound)
	n.SetPointer(ptr)
	return n
}
func (ptr *QSound) SetLoops(number int) {
	defer qt.Recovering("QSound::setLoops")

	if ptr.Pointer() != nil {
		C.QSound_SetLoops(ptr.Pointer(), C.int(int32(number)))
	}
}

func NewQSound(filename string, parent core.QObject_ITF) *QSound {
	defer qt.Recovering("QSound::QSound")

	var filenameC = C.CString(filename)
	defer C.free(unsafe.Pointer(filenameC))
	var tmpValue = NewQSoundFromPointer(C.QSound_NewQSound(filenameC, core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QSound) FileName() string {
	defer qt.Recovering("QSound::fileName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QSound_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSound) IsFinished() bool {
	defer qt.Recovering("QSound::isFinished")

	if ptr.Pointer() != nil {
		return C.QSound_IsFinished(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSound) Loops() int {
	defer qt.Recovering("QSound::loops")

	if ptr.Pointer() != nil {
		return int(int32(C.QSound_Loops(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSound) LoopsRemaining() int {
	defer qt.Recovering("QSound::loopsRemaining")

	if ptr.Pointer() != nil {
		return int(int32(C.QSound_LoopsRemaining(ptr.Pointer())))
	}
	return 0
}

//export callbackQSound_Play2
func callbackQSound_Play2(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSound::play")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::play2"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSound) ConnectPlay2(f func()) {
	defer qt.Recovering("connect QSound::play")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::play2", f)
	}
}

func (ptr *QSound) DisconnectPlay2() {
	defer qt.Recovering("disconnect QSound::play")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::play2")
	}
}

func (ptr *QSound) Play2() {
	defer qt.Recovering("QSound::play")

	if ptr.Pointer() != nil {
		C.QSound_Play2(ptr.Pointer())
	}
}

func QSound_Play(filename string) {
	defer qt.Recovering("QSound::play")

	var filenameC = C.CString(filename)
	defer C.free(unsafe.Pointer(filenameC))
	C.QSound_QSound_Play(filenameC)
}

func (ptr *QSound) Play(filename string) {
	defer qt.Recovering("QSound::play")

	var filenameC = C.CString(filename)
	defer C.free(unsafe.Pointer(filenameC))
	C.QSound_QSound_Play(filenameC)
}

//export callbackQSound_Stop
func callbackQSound_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSound::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSound) ConnectStop(f func()) {
	defer qt.Recovering("connect QSound::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::stop", f)
	}
}

func (ptr *QSound) DisconnectStop() {
	defer qt.Recovering("disconnect QSound::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::stop")
	}
}

func (ptr *QSound) Stop() {
	defer qt.Recovering("QSound::stop")

	if ptr.Pointer() != nil {
		C.QSound_Stop(ptr.Pointer())
	}
}

func (ptr *QSound) DestroyQSound() {
	defer qt.Recovering("QSound::~QSound")

	if ptr.Pointer() != nil {
		C.QSound_DestroyQSound(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSound_TimerEvent
func callbackQSound_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QSound::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQSoundFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSound) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QSound::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::timerEvent", f)
	}
}

func (ptr *QSound) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QSound::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::timerEvent")
	}
}

func (ptr *QSound) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QSound::timerEvent")

	if ptr.Pointer() != nil {
		C.QSound_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QSound) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QSound::timerEvent")

	if ptr.Pointer() != nil {
		C.QSound_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQSound_ChildEvent
func callbackQSound_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QSound::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQSoundFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QSound) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QSound::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::childEvent", f)
	}
}

func (ptr *QSound) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QSound::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::childEvent")
	}
}

func (ptr *QSound) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QSound::childEvent")

	if ptr.Pointer() != nil {
		C.QSound_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QSound) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QSound::childEvent")

	if ptr.Pointer() != nil {
		C.QSound_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQSound_ConnectNotify
func callbackQSound_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QSound::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSoundFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSound) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QSound::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::connectNotify", f)
	}
}

func (ptr *QSound) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QSound::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::connectNotify")
	}
}

func (ptr *QSound) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSound::connectNotify")

	if ptr.Pointer() != nil {
		C.QSound_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSound) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSound::connectNotify")

	if ptr.Pointer() != nil {
		C.QSound_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSound_CustomEvent
func callbackQSound_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QSound::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQSoundFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QSound) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QSound::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::customEvent", f)
	}
}

func (ptr *QSound) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QSound::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::customEvent")
	}
}

func (ptr *QSound) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QSound::customEvent")

	if ptr.Pointer() != nil {
		C.QSound_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QSound) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QSound::customEvent")

	if ptr.Pointer() != nil {
		C.QSound_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQSound_DeleteLater
func callbackQSound_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSound::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSoundFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSound) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QSound::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::deleteLater", f)
	}
}

func (ptr *QSound) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QSound::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::deleteLater")
	}
}

func (ptr *QSound) DeleteLater() {
	defer qt.Recovering("QSound::deleteLater")

	if ptr.Pointer() != nil {
		C.QSound_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSound) DeleteLaterDefault() {
	defer qt.Recovering("QSound::deleteLater")

	if ptr.Pointer() != nil {
		C.QSound_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSound_DisconnectNotify
func callbackQSound_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QSound::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSoundFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSound) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QSound::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::disconnectNotify", f)
	}
}

func (ptr *QSound) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QSound::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::disconnectNotify")
	}
}

func (ptr *QSound) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSound::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QSound_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSound) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSound::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QSound_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSound_Event
func callbackQSound_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QSound::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSoundFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QSound) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QSound::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::event", f)
	}
}

func (ptr *QSound) DisconnectEvent() {
	defer qt.Recovering("disconnect QSound::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::event")
	}
}

func (ptr *QSound) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QSound::event")

	if ptr.Pointer() != nil {
		return C.QSound_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSound) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QSound::event")

	if ptr.Pointer() != nil {
		return C.QSound_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSound_EventFilter
func callbackQSound_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QSound::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSoundFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QSound) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QSound::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::eventFilter", f)
	}
}

func (ptr *QSound) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QSound::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::eventFilter")
	}
}

func (ptr *QSound) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QSound::eventFilter")

	if ptr.Pointer() != nil {
		return C.QSound_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSound) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QSound::eventFilter")

	if ptr.Pointer() != nil {
		return C.QSound_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSound_MetaObject
func callbackQSound_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QSound::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSound::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQSoundFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSound) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QSound::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::metaObject", f)
	}
}

func (ptr *QSound) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QSound::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSound::metaObject")
	}
}

func (ptr *QSound) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QSound::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSound_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSound) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QSound::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSound_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QSoundEffect::Loop
type QSoundEffect__Loop int64

const (
	QSoundEffect__Infinite = QSoundEffect__Loop(-2)
)

//QSoundEffect::Status
type QSoundEffect__Status int64

const (
	QSoundEffect__Null    = QSoundEffect__Status(0)
	QSoundEffect__Loading = QSoundEffect__Status(1)
	QSoundEffect__Ready   = QSoundEffect__Status(2)
	QSoundEffect__Error   = QSoundEffect__Status(3)
)

type QSoundEffect struct {
	core.QObject
}

type QSoundEffect_ITF interface {
	core.QObject_ITF
	QSoundEffect_PTR() *QSoundEffect
}

func (p *QSoundEffect) QSoundEffect_PTR() *QSoundEffect {
	return p
}

func (p *QSoundEffect) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSoundEffect) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSoundEffect(ptr QSoundEffect_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSoundEffect_PTR().Pointer()
	}
	return nil
}

func NewQSoundEffectFromPointer(ptr unsafe.Pointer) *QSoundEffect {
	var n = new(QSoundEffect)
	n.SetPointer(ptr)
	return n
}
func (ptr *QSoundEffect) IsLoaded() bool {
	defer qt.Recovering("QSoundEffect::isLoaded")

	if ptr.Pointer() != nil {
		return C.QSoundEffect_IsLoaded(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSoundEffect) LoopsRemaining() int {
	defer qt.Recovering("QSoundEffect::loopsRemaining")

	if ptr.Pointer() != nil {
		return int(int32(C.QSoundEffect_LoopsRemaining(ptr.Pointer())))
	}
	return 0
}

//export callbackQSoundEffect_Play
func callbackQSoundEffect_Play(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::play")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::play"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectPlay(f func()) {
	defer qt.Recovering("connect QSoundEffect::play")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::play", f)
	}
}

func (ptr *QSoundEffect) DisconnectPlay() {
	defer qt.Recovering("disconnect QSoundEffect::play")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::play")
	}
}

func (ptr *QSoundEffect) Play() {
	defer qt.Recovering("QSoundEffect::play")

	if ptr.Pointer() != nil {
		C.QSoundEffect_Play(ptr.Pointer())
	}
}

//export callbackQSoundEffect_Stop
func callbackQSoundEffect_Stop(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::stop")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectStop(f func()) {
	defer qt.Recovering("connect QSoundEffect::stop")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::stop", f)
	}
}

func (ptr *QSoundEffect) DisconnectStop() {
	defer qt.Recovering("disconnect QSoundEffect::stop")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::stop")
	}
}

func (ptr *QSoundEffect) Stop() {
	defer qt.Recovering("QSoundEffect::stop")

	if ptr.Pointer() != nil {
		C.QSoundEffect_Stop(ptr.Pointer())
	}
}

func QSoundEffect_SupportedMimeTypes() []string {
	defer qt.Recovering("QSoundEffect::supportedMimeTypes")

	return strings.Split(C.GoString(C.QSoundEffect_QSoundEffect_SupportedMimeTypes()), "|")
}

func (ptr *QSoundEffect) SupportedMimeTypes() []string {
	defer qt.Recovering("QSoundEffect::supportedMimeTypes")

	return strings.Split(C.GoString(C.QSoundEffect_QSoundEffect_SupportedMimeTypes()), "|")
}

func NewQSoundEffect(parent core.QObject_ITF) *QSoundEffect {
	defer qt.Recovering("QSoundEffect::QSoundEffect")

	var tmpValue = NewQSoundEffectFromPointer(C.QSoundEffect_NewQSoundEffect(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QSoundEffect) Category() string {
	defer qt.Recovering("QSoundEffect::category")

	if ptr.Pointer() != nil {
		return C.GoString(C.QSoundEffect_Category(ptr.Pointer()))
	}
	return ""
}

//export callbackQSoundEffect_CategoryChanged
func callbackQSoundEffect_CategoryChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::categoryChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::categoryChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectCategoryChanged(f func()) {
	defer qt.Recovering("connect QSoundEffect::categoryChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectCategoryChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::categoryChanged", f)
	}
}

func (ptr *QSoundEffect) DisconnectCategoryChanged() {
	defer qt.Recovering("disconnect QSoundEffect::categoryChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectCategoryChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::categoryChanged")
	}
}

func (ptr *QSoundEffect) CategoryChanged() {
	defer qt.Recovering("QSoundEffect::categoryChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_CategoryChanged(ptr.Pointer())
	}
}

func (ptr *QSoundEffect) IsMuted() bool {
	defer qt.Recovering("QSoundEffect::isMuted")

	if ptr.Pointer() != nil {
		return C.QSoundEffect_IsMuted(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSoundEffect) IsPlaying() bool {
	defer qt.Recovering("QSoundEffect::isPlaying")

	if ptr.Pointer() != nil {
		return C.QSoundEffect_IsPlaying(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQSoundEffect_LoadedChanged
func callbackQSoundEffect_LoadedChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::loadedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::loadedChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectLoadedChanged(f func()) {
	defer qt.Recovering("connect QSoundEffect::loadedChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectLoadedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::loadedChanged", f)
	}
}

func (ptr *QSoundEffect) DisconnectLoadedChanged() {
	defer qt.Recovering("disconnect QSoundEffect::loadedChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectLoadedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::loadedChanged")
	}
}

func (ptr *QSoundEffect) LoadedChanged() {
	defer qt.Recovering("QSoundEffect::loadedChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_LoadedChanged(ptr.Pointer())
	}
}

func (ptr *QSoundEffect) LoopCount() int {
	defer qt.Recovering("QSoundEffect::loopCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QSoundEffect_LoopCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQSoundEffect_LoopCountChanged
func callbackQSoundEffect_LoopCountChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::loopCountChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::loopCountChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectLoopCountChanged(f func()) {
	defer qt.Recovering("connect QSoundEffect::loopCountChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectLoopCountChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::loopCountChanged", f)
	}
}

func (ptr *QSoundEffect) DisconnectLoopCountChanged() {
	defer qt.Recovering("disconnect QSoundEffect::loopCountChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectLoopCountChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::loopCountChanged")
	}
}

func (ptr *QSoundEffect) LoopCountChanged() {
	defer qt.Recovering("QSoundEffect::loopCountChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_LoopCountChanged(ptr.Pointer())
	}
}

//export callbackQSoundEffect_LoopsRemainingChanged
func callbackQSoundEffect_LoopsRemainingChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::loopsRemainingChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::loopsRemainingChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectLoopsRemainingChanged(f func()) {
	defer qt.Recovering("connect QSoundEffect::loopsRemainingChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectLoopsRemainingChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::loopsRemainingChanged", f)
	}
}

func (ptr *QSoundEffect) DisconnectLoopsRemainingChanged() {
	defer qt.Recovering("disconnect QSoundEffect::loopsRemainingChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectLoopsRemainingChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::loopsRemainingChanged")
	}
}

func (ptr *QSoundEffect) LoopsRemainingChanged() {
	defer qt.Recovering("QSoundEffect::loopsRemainingChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_LoopsRemainingChanged(ptr.Pointer())
	}
}

//export callbackQSoundEffect_MutedChanged
func callbackQSoundEffect_MutedChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::mutedChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::mutedChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectMutedChanged(f func()) {
	defer qt.Recovering("connect QSoundEffect::mutedChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectMutedChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::mutedChanged", f)
	}
}

func (ptr *QSoundEffect) DisconnectMutedChanged() {
	defer qt.Recovering("disconnect QSoundEffect::mutedChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectMutedChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::mutedChanged")
	}
}

func (ptr *QSoundEffect) MutedChanged() {
	defer qt.Recovering("QSoundEffect::mutedChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_MutedChanged(ptr.Pointer())
	}
}

//export callbackQSoundEffect_PlayingChanged
func callbackQSoundEffect_PlayingChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::playingChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::playingChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectPlayingChanged(f func()) {
	defer qt.Recovering("connect QSoundEffect::playingChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectPlayingChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::playingChanged", f)
	}
}

func (ptr *QSoundEffect) DisconnectPlayingChanged() {
	defer qt.Recovering("disconnect QSoundEffect::playingChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectPlayingChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::playingChanged")
	}
}

func (ptr *QSoundEffect) PlayingChanged() {
	defer qt.Recovering("QSoundEffect::playingChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_PlayingChanged(ptr.Pointer())
	}
}

func (ptr *QSoundEffect) SetCategory(category string) {
	defer qt.Recovering("QSoundEffect::setCategory")

	if ptr.Pointer() != nil {
		var categoryC = C.CString(category)
		defer C.free(unsafe.Pointer(categoryC))
		C.QSoundEffect_SetCategory(ptr.Pointer(), categoryC)
	}
}

func (ptr *QSoundEffect) SetLoopCount(loopCount int) {
	defer qt.Recovering("QSoundEffect::setLoopCount")

	if ptr.Pointer() != nil {
		C.QSoundEffect_SetLoopCount(ptr.Pointer(), C.int(int32(loopCount)))
	}
}

func (ptr *QSoundEffect) SetMuted(muted bool) {
	defer qt.Recovering("QSoundEffect::setMuted")

	if ptr.Pointer() != nil {
		C.QSoundEffect_SetMuted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(muted))))
	}
}

func (ptr *QSoundEffect) SetSource(url core.QUrl_ITF) {
	defer qt.Recovering("QSoundEffect::setSource")

	if ptr.Pointer() != nil {
		C.QSoundEffect_SetSource(ptr.Pointer(), core.PointerFromQUrl(url))
	}
}

func (ptr *QSoundEffect) SetVolume(volume float64) {
	defer qt.Recovering("QSoundEffect::setVolume")

	if ptr.Pointer() != nil {
		C.QSoundEffect_SetVolume(ptr.Pointer(), C.double(volume))
	}
}

func (ptr *QSoundEffect) Source() *core.QUrl {
	defer qt.Recovering("QSoundEffect::source")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QSoundEffect_Source(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

//export callbackQSoundEffect_SourceChanged
func callbackQSoundEffect_SourceChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::sourceChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::sourceChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectSourceChanged(f func()) {
	defer qt.Recovering("connect QSoundEffect::sourceChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectSourceChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::sourceChanged", f)
	}
}

func (ptr *QSoundEffect) DisconnectSourceChanged() {
	defer qt.Recovering("disconnect QSoundEffect::sourceChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectSourceChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::sourceChanged")
	}
}

func (ptr *QSoundEffect) SourceChanged() {
	defer qt.Recovering("QSoundEffect::sourceChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_SourceChanged(ptr.Pointer())
	}
}

func (ptr *QSoundEffect) Status() QSoundEffect__Status {
	defer qt.Recovering("QSoundEffect::status")

	if ptr.Pointer() != nil {
		return QSoundEffect__Status(C.QSoundEffect_Status(ptr.Pointer()))
	}
	return 0
}

//export callbackQSoundEffect_StatusChanged
func callbackQSoundEffect_StatusChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::statusChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::statusChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectStatusChanged(f func()) {
	defer qt.Recovering("connect QSoundEffect::statusChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectStatusChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::statusChanged", f)
	}
}

func (ptr *QSoundEffect) DisconnectStatusChanged() {
	defer qt.Recovering("disconnect QSoundEffect::statusChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectStatusChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::statusChanged")
	}
}

func (ptr *QSoundEffect) StatusChanged() {
	defer qt.Recovering("QSoundEffect::statusChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_StatusChanged(ptr.Pointer())
	}
}

func (ptr *QSoundEffect) Volume() float64 {
	defer qt.Recovering("QSoundEffect::volume")

	if ptr.Pointer() != nil {
		return float64(C.QSoundEffect_Volume(ptr.Pointer()))
	}
	return 0
}

//export callbackQSoundEffect_VolumeChanged
func callbackQSoundEffect_VolumeChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::volumeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::volumeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSoundEffect) ConnectVolumeChanged(f func()) {
	defer qt.Recovering("connect QSoundEffect::volumeChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectVolumeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::volumeChanged", f)
	}
}

func (ptr *QSoundEffect) DisconnectVolumeChanged() {
	defer qt.Recovering("disconnect QSoundEffect::volumeChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectVolumeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::volumeChanged")
	}
}

func (ptr *QSoundEffect) VolumeChanged() {
	defer qt.Recovering("QSoundEffect::volumeChanged")

	if ptr.Pointer() != nil {
		C.QSoundEffect_VolumeChanged(ptr.Pointer())
	}
}

func (ptr *QSoundEffect) DestroyQSoundEffect() {
	defer qt.Recovering("QSoundEffect::~QSoundEffect")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DestroyQSoundEffect(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSoundEffect_TimerEvent
func callbackQSoundEffect_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQSoundEffectFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSoundEffect) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QSoundEffect::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::timerEvent", f)
	}
}

func (ptr *QSoundEffect) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QSoundEffect::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::timerEvent")
	}
}

func (ptr *QSoundEffect) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QSoundEffect::timerEvent")

	if ptr.Pointer() != nil {
		C.QSoundEffect_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QSoundEffect) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QSoundEffect::timerEvent")

	if ptr.Pointer() != nil {
		C.QSoundEffect_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQSoundEffect_ChildEvent
func callbackQSoundEffect_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQSoundEffectFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QSoundEffect) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QSoundEffect::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::childEvent", f)
	}
}

func (ptr *QSoundEffect) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QSoundEffect::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::childEvent")
	}
}

func (ptr *QSoundEffect) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QSoundEffect::childEvent")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QSoundEffect) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QSoundEffect::childEvent")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQSoundEffect_ConnectNotify
func callbackQSoundEffect_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSoundEffectFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSoundEffect) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QSoundEffect::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::connectNotify", f)
	}
}

func (ptr *QSoundEffect) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QSoundEffect::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::connectNotify")
	}
}

func (ptr *QSoundEffect) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSoundEffect::connectNotify")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSoundEffect) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSoundEffect::connectNotify")

	if ptr.Pointer() != nil {
		C.QSoundEffect_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSoundEffect_CustomEvent
func callbackQSoundEffect_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQSoundEffectFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QSoundEffect) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QSoundEffect::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::customEvent", f)
	}
}

func (ptr *QSoundEffect) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QSoundEffect::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::customEvent")
	}
}

func (ptr *QSoundEffect) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QSoundEffect::customEvent")

	if ptr.Pointer() != nil {
		C.QSoundEffect_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QSoundEffect) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QSoundEffect::customEvent")

	if ptr.Pointer() != nil {
		C.QSoundEffect_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQSoundEffect_DeleteLater
func callbackQSoundEffect_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSoundEffectFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSoundEffect) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QSoundEffect::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::deleteLater", f)
	}
}

func (ptr *QSoundEffect) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QSoundEffect::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::deleteLater")
	}
}

func (ptr *QSoundEffect) DeleteLater() {
	defer qt.Recovering("QSoundEffect::deleteLater")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSoundEffect) DeleteLaterDefault() {
	defer qt.Recovering("QSoundEffect::deleteLater")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSoundEffect_DisconnectNotify
func callbackQSoundEffect_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QSoundEffect::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSoundEffectFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSoundEffect) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QSoundEffect::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::disconnectNotify", f)
	}
}

func (ptr *QSoundEffect) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QSoundEffect::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::disconnectNotify")
	}
}

func (ptr *QSoundEffect) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSoundEffect::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSoundEffect) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QSoundEffect::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QSoundEffect_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSoundEffect_Event
func callbackQSoundEffect_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QSoundEffect::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSoundEffectFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QSoundEffect) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QSoundEffect::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::event", f)
	}
}

func (ptr *QSoundEffect) DisconnectEvent() {
	defer qt.Recovering("disconnect QSoundEffect::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::event")
	}
}

func (ptr *QSoundEffect) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QSoundEffect::event")

	if ptr.Pointer() != nil {
		return C.QSoundEffect_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSoundEffect) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QSoundEffect::event")

	if ptr.Pointer() != nil {
		return C.QSoundEffect_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSoundEffect_EventFilter
func callbackQSoundEffect_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QSoundEffect::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSoundEffectFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QSoundEffect) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QSoundEffect::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::eventFilter", f)
	}
}

func (ptr *QSoundEffect) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QSoundEffect::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::eventFilter")
	}
}

func (ptr *QSoundEffect) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QSoundEffect::eventFilter")

	if ptr.Pointer() != nil {
		return C.QSoundEffect_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSoundEffect) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QSoundEffect::eventFilter")

	if ptr.Pointer() != nil {
		return C.QSoundEffect_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSoundEffect_MetaObject
func callbackQSoundEffect_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QSoundEffect::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSoundEffect::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQSoundEffectFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSoundEffect) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QSoundEffect::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::metaObject", f)
	}
}

func (ptr *QSoundEffect) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QSoundEffect::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSoundEffect::metaObject")
	}
}

func (ptr *QSoundEffect) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QSoundEffect::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSoundEffect_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSoundEffect) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QSoundEffect::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSoundEffect_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QVideoDeviceSelectorControl struct {
	QMediaControl
}

type QVideoDeviceSelectorControl_ITF interface {
	QMediaControl_ITF
	QVideoDeviceSelectorControl_PTR() *QVideoDeviceSelectorControl
}

func (p *QVideoDeviceSelectorControl) QVideoDeviceSelectorControl_PTR() *QVideoDeviceSelectorControl {
	return p
}

func (p *QVideoDeviceSelectorControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QVideoDeviceSelectorControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQVideoDeviceSelectorControl(ptr QVideoDeviceSelectorControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoDeviceSelectorControl_PTR().Pointer()
	}
	return nil
}

func NewQVideoDeviceSelectorControlFromPointer(ptr unsafe.Pointer) *QVideoDeviceSelectorControl {
	var n = new(QVideoDeviceSelectorControl)
	n.SetPointer(ptr)
	return n
}
func NewQVideoDeviceSelectorControl(parent core.QObject_ITF) *QVideoDeviceSelectorControl {
	defer qt.Recovering("QVideoDeviceSelectorControl::QVideoDeviceSelectorControl")

	var tmpValue = NewQVideoDeviceSelectorControlFromPointer(C.QVideoDeviceSelectorControl_NewQVideoDeviceSelectorControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQVideoDeviceSelectorControl_DefaultDevice
func callbackQVideoDeviceSelectorControl_DefaultDevice(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::defaultDevice")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::defaultDevice"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoDeviceSelectorControl) ConnectDefaultDevice(f func() int) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::defaultDevice")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::defaultDevice", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectDefaultDevice() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::defaultDevice")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::defaultDevice")
	}
}

func (ptr *QVideoDeviceSelectorControl) DefaultDevice() int {
	defer qt.Recovering("QVideoDeviceSelectorControl::defaultDevice")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoDeviceSelectorControl_DefaultDevice(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoDeviceSelectorControl_DeviceCount
func callbackQVideoDeviceSelectorControl_DeviceCount(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::deviceCount")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::deviceCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoDeviceSelectorControl) ConnectDeviceCount(f func() int) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::deviceCount")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::deviceCount", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectDeviceCount() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::deviceCount")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::deviceCount")
	}
}

func (ptr *QVideoDeviceSelectorControl) DeviceCount() int {
	defer qt.Recovering("QVideoDeviceSelectorControl::deviceCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoDeviceSelectorControl_DeviceCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoDeviceSelectorControl_DeviceDescription
func callbackQVideoDeviceSelectorControl_DeviceDescription(ptr unsafe.Pointer, index C.int) *C.char {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::deviceDescription")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::deviceDescription"); signal != nil {
		return C.CString(signal.(func(int) string)(int(int32(index))))
	}

	return C.CString("")
}

func (ptr *QVideoDeviceSelectorControl) ConnectDeviceDescription(f func(index int) string) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::deviceDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::deviceDescription", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectDeviceDescription(index int) {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::deviceDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::deviceDescription")
	}
}

func (ptr *QVideoDeviceSelectorControl) DeviceDescription(index int) string {
	defer qt.Recovering("QVideoDeviceSelectorControl::deviceDescription")

	if ptr.Pointer() != nil {
		return C.GoString(C.QVideoDeviceSelectorControl_DeviceDescription(ptr.Pointer(), C.int(int32(index))))
	}
	return ""
}

//export callbackQVideoDeviceSelectorControl_DeviceName
func callbackQVideoDeviceSelectorControl_DeviceName(ptr unsafe.Pointer, index C.int) *C.char {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::deviceName")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::deviceName"); signal != nil {
		return C.CString(signal.(func(int) string)(int(int32(index))))
	}

	return C.CString("")
}

func (ptr *QVideoDeviceSelectorControl) ConnectDeviceName(f func(index int) string) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::deviceName")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::deviceName", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectDeviceName(index int) {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::deviceName")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::deviceName")
	}
}

func (ptr *QVideoDeviceSelectorControl) DeviceName(index int) string {
	defer qt.Recovering("QVideoDeviceSelectorControl::deviceName")

	if ptr.Pointer() != nil {
		return C.GoString(C.QVideoDeviceSelectorControl_DeviceName(ptr.Pointer(), C.int(int32(index))))
	}
	return ""
}

//export callbackQVideoDeviceSelectorControl_DevicesChanged
func callbackQVideoDeviceSelectorControl_DevicesChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::devicesChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::devicesChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QVideoDeviceSelectorControl) ConnectDevicesChanged(f func()) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::devicesChanged")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_ConnectDevicesChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::devicesChanged", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectDevicesChanged() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::devicesChanged")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_DisconnectDevicesChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::devicesChanged")
	}
}

func (ptr *QVideoDeviceSelectorControl) DevicesChanged() {
	defer qt.Recovering("QVideoDeviceSelectorControl::devicesChanged")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_DevicesChanged(ptr.Pointer())
	}
}

//export callbackQVideoDeviceSelectorControl_SelectedDevice
func callbackQVideoDeviceSelectorControl_SelectedDevice(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::selectedDevice")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::selectedDevice"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoDeviceSelectorControl) ConnectSelectedDevice(f func() int) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::selectedDevice")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::selectedDevice", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectSelectedDevice() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::selectedDevice")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::selectedDevice")
	}
}

func (ptr *QVideoDeviceSelectorControl) SelectedDevice() int {
	defer qt.Recovering("QVideoDeviceSelectorControl::selectedDevice")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoDeviceSelectorControl_SelectedDevice(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoDeviceSelectorControl_SelectedDeviceChanged2
func callbackQVideoDeviceSelectorControl_SelectedDeviceChanged2(ptr unsafe.Pointer, name *C.char) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::selectedDeviceChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::selectedDeviceChanged2"); signal != nil {
		signal.(func(string))(C.GoString(name))
	}

}

func (ptr *QVideoDeviceSelectorControl) ConnectSelectedDeviceChanged2(f func(name string)) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::selectedDeviceChanged")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_ConnectSelectedDeviceChanged2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::selectedDeviceChanged2", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectSelectedDeviceChanged2() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::selectedDeviceChanged")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_DisconnectSelectedDeviceChanged2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::selectedDeviceChanged2")
	}
}

func (ptr *QVideoDeviceSelectorControl) SelectedDeviceChanged2(name string) {
	defer qt.Recovering("QVideoDeviceSelectorControl::selectedDeviceChanged")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QVideoDeviceSelectorControl_SelectedDeviceChanged2(ptr.Pointer(), nameC)
	}
}

//export callbackQVideoDeviceSelectorControl_SelectedDeviceChanged
func callbackQVideoDeviceSelectorControl_SelectedDeviceChanged(ptr unsafe.Pointer, index C.int) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::selectedDeviceChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::selectedDeviceChanged"); signal != nil {
		signal.(func(int))(int(int32(index)))
	}

}

func (ptr *QVideoDeviceSelectorControl) ConnectSelectedDeviceChanged(f func(index int)) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::selectedDeviceChanged")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_ConnectSelectedDeviceChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::selectedDeviceChanged", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectSelectedDeviceChanged() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::selectedDeviceChanged")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_DisconnectSelectedDeviceChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::selectedDeviceChanged")
	}
}

func (ptr *QVideoDeviceSelectorControl) SelectedDeviceChanged(index int) {
	defer qt.Recovering("QVideoDeviceSelectorControl::selectedDeviceChanged")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_SelectedDeviceChanged(ptr.Pointer(), C.int(int32(index)))
	}
}

//export callbackQVideoDeviceSelectorControl_SetSelectedDevice
func callbackQVideoDeviceSelectorControl_SetSelectedDevice(ptr unsafe.Pointer, index C.int) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::setSelectedDevice")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::setSelectedDevice"); signal != nil {
		signal.(func(int))(int(int32(index)))
	}

}

func (ptr *QVideoDeviceSelectorControl) ConnectSetSelectedDevice(f func(index int)) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::setSelectedDevice")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::setSelectedDevice", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectSetSelectedDevice(index int) {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::setSelectedDevice")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::setSelectedDevice")
	}
}

func (ptr *QVideoDeviceSelectorControl) SetSelectedDevice(index int) {
	defer qt.Recovering("QVideoDeviceSelectorControl::setSelectedDevice")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_SetSelectedDevice(ptr.Pointer(), C.int(int32(index)))
	}
}

func (ptr *QVideoDeviceSelectorControl) DestroyQVideoDeviceSelectorControl() {
	defer qt.Recovering("QVideoDeviceSelectorControl::~QVideoDeviceSelectorControl")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_DestroyQVideoDeviceSelectorControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoDeviceSelectorControl_TimerEvent
func callbackQVideoDeviceSelectorControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQVideoDeviceSelectorControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QVideoDeviceSelectorControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::timerEvent", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::timerEvent")
	}
}

func (ptr *QVideoDeviceSelectorControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QVideoDeviceSelectorControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQVideoDeviceSelectorControl_ChildEvent
func callbackQVideoDeviceSelectorControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQVideoDeviceSelectorControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QVideoDeviceSelectorControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::childEvent", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::childEvent")
	}
}

func (ptr *QVideoDeviceSelectorControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QVideoDeviceSelectorControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQVideoDeviceSelectorControl_ConnectNotify
func callbackQVideoDeviceSelectorControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoDeviceSelectorControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoDeviceSelectorControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::connectNotify", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::connectNotify")
	}
}

func (ptr *QVideoDeviceSelectorControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoDeviceSelectorControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoDeviceSelectorControl_CustomEvent
func callbackQVideoDeviceSelectorControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoDeviceSelectorControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoDeviceSelectorControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::customEvent", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::customEvent")
	}
}

func (ptr *QVideoDeviceSelectorControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoDeviceSelectorControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoDeviceSelectorControl_DeleteLater
func callbackQVideoDeviceSelectorControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoDeviceSelectorControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QVideoDeviceSelectorControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::deleteLater", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::deleteLater")
	}
}

func (ptr *QVideoDeviceSelectorControl) DeleteLater() {
	defer qt.Recovering("QVideoDeviceSelectorControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QVideoDeviceSelectorControl) DeleteLaterDefault() {
	defer qt.Recovering("QVideoDeviceSelectorControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoDeviceSelectorControl_DisconnectNotify
func callbackQVideoDeviceSelectorControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoDeviceSelectorControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoDeviceSelectorControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::disconnectNotify", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::disconnectNotify")
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoDeviceSelectorControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoDeviceSelectorControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoDeviceSelectorControl_Event
func callbackQVideoDeviceSelectorControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoDeviceSelectorControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QVideoDeviceSelectorControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::event", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::event")
	}
}

func (ptr *QVideoDeviceSelectorControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoDeviceSelectorControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoDeviceSelectorControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QVideoDeviceSelectorControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoDeviceSelectorControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoDeviceSelectorControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQVideoDeviceSelectorControl_EventFilter
func callbackQVideoDeviceSelectorControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoDeviceSelectorControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QVideoDeviceSelectorControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::eventFilter", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::eventFilter")
	}
}

func (ptr *QVideoDeviceSelectorControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoDeviceSelectorControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoDeviceSelectorControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QVideoDeviceSelectorControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoDeviceSelectorControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoDeviceSelectorControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVideoDeviceSelectorControl_MetaObject
func callbackQVideoDeviceSelectorControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoDeviceSelectorControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoDeviceSelectorControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQVideoDeviceSelectorControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QVideoDeviceSelectorControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QVideoDeviceSelectorControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::metaObject", f)
	}
}

func (ptr *QVideoDeviceSelectorControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QVideoDeviceSelectorControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoDeviceSelectorControl::metaObject")
	}
}

func (ptr *QVideoDeviceSelectorControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QVideoDeviceSelectorControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoDeviceSelectorControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVideoDeviceSelectorControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QVideoDeviceSelectorControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoDeviceSelectorControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QVideoEncoderSettings struct {
	ptr unsafe.Pointer
}

type QVideoEncoderSettings_ITF interface {
	QVideoEncoderSettings_PTR() *QVideoEncoderSettings
}

func (p *QVideoEncoderSettings) QVideoEncoderSettings_PTR() *QVideoEncoderSettings {
	return p
}

func (p *QVideoEncoderSettings) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVideoEncoderSettings) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVideoEncoderSettings(ptr QVideoEncoderSettings_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoEncoderSettings_PTR().Pointer()
	}
	return nil
}

func NewQVideoEncoderSettingsFromPointer(ptr unsafe.Pointer) *QVideoEncoderSettings {
	var n = new(QVideoEncoderSettings)
	n.SetPointer(ptr)
	return n
}
func (ptr *QVideoEncoderSettings) SetFrameRate(rate float64) {
	defer qt.Recovering("QVideoEncoderSettings::setFrameRate")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettings_SetFrameRate(ptr.Pointer(), C.double(rate))
	}
}

func NewQVideoEncoderSettings() *QVideoEncoderSettings {
	defer qt.Recovering("QVideoEncoderSettings::QVideoEncoderSettings")

	var tmpValue = NewQVideoEncoderSettingsFromPointer(C.QVideoEncoderSettings_NewQVideoEncoderSettings())
	runtime.SetFinalizer(tmpValue, (*QVideoEncoderSettings).DestroyQVideoEncoderSettings)
	return tmpValue
}

func NewQVideoEncoderSettings2(other QVideoEncoderSettings_ITF) *QVideoEncoderSettings {
	defer qt.Recovering("QVideoEncoderSettings::QVideoEncoderSettings")

	var tmpValue = NewQVideoEncoderSettingsFromPointer(C.QVideoEncoderSettings_NewQVideoEncoderSettings2(PointerFromQVideoEncoderSettings(other)))
	runtime.SetFinalizer(tmpValue, (*QVideoEncoderSettings).DestroyQVideoEncoderSettings)
	return tmpValue
}

func (ptr *QVideoEncoderSettings) BitRate() int {
	defer qt.Recovering("QVideoEncoderSettings::bitRate")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoEncoderSettings_BitRate(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVideoEncoderSettings) Codec() string {
	defer qt.Recovering("QVideoEncoderSettings::codec")

	if ptr.Pointer() != nil {
		return C.GoString(C.QVideoEncoderSettings_Codec(ptr.Pointer()))
	}
	return ""
}

func (ptr *QVideoEncoderSettings) EncodingMode() QMultimedia__EncodingMode {
	defer qt.Recovering("QVideoEncoderSettings::encodingMode")

	if ptr.Pointer() != nil {
		return QMultimedia__EncodingMode(C.QVideoEncoderSettings_EncodingMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoEncoderSettings) EncodingOption(option string) *core.QVariant {
	defer qt.Recovering("QVideoEncoderSettings::encodingOption")

	if ptr.Pointer() != nil {
		var optionC = C.CString(option)
		defer C.free(unsafe.Pointer(optionC))
		var tmpValue = core.NewQVariantFromPointer(C.QVideoEncoderSettings_EncodingOption(ptr.Pointer(), optionC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoEncoderSettings) FrameRate() float64 {
	defer qt.Recovering("QVideoEncoderSettings::frameRate")

	if ptr.Pointer() != nil {
		return float64(C.QVideoEncoderSettings_FrameRate(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoEncoderSettings) IsNull() bool {
	defer qt.Recovering("QVideoEncoderSettings::isNull")

	if ptr.Pointer() != nil {
		return C.QVideoEncoderSettings_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoEncoderSettings) Quality() QMultimedia__EncodingQuality {
	defer qt.Recovering("QVideoEncoderSettings::quality")

	if ptr.Pointer() != nil {
		return QMultimedia__EncodingQuality(C.QVideoEncoderSettings_Quality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoEncoderSettings) Resolution() *core.QSize {
	defer qt.Recovering("QVideoEncoderSettings::resolution")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QVideoEncoderSettings_Resolution(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoEncoderSettings) SetBitRate(value int) {
	defer qt.Recovering("QVideoEncoderSettings::setBitRate")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettings_SetBitRate(ptr.Pointer(), C.int(int32(value)))
	}
}

func (ptr *QVideoEncoderSettings) SetCodec(codec string) {
	defer qt.Recovering("QVideoEncoderSettings::setCodec")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		C.QVideoEncoderSettings_SetCodec(ptr.Pointer(), codecC)
	}
}

func (ptr *QVideoEncoderSettings) SetEncodingMode(mode QMultimedia__EncodingMode) {
	defer qt.Recovering("QVideoEncoderSettings::setEncodingMode")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettings_SetEncodingMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QVideoEncoderSettings) SetEncodingOption(option string, value core.QVariant_ITF) {
	defer qt.Recovering("QVideoEncoderSettings::setEncodingOption")

	if ptr.Pointer() != nil {
		var optionC = C.CString(option)
		defer C.free(unsafe.Pointer(optionC))
		C.QVideoEncoderSettings_SetEncodingOption(ptr.Pointer(), optionC, core.PointerFromQVariant(value))
	}
}

func (ptr *QVideoEncoderSettings) SetQuality(quality QMultimedia__EncodingQuality) {
	defer qt.Recovering("QVideoEncoderSettings::setQuality")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettings_SetQuality(ptr.Pointer(), C.longlong(quality))
	}
}

func (ptr *QVideoEncoderSettings) SetResolution(resolution core.QSize_ITF) {
	defer qt.Recovering("QVideoEncoderSettings::setResolution")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettings_SetResolution(ptr.Pointer(), core.PointerFromQSize(resolution))
	}
}

func (ptr *QVideoEncoderSettings) SetResolution2(width int, height int) {
	defer qt.Recovering("QVideoEncoderSettings::setResolution")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettings_SetResolution2(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QVideoEncoderSettings) DestroyQVideoEncoderSettings() {
	defer qt.Recovering("QVideoEncoderSettings::~QVideoEncoderSettings")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettings_DestroyQVideoEncoderSettings(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QVideoEncoderSettingsControl struct {
	QMediaControl
}

type QVideoEncoderSettingsControl_ITF interface {
	QMediaControl_ITF
	QVideoEncoderSettingsControl_PTR() *QVideoEncoderSettingsControl
}

func (p *QVideoEncoderSettingsControl) QVideoEncoderSettingsControl_PTR() *QVideoEncoderSettingsControl {
	return p
}

func (p *QVideoEncoderSettingsControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QVideoEncoderSettingsControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQVideoEncoderSettingsControl(ptr QVideoEncoderSettingsControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoEncoderSettingsControl_PTR().Pointer()
	}
	return nil
}

func NewQVideoEncoderSettingsControlFromPointer(ptr unsafe.Pointer) *QVideoEncoderSettingsControl {
	var n = new(QVideoEncoderSettingsControl)
	n.SetPointer(ptr)
	return n
}

//export callbackQVideoEncoderSettingsControl_SetVideoSettings
func callbackQVideoEncoderSettingsControl_SetVideoSettings(ptr unsafe.Pointer, settings unsafe.Pointer) {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::setVideoSettings")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::setVideoSettings"); signal != nil {
		signal.(func(*QVideoEncoderSettings))(NewQVideoEncoderSettingsFromPointer(settings))
	}

}

func (ptr *QVideoEncoderSettingsControl) ConnectSetVideoSettings(f func(settings *QVideoEncoderSettings)) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::setVideoSettings")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::setVideoSettings", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectSetVideoSettings(settings QVideoEncoderSettings_ITF) {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::setVideoSettings")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::setVideoSettings")
	}
}

func (ptr *QVideoEncoderSettingsControl) SetVideoSettings(settings QVideoEncoderSettings_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::setVideoSettings")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_SetVideoSettings(ptr.Pointer(), PointerFromQVideoEncoderSettings(settings))
	}
}

//export callbackQVideoEncoderSettingsControl_SupportedVideoCodecs
func callbackQVideoEncoderSettingsControl_SupportedVideoCodecs(ptr unsafe.Pointer) *C.char {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::supportedVideoCodecs")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::supportedVideoCodecs"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QVideoEncoderSettingsControl) ConnectSupportedVideoCodecs(f func() []string) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::supportedVideoCodecs")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::supportedVideoCodecs", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectSupportedVideoCodecs() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::supportedVideoCodecs")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::supportedVideoCodecs")
	}
}

func (ptr *QVideoEncoderSettingsControl) SupportedVideoCodecs() []string {
	defer qt.Recovering("QVideoEncoderSettingsControl::supportedVideoCodecs")

	if ptr.Pointer() != nil {
		return strings.Split(C.GoString(C.QVideoEncoderSettingsControl_SupportedVideoCodecs(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQVideoEncoderSettingsControl_VideoCodecDescription
func callbackQVideoEncoderSettingsControl_VideoCodecDescription(ptr unsafe.Pointer, codec *C.char) *C.char {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::videoCodecDescription")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::videoCodecDescription"); signal != nil {
		return C.CString(signal.(func(string) string)(C.GoString(codec)))
	}

	return C.CString("")
}

func (ptr *QVideoEncoderSettingsControl) ConnectVideoCodecDescription(f func(codec string) string) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::videoCodecDescription")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::videoCodecDescription", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectVideoCodecDescription(codec string) {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::videoCodecDescription")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::videoCodecDescription")
	}
}

func (ptr *QVideoEncoderSettingsControl) VideoCodecDescription(codec string) string {
	defer qt.Recovering("QVideoEncoderSettingsControl::videoCodecDescription")

	if ptr.Pointer() != nil {
		var codecC = C.CString(codec)
		defer C.free(unsafe.Pointer(codecC))
		return C.GoString(C.QVideoEncoderSettingsControl_VideoCodecDescription(ptr.Pointer(), codecC))
	}
	return ""
}

//export callbackQVideoEncoderSettingsControl_VideoSettings
func callbackQVideoEncoderSettingsControl_VideoSettings(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::videoSettings")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::videoSettings"); signal != nil {
		return PointerFromQVideoEncoderSettings(signal.(func() *QVideoEncoderSettings)())
	}

	return PointerFromQVideoEncoderSettings(nil)
}

func (ptr *QVideoEncoderSettingsControl) ConnectVideoSettings(f func() *QVideoEncoderSettings) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::videoSettings")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::videoSettings", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectVideoSettings() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::videoSettings")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::videoSettings")
	}
}

func (ptr *QVideoEncoderSettingsControl) VideoSettings() *QVideoEncoderSettings {
	defer qt.Recovering("QVideoEncoderSettingsControl::videoSettings")

	if ptr.Pointer() != nil {
		var tmpValue = NewQVideoEncoderSettingsFromPointer(C.QVideoEncoderSettingsControl_VideoSettings(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVideoEncoderSettings).DestroyQVideoEncoderSettings)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoEncoderSettingsControl) DestroyQVideoEncoderSettingsControl() {
	defer qt.Recovering("QVideoEncoderSettingsControl::~QVideoEncoderSettingsControl")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_DestroyQVideoEncoderSettingsControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoEncoderSettingsControl_TimerEvent
func callbackQVideoEncoderSettingsControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQVideoEncoderSettingsControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QVideoEncoderSettingsControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::timerEvent", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::timerEvent")
	}
}

func (ptr *QVideoEncoderSettingsControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QVideoEncoderSettingsControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQVideoEncoderSettingsControl_ChildEvent
func callbackQVideoEncoderSettingsControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQVideoEncoderSettingsControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QVideoEncoderSettingsControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::childEvent", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::childEvent")
	}
}

func (ptr *QVideoEncoderSettingsControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QVideoEncoderSettingsControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQVideoEncoderSettingsControl_ConnectNotify
func callbackQVideoEncoderSettingsControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoEncoderSettingsControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoEncoderSettingsControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::connectNotify", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::connectNotify")
	}
}

func (ptr *QVideoEncoderSettingsControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoEncoderSettingsControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoEncoderSettingsControl_CustomEvent
func callbackQVideoEncoderSettingsControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoEncoderSettingsControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoEncoderSettingsControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::customEvent", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::customEvent")
	}
}

func (ptr *QVideoEncoderSettingsControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoEncoderSettingsControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoEncoderSettingsControl_DeleteLater
func callbackQVideoEncoderSettingsControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoEncoderSettingsControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QVideoEncoderSettingsControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::deleteLater", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::deleteLater")
	}
}

func (ptr *QVideoEncoderSettingsControl) DeleteLater() {
	defer qt.Recovering("QVideoEncoderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QVideoEncoderSettingsControl) DeleteLaterDefault() {
	defer qt.Recovering("QVideoEncoderSettingsControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoEncoderSettingsControl_DisconnectNotify
func callbackQVideoEncoderSettingsControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoEncoderSettingsControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoEncoderSettingsControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::disconnectNotify", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::disconnectNotify")
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoEncoderSettingsControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoEncoderSettingsControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoEncoderSettingsControl_Event
func callbackQVideoEncoderSettingsControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoEncoderSettingsControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QVideoEncoderSettingsControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::event", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::event")
	}
}

func (ptr *QVideoEncoderSettingsControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoEncoderSettingsControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoEncoderSettingsControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QVideoEncoderSettingsControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoEncoderSettingsControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoEncoderSettingsControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQVideoEncoderSettingsControl_EventFilter
func callbackQVideoEncoderSettingsControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoEncoderSettingsControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QVideoEncoderSettingsControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::eventFilter", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::eventFilter")
	}
}

func (ptr *QVideoEncoderSettingsControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoEncoderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoEncoderSettingsControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QVideoEncoderSettingsControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoEncoderSettingsControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoEncoderSettingsControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVideoEncoderSettingsControl_MetaObject
func callbackQVideoEncoderSettingsControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoEncoderSettingsControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoEncoderSettingsControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQVideoEncoderSettingsControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QVideoEncoderSettingsControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QVideoEncoderSettingsControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::metaObject", f)
	}
}

func (ptr *QVideoEncoderSettingsControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QVideoEncoderSettingsControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoEncoderSettingsControl::metaObject")
	}
}

func (ptr *QVideoEncoderSettingsControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QVideoEncoderSettingsControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoEncoderSettingsControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVideoEncoderSettingsControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QVideoEncoderSettingsControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoEncoderSettingsControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QVideoFilterRunnable::RunFlag
type QVideoFilterRunnable__RunFlag int64

const (
	QVideoFilterRunnable__LastInChain = QVideoFilterRunnable__RunFlag(0x01)
)

type QVideoFilterRunnable struct {
	ptr unsafe.Pointer
}

type QVideoFilterRunnable_ITF interface {
	QVideoFilterRunnable_PTR() *QVideoFilterRunnable
}

func (p *QVideoFilterRunnable) QVideoFilterRunnable_PTR() *QVideoFilterRunnable {
	return p
}

func (p *QVideoFilterRunnable) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVideoFilterRunnable) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVideoFilterRunnable(ptr QVideoFilterRunnable_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoFilterRunnable_PTR().Pointer()
	}
	return nil
}

func NewQVideoFilterRunnableFromPointer(ptr unsafe.Pointer) *QVideoFilterRunnable {
	var n = new(QVideoFilterRunnable)
	n.SetPointer(ptr)
	return n
}

func (ptr *QVideoFilterRunnable) DestroyQVideoFilterRunnable() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

//export callbackQVideoFilterRunnable_Run
func callbackQVideoFilterRunnable_Run(ptr unsafe.Pointer, input unsafe.Pointer, surfaceFormat unsafe.Pointer, flags C.longlong) unsafe.Pointer {
	defer qt.Recovering("callback QVideoFilterRunnable::run")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoFilterRunnable::run"); signal != nil {
		return PointerFromQVideoFrame(signal.(func(*QVideoFrame, *QVideoSurfaceFormat, QVideoFilterRunnable__RunFlag) *QVideoFrame)(NewQVideoFrameFromPointer(input), NewQVideoSurfaceFormatFromPointer(surfaceFormat), QVideoFilterRunnable__RunFlag(flags)))
	}

	return PointerFromQVideoFrame(nil)
}

func (ptr *QVideoFilterRunnable) ConnectRun(f func(input *QVideoFrame, surfaceFormat *QVideoSurfaceFormat, flags QVideoFilterRunnable__RunFlag) *QVideoFrame) {
	defer qt.Recovering("connect QVideoFilterRunnable::run")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoFilterRunnable::run", f)
	}
}

func (ptr *QVideoFilterRunnable) DisconnectRun(input QVideoFrame_ITF, surfaceFormat QVideoSurfaceFormat_ITF, flags QVideoFilterRunnable__RunFlag) {
	defer qt.Recovering("disconnect QVideoFilterRunnable::run")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoFilterRunnable::run")
	}
}

func (ptr *QVideoFilterRunnable) Run(input QVideoFrame_ITF, surfaceFormat QVideoSurfaceFormat_ITF, flags QVideoFilterRunnable__RunFlag) *QVideoFrame {
	defer qt.Recovering("QVideoFilterRunnable::run")

	if ptr.Pointer() != nil {
		var tmpValue = NewQVideoFrameFromPointer(C.QVideoFilterRunnable_Run(ptr.Pointer(), PointerFromQVideoFrame(input), PointerFromQVideoSurfaceFormat(surfaceFormat), C.longlong(flags)))
		runtime.SetFinalizer(tmpValue, (*QVideoFrame).DestroyQVideoFrame)
		return tmpValue
	}
	return nil
}

//QVideoFrame::FieldType
type QVideoFrame__FieldType int64

const (
	QVideoFrame__ProgressiveFrame = QVideoFrame__FieldType(0)
	QVideoFrame__TopField         = QVideoFrame__FieldType(1)
	QVideoFrame__BottomField      = QVideoFrame__FieldType(2)
	QVideoFrame__InterlacedFrame  = QVideoFrame__FieldType(3)
)

//QVideoFrame::PixelFormat
type QVideoFrame__PixelFormat int64

const (
	QVideoFrame__Format_Invalid                = QVideoFrame__PixelFormat(0)
	QVideoFrame__Format_ARGB32                 = QVideoFrame__PixelFormat(1)
	QVideoFrame__Format_ARGB32_Premultiplied   = QVideoFrame__PixelFormat(2)
	QVideoFrame__Format_RGB32                  = QVideoFrame__PixelFormat(3)
	QVideoFrame__Format_RGB24                  = QVideoFrame__PixelFormat(4)
	QVideoFrame__Format_RGB565                 = QVideoFrame__PixelFormat(5)
	QVideoFrame__Format_RGB555                 = QVideoFrame__PixelFormat(6)
	QVideoFrame__Format_ARGB8565_Premultiplied = QVideoFrame__PixelFormat(7)
	QVideoFrame__Format_BGRA32                 = QVideoFrame__PixelFormat(8)
	QVideoFrame__Format_BGRA32_Premultiplied   = QVideoFrame__PixelFormat(9)
	QVideoFrame__Format_BGR32                  = QVideoFrame__PixelFormat(10)
	QVideoFrame__Format_BGR24                  = QVideoFrame__PixelFormat(11)
	QVideoFrame__Format_BGR565                 = QVideoFrame__PixelFormat(12)
	QVideoFrame__Format_BGR555                 = QVideoFrame__PixelFormat(13)
	QVideoFrame__Format_BGRA5658_Premultiplied = QVideoFrame__PixelFormat(14)
	QVideoFrame__Format_AYUV444                = QVideoFrame__PixelFormat(15)
	QVideoFrame__Format_AYUV444_Premultiplied  = QVideoFrame__PixelFormat(16)
	QVideoFrame__Format_YUV444                 = QVideoFrame__PixelFormat(17)
	QVideoFrame__Format_YUV420P                = QVideoFrame__PixelFormat(18)
	QVideoFrame__Format_YV12                   = QVideoFrame__PixelFormat(19)
	QVideoFrame__Format_UYVY                   = QVideoFrame__PixelFormat(20)
	QVideoFrame__Format_YUYV                   = QVideoFrame__PixelFormat(21)
	QVideoFrame__Format_NV12                   = QVideoFrame__PixelFormat(22)
	QVideoFrame__Format_NV21                   = QVideoFrame__PixelFormat(23)
	QVideoFrame__Format_IMC1                   = QVideoFrame__PixelFormat(24)
	QVideoFrame__Format_IMC2                   = QVideoFrame__PixelFormat(25)
	QVideoFrame__Format_IMC3                   = QVideoFrame__PixelFormat(26)
	QVideoFrame__Format_IMC4                   = QVideoFrame__PixelFormat(27)
	QVideoFrame__Format_Y8                     = QVideoFrame__PixelFormat(28)
	QVideoFrame__Format_Y16                    = QVideoFrame__PixelFormat(29)
	QVideoFrame__Format_Jpeg                   = QVideoFrame__PixelFormat(30)
	QVideoFrame__Format_CameraRaw              = QVideoFrame__PixelFormat(31)
	QVideoFrame__Format_AdobeDng               = QVideoFrame__PixelFormat(32)
	QVideoFrame__Format_User                   = QVideoFrame__PixelFormat(1000)
)

type QVideoFrame struct {
	ptr unsafe.Pointer
}

type QVideoFrame_ITF interface {
	QVideoFrame_PTR() *QVideoFrame
}

func (p *QVideoFrame) QVideoFrame_PTR() *QVideoFrame {
	return p
}

func (p *QVideoFrame) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVideoFrame) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVideoFrame(ptr QVideoFrame_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoFrame_PTR().Pointer()
	}
	return nil
}

func NewQVideoFrameFromPointer(ptr unsafe.Pointer) *QVideoFrame {
	var n = new(QVideoFrame)
	n.SetPointer(ptr)
	return n
}
func NewQVideoFrame() *QVideoFrame {
	defer qt.Recovering("QVideoFrame::QVideoFrame")

	var tmpValue = NewQVideoFrameFromPointer(C.QVideoFrame_NewQVideoFrame())
	runtime.SetFinalizer(tmpValue, (*QVideoFrame).DestroyQVideoFrame)
	return tmpValue
}

func NewQVideoFrame2(buffer QAbstractVideoBuffer_ITF, size core.QSize_ITF, format QVideoFrame__PixelFormat) *QVideoFrame {
	defer qt.Recovering("QVideoFrame::QVideoFrame")

	var tmpValue = NewQVideoFrameFromPointer(C.QVideoFrame_NewQVideoFrame2(PointerFromQAbstractVideoBuffer(buffer), core.PointerFromQSize(size), C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QVideoFrame).DestroyQVideoFrame)
	return tmpValue
}

func NewQVideoFrame4(image gui.QImage_ITF) *QVideoFrame {
	defer qt.Recovering("QVideoFrame::QVideoFrame")

	var tmpValue = NewQVideoFrameFromPointer(C.QVideoFrame_NewQVideoFrame4(gui.PointerFromQImage(image)))
	runtime.SetFinalizer(tmpValue, (*QVideoFrame).DestroyQVideoFrame)
	return tmpValue
}

func NewQVideoFrame5(other QVideoFrame_ITF) *QVideoFrame {
	defer qt.Recovering("QVideoFrame::QVideoFrame")

	var tmpValue = NewQVideoFrameFromPointer(C.QVideoFrame_NewQVideoFrame5(PointerFromQVideoFrame(other)))
	runtime.SetFinalizer(tmpValue, (*QVideoFrame).DestroyQVideoFrame)
	return tmpValue
}

func NewQVideoFrame3(bytes int, size core.QSize_ITF, bytesPerLine int, format QVideoFrame__PixelFormat) *QVideoFrame {
	defer qt.Recovering("QVideoFrame::QVideoFrame")

	var tmpValue = NewQVideoFrameFromPointer(C.QVideoFrame_NewQVideoFrame3(C.int(int32(bytes)), core.PointerFromQSize(size), C.int(int32(bytesPerLine)), C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QVideoFrame).DestroyQVideoFrame)
	return tmpValue
}

func (ptr *QVideoFrame) Bits() string {
	defer qt.Recovering("QVideoFrame::bits")

	if ptr.Pointer() != nil {
		return C.GoString(C.QVideoFrame_Bits(ptr.Pointer()))
	}
	return ""
}

func (ptr *QVideoFrame) Bits2(plane int) string {
	defer qt.Recovering("QVideoFrame::bits")

	if ptr.Pointer() != nil {
		return C.GoString(C.QVideoFrame_Bits2(ptr.Pointer(), C.int(int32(plane))))
	}
	return ""
}

func (ptr *QVideoFrame) Bits3() string {
	defer qt.Recovering("QVideoFrame::bits")

	if ptr.Pointer() != nil {
		return C.GoString(C.QVideoFrame_Bits3(ptr.Pointer()))
	}
	return ""
}

func (ptr *QVideoFrame) Bits4(plane int) string {
	defer qt.Recovering("QVideoFrame::bits")

	if ptr.Pointer() != nil {
		return C.GoString(C.QVideoFrame_Bits4(ptr.Pointer(), C.int(int32(plane))))
	}
	return ""
}

func (ptr *QVideoFrame) BytesPerLine() int {
	defer qt.Recovering("QVideoFrame::bytesPerLine")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoFrame_BytesPerLine(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVideoFrame) BytesPerLine2(plane int) int {
	defer qt.Recovering("QVideoFrame::bytesPerLine")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoFrame_BytesPerLine2(ptr.Pointer(), C.int(int32(plane)))))
	}
	return 0
}

func (ptr *QVideoFrame) EndTime() int64 {
	defer qt.Recovering("QVideoFrame::endTime")

	if ptr.Pointer() != nil {
		return int64(C.QVideoFrame_EndTime(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoFrame) FieldType() QVideoFrame__FieldType {
	defer qt.Recovering("QVideoFrame::fieldType")

	if ptr.Pointer() != nil {
		return QVideoFrame__FieldType(C.QVideoFrame_FieldType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoFrame) Handle() *core.QVariant {
	defer qt.Recovering("QVideoFrame::handle")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QVideoFrame_Handle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoFrame) HandleType() QAbstractVideoBuffer__HandleType {
	defer qt.Recovering("QVideoFrame::handleType")

	if ptr.Pointer() != nil {
		return QAbstractVideoBuffer__HandleType(C.QVideoFrame_HandleType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoFrame) Height() int {
	defer qt.Recovering("QVideoFrame::height")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoFrame_Height(ptr.Pointer())))
	}
	return 0
}

func QVideoFrame_ImageFormatFromPixelFormat(format QVideoFrame__PixelFormat) gui.QImage__Format {
	defer qt.Recovering("QVideoFrame::imageFormatFromPixelFormat")

	return gui.QImage__Format(C.QVideoFrame_QVideoFrame_ImageFormatFromPixelFormat(C.longlong(format)))
}

func (ptr *QVideoFrame) ImageFormatFromPixelFormat(format QVideoFrame__PixelFormat) gui.QImage__Format {
	defer qt.Recovering("QVideoFrame::imageFormatFromPixelFormat")

	return gui.QImage__Format(C.QVideoFrame_QVideoFrame_ImageFormatFromPixelFormat(C.longlong(format)))
}

func (ptr *QVideoFrame) IsMapped() bool {
	defer qt.Recovering("QVideoFrame::isMapped")

	if ptr.Pointer() != nil {
		return C.QVideoFrame_IsMapped(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoFrame) IsReadable() bool {
	defer qt.Recovering("QVideoFrame::isReadable")

	if ptr.Pointer() != nil {
		return C.QVideoFrame_IsReadable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoFrame) IsValid() bool {
	defer qt.Recovering("QVideoFrame::isValid")

	if ptr.Pointer() != nil {
		return C.QVideoFrame_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoFrame) IsWritable() bool {
	defer qt.Recovering("QVideoFrame::isWritable")

	if ptr.Pointer() != nil {
		return C.QVideoFrame_IsWritable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoFrame) Map(mode QAbstractVideoBuffer__MapMode) bool {
	defer qt.Recovering("QVideoFrame::map")

	if ptr.Pointer() != nil {
		return C.QVideoFrame_Map(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QVideoFrame) MapMode() QAbstractVideoBuffer__MapMode {
	defer qt.Recovering("QVideoFrame::mapMode")

	if ptr.Pointer() != nil {
		return QAbstractVideoBuffer__MapMode(C.QVideoFrame_MapMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoFrame) MappedBytes() int {
	defer qt.Recovering("QVideoFrame::mappedBytes")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoFrame_MappedBytes(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVideoFrame) MetaData(key string) *core.QVariant {
	defer qt.Recovering("QVideoFrame::metaData")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = core.NewQVariantFromPointer(C.QVideoFrame_MetaData(ptr.Pointer(), keyC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoFrame) PixelFormat() QVideoFrame__PixelFormat {
	defer qt.Recovering("QVideoFrame::pixelFormat")

	if ptr.Pointer() != nil {
		return QVideoFrame__PixelFormat(C.QVideoFrame_PixelFormat(ptr.Pointer()))
	}
	return 0
}

func QVideoFrame_PixelFormatFromImageFormat(format gui.QImage__Format) QVideoFrame__PixelFormat {
	defer qt.Recovering("QVideoFrame::pixelFormatFromImageFormat")

	return QVideoFrame__PixelFormat(C.QVideoFrame_QVideoFrame_PixelFormatFromImageFormat(C.longlong(format)))
}

func (ptr *QVideoFrame) PixelFormatFromImageFormat(format gui.QImage__Format) QVideoFrame__PixelFormat {
	defer qt.Recovering("QVideoFrame::pixelFormatFromImageFormat")

	return QVideoFrame__PixelFormat(C.QVideoFrame_QVideoFrame_PixelFormatFromImageFormat(C.longlong(format)))
}

func (ptr *QVideoFrame) PlaneCount() int {
	defer qt.Recovering("QVideoFrame::planeCount")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoFrame_PlaneCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVideoFrame) SetEndTime(time int64) {
	defer qt.Recovering("QVideoFrame::setEndTime")

	if ptr.Pointer() != nil {
		C.QVideoFrame_SetEndTime(ptr.Pointer(), C.longlong(time))
	}
}

func (ptr *QVideoFrame) SetFieldType(field QVideoFrame__FieldType) {
	defer qt.Recovering("QVideoFrame::setFieldType")

	if ptr.Pointer() != nil {
		C.QVideoFrame_SetFieldType(ptr.Pointer(), C.longlong(field))
	}
}

func (ptr *QVideoFrame) SetMetaData(key string, value core.QVariant_ITF) {
	defer qt.Recovering("QVideoFrame::setMetaData")

	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QVideoFrame_SetMetaData(ptr.Pointer(), keyC, core.PointerFromQVariant(value))
	}
}

func (ptr *QVideoFrame) SetStartTime(time int64) {
	defer qt.Recovering("QVideoFrame::setStartTime")

	if ptr.Pointer() != nil {
		C.QVideoFrame_SetStartTime(ptr.Pointer(), C.longlong(time))
	}
}

func (ptr *QVideoFrame) Size() *core.QSize {
	defer qt.Recovering("QVideoFrame::size")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QVideoFrame_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoFrame) StartTime() int64 {
	defer qt.Recovering("QVideoFrame::startTime")

	if ptr.Pointer() != nil {
		return int64(C.QVideoFrame_StartTime(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoFrame) Unmap() {
	defer qt.Recovering("QVideoFrame::unmap")

	if ptr.Pointer() != nil {
		C.QVideoFrame_Unmap(ptr.Pointer())
	}
}

func (ptr *QVideoFrame) Width() int {
	defer qt.Recovering("QVideoFrame::width")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoFrame_Width(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVideoFrame) DestroyQVideoFrame() {
	defer qt.Recovering("QVideoFrame::~QVideoFrame")

	if ptr.Pointer() != nil {
		C.QVideoFrame_DestroyQVideoFrame(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QVideoProbe struct {
	core.QObject
}

type QVideoProbe_ITF interface {
	core.QObject_ITF
	QVideoProbe_PTR() *QVideoProbe
}

func (p *QVideoProbe) QVideoProbe_PTR() *QVideoProbe {
	return p
}

func (p *QVideoProbe) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QVideoProbe) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQVideoProbe(ptr QVideoProbe_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoProbe_PTR().Pointer()
	}
	return nil
}

func NewQVideoProbeFromPointer(ptr unsafe.Pointer) *QVideoProbe {
	var n = new(QVideoProbe)
	n.SetPointer(ptr)
	return n
}
func NewQVideoProbe(parent core.QObject_ITF) *QVideoProbe {
	defer qt.Recovering("QVideoProbe::QVideoProbe")

	var tmpValue = NewQVideoProbeFromPointer(C.QVideoProbe_NewQVideoProbe(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQVideoProbe_Flush
func callbackQVideoProbe_Flush(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoProbe::flush")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::flush"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QVideoProbe) ConnectFlush(f func()) {
	defer qt.Recovering("connect QVideoProbe::flush")

	if ptr.Pointer() != nil {
		C.QVideoProbe_ConnectFlush(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::flush", f)
	}
}

func (ptr *QVideoProbe) DisconnectFlush() {
	defer qt.Recovering("disconnect QVideoProbe::flush")

	if ptr.Pointer() != nil {
		C.QVideoProbe_DisconnectFlush(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::flush")
	}
}

func (ptr *QVideoProbe) Flush() {
	defer qt.Recovering("QVideoProbe::flush")

	if ptr.Pointer() != nil {
		C.QVideoProbe_Flush(ptr.Pointer())
	}
}

func (ptr *QVideoProbe) IsActive() bool {
	defer qt.Recovering("QVideoProbe::isActive")

	if ptr.Pointer() != nil {
		return C.QVideoProbe_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoProbe) SetSource(source QMediaObject_ITF) bool {
	defer qt.Recovering("QVideoProbe::setSource")

	if ptr.Pointer() != nil {
		return C.QVideoProbe_SetSource(ptr.Pointer(), PointerFromQMediaObject(source)) != 0
	}
	return false
}

func (ptr *QVideoProbe) SetSource2(mediaRecorder QMediaRecorder_ITF) bool {
	defer qt.Recovering("QVideoProbe::setSource")

	if ptr.Pointer() != nil {
		return C.QVideoProbe_SetSource2(ptr.Pointer(), PointerFromQMediaRecorder(mediaRecorder)) != 0
	}
	return false
}

//export callbackQVideoProbe_VideoFrameProbed
func callbackQVideoProbe_VideoFrameProbed(ptr unsafe.Pointer, frame unsafe.Pointer) {
	defer qt.Recovering("callback QVideoProbe::videoFrameProbed")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::videoFrameProbed"); signal != nil {
		signal.(func(*QVideoFrame))(NewQVideoFrameFromPointer(frame))
	}

}

func (ptr *QVideoProbe) ConnectVideoFrameProbed(f func(frame *QVideoFrame)) {
	defer qt.Recovering("connect QVideoProbe::videoFrameProbed")

	if ptr.Pointer() != nil {
		C.QVideoProbe_ConnectVideoFrameProbed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::videoFrameProbed", f)
	}
}

func (ptr *QVideoProbe) DisconnectVideoFrameProbed() {
	defer qt.Recovering("disconnect QVideoProbe::videoFrameProbed")

	if ptr.Pointer() != nil {
		C.QVideoProbe_DisconnectVideoFrameProbed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::videoFrameProbed")
	}
}

func (ptr *QVideoProbe) VideoFrameProbed(frame QVideoFrame_ITF) {
	defer qt.Recovering("QVideoProbe::videoFrameProbed")

	if ptr.Pointer() != nil {
		C.QVideoProbe_VideoFrameProbed(ptr.Pointer(), PointerFromQVideoFrame(frame))
	}
}

func (ptr *QVideoProbe) DestroyQVideoProbe() {
	defer qt.Recovering("QVideoProbe::~QVideoProbe")

	if ptr.Pointer() != nil {
		C.QVideoProbe_DestroyQVideoProbe(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoProbe_TimerEvent
func callbackQVideoProbe_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoProbe::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQVideoProbeFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QVideoProbe) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QVideoProbe::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::timerEvent", f)
	}
}

func (ptr *QVideoProbe) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QVideoProbe::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::timerEvent")
	}
}

func (ptr *QVideoProbe) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoProbe::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoProbe_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QVideoProbe) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoProbe::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoProbe_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQVideoProbe_ChildEvent
func callbackQVideoProbe_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoProbe::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQVideoProbeFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QVideoProbe) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QVideoProbe::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::childEvent", f)
	}
}

func (ptr *QVideoProbe) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QVideoProbe::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::childEvent")
	}
}

func (ptr *QVideoProbe) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoProbe::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoProbe_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QVideoProbe) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoProbe::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoProbe_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQVideoProbe_ConnectNotify
func callbackQVideoProbe_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoProbe::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoProbeFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoProbe) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoProbe::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::connectNotify", f)
	}
}

func (ptr *QVideoProbe) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QVideoProbe::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::connectNotify")
	}
}

func (ptr *QVideoProbe) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoProbe::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoProbe_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoProbe) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoProbe::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoProbe_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoProbe_CustomEvent
func callbackQVideoProbe_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoProbe::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoProbeFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoProbe) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoProbe::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::customEvent", f)
	}
}

func (ptr *QVideoProbe) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QVideoProbe::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::customEvent")
	}
}

func (ptr *QVideoProbe) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoProbe::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoProbe_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoProbe) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoProbe::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoProbe_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoProbe_DeleteLater
func callbackQVideoProbe_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoProbe::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoProbeFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QVideoProbe) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QVideoProbe::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::deleteLater", f)
	}
}

func (ptr *QVideoProbe) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QVideoProbe::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::deleteLater")
	}
}

func (ptr *QVideoProbe) DeleteLater() {
	defer qt.Recovering("QVideoProbe::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoProbe_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QVideoProbe) DeleteLaterDefault() {
	defer qt.Recovering("QVideoProbe::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoProbe_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoProbe_DisconnectNotify
func callbackQVideoProbe_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoProbe::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoProbeFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoProbe) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoProbe::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::disconnectNotify", f)
	}
}

func (ptr *QVideoProbe) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QVideoProbe::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::disconnectNotify")
	}
}

func (ptr *QVideoProbe) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoProbe::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoProbe_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoProbe) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoProbe::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoProbe_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoProbe_Event
func callbackQVideoProbe_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoProbe::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoProbeFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QVideoProbe) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoProbe::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::event", f)
	}
}

func (ptr *QVideoProbe) DisconnectEvent() {
	defer qt.Recovering("disconnect QVideoProbe::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::event")
	}
}

func (ptr *QVideoProbe) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoProbe::event")

	if ptr.Pointer() != nil {
		return C.QVideoProbe_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QVideoProbe) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoProbe::event")

	if ptr.Pointer() != nil {
		return C.QVideoProbe_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQVideoProbe_EventFilter
func callbackQVideoProbe_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoProbe::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoProbeFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QVideoProbe) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoProbe::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::eventFilter", f)
	}
}

func (ptr *QVideoProbe) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QVideoProbe::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::eventFilter")
	}
}

func (ptr *QVideoProbe) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoProbe::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoProbe_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QVideoProbe) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoProbe::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoProbe_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVideoProbe_MetaObject
func callbackQVideoProbe_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoProbe::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoProbe::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQVideoProbeFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QVideoProbe) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QVideoProbe::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::metaObject", f)
	}
}

func (ptr *QVideoProbe) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QVideoProbe::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoProbe::metaObject")
	}
}

func (ptr *QVideoProbe) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QVideoProbe::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoProbe_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVideoProbe) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QVideoProbe::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoProbe_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QVideoRendererControl struct {
	QMediaControl
}

type QVideoRendererControl_ITF interface {
	QMediaControl_ITF
	QVideoRendererControl_PTR() *QVideoRendererControl
}

func (p *QVideoRendererControl) QVideoRendererControl_PTR() *QVideoRendererControl {
	return p
}

func (p *QVideoRendererControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QVideoRendererControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQVideoRendererControl(ptr QVideoRendererControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoRendererControl_PTR().Pointer()
	}
	return nil
}

func NewQVideoRendererControlFromPointer(ptr unsafe.Pointer) *QVideoRendererControl {
	var n = new(QVideoRendererControl)
	n.SetPointer(ptr)
	return n
}
func NewQVideoRendererControl(parent core.QObject_ITF) *QVideoRendererControl {
	defer qt.Recovering("QVideoRendererControl::QVideoRendererControl")

	var tmpValue = NewQVideoRendererControlFromPointer(C.QVideoRendererControl_NewQVideoRendererControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQVideoRendererControl_SetSurface
func callbackQVideoRendererControl_SetSurface(ptr unsafe.Pointer, surface unsafe.Pointer) {
	defer qt.Recovering("callback QVideoRendererControl::setSurface")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::setSurface"); signal != nil {
		signal.(func(*QAbstractVideoSurface))(NewQAbstractVideoSurfaceFromPointer(surface))
	}

}

func (ptr *QVideoRendererControl) ConnectSetSurface(f func(surface *QAbstractVideoSurface)) {
	defer qt.Recovering("connect QVideoRendererControl::setSurface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::setSurface", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectSetSurface(surface QAbstractVideoSurface_ITF) {
	defer qt.Recovering("disconnect QVideoRendererControl::setSurface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::setSurface")
	}
}

func (ptr *QVideoRendererControl) SetSurface(surface QAbstractVideoSurface_ITF) {
	defer qt.Recovering("QVideoRendererControl::setSurface")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_SetSurface(ptr.Pointer(), PointerFromQAbstractVideoSurface(surface))
	}
}

//export callbackQVideoRendererControl_Surface
func callbackQVideoRendererControl_Surface(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoRendererControl::surface")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::surface"); signal != nil {
		return PointerFromQAbstractVideoSurface(signal.(func() *QAbstractVideoSurface)())
	}

	return PointerFromQAbstractVideoSurface(nil)
}

func (ptr *QVideoRendererControl) ConnectSurface(f func() *QAbstractVideoSurface) {
	defer qt.Recovering("connect QVideoRendererControl::surface")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::surface", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectSurface() {
	defer qt.Recovering("disconnect QVideoRendererControl::surface")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::surface")
	}
}

func (ptr *QVideoRendererControl) Surface() *QAbstractVideoSurface {
	defer qt.Recovering("QVideoRendererControl::surface")

	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractVideoSurfaceFromPointer(C.QVideoRendererControl_Surface(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QVideoRendererControl) DestroyQVideoRendererControl() {
	defer qt.Recovering("QVideoRendererControl::~QVideoRendererControl")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_DestroyQVideoRendererControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoRendererControl_TimerEvent
func callbackQVideoRendererControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoRendererControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQVideoRendererControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QVideoRendererControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QVideoRendererControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::timerEvent", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QVideoRendererControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::timerEvent")
	}
}

func (ptr *QVideoRendererControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoRendererControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QVideoRendererControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoRendererControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQVideoRendererControl_ChildEvent
func callbackQVideoRendererControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoRendererControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQVideoRendererControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QVideoRendererControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QVideoRendererControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::childEvent", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QVideoRendererControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::childEvent")
	}
}

func (ptr *QVideoRendererControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoRendererControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QVideoRendererControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoRendererControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQVideoRendererControl_ConnectNotify
func callbackQVideoRendererControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoRendererControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoRendererControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoRendererControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoRendererControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::connectNotify", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QVideoRendererControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::connectNotify")
	}
}

func (ptr *QVideoRendererControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoRendererControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoRendererControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoRendererControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoRendererControl_CustomEvent
func callbackQVideoRendererControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoRendererControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoRendererControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoRendererControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoRendererControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::customEvent", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QVideoRendererControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::customEvent")
	}
}

func (ptr *QVideoRendererControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoRendererControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoRendererControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoRendererControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoRendererControl_DeleteLater
func callbackQVideoRendererControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoRendererControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoRendererControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QVideoRendererControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QVideoRendererControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::deleteLater", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QVideoRendererControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::deleteLater")
	}
}

func (ptr *QVideoRendererControl) DeleteLater() {
	defer qt.Recovering("QVideoRendererControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QVideoRendererControl) DeleteLaterDefault() {
	defer qt.Recovering("QVideoRendererControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoRendererControl_DisconnectNotify
func callbackQVideoRendererControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoRendererControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoRendererControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoRendererControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoRendererControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::disconnectNotify", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QVideoRendererControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::disconnectNotify")
	}
}

func (ptr *QVideoRendererControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoRendererControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoRendererControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoRendererControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoRendererControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoRendererControl_Event
func callbackQVideoRendererControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoRendererControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoRendererControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QVideoRendererControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoRendererControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::event", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QVideoRendererControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::event")
	}
}

func (ptr *QVideoRendererControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoRendererControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoRendererControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QVideoRendererControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoRendererControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoRendererControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQVideoRendererControl_EventFilter
func callbackQVideoRendererControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoRendererControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoRendererControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QVideoRendererControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoRendererControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::eventFilter", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QVideoRendererControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::eventFilter")
	}
}

func (ptr *QVideoRendererControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoRendererControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoRendererControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QVideoRendererControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoRendererControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoRendererControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVideoRendererControl_MetaObject
func callbackQVideoRendererControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoRendererControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoRendererControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQVideoRendererControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QVideoRendererControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QVideoRendererControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::metaObject", f)
	}
}

func (ptr *QVideoRendererControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QVideoRendererControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoRendererControl::metaObject")
	}
}

func (ptr *QVideoRendererControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QVideoRendererControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoRendererControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVideoRendererControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QVideoRendererControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoRendererControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QVideoSurfaceFormat::Direction
type QVideoSurfaceFormat__Direction int64

const (
	QVideoSurfaceFormat__TopToBottom = QVideoSurfaceFormat__Direction(0)
	QVideoSurfaceFormat__BottomToTop = QVideoSurfaceFormat__Direction(1)
)

//QVideoSurfaceFormat::YCbCrColorSpace
type QVideoSurfaceFormat__YCbCrColorSpace int64

const (
	QVideoSurfaceFormat__YCbCr_Undefined = QVideoSurfaceFormat__YCbCrColorSpace(0)
	QVideoSurfaceFormat__YCbCr_BT601     = QVideoSurfaceFormat__YCbCrColorSpace(1)
	QVideoSurfaceFormat__YCbCr_BT709     = QVideoSurfaceFormat__YCbCrColorSpace(2)
	QVideoSurfaceFormat__YCbCr_xvYCC601  = QVideoSurfaceFormat__YCbCrColorSpace(3)
	QVideoSurfaceFormat__YCbCr_xvYCC709  = QVideoSurfaceFormat__YCbCrColorSpace(4)
	QVideoSurfaceFormat__YCbCr_JPEG      = QVideoSurfaceFormat__YCbCrColorSpace(5)
)

type QVideoSurfaceFormat struct {
	ptr unsafe.Pointer
}

type QVideoSurfaceFormat_ITF interface {
	QVideoSurfaceFormat_PTR() *QVideoSurfaceFormat
}

func (p *QVideoSurfaceFormat) QVideoSurfaceFormat_PTR() *QVideoSurfaceFormat {
	return p
}

func (p *QVideoSurfaceFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVideoSurfaceFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVideoSurfaceFormat(ptr QVideoSurfaceFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoSurfaceFormat_PTR().Pointer()
	}
	return nil
}

func NewQVideoSurfaceFormatFromPointer(ptr unsafe.Pointer) *QVideoSurfaceFormat {
	var n = new(QVideoSurfaceFormat)
	n.SetPointer(ptr)
	return n
}
func NewQVideoSurfaceFormat() *QVideoSurfaceFormat {
	defer qt.Recovering("QVideoSurfaceFormat::QVideoSurfaceFormat")

	var tmpValue = NewQVideoSurfaceFormatFromPointer(C.QVideoSurfaceFormat_NewQVideoSurfaceFormat())
	runtime.SetFinalizer(tmpValue, (*QVideoSurfaceFormat).DestroyQVideoSurfaceFormat)
	return tmpValue
}

func NewQVideoSurfaceFormat2(size core.QSize_ITF, format QVideoFrame__PixelFormat, ty QAbstractVideoBuffer__HandleType) *QVideoSurfaceFormat {
	defer qt.Recovering("QVideoSurfaceFormat::QVideoSurfaceFormat")

	var tmpValue = NewQVideoSurfaceFormatFromPointer(C.QVideoSurfaceFormat_NewQVideoSurfaceFormat2(core.PointerFromQSize(size), C.longlong(format), C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QVideoSurfaceFormat).DestroyQVideoSurfaceFormat)
	return tmpValue
}

func NewQVideoSurfaceFormat3(other QVideoSurfaceFormat_ITF) *QVideoSurfaceFormat {
	defer qt.Recovering("QVideoSurfaceFormat::QVideoSurfaceFormat")

	var tmpValue = NewQVideoSurfaceFormatFromPointer(C.QVideoSurfaceFormat_NewQVideoSurfaceFormat3(PointerFromQVideoSurfaceFormat(other)))
	runtime.SetFinalizer(tmpValue, (*QVideoSurfaceFormat).DestroyQVideoSurfaceFormat)
	return tmpValue
}

func (ptr *QVideoSurfaceFormat) FrameHeight() int {
	defer qt.Recovering("QVideoSurfaceFormat::frameHeight")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoSurfaceFormat_FrameHeight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVideoSurfaceFormat) FrameRate() float64 {
	defer qt.Recovering("QVideoSurfaceFormat::frameRate")

	if ptr.Pointer() != nil {
		return float64(C.QVideoSurfaceFormat_FrameRate(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoSurfaceFormat) FrameSize() *core.QSize {
	defer qt.Recovering("QVideoSurfaceFormat::frameSize")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QVideoSurfaceFormat_FrameSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoSurfaceFormat) FrameWidth() int {
	defer qt.Recovering("QVideoSurfaceFormat::frameWidth")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoSurfaceFormat_FrameWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVideoSurfaceFormat) HandleType() QAbstractVideoBuffer__HandleType {
	defer qt.Recovering("QVideoSurfaceFormat::handleType")

	if ptr.Pointer() != nil {
		return QAbstractVideoBuffer__HandleType(C.QVideoSurfaceFormat_HandleType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoSurfaceFormat) IsValid() bool {
	defer qt.Recovering("QVideoSurfaceFormat::isValid")

	if ptr.Pointer() != nil {
		return C.QVideoSurfaceFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoSurfaceFormat) PixelAspectRatio() *core.QSize {
	defer qt.Recovering("QVideoSurfaceFormat::pixelAspectRatio")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QVideoSurfaceFormat_PixelAspectRatio(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoSurfaceFormat) PixelFormat() QVideoFrame__PixelFormat {
	defer qt.Recovering("QVideoSurfaceFormat::pixelFormat")

	if ptr.Pointer() != nil {
		return QVideoFrame__PixelFormat(C.QVideoSurfaceFormat_PixelFormat(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoSurfaceFormat) Property(name string) *core.QVariant {
	defer qt.Recovering("QVideoSurfaceFormat::property")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var tmpValue = core.NewQVariantFromPointer(C.QVideoSurfaceFormat_Property(ptr.Pointer(), nameC))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoSurfaceFormat) ScanLineDirection() QVideoSurfaceFormat__Direction {
	defer qt.Recovering("QVideoSurfaceFormat::scanLineDirection")

	if ptr.Pointer() != nil {
		return QVideoSurfaceFormat__Direction(C.QVideoSurfaceFormat_ScanLineDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoSurfaceFormat) SetFrameRate(rate float64) {
	defer qt.Recovering("QVideoSurfaceFormat::setFrameRate")

	if ptr.Pointer() != nil {
		C.QVideoSurfaceFormat_SetFrameRate(ptr.Pointer(), C.double(rate))
	}
}

func (ptr *QVideoSurfaceFormat) SetFrameSize(size core.QSize_ITF) {
	defer qt.Recovering("QVideoSurfaceFormat::setFrameSize")

	if ptr.Pointer() != nil {
		C.QVideoSurfaceFormat_SetFrameSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QVideoSurfaceFormat) SetFrameSize2(width int, height int) {
	defer qt.Recovering("QVideoSurfaceFormat::setFrameSize")

	if ptr.Pointer() != nil {
		C.QVideoSurfaceFormat_SetFrameSize2(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QVideoSurfaceFormat) SetPixelAspectRatio(ratio core.QSize_ITF) {
	defer qt.Recovering("QVideoSurfaceFormat::setPixelAspectRatio")

	if ptr.Pointer() != nil {
		C.QVideoSurfaceFormat_SetPixelAspectRatio(ptr.Pointer(), core.PointerFromQSize(ratio))
	}
}

func (ptr *QVideoSurfaceFormat) SetPixelAspectRatio2(horizontal int, vertical int) {
	defer qt.Recovering("QVideoSurfaceFormat::setPixelAspectRatio")

	if ptr.Pointer() != nil {
		C.QVideoSurfaceFormat_SetPixelAspectRatio2(ptr.Pointer(), C.int(int32(horizontal)), C.int(int32(vertical)))
	}
}

func (ptr *QVideoSurfaceFormat) SetProperty(name string, value core.QVariant_ITF) {
	defer qt.Recovering("QVideoSurfaceFormat::setProperty")

	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QVideoSurfaceFormat_SetProperty(ptr.Pointer(), nameC, core.PointerFromQVariant(value))
	}
}

func (ptr *QVideoSurfaceFormat) SetScanLineDirection(direction QVideoSurfaceFormat__Direction) {
	defer qt.Recovering("QVideoSurfaceFormat::setScanLineDirection")

	if ptr.Pointer() != nil {
		C.QVideoSurfaceFormat_SetScanLineDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QVideoSurfaceFormat) SetViewport(viewport core.QRect_ITF) {
	defer qt.Recovering("QVideoSurfaceFormat::setViewport")

	if ptr.Pointer() != nil {
		C.QVideoSurfaceFormat_SetViewport(ptr.Pointer(), core.PointerFromQRect(viewport))
	}
}

func (ptr *QVideoSurfaceFormat) SetYCbCrColorSpace(space QVideoSurfaceFormat__YCbCrColorSpace) {
	defer qt.Recovering("QVideoSurfaceFormat::setYCbCrColorSpace")

	if ptr.Pointer() != nil {
		C.QVideoSurfaceFormat_SetYCbCrColorSpace(ptr.Pointer(), C.longlong(space))
	}
}

func (ptr *QVideoSurfaceFormat) SizeHint() *core.QSize {
	defer qt.Recovering("QVideoSurfaceFormat::sizeHint")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QVideoSurfaceFormat_SizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoSurfaceFormat) Viewport() *core.QRect {
	defer qt.Recovering("QVideoSurfaceFormat::viewport")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QVideoSurfaceFormat_Viewport(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoSurfaceFormat) YCbCrColorSpace() QVideoSurfaceFormat__YCbCrColorSpace {
	defer qt.Recovering("QVideoSurfaceFormat::yCbCrColorSpace")

	if ptr.Pointer() != nil {
		return QVideoSurfaceFormat__YCbCrColorSpace(C.QVideoSurfaceFormat_YCbCrColorSpace(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoSurfaceFormat) DestroyQVideoSurfaceFormat() {
	defer qt.Recovering("QVideoSurfaceFormat::~QVideoSurfaceFormat")

	if ptr.Pointer() != nil {
		C.QVideoSurfaceFormat_DestroyQVideoSurfaceFormat(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QVideoWidget struct {
	widgets.QWidget
	QMediaBindableInterface
}

type QVideoWidget_ITF interface {
	widgets.QWidget_ITF
	QMediaBindableInterface_ITF
	QVideoWidget_PTR() *QVideoWidget
}

func (p *QVideoWidget) QVideoWidget_PTR() *QVideoWidget {
	return p
}

func (p *QVideoWidget) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QWidget_PTR().Pointer()
	}
	return nil
}

func (p *QVideoWidget) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QWidget_PTR().SetPointer(ptr)
		p.QMediaBindableInterface_PTR().SetPointer(ptr)
	}
}

func PointerFromQVideoWidget(ptr QVideoWidget_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoWidget_PTR().Pointer()
	}
	return nil
}

func NewQVideoWidgetFromPointer(ptr unsafe.Pointer) *QVideoWidget {
	var n = new(QVideoWidget)
	n.SetPointer(ptr)
	return n
}
func (ptr *QVideoWidget) AspectRatioMode() core.Qt__AspectRatioMode {
	defer qt.Recovering("QVideoWidget::aspectRatioMode")

	if ptr.Pointer() != nil {
		return core.Qt__AspectRatioMode(C.QVideoWidget_AspectRatioMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoWidget) Brightness() int {
	defer qt.Recovering("QVideoWidget::brightness")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidget_Brightness(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVideoWidget) Contrast() int {
	defer qt.Recovering("QVideoWidget::contrast")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidget_Contrast(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVideoWidget) Hue() int {
	defer qt.Recovering("QVideoWidget::hue")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidget_Hue(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWidget_MediaObject
func callbackQVideoWidget_MediaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoWidget::mediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::mediaObject"); signal != nil {
		return PointerFromQMediaObject(signal.(func() *QMediaObject)())
	}

	return PointerFromQMediaObject(NewQVideoWidgetFromPointer(ptr).MediaObjectDefault())
}

func (ptr *QVideoWidget) ConnectMediaObject(f func() *QMediaObject) {
	defer qt.Recovering("connect QVideoWidget::mediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mediaObject", f)
	}
}

func (ptr *QVideoWidget) DisconnectMediaObject() {
	defer qt.Recovering("disconnect QVideoWidget::mediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mediaObject")
	}
}

func (ptr *QVideoWidget) MediaObject() *QMediaObject {
	defer qt.Recovering("QVideoWidget::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QVideoWidget_MediaObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QVideoWidget) MediaObjectDefault() *QMediaObject {
	defer qt.Recovering("QVideoWidget::mediaObject")

	if ptr.Pointer() != nil {
		var tmpValue = NewQMediaObjectFromPointer(C.QVideoWidget_MediaObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QVideoWidget) Saturation() int {
	defer qt.Recovering("QVideoWidget::saturation")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidget_Saturation(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWidget_SetAspectRatioMode
func callbackQVideoWidget_SetAspectRatioMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QVideoWidget::setAspectRatioMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setAspectRatioMode"); signal != nil {
		signal.(func(core.Qt__AspectRatioMode))(core.Qt__AspectRatioMode(mode))
	}

}

func (ptr *QVideoWidget) ConnectSetAspectRatioMode(f func(mode core.Qt__AspectRatioMode)) {
	defer qt.Recovering("connect QVideoWidget::setAspectRatioMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setAspectRatioMode", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetAspectRatioMode(mode core.Qt__AspectRatioMode) {
	defer qt.Recovering("disconnect QVideoWidget::setAspectRatioMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setAspectRatioMode")
	}
}

func (ptr *QVideoWidget) SetAspectRatioMode(mode core.Qt__AspectRatioMode) {
	defer qt.Recovering("QVideoWidget::setAspectRatioMode")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetAspectRatioMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQVideoWidget_SetBrightness
func callbackQVideoWidget_SetBrightness(ptr unsafe.Pointer, brightness C.int) {
	defer qt.Recovering("callback QVideoWidget::setBrightness")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setBrightness"); signal != nil {
		signal.(func(int))(int(int32(brightness)))
	}

}

func (ptr *QVideoWidget) ConnectSetBrightness(f func(brightness int)) {
	defer qt.Recovering("connect QVideoWidget::setBrightness")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setBrightness", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetBrightness(brightness int) {
	defer qt.Recovering("disconnect QVideoWidget::setBrightness")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setBrightness")
	}
}

func (ptr *QVideoWidget) SetBrightness(brightness int) {
	defer qt.Recovering("QVideoWidget::setBrightness")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetBrightness(ptr.Pointer(), C.int(int32(brightness)))
	}
}

//export callbackQVideoWidget_SetContrast
func callbackQVideoWidget_SetContrast(ptr unsafe.Pointer, contrast C.int) {
	defer qt.Recovering("callback QVideoWidget::setContrast")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setContrast"); signal != nil {
		signal.(func(int))(int(int32(contrast)))
	}

}

func (ptr *QVideoWidget) ConnectSetContrast(f func(contrast int)) {
	defer qt.Recovering("connect QVideoWidget::setContrast")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setContrast", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetContrast(contrast int) {
	defer qt.Recovering("disconnect QVideoWidget::setContrast")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setContrast")
	}
}

func (ptr *QVideoWidget) SetContrast(contrast int) {
	defer qt.Recovering("QVideoWidget::setContrast")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetContrast(ptr.Pointer(), C.int(int32(contrast)))
	}
}

//export callbackQVideoWidget_SetFullScreen
func callbackQVideoWidget_SetFullScreen(ptr unsafe.Pointer, fullScreen C.char) {
	defer qt.Recovering("callback QVideoWidget::setFullScreen")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setFullScreen"); signal != nil {
		signal.(func(bool))(int8(fullScreen) != 0)
	}

}

func (ptr *QVideoWidget) ConnectSetFullScreen(f func(fullScreen bool)) {
	defer qt.Recovering("connect QVideoWidget::setFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setFullScreen", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetFullScreen(fullScreen bool) {
	defer qt.Recovering("disconnect QVideoWidget::setFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setFullScreen")
	}
}

func (ptr *QVideoWidget) SetFullScreen(fullScreen bool) {
	defer qt.Recovering("QVideoWidget::setFullScreen")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetFullScreen(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fullScreen))))
	}
}

//export callbackQVideoWidget_SetHue
func callbackQVideoWidget_SetHue(ptr unsafe.Pointer, hue C.int) {
	defer qt.Recovering("callback QVideoWidget::setHue")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setHue"); signal != nil {
		signal.(func(int))(int(int32(hue)))
	}

}

func (ptr *QVideoWidget) ConnectSetHue(f func(hue int)) {
	defer qt.Recovering("connect QVideoWidget::setHue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setHue", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetHue(hue int) {
	defer qt.Recovering("disconnect QVideoWidget::setHue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setHue")
	}
}

func (ptr *QVideoWidget) SetHue(hue int) {
	defer qt.Recovering("QVideoWidget::setHue")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetHue(ptr.Pointer(), C.int(int32(hue)))
	}
}

//export callbackQVideoWidget_SetSaturation
func callbackQVideoWidget_SetSaturation(ptr unsafe.Pointer, saturation C.int) {
	defer qt.Recovering("callback QVideoWidget::setSaturation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setSaturation"); signal != nil {
		signal.(func(int))(int(int32(saturation)))
	}

}

func (ptr *QVideoWidget) ConnectSetSaturation(f func(saturation int)) {
	defer qt.Recovering("connect QVideoWidget::setSaturation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setSaturation", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetSaturation(saturation int) {
	defer qt.Recovering("disconnect QVideoWidget::setSaturation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setSaturation")
	}
}

func (ptr *QVideoWidget) SetSaturation(saturation int) {
	defer qt.Recovering("QVideoWidget::setSaturation")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetSaturation(ptr.Pointer(), C.int(int32(saturation)))
	}
}

func NewQVideoWidget(parent widgets.QWidget_ITF) *QVideoWidget {
	defer qt.Recovering("QVideoWidget::QVideoWidget")

	var tmpValue = NewQVideoWidgetFromPointer(C.QVideoWidget_NewQVideoWidget(widgets.PointerFromQWidget(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQVideoWidget_BrightnessChanged
func callbackQVideoWidget_BrightnessChanged(ptr unsafe.Pointer, brightness C.int) {
	defer qt.Recovering("callback QVideoWidget::brightnessChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::brightnessChanged"); signal != nil {
		signal.(func(int))(int(int32(brightness)))
	}

}

func (ptr *QVideoWidget) ConnectBrightnessChanged(f func(brightness int)) {
	defer qt.Recovering("connect QVideoWidget::brightnessChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ConnectBrightnessChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::brightnessChanged", f)
	}
}

func (ptr *QVideoWidget) DisconnectBrightnessChanged() {
	defer qt.Recovering("disconnect QVideoWidget::brightnessChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DisconnectBrightnessChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::brightnessChanged")
	}
}

func (ptr *QVideoWidget) BrightnessChanged(brightness int) {
	defer qt.Recovering("QVideoWidget::brightnessChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_BrightnessChanged(ptr.Pointer(), C.int(int32(brightness)))
	}
}

//export callbackQVideoWidget_ContrastChanged
func callbackQVideoWidget_ContrastChanged(ptr unsafe.Pointer, contrast C.int) {
	defer qt.Recovering("callback QVideoWidget::contrastChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::contrastChanged"); signal != nil {
		signal.(func(int))(int(int32(contrast)))
	}

}

func (ptr *QVideoWidget) ConnectContrastChanged(f func(contrast int)) {
	defer qt.Recovering("connect QVideoWidget::contrastChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ConnectContrastChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::contrastChanged", f)
	}
}

func (ptr *QVideoWidget) DisconnectContrastChanged() {
	defer qt.Recovering("disconnect QVideoWidget::contrastChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DisconnectContrastChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::contrastChanged")
	}
}

func (ptr *QVideoWidget) ContrastChanged(contrast int) {
	defer qt.Recovering("QVideoWidget::contrastChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ContrastChanged(ptr.Pointer(), C.int(int32(contrast)))
	}
}

func (ptr *QVideoWidget) Event(event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWidget::event")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_Event(ptr.Pointer(), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVideoWidget_FullScreenChanged
func callbackQVideoWidget_FullScreenChanged(ptr unsafe.Pointer, fullScreen C.char) {
	defer qt.Recovering("callback QVideoWidget::fullScreenChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::fullScreenChanged"); signal != nil {
		signal.(func(bool))(int8(fullScreen) != 0)
	}

}

func (ptr *QVideoWidget) ConnectFullScreenChanged(f func(fullScreen bool)) {
	defer qt.Recovering("connect QVideoWidget::fullScreenChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ConnectFullScreenChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::fullScreenChanged", f)
	}
}

func (ptr *QVideoWidget) DisconnectFullScreenChanged() {
	defer qt.Recovering("disconnect QVideoWidget::fullScreenChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DisconnectFullScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::fullScreenChanged")
	}
}

func (ptr *QVideoWidget) FullScreenChanged(fullScreen bool) {
	defer qt.Recovering("QVideoWidget::fullScreenChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_FullScreenChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fullScreen))))
	}
}

func (ptr *QVideoWidget) HideEvent(event gui.QHideEvent_ITF) {
	defer qt.Recovering("QVideoWidget::hideEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_HideEvent(ptr.Pointer(), gui.PointerFromQHideEvent(event))
	}
}

//export callbackQVideoWidget_HueChanged
func callbackQVideoWidget_HueChanged(ptr unsafe.Pointer, hue C.int) {
	defer qt.Recovering("callback QVideoWidget::hueChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::hueChanged"); signal != nil {
		signal.(func(int))(int(int32(hue)))
	}

}

func (ptr *QVideoWidget) ConnectHueChanged(f func(hue int)) {
	defer qt.Recovering("connect QVideoWidget::hueChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ConnectHueChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::hueChanged", f)
	}
}

func (ptr *QVideoWidget) DisconnectHueChanged() {
	defer qt.Recovering("disconnect QVideoWidget::hueChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DisconnectHueChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::hueChanged")
	}
}

func (ptr *QVideoWidget) HueChanged(hue int) {
	defer qt.Recovering("QVideoWidget::hueChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_HueChanged(ptr.Pointer(), C.int(int32(hue)))
	}
}

func (ptr *QVideoWidget) IsFullScreen() bool {
	defer qt.Recovering("QVideoWidget::isFullScreen")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_IsFullScreen(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoWidget) MoveEvent(event gui.QMoveEvent_ITF) {
	defer qt.Recovering("QVideoWidget::moveEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_MoveEvent(ptr.Pointer(), gui.PointerFromQMoveEvent(event))
	}
}

func (ptr *QVideoWidget) PaintEvent(event gui.QPaintEvent_ITF) {
	defer qt.Recovering("QVideoWidget::paintEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_PaintEvent(ptr.Pointer(), gui.PointerFromQPaintEvent(event))
	}
}

func (ptr *QVideoWidget) ResizeEvent(event gui.QResizeEvent_ITF) {
	defer qt.Recovering("QVideoWidget::resizeEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ResizeEvent(ptr.Pointer(), gui.PointerFromQResizeEvent(event))
	}
}

//export callbackQVideoWidget_SaturationChanged
func callbackQVideoWidget_SaturationChanged(ptr unsafe.Pointer, saturation C.int) {
	defer qt.Recovering("callback QVideoWidget::saturationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::saturationChanged"); signal != nil {
		signal.(func(int))(int(int32(saturation)))
	}

}

func (ptr *QVideoWidget) ConnectSaturationChanged(f func(saturation int)) {
	defer qt.Recovering("connect QVideoWidget::saturationChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ConnectSaturationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::saturationChanged", f)
	}
}

func (ptr *QVideoWidget) DisconnectSaturationChanged() {
	defer qt.Recovering("disconnect QVideoWidget::saturationChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DisconnectSaturationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::saturationChanged")
	}
}

func (ptr *QVideoWidget) SaturationChanged(saturation int) {
	defer qt.Recovering("QVideoWidget::saturationChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SaturationChanged(ptr.Pointer(), C.int(int32(saturation)))
	}
}

func (ptr *QVideoWidget) ShowEvent(event gui.QShowEvent_ITF) {
	defer qt.Recovering("QVideoWidget::showEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowEvent(ptr.Pointer(), gui.PointerFromQShowEvent(event))
	}
}

func (ptr *QVideoWidget) SizeHint() *core.QSize {
	defer qt.Recovering("QVideoWidget::sizeHint")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QVideoWidget_SizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoWidget) DestroyQVideoWidget() {
	defer qt.Recovering("QVideoWidget::~QVideoWidget")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DestroyQVideoWidget(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoWidget_ActionEvent
func callbackQVideoWidget_ActionEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::actionEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::actionEvent"); signal != nil {
		signal.(func(*gui.QActionEvent))(gui.NewQActionEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).ActionEventDefault(gui.NewQActionEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectActionEvent(f func(event *gui.QActionEvent)) {
	defer qt.Recovering("connect QVideoWidget::actionEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::actionEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectActionEvent() {
	defer qt.Recovering("disconnect QVideoWidget::actionEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::actionEvent")
	}
}

func (ptr *QVideoWidget) ActionEvent(event gui.QActionEvent_ITF) {
	defer qt.Recovering("QVideoWidget::actionEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ActionEvent(ptr.Pointer(), gui.PointerFromQActionEvent(event))
	}
}

func (ptr *QVideoWidget) ActionEventDefault(event gui.QActionEvent_ITF) {
	defer qt.Recovering("QVideoWidget::actionEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ActionEventDefault(ptr.Pointer(), gui.PointerFromQActionEvent(event))
	}
}

//export callbackQVideoWidget_DragEnterEvent
func callbackQVideoWidget_DragEnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::dragEnterEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::dragEnterEvent"); signal != nil {
		signal.(func(*gui.QDragEnterEvent))(gui.NewQDragEnterEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).DragEnterEventDefault(gui.NewQDragEnterEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectDragEnterEvent(f func(event *gui.QDragEnterEvent)) {
	defer qt.Recovering("connect QVideoWidget::dragEnterEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::dragEnterEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectDragEnterEvent() {
	defer qt.Recovering("disconnect QVideoWidget::dragEnterEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::dragEnterEvent")
	}
}

func (ptr *QVideoWidget) DragEnterEvent(event gui.QDragEnterEvent_ITF) {
	defer qt.Recovering("QVideoWidget::dragEnterEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DragEnterEvent(ptr.Pointer(), gui.PointerFromQDragEnterEvent(event))
	}
}

func (ptr *QVideoWidget) DragEnterEventDefault(event gui.QDragEnterEvent_ITF) {
	defer qt.Recovering("QVideoWidget::dragEnterEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DragEnterEventDefault(ptr.Pointer(), gui.PointerFromQDragEnterEvent(event))
	}
}

//export callbackQVideoWidget_DragLeaveEvent
func callbackQVideoWidget_DragLeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::dragLeaveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::dragLeaveEvent"); signal != nil {
		signal.(func(*gui.QDragLeaveEvent))(gui.NewQDragLeaveEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).DragLeaveEventDefault(gui.NewQDragLeaveEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectDragLeaveEvent(f func(event *gui.QDragLeaveEvent)) {
	defer qt.Recovering("connect QVideoWidget::dragLeaveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::dragLeaveEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectDragLeaveEvent() {
	defer qt.Recovering("disconnect QVideoWidget::dragLeaveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::dragLeaveEvent")
	}
}

func (ptr *QVideoWidget) DragLeaveEvent(event gui.QDragLeaveEvent_ITF) {
	defer qt.Recovering("QVideoWidget::dragLeaveEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DragLeaveEvent(ptr.Pointer(), gui.PointerFromQDragLeaveEvent(event))
	}
}

func (ptr *QVideoWidget) DragLeaveEventDefault(event gui.QDragLeaveEvent_ITF) {
	defer qt.Recovering("QVideoWidget::dragLeaveEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DragLeaveEventDefault(ptr.Pointer(), gui.PointerFromQDragLeaveEvent(event))
	}
}

//export callbackQVideoWidget_DragMoveEvent
func callbackQVideoWidget_DragMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::dragMoveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::dragMoveEvent"); signal != nil {
		signal.(func(*gui.QDragMoveEvent))(gui.NewQDragMoveEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).DragMoveEventDefault(gui.NewQDragMoveEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectDragMoveEvent(f func(event *gui.QDragMoveEvent)) {
	defer qt.Recovering("connect QVideoWidget::dragMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::dragMoveEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectDragMoveEvent() {
	defer qt.Recovering("disconnect QVideoWidget::dragMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::dragMoveEvent")
	}
}

func (ptr *QVideoWidget) DragMoveEvent(event gui.QDragMoveEvent_ITF) {
	defer qt.Recovering("QVideoWidget::dragMoveEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DragMoveEvent(ptr.Pointer(), gui.PointerFromQDragMoveEvent(event))
	}
}

func (ptr *QVideoWidget) DragMoveEventDefault(event gui.QDragMoveEvent_ITF) {
	defer qt.Recovering("QVideoWidget::dragMoveEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DragMoveEventDefault(ptr.Pointer(), gui.PointerFromQDragMoveEvent(event))
	}
}

//export callbackQVideoWidget_DropEvent
func callbackQVideoWidget_DropEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::dropEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::dropEvent"); signal != nil {
		signal.(func(*gui.QDropEvent))(gui.NewQDropEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).DropEventDefault(gui.NewQDropEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectDropEvent(f func(event *gui.QDropEvent)) {
	defer qt.Recovering("connect QVideoWidget::dropEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::dropEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectDropEvent() {
	defer qt.Recovering("disconnect QVideoWidget::dropEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::dropEvent")
	}
}

func (ptr *QVideoWidget) DropEvent(event gui.QDropEvent_ITF) {
	defer qt.Recovering("QVideoWidget::dropEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DropEvent(ptr.Pointer(), gui.PointerFromQDropEvent(event))
	}
}

func (ptr *QVideoWidget) DropEventDefault(event gui.QDropEvent_ITF) {
	defer qt.Recovering("QVideoWidget::dropEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DropEventDefault(ptr.Pointer(), gui.PointerFromQDropEvent(event))
	}
}

//export callbackQVideoWidget_EnterEvent
func callbackQVideoWidget_EnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::enterEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::enterEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).EnterEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectEnterEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoWidget::enterEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::enterEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectEnterEvent() {
	defer qt.Recovering("disconnect QVideoWidget::enterEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::enterEvent")
	}
}

func (ptr *QVideoWidget) EnterEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidget::enterEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_EnterEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoWidget) EnterEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidget::enterEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_EnterEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoWidget_FocusInEvent
func callbackQVideoWidget_FocusInEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::focusInEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::focusInEvent"); signal != nil {
		signal.(func(*gui.QFocusEvent))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).FocusInEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectFocusInEvent(f func(event *gui.QFocusEvent)) {
	defer qt.Recovering("connect QVideoWidget::focusInEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::focusInEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectFocusInEvent() {
	defer qt.Recovering("disconnect QVideoWidget::focusInEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::focusInEvent")
	}
}

func (ptr *QVideoWidget) FocusInEvent(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QVideoWidget::focusInEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_FocusInEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QVideoWidget) FocusInEventDefault(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QVideoWidget::focusInEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_FocusInEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

//export callbackQVideoWidget_FocusOutEvent
func callbackQVideoWidget_FocusOutEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::focusOutEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::focusOutEvent"); signal != nil {
		signal.(func(*gui.QFocusEvent))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).FocusOutEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectFocusOutEvent(f func(event *gui.QFocusEvent)) {
	defer qt.Recovering("connect QVideoWidget::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::focusOutEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectFocusOutEvent() {
	defer qt.Recovering("disconnect QVideoWidget::focusOutEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::focusOutEvent")
	}
}

func (ptr *QVideoWidget) FocusOutEvent(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QVideoWidget::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_FocusOutEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QVideoWidget) FocusOutEventDefault(event gui.QFocusEvent_ITF) {
	defer qt.Recovering("QVideoWidget::focusOutEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_FocusOutEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

//export callbackQVideoWidget_LeaveEvent
func callbackQVideoWidget_LeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::leaveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::leaveEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).LeaveEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectLeaveEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoWidget::leaveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::leaveEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectLeaveEvent() {
	defer qt.Recovering("disconnect QVideoWidget::leaveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::leaveEvent")
	}
}

func (ptr *QVideoWidget) LeaveEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidget::leaveEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_LeaveEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoWidget) LeaveEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidget::leaveEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_LeaveEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoWidget_MinimumSizeHint
func callbackQVideoWidget_MinimumSizeHint(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoWidget::minimumSizeHint")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::minimumSizeHint"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQVideoWidgetFromPointer(ptr).MinimumSizeHintDefault())
}

func (ptr *QVideoWidget) ConnectMinimumSizeHint(f func() *core.QSize) {
	defer qt.Recovering("connect QVideoWidget::minimumSizeHint")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::minimumSizeHint", f)
	}
}

func (ptr *QVideoWidget) DisconnectMinimumSizeHint() {
	defer qt.Recovering("disconnect QVideoWidget::minimumSizeHint")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::minimumSizeHint")
	}
}

func (ptr *QVideoWidget) MinimumSizeHint() *core.QSize {
	defer qt.Recovering("QVideoWidget::minimumSizeHint")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QVideoWidget_MinimumSizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoWidget) MinimumSizeHintDefault() *core.QSize {
	defer qt.Recovering("QVideoWidget::minimumSizeHint")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QVideoWidget_MinimumSizeHintDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQVideoWidget_SetEnabled
func callbackQVideoWidget_SetEnabled(ptr unsafe.Pointer, vbo C.char) {
	defer qt.Recovering("callback QVideoWidget::setEnabled")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setEnabled"); signal != nil {
		signal.(func(bool))(int8(vbo) != 0)
	} else {
		NewQVideoWidgetFromPointer(ptr).SetEnabledDefault(int8(vbo) != 0)
	}
}

func (ptr *QVideoWidget) ConnectSetEnabled(f func(vbo bool)) {
	defer qt.Recovering("connect QVideoWidget::setEnabled")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setEnabled", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetEnabled() {
	defer qt.Recovering("disconnect QVideoWidget::setEnabled")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setEnabled")
	}
}

func (ptr *QVideoWidget) SetEnabled(vbo bool) {
	defer qt.Recovering("QVideoWidget::setEnabled")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QVideoWidget) SetEnabledDefault(vbo bool) {
	defer qt.Recovering("QVideoWidget::setEnabled")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetEnabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

//export callbackQVideoWidget_SetStyleSheet
func callbackQVideoWidget_SetStyleSheet(ptr unsafe.Pointer, styleSheet *C.char) {
	defer qt.Recovering("callback QVideoWidget::setStyleSheet")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setStyleSheet"); signal != nil {
		signal.(func(string))(C.GoString(styleSheet))
	} else {
		NewQVideoWidgetFromPointer(ptr).SetStyleSheetDefault(C.GoString(styleSheet))
	}
}

func (ptr *QVideoWidget) ConnectSetStyleSheet(f func(styleSheet string)) {
	defer qt.Recovering("connect QVideoWidget::setStyleSheet")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setStyleSheet", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetStyleSheet() {
	defer qt.Recovering("disconnect QVideoWidget::setStyleSheet")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setStyleSheet")
	}
}

func (ptr *QVideoWidget) SetStyleSheet(styleSheet string) {
	defer qt.Recovering("QVideoWidget::setStyleSheet")

	if ptr.Pointer() != nil {
		var styleSheetC = C.CString(styleSheet)
		defer C.free(unsafe.Pointer(styleSheetC))
		C.QVideoWidget_SetStyleSheet(ptr.Pointer(), styleSheetC)
	}
}

func (ptr *QVideoWidget) SetStyleSheetDefault(styleSheet string) {
	defer qt.Recovering("QVideoWidget::setStyleSheet")

	if ptr.Pointer() != nil {
		var styleSheetC = C.CString(styleSheet)
		defer C.free(unsafe.Pointer(styleSheetC))
		C.QVideoWidget_SetStyleSheetDefault(ptr.Pointer(), styleSheetC)
	}
}

//export callbackQVideoWidget_SetVisible
func callbackQVideoWidget_SetVisible(ptr unsafe.Pointer, visible C.char) {
	defer qt.Recovering("callback QVideoWidget::setVisible")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setVisible"); signal != nil {
		signal.(func(bool))(int8(visible) != 0)
	} else {
		NewQVideoWidgetFromPointer(ptr).SetVisibleDefault(int8(visible) != 0)
	}
}

func (ptr *QVideoWidget) ConnectSetVisible(f func(visible bool)) {
	defer qt.Recovering("connect QVideoWidget::setVisible")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setVisible", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetVisible() {
	defer qt.Recovering("disconnect QVideoWidget::setVisible")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setVisible")
	}
}

func (ptr *QVideoWidget) SetVisible(visible bool) {
	defer qt.Recovering("QVideoWidget::setVisible")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QVideoWidget) SetVisibleDefault(visible bool) {
	defer qt.Recovering("QVideoWidget::setVisible")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetVisibleDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

//export callbackQVideoWidget_SetWindowModified
func callbackQVideoWidget_SetWindowModified(ptr unsafe.Pointer, vbo C.char) {
	defer qt.Recovering("callback QVideoWidget::setWindowModified")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setWindowModified"); signal != nil {
		signal.(func(bool))(int8(vbo) != 0)
	} else {
		NewQVideoWidgetFromPointer(ptr).SetWindowModifiedDefault(int8(vbo) != 0)
	}
}

func (ptr *QVideoWidget) ConnectSetWindowModified(f func(vbo bool)) {
	defer qt.Recovering("connect QVideoWidget::setWindowModified")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setWindowModified", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetWindowModified() {
	defer qt.Recovering("disconnect QVideoWidget::setWindowModified")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setWindowModified")
	}
}

func (ptr *QVideoWidget) SetWindowModified(vbo bool) {
	defer qt.Recovering("QVideoWidget::setWindowModified")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetWindowModified(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QVideoWidget) SetWindowModifiedDefault(vbo bool) {
	defer qt.Recovering("QVideoWidget::setWindowModified")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetWindowModifiedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

//export callbackQVideoWidget_SetWindowTitle
func callbackQVideoWidget_SetWindowTitle(ptr unsafe.Pointer, vqs *C.char) {
	defer qt.Recovering("callback QVideoWidget::setWindowTitle")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setWindowTitle"); signal != nil {
		signal.(func(string))(C.GoString(vqs))
	} else {
		NewQVideoWidgetFromPointer(ptr).SetWindowTitleDefault(C.GoString(vqs))
	}
}

func (ptr *QVideoWidget) ConnectSetWindowTitle(f func(vqs string)) {
	defer qt.Recovering("connect QVideoWidget::setWindowTitle")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setWindowTitle", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetWindowTitle() {
	defer qt.Recovering("disconnect QVideoWidget::setWindowTitle")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setWindowTitle")
	}
}

func (ptr *QVideoWidget) SetWindowTitle(vqs string) {
	defer qt.Recovering("QVideoWidget::setWindowTitle")

	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QVideoWidget_SetWindowTitle(ptr.Pointer(), vqsC)
	}
}

func (ptr *QVideoWidget) SetWindowTitleDefault(vqs string) {
	defer qt.Recovering("QVideoWidget::setWindowTitle")

	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QVideoWidget_SetWindowTitleDefault(ptr.Pointer(), vqsC)
	}
}

//export callbackQVideoWidget_ChangeEvent
func callbackQVideoWidget_ChangeEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::changeEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::changeEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).ChangeEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectChangeEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoWidget::changeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::changeEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectChangeEvent() {
	defer qt.Recovering("disconnect QVideoWidget::changeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::changeEvent")
	}
}

func (ptr *QVideoWidget) ChangeEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidget::changeEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ChangeEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoWidget) ChangeEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidget::changeEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ChangeEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoWidget_Close
func callbackQVideoWidget_Close(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWidget::close")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::close"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWidgetFromPointer(ptr).CloseDefault())))
}

func (ptr *QVideoWidget) ConnectClose(f func() bool) {
	defer qt.Recovering("connect QVideoWidget::close")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::close", f)
	}
}

func (ptr *QVideoWidget) DisconnectClose() {
	defer qt.Recovering("disconnect QVideoWidget::close")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::close")
	}
}

func (ptr *QVideoWidget) Close() bool {
	defer qt.Recovering("QVideoWidget::close")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_Close(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoWidget) CloseDefault() bool {
	defer qt.Recovering("QVideoWidget::close")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_CloseDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQVideoWidget_CloseEvent
func callbackQVideoWidget_CloseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::closeEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::closeEvent"); signal != nil {
		signal.(func(*gui.QCloseEvent))(gui.NewQCloseEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).CloseEventDefault(gui.NewQCloseEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectCloseEvent(f func(event *gui.QCloseEvent)) {
	defer qt.Recovering("connect QVideoWidget::closeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::closeEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectCloseEvent() {
	defer qt.Recovering("disconnect QVideoWidget::closeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::closeEvent")
	}
}

func (ptr *QVideoWidget) CloseEvent(event gui.QCloseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::closeEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_CloseEvent(ptr.Pointer(), gui.PointerFromQCloseEvent(event))
	}
}

func (ptr *QVideoWidget) CloseEventDefault(event gui.QCloseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::closeEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_CloseEventDefault(ptr.Pointer(), gui.PointerFromQCloseEvent(event))
	}
}

//export callbackQVideoWidget_ContextMenuEvent
func callbackQVideoWidget_ContextMenuEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::contextMenuEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::contextMenuEvent"); signal != nil {
		signal.(func(*gui.QContextMenuEvent))(gui.NewQContextMenuEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).ContextMenuEventDefault(gui.NewQContextMenuEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectContextMenuEvent(f func(event *gui.QContextMenuEvent)) {
	defer qt.Recovering("connect QVideoWidget::contextMenuEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::contextMenuEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectContextMenuEvent() {
	defer qt.Recovering("disconnect QVideoWidget::contextMenuEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::contextMenuEvent")
	}
}

func (ptr *QVideoWidget) ContextMenuEvent(event gui.QContextMenuEvent_ITF) {
	defer qt.Recovering("QVideoWidget::contextMenuEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ContextMenuEvent(ptr.Pointer(), gui.PointerFromQContextMenuEvent(event))
	}
}

func (ptr *QVideoWidget) ContextMenuEventDefault(event gui.QContextMenuEvent_ITF) {
	defer qt.Recovering("QVideoWidget::contextMenuEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ContextMenuEventDefault(ptr.Pointer(), gui.PointerFromQContextMenuEvent(event))
	}
}

//export callbackQVideoWidget_FocusNextPrevChild
func callbackQVideoWidget_FocusNextPrevChild(ptr unsafe.Pointer, next C.char) C.char {
	defer qt.Recovering("callback QVideoWidget::focusNextPrevChild")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::focusNextPrevChild"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(bool) bool)(int8(next) != 0))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWidgetFromPointer(ptr).FocusNextPrevChildDefault(int8(next) != 0))))
}

func (ptr *QVideoWidget) ConnectFocusNextPrevChild(f func(next bool) bool) {
	defer qt.Recovering("connect QVideoWidget::focusNextPrevChild")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::focusNextPrevChild", f)
	}
}

func (ptr *QVideoWidget) DisconnectFocusNextPrevChild() {
	defer qt.Recovering("disconnect QVideoWidget::focusNextPrevChild")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::focusNextPrevChild")
	}
}

func (ptr *QVideoWidget) FocusNextPrevChild(next bool) bool {
	defer qt.Recovering("QVideoWidget::focusNextPrevChild")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_FocusNextPrevChild(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next)))) != 0
	}
	return false
}

func (ptr *QVideoWidget) FocusNextPrevChildDefault(next bool) bool {
	defer qt.Recovering("QVideoWidget::focusNextPrevChild")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_FocusNextPrevChildDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next)))) != 0
	}
	return false
}

//export callbackQVideoWidget_HasHeightForWidth
func callbackQVideoWidget_HasHeightForWidth(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWidget::hasHeightForWidth")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::hasHeightForWidth"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWidgetFromPointer(ptr).HasHeightForWidthDefault())))
}

func (ptr *QVideoWidget) ConnectHasHeightForWidth(f func() bool) {
	defer qt.Recovering("connect QVideoWidget::hasHeightForWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::hasHeightForWidth", f)
	}
}

func (ptr *QVideoWidget) DisconnectHasHeightForWidth() {
	defer qt.Recovering("disconnect QVideoWidget::hasHeightForWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::hasHeightForWidth")
	}
}

func (ptr *QVideoWidget) HasHeightForWidth() bool {
	defer qt.Recovering("QVideoWidget::hasHeightForWidth")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_HasHeightForWidth(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVideoWidget) HasHeightForWidthDefault() bool {
	defer qt.Recovering("QVideoWidget::hasHeightForWidth")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_HasHeightForWidthDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQVideoWidget_HeightForWidth
func callbackQVideoWidget_HeightForWidth(ptr unsafe.Pointer, w C.int) C.int {
	defer qt.Recovering("callback QVideoWidget::heightForWidth")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::heightForWidth"); signal != nil {
		return C.int(int32(signal.(func(int) int)(int(int32(w)))))
	}

	return C.int(int32(NewQVideoWidgetFromPointer(ptr).HeightForWidthDefault(int(int32(w)))))
}

func (ptr *QVideoWidget) ConnectHeightForWidth(f func(w int) int) {
	defer qt.Recovering("connect QVideoWidget::heightForWidth")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::heightForWidth", f)
	}
}

func (ptr *QVideoWidget) DisconnectHeightForWidth() {
	defer qt.Recovering("disconnect QVideoWidget::heightForWidth")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::heightForWidth")
	}
}

func (ptr *QVideoWidget) HeightForWidth(w int) int {
	defer qt.Recovering("QVideoWidget::heightForWidth")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidget_HeightForWidth(ptr.Pointer(), C.int(int32(w)))))
	}
	return 0
}

func (ptr *QVideoWidget) HeightForWidthDefault(w int) int {
	defer qt.Recovering("QVideoWidget::heightForWidth")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidget_HeightForWidthDefault(ptr.Pointer(), C.int(int32(w)))))
	}
	return 0
}

//export callbackQVideoWidget_Hide
func callbackQVideoWidget_Hide(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::hide")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::hide"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).HideDefault()
	}
}

func (ptr *QVideoWidget) ConnectHide(f func()) {
	defer qt.Recovering("connect QVideoWidget::hide")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::hide", f)
	}
}

func (ptr *QVideoWidget) DisconnectHide() {
	defer qt.Recovering("disconnect QVideoWidget::hide")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::hide")
	}
}

func (ptr *QVideoWidget) Hide() {
	defer qt.Recovering("QVideoWidget::hide")

	if ptr.Pointer() != nil {
		C.QVideoWidget_Hide(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) HideDefault() {
	defer qt.Recovering("QVideoWidget::hide")

	if ptr.Pointer() != nil {
		C.QVideoWidget_HideDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_InputMethodEvent
func callbackQVideoWidget_InputMethodEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::inputMethodEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::inputMethodEvent"); signal != nil {
		signal.(func(*gui.QInputMethodEvent))(gui.NewQInputMethodEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).InputMethodEventDefault(gui.NewQInputMethodEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectInputMethodEvent(f func(event *gui.QInputMethodEvent)) {
	defer qt.Recovering("connect QVideoWidget::inputMethodEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::inputMethodEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectInputMethodEvent() {
	defer qt.Recovering("disconnect QVideoWidget::inputMethodEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::inputMethodEvent")
	}
}

func (ptr *QVideoWidget) InputMethodEvent(event gui.QInputMethodEvent_ITF) {
	defer qt.Recovering("QVideoWidget::inputMethodEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_InputMethodEvent(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

func (ptr *QVideoWidget) InputMethodEventDefault(event gui.QInputMethodEvent_ITF) {
	defer qt.Recovering("QVideoWidget::inputMethodEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_InputMethodEventDefault(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

//export callbackQVideoWidget_InputMethodQuery
func callbackQVideoWidget_InputMethodQuery(ptr unsafe.Pointer, query C.longlong) unsafe.Pointer {
	defer qt.Recovering("callback QVideoWidget::inputMethodQuery")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::inputMethodQuery"); signal != nil {
		return core.PointerFromQVariant(signal.(func(core.Qt__InputMethodQuery) *core.QVariant)(core.Qt__InputMethodQuery(query)))
	}

	return core.PointerFromQVariant(NewQVideoWidgetFromPointer(ptr).InputMethodQueryDefault(core.Qt__InputMethodQuery(query)))
}

func (ptr *QVideoWidget) ConnectInputMethodQuery(f func(query core.Qt__InputMethodQuery) *core.QVariant) {
	defer qt.Recovering("connect QVideoWidget::inputMethodQuery")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::inputMethodQuery", f)
	}
}

func (ptr *QVideoWidget) DisconnectInputMethodQuery() {
	defer qt.Recovering("disconnect QVideoWidget::inputMethodQuery")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::inputMethodQuery")
	}
}

func (ptr *QVideoWidget) InputMethodQuery(query core.Qt__InputMethodQuery) *core.QVariant {
	defer qt.Recovering("QVideoWidget::inputMethodQuery")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QVideoWidget_InputMethodQuery(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QVideoWidget) InputMethodQueryDefault(query core.Qt__InputMethodQuery) *core.QVariant {
	defer qt.Recovering("QVideoWidget::inputMethodQuery")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QVideoWidget_InputMethodQueryDefault(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQVideoWidget_KeyPressEvent
func callbackQVideoWidget_KeyPressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::keyPressEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::keyPressEvent"); signal != nil {
		signal.(func(*gui.QKeyEvent))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).KeyPressEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectKeyPressEvent(f func(event *gui.QKeyEvent)) {
	defer qt.Recovering("connect QVideoWidget::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::keyPressEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectKeyPressEvent() {
	defer qt.Recovering("disconnect QVideoWidget::keyPressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::keyPressEvent")
	}
}

func (ptr *QVideoWidget) KeyPressEvent(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QVideoWidget::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_KeyPressEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QVideoWidget) KeyPressEventDefault(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QVideoWidget::keyPressEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_KeyPressEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQVideoWidget_KeyReleaseEvent
func callbackQVideoWidget_KeyReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::keyReleaseEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::keyReleaseEvent"); signal != nil {
		signal.(func(*gui.QKeyEvent))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).KeyReleaseEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectKeyReleaseEvent(f func(event *gui.QKeyEvent)) {
	defer qt.Recovering("connect QVideoWidget::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::keyReleaseEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectKeyReleaseEvent() {
	defer qt.Recovering("disconnect QVideoWidget::keyReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::keyReleaseEvent")
	}
}

func (ptr *QVideoWidget) KeyReleaseEvent(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QVideoWidget::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_KeyReleaseEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QVideoWidget) KeyReleaseEventDefault(event gui.QKeyEvent_ITF) {
	defer qt.Recovering("QVideoWidget::keyReleaseEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_KeyReleaseEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQVideoWidget_Lower
func callbackQVideoWidget_Lower(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::lower")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::lower"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).LowerDefault()
	}
}

func (ptr *QVideoWidget) ConnectLower(f func()) {
	defer qt.Recovering("connect QVideoWidget::lower")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::lower", f)
	}
}

func (ptr *QVideoWidget) DisconnectLower() {
	defer qt.Recovering("disconnect QVideoWidget::lower")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::lower")
	}
}

func (ptr *QVideoWidget) Lower() {
	defer qt.Recovering("QVideoWidget::lower")

	if ptr.Pointer() != nil {
		C.QVideoWidget_Lower(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) LowerDefault() {
	defer qt.Recovering("QVideoWidget::lower")

	if ptr.Pointer() != nil {
		C.QVideoWidget_LowerDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_MouseDoubleClickEvent
func callbackQVideoWidget_MouseDoubleClickEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::mouseDoubleClickEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::mouseDoubleClickEvent"); signal != nil {
		signal.(func(*gui.QMouseEvent))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).MouseDoubleClickEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectMouseDoubleClickEvent(f func(event *gui.QMouseEvent)) {
	defer qt.Recovering("connect QVideoWidget::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mouseDoubleClickEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectMouseDoubleClickEvent() {
	defer qt.Recovering("disconnect QVideoWidget::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mouseDoubleClickEvent")
	}
}

func (ptr *QVideoWidget) MouseDoubleClickEvent(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_MouseDoubleClickEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QVideoWidget) MouseDoubleClickEventDefault(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::mouseDoubleClickEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_MouseDoubleClickEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQVideoWidget_MouseMoveEvent
func callbackQVideoWidget_MouseMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::mouseMoveEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::mouseMoveEvent"); signal != nil {
		signal.(func(*gui.QMouseEvent))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).MouseMoveEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectMouseMoveEvent(f func(event *gui.QMouseEvent)) {
	defer qt.Recovering("connect QVideoWidget::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mouseMoveEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectMouseMoveEvent() {
	defer qt.Recovering("disconnect QVideoWidget::mouseMoveEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mouseMoveEvent")
	}
}

func (ptr *QVideoWidget) MouseMoveEvent(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_MouseMoveEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QVideoWidget) MouseMoveEventDefault(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::mouseMoveEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_MouseMoveEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQVideoWidget_MousePressEvent
func callbackQVideoWidget_MousePressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::mousePressEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::mousePressEvent"); signal != nil {
		signal.(func(*gui.QMouseEvent))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).MousePressEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectMousePressEvent(f func(event *gui.QMouseEvent)) {
	defer qt.Recovering("connect QVideoWidget::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mousePressEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectMousePressEvent() {
	defer qt.Recovering("disconnect QVideoWidget::mousePressEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mousePressEvent")
	}
}

func (ptr *QVideoWidget) MousePressEvent(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_MousePressEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QVideoWidget) MousePressEventDefault(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::mousePressEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_MousePressEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQVideoWidget_MouseReleaseEvent
func callbackQVideoWidget_MouseReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::mouseReleaseEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::mouseReleaseEvent"); signal != nil {
		signal.(func(*gui.QMouseEvent))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).MouseReleaseEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectMouseReleaseEvent(f func(event *gui.QMouseEvent)) {
	defer qt.Recovering("connect QVideoWidget::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mouseReleaseEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectMouseReleaseEvent() {
	defer qt.Recovering("disconnect QVideoWidget::mouseReleaseEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::mouseReleaseEvent")
	}
}

func (ptr *QVideoWidget) MouseReleaseEvent(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_MouseReleaseEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QVideoWidget) MouseReleaseEventDefault(event gui.QMouseEvent_ITF) {
	defer qt.Recovering("QVideoWidget::mouseReleaseEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_MouseReleaseEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQVideoWidget_NativeEvent
func callbackQVideoWidget_NativeEvent(ptr unsafe.Pointer, eventType *C.char, message unsafe.Pointer, result C.long) C.char {
	defer qt.Recovering("callback QVideoWidget::nativeEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::nativeEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(string, unsafe.Pointer, int) bool)(qt.HexDecodeToString(C.GoString(eventType)), message, int(int32(result))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWidgetFromPointer(ptr).NativeEventDefault(qt.HexDecodeToString(C.GoString(eventType)), message, int(int32(result))))))
}

func (ptr *QVideoWidget) ConnectNativeEvent(f func(eventType string, message unsafe.Pointer, result int) bool) {
	defer qt.Recovering("connect QVideoWidget::nativeEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::nativeEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectNativeEvent() {
	defer qt.Recovering("disconnect QVideoWidget::nativeEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::nativeEvent")
	}
}

func (ptr *QVideoWidget) NativeEvent(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QVideoWidget::nativeEvent")

	if ptr.Pointer() != nil {
		var eventTypeC = C.CString(hex.EncodeToString([]byte(eventType)))
		defer C.free(unsafe.Pointer(eventTypeC))
		return C.QVideoWidget_NativeEvent(ptr.Pointer(), eventTypeC, message, C.long(int32(result))) != 0
	}
	return false
}

func (ptr *QVideoWidget) NativeEventDefault(eventType string, message unsafe.Pointer, result int) bool {
	defer qt.Recovering("QVideoWidget::nativeEvent")

	if ptr.Pointer() != nil {
		var eventTypeC = C.CString(hex.EncodeToString([]byte(eventType)))
		defer C.free(unsafe.Pointer(eventTypeC))
		return C.QVideoWidget_NativeEventDefault(ptr.Pointer(), eventTypeC, message, C.long(int32(result))) != 0
	}
	return false
}

//export callbackQVideoWidget_Raise
func callbackQVideoWidget_Raise(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::raise")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::raise"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).RaiseDefault()
	}
}

func (ptr *QVideoWidget) ConnectRaise(f func()) {
	defer qt.Recovering("connect QVideoWidget::raise")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::raise", f)
	}
}

func (ptr *QVideoWidget) DisconnectRaise() {
	defer qt.Recovering("disconnect QVideoWidget::raise")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::raise")
	}
}

func (ptr *QVideoWidget) Raise() {
	defer qt.Recovering("QVideoWidget::raise")

	if ptr.Pointer() != nil {
		C.QVideoWidget_Raise(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) RaiseDefault() {
	defer qt.Recovering("QVideoWidget::raise")

	if ptr.Pointer() != nil {
		C.QVideoWidget_RaiseDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_Repaint
func callbackQVideoWidget_Repaint(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::repaint")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::repaint"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).RepaintDefault()
	}
}

func (ptr *QVideoWidget) ConnectRepaint(f func()) {
	defer qt.Recovering("connect QVideoWidget::repaint")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::repaint", f)
	}
}

func (ptr *QVideoWidget) DisconnectRepaint() {
	defer qt.Recovering("disconnect QVideoWidget::repaint")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::repaint")
	}
}

func (ptr *QVideoWidget) Repaint() {
	defer qt.Recovering("QVideoWidget::repaint")

	if ptr.Pointer() != nil {
		C.QVideoWidget_Repaint(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) RepaintDefault() {
	defer qt.Recovering("QVideoWidget::repaint")

	if ptr.Pointer() != nil {
		C.QVideoWidget_RepaintDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_SetDisabled
func callbackQVideoWidget_SetDisabled(ptr unsafe.Pointer, disable C.char) {
	defer qt.Recovering("callback QVideoWidget::setDisabled")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setDisabled"); signal != nil {
		signal.(func(bool))(int8(disable) != 0)
	} else {
		NewQVideoWidgetFromPointer(ptr).SetDisabledDefault(int8(disable) != 0)
	}
}

func (ptr *QVideoWidget) ConnectSetDisabled(f func(disable bool)) {
	defer qt.Recovering("connect QVideoWidget::setDisabled")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setDisabled", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetDisabled() {
	defer qt.Recovering("disconnect QVideoWidget::setDisabled")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setDisabled")
	}
}

func (ptr *QVideoWidget) SetDisabled(disable bool) {
	defer qt.Recovering("QVideoWidget::setDisabled")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetDisabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(disable))))
	}
}

func (ptr *QVideoWidget) SetDisabledDefault(disable bool) {
	defer qt.Recovering("QVideoWidget::setDisabled")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetDisabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(disable))))
	}
}

//export callbackQVideoWidget_SetFocus2
func callbackQVideoWidget_SetFocus2(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::setFocus")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setFocus2"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).SetFocus2Default()
	}
}

func (ptr *QVideoWidget) ConnectSetFocus2(f func()) {
	defer qt.Recovering("connect QVideoWidget::setFocus")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setFocus2", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetFocus2() {
	defer qt.Recovering("disconnect QVideoWidget::setFocus")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setFocus2")
	}
}

func (ptr *QVideoWidget) SetFocus2() {
	defer qt.Recovering("QVideoWidget::setFocus")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetFocus2(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) SetFocus2Default() {
	defer qt.Recovering("QVideoWidget::setFocus")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetFocus2Default(ptr.Pointer())
	}
}

//export callbackQVideoWidget_SetHidden
func callbackQVideoWidget_SetHidden(ptr unsafe.Pointer, hidden C.char) {
	defer qt.Recovering("callback QVideoWidget::setHidden")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setHidden"); signal != nil {
		signal.(func(bool))(int8(hidden) != 0)
	} else {
		NewQVideoWidgetFromPointer(ptr).SetHiddenDefault(int8(hidden) != 0)
	}
}

func (ptr *QVideoWidget) ConnectSetHidden(f func(hidden bool)) {
	defer qt.Recovering("connect QVideoWidget::setHidden")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setHidden", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetHidden() {
	defer qt.Recovering("disconnect QVideoWidget::setHidden")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setHidden")
	}
}

func (ptr *QVideoWidget) SetHidden(hidden bool) {
	defer qt.Recovering("QVideoWidget::setHidden")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetHidden(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(hidden))))
	}
}

func (ptr *QVideoWidget) SetHiddenDefault(hidden bool) {
	defer qt.Recovering("QVideoWidget::setHidden")

	if ptr.Pointer() != nil {
		C.QVideoWidget_SetHiddenDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(hidden))))
	}
}

//export callbackQVideoWidget_Show
func callbackQVideoWidget_Show(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::show")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::show"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).ShowDefault()
	}
}

func (ptr *QVideoWidget) ConnectShow(f func()) {
	defer qt.Recovering("connect QVideoWidget::show")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::show", f)
	}
}

func (ptr *QVideoWidget) DisconnectShow() {
	defer qt.Recovering("disconnect QVideoWidget::show")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::show")
	}
}

func (ptr *QVideoWidget) Show() {
	defer qt.Recovering("QVideoWidget::show")

	if ptr.Pointer() != nil {
		C.QVideoWidget_Show(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) ShowDefault() {
	defer qt.Recovering("QVideoWidget::show")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_ShowFullScreen
func callbackQVideoWidget_ShowFullScreen(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::showFullScreen")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::showFullScreen"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).ShowFullScreenDefault()
	}
}

func (ptr *QVideoWidget) ConnectShowFullScreen(f func()) {
	defer qt.Recovering("connect QVideoWidget::showFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::showFullScreen", f)
	}
}

func (ptr *QVideoWidget) DisconnectShowFullScreen() {
	defer qt.Recovering("disconnect QVideoWidget::showFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::showFullScreen")
	}
}

func (ptr *QVideoWidget) ShowFullScreen() {
	defer qt.Recovering("QVideoWidget::showFullScreen")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowFullScreen(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) ShowFullScreenDefault() {
	defer qt.Recovering("QVideoWidget::showFullScreen")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowFullScreenDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_ShowMaximized
func callbackQVideoWidget_ShowMaximized(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::showMaximized")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::showMaximized"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).ShowMaximizedDefault()
	}
}

func (ptr *QVideoWidget) ConnectShowMaximized(f func()) {
	defer qt.Recovering("connect QVideoWidget::showMaximized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::showMaximized", f)
	}
}

func (ptr *QVideoWidget) DisconnectShowMaximized() {
	defer qt.Recovering("disconnect QVideoWidget::showMaximized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::showMaximized")
	}
}

func (ptr *QVideoWidget) ShowMaximized() {
	defer qt.Recovering("QVideoWidget::showMaximized")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowMaximized(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) ShowMaximizedDefault() {
	defer qt.Recovering("QVideoWidget::showMaximized")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowMaximizedDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_ShowMinimized
func callbackQVideoWidget_ShowMinimized(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::showMinimized")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::showMinimized"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).ShowMinimizedDefault()
	}
}

func (ptr *QVideoWidget) ConnectShowMinimized(f func()) {
	defer qt.Recovering("connect QVideoWidget::showMinimized")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::showMinimized", f)
	}
}

func (ptr *QVideoWidget) DisconnectShowMinimized() {
	defer qt.Recovering("disconnect QVideoWidget::showMinimized")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::showMinimized")
	}
}

func (ptr *QVideoWidget) ShowMinimized() {
	defer qt.Recovering("QVideoWidget::showMinimized")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowMinimized(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) ShowMinimizedDefault() {
	defer qt.Recovering("QVideoWidget::showMinimized")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowMinimizedDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_ShowNormal
func callbackQVideoWidget_ShowNormal(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::showNormal")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::showNormal"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).ShowNormalDefault()
	}
}

func (ptr *QVideoWidget) ConnectShowNormal(f func()) {
	defer qt.Recovering("connect QVideoWidget::showNormal")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::showNormal", f)
	}
}

func (ptr *QVideoWidget) DisconnectShowNormal() {
	defer qt.Recovering("disconnect QVideoWidget::showNormal")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::showNormal")
	}
}

func (ptr *QVideoWidget) ShowNormal() {
	defer qt.Recovering("QVideoWidget::showNormal")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowNormal(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) ShowNormalDefault() {
	defer qt.Recovering("QVideoWidget::showNormal")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ShowNormalDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_TabletEvent
func callbackQVideoWidget_TabletEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::tabletEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::tabletEvent"); signal != nil {
		signal.(func(*gui.QTabletEvent))(gui.NewQTabletEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).TabletEventDefault(gui.NewQTabletEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectTabletEvent(f func(event *gui.QTabletEvent)) {
	defer qt.Recovering("connect QVideoWidget::tabletEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::tabletEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectTabletEvent() {
	defer qt.Recovering("disconnect QVideoWidget::tabletEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::tabletEvent")
	}
}

func (ptr *QVideoWidget) TabletEvent(event gui.QTabletEvent_ITF) {
	defer qt.Recovering("QVideoWidget::tabletEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_TabletEvent(ptr.Pointer(), gui.PointerFromQTabletEvent(event))
	}
}

func (ptr *QVideoWidget) TabletEventDefault(event gui.QTabletEvent_ITF) {
	defer qt.Recovering("QVideoWidget::tabletEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_TabletEventDefault(ptr.Pointer(), gui.PointerFromQTabletEvent(event))
	}
}

//export callbackQVideoWidget_Update
func callbackQVideoWidget_Update(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::update")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::update"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).UpdateDefault()
	}
}

func (ptr *QVideoWidget) ConnectUpdate(f func()) {
	defer qt.Recovering("connect QVideoWidget::update")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::update", f)
	}
}

func (ptr *QVideoWidget) DisconnectUpdate() {
	defer qt.Recovering("disconnect QVideoWidget::update")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::update")
	}
}

func (ptr *QVideoWidget) Update() {
	defer qt.Recovering("QVideoWidget::update")

	if ptr.Pointer() != nil {
		C.QVideoWidget_Update(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) UpdateDefault() {
	defer qt.Recovering("QVideoWidget::update")

	if ptr.Pointer() != nil {
		C.QVideoWidget_UpdateDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_UpdateMicroFocus
func callbackQVideoWidget_UpdateMicroFocus(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::updateMicroFocus")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::updateMicroFocus"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).UpdateMicroFocusDefault()
	}
}

func (ptr *QVideoWidget) ConnectUpdateMicroFocus(f func()) {
	defer qt.Recovering("connect QVideoWidget::updateMicroFocus")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::updateMicroFocus", f)
	}
}

func (ptr *QVideoWidget) DisconnectUpdateMicroFocus() {
	defer qt.Recovering("disconnect QVideoWidget::updateMicroFocus")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::updateMicroFocus")
	}
}

func (ptr *QVideoWidget) UpdateMicroFocus() {
	defer qt.Recovering("QVideoWidget::updateMicroFocus")

	if ptr.Pointer() != nil {
		C.QVideoWidget_UpdateMicroFocus(ptr.Pointer())
	}
}

func (ptr *QVideoWidget) UpdateMicroFocusDefault() {
	defer qt.Recovering("QVideoWidget::updateMicroFocus")

	if ptr.Pointer() != nil {
		C.QVideoWidget_UpdateMicroFocusDefault(ptr.Pointer())
	}
}

//export callbackQVideoWidget_WheelEvent
func callbackQVideoWidget_WheelEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::wheelEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::wheelEvent"); signal != nil {
		signal.(func(*gui.QWheelEvent))(gui.NewQWheelEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).WheelEventDefault(gui.NewQWheelEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectWheelEvent(f func(event *gui.QWheelEvent)) {
	defer qt.Recovering("connect QVideoWidget::wheelEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::wheelEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectWheelEvent() {
	defer qt.Recovering("disconnect QVideoWidget::wheelEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::wheelEvent")
	}
}

func (ptr *QVideoWidget) WheelEvent(event gui.QWheelEvent_ITF) {
	defer qt.Recovering("QVideoWidget::wheelEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_WheelEvent(ptr.Pointer(), gui.PointerFromQWheelEvent(event))
	}
}

func (ptr *QVideoWidget) WheelEventDefault(event gui.QWheelEvent_ITF) {
	defer qt.Recovering("QVideoWidget::wheelEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_WheelEventDefault(ptr.Pointer(), gui.PointerFromQWheelEvent(event))
	}
}

//export callbackQVideoWidget_TimerEvent
func callbackQVideoWidget_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QVideoWidget::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::timerEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QVideoWidget::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::timerEvent")
	}
}

func (ptr *QVideoWidget) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoWidget::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QVideoWidget) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoWidget::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQVideoWidget_ChildEvent
func callbackQVideoWidget_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QVideoWidget::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::childEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QVideoWidget::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::childEvent")
	}
}

func (ptr *QVideoWidget) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoWidget::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QVideoWidget) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoWidget::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQVideoWidget_ConnectNotify
func callbackQVideoWidget_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoWidgetFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoWidget) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoWidget::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::connectNotify", f)
	}
}

func (ptr *QVideoWidget) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QVideoWidget::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::connectNotify")
	}
}

func (ptr *QVideoWidget) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWidget::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoWidget) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWidget::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWidget_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoWidget_CustomEvent
func callbackQVideoWidget_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoWidgetFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoWidget) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoWidget::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::customEvent", f)
	}
}

func (ptr *QVideoWidget) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QVideoWidget::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::customEvent")
	}
}

func (ptr *QVideoWidget) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidget::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoWidget) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidget::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidget_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoWidget_DeleteLater
func callbackQVideoWidget_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QVideoWidget) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QVideoWidget::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::deleteLater", f)
	}
}

func (ptr *QVideoWidget) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QVideoWidget::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::deleteLater")
	}
}

func (ptr *QVideoWidget) DeleteLater() {
	defer qt.Recovering("QVideoWidget::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QVideoWidget) DeleteLaterDefault() {
	defer qt.Recovering("QVideoWidget::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoWidget_DisconnectNotify
func callbackQVideoWidget_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidget::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoWidgetFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoWidget) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoWidget::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::disconnectNotify", f)
	}
}

func (ptr *QVideoWidget) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QVideoWidget::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::disconnectNotify")
	}
}

func (ptr *QVideoWidget) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWidget::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoWidget) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWidget::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWidget_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoWidget_EventFilter
func callbackQVideoWidget_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWidget::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWidgetFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QVideoWidget) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoWidget::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::eventFilter", f)
	}
}

func (ptr *QVideoWidget) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QVideoWidget::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::eventFilter")
	}
}

func (ptr *QVideoWidget) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWidget::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QVideoWidget) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWidget::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVideoWidget_MetaObject
func callbackQVideoWidget_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoWidget::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQVideoWidgetFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QVideoWidget) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QVideoWidget::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::metaObject", f)
	}
}

func (ptr *QVideoWidget) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QVideoWidget::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::metaObject")
	}
}

func (ptr *QVideoWidget) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QVideoWidget::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoWidget_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVideoWidget) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QVideoWidget::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoWidget_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQVideoWidget_SetMediaObject
func callbackQVideoWidget_SetMediaObject(ptr unsafe.Pointer, object unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWidget::setMediaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidget::setMediaObject"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMediaObject) bool)(NewQMediaObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWidgetFromPointer(ptr).SetMediaObjectDefault(NewQMediaObjectFromPointer(object)))))
}

func (ptr *QVideoWidget) ConnectSetMediaObject(f func(object *QMediaObject) bool) {
	defer qt.Recovering("connect QVideoWidget::setMediaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setMediaObject", f)
	}
}

func (ptr *QVideoWidget) DisconnectSetMediaObject() {
	defer qt.Recovering("disconnect QVideoWidget::setMediaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidget::setMediaObject")
	}
}

func (ptr *QVideoWidget) SetMediaObject(object QMediaObject_ITF) bool {
	defer qt.Recovering("QVideoWidget::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_SetMediaObject(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

func (ptr *QVideoWidget) SetMediaObjectDefault(object QMediaObject_ITF) bool {
	defer qt.Recovering("QVideoWidget::setMediaObject")

	if ptr.Pointer() != nil {
		return C.QVideoWidget_SetMediaObjectDefault(ptr.Pointer(), PointerFromQMediaObject(object)) != 0
	}
	return false
}

type QVideoWidgetControl struct {
	QMediaControl
}

type QVideoWidgetControl_ITF interface {
	QMediaControl_ITF
	QVideoWidgetControl_PTR() *QVideoWidgetControl
}

func (p *QVideoWidgetControl) QVideoWidgetControl_PTR() *QVideoWidgetControl {
	return p
}

func (p *QVideoWidgetControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QVideoWidgetControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQVideoWidgetControl(ptr QVideoWidgetControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoWidgetControl_PTR().Pointer()
	}
	return nil
}

func NewQVideoWidgetControlFromPointer(ptr unsafe.Pointer) *QVideoWidgetControl {
	var n = new(QVideoWidgetControl)
	n.SetPointer(ptr)
	return n
}
func NewQVideoWidgetControl(parent core.QObject_ITF) *QVideoWidgetControl {
	defer qt.Recovering("QVideoWidgetControl::QVideoWidgetControl")

	var tmpValue = NewQVideoWidgetControlFromPointer(C.QVideoWidgetControl_NewQVideoWidgetControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQVideoWidgetControl_AspectRatioMode
func callbackQVideoWidgetControl_AspectRatioMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QVideoWidgetControl::aspectRatioMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::aspectRatioMode"); signal != nil {
		return C.longlong(signal.(func() core.Qt__AspectRatioMode)())
	}

	return C.longlong(0)
}

func (ptr *QVideoWidgetControl) ConnectAspectRatioMode(f func() core.Qt__AspectRatioMode) {
	defer qt.Recovering("connect QVideoWidgetControl::aspectRatioMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::aspectRatioMode", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectAspectRatioMode() {
	defer qt.Recovering("disconnect QVideoWidgetControl::aspectRatioMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::aspectRatioMode")
	}
}

func (ptr *QVideoWidgetControl) AspectRatioMode() core.Qt__AspectRatioMode {
	defer qt.Recovering("QVideoWidgetControl::aspectRatioMode")

	if ptr.Pointer() != nil {
		return core.Qt__AspectRatioMode(C.QVideoWidgetControl_AspectRatioMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQVideoWidgetControl_Brightness
func callbackQVideoWidgetControl_Brightness(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoWidgetControl::brightness")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::brightness"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoWidgetControl) ConnectBrightness(f func() int) {
	defer qt.Recovering("connect QVideoWidgetControl::brightness")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::brightness", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectBrightness() {
	defer qt.Recovering("disconnect QVideoWidgetControl::brightness")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::brightness")
	}
}

func (ptr *QVideoWidgetControl) Brightness() int {
	defer qt.Recovering("QVideoWidgetControl::brightness")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidgetControl_Brightness(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWidgetControl_BrightnessChanged
func callbackQVideoWidgetControl_BrightnessChanged(ptr unsafe.Pointer, brightness C.int) {
	defer qt.Recovering("callback QVideoWidgetControl::brightnessChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::brightnessChanged"); signal != nil {
		signal.(func(int))(int(int32(brightness)))
	}

}

func (ptr *QVideoWidgetControl) ConnectBrightnessChanged(f func(brightness int)) {
	defer qt.Recovering("connect QVideoWidgetControl::brightnessChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ConnectBrightnessChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::brightnessChanged", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectBrightnessChanged() {
	defer qt.Recovering("disconnect QVideoWidgetControl::brightnessChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DisconnectBrightnessChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::brightnessChanged")
	}
}

func (ptr *QVideoWidgetControl) BrightnessChanged(brightness int) {
	defer qt.Recovering("QVideoWidgetControl::brightnessChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_BrightnessChanged(ptr.Pointer(), C.int(int32(brightness)))
	}
}

//export callbackQVideoWidgetControl_Contrast
func callbackQVideoWidgetControl_Contrast(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoWidgetControl::contrast")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::contrast"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoWidgetControl) ConnectContrast(f func() int) {
	defer qt.Recovering("connect QVideoWidgetControl::contrast")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::contrast", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectContrast() {
	defer qt.Recovering("disconnect QVideoWidgetControl::contrast")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::contrast")
	}
}

func (ptr *QVideoWidgetControl) Contrast() int {
	defer qt.Recovering("QVideoWidgetControl::contrast")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidgetControl_Contrast(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWidgetControl_ContrastChanged
func callbackQVideoWidgetControl_ContrastChanged(ptr unsafe.Pointer, contrast C.int) {
	defer qt.Recovering("callback QVideoWidgetControl::contrastChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::contrastChanged"); signal != nil {
		signal.(func(int))(int(int32(contrast)))
	}

}

func (ptr *QVideoWidgetControl) ConnectContrastChanged(f func(contrast int)) {
	defer qt.Recovering("connect QVideoWidgetControl::contrastChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ConnectContrastChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::contrastChanged", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectContrastChanged() {
	defer qt.Recovering("disconnect QVideoWidgetControl::contrastChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DisconnectContrastChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::contrastChanged")
	}
}

func (ptr *QVideoWidgetControl) ContrastChanged(contrast int) {
	defer qt.Recovering("QVideoWidgetControl::contrastChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ContrastChanged(ptr.Pointer(), C.int(int32(contrast)))
	}
}

//export callbackQVideoWidgetControl_FullScreenChanged
func callbackQVideoWidgetControl_FullScreenChanged(ptr unsafe.Pointer, fullScreen C.char) {
	defer qt.Recovering("callback QVideoWidgetControl::fullScreenChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::fullScreenChanged"); signal != nil {
		signal.(func(bool))(int8(fullScreen) != 0)
	}

}

func (ptr *QVideoWidgetControl) ConnectFullScreenChanged(f func(fullScreen bool)) {
	defer qt.Recovering("connect QVideoWidgetControl::fullScreenChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ConnectFullScreenChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::fullScreenChanged", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectFullScreenChanged() {
	defer qt.Recovering("disconnect QVideoWidgetControl::fullScreenChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DisconnectFullScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::fullScreenChanged")
	}
}

func (ptr *QVideoWidgetControl) FullScreenChanged(fullScreen bool) {
	defer qt.Recovering("QVideoWidgetControl::fullScreenChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_FullScreenChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fullScreen))))
	}
}

//export callbackQVideoWidgetControl_Hue
func callbackQVideoWidgetControl_Hue(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoWidgetControl::hue")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::hue"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoWidgetControl) ConnectHue(f func() int) {
	defer qt.Recovering("connect QVideoWidgetControl::hue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::hue", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectHue() {
	defer qt.Recovering("disconnect QVideoWidgetControl::hue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::hue")
	}
}

func (ptr *QVideoWidgetControl) Hue() int {
	defer qt.Recovering("QVideoWidgetControl::hue")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidgetControl_Hue(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWidgetControl_HueChanged
func callbackQVideoWidgetControl_HueChanged(ptr unsafe.Pointer, hue C.int) {
	defer qt.Recovering("callback QVideoWidgetControl::hueChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::hueChanged"); signal != nil {
		signal.(func(int))(int(int32(hue)))
	}

}

func (ptr *QVideoWidgetControl) ConnectHueChanged(f func(hue int)) {
	defer qt.Recovering("connect QVideoWidgetControl::hueChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ConnectHueChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::hueChanged", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectHueChanged() {
	defer qt.Recovering("disconnect QVideoWidgetControl::hueChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DisconnectHueChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::hueChanged")
	}
}

func (ptr *QVideoWidgetControl) HueChanged(hue int) {
	defer qt.Recovering("QVideoWidgetControl::hueChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_HueChanged(ptr.Pointer(), C.int(int32(hue)))
	}
}

//export callbackQVideoWidgetControl_IsFullScreen
func callbackQVideoWidgetControl_IsFullScreen(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWidgetControl::isFullScreen")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::isFullScreen"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QVideoWidgetControl) ConnectIsFullScreen(f func() bool) {
	defer qt.Recovering("connect QVideoWidgetControl::isFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::isFullScreen", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectIsFullScreen() {
	defer qt.Recovering("disconnect QVideoWidgetControl::isFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::isFullScreen")
	}
}

func (ptr *QVideoWidgetControl) IsFullScreen() bool {
	defer qt.Recovering("QVideoWidgetControl::isFullScreen")

	if ptr.Pointer() != nil {
		return C.QVideoWidgetControl_IsFullScreen(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQVideoWidgetControl_Saturation
func callbackQVideoWidgetControl_Saturation(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoWidgetControl::saturation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::saturation"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoWidgetControl) ConnectSaturation(f func() int) {
	defer qt.Recovering("connect QVideoWidgetControl::saturation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::saturation", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectSaturation() {
	defer qt.Recovering("disconnect QVideoWidgetControl::saturation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::saturation")
	}
}

func (ptr *QVideoWidgetControl) Saturation() int {
	defer qt.Recovering("QVideoWidgetControl::saturation")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWidgetControl_Saturation(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWidgetControl_SaturationChanged
func callbackQVideoWidgetControl_SaturationChanged(ptr unsafe.Pointer, saturation C.int) {
	defer qt.Recovering("callback QVideoWidgetControl::saturationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::saturationChanged"); signal != nil {
		signal.(func(int))(int(int32(saturation)))
	}

}

func (ptr *QVideoWidgetControl) ConnectSaturationChanged(f func(saturation int)) {
	defer qt.Recovering("connect QVideoWidgetControl::saturationChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ConnectSaturationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::saturationChanged", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectSaturationChanged() {
	defer qt.Recovering("disconnect QVideoWidgetControl::saturationChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DisconnectSaturationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::saturationChanged")
	}
}

func (ptr *QVideoWidgetControl) SaturationChanged(saturation int) {
	defer qt.Recovering("QVideoWidgetControl::saturationChanged")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_SaturationChanged(ptr.Pointer(), C.int(int32(saturation)))
	}
}

//export callbackQVideoWidgetControl_SetAspectRatioMode
func callbackQVideoWidgetControl_SetAspectRatioMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QVideoWidgetControl::setAspectRatioMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::setAspectRatioMode"); signal != nil {
		signal.(func(core.Qt__AspectRatioMode))(core.Qt__AspectRatioMode(mode))
	}

}

func (ptr *QVideoWidgetControl) ConnectSetAspectRatioMode(f func(mode core.Qt__AspectRatioMode)) {
	defer qt.Recovering("connect QVideoWidgetControl::setAspectRatioMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setAspectRatioMode", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectSetAspectRatioMode(mode core.Qt__AspectRatioMode) {
	defer qt.Recovering("disconnect QVideoWidgetControl::setAspectRatioMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setAspectRatioMode")
	}
}

func (ptr *QVideoWidgetControl) SetAspectRatioMode(mode core.Qt__AspectRatioMode) {
	defer qt.Recovering("QVideoWidgetControl::setAspectRatioMode")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_SetAspectRatioMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQVideoWidgetControl_SetBrightness
func callbackQVideoWidgetControl_SetBrightness(ptr unsafe.Pointer, brightness C.int) {
	defer qt.Recovering("callback QVideoWidgetControl::setBrightness")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::setBrightness"); signal != nil {
		signal.(func(int))(int(int32(brightness)))
	}

}

func (ptr *QVideoWidgetControl) ConnectSetBrightness(f func(brightness int)) {
	defer qt.Recovering("connect QVideoWidgetControl::setBrightness")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setBrightness", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectSetBrightness(brightness int) {
	defer qt.Recovering("disconnect QVideoWidgetControl::setBrightness")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setBrightness")
	}
}

func (ptr *QVideoWidgetControl) SetBrightness(brightness int) {
	defer qt.Recovering("QVideoWidgetControl::setBrightness")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_SetBrightness(ptr.Pointer(), C.int(int32(brightness)))
	}
}

//export callbackQVideoWidgetControl_SetContrast
func callbackQVideoWidgetControl_SetContrast(ptr unsafe.Pointer, contrast C.int) {
	defer qt.Recovering("callback QVideoWidgetControl::setContrast")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::setContrast"); signal != nil {
		signal.(func(int))(int(int32(contrast)))
	}

}

func (ptr *QVideoWidgetControl) ConnectSetContrast(f func(contrast int)) {
	defer qt.Recovering("connect QVideoWidgetControl::setContrast")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setContrast", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectSetContrast(contrast int) {
	defer qt.Recovering("disconnect QVideoWidgetControl::setContrast")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setContrast")
	}
}

func (ptr *QVideoWidgetControl) SetContrast(contrast int) {
	defer qt.Recovering("QVideoWidgetControl::setContrast")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_SetContrast(ptr.Pointer(), C.int(int32(contrast)))
	}
}

//export callbackQVideoWidgetControl_SetFullScreen
func callbackQVideoWidgetControl_SetFullScreen(ptr unsafe.Pointer, fullScreen C.char) {
	defer qt.Recovering("callback QVideoWidgetControl::setFullScreen")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::setFullScreen"); signal != nil {
		signal.(func(bool))(int8(fullScreen) != 0)
	}

}

func (ptr *QVideoWidgetControl) ConnectSetFullScreen(f func(fullScreen bool)) {
	defer qt.Recovering("connect QVideoWidgetControl::setFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setFullScreen", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectSetFullScreen(fullScreen bool) {
	defer qt.Recovering("disconnect QVideoWidgetControl::setFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setFullScreen")
	}
}

func (ptr *QVideoWidgetControl) SetFullScreen(fullScreen bool) {
	defer qt.Recovering("QVideoWidgetControl::setFullScreen")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_SetFullScreen(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fullScreen))))
	}
}

//export callbackQVideoWidgetControl_SetHue
func callbackQVideoWidgetControl_SetHue(ptr unsafe.Pointer, hue C.int) {
	defer qt.Recovering("callback QVideoWidgetControl::setHue")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::setHue"); signal != nil {
		signal.(func(int))(int(int32(hue)))
	}

}

func (ptr *QVideoWidgetControl) ConnectSetHue(f func(hue int)) {
	defer qt.Recovering("connect QVideoWidgetControl::setHue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setHue", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectSetHue(hue int) {
	defer qt.Recovering("disconnect QVideoWidgetControl::setHue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setHue")
	}
}

func (ptr *QVideoWidgetControl) SetHue(hue int) {
	defer qt.Recovering("QVideoWidgetControl::setHue")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_SetHue(ptr.Pointer(), C.int(int32(hue)))
	}
}

//export callbackQVideoWidgetControl_SetSaturation
func callbackQVideoWidgetControl_SetSaturation(ptr unsafe.Pointer, saturation C.int) {
	defer qt.Recovering("callback QVideoWidgetControl::setSaturation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::setSaturation"); signal != nil {
		signal.(func(int))(int(int32(saturation)))
	}

}

func (ptr *QVideoWidgetControl) ConnectSetSaturation(f func(saturation int)) {
	defer qt.Recovering("connect QVideoWidgetControl::setSaturation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setSaturation", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectSetSaturation(saturation int) {
	defer qt.Recovering("disconnect QVideoWidgetControl::setSaturation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::setSaturation")
	}
}

func (ptr *QVideoWidgetControl) SetSaturation(saturation int) {
	defer qt.Recovering("QVideoWidgetControl::setSaturation")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_SetSaturation(ptr.Pointer(), C.int(int32(saturation)))
	}
}

//export callbackQVideoWidgetControl_VideoWidget
func callbackQVideoWidgetControl_VideoWidget(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoWidgetControl::videoWidget")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::videoWidget"); signal != nil {
		return widgets.PointerFromQWidget(signal.(func() *widgets.QWidget)())
	}

	return widgets.PointerFromQWidget(nil)
}

func (ptr *QVideoWidgetControl) ConnectVideoWidget(f func() *widgets.QWidget) {
	defer qt.Recovering("connect QVideoWidgetControl::videoWidget")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::videoWidget", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectVideoWidget() {
	defer qt.Recovering("disconnect QVideoWidgetControl::videoWidget")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::videoWidget")
	}
}

func (ptr *QVideoWidgetControl) VideoWidget() *widgets.QWidget {
	defer qt.Recovering("QVideoWidgetControl::videoWidget")

	if ptr.Pointer() != nil {
		var tmpValue = widgets.NewQWidgetFromPointer(C.QVideoWidgetControl_VideoWidget(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QVideoWidgetControl) DestroyQVideoWidgetControl() {
	defer qt.Recovering("QVideoWidgetControl::~QVideoWidgetControl")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DestroyQVideoWidgetControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoWidgetControl_TimerEvent
func callbackQVideoWidgetControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidgetControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQVideoWidgetControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QVideoWidgetControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QVideoWidgetControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::timerEvent", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QVideoWidgetControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::timerEvent")
	}
}

func (ptr *QVideoWidgetControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoWidgetControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QVideoWidgetControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoWidgetControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQVideoWidgetControl_ChildEvent
func callbackQVideoWidgetControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidgetControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQVideoWidgetControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QVideoWidgetControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QVideoWidgetControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::childEvent", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QVideoWidgetControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::childEvent")
	}
}

func (ptr *QVideoWidgetControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoWidgetControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QVideoWidgetControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoWidgetControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQVideoWidgetControl_ConnectNotify
func callbackQVideoWidgetControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidgetControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoWidgetControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoWidgetControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoWidgetControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::connectNotify", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QVideoWidgetControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::connectNotify")
	}
}

func (ptr *QVideoWidgetControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWidgetControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoWidgetControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWidgetControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoWidgetControl_CustomEvent
func callbackQVideoWidgetControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidgetControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoWidgetControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoWidgetControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoWidgetControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::customEvent", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QVideoWidgetControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::customEvent")
	}
}

func (ptr *QVideoWidgetControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidgetControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoWidgetControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWidgetControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoWidgetControl_DeleteLater
func callbackQVideoWidgetControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidgetControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWidgetControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QVideoWidgetControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QVideoWidgetControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::deleteLater", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QVideoWidgetControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::deleteLater")
	}
}

func (ptr *QVideoWidgetControl) DeleteLater() {
	defer qt.Recovering("QVideoWidgetControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QVideoWidgetControl) DeleteLaterDefault() {
	defer qt.Recovering("QVideoWidgetControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoWidgetControl_DisconnectNotify
func callbackQVideoWidgetControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWidgetControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoWidgetControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoWidgetControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoWidgetControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::disconnectNotify", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QVideoWidgetControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::disconnectNotify")
	}
}

func (ptr *QVideoWidgetControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWidgetControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoWidgetControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWidgetControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWidgetControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoWidgetControl_Event
func callbackQVideoWidgetControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWidgetControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWidgetControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QVideoWidgetControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoWidgetControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::event", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QVideoWidgetControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::event")
	}
}

func (ptr *QVideoWidgetControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWidgetControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoWidgetControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QVideoWidgetControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWidgetControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoWidgetControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQVideoWidgetControl_EventFilter
func callbackQVideoWidgetControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWidgetControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWidgetControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QVideoWidgetControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoWidgetControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::eventFilter", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QVideoWidgetControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::eventFilter")
	}
}

func (ptr *QVideoWidgetControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWidgetControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoWidgetControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QVideoWidgetControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWidgetControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoWidgetControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVideoWidgetControl_MetaObject
func callbackQVideoWidgetControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoWidgetControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWidgetControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQVideoWidgetControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QVideoWidgetControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QVideoWidgetControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::metaObject", f)
	}
}

func (ptr *QVideoWidgetControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QVideoWidgetControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWidgetControl::metaObject")
	}
}

func (ptr *QVideoWidgetControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QVideoWidgetControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoWidgetControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVideoWidgetControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QVideoWidgetControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoWidgetControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QVideoWindowControl struct {
	QMediaControl
}

type QVideoWindowControl_ITF interface {
	QMediaControl_ITF
	QVideoWindowControl_PTR() *QVideoWindowControl
}

func (p *QVideoWindowControl) QVideoWindowControl_PTR() *QVideoWindowControl {
	return p
}

func (p *QVideoWindowControl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMediaControl_PTR().Pointer()
	}
	return nil
}

func (p *QVideoWindowControl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMediaControl_PTR().SetPointer(ptr)
	}
}

func PointerFromQVideoWindowControl(ptr QVideoWindowControl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVideoWindowControl_PTR().Pointer()
	}
	return nil
}

func NewQVideoWindowControlFromPointer(ptr unsafe.Pointer) *QVideoWindowControl {
	var n = new(QVideoWindowControl)
	n.SetPointer(ptr)
	return n
}
func NewQVideoWindowControl(parent core.QObject_ITF) *QVideoWindowControl {
	defer qt.Recovering("QVideoWindowControl::QVideoWindowControl")

	var tmpValue = NewQVideoWindowControlFromPointer(C.QVideoWindowControl_NewQVideoWindowControl(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQVideoWindowControl_AspectRatioMode
func callbackQVideoWindowControl_AspectRatioMode(ptr unsafe.Pointer) C.longlong {
	defer qt.Recovering("callback QVideoWindowControl::aspectRatioMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::aspectRatioMode"); signal != nil {
		return C.longlong(signal.(func() core.Qt__AspectRatioMode)())
	}

	return C.longlong(0)
}

func (ptr *QVideoWindowControl) ConnectAspectRatioMode(f func() core.Qt__AspectRatioMode) {
	defer qt.Recovering("connect QVideoWindowControl::aspectRatioMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::aspectRatioMode", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectAspectRatioMode() {
	defer qt.Recovering("disconnect QVideoWindowControl::aspectRatioMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::aspectRatioMode")
	}
}

func (ptr *QVideoWindowControl) AspectRatioMode() core.Qt__AspectRatioMode {
	defer qt.Recovering("QVideoWindowControl::aspectRatioMode")

	if ptr.Pointer() != nil {
		return core.Qt__AspectRatioMode(C.QVideoWindowControl_AspectRatioMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQVideoWindowControl_Brightness
func callbackQVideoWindowControl_Brightness(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoWindowControl::brightness")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::brightness"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoWindowControl) ConnectBrightness(f func() int) {
	defer qt.Recovering("connect QVideoWindowControl::brightness")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::brightness", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectBrightness() {
	defer qt.Recovering("disconnect QVideoWindowControl::brightness")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::brightness")
	}
}

func (ptr *QVideoWindowControl) Brightness() int {
	defer qt.Recovering("QVideoWindowControl::brightness")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWindowControl_Brightness(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWindowControl_BrightnessChanged
func callbackQVideoWindowControl_BrightnessChanged(ptr unsafe.Pointer, brightness C.int) {
	defer qt.Recovering("callback QVideoWindowControl::brightnessChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::brightnessChanged"); signal != nil {
		signal.(func(int))(int(int32(brightness)))
	}

}

func (ptr *QVideoWindowControl) ConnectBrightnessChanged(f func(brightness int)) {
	defer qt.Recovering("connect QVideoWindowControl::brightnessChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ConnectBrightnessChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::brightnessChanged", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectBrightnessChanged() {
	defer qt.Recovering("disconnect QVideoWindowControl::brightnessChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DisconnectBrightnessChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::brightnessChanged")
	}
}

func (ptr *QVideoWindowControl) BrightnessChanged(brightness int) {
	defer qt.Recovering("QVideoWindowControl::brightnessChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_BrightnessChanged(ptr.Pointer(), C.int(int32(brightness)))
	}
}

//export callbackQVideoWindowControl_Contrast
func callbackQVideoWindowControl_Contrast(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoWindowControl::contrast")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::contrast"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoWindowControl) ConnectContrast(f func() int) {
	defer qt.Recovering("connect QVideoWindowControl::contrast")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::contrast", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectContrast() {
	defer qt.Recovering("disconnect QVideoWindowControl::contrast")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::contrast")
	}
}

func (ptr *QVideoWindowControl) Contrast() int {
	defer qt.Recovering("QVideoWindowControl::contrast")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWindowControl_Contrast(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWindowControl_ContrastChanged
func callbackQVideoWindowControl_ContrastChanged(ptr unsafe.Pointer, contrast C.int) {
	defer qt.Recovering("callback QVideoWindowControl::contrastChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::contrastChanged"); signal != nil {
		signal.(func(int))(int(int32(contrast)))
	}

}

func (ptr *QVideoWindowControl) ConnectContrastChanged(f func(contrast int)) {
	defer qt.Recovering("connect QVideoWindowControl::contrastChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ConnectContrastChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::contrastChanged", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectContrastChanged() {
	defer qt.Recovering("disconnect QVideoWindowControl::contrastChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DisconnectContrastChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::contrastChanged")
	}
}

func (ptr *QVideoWindowControl) ContrastChanged(contrast int) {
	defer qt.Recovering("QVideoWindowControl::contrastChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ContrastChanged(ptr.Pointer(), C.int(int32(contrast)))
	}
}

//export callbackQVideoWindowControl_DisplayRect
func callbackQVideoWindowControl_DisplayRect(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoWindowControl::displayRect")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::displayRect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(nil)
}

func (ptr *QVideoWindowControl) ConnectDisplayRect(f func() *core.QRect) {
	defer qt.Recovering("connect QVideoWindowControl::displayRect")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::displayRect", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectDisplayRect() {
	defer qt.Recovering("disconnect QVideoWindowControl::displayRect")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::displayRect")
	}
}

func (ptr *QVideoWindowControl) DisplayRect() *core.QRect {
	defer qt.Recovering("QVideoWindowControl::displayRect")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QVideoWindowControl_DisplayRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQVideoWindowControl_FullScreenChanged
func callbackQVideoWindowControl_FullScreenChanged(ptr unsafe.Pointer, fullScreen C.char) {
	defer qt.Recovering("callback QVideoWindowControl::fullScreenChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::fullScreenChanged"); signal != nil {
		signal.(func(bool))(int8(fullScreen) != 0)
	}

}

func (ptr *QVideoWindowControl) ConnectFullScreenChanged(f func(fullScreen bool)) {
	defer qt.Recovering("connect QVideoWindowControl::fullScreenChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ConnectFullScreenChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::fullScreenChanged", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectFullScreenChanged() {
	defer qt.Recovering("disconnect QVideoWindowControl::fullScreenChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DisconnectFullScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::fullScreenChanged")
	}
}

func (ptr *QVideoWindowControl) FullScreenChanged(fullScreen bool) {
	defer qt.Recovering("QVideoWindowControl::fullScreenChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_FullScreenChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fullScreen))))
	}
}

//export callbackQVideoWindowControl_Hue
func callbackQVideoWindowControl_Hue(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoWindowControl::hue")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::hue"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoWindowControl) ConnectHue(f func() int) {
	defer qt.Recovering("connect QVideoWindowControl::hue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::hue", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectHue() {
	defer qt.Recovering("disconnect QVideoWindowControl::hue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::hue")
	}
}

func (ptr *QVideoWindowControl) Hue() int {
	defer qt.Recovering("QVideoWindowControl::hue")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWindowControl_Hue(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWindowControl_HueChanged
func callbackQVideoWindowControl_HueChanged(ptr unsafe.Pointer, hue C.int) {
	defer qt.Recovering("callback QVideoWindowControl::hueChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::hueChanged"); signal != nil {
		signal.(func(int))(int(int32(hue)))
	}

}

func (ptr *QVideoWindowControl) ConnectHueChanged(f func(hue int)) {
	defer qt.Recovering("connect QVideoWindowControl::hueChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ConnectHueChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::hueChanged", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectHueChanged() {
	defer qt.Recovering("disconnect QVideoWindowControl::hueChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DisconnectHueChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::hueChanged")
	}
}

func (ptr *QVideoWindowControl) HueChanged(hue int) {
	defer qt.Recovering("QVideoWindowControl::hueChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_HueChanged(ptr.Pointer(), C.int(int32(hue)))
	}
}

//export callbackQVideoWindowControl_IsFullScreen
func callbackQVideoWindowControl_IsFullScreen(ptr unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWindowControl::isFullScreen")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::isFullScreen"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QVideoWindowControl) ConnectIsFullScreen(f func() bool) {
	defer qt.Recovering("connect QVideoWindowControl::isFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::isFullScreen", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectIsFullScreen() {
	defer qt.Recovering("disconnect QVideoWindowControl::isFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::isFullScreen")
	}
}

func (ptr *QVideoWindowControl) IsFullScreen() bool {
	defer qt.Recovering("QVideoWindowControl::isFullScreen")

	if ptr.Pointer() != nil {
		return C.QVideoWindowControl_IsFullScreen(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQVideoWindowControl_NativeSize
func callbackQVideoWindowControl_NativeSize(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoWindowControl::nativeSize")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::nativeSize"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(nil)
}

func (ptr *QVideoWindowControl) ConnectNativeSize(f func() *core.QSize) {
	defer qt.Recovering("connect QVideoWindowControl::nativeSize")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::nativeSize", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectNativeSize() {
	defer qt.Recovering("disconnect QVideoWindowControl::nativeSize")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::nativeSize")
	}
}

func (ptr *QVideoWindowControl) NativeSize() *core.QSize {
	defer qt.Recovering("QVideoWindowControl::nativeSize")

	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QVideoWindowControl_NativeSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQVideoWindowControl_NativeSizeChanged
func callbackQVideoWindowControl_NativeSizeChanged(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWindowControl::nativeSizeChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::nativeSizeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QVideoWindowControl) ConnectNativeSizeChanged(f func()) {
	defer qt.Recovering("connect QVideoWindowControl::nativeSizeChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ConnectNativeSizeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::nativeSizeChanged", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectNativeSizeChanged() {
	defer qt.Recovering("disconnect QVideoWindowControl::nativeSizeChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DisconnectNativeSizeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::nativeSizeChanged")
	}
}

func (ptr *QVideoWindowControl) NativeSizeChanged() {
	defer qt.Recovering("QVideoWindowControl::nativeSizeChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_NativeSizeChanged(ptr.Pointer())
	}
}

//export callbackQVideoWindowControl_Repaint
func callbackQVideoWindowControl_Repaint(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWindowControl::repaint")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::repaint"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QVideoWindowControl) ConnectRepaint(f func()) {
	defer qt.Recovering("connect QVideoWindowControl::repaint")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::repaint", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectRepaint() {
	defer qt.Recovering("disconnect QVideoWindowControl::repaint")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::repaint")
	}
}

func (ptr *QVideoWindowControl) Repaint() {
	defer qt.Recovering("QVideoWindowControl::repaint")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_Repaint(ptr.Pointer())
	}
}

//export callbackQVideoWindowControl_Saturation
func callbackQVideoWindowControl_Saturation(ptr unsafe.Pointer) C.int {
	defer qt.Recovering("callback QVideoWindowControl::saturation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::saturation"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QVideoWindowControl) ConnectSaturation(f func() int) {
	defer qt.Recovering("connect QVideoWindowControl::saturation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::saturation", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSaturation() {
	defer qt.Recovering("disconnect QVideoWindowControl::saturation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::saturation")
	}
}

func (ptr *QVideoWindowControl) Saturation() int {
	defer qt.Recovering("QVideoWindowControl::saturation")

	if ptr.Pointer() != nil {
		return int(int32(C.QVideoWindowControl_Saturation(ptr.Pointer())))
	}
	return 0
}

//export callbackQVideoWindowControl_SaturationChanged
func callbackQVideoWindowControl_SaturationChanged(ptr unsafe.Pointer, saturation C.int) {
	defer qt.Recovering("callback QVideoWindowControl::saturationChanged")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::saturationChanged"); signal != nil {
		signal.(func(int))(int(int32(saturation)))
	}

}

func (ptr *QVideoWindowControl) ConnectSaturationChanged(f func(saturation int)) {
	defer qt.Recovering("connect QVideoWindowControl::saturationChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ConnectSaturationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::saturationChanged", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSaturationChanged() {
	defer qt.Recovering("disconnect QVideoWindowControl::saturationChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DisconnectSaturationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::saturationChanged")
	}
}

func (ptr *QVideoWindowControl) SaturationChanged(saturation int) {
	defer qt.Recovering("QVideoWindowControl::saturationChanged")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_SaturationChanged(ptr.Pointer(), C.int(int32(saturation)))
	}
}

//export callbackQVideoWindowControl_SetAspectRatioMode
func callbackQVideoWindowControl_SetAspectRatioMode(ptr unsafe.Pointer, mode C.longlong) {
	defer qt.Recovering("callback QVideoWindowControl::setAspectRatioMode")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::setAspectRatioMode"); signal != nil {
		signal.(func(core.Qt__AspectRatioMode))(core.Qt__AspectRatioMode(mode))
	}

}

func (ptr *QVideoWindowControl) ConnectSetAspectRatioMode(f func(mode core.Qt__AspectRatioMode)) {
	defer qt.Recovering("connect QVideoWindowControl::setAspectRatioMode")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setAspectRatioMode", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSetAspectRatioMode(mode core.Qt__AspectRatioMode) {
	defer qt.Recovering("disconnect QVideoWindowControl::setAspectRatioMode")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setAspectRatioMode")
	}
}

func (ptr *QVideoWindowControl) SetAspectRatioMode(mode core.Qt__AspectRatioMode) {
	defer qt.Recovering("QVideoWindowControl::setAspectRatioMode")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_SetAspectRatioMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQVideoWindowControl_SetBrightness
func callbackQVideoWindowControl_SetBrightness(ptr unsafe.Pointer, brightness C.int) {
	defer qt.Recovering("callback QVideoWindowControl::setBrightness")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::setBrightness"); signal != nil {
		signal.(func(int))(int(int32(brightness)))
	}

}

func (ptr *QVideoWindowControl) ConnectSetBrightness(f func(brightness int)) {
	defer qt.Recovering("connect QVideoWindowControl::setBrightness")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setBrightness", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSetBrightness(brightness int) {
	defer qt.Recovering("disconnect QVideoWindowControl::setBrightness")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setBrightness")
	}
}

func (ptr *QVideoWindowControl) SetBrightness(brightness int) {
	defer qt.Recovering("QVideoWindowControl::setBrightness")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_SetBrightness(ptr.Pointer(), C.int(int32(brightness)))
	}
}

//export callbackQVideoWindowControl_SetContrast
func callbackQVideoWindowControl_SetContrast(ptr unsafe.Pointer, contrast C.int) {
	defer qt.Recovering("callback QVideoWindowControl::setContrast")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::setContrast"); signal != nil {
		signal.(func(int))(int(int32(contrast)))
	}

}

func (ptr *QVideoWindowControl) ConnectSetContrast(f func(contrast int)) {
	defer qt.Recovering("connect QVideoWindowControl::setContrast")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setContrast", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSetContrast(contrast int) {
	defer qt.Recovering("disconnect QVideoWindowControl::setContrast")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setContrast")
	}
}

func (ptr *QVideoWindowControl) SetContrast(contrast int) {
	defer qt.Recovering("QVideoWindowControl::setContrast")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_SetContrast(ptr.Pointer(), C.int(int32(contrast)))
	}
}

//export callbackQVideoWindowControl_SetDisplayRect
func callbackQVideoWindowControl_SetDisplayRect(ptr unsafe.Pointer, rect unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWindowControl::setDisplayRect")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::setDisplayRect"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	}

}

func (ptr *QVideoWindowControl) ConnectSetDisplayRect(f func(rect *core.QRect)) {
	defer qt.Recovering("connect QVideoWindowControl::setDisplayRect")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setDisplayRect", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSetDisplayRect(rect core.QRect_ITF) {
	defer qt.Recovering("disconnect QVideoWindowControl::setDisplayRect")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setDisplayRect")
	}
}

func (ptr *QVideoWindowControl) SetDisplayRect(rect core.QRect_ITF) {
	defer qt.Recovering("QVideoWindowControl::setDisplayRect")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_SetDisplayRect(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

//export callbackQVideoWindowControl_SetFullScreen
func callbackQVideoWindowControl_SetFullScreen(ptr unsafe.Pointer, fullScreen C.char) {
	defer qt.Recovering("callback QVideoWindowControl::setFullScreen")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::setFullScreen"); signal != nil {
		signal.(func(bool))(int8(fullScreen) != 0)
	}

}

func (ptr *QVideoWindowControl) ConnectSetFullScreen(f func(fullScreen bool)) {
	defer qt.Recovering("connect QVideoWindowControl::setFullScreen")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setFullScreen", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSetFullScreen(fullScreen bool) {
	defer qt.Recovering("disconnect QVideoWindowControl::setFullScreen")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setFullScreen")
	}
}

func (ptr *QVideoWindowControl) SetFullScreen(fullScreen bool) {
	defer qt.Recovering("QVideoWindowControl::setFullScreen")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_SetFullScreen(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fullScreen))))
	}
}

//export callbackQVideoWindowControl_SetHue
func callbackQVideoWindowControl_SetHue(ptr unsafe.Pointer, hue C.int) {
	defer qt.Recovering("callback QVideoWindowControl::setHue")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::setHue"); signal != nil {
		signal.(func(int))(int(int32(hue)))
	}

}

func (ptr *QVideoWindowControl) ConnectSetHue(f func(hue int)) {
	defer qt.Recovering("connect QVideoWindowControl::setHue")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setHue", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSetHue(hue int) {
	defer qt.Recovering("disconnect QVideoWindowControl::setHue")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setHue")
	}
}

func (ptr *QVideoWindowControl) SetHue(hue int) {
	defer qt.Recovering("QVideoWindowControl::setHue")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_SetHue(ptr.Pointer(), C.int(int32(hue)))
	}
}

//export callbackQVideoWindowControl_SetSaturation
func callbackQVideoWindowControl_SetSaturation(ptr unsafe.Pointer, saturation C.int) {
	defer qt.Recovering("callback QVideoWindowControl::setSaturation")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::setSaturation"); signal != nil {
		signal.(func(int))(int(int32(saturation)))
	}

}

func (ptr *QVideoWindowControl) ConnectSetSaturation(f func(saturation int)) {
	defer qt.Recovering("connect QVideoWindowControl::setSaturation")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setSaturation", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSetSaturation(saturation int) {
	defer qt.Recovering("disconnect QVideoWindowControl::setSaturation")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setSaturation")
	}
}

func (ptr *QVideoWindowControl) SetSaturation(saturation int) {
	defer qt.Recovering("QVideoWindowControl::setSaturation")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_SetSaturation(ptr.Pointer(), C.int(int32(saturation)))
	}
}

//export callbackQVideoWindowControl_SetWinId
func callbackQVideoWindowControl_SetWinId(ptr unsafe.Pointer, id C.uintptr_t) {
	defer qt.Recovering("callback QVideoWindowControl::setWinId")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::setWinId"); signal != nil {
		signal.(func(uintptr))(uintptr(id))
	}

}

func (ptr *QVideoWindowControl) ConnectSetWinId(f func(id uintptr)) {
	defer qt.Recovering("connect QVideoWindowControl::setWinId")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setWinId", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectSetWinId(id uintptr) {
	defer qt.Recovering("disconnect QVideoWindowControl::setWinId")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::setWinId")
	}
}

func (ptr *QVideoWindowControl) SetWinId(id uintptr) {
	defer qt.Recovering("QVideoWindowControl::setWinId")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_SetWinId(ptr.Pointer(), C.uintptr_t(id))
	}
}

//export callbackQVideoWindowControl_WinId
func callbackQVideoWindowControl_WinId(ptr unsafe.Pointer) C.uintptr_t {
	defer qt.Recovering("callback QVideoWindowControl::winId")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::winId"); signal != nil {
		return C.uintptr_t(signal.(func() uintptr)())
	}

	return C.uintptr_t(0)
}

func (ptr *QVideoWindowControl) ConnectWinId(f func() uintptr) {
	defer qt.Recovering("connect QVideoWindowControl::winId")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::winId", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectWinId() {
	defer qt.Recovering("disconnect QVideoWindowControl::winId")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::winId")
	}
}

func (ptr *QVideoWindowControl) WinId() uintptr {
	defer qt.Recovering("QVideoWindowControl::winId")

	if ptr.Pointer() != nil {
		return uintptr(C.QVideoWindowControl_WinId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVideoWindowControl) DestroyQVideoWindowControl() {
	defer qt.Recovering("QVideoWindowControl::~QVideoWindowControl")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DestroyQVideoWindowControl(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoWindowControl_TimerEvent
func callbackQVideoWindowControl_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWindowControl::timerEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQVideoWindowControlFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QVideoWindowControl) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	defer qt.Recovering("connect QVideoWindowControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::timerEvent", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectTimerEvent() {
	defer qt.Recovering("disconnect QVideoWindowControl::timerEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::timerEvent")
	}
}

func (ptr *QVideoWindowControl) TimerEvent(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoWindowControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QVideoWindowControl) TimerEventDefault(event core.QTimerEvent_ITF) {
	defer qt.Recovering("QVideoWindowControl::timerEvent")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQVideoWindowControl_ChildEvent
func callbackQVideoWindowControl_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWindowControl::childEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQVideoWindowControlFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QVideoWindowControl) ConnectChildEvent(f func(event *core.QChildEvent)) {
	defer qt.Recovering("connect QVideoWindowControl::childEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::childEvent", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectChildEvent() {
	defer qt.Recovering("disconnect QVideoWindowControl::childEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::childEvent")
	}
}

func (ptr *QVideoWindowControl) ChildEvent(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoWindowControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QVideoWindowControl) ChildEventDefault(event core.QChildEvent_ITF) {
	defer qt.Recovering("QVideoWindowControl::childEvent")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQVideoWindowControl_ConnectNotify
func callbackQVideoWindowControl_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWindowControl::connectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoWindowControlFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoWindowControl) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoWindowControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::connectNotify", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectConnectNotify() {
	defer qt.Recovering("disconnect QVideoWindowControl::connectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::connectNotify")
	}
}

func (ptr *QVideoWindowControl) ConnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWindowControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoWindowControl) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWindowControl::connectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoWindowControl_CustomEvent
func callbackQVideoWindowControl_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWindowControl::customEvent")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQVideoWindowControlFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QVideoWindowControl) ConnectCustomEvent(f func(event *core.QEvent)) {
	defer qt.Recovering("connect QVideoWindowControl::customEvent")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::customEvent", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectCustomEvent() {
	defer qt.Recovering("disconnect QVideoWindowControl::customEvent")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::customEvent")
	}
}

func (ptr *QVideoWindowControl) CustomEvent(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWindowControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QVideoWindowControl) CustomEventDefault(event core.QEvent_ITF) {
	defer qt.Recovering("QVideoWindowControl::customEvent")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQVideoWindowControl_DeleteLater
func callbackQVideoWindowControl_DeleteLater(ptr unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWindowControl::deleteLater")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQVideoWindowControlFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QVideoWindowControl) ConnectDeleteLater(f func()) {
	defer qt.Recovering("connect QVideoWindowControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::deleteLater", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectDeleteLater() {
	defer qt.Recovering("disconnect QVideoWindowControl::deleteLater")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::deleteLater")
	}
}

func (ptr *QVideoWindowControl) DeleteLater() {
	defer qt.Recovering("QVideoWindowControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QVideoWindowControl) DeleteLaterDefault() {
	defer qt.Recovering("QVideoWindowControl::deleteLater")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVideoWindowControl_DisconnectNotify
func callbackQVideoWindowControl_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	defer qt.Recovering("callback QVideoWindowControl::disconnectNotify")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQVideoWindowControlFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVideoWindowControl) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	defer qt.Recovering("connect QVideoWindowControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::disconnectNotify", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectDisconnectNotify() {
	defer qt.Recovering("disconnect QVideoWindowControl::disconnectNotify")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::disconnectNotify")
	}
}

func (ptr *QVideoWindowControl) DisconnectNotify(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWindowControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVideoWindowControl) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	defer qt.Recovering("QVideoWindowControl::disconnectNotify")

	if ptr.Pointer() != nil {
		C.QVideoWindowControl_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQVideoWindowControl_Event
func callbackQVideoWindowControl_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWindowControl::event")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWindowControlFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QVideoWindowControl) ConnectEvent(f func(e *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoWindowControl::event")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::event", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectEvent() {
	defer qt.Recovering("disconnect QVideoWindowControl::event")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::event")
	}
}

func (ptr *QVideoWindowControl) Event(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWindowControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoWindowControl_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QVideoWindowControl) EventDefault(e core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWindowControl::event")

	if ptr.Pointer() != nil {
		return C.QVideoWindowControl_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQVideoWindowControl_EventFilter
func callbackQVideoWindowControl_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	defer qt.Recovering("callback QVideoWindowControl::eventFilter")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVideoWindowControlFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QVideoWindowControl) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	defer qt.Recovering("connect QVideoWindowControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::eventFilter", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectEventFilter() {
	defer qt.Recovering("disconnect QVideoWindowControl::eventFilter")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::eventFilter")
	}
}

func (ptr *QVideoWindowControl) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWindowControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoWindowControl_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QVideoWindowControl) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	defer qt.Recovering("QVideoWindowControl::eventFilter")

	if ptr.Pointer() != nil {
		return C.QVideoWindowControl_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVideoWindowControl_MetaObject
func callbackQVideoWindowControl_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	defer qt.Recovering("callback QVideoWindowControl::metaObject")

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVideoWindowControl::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQVideoWindowControlFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QVideoWindowControl) ConnectMetaObject(f func() *core.QMetaObject) {
	defer qt.Recovering("connect QVideoWindowControl::metaObject")

	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::metaObject", f)
	}
}

func (ptr *QVideoWindowControl) DisconnectMetaObject() {
	defer qt.Recovering("disconnect QVideoWindowControl::metaObject")

	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVideoWindowControl::metaObject")
	}
}

func (ptr *QVideoWindowControl) MetaObject() *core.QMetaObject {
	defer qt.Recovering("QVideoWindowControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoWindowControl_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVideoWindowControl) MetaObjectDefault() *core.QMetaObject {
	defer qt.Recovering("QVideoWindowControl::metaObject")

	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QVideoWindowControl_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}
