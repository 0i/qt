########################################			FUNCTIONS			########################################
&{activeThreadCount QThreadPool::activeThreadCount commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.cpp non plain false false  int int activeThreadCount() const [] }
&{expiryTimeout QThreadPool::expiryTimeout commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.cpp non plain false false  int int expiryTimeout() const [] }
&{maxThreadCount QThreadPool::maxThreadCount commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.cpp non plain false false  int int maxThreadCount() const [] }
&{setExpiryTimeout QThreadPool::setExpiryTimeout commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.cpp non plain false false  void void setExpiryTimeout(int expiryTimeout) [0xc82076f580] }
&{setMaxThreadCount QThreadPool::setMaxThreadCount commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.cpp non plain false false  void void setMaxThreadCount(int maxThreadCount) [0xc82076f7c0] }
&{QThreadPool QThreadPool::QThreadPool commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non constructor false false   QThreadPool(QObject *parent) [0xc82076f9e0] }
&{cancel QThreadPool::cancel commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non plain false false  void void cancel(QRunnable *runnable) [0xc82076fc00] }
&{clear QThreadPool::clear commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non plain false false  void void clear() [] }
&{globalInstance QThreadPool::globalInstance commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non plain true false  QThreadPool * QThreadPool * globalInstance() [] }
&{releaseThread QThreadPool::releaseThread commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non plain false false  void void releaseThread() [] }
&{reserveThread QThreadPool::reserveThread commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non plain false false  void void reserveThread() [] }
&{start QThreadPool::start commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non plain false false  void void start(QRunnable *runnable, int priority) [0xc82077e280 0xc82077e300] }
&{tryStart QThreadPool::tryStart commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non plain false false  bool bool tryStart(QRunnable *runnable) [0xc82077e4c0] }
&{waitForDone QThreadPool::waitForDone commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non plain false false  bool bool waitForDone(int msecs) [0xc82077e6e0] }
&{~QThreadPool QThreadPool::~QThreadPool commendable public /work/build/qt5_workdir/w/s/qtbase/src/corelib/thread/qthreadpool.h non destructor false false   ~QThreadPool() [] }
########################################			ENUMS			########################################
