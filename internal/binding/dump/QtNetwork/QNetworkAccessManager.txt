########################################			FUNCTIONS			########################################
&{proxyFactory QNetworkAccessManager::proxyFactory commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.cpp non plain false false  QNetworkProxyFactory * QNetworkProxyFactory * proxyFactory() const [] }
&{QNetworkAccessManager QNetworkAccessManager::QNetworkAccessManager commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non constructor false false   QNetworkAccessManager(QObject *parent) [0xc8235e8ba0] }
&{activeConfiguration QNetworkAccessManager::activeConfiguration commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkConfiguration QNetworkConfiguration activeConfiguration() const [] }
&{authenticationRequired QNetworkAccessManager::authenticationRequired commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void authenticationRequired(QNetworkReply *reply, QAuthenticator *authenticator) [0xc8235e90a0 0xc8235e9120] }
&{cache QNetworkAccessManager::cache commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QAbstractNetworkCache * QAbstractNetworkCache * cache() const [] }
&{clearAccessCache QNetworkAccessManager::clearAccessCache commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void clearAccessCache() [] }
&{configuration QNetworkAccessManager::configuration commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkConfiguration QNetworkConfiguration configuration() const [] }
&{connectToHost QNetworkAccessManager::connectToHost commendable unsupported_cppType /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void connectToHost(const QString &hostName, quint16 port) [0xc8235e9680 0xc8235e9740] }
&{connectToHostEncrypted QNetworkAccessManager::connectToHostEncrypted commendable unsupported_cppType /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void connectToHostEncrypted(const QString &hostName, quint16 port, const QSslConfiguration &sslConfiguration) [0xc8235e9960 0xc8235e99e0 0xc8235e9ac0] }
&{cookieJar QNetworkAccessManager::cookieJar commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkCookieJar * QNetworkCookieJar * cookieJar() const [] }
&{createRequest QNetworkAccessManager::createRequest commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h impure plain false false  QNetworkReply * QNetworkReply * createRequest(Operation op, const QNetworkRequest &req, QIODevice *outgoingData) [0xc8235e9e60 0xc8235e9f00 0xc8235e9fc0] }
&{deleteResource QNetworkAccessManager::deleteResource commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * deleteResource(const QNetworkRequest &request) [0xc8235d6160] }
&{encrypted QNetworkAccessManager::encrypted commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void encrypted(QNetworkReply *reply) [0xc8235d63c0] }
&{finished QNetworkAccessManager::finished commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void finished(QNetworkReply *reply) [0xc8235d6620] }
&{get QNetworkAccessManager::get commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * get(const QNetworkRequest &request) [0xc8235d6820] }
&{head QNetworkAccessManager::head commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * head(const QNetworkRequest &request) [0xc8235d6aa0] }
&{networkAccessible QNetworkAccessManager::networkAccessible commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  NetworkAccessibility NetworkAccessibility networkAccessible() const [] }
&{networkAccessibleChanged QNetworkAccessManager::networkAccessibleChanged commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility accessible) [0xc8235d6f80] }
&{post QNetworkAccessManager::post commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false true 3 QNetworkReply * QNetworkReply * post(const QNetworkRequest &request, QHttpMultiPart *multiPart) [0xc8235d73a0 0xc8235d7460] }
&{post QNetworkAccessManager::post commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * post(const QNetworkRequest &request, QIODevice *data) [0xc8235d7700 0xc8235d7820] }
&{post QNetworkAccessManager::post commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false true 2 QNetworkReply * QNetworkReply * post(const QNetworkRequest &request, const QByteArray &data) [0xc8235d7a80 0xc8235d7ba0] }
&{preSharedKeyAuthenticationRequired QNetworkAccessManager::preSharedKeyAuthenticationRequired commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void preSharedKeyAuthenticationRequired(QNetworkReply *reply, QSslPreSharedKeyAuthenticator *authenticator) [0xc8235d7d80 0xc8235d7e20] }
&{proxy QNetworkAccessManager::proxy commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkProxy QNetworkProxy proxy() const [] }
&{proxyAuthenticationRequired QNetworkAccessManager::proxyAuthenticationRequired commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void proxyAuthenticationRequired(const QNetworkProxy &proxy, QAuthenticator *authenticator) [0xc8235c0280 0xc8235c0380] }
&{put QNetworkAccessManager::put commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false true 2 QNetworkReply * QNetworkReply * put(const QNetworkRequest &request, QHttpMultiPart *multiPart) [0xc8235c0600 0xc8235c0740] }
&{put QNetworkAccessManager::put commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * put(const QNetworkRequest &request, QIODevice *data) [0xc8235c09c0 0xc8235c0a80] }
&{put QNetworkAccessManager::put commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false true 3 QNetworkReply * QNetworkReply * put(const QNetworkRequest &request, const QByteArray &data) [0xc8235c0d20 0xc8235c0e40] }
&{sendCustomRequest QNetworkAccessManager::sendCustomRequest commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * sendCustomRequest(const QNetworkRequest &request, const QByteArray &verb, QIODevice *data) [0xc8235c10c0 0xc8235c11e0 0xc8235c12e0] }
&{setCache QNetworkAccessManager::setCache commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setCache(QAbstractNetworkCache *cache) [0xc8235c1520] }
&{setConfiguration QNetworkAccessManager::setConfiguration commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setConfiguration(const QNetworkConfiguration &config) [0xc8235c16e0] }
&{setCookieJar QNetworkAccessManager::setCookieJar commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setCookieJar(QNetworkCookieJar *cookieJar) [0xc8235c1920] }
&{setNetworkAccessible QNetworkAccessManager::setNetworkAccessible commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setNetworkAccessible(NetworkAccessibility accessible) [0xc8235c1c20] }
&{setProxy QNetworkAccessManager::setProxy commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setProxy(const QNetworkProxy &proxy) [0xc8235c1f00] }
&{setProxyFactory QNetworkAccessManager::setProxyFactory commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setProxyFactory(QNetworkProxyFactory *factory) [0xc8235a8100] }
&{sslErrors QNetworkAccessManager::sslErrors commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void sslErrors(QNetworkReply *reply, const QList<QSslError> &errors) [0xc8235a8380 0xc8235a8440] }
&{supportedSchemes QNetworkAccessManager::supportedSchemes commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QStringList QStringList supportedSchemes() const [] }
&{supportedSchemesImplementation QNetworkAccessManager::supportedSchemesImplementation commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non slot false false  QStringList QStringList supportedSchemesImplementation() const [] }
&{~QNetworkAccessManager QNetworkAccessManager::~QNetworkAccessManager commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non destructor false false   ~QNetworkAccessManager() [] }
########################################			ENUMS			########################################
&{NetworkAccessibility QNetworkAccessManager::NetworkAccessibility commendable public  [0xc8235e83c0 0xc8235e8480 0xc8235e8500] false}
&{Operation QNetworkAccessManager::Operation commendable public  [0xc8235e86c0 0xc8235e8740 0xc8235e87c0 0xc8235e8840 0xc8235e88e0 0xc8235e8960 0xc8235e89e0] false}
