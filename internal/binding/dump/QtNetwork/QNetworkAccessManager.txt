########################################			FUNCTIONS			########################################
&{proxyFactory QNetworkAccessManager::proxyFactory commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.cpp non plain false false  QNetworkProxyFactory * QNetworkProxyFactory * proxyFactory() const [] }
&{QNetworkAccessManager QNetworkAccessManager::QNetworkAccessManager commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non constructor false false   QNetworkAccessManager(QObject *parent) [0xc82200c1c0] }
&{activeConfiguration QNetworkAccessManager::activeConfiguration commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkConfiguration QNetworkConfiguration activeConfiguration() const [] }
&{authenticationRequired QNetworkAccessManager::authenticationRequired commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void authenticationRequired(QNetworkReply *reply, QAuthenticator *authenticator) [0xc82200c800 0xc82200c880] }
&{cache QNetworkAccessManager::cache commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QAbstractNetworkCache * QAbstractNetworkCache * cache() const [] }
&{clearAccessCache QNetworkAccessManager::clearAccessCache commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void clearAccessCache() [] }
&{configuration QNetworkAccessManager::configuration commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkConfiguration QNetworkConfiguration configuration() const [] }
&{connectToHost QNetworkAccessManager::connectToHost commendable unsupported_goInput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void connectToHost(const QString &hostName, quint16 port) [0xc82200ce80 0xc82200cf00] }
&{connectToHostEncrypted QNetworkAccessManager::connectToHostEncrypted commendable unsupported_goInput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void connectToHostEncrypted(const QString &hostName, quint16 port, const QSslConfiguration &sslConfiguration) [0xc82200d140 0xc82200d200 0xc82200d2c0] }
&{cookieJar QNetworkAccessManager::cookieJar commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkCookieJar * QNetworkCookieJar * cookieJar() const [] }
&{createRequest QNetworkAccessManager::createRequest commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h impure plain false false  QNetworkReply * QNetworkReply * createRequest(Operation op, const QNetworkRequest &req, QIODevice *outgoingData) [0xc82200d680 0xc82200d720 0xc82200d840] }
&{deleteResource QNetworkAccessManager::deleteResource commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * deleteResource(const QNetworkRequest &request) [0xc82200da20] }
&{encrypted QNetworkAccessManager::encrypted commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void encrypted(QNetworkReply *reply) [0xc82200dc80] }
&{finished QNetworkAccessManager::finished commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void finished(QNetworkReply *reply) [0xc82200df00] }
&{get QNetworkAccessManager::get commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * get(const QNetworkRequest &request) [0xc822e9a120] }
&{head QNetworkAccessManager::head commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * head(const QNetworkRequest &request) [0xc822e9a480] }
&{networkAccessible QNetworkAccessManager::networkAccessible commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  NetworkAccessibility NetworkAccessibility networkAccessible() const [] }
&{networkAccessibleChanged QNetworkAccessManager::networkAccessibleChanged commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility accessible) [0xc822e9a960] }
&{post QNetworkAccessManager::post commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false true 3 QNetworkReply * QNetworkReply * post(const QNetworkRequest &request, QHttpMultiPart *multiPart) [0xc822e9ad80 0xc822e9ae60] }
&{post QNetworkAccessManager::post commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * post(const QNetworkRequest &request, QIODevice *data) [0xc822e9b120 0xc822e9b1e0] }
&{post QNetworkAccessManager::post commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false true 2 QNetworkReply * QNetworkReply * post(const QNetworkRequest &request, const QByteArray &data) [0xc822e9b460 0xc822e9b5a0] }
&{preSharedKeyAuthenticationRequired QNetworkAccessManager::preSharedKeyAuthenticationRequired commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void preSharedKeyAuthenticationRequired(QNetworkReply *reply, QSslPreSharedKeyAuthenticator *authenticator) [0xc822e9b7a0 0xc822e9b8a0] }
&{proxy QNetworkAccessManager::proxy commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkProxy QNetworkProxy proxy() const [] }
&{proxyAuthenticationRequired QNetworkAccessManager::proxyAuthenticationRequired commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void proxyAuthenticationRequired(const QNetworkProxy &proxy, QAuthenticator *authenticator) [0xc822e9bd00 0xc822e9be00] }
&{put QNetworkAccessManager::put commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false true 2 QNetworkReply * QNetworkReply * put(const QNetworkRequest &request, QHttpMultiPart *multiPart) [0xc8220240c0 0xc8220241c0] }
&{put QNetworkAccessManager::put commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * put(const QNetworkRequest &request, QIODevice *data) [0xc822024440 0xc822024520] }
&{put QNetworkAccessManager::put commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false true 3 QNetworkReply * QNetworkReply * put(const QNetworkRequest &request, const QByteArray &data) [0xc8220247c0 0xc8220248c0] }
&{sendCustomRequest QNetworkAccessManager::sendCustomRequest commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QNetworkReply * QNetworkReply * sendCustomRequest(const QNetworkRequest &request, const QByteArray &verb, QIODevice *data) [0xc822024b80 0xc822024ca0 0xc822024d60] }
&{setCache QNetworkAccessManager::setCache commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setCache(QAbstractNetworkCache *cache) [0xc822024fe0] }
&{setConfiguration QNetworkAccessManager::setConfiguration commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setConfiguration(const QNetworkConfiguration &config) [0xc8220251e0] }
&{setCookieJar QNetworkAccessManager::setCookieJar commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setCookieJar(QNetworkCookieJar *cookieJar) [0xc822025460] }
&{setNetworkAccessible QNetworkAccessManager::setNetworkAccessible commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setNetworkAccessible(NetworkAccessibility accessible) [0xc822025740] }
&{setProxy QNetworkAccessManager::setProxy commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setProxy(const QNetworkProxy &proxy) [0xc822025a00] }
&{setProxyFactory QNetworkAccessManager::setProxyFactory commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  void void setProxyFactory(QNetworkProxyFactory *factory) [0xc822025c60] }
&{sslErrors QNetworkAccessManager::sslErrors commendable unsupported_cgoOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non signal false false  void void sslErrors(QNetworkReply *reply, const QList<QSslError> &errors) [0xc822025ec0 0xc822025fa0] }
&{supportedSchemes QNetworkAccessManager::supportedSchemes commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non plain false false  QStringList QStringList supportedSchemes() const [] }
&{supportedSchemesImplementation QNetworkAccessManager::supportedSchemesImplementation commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non slot false false  QStringList QStringList supportedSchemesImplementation() const [] }
&{~QNetworkAccessManager QNetworkAccessManager::~QNetworkAccessManager commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkaccessmanager.h non destructor false false   ~QNetworkAccessManager() [] }
########################################			ENUMS			########################################
&{NetworkAccessibility QNetworkAccessManager::NetworkAccessibility commendable public  [0xc821f8f820 0xc821f8f8e0 0xc821f8f980] false}
&{Operation QNetworkAccessManager::Operation commendable public  [0xc821f8fbe0 0xc821f8fc60 0xc821f8fce0 0xc821f8fda0 0xc821f8fe60 0xc821f8ff20 0xc821f8ffc0] false}
