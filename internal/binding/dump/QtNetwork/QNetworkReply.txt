########################################			FUNCTIONS			########################################
&{ignoreSslErrorsImplementation QNetworkReply::ignoreSslErrorsImplementation commendable unsupported_goInput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.cpp impure plain false false  void void ignoreSslErrorsImplementation(const QList<QSslError> &errors) [0xc82355a6c0] }
&{setSslConfigurationImplementation QNetworkReply::setSslConfigurationImplementation commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.cpp impure plain false false  void void setSslConfigurationImplementation(const QSslConfiguration &configuration) [0xc82355a8e0] }
&{sslConfigurationImplementation QNetworkReply::sslConfigurationImplementation commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.cpp impure plain false false  void void sslConfigurationImplementation(QSslConfiguration &configuration) const [0xc82355abe0] }
&{QNetworkReply QNetworkReply::QNetworkReply commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non constructor false false   QNetworkReply(QObject *parent) [0xc8235491a0] }
&{abort QNetworkReply::abort commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h pure slot false false  void void abort() [] }
&{attribute QNetworkReply::attribute commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QVariant QVariant attribute(QNetworkRequest::Attribute code) const [0xc823549840] }
&{close QNetworkReply::close commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h impure plain false false  void void close() [] }
&{downloadProgress QNetworkReply::downloadProgress commendable unsupported_cgoOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void downloadProgress(qint64 bytesReceived, qint64 bytesTotal) [0xc823549c20 0xc823549cc0] }
&{encrypted QNetworkReply::encrypted commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void encrypted() [] }
&{error QNetworkReply::error commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false true 2 void void error(QNetworkReply::NetworkError code) [0xc823534060] }
&{error QNetworkReply::error commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  NetworkError NetworkError error() const [] }
&{finished QNetworkReply::finished commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void finished() [] }
&{hasRawHeader QNetworkReply::hasRawHeader commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  bool bool hasRawHeader(const QByteArray &headerName) const [0xc823534620] }
&{header QNetworkReply::header commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QVariant QVariant header(QNetworkRequest::KnownHeaders header) const [0xc8235348c0] }
&{ignoreSslErrors QNetworkReply::ignoreSslErrors commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h impure slot false false  void void ignoreSslErrors() [] }
&{ignoreSslErrors QNetworkReply::ignoreSslErrors commendable unsupported_goInput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false true 2 void void ignoreSslErrors(const QList<QSslError> &errors) [0xc823534cc0] }
&{isFinished QNetworkReply::isFinished commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  bool bool isFinished() const [] }
&{isRunning QNetworkReply::isRunning commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  bool bool isRunning() const [] }
&{manager QNetworkReply::manager commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QNetworkAccessManager * QNetworkAccessManager * manager() const [] }
&{metaDataChanged QNetworkReply::metaDataChanged commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void metaDataChanged() [] }
&{operation QNetworkReply::operation commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QNetworkAccessManager::Operation QNetworkAccessManager::Operation operation() const [] }
&{preSharedKeyAuthenticationRequired QNetworkReply::preSharedKeyAuthenticationRequired commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void preSharedKeyAuthenticationRequired(QSslPreSharedKeyAuthenticator *authenticator) [0xc823535780] }
&{rawHeader QNetworkReply::rawHeader commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QByteArray QByteArray rawHeader(const QByteArray &headerName) const [0xc823535a80] }
&{rawHeaderList QNetworkReply::rawHeaderList commendable unsupported_GoBodyOutputFailed /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QList<QByteArray> QList<QByteArray> rawHeaderList() const [] }
&{rawHeaderPairs QNetworkReply::rawHeaderPairs commendable unsupported_GoBodyOutputFailed /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  const QList<RawHeaderPair> & const QList<RawHeaderPair> & rawHeaderPairs() const [] }
&{readBufferSize QNetworkReply::readBufferSize commendable unsupported_GoBodyOutputFailed /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  qint64 qint64 readBufferSize() const [] }
&{request QNetworkReply::request commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QNetworkRequest QNetworkRequest request() const [] }
&{setAttribute QNetworkReply::setAttribute commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setAttribute(QNetworkRequest::Attribute code, const QVariant &value) [0xc823524200 0xc823524300] }
&{setError QNetworkReply::setError commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setError(NetworkError errorCode, const QString &errorString) [0xc823524540 0xc8235245c0] }
&{setFinished QNetworkReply::setFinished commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setFinished(bool finished) [0xc823524880] }
&{setHeader QNetworkReply::setHeader commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &value) [0xc823524b40 0xc823524c20] }
&{setOperation QNetworkReply::setOperation commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setOperation(QNetworkAccessManager::Operation operation) [0xc823524e60] }
&{setRawHeader QNetworkReply::setRawHeader commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setRawHeader(const QByteArray &headerName, const QByteArray &value) [0xc823525080 0xc823525160] }
&{setReadBufferSize QNetworkReply::setReadBufferSize commendable unsupported_goInput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h impure plain false false  void void setReadBufferSize(qint64 size) [0xc823525420] }
&{setRequest QNetworkReply::setRequest commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setRequest(const QNetworkRequest &request) [0xc823525600] }
&{setSslConfiguration QNetworkReply::setSslConfiguration commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setSslConfiguration(const QSslConfiguration &config) [0xc823525800] }
&{setUrl QNetworkReply::setUrl commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setUrl(const QUrl &url) [0xc823525b00] }
&{sslConfiguration QNetworkReply::sslConfiguration commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QSslConfiguration QSslConfiguration sslConfiguration() const [] }
&{sslErrors QNetworkReply::sslErrors commendable unsupported_cgoOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void sslErrors(const QList<QSslError> &errors) [0xc823525ee0] }
&{uploadProgress QNetworkReply::uploadProgress commendable unsupported_cgoOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void uploadProgress(qint64 bytesSent, qint64 bytesTotal) [0xc823506100 0xc8235061a0] }
&{url QNetworkReply::url commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QUrl QUrl url() const [] }
&{~QNetworkReply QNetworkReply::~QNetworkReply commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non destructor false false   ~QNetworkReply() [] }
########################################			ENUMS			########################################
&{NetworkError QNetworkReply::NetworkError commendable public  [0xc82355ae80 0xc82355af40 0xc82355b060 0xc82355b1c0 0xc82355b2c0 0xc82355b3a0 0xc82355b4c0 0xc82355b600 0xc82355b720 0xc82355b860 0xc82355b940 0xc82355ba20 0xc82355bb20 0xc82355bc40 0xc82355bd80 0xc82355be80 0xc82355bfc0 0xc8235480a0 0xc823548160 0xc823548200 0xc8235482e0 0xc8235483c0 0xc8235484e0 0xc8235485c0 0xc8235486a0 0xc8235487c0 0xc8235488e0 0xc8235489c0 0xc823548a80 0xc823548ba0 0xc823548cc0 0xc823548de0] false}
