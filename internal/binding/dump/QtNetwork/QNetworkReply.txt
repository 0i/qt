########################################			FUNCTIONS			########################################
&{ignoreSslErrorsImplementation QNetworkReply::ignoreSslErrorsImplementation commendable unsupported_cppType /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.cpp impure plain false false  void void ignoreSslErrorsImplementation(const QList<QSslError> &errors) [0xc822a30a20] }
&{setSslConfigurationImplementation QNetworkReply::setSslConfigurationImplementation commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.cpp impure plain false false  void void setSslConfigurationImplementation(const QSslConfiguration &configuration) [0xc822a30c80] }
&{sslConfigurationImplementation QNetworkReply::sslConfigurationImplementation commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.cpp impure plain false false  void void sslConfigurationImplementation(QSslConfiguration &configuration) const [0xc822a30f60] }
&{QNetworkReply QNetworkReply::QNetworkReply commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non constructor false false   QNetworkReply(QObject *parent) [0xc821fcd740] }
&{abort QNetworkReply::abort commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h pure slot false false  void void abort() [] }
&{attribute QNetworkReply::attribute commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QVariant QVariant attribute(QNetworkRequest::Attribute code) const [0xc821fcde40] }
&{close QNetworkReply::close commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h impure plain false false  void void close() [] }
&{downloadProgress QNetworkReply::downloadProgress commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void downloadProgress(qint64 bytesReceived, qint64 bytesTotal) [0xc821d361e0 0xc821d36280] }
&{encrypted QNetworkReply::encrypted commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void encrypted() [] }
&{error QNetworkReply::error commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false true 2 void void error(QNetworkReply::NetworkError code) [0xc821d36620] }
&{error QNetworkReply::error commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  NetworkError NetworkError error() const [] }
&{finished QNetworkReply::finished commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void finished() [] }
&{hasRawHeader QNetworkReply::hasRawHeader commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  bool bool hasRawHeader(const QByteArray &headerName) const [0xc821d36b60] }
&{header QNetworkReply::header commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QVariant QVariant header(QNetworkRequest::KnownHeaders header) const [0xc821d36e20] }
&{ignoreSslErrors QNetworkReply::ignoreSslErrors commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h impure slot false false  void void ignoreSslErrors() [] }
&{ignoreSslErrors QNetworkReply::ignoreSslErrors commendable unsupported_cppType /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false true 2 void void ignoreSslErrors(const QList<QSslError> &errors) [0xc821d37260] }
&{isFinished QNetworkReply::isFinished commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  bool bool isFinished() const [] }
&{isRunning QNetworkReply::isRunning commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  bool bool isRunning() const [] }
&{manager QNetworkReply::manager commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QNetworkAccessManager * QNetworkAccessManager * manager() const [] }
&{metaDataChanged QNetworkReply::metaDataChanged commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void metaDataChanged() [] }
&{operation QNetworkReply::operation commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QNetworkAccessManager::Operation QNetworkAccessManager::Operation operation() const [] }
&{preSharedKeyAuthenticationRequired QNetworkReply::preSharedKeyAuthenticationRequired commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void preSharedKeyAuthenticationRequired(QSslPreSharedKeyAuthenticator *authenticator) [0xc821d37e00] }
&{rawHeader QNetworkReply::rawHeader commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QByteArray QByteArray rawHeader(const QByteArray &headerName) const [0xc821d5e0c0] }
&{rawHeaderList QNetworkReply::rawHeaderList commendable unsupported_cppType /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QList<QByteArray> QList<QByteArray> rawHeaderList() const [] }
&{rawHeaderPairs QNetworkReply::rawHeaderPairs commendable unsupported_cppType /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  const QList<RawHeaderPair> & const QList<RawHeaderPair> & rawHeaderPairs() const [] }
&{readBufferSize QNetworkReply::readBufferSize commendable unsupported_cppType /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  qint64 qint64 readBufferSize() const [] }
&{request QNetworkReply::request commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QNetworkRequest QNetworkRequest request() const [] }
&{setAttribute QNetworkReply::setAttribute commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setAttribute(QNetworkRequest::Attribute code, const QVariant &value) [0xc821d5e980 0xc821d5ea60] }
&{setError QNetworkReply::setError commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setError(NetworkError errorCode, const QString &errorString) [0xc821d5eca0 0xc821d5ed40] }
&{setFinished QNetworkReply::setFinished commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setFinished(bool finished) [0xc821d5f000] }
&{setHeader QNetworkReply::setHeader commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &value) [0xc821d5f280 0xc821d5f3c0] }
&{setOperation QNetworkReply::setOperation commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setOperation(QNetworkAccessManager::Operation operation) [0xc821d5f620] }
&{setRawHeader QNetworkReply::setRawHeader commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setRawHeader(const QByteArray &headerName, const QByteArray &value) [0xc821d5f8c0 0xc821d5fa00] }
&{setReadBufferSize QNetworkReply::setReadBufferSize commendable unsupported_cppType /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h impure plain false false  void void setReadBufferSize(qint64 size) [0xc821d5fd00] }
&{setRequest QNetworkReply::setRequest commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setRequest(const QNetworkRequest &request) [0xc821d5ff60] }
&{setSslConfiguration QNetworkReply::setSslConfiguration commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setSslConfiguration(const QSslConfiguration &config) [0xc822a26200] }
&{setUrl QNetworkReply::setUrl commendable protected /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  void void setUrl(const QUrl &url) [0xc822a264e0] }
&{sslConfiguration QNetworkReply::sslConfiguration commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QSslConfiguration QSslConfiguration sslConfiguration() const [] }
&{sslErrors QNetworkReply::sslErrors commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void sslErrors(const QList<QSslError> &errors) [0xc822a26900] }
&{uploadProgress QNetworkReply::uploadProgress commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non signal false false  void void uploadProgress(qint64 bytesSent, qint64 bytesTotal) [0xc822a26b40 0xc822a26c20] }
&{url QNetworkReply::url commendable unsupported_cppOutput /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non plain false false  QUrl QUrl url() const [] }
&{~QNetworkReply QNetworkReply::~QNetworkReply commendable public /work/build/qt5_workdir/w/s/qtbase/src/network/access/qnetworkreply.h non destructor false false   ~QNetworkReply() [] }
########################################			ENUMS			########################################
&{NetworkError QNetworkReply::NetworkError commendable public  [0xc822a31240 0xc822a31300 0xc822a31440 0xc822a31560 0xc822a31680 0xc822a31760 0xc822a31880 0xc822a319c0 0xc822a31b00 0xc822a31c40 0xc822a31d60 0xc822a31e80 0xc822a31fc0 0xc821fcc0e0 0xc821fcc200 0xc821fcc300 0xc821fcc480 0xc821fcc580 0xc821fcc680 0xc821fcc760 0xc821fcc840 0xc821fcc960 0xc821fcca80 0xc821fccb60 0xc821fccc20 0xc821fccd60 0xc821fcce80 0xc821fccf60 0xc821fcd020 0xc821fcd160 0xc821fcd260 0xc821fcd360] false}
